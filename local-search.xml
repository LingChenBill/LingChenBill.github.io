<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>pms-题目集-01</title>
    <link href="/2022/12/31/pms-topic-set-01/"/>
    <url>/2022/12/31/pms-topic-set-01/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="pms-题目集-01"><a href="#pms-题目集-01" class="headerlink" title="pms-题目集-01"></a>pms-题目集-01</h3><h4 id="1-职能型组织"><a href="#1-职能型组织" class="headerlink" title="1.职能型组织"></a>1.职能型组织</h4><ul><li>项目经理的权利 - 很小或没有</li><li>组织中全职参与项目工作的职员比例 - 没有</li><li>项目经理的职位 - 部分时间</li><li>项目经理的一般头衔 - 项目协调员/项目主管</li><li>项目管理行政人员 - 部分时间</li></ul><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pms-topic-set-01/001.png" alt="001"></p><pre><code class="hljs bash">[单选]某公司下设硬件研发部、软件研发部、结构设计部、生产车间等部门，当执行项目遇到硬件问题时，参与项目人员先向自己部门的领导反馈，由部门领导再和硬件部门经理沟通，该组织结构类型的缺点是:().A. 组织横向之间的联系薄弱，部门间协调难度大B. 管理成本高，多头领导，难以监测和控制C. 项目环境比较封闭，不利于沟通、技术知识等共享D. 员工缺乏事业上的连续性和保障解析: A从题目中，可以分析出，该公司是职能型组织，职能型组织结构的缺点是组织横向之间的联系薄弱，部门间协调难度大;B  - 管理成本高多头领导难以监测和控制是矩阵型组织的缺点;CD - 项目环境比较封闭，不利于沟通、技术知识等共享，员工缺乏事业上的连续性和保障是项目型组织的缺点.</code></pre><p><u><strong>PS: 本文为笔记, 仅供学习与参考.</strong></u></p>]]></content>
    
    
    <categories>
      
      <category>pms</category>
      
      <category>topic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pms</tag>
      
      <tag>topic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20221231_Africa&#39;s path to clean mobility -- driven by motorcycles</title>
    <link href="/2022/12/31/20221231-Africa-s-path-to-clean-mobility-driven-by-motorcycles/"/>
    <url>/2022/12/31/20221231-Africa-s-path-to-clean-mobility-driven-by-motorcycles/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Africa’s-path-to-clean-mobility-–-driven-by-motorcycles"><a href="#Africa’s-path-to-clean-mobility-–-driven-by-motorcycles" class="headerlink" title="Africa’s path to clean mobility – driven by motorcycles"></a>Africa’s path to clean mobility – driven by motorcycles</h3><p>00:00</p><p>I join you from Lagos, Nigeria, one of the largest cities in Africa.<br>By 2050, Lagos will outgrow many of the largest cities of the world, including New York and Mexico City, and will be home to over 32 million people.<br>By that same date, Nigeria will be home to more people than the United States. But there is a problem.<br>Lagos and other African megacities suffer, or are plagued by, limited road infrastructure, pollution, congestion and poor safety conditions.<br>This makes it very difficult for people to get to work, especially in low-income communities, where poverty infrastructure gaps are pervasive.</p><pre><code class="hljs bash">我来自尼日利亚拉各斯，非洲最大的城市之一.到2050年，拉各斯将超过世界上许多最大的城市，包括纽约和墨西哥城，人口将超过3200万.到同一天，尼日利亚的人口将超过美国. 但有一个问题.拉各斯和其他非洲大城市遭受或受到道路基础设施有限、污染、拥堵和安全条件差的困扰.这使得人们很难找到工作，特别是在低收入社区，那里的贫困基础设施差距非常普遍.</code></pre><p>00:48</p><p>Enter the African motorcycle taxi driver.<br>Driving on two and three wheels, they race through the congested streets of Africa, getting people and goods to where they need to be.<br>Unfortunately, these drivers are excluded from the formal economy.<br>Unable to afford to buy clean, efficient vehicles, they are left to rent old gas engines from exploitative loan sharks.<br>Because of this tough situation that these drivers endure, they are often left to fend for themselves.<br>Part of what they also endure and suffer is high cost of operations from these exploitative loan sharks.<br>And also, these drivers pollute the environment.<br>If nothing is done, pollution from two- and three-wheeled vehicles in Africa will hit 1.7 gigatonnes of emissions every year, according to our estimates.<br>This is equivalent to pollution from two million Boeing 737 airplanes, every single year.</p><pre><code class="hljs bash">进入非洲摩托车出租车司机.他们驾驶着两个和三个轮子，在非洲拥挤的街道上穿行，将人和货物运送到他们需要的地方.不幸的是，这些司机被排除在正规经济之外.由于买不起干净、高效的汽车，他们只能从剥削性的高利贷者那里租用老旧的汽油机.由于这些司机忍受着这种艰难的处境，他们往往只能自食其力.他们还忍受和遭受的部分原因是这些剥削性高利贷者的高额运营成本.此外，这些司机还会污染环境.根据我们的估计，如果不采取任何措施，非洲两轮和三轮汽车的污染每年将达到170亿吨.这相当于每年200万架波音737飞机造成的污染.</code></pre><p>01:53</p><p>I left my engineering job in 2013 to go to MIT, where I met my cofounder, Chinedu Azodoh, a fellow engineer with similar dreams.<br>We bonded about the realization that Africa was being left behind in the global transition to clean mobility.<br>Inspired by the work of other innovators around the world, we chose to embark on a journey to create a three-part solution,<br>which provides motorcycle taxi drivers in Africa access to electric vehicles, battery swaps and maintenance and also emergency assistance.</p><pre><code class="hljs bash">2013年，我离开了我的工程工作，去了麻省理工学院，在那里我遇到了我的联合创始人Chinedu Azodoh，一位有着类似梦想的工程师同事.我们意识到非洲在向清洁流动的全球过渡中被甩在了后面.在世界各地其他创新者的工作启发下，我们选择踏上了创建三部分解决方案的征程，该方案为非洲的摩托车出租车司机提供电动汽车、电池更换和维护以及紧急援助.</code></pre><p>02:30</p><p>Here is how it works. Drivers sign up on the platform and instantly, they get access to an electric motorcycle and a full battery swap.<br>So therefore, they’re able to save up and earn money to buy those vehicles.<br>In addition, we also help lower their risks by providing them access to emergency response, health insurance and maintenance plans.<br>This represents an integrated approach to the design, manufacturing, financing and operations of an electric mobility platform targeted at highly vulnerable, informal and unbanked people groups.<br>The revenue from the drivers covers the cost of the electric fleet and the batteries, while the cost of R and D and technology is covered by our partners, including foundations, nonprofits and investors.</p><pre><code class="hljs bash">下面是它的工作原理. 司机在平台上注册后，立即可以使用电动摩托车和全电池更换.因此，他们能够储蓄并挣钱购买这些车辆. 此外，我们还为他们提供应急响应、健康保险和维护计划，帮助他们降低风险.这是针对高度脆弱、非正规和无银行人群的电动移动平台的设计、制造、融资和运营的综合方法.驾驶员的收入包括电动车队和电池的成本，而研发和技术的成本则由我们的合作伙伴（包括基金会、非营利组织和投资者）承担.</code></pre><p>03:25</p><p>Meet Baba Gbenro, one of our drivers.<br>Before signing up on our platform, he was a smallholder farmer, earning three dollars a day in the Gbamu Gbamu community in southwestern Nigeria.<br>Tragedy struck when Baba Gbenro lost his first son.<br>Without help, he struggled to transport farm produce and therefore could not make ends meet.<br>After signing up on our platform, he immediately got access to an electric motorcycle plus a fully charged battery on a daily basis.<br>This enabled him to be able to transport people in his community, make a little bit more money and also meet his obligations, including sending his younger son to school.<br>Our platform enabled him to increase his net income, on a daily basis, from three dollars to six dollars.</p><pre><code class="hljs bash">认识我们的司机之一Baba Gbenro.在加入我们的平台之前，他是一名小农，在尼日利亚西南部的巴穆-巴穆社区每天挣三美元.Baba Gbenro失去了第一个儿子，悲剧降临了.没有帮助，他很难运输农产品，因此入不敷出.在我们的平台上注册后，他立即可以每天使用一辆电动摩托车和一个充满电的电池.这使他能够运送社区里的人，多挣一点钱，并履行义务，包括送小儿子上学.我们的平台使他每天的净收入从3美元增加到6美元.</code></pre><p>04:14</p><p>To date, our platform has served a network of over 15,000 drivers, and our data shows that the average driver has about five dependents, meaning that our work has likely impacted over 75,000 livelihoods.</p><pre><code class="hljs bash">到目前为止，我们的平台已经为超过15000名司机提供服务，我们的数据显示，平均司机大约有五名家属，这意味着我们的工作可能影响了超过75000人的生计.</code></pre><p>04:28</p><p>By 2025, our goal is to provide electric mobility solutions to over 150,000 of drivers.<br>And if this idea really takes off, electric mobility innovators and climate entrepreneurs in Africa could jointly impact over 10 million motorcycle taxi drivers.<br>By doing this, we will be helping to move the world’s youngest and fastest-growing continent towards a more sustainable and a prosperous future, and we will be creating jobs and reducing emissions.</p><pre><code class="hljs bash">到2025年，我们的目标是为超过150000名驾驶员提供电动出行解决方案.如果这一想法真的成功，非洲的电动交通创新者和气候企业家将共同影响超过1000万摩托车出租车司机.通过这样做，我们将帮助这个世界上最年轻、增长最快的大陆走向更加可持续和繁荣的未来，我们将创造就业机会并减少排放.</code></pre><p>05:05</p><p>Thank you very much.</p><pre><code class="hljs bash">非常感谢.</code></pre><p>05:06</p><p>(Cheers and applause)</p><pre><code class="hljs bash">(欢呼和鼓掌)</code></pre><p>摘录地址:</p><pre><code class="hljs bash">https://www.ted.com/talks/adetayo_bamiduro_africa_s_path_to_clean_mobility_driven_by_motorcycles/transcript</code></pre><p><u><strong>本文为学习记录, 仅供学习与参考!</strong></u></p>]]></content>
    
    
    <categories>
      
      <category>english</category>
      
      <category>ted talks daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>english</tag>
      
      <tag>ted talks daily</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3 ways to end a virus</title>
    <link href="/2022/12/30/20221230_3%20ways%20to%20end%20a%20virus/"/>
    <url>/2022/12/30/20221230_3%20ways%20to%20end%20a%20virus/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="3-ways-to-end-a-virus"><a href="#3-ways-to-end-a-virus" class="headerlink" title="3 ways to end a virus"></a>3 ways to end a virus</h3><p>00:07</p><p>It’s spring 2021. The Alpha variant of the coronavirus has spread rapidly, becoming the dominant variant worldwide.<br>But another, more transmissible variant is about to appear— Delta. What happens when two variants clash?</p><pre><code class="hljs bash">现在是2021春天. 新冠病毒的阿尔法变种已迅速传播，成为全球主要变种.但另一种更具传染性的变种即将出现——德尔塔. 当两种变体发生冲突时会发生什么？</code></pre><p>00:22</p><p>Let’s do a thought experiment.<br>Suppose that the variants reach a hypothetical isolated city of 1 million people who are completely susceptible to both viruses on the same day.<br>When a person here is infected with Alpha, they transmit it to, on average, 5 close contacts,<br>then begin to feel sick and immediately isolate themselves for the rest of the simulation.<br>The same thing happens with Delta, except that an infected person transmits it to, on average, 7.5 close contacts.</p><pre><code class="hljs bash">让我们做一个思想实验。假设这些变种在同一天到达一个假设的100万人的孤立城市，他们对这两种病毒都非常敏感.当这里的一个人感染阿尔法病毒时，他们平均会将其传播给5名密切接触者，然后开始感到不舒服，并立即将自己隔离，以进行模拟的其余部分.Delta也会发生同样的情况，只是感染者平均会将其传染给7.5名密切接触者.</code></pre><p>00:53</p><p>What would you guess happens next?</p><pre><code class="hljs bash">你猜接下来会发生什么？</code></pre><p>00:56</p><p>After six days, Alpha will have infected 15,625 people. Delta will have infected more than 10 times as many.<br>Just 20 hours later, Delta will have infected the rest of the population— all before Alpha could infect 6% of it.<br>With no one left to infect, Alpha dies out.</p><pre><code class="hljs bash">六天后，阿尔法将感染15625人. Delta的感染人数将是其10倍以上.仅仅20小时后，德尔塔就会感染其余的人群，而这一切都是在阿尔法感染6%之前发生的.在没有人感染的情况下，阿尔法就会死亡.</code></pre><p>01:17</p><p>This model is drastically simplified, but it accurately reflects one thing that did happen in real life:<br>when both variants competed, Delta drove Alpha towards extinction in a matter of weeks.</p><pre><code class="hljs bash">这个模型被大大简化了，但它准确地反映了现实生活中发生的一件事：当两种变体竞争时，Delta在几周内将Alpha推向灭绝.</code></pre><p>01:29</p><p>Viruses are wildly successful organisms.<br>There are about 100 million times as many virus particles on Earth as there are stars in the observable universe.<br>Even so, viruses can and do go extinct.</p><pre><code class="hljs bash">病毒是非常成功的生物. 地球上的病毒粒子数量大约是可观测宇宙中恒星数量的1亿倍.即使如此，病毒也可以而且确实会灭绝。</code></pre><p>01:45</p><p>There are three main ways that can happen.</p><pre><code class="hljs bash">有三种主要的方式可以发生.</code></pre><p>01:48</p><p>First, a virus could run out of hosts.</p><pre><code class="hljs bash">首先，病毒可能会耗尽宿主.</code></pre><p>01:51</p><p>This might have happened in early 2020 to a flu lineage known as B/Yamagata.<br>When much of the world shut down, social distanced, and wore masks to slow the spread of COVID 19,<br>that dramatically reduced the number of hosts available for B/Yamagata to infect.<br>It’ll take a few more flu seasons to know for sure if it’s truly extinct or just hiding out in an animal reservoir.</p><pre><code class="hljs bash">这可能发生在2020年初的流感谱系B/Yamagata.当世界大部分地区关闭、保持社交距离、戴口罩以减缓COVID-19的传播时，可供B/Yamagata感染的宿主数量急剧减少.还需要几个流感季节才能确定它是真的灭绝了，还是只是躲在动物水库里.</code></pre><p>02:15</p><p>Many viruses, as part of their life cycle, cause diseases severe enough to kill their hosts.<br>This can be a problem because if a virus kills all its hosts, it could— in theory— run out of hosts to infect and go extinct.</p><pre><code class="hljs bash">许多病毒作为其生命周期的一部分，会导致严重到足以杀死宿主的疾病.这可能是一个问题，因为如果一种病毒杀死了它的所有宿主，理论上它可能会耗尽宿主来感染并灭绝.</code></pre><p>02:29</p><p>This almost happened back in 1950s Australia.</p><pre><code class="hljs bash">这几乎发生在20世纪50年代的澳大利亚.</code></pre><p>02:34</p><p>At the time, Australia was overrun by the European rabbit— an invasive species—<br>so, in an attempt to control the population, scientists released a virus called myxoma,<br>which had been previously shown to be almost 100% lethal to European rabbits.<br>During the initial outbreak, as planned, tens, perhaps hundreds, of millions of European rabbits died.<br>But as the virus spread, it evolved a series of mutations that happened to make it less deadly, killing rabbits more slowly and killing fewer rabbits overall.<br>With more infected hosts hopping around, this strain of the virus was more likely to spread than its deadlier cousin.<br>And of course, rabbits evolved too, to mount better immune responses.</p><pre><code class="hljs bash">当时，澳大利亚被欧洲兔（一种入侵物种）入侵，因此，为了控制种群，科学家们释放了一种称为粘液瘤的病毒，此前已表明这种病毒对欧洲兔几乎100%致命.在最初的疫情暴发期间，按照计划，有数千万甚至数亿只欧洲兔子死亡.但随着病毒的传播，它进化出了一系列突变，碰巧使它的致命性降低，杀死兔子的速度变慢，总体上杀死的兔子也变少.随着更多受感染的宿主四处游走，这种病毒株比其致死的近亲更容易传播.当然，兔子也进化了，以产生更好的免疫反应.</code></pre><p>03:20</p><p>Overall, instead of killing every single rabbit, the virus evolved, the rabbit population bounced back, and both survived.</p><pre><code class="hljs bash">总的来说，病毒没有杀死每一只兔子，而是进化了，兔子数量反弹，两者都存活了下来.</code></pre><p>03:28</p><p>The second way a virus could go extinct is if humans fight back with an effective vaccine— and win.</p><pre><code class="hljs bash">病毒灭绝的第二种方式是人类用有效的疫苗进行反击，并取得胜利.</code></pre><p>03:35</p><p>Vaccination campaigns have driven two viruses essentially to extinction since vaccines were invented in the 1800s:<br>smallpox and rinderpest, which kills cattle. More on vaccination later.</p><pre><code class="hljs bash">自19世纪疫苗发明以来，疫苗接种运动已经导致两种病毒基本灭绝：天花和牛瘟，这两种病毒会杀死牛. 稍后将详细介绍疫苗接种.</code></pre><p>03:48</p><p>The third way a virus can go extinct is if it’s outcompeted by another virus or strain, like we saw earlier with Delta and Alpha.</p><pre><code class="hljs bash">病毒灭绝的第三种方式是，如果它被另一种病毒或毒株击败，就像我们之前在Delta和Alpha中看到的那样.</code></pre><p>03:56</p><p>By the way, viruses don’t always compete with each other.<br>A viral species can carve out its own distinct niche— for example, influenza infects your respiratory tract, and norovirus infects cells in your intestine,<br>so both of these viruses can co-exist.</p><pre><code class="hljs bash">顺便说一句，病毒并不总是相互竞争.一种病毒可以开辟出自己独特的生态位——例如，流感感染呼吸道，诺如病毒感染肠道细胞，因此这两种病毒可以共存.</code></pre><p>04:12</p><p>A virus’ ecological niche can be tiny: hepatitis B and hepatitis C viruses can infect the same cell—<br>hep B occupies the nucleus, and hep C occupies the cytoplasm.<br>In fact, epidemiologists estimate that 2 to 10% of people with hep C are also infected with hep B.</p><pre><code class="hljs bash">病毒的生态位可能很小：乙型肝炎病毒和丙型肝炎病毒可以感染同一个细胞——乙型肝炎病毒占据细胞核，丙型肝炎病毒占据细胞质.事实上，流行病学家估计，2%至10%的丙型肝炎患者也感染了乙型肝炎.</code></pre><p>04:33</p><p>So, will SARS-CoV-2— the species of virus that causes COVID 19— ever go extinct?</p><pre><code class="hljs bash">那么，SARS-CoV-2——一种导致COVID-19的病毒——会灭绝吗？</code></pre><p>04:40</p><p>Variants within the species will continue to arise.<br>Those variants might drive prior ones to extinction, or not.<br>Regardless of how the variants compete (or don’t), the species itself— to which all the variants belong— is pretty firmly established among humans.</p><pre><code class="hljs bash">物种内的变异将继续出现.这些变体可能会导致之前的物种灭绝，也可能不会.无论变种如何竞争（或不竞争），所有变种所属的物种本身在人类中都非常牢固.</code></pre><p>04:57</p><p>If we managed to vaccinate enough people, could we drive SARS-CoV-2 to extinction?<br>Our vaccination campaign against smallpox worked because the vaccine was highly protective against infection and smallpox had no close animal reservoir in which it could hide.<br>But SARS-CoV-2 can hide out in animals, and our current vaccines— while they provide excellent protection against severe illness and death— don’t prevent all infections.</p><pre><code class="hljs bash">如果我们成功地为足够多的人接种了疫苗，我们是否能将SARS-CoV-2推向灭绝？我们针对天花的疫苗接种活动之所以奏效，是因为疫苗对感染具有高度保护作用，而且天花没有可以隐藏的封闭动物库.但是SARS-CoV-2可以隐藏在动物体内，而我们目前的疫苗-虽然它们提供了预防严重疾病和死亡的极好保护-并不能预防所有感染.</code></pre><p>05:24</p><p>So, conceivably there are two ways that SARS-CoV-2— the entire species— could go extinct:</p><pre><code class="hljs bash">因此，可以想象SARS-CoV-2——整个物种——有两种可能灭绝：</code></pre><p>05:31</p><p>a cataclysmic disaster could kill us all.</p><pre><code class="hljs bash">一场灾难可能会把我们全部杀死.</code></pre><p>05:34</p><p>Or…</p><pre><code class="hljs bash">或者...</code></pre><p>05:35</p><p>We could invent a universal vaccine that prevents all SARS-CoV-2 infections— those caused by all the variants that currently exist and those that don’t.</p><pre><code class="hljs bash">我们可以发明一种通用的疫苗来预防所有SARS-CoV-2感染——那些由目前存在的所有变种和那些不存在的变种引起的感染.</code></pre><p>05:45</p><p>Let’s work toward that second option.</p><pre><code class="hljs bash">让我们朝着第二个选项努力.</code></pre><p>摘录地址:</p><pre><code class="hljs bash">https://www.ted.com/talks/ted_ed_3_ways_to_end_a_virus/transcript</code></pre><p><u><strong>本文为学习记录, 仅供学习与参考!</strong></u></p>]]></content>
    
    
    <categories>
      
      <category>english</category>
      
      <category>ted talks daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>english</tag>
      
      <tag>ted talks daily</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>idea插件与设置</title>
    <link href="/2022/12/04/idea-plugins-and-settings/"/>
    <url>/2022/12/04/idea-plugins-and-settings/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="idea插件与设置"><a href="#idea插件与设置" class="headerlink" title="idea插件与设置"></a>idea插件与设置</h3><h4 id="一-插件安装"><a href="#一-插件安装" class="headerlink" title="一. 插件安装"></a>一. 插件安装</h4><pre><code class="hljs bash">IdeaVim</code></pre><p>vim编辑工具.</p><pre><code class="hljs bash">Code With Me</code></pre><p>智能代码.</p><pre><code class="hljs bash">Alibaba Java Coding Guidelines</code></pre><p>阿里 Java 代码指导.</p><pre><code class="hljs bash">Markdown</code></pre><p>Markdown md工具.</p><pre><code class="hljs bash">CheckStyle-IDEA</code></pre><p>代码检查工具.</p><pre><code class="hljs bash">Grep Console</code></pre><p>检索项高亮.</p><pre><code class="hljs bash">CodeGlance Pro</code></pre><p>代码侧边栏设置工具.</p><pre><code class="hljs bash">Rainbow Brackets</code></pre><p>括号高亮工具.</p><h4 id="二-属性设置"><a href="#二-属性设置" class="headerlink" title="二. 属性设置"></a>二. 属性设置</h4><h5 id="1-tab2space设置"><a href="#1-tab2space设置" class="headerlink" title="1. tab2space设置"></a>1. tab2space设置</h5><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/idea_plugins_and_settings/001.png" alt="001"></p><h5 id="2-软件字体设置"><a href="#2-软件字体设置" class="headerlink" title="2. 软件字体设置"></a>2. 软件字体设置</h5><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/idea_plugins_and_settings/002.png" alt="002"></p>]]></content>
    
    
    <categories>
      
      <category>idea</category>
      
      <category>plugins</category>
      
    </categories>
    
    
    <tags>
      
      <tag>idea</tag>
      
      <tag>plugins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pycharm mac版-快捷键</title>
    <link href="/2022/11/09/pycharm-hotkey/"/>
    <url>/2022/11/09/pycharm-hotkey/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="pycharm-Mac版-快捷键"><a href="#pycharm-Mac版-快捷键" class="headerlink" title="pycharm Mac版-快捷键"></a>pycharm Mac版-快捷键</h3><h4 id="一-mac键说明"><a href="#一-mac键说明" class="headerlink" title="一.mac键说明"></a>一.mac键说明</h4><ul><li><code>⌘</code> Command</li><li><code>⇧</code> Shift</li><li><code>⌥</code> Option</li><li><code>⌃</code> Control</li><li><code>↩︎</code> Return/Enter</li><li><code>⌫</code> Delete</li><li><code>⌦</code> 向前删除键（Fn+Delete）</li><li><code>↑</code> 上箭头</li><li><code>↓</code> 下箭头</li><li><code>←</code> 左箭头</li><li><code>→</code> 右箭头</li><li><code>⇞</code> Page Up（Fn+↑）</li><li><code>⇟</code> Page Down（Fn+↓）</li><li><code>Home</code> Fn + ←</li><li><code>End</code> Fn + →</li><li><code>⇥</code> 右制表符（Tab键）</li><li><code>⇤</code> 左制表符（Shift+Tab）</li><li><code>⎋</code> Escape (Esc)</li></ul><h4 id="二-编辑"><a href="#二-编辑" class="headerlink" title="二.编辑"></a>二.编辑</h4><h5 id="1-窗口操作"><a href="#1-窗口操作" class="headerlink" title="1. 窗口操作"></a>1. 窗口操作</h5><pre><code class="hljs bash">`⇧` Shift + F4 : 开启代码独立窗口.`⌃` Control + Tab : 在窗口间进行切换.`⌘` Command+ w: 关闭当前标签窗口.</code></pre><h5 id="2-工具"><a href="#2-工具" class="headerlink" title="2. 工具"></a>2. 工具</h5><pre><code class="hljs bash">`⌘` Command+ 1: 切换到工程窗口.`⌘` Command+ e: 当前文件弹出，打开最近使用的文件列表.</code></pre>]]></content>
    
    
    <categories>
      
      <category>pycharm</category>
      
      <category>hotkey</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hotkey</tag>
      
      <tag>pycharm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The marvels and mysteries revealed by the James Webb Space Telescope</title>
    <link href="/2022/11/02/20221102_The%20marvels%20and%20mysteries%20revealed%20by%20the%20James%20Webb%20Space%20Telescope/"/>
    <url>/2022/11/02/20221102_The%20marvels%20and%20mysteries%20revealed%20by%20the%20James%20Webb%20Space%20Telescope/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="The-marvels-and-mysteries-revealed-by-the-James-Webb-Space-Telescope"><a href="#The-marvels-and-mysteries-revealed-by-the-James-Webb-Space-Telescope" class="headerlink" title="The marvels and mysteries revealed by the James Webb Space Telescope"></a>The marvels and mysteries revealed by the James Webb Space Telescope</h3><blockquote><p>詹姆斯·韦伯太空望远镜揭示的奇迹和谜团</p></blockquote><p>00:00</p><p>Nadia Drake: Well, I do want to ask you about the sharpest new shiny space telescope in the shed which happens to be here, the James Webb Space Telescope, or JWST.</p><pre><code class="hljs bash">纳迪娅·德雷克：好吧，我确实想问你关于棚里最锋利的新闪亮的太空望远镜，詹姆斯·韦伯太空望远镜，或者JWST。</code></pre><p>00:13</p><p>Heidi Hammel: We already knew back then in the late 80s, 1990s, that the universe was expanding.<br>And we knew that to see the very first galaxies and maybe even the first stars that ever formed in the universe – Because of the expansion of the universe, the light from those galaxies is likewise expanded, and it’s shifted from blue wavelengths to longer wavelengths, red wavelengths.<br>And so the concept then for the next generation space telescope was to build an advanced telescope that really focused on the infrared part of the spectrum, because that’s where we could see the first stars and the first galaxies.</p><pre><code class="hljs bash">海蒂·哈梅尔：我们早在80年代末、90年代就知道宇宙在膨胀。我们知道，要看到宇宙中最早的星系，甚至可能是最早形成的恒星——因为宇宙的膨胀，这些星系发出的光也同样膨胀，从蓝色波长转变为更长波长，红色波长。因此，下一代太空望远镜的概念是建造一个先进的望远镜，真正聚焦于光谱的红外部分，因为这是我们可以看到第一颗恒星和第一个星系的地方</code></pre><p>00:58</p><p>I knew that this telescope that was being built to find it, to probe the light from the first galaxies, would also be a fabulous tool to study Neptune and Uranus.<br>I mean, I just knew that because I knew it would be big enough. I knew that because it was a space telescope, the images would be stable and pristine.<br>And I knew that these wavelengths of light in the infrared had all sorts of interesting molecular signatures so that we could learn about the upper atmospheres of these planets. And so I’m like, “I’m in. I’ll do this.”<br>So in 2002, I wrote a proposal saying I would like to be an interdisciplinary scientist for this program to ensure that this telescope will be able to do solar system observations when it is launched.<br>And in 2003, my proposal was accepted, and that was how I formally became involved in this telescope.</p><pre><code class="hljs bash">我知道，为了寻找它，为了探测第一个星系发出的光而建造的望远镜，也将是研究海王星和天王星的绝佳工具。我的意思是，我只是知道，因为我知道它会足够大。我知道，因为这是一架太空望远镜，所以图像将是稳定和原始的。我知道这些红外波长的光有各种有趣的分子特征，所以我们可以了解这些行星的上层大气。所以我想，“我在里面，我会这样做的。”所以在2002年，我写了一份提案，说我想成为这个项目的一名跨学科科学家，以确保这架望远镜在发射时能够进行太阳系观测。2003年，我的提议被接受，这就是我正式参与这台望远镜的原因。</code></pre><p>01:57</p><p>So Webb – It’s different than Hubble. It’s a different kind of telescope for a number of reasons.<br>One is it’s a lot bigger than Hubble. It’s a six-and-a-half-meter mirror – the golden mirror, the collecting area – versus Hubble’s two point four.</p><pre><code class="hljs bash">所以韦伯，它和哈勃不同。这是一种不同的望远镜，原因有很多。一是它比哈勃大得多。这是一个六米半的镜子——金色的镜子，收集区——与哈勃的两点四相比。</code></pre><p>02:15</p><p>ND: It’s so big that it couldn’t be launched looking like that. It had to be all folded up.</p><pre><code class="hljs bash">ND：它太大了，不能像那样发射。它必须全部折叠起来。</code></pre><p>02:20</p><p>HH: That’s right. It had to be folded up. And that’s why the mirror is segments.</p><pre><code class="hljs bash">HH：没错。它必须折叠起来。这就是为什么镜子是分段的。</code></pre><p>02:25</p><p>ND: Yeah. HH: So that it could be folded up.</p><pre><code class="hljs bash">ND：是的。HH：这样它就可以折叠起来了。</code></pre><p>02:27</p><p>ND: Like a honeycomb. HH: Like a honeycomb, exactly.</p><pre><code class="hljs bash">ND：像蜂窝一样。HH：就像蜂巢一样。</code></pre><p>02:30</p><p>ND: But then it had to unfold in space.<br>And I remember how nervous people were about this process because it really was something that everything, every single step had to go right.</p><pre><code class="hljs bash">ND：但后来它不得不在太空中展开。我记得人们对这个过程是多么紧张，因为这真的是一件每件事，每一步都必须正确的事情。</code></pre><p>02:40</p><p>HH: Not only did the telescope have to fold up, but we – if you look at Webb, it’s got this huge contraption underneath it, which we call a sunshield. And that’s crucial for this telescope.</p><pre><code class="hljs bash">HH：不仅望远镜必须折叠起来，而且我们——如果你看韦伯，它下面有一个巨大的装置，我们称之为遮阳板。这对这架望远镜至关重要。</code></pre><p>02:51</p><p>ND: How did you feel as you were witnessing the deployment sequence?</p><pre><code class="hljs bash">ND：当你目睹部署顺序时，你有什么感觉？</code></pre><p>02:56</p><p>HH: I sure was nervous, just like everybody else.<br>There were several single point failures where if that thing didn’t unbolt or unfold, we didn’t have a working telescope anymore.<br>So it was extremely nerve-racking. But we had many years of testing because we knew that there was no fixing this telescope.<br>This telescope’s not in low earth orbit like Hubble.<br>The James Webb Space Telescope is a million miles away at a point called the L2 Point, and it was put out there deliberately because it needed to be cold.<br>It needed to have the sunshield to protect the telescope from the warmth of the Sun, the warmth of the Earth and even the warmth of our Moon.<br>So the sunshield is designed to be like an umbrella that protects it, a sun umbrella that keeps that telescope super cold.<br>So we couldn’t put it in low earth orbit because it’s just too warm in that environment.<br>You can’t sense infrared light when it’s hot. You have to have it cold.<br>By the way, that’s also why this telescope is completely exposed to the elements of space.<br>Most other telescopes have tubes that enclose them, and this one doesn’t. The mirrors are just sitting out there. ND: They’re just out there.</p><pre><code class="hljs bash">HH：我确实很紧张，就像其他人一样。有几次单点故障，如果这个东西没有松开或展开，我们就没有工作的望远镜了。所以这是非常令人紧张的。但我们进行了多年的测试，因为我们知道这台望远镜是无法修复的。这架望远镜不像哈勃望远镜那样在近地轨道上。詹姆斯·韦伯太空望远镜位于一百万英里外的L2点，它被故意放在那里，因为它需要冷却。它需要有遮阳板来保护望远镜免受太阳、地球甚至月球的温暖。因此，遮阳板的设计就像一把保护它的伞，一把让望远镜保持超冷的太阳伞。所以我们不能把它放在近地轨道上，因为在那个环境中它太温暖了。天气热的时候你感觉不到红外光。你得把它放凉。顺便说一句，这也是为什么这架望远镜完全暴露在太空中的原因。大多数其他望远镜都有管子将其包围，而这台没有。镜子就在外面。ND：他们就在外面。</code></pre><p>04:15</p><p>HH: They’re just sitting out there.</p><pre><code class="hljs bash">HH：他们只是坐在外面。</code></pre><p>04:17</p><p>ND: So the first deep field from JWST, I think the analogy I heard was that the image itself covers about the amount of space as a grain of rice on a fingertip held at arm’s length. Is that right?</p><pre><code class="hljs bash">ND：所以，JWST的第一个深场，我想我听到的类比是，图像本身覆盖了大约相当于一粒米粒放在指尖上，与手臂等长。是这样吗？</code></pre><p>04:32</p><p>HH: I heard a grain of sand, not a grain of rice.<br>But it’s the same concept, you know, that – yeah. If you – the piece of sky you see in that picture, if you were like standing in your backyard and looking up in the sky, that piece of sky is about the same size as a tiny grain of sand.<br>If you moved your grain of sand over to the left, you would see more galaxies, and over to the left again, more galaxies.<br>And anywhere you looked in the sky, it is filled with galaxies.</p><pre><code class="hljs bash">HH：我听到一粒沙子，而不是一粒大米。但这是同一个概念，你知道，是的。如果你——你在照片中看到的那片天空，如果你就像站在后院仰望天空，那片天空的大小和一粒小小的沙子差不多。如果你把一粒沙子移到左边，你会看到更多的星系，再移到左边会看到更多星系。你在天空中看到的任何地方，都充满了星系。</code></pre><p>05:04</p><p>ND: Just thousands and thousands in that one image alone.</p><pre><code class="hljs bash">ND：仅在这一张照片中就有成千上万。</code></pre><p>05:07</p><p>HH: Exactly. What I’m waiting for is the James Webb Space Telescope Deep Field, where we stare for days at a dark spot that we don’t know where anything is. What are we going to see? And then, think about that, going to be all over the whole sky.<br>Our universe is going to mentally expand at that moment when we get that deep field from James Webb Space Telescope. It’s going to be mind-blowing.</p><pre><code class="hljs bash">HH：没错。我正在等待的是詹姆斯·韦伯太空望远镜的深场，在那里我们盯着一个我们什么都不知道的黑点看了好几天。我们将看到什么？然后，想一想，整个天空都会是这样。当我们从詹姆斯·韦伯太空望远镜获得深场时，我们的宇宙将在精神上膨胀。这会让人大吃一惊。</code></pre><p>05:40</p><p>ND: I just think about it. Peering so far back in time to the beginning of the primordial cosmic murk.</p><pre><code class="hljs bash">ND：我只是想一想。遥遥无期地追溯到原始宇宙黑暗的开始。</code></pre><p>05:50</p><p>HH: Yeah.</p><pre><code class="hljs bash">HH：是的。</code></pre><p>05:51</p><p>ND: When stars and galaxies are just starting to turn on and how different the universe was and the fact that we humans on this one little planet Earth can craft an instrument that has the capability to let us see that, 13.5 billion years ago, or whatever it ends up being, is really phenomenal.</p><pre><code class="hljs bash">ND：当恒星和星系刚刚开始运转的时候，宇宙是多么的不同，我们这个小小的星球上的人类能够制造出一种仪器，它能够让我们看到，135亿年前，或者不管它最终是什么样子，这真的是非常惊人的。</code></pre><p>06:13</p><p>HH: Yeah. I view it as an example of what humanity can do when we work for the greater good, when we work as teams and we have a goal.<br>This project required thousands of people in multiple countries, multiple states, to take this vision and turn it into a concrete thing, this telescope.<br>And then launch it on a rocket, and then have the ability to use it, to probe from right in our local neighborhood all the way to the edge of the known universe and everything in between.</p><pre><code class="hljs bash">HH：是的。我认为这是一个例子，说明当我们为更大的利益工作时，当我们作为团队工作时，我们有一个目标时，人类可以做什么。这个项目需要来自多个国家、多个州的数千人，把这个愿景变成一个具体的东西，这个望远镜。然后用火箭发射它，然后有能力使用它，从我们附近的地方一直探测到已知宇宙的边缘以及其间的一切。</code></pre><p>06:53</p><p>ND: Yeah. HH: It’s amazing to me. And everybody had a role to play.<br>The beryllium miners who mined the beryllium we used to make the mirrors and the cable wrappers who wrapped the cables to allow this thing to move, and the people who built the different instruments.<br>We have a suite of four different instruments, cameras and spectrographs.<br>Both here, in Europe. You know, we all worked – in Canada. Canada made the fine guidance sensor that allows us to point this thing.<br>I mean, it’s a truly international effort and it all comes together to create this revolution in how we see the cosmos.</p><pre><code class="hljs bash">ND：是的。HH：这对我来说太棒了。每个人都有自己的角色。开采我们用来制造镜子的铍矿的矿工，包裹电缆以使其移动的电缆包，以及制造不同仪器的人。我们有一套四种不同的仪器、相机和摄谱仪。都在这里，在欧洲。你知道，我们都在加拿大工作。加拿大制造了精细的制导传感器，可以让我们指向这个东西。我的意思是，这是一项真正的国际努力，所有这些都汇集在一起，创造了我们如何看待宇宙的这场革命。</code></pre><p>07:38</p><p>ND: Do you have a favorite among the images that have been released so far?</p><pre><code class="hljs bash">ND：在目前已经发布的图片中，你有最喜欢的吗？</code></pre><p>07:43</p><p>HH: Well, they all have special aspects about them that make me go, “Wow!” In the case of the “Cosmic Cliffs” image, it’s beautiful, it’s blue in the dark and orange in the bottom.<br>And, you know, I get excited about images like that because not only are they tremendously beautiful and evocative in a poetic way, but those are places where stars are being born.<br>And some of the little pokey things that stick out, that give it some of its dramatic structure, you know, those are – that’s star birth in the making.<br>And I think that’s just so cool.</p><pre><code class="hljs bash">HH：嗯，他们都有自己的特殊之处，这让我不得不说：“哇！”在“宇宙悬崖”的图像中，它很漂亮，它在黑暗中是蓝色，在底部是橙色。而且，你知道，我对这样的图像感到兴奋，因为它们不仅以诗意的方式极其美丽和令人回味无穷，而且这些都是恒星诞生的地方。还有一些突出的小东西，给了它一些戏剧性的结构，你知道，这些是——这是正在诞生的明星。我觉得这太酷了。</code></pre><p>08:26</p><p>And particularly when we use our infrared cameras, we can look inside some of those knobs and see the stars that are being born.<br>And in some places, like the Orion Nebula – there was just an image released of the Orion Nebula – that’s places where planetary systems are forming.<br>We aren’t seeing the planets, but we’re seeing the swirling disks of dust and gas where those planets are being born.<br>And even some of these galaxy images, while they may be static, like the “Stephan’s Quintet” image, which is five galaxies – one of which is an interloper, it’s a foreground galaxy. It’s not part of the other crew.</p><pre><code class="hljs bash">特别是当我们使用红外相机时，我们可以看到这些旋钮的内部，看到正在诞生的恒星。在一些地方，比如猎户座星云，刚刚发布了一张猎户座星云的照片，这是行星系统正在形成的地方。我们没有看到行星，但我们看到了这些行星诞生的尘埃和气体的漩涡盘。甚至有些星系图像，虽然它们可能是静态的，比如“斯蒂芬五重奏”图像，它是五个星系——其中一个是闯入者，它是前景星系。这不是其他船员的一部分。</code></pre><p>09:05</p><p>ND: Just wanted to be in the shot.</p><pre><code class="hljs bash">ND：我只是想参与拍摄。</code></pre><p>09:07</p><p>HH: It’s just photobombing the other ones.<br>But the four that are part of a cluster, what you learn from James Webb Space Telescope is that in the regions where they are interacting and overlapping, those regions light up in the infrared.<br>Those are places where the dust and the gas and the existing stars of those other galaxies, when they are interacting, they are forming new stars.<br>They are creating new realms of star formation, and they just light up in the infrared in that image.</p><pre><code class="hljs bash">HH：这只是对其他照片的轰炸。但作为星团一部分的四个区域，你从詹姆斯·韦伯太空望远镜中了解到的是，在它们相互作用和重叠的区域，这些区域在红外线中发光。在这些地方，尘埃、气体和其他星系的现有恒星相互作用，形成新的恒星。他们正在创造恒星形成的新领域，他们只是在图像中的红外线中发光。</code></pre><p>09:44</p><p>ND: Yeah. And I just wonder, like, what’s missing from that picture? What can JWST fill in? I mean, how much more color can it add?</p><pre><code class="hljs bash">ND：是的。我只是想知道，比如，那张照片中缺少了什么？JWST可以填写什么？我的意思是，它还能增加多少颜色？</code></pre><p>09:54</p><p>HH: What JWST adds to our ongoing story is it adds new wavelengths of light that we haven’t had the sensitivity to study, and different wavelengths of light tell you different parts of this story.<br>And we also use tools in astronomy called spectrographs, and that is where we don’t just take pictures, but we actually take the light and we spread it out into its rainbow of colors.<br>And what we do is we look for what we call fingerprints in that light, if you will.<br>Certain atoms and molecules tend to absorb specific colors of light, just by the very nature of their construction, and their motion and vibration.<br>They absorb certain colors of light.<br>So by spreading the light out into a rainbow and looking for patterns in what light is missing, that tells you what molecules are there. And not only does it tell you [which] are there, it tells you their temperature.<br>It can tell you their pressures. By tracking carefully these lines in the spectrum, you can determine the motions of this material.<br>And so we don’t just have a static picture.<br>We can actually do three-dimensional tomography of astrophysical objects by using this spectral light information.<br>But as an astronomer, it’s not just the pictures. It is spreading that light out and looking into its constituents, that’s where the real, deep science takes place.<br>That’s where you get what stars are actually made of.<br>Like, helium, and the helium and hydrogen, and beryllium and even iron and nickel.<br>How do you know that? You can’t go there and weigh it. You learn it from the light.</p><pre><code class="hljs bash">HH：JWST为我们正在进行的故事添加了新的波长的光，我们还没有足够的敏感度来研究，不同波长的光告诉你这个故事的不同部分。我们还使用天文学中称为摄谱仪的工具，这是我们不只是拍照的地方，而是我们实际拍摄光线并将其传播成彩虹般的颜色。如果你愿意的话，我们所做的就是在这种光下寻找我们所说的指纹。某些原子和分子倾向于吸收特定颜色的光，这是因为它们的结构、运动和振动的本质。它们吸收某些颜色的光。因此，通过将光传播成彩虹，并寻找缺少的光的模式，这就告诉你有什么分子。它不仅告诉你那里有什么，还告诉你它们的温度。它可以告诉你他们的压力。通过仔细跟踪光谱中的这些线，你可以确定这种物质的运动。因此，我们不仅仅有一个静态的画面。我们实际上可以利用光谱光信息对天体物理物体进行三维层析成像。但作为一名天文学家，这不仅仅是照片。它正在传播这种光，并研究其成分，这就是真正的深层科学发生的地方。这就是你得到恒星真正组成的地方。比如氦，氦和氢，铍，甚至铁和镍。你怎么知道的？你不能去那里称重。你是从光中学到的。</code></pre><p>11:55</p><p>ND: Can you tell us about that instrument and what it might be able to show us about Uranus and Neptune and some of the other giant planets that we haven’t been able to see before? How is this telescope going to help us understand these worlds?</p><pre><code class="hljs bash">ND：你能告诉我们那台仪器的情况吗？它可能会向我们展示天王星、海王星以及其他一些我们以前没能看到的巨型行星的情况？这架望远镜将如何帮助我们了解这些世界？</code></pre><p>12:09</p><p>HH: Let’s say you wanted to study Jupiter’s rings, right? We know Jupiter has rings.<br>Voyager saw them. But we know most planetary rings change with time.<br>Trying to image the faint ring of Jupiter next to the incredibly bright planet of Jupiter is extraordinarily difficult.<br>The rings are a million times fainter than the planet, and they’re right next to it.<br>But James Webb Space Telescope, the sensitivity is so good and the imaging capability is so good that the scattered light from Jupiter does not spread even out to the local place where the rings are.<br>So in our first images, engineering images of Jupiter, that were taken just to test the scattered light on the camera – they took a couple of sharp, short images of Jupiter and moved Jupiter closer and closer to the fine guidance sensor to see if it would screw up our guiding – even in those short engineering images, the rings are right there.<br>Beautiful. Just totally resolved right next to the planet a million times brighter.</p><pre><code class="hljs bash">HH：假设你想研究木星环，对吧？我们知道木星有环。旅行者号看到了他们。但我们知道大多数行星环都是随时间变化的。试图在令人难以置信的明亮的木星旁边拍摄木星的微弱光环是非常困难的。这些光环比地球暗一百万倍，它们就在它旁边。但是詹姆斯·韦伯太空望远镜的灵敏度非常好，成像能力非常好，以至于木星的散射光甚至不会扩散到光环所在的地方。因此，在我们的第一张图像中，木星的工程图像，这是为了测试相机上的散射光而拍摄的。他们拍摄了几张木星的清晰、简短的图像，并将木星越来越靠近精细的导航传感器，看它是否会破坏我们的导航。即使在那些简短的工程图像中，环也就在那里。美丽的就在这颗亮了一百万倍的行星旁边，就完全消解了。</code></pre><p>13:22</p><p>ND: Well, can we talk about planets outside the solar system, too?</p><pre><code class="hljs bash">ND：那么，我们也可以谈谈太阳系以外的行星吗？</code></pre><p>13:26</p><p>HH: Sure. Yeah. What’s your favorite?</p><pre><code class="hljs bash">HH：当然。是啊. 你最喜欢什么？</code></pre><p>13:29</p><p>ND: What’s your favorite?</p><pre><code class="hljs bash">ND：你最喜欢什么？</code></pre><p>13:30</p><p>HH: Oh, I don’t know. I’ve got a couple of favorites.</p><pre><code class="hljs bash">HH：哦，我不知道。我有几个最喜欢的。</code></pre><p>13:34</p><p>ND: Yeah?</p><pre><code class="hljs bash">ND：是吗？</code></pre><p>13:35</p><p>HH: I think a lot of astronomers’ … favorite system right now is the TRAPPIST-1 system.</p><pre><code class="hljs bash">HH：我认为很多天文学家现在最喜欢的系统是TRAPPIST-1系统。</code></pre><p>13:40</p><p>ND: Yeah. Tell me about it.</p><pre><code class="hljs bash">ND：是的。可不是吗</code></pre><p>13:41</p><p>HH: TRAPPIST-1 is – that’s the name of the star.<br>TRAPPIST is the name of the survey, right? But it looked at this star and it discovered that there are at least seven planets orbiting this star.<br>And most of those planets seem to be Earth-sized.<br>In the TRAPPIST-1 system, several of the planets are the right distance from the host star that water could be liquid on the surface of them.<br>We call that the habitable zone. And you and I could have a long talk about what habitability actually means.<br>But in our solar system, at least on our Earth, the only place that we know life exists, there’s a lot of water.<br>And so when we’re talking about looking for habitable planets, we look at planets that are at the right distance from their host star that they could have water on them.<br>So that TRAPPIST system that we know that there are planets in potentially habitable region, and that those planets are roughly Earth-sized, they are everybody’s favorite right now for JWST to take a look at with our spectrographs.</p><pre><code class="hljs bash">HH:TRAPPIST-1是——这是恒星的名字。TRAPPIST是调查的名称，对吗？但它观察了这颗恒星，发现至少有七颗行星围绕这颗恒星运行。这些行星中的大多数看起来都和地球一样大。在TRAPPIST-1系统中，有几颗行星离主星的距离是正确的，因此它们表面的水可能是液体。我们称之为宜居区。你和我可以就宜居性到底意味着什么进行一次长谈。但在我们的太阳系，至少在我们的地球上，我们知道生命存在的唯一地方，有很多水。因此，当我们谈论寻找适合居住的行星时，我们会关注那些距离其主星合适的行星，这些行星上可能有水。因此，我们所知道的TRAPPIST系统，在潜在的可居住区域中有行星，这些行星大致与地球大小相同，它们是JWST现在最喜欢用我们的光谱仪来观察的。</code></pre><p>14:51</p><p>ND: Yeah. Do you think there is life beyond Earth somewhere? And if so, where?</p><pre><code class="hljs bash">ND：是的。你认为地球以外的某个地方有生命吗？如果是，在哪里？</code></pre><p>14:58</p><p>HH: OK, so let me answer the second question first.<br>This question of, “is there alien life out there?” I usually break it up into two things.<br>One is a thought experiment about the size of the universe, the scale of the universe, just how many stars there are in our galaxy.<br>And then how many galaxies? There’s billions of stars just in our local galaxy. And there’s billions of galaxies out there.<br>And we talk about whether or not life could have formed over the billions of years that our universe has existed with these billions of galaxies, each of which has billions of stars.<br>I say life has to exist somewhere out there. Somewhere. [It] has to be out there. Does that mean that aliens have come to Earth and visited us?<br>No, that’s a totally separate question. I just – it’s not a related question. That’s a more psychological question.<br>I’m more interested in the science aspect of the question.<br>I think we need to start with terrestrial-sized planets that are the right distance to have water on them, because those are the conditions required to create life as we know it on Earth.<br>And the only kind of life that we’ll initially recognize is going to be life like ours, I think.</p><pre><code class="hljs bash">HH：好的，让我先回答第二个问题。这个问题是，“外面有外星生命吗？”我通常把它分成两件事。一个是关于宇宙的大小、宇宙的规模以及我们银河系中有多少恒星的思想实验。那么有多少个星系？在我们的本地星系中有数十亿颗恒星。那里有数十亿个星系。我们谈论的是，在我们的宇宙中存在着数十亿个星系的数十亿年里，生命是否可能形成，每个星系都有数十亿颗恒星。我说生命必须存在于某处。在某处[它]一定在外面。这是否意味着外星人已经来到地球并造访了我们？不，这是一个完全不同的问题。我只是，这不是一个相关的问题。这是一个更为心理学的问题。我对这个问题的科学方面更感兴趣。我认为我们需要从地球大小的行星开始，这些行星离水的距离是合适的，因为这些是创造我们所知的地球生命所需的条件。我想，我们最初认识到的唯一一种生活就是像我们这样的生活。</code></pre><p>16:17</p><p>ND: So JWST is one tool that we can use in the search for life beyond Earth.<br>But there are others, including within our own solar system: some of the rovers that are on Mars, currently looking for signs of ancient biosignatures or ancient signs of alien life in the rocks there, but also some of the missions that are being planned to the outer solar system, and specifically some of the moons there.<br>I’m curious about whether you think it’s possible that life exists here in our local neighborhood, but beyond Earth.</p><pre><code class="hljs bash">ND：所以JWST是一个我们可以用来寻找地球以外生命的工具。但还有其他一些，包括在我们自己的太阳系内：一些在火星上的火星车，目前正在那里的岩石中寻找古代生物特征或外星生命的古代迹象，但也有一些计划前往外太阳系的任务，特别是那里的一些卫星。我很好奇，你是否认为生命可能存在于我们附近，但在地球之外。</code></pre><p>16:51</p><p>HH: Hey, anything is possible. I’ve learned in my career never to deal in absolutes because the universe is great at throwing curveballs at you.<br>You know, when we have our rovers on Mars and our orbiters that are doing really exquisite orbital imaging, it’s clear that there’s evidence that at one time there was liquid water on the surface of Mars.<br>There’s sedimentation, there’s a chemical evidence, there’s, you know, actually water trapped in the ices in the poles of Mars right now.<br>And so it could very well be that at some time in the past that planet had liquid water and may have had the conditions for life to form.<br>We don’t know. It could be that life formed there first and transmitted itself inward to us. We could be Martians.</p><pre><code class="hljs bash">嗨，任何事情都有可能。在我的职业生涯中，我学会了永远不要做绝对的事情，因为宇宙很擅长向你扔曲线球。你知道，当我们的火星车和轨道飞行器在火星上进行非常精细的轨道成像时，很明显有证据表明火星表面曾经存在液态水。有沉积，有化学证据，你知道，实际上现在火星两极的冰层中有水。因此，很可能是在过去的某个时候，这个星球有液态水，可能有生命形成的条件。我们不知道。可能是生命首先在那里形成，然后向我们传递。我们可能是火星人。</code></pre><p>17:44</p><p>ND: We could be Martians.</p><pre><code class="hljs bash">ND：我们可能是火星人。</code></pre><p>17:46</p><p>HH: I don’t know. We don’t know the answer to that.<br>Using our definition of looking at places where there’s liquid water, you know, people sort of initially confined it to a certain distance from the host star – sort of from the Earth just barely out to Mars and maybe inward a little bit, not quite as inward as Venus, but they kind of limited it to that region, saying, “Well, Earth is the Goldilocks zone.<br>That’s why it’s not too hot, not too cold. That’s why life is here.”<br>But we’ve learned more about our solar system with the spacecraft and telescopes.<br>And one of the things that we have learned with our missions to the Jupiter system and the Saturn system is that some of the larger moons in those systems do have evidence of liquid water in their interiors.<br>More water on Jupiter’s moon, more water inside Jupiter’s moon, Europa, that we have on the surface of the Earth, which is kind of crazy. Think about it.</p><pre><code class="hljs bash">HH：我不知道。我们不知道答案。使用我们对液态水存在的地方的定义，你知道，人们最初将其限制在离主星一定距离的范围内，从地球到火星只有一点距离，可能向内一点，不像金星那么向内，但他们把它限制在那个区域，说：“好吧，地球是金发女郎区。这就是为什么它不太热，也不太冷。这就是生活在这里的原因。”但我们已经通过航天器和望远镜了解了更多关于太阳系的信息。我们在木星系统和土星系统的任务中了解到的一件事是，这些系统中的一些较大卫星确实在内部有液态水的证据。木星月球上的水更多，木星月球木卫二内部的水也更多，这是地球表面上的水，这有点疯狂。想想看。</code></pre><p>18:48</p><p>ND: It’s mind-boggling to think about.</p><pre><code class="hljs bash">ND：想想都让人难以置信。</code></pre><p>18:50</p><p>HH: The question is, could life form in that water? And it gets back to what are the ingredients you need for life?<br>You need water, but you also need some kind of an energy source.<br>You need some kind of a surface on which life can do its chemical thing to form.<br>I’m not an astrobiologist, so I don’t know what the right lingo is, but you need to have a surface for stuff to happen.<br>And does Europa have those things? Well, it doesn’t have them on its surface.<br>Its surface is just ice. But we know from our various flybys of this – we were able to map out its structure, its internal structure, by looking at the magnetic field and how it interacts with it, by looking at gravitational deflection – we know that it probably has a solid core, and we also know that Europa is warm.</p><pre><code class="hljs bash">HH：问题是，在那片水域里会有生命吗？这又回到了你生活所需的成分是什么？你需要水，但你也需要某种能源。你需要一种表面，生命可以在其上进行化学反应来形成。我不是一个天体生物学家，所以我不知道什么是正确的行话，但你需要有一个表面来让事情发生。欧罗巴有这些东西吗？嗯，它的表面上没有它们。它的表面只是冰。但是我们从我们的多次飞行中知道--我们能够通过观察磁场以及磁场与磁场的相互作用，通过观察重力偏转来绘制出它的结构和内部结构--我们知道它可能有一个坚实的核心，我们也知道木卫二是温暖的。</code></pre><p>19:43</p><p>Now, why would this moon out there at Jupiter’s distance, why would it be warm, right?<br>Why would Jupiter’s other moon, Io, have active volcanoes? That’s really warm. That’s crazy warm.<br>And the answer is these moons actually interact with one another.<br>They do like a little resonant dance with each other as they orbit Jupiter.<br>And as they orbit one another and interact with one another, the gravity of these moons makes very tiny flexes in the shape of the moons, but the flexes repeat over time and that repeating warms the planet.<br>I used to illustrate this for kids with old credit cards. If you take an old credit card and you bend it, bend it, bend it, bend it, and you feel where you’re bending, it’s warm.<br>It’s really the same process. It’s that flexing is what warms these.<br>So for Europa in orbit around Jupiter, we have the water, we have the rocky surface deep inside. We have warmth.<br>We’ve got this energy source thing. So is it possible that life has formed there? Sure. Who am I to say no? I mean, what do I know? I mean, the universe is much more complex than I can imagine.</p><pre><code class="hljs bash">现在，为什么这个月亮会在木星的远处，为什么它会是温暖的，对吗？为什么木星的另一个卫星木卫一会有活火山？这真的很温暖。这是疯狂的温暖。答案是这些卫星实际上是相互作用的。当他们围绕木星运行时，他们确实喜欢彼此共鸣。当它们相互环绕并相互作用时，这些卫星的重力会使卫星的形状发生微小的弯曲，但随着时间的推移，这种弯曲会重复发生，这种重复会使地球变暖。我曾经为那些有旧信用卡的孩子们举例说明过这一点。如果你拿着一张旧信用卡，你把它弯了，弯了，再弯，再弯了，你会感觉到你在弯，它很温暖。这真的是一个过程。这是因为弯曲是温暖这些。因此，对于木卫二绕木星运行的轨道，我们有水，我们有岩石表面的深处。我们有温暖。我们有这个能源的东西。那么，那里有可能形成生命吗？当然我该对谁说不？我是说，我知道什么？我的意思是，宇宙比我想象的要复杂得多。</code></pre><p>21:03</p><p>So we are building a spacecraft called the Clipper spacecraft, which is going to go to the Jupiter system and it’s going to orbit Jupiter, but it’s going to do multiple flybys of the moon Europa.</p><pre><code class="hljs bash">因此，我们正在建造一艘名为克利伯飞船的飞船，它将前往木星系统，并将环绕木星运行，但它将多次飞越木卫二。</code></pre><p>21:15</p><p>ND: So, Heidi, word on the street is that you have a favorite moon. What is it? And there’s only one right answer to this question.</p><pre><code class="hljs bash">ND：所以，海蒂，街上的消息是你有一个最喜欢的月亮。这是怎么一回事？这个问题只有一个正确的答案。</code></pre><p>21:25</p><p>HH: My favorite moon is Triton.</p><pre><code class="hljs bash">HH：我最喜欢的月亮是海卫一。</code></pre><p>21:28</p><p>ND: It’s a pretty good one. HH: It’s not the right one, though?</p><pre><code class="hljs bash">ND：这是一个很好的例子。HH：不过，这不是正确的吗？</code></pre><p>21:31</p><p>ND: I was going to say Iapetus.</p><pre><code class="hljs bash">ND：我要说伊阿佩特斯。</code></pre><p>21:33</p><p>HH: No, no, no, no. We’re going to have a long conversation about that.</p><pre><code class="hljs bash">HH：不，不，不。我们会就此进行长时间的讨论。</code></pre><p>21:38</p><p>ND: Tell me why Triton is better.</p><pre><code class="hljs bash">ND：告诉我为什么海卫一更好。</code></pre><p>21:40</p><p>HH: Triton is such a cool moon. It goes in a retrograde orbit backwards around the planet.<br>We think it was actually a Kuiper Belt object that got too close to Neptune and was captured by Neptune. And it’s a big moon.<br>I mean, if you want Pluto to be a planet, I don’t know where you stand on that issue, but Triton is twin to Pluto.<br>So it’s like a planet in orbit around another planet.</p><pre><code class="hljs bash">海卫一是一个很酷的月亮。它以逆行轨道绕着地球反向运行。我们认为它实际上是一个柯伊伯带天体，距离海王星太近，被海王星捕获。这是一个大月亮。我的意思是，如果你想让冥王星成为一颗行星，我不知道你在这个问题上的立场，但海卫一是冥王星的双胞胎。所以它就像一颗围绕另一颗行星运行的行星。</code></pre><p>22:07</p><p>ND: But it’s going backwards.</p><pre><code class="hljs bash">ND：但这是在倒退。</code></pre><p>22:09</p><p>HH: But it’s going backwards around the planet. And when Voyager flew by in 1989, it actually flew kind of close, so we got a good view of one half of it.<br>And it’s got remarkable terrain and it has active cryovolcanoes on it.<br>There are volcanoes, ice volcanoes, erupting on Triton, like, in real time.<br>So that’s pretty amazing. I mean, it’s got an atmosphere, right? And it could have a liquid water ocean inside it.<br>So it may be an ocean world. And since we know it’s active, because we saw it with Voyager, that may be another abode for life.</p><pre><code class="hljs bash">HH：但它正在绕着地球倒退。当旅行者号在1989年飞过时，它实际上飞得有点近，所以我们看到了它的一半。它有着非凡的地形，上面有活跃的冰火山。海卫一上有火山，冰火山，实时喷发。这真是太神奇了。我是说，这里有气氛，对吧？它里面可能有一个液态水海洋。所以这可能是一个海洋世界。既然我们知道它是活跃的，因为我们在旅行者号上看到了它，那可能是另一个生活的居所。</code></pre><p>22:53</p><p>ND: So, Heidi, how did you become interested in astronomy? What was it that lit that fire for you?</p><pre><code class="hljs bash">ND：那么，海蒂，你是怎么对天文学感兴趣的？是什么为你点燃了火？</code></pre><p>22:59</p><p>HH: It’s kind of a goofy story, but I think in one sense, I became an astronomer because I used to get carsick.</p><pre><code class="hljs bash">HH：这是一个愚蠢的故事，但我认为从某种意义上说，我成为一名天文学家是因为我过去经常晕车。</code></pre><p>23:08</p><p>ND: Seriously?</p><pre><code class="hljs bash">ND：真的吗？</code></pre><p>23:09</p><p>HH: My family would go on road trips and, you know, I would be in the back of the car and I’d be so sick and I couldn’t read.<br>I couldn’t do anything except stare out the window. And at night, staring out the window, I started to recognize star patterns like the Big Dipper and Orion.<br>And I became more familiar with them because that’s all I could do is to stare out at the sky.<br>And so, you know, I think that sort of kindled an interest for me.<br>But I had a math teacher who one day took her class of four students aside and said, “Where are you young people planning to go to college?”<br>And when it came to my turn, I said, “Penn State.” She said, “Why?” And I said, “Well, my dad went to Penn State and I live in Pennsylvania.” She said, “I think you should apply to MIT.”</p><pre><code class="hljs bash">HH：我的家人会去公路旅行，你知道，我会坐在车的后面，我会病得很厉害，我不会看书。除了盯着窗外，我什么都做不了。晚上，我凝视着窗外，开始认出北斗七星和猎户座等恒星图案。我对它们越来越熟悉，因为我能做的就是凝视天空。所以，你知道的，我认为这激发了我的兴趣。但我有一位数学老师，有一天她把班上四个学生带到一边，说：“你们这些年轻人打算去哪里上大学？”轮到我的时候，我说：“宾州州立大学。”她说：“为什么？”我说：“嗯，我爸爸去了宾夕法尼亚州，我住在宾夕法尼亚州。”她说：“我想你应该申请麻省理工学院。”</code></pre><p>23:59</p><p>ND: Wow.</p><pre><code class="hljs bash">ND：哇。</code></pre><p>24:00</p><p>HH: And I said, “I don’t even know what that is.” So she encouraged me and I applied.<br>When it came time for letters of recommendation, I asked my chemistry teacher to write me a letter, and he said no.<br>And I said, “Why not?” He said, “You’ll never get into MIT.”<br>So I asked my history teacher instead, and she did write a letter and I did get into MIT.<br>And when I brought back my acceptance letter and showed it to my chemistry teacher – “Look, I got into MIT.” – he said, “It’s only because you’re a woman. They have quotas to fill.” This is in 1978 when people said things like that to your face.<br>That made me angry more than anything. So I was determined to go to MIT and – graduate, you know.</p><pre><code class="hljs bash">HH：我说，“我甚至不知道那是什么。”所以她鼓励我，我申请了。到了推荐信的时候，我让化学老师给我写一封信，他说不行。我说：“为什么不呢？”他说：“你永远进不了麻省理工学院。”于是我问了我的历史老师，她确实写了一封信，我也进了麻省理。当我把我的录取通知书拿回来给我的化学老师看时——“看，我考上了麻省理工学院。”——他说，“这只是因为你是一个女人。他们有配额要填补。”这是1978年，人们当着你的面说这样的话。这比什么都让我生气。所以我决定去麻省理工学院，然后毕业。</code></pre><p>24:52</p><p>ND: What are some of the most nagging unanswered questions in your mind that exist in astronomy?<br>Any field in astronomy, could be anywhere in the universe, close to home, far away. What bugs you? What keeps you up at night?</p><pre><code class="hljs bash">ND：在你的脑海中，天文学中存在的一些最烦人的未回答的问题是什么？天文学中的任何一个领域，都可能是宇宙中的任何地方，离家近，离家远。什么让你烦恼？是什么让你夜不能寐？</code></pre><p>25:07</p><p>HH: How did the first stars and galaxies form in the universe?<br>We have lots of models and theories, but to be able to make actual observations as early as we can, to tie together some of the disparate observations we have with a coherent story.<br>I think that is an area that is very, very interesting right now. And of course, that’s why James Webb Space Telescope was built, to add a piece to that story.</p><pre><code class="hljs bash">HH：宇宙中最初的恒星和星系是如何形成的？我们有很多模型和理论，但为了能够尽早进行实际观察，将我们的一些不同观察与连贯的故事联系在一起。我认为这是一个非常非常有趣的领域。当然，这就是詹姆斯·韦伯太空望远镜被建造的原因，为这个故事增添了一部分。</code></pre><p>25:42</p><p>ND: Uh-huh.</p><pre><code class="hljs bash">ND：嗯。</code></pre><p>25:43</p><p>HH: I think I’m also interested in how our planetary system that we live in, how did it in particular come to be and how did it come to be habitable?<br>We know this is the only one … the only system that we know is inhabited, right, is our solar system. ND: Right.</p><pre><code class="hljs bash">HH：我想我也对我们生活的行星系统感兴趣，特别是它是如何形成的，以及它是如何变得适合居住的？我们知道这是唯一一个…我们知道的唯一有人居住的系统，对吧，是我们的太阳系。ND：对。</code></pre><p>26:04</p><p>HH: Is it required that you have giant planets in the outer system and small planets in the inner solar system to make habitability?<br>Or is it just by happenstance? Did you have to have a Jupiter to make it habitable?<br>Did you have to have a Neptune to sweep out through the Kuiper Belt and deliver volatiles to the inner solar system, water and stuff?<br>I mean, that’s so interesting. And … And it touches us as humans. Like, how did we come to be? It’s part of our story, it’s part of our life story.<br>So I’m very interested in that question as well. And we still have so many observations left to make, both within our solar system and in the greater universe.<br>I think astronomers will be busy for a long time to come.</p><pre><code class="hljs bash">HH：是否需要在外太阳系有巨行星，在内太阳系有小行星才能使其适合居住？还是只是偶然？你必须有木星才能让它适合居住吗？你必须有一颗海王星才能穿过柯伊伯带，并将挥发物、水和其他物质输送到太阳系内部吗？我是说，这太有趣了。而且…它触动了作为人类的我们。比如，我们是怎么来的？这是我们故事的一部分，也是我们生活故事的一部份。所以我对这个问题也很感兴趣。我们还有很多观测要做，无论是在我们的太阳系还是在更大的宇宙中。我认为天文学家在未来很长一段时间内都会很忙。</code></pre><p>摘录地址:</p><pre><code class="hljs bash">https://www.ted.com/talks/heidi_hammel_and_nadia_drake_the_marvels_and_mysteries_revealed_by_the_james_webb_space_telescope/transcript</code></pre><p><u><strong>本文为学习记录, 仅供学习与参考!</strong></u></p>]]></content>
    
    
    <categories>
      
      <category>english</category>
      
      <category>ted talks daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>english</tag>
      
      <tag>ted talks daily</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>An Indigenous perspective on humanity&#39;s survival on Earth</title>
    <link href="/2022/10/22/20221022_An%20Indigenous%20perspective%20on%20humanity&#39;s%20survival%20on%20Earth/"/>
    <url>/2022/10/22/20221022_An%20Indigenous%20perspective%20on%20humanity&#39;s%20survival%20on%20Earth/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="An-Indigenous-perspective-on-humanity’s-survival-on-Earth"><a href="#An-Indigenous-perspective-on-humanity’s-survival-on-Earth" class="headerlink" title="An Indigenous perspective on humanity’s survival on Earth"></a>An Indigenous perspective on humanity’s survival on Earth</h3><p>00:00</p><p>Molo ka mana tёw їwekїtomo? I am an Indigenous woman from the Amazon rainforest.<br>I don’t look Indigenous, do I? “You’re Indigenous?” people always ask me. But don’t worry, I get that a lot.<br>I bet you expected an exotic Indigenous woman with a painted face and feathers in her hair.<br>Probably a bow and arrow too. Well, today I won’t be talking about the looks of Indigenous people.<br>Today I want to talk to you about Indigenous perspective, what that means and how it can help change this world.</p><pre><code class="hljs bash">莫洛·卡马纳（Molo ka mana）是谁？我是来自亚马逊雨林的土著妇女。我看起来不像土著人，是吗？“你是土著人？”人们总是问我。但别担心，我很明白。我敢打赌，你一定会期待一个有着彩绘脸庞、头发上插着羽毛的充满异国情调的土著妇女。可能也是弓和箭。好吧，今天我不会谈论土著人的长相。今天我想和大家谈谈土著人的观点，这意味着什么，以及它如何帮助改变这个世界。</code></pre><p>00:39</p><p>So I come from Suriname, the only Dutch-speaking country in South America.<br>It is also known as the greenest country in the world right now. You didn’t know this now, did you?</p><pre><code class="hljs bash">所以我来自苏里南，南美洲唯一的荷兰语国家。它现在也被称为世界上最环保的国家。你现在不知道，是吗？</code></pre><p>00:51</p><p>(Laughter)</p><p>00:53</p><p>Suriname is still 93 percent pristine forests, with a population less than 600,000 people.<br>I come from the south of Suriname, near the border with Brazil and French Guyana. I am from Amazonia, I am Wayana.</p><pre><code class="hljs bash">苏里南仍有93%的原始森林，人口不足60万。我来自苏里南南部，靠近巴西和法属圭亚那的边界。我来自亚马逊，我是瓦亚纳。</code></pre><p>01:13</p><p>I was born in a small settlement with 150 Wayana people.<br>My start in life was complicated. You see, in our culture, when your partner died, you had to wait at least two years before you started a new relationship, my grandmother told me.<br>When my father’s wife died, he decided that he couldn’t wait anymore and took a new lover, my mother, who was at that time only 16 years old, and got pregnant. Also, certainly in our culture and maybe in yours too, it is considered shameful when you get pregnant and not living with a partner.<br>So because of that, my mother tried to abort me multiple times. All, which as you can see, didn’t succeed.</p><pre><code class="hljs bash">我出生在一个有150个瓦亚纳人的小定居点。我的人生起点很复杂。我祖母告诉我，在我们的文化中，当你的伴侣去世时，你至少要等两年才能开始新的关系。当我父亲的妻子去世时，他决定不能再等了，他娶了一个新情人，我的母亲，当时她只有16岁，并且怀孕了。当然，在我们的文化中，也许在你们的文化中也是如此，当你怀孕而不与伴侣生活在一起时，这被认为是可耻的。因此，我母亲多次试图让我堕胎。正如你所见，所有这些都没有成功。</code></pre><p>02:11</p><p>(Laughter)</p><p>02:12</p><p>It did leave me with some health problems, but I survived.</p><pre><code class="hljs bash">这确实给我留下了一些健康问题，但我活了下来。</code></pre><p>02:18</p><p>I was called, for a very long time “anolїtpё”, which literally means trash.<br>My father denied that he was my father because of pressure from his family.<br>But luckily, my mother’s parents decided to raise me. Even so, it was hard as I was constantly treated as trash by the rest of my community.</p><pre><code class="hljs bash">很长一段时间，我被称为“anolїtpæ”，字面意思是垃圾。由于来自家庭的压力，我父亲否认他是我父亲。但幸运的是，我母亲的父母决定抚养我。尽管如此，我还是很难，因为我一直被社区其他人视为垃圾。</code></pre><p>02:44</p><p>So when I was five years old, my grandparents, especially my grandmother, she decided that it was in my best interest that I go to the capital of Suriname to get an education, to make something of my life.<br>So I packed my little suitcase. I stepped on a plane with a family friend I barely knew, [and] for the first time in my life, I left my village.<br>I remember being determined at only five years old that I was going to go back to show them that I was more than trash.<br>This family friend of ours and his wife, they became my foster parents. And I have been the second daughter that my foster parents always wanted.<br>And my foster family are from a tribal people called Saamaka, and they live as Indigenous people.</p><pre><code class="hljs bash">所以，当我五岁的时候，我的祖父母，特别是我的祖母，她决定我去苏里南首都接受教育，让我的生活有所成就，这对我来说是最有利的。所以我收拾了我的小行李箱。我和一个我几乎不认识的家庭朋友登上飞机，这是我有生以来第一次离开我的村庄。我记得我在五岁时就下定决心要回去向他们展示我不仅仅是垃圾。我们的这位家庭朋友和他的妻子，他们成为了我的养父养母。我一直是养父母一直想要的第二个女儿。我的寄养家庭来自一个叫萨马卡的部落，他们以土著人的身份生活。</code></pre><p>03:47</p><p>Here’s the thing. Even living far away in the capital of Suriname, going to non-Indigenous school, surrounded by non-Indigenous people, I was still Indigenous.<br>My worldview and my DNA, were still shaped by that legacy, by those traditions.<br>Because every summer holiday, I could go back to visit my grandparents and learn those amazing cultural aspects of being a Wayana.</p><pre><code class="hljs bash">事情是这样的。即使生活在遥远的苏里南首都，上非土著学校，周围都是非土著人，我仍然是土著人。我的世界观和我的DNA，仍然是由那些遗产和传统塑造的。因为每个暑假，我都可以回去看望我的祖父母，学习Wayana人令人惊叹的文化方面。</code></pre><p>04:20</p><p>So yes, I had the best of both worlds. I have the best of both worlds. And in both worlds I was and am still Indigenous.</p><pre><code class="hljs bash">所以是的，我有两个世界中最好的。我有两个世界中最好的。在这两个世界里，我都是原住民。</code></pre><p>04:32</p><p>What I came to realize is that even far away in the capital, I was privileged to live in the greenest country on Earth because of Indigenous peoples, because of Indigenous guardianship.<br>We are the protectors of the forests, so we protect this world.<br>Eighty percent of all the world’s biodiversity is within Indigenous territories. Let me repeat that in case you didn’t get that.<br>Eighty percent of all the world’s biodiversity is within Indigenous territories.<br>The Amazon, where I come from, is home to more plant and animal species than any other terrestrial ecosystem on this planet, including 40,000 plant species, 2,200 fish, 427 mammals.<br>One in ten of the world’s bird species live in the Amazon, which has been inhabited by Indigenous people for thousands of years.</p><pre><code class="hljs bash">我意识到，即使在遥远的首都，我也有幸生活在地球上最绿色的国家，因为土著人民，因为土著人的监护权。我们是森林的保护者，所以我们保护这个世界。世界上80%的生物多样性都在土著领土内。让我重复一遍，以防你不明白。世界上80%的生物多样性都在土著领土内。我来自亚马逊，这里的动植物种类比地球上任何其他陆地生态系统都多，包括40000种植物、2200种鱼类和427种哺乳动物。世界上每十种鸟类中就有一种生活在亚马逊地区，几千年来，亚马逊地区一直是土著人居住的地方。</code></pre><p>05:40</p><p>Now, try to imagine, when non-Indigenous people come to my community to try to teach us about sustainable forest management or conservation.</p><pre><code class="hljs bash">现在，想象一下，当非土著人来到我的社区，试图教我们可持续森林管理或保护。</code></pre><p>05:54</p><p>(Laughter)</p><p>05:57</p><p>We are the forests, we breathe the forests.<br>We cannot even translate “sustainable forest management” in our own language, because to us, it’s simply a way of living.</p><pre><code class="hljs bash">我们是森林，我们呼吸着森林。我们甚至不能用自己的语言翻译“可持续森林管理”，因为对我们来说，这只是一种生活方式。</code></pre><p>06:13</p><p>We are the protectors of the forests. It is because of us that the world has any forests left to protect.</p><pre><code class="hljs bash">我们是森林的保护者。正是因为我们，世界上才有任何森林需要保护。</code></pre><p>06:23</p><p>I believe, we believe, that protecting the planet should be done by Indigenous people that has been doing so all along.<br>That is why the work that I’m doing with my community is so important. I’m no longer trash. I’m recycled.</p><pre><code class="hljs bash">我认为，我们认为，保护地球应该由一直在这样做的土著人民来完成。这就是为什么我在社区所做的工作如此重要。我不再是垃圾了。我被回收了。</code></pre><p>06:38</p><p>(Laughter)</p><p>06:39</p><p>(Applause)</p><p>06:47</p><p>Yes, I’m recycled. The Amazon, where I come from, it’s so unique.<br>And sometimes we as human beings, we try to change things so fast, and we try to put our individual needs ahead of the collective good.<br>And because of this change that’s going too fast, we ultimately cause destruction that will destroy us all.<br>So today, here I am to teach you guys how you and I can protect this world the Indigenous way.</p><pre><code class="hljs bash">是的，我被回收了。我来自亚马逊，它是如此独特。有时候，作为人类，我们试图快速改变事物，我们试图将个人需求置于集体利益之上。因为这种变化太快了，我们最终会造成毁灭，毁灭我们所有人。所以今天，我在这里教你们如何用土著人的方式保护这个世界。</code></pre><p>07:35</p><p>What is Indigenous guardianship?<br>There are five key words that we can all learn from from Indigenous perspective.<br>The first one is responsibility.<br>Responsibility towards our territory, where we have been living along for thousands of years by taking good care of it.<br>We feel responsible for Mother Earth. So can all of you. Demonstrate the responsibility through action.<br>Do not be afraid to say: “I don’t know, let’s find out together.”<br>Attend activities hosted by Indigenous communities.<br>Lead by example. Talk about decolonizing and indigenizing education with colleagues.<br>Connect with Indigenous people, businesspeople, artists, speakers and craftspeople in your work and your life.<br>Learn about responsibility in the context of our existence.</p><pre><code class="hljs bash">什么是土著监护权？我们都可以从土著人的角度学习五个关键词。第一个是责任。对我们的领土负责，我们在这里生活了数千年，好好照顾它。我们对地球母亲负有责任。你们所有人都可以。通过行动证明责任。不要害怕说：“我不知道，让我们一起找出答案。”参加土著社区举办的活动。以身作则。与同事讨论教育的非殖民化和本土化。在您的工作和生活中与土著人、商人、艺术家、演讲者和手工艺人员联系。了解在我们存在的背景下的责任。</code></pre><p>08:45</p><p>The second “R” is respect.<br>We need to respect each other. Just like I respect your Western world, you should respect my world.<br>Respect is a word that is a concept that feels often abstract than action-based.<br>It can be very difficult to find specific examples to demonstrate what respect is. We can all become guardians of this world.<br>Respect our way of living. Respect our knowledge. Respect our way of decision making. Respect our Indigenous people’s cultural integrity.<br>It has worked for many centuries.</p><pre><code class="hljs bash">第二个“R”是尊重。我们需要相互尊重。就像我尊重你的西方世界一样，你也应该尊重我的世界。“尊重”这个词是一个概念，感觉往往是抽象的，而不是基于行动的。很难找到具体的例子来证明什么是尊重。我们都可以成为这个世界的守护者。尊重我们的生活方式。尊重我们的知识。尊重我们的决策方式。尊重我们土著人民的文化完整性。它已经工作了许多世纪。</code></pre><p>09:37</p><p>The third “R” … relationship, the third “R,” relationship, is about Indigenous people’s relationship with their ancestral land.<br>Engaging with indigenous communities … it’s very important to understand the nature of the relationship among ancestral lands, cultures and spirituality.<br>Engaging in this way requires long-term commitment and mutual learning.<br>A relationship based on mutual respect eliminates the tendency to exert power over another. It is something we can all learn, practice and improve.</p><pre><code class="hljs bash">第三种“R”关系，即第三种关系，是关于土著人民与其祖传土地的关系。与土著社区接触……了解祖传土地、文化和精神之间关系的性质非常重要。以这种方式参与需要长期的承诺和相互学习。建立在相互尊重基础上的关系消除了对他人施加权力的倾向。这是我们都可以学习、实践和改进的东西。</code></pre><p>10:24</p><p>Reciprocity is the idea of embracing that giving and receiving connects people, beliefs and action.<br>It is not all about the money, and those who have resources don’t have all the power. They shouldn’t have all the power.<br>Giving and receiving from the Earth endowments is also part of a virtuous healing principle.<br>In this way, even the “poorest” Indigenous community can give back to all of us.</p><pre><code class="hljs bash">互惠是一种拥抱的理念，即给予和接受将人、信仰和行动联系起来。这不全是钱的问题，那些有资源的人并不拥有所有的权力。他们不应该拥有所有的权力。给予和接受来自地球的捐赠也是一个良性治疗原则的一部分。这样，即使是“最贫穷”的土著社区也可以回馈我们所有人。</code></pre><p>11:04</p><p>The last “R”, redistribution. Redistribution of our ancestral lands.<br>My people, for instance, we don’t have any legally recognized land rights.<br>Because our ancestral lands have been distributed to third parties as concessions for mining and logging. </p><pre><code class="hljs bash">最后一个“R”，再分配。我们祖先土地的重新分配。例如，我的人民，我们没有任何法律承认的土地权利。因为我们祖先的土地被分配给第三方作为采矿和伐木的特许权。</code></pre><p>11:34</p><p>Eighty percent of the world’s remaining biodiversity is within Indigenous communities, as I mentioned before.<br>And it includes places that are essential for our global climate, our freshwater and food security.<br>These are places vital to all of us. Help in securing Indigenous people’s land rights, join us, support us in our fight.<br>Making sure that Indigenous people have the means to protect their lands. We can all benefit from that.<br>Make sure that Indigenous people have the economic power and the cultural independence so they can be successful in protecting, defend and govern their ancestral territories.</p><pre><code class="hljs bash">正如我之前提到的，世界上剩余生物多样性的80%都在土著社区内。它包括对我们的全球气候、淡水和粮食安全至关重要的地方。这些地方对我们所有人都至关重要。帮助确保土著人民的土地权利，加入我们，支持我们的斗争。确保土著人民拥有保护其土地的手段。我们都可以从中受益。确保土著人民拥有经济权力和文化独立性，以便他们能够成功地保护、保卫和管理其祖先的领土。</code></pre><p>12:30</p><p>So, initially, when my community threw me away as thrash, they just thought that they were doing what was right.<br>They thought that they were doing what was best because they learned those things from Western power, Western colonial powers and norms. And then they learned better.<br>They learned that I also have important and unique values. And guess what? We are all doing the same thing with our planet.<br>We are throwing it away, we are trashing it. Maybe only for a while, because we didn’t know any better.<br>Just to realize how much we all need the Earth because it uniquely contributes to our lives, and it sustains us.<br>A healthier relationship is key. A healthier relationship with Indigenous peoples is key to a healthier relationship with the planet that we as Indigenous people protect. And then we can all be recycled.</p><pre><code class="hljs bash">所以，一开始，当我的社区把我作为一名打手扔掉时，他们只是认为自己做的是正确的。他们认为自己做的是最好的，因为他们从西方权力、西方殖民权力和规范中学到了这些东西。然后他们学习得更好。他们知道我也有重要和独特的价值观。你猜怎么着？我们都在我们的星球上做同样的事情。我们要把它扔掉，我们要扔掉它。也许只有一段时间，因为我们不知道什么更好。只是为了认识到我们有多么需要地球，因为它为我们的生活做出了独特的贡献，并且支撑着我们。健康的关系是关键。与土著人民建立更健康的关系是与我们土著人民所保护的地球建立更健康关系的关键。然后我们都可以被回收利用。</code></pre><p>13:45</p><p>(Laughter)</p><p>13:47</p><p>And we can thrive and survive on this planet that we call Earth.</p><pre><code class="hljs bash">我们可以在这个我们称之为地球的星球上茁壮成长。</code></pre><p>13:54</p><p>Thank you.</p><p>13:55</p><p>(Applause and cheers)</p><p>摘录地址:</p><pre><code class="hljs bash">https://www.ted.com/talks/jupta_itoewaki_an_indigenous_perspective_on_humanity_s_survival_on_earth/transcript</code></pre><p><u><strong>本文为学习记录, 仅供学习与参考!</strong></u></p>]]></content>
    
    
    <categories>
      
      <category>english</category>
      
      <category>ted talks daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>english</tag>
      
      <tag>ted talks daily</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>We need leaders who boldly champion inclusion</title>
    <link href="/2022/10/21/20221021_We%20need%20leaders%20who%20boldly%20champion%20inclusion/"/>
    <url>/2022/10/21/20221021_We%20need%20leaders%20who%20boldly%20champion%20inclusion/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="We-need-leaders-who-boldly-champion-inclusion"><a href="#We-need-leaders-who-boldly-champion-inclusion" class="headerlink" title="We need leaders who boldly champion inclusion"></a>We need leaders who boldly champion inclusion</h3><p>00:01</p><p>When we think of our modern-day, successful entrepreneurs and corporate leaders, the thing they all have in common is they excel at the general cut and thrust of business: outsmarting the competition, growing the bottom line, creating a superior product or service.<br>But to become a business rock star, that rarefied category of a name we all know and admire, you need something else.<br>General good business acumen isn’t enough. The thing the rock stars all have in common is they disrupt business as usual.<br>They look at things the way they are, and say to themselves, “Nah, that’s not it.”</p><pre><code class="hljs bash">当我们想到我们现代成功的企业家和企业领袖时，他们的共同点是他们擅长于业务的一般切入点和方向：超越竞争，提高利润，创造卓越的产品或服务。但是，要成为一名商业摇滚明星，一个我们都知道并钦佩的名流，你还需要别的东西。一般良好的商业头脑是不够的。摇滚明星都有一个共同点，那就是他们像往常一样扰乱了商业。他们以自己的方式看待事物，并对自己说：“不，不是这样。”</code></pre><p>00:46</p><p>Consider how we used to search, and how cumbersome the process was.<br>Sergey Brin and Larry Page completely transformed the way we find things and each other, and even how we buy things.<br>And what about coffee? For many of us, our morning brew was a rather dull experience, until Howard Schultz built Starbucks for a community of people who wanted fancy, varied, social coffee.<br>And of course, I can’t forget Bill Gates and Steve Jobs: two men who took computers from nerdy labs and into our homes and, in the case of Jobs, our palms too.</p><pre><code class="hljs bash">想想我们过去是如何搜索的，以及搜索过程是多么繁琐。谢尔盖·布林（Sergey Brin）和拉里·佩奇（Larry Page）彻底改变了我们寻找东西的方式，改变了彼此，甚至改变了我们购买东西的方式。咖啡呢？对我们中的许多人来说，早上的咖啡是一种相当枯燥的体验，直到霍华德·舒尔茨（Howard Schultz）为一群想要花式、多样化、社交咖啡的人建立了星巴克。当然，我不能忘记比尔·盖茨和史蒂夫·乔布斯：两个从书呆子实验室把电脑带到我们家里的人，就乔布斯而言，还有我们的手掌。</code></pre><p>01:26</p><p>Now I know what some of you are thinking. Don’t worry, I will be coming to that in a minute. So if – I know what you’re thinking.</p><pre><code class="hljs bash">现在我知道你们有些人在想什么了。别担心，我马上就来。所以如果我知道你在想什么。</code></pre><p>01:35</p><p>(Laughter)</p><p>01:37</p><p>So if innovators like these can do all this, then I believe they are up for a new challenge.<br>A challenge that no one in business has fully cracked yet. So today, I want to talk to you about why I think, why I feel, we need a rock star of inclusion.</p><pre><code class="hljs bash">因此，如果像这样的创新者能够做到这一切，那么我相信他们将面临新的挑战。这是一个商业界尚未完全解决的挑战。所以今天，我想和大家谈谈为什么我认为，为什么我觉得，我们需要一个包容的摇滚明星。</code></pre><p>01:57</p><p>The diversity and inclusion agenda is one that most of us are sold on. We know it boosts creativity and profits and generally makes our lives richer.<br>We’ve known this for a very long time, but if we’re honest, progress has been slow.<br>Nearly 90 percent of Fortune 500 CEOs are white males.<br>And in the UK, where I’m from, they account for 90.4 percent of the top 20 roles in FTSE 100 companies.<br>Now that’s the status quo that is ripe for disruption.</p><pre><code class="hljs bash">多样性和包容性议程是我们大多数人都信奉的议程。我们知道，它促进了创造力和利润，通常会让我们的生活更加丰富。我们已经知道这一点很长时间了，但如果我们说实话，进展是缓慢的。《财富》500强首席执行官中近90%是白人男性。而在我所在的英国，他们在富时100指数公司前20名中占90.4%。现在，这种现状已经成熟，可以颠覆了。</code></pre><p>02:33</p><p>Disruptors are not afraid of doing the difficult. They push through discomfort.<br>When others doubt, they see a better, more exciting, new way – a new way that others then emulate, a new way that eventually becomes the norm.<br>When it comes to diversity and inclusion, we need bold disruptors who are uncomfortable with the status quo, even if the status quo benefits them – in fact, especially if the status quo benefits them.</p><pre><code class="hljs bash">颠覆者不怕做困难的事。他们克服了不适。当其他人怀疑时，他们会看到一种更好、更激动人心的新方式——一种其他人随后效仿的新方式，一种最终成为常态的新方式。当涉及到多样性和包容性时，我们需要大胆的颠覆者，他们对现状感到不安，即使现状对他们有利——事实上，尤其是如果现状对他们有益。</code></pre><p>03:05</p><p>Now the general thinking about DEI is that we have to get comfortable having uncomfortable conversations.<br>But there’s a step before that’s often overlooked. Before uncomfortable conversations must come uncomfortable connections.<br>And that’s something I know a little about. I get paid – sometimes, anyway.</p><pre><code class="hljs bash">现在，关于DEI的一般想法是，我们必须在不舒服的对话中感到舒服。但在这之前还有一步经常被忽视。在不舒服的谈话之前，必须有不舒服的联系。这是我知道的一点。我得到了报酬——有时，无论如何。</code></pre><p>03:26</p><p>(Laughter)</p><p>03:27</p><p>I get paid to do the two things that most people are uncomfortable doing: public speaking and talking to strangers.<br>Now the thing is, when I was a kid, my report card read “must talk less.”<br>Luckily, I didn’t listen. So for the past 25 years, I have been working in television – first as an on-air talent, more recently as an executive focusing on DEI.<br>My work as a host has meant that I’ve had to learn how to build meaningful connections quickly, with all kinds of people from very different backgrounds. But it hasn’t always been easy.<br>There are neurological and anthropological reasons why we gravitate towards people that remind us of ourselves.<br>There are unspoken codes of familiarity, codes that make us feel safe.<br>We see this everywhere: at conferences, lunch halls, parties, even places of worship.</p><pre><code class="hljs bash">我得到的报酬是做两件大多数人都不喜欢做的事：公开演讲和与陌生人交谈。现在的问题是，当我还是个孩子的时候，我的成绩单上写着“必须少说话”幸运的是，我没有听。所以在过去的25年里，我一直在电视台工作——首先是作为一名广播天才，最近是一名专注于DEI的高管。作为主持人，我的工作意味着我必须学会如何与来自不同背景的各种人快速建立有意义的联系。但这并不总是容易的。有神经学和人类学的原因使我们倾向于让我们想起自己的人。有一些无法言喻的熟悉代码，让我们感到安全的代码。我们在任何地方都能看到这一点：在会议、午餐厅、聚会，甚至是礼拜场所。</code></pre><p>04:25</p><p>Now, there’s a palpable feeling you get when you don’t connect with someone.<br>Don’t worry, I connect with you. It’s awkward, it’s horrible, and you just want it to be over.<br>But if you push through to find common ground, even if it’s small, just to get to the breakthrough, that’s when the magic happens, and something changes in both people.</p><pre><code class="hljs bash">现在，当你与某人失去联系时，你会有一种明显的感觉。别担心，我和你有联系。这很尴尬，很可怕，你只想结束它。但如果你努力寻找共同点，即使是很小的，只是为了取得突破，那就是奇迹发生的时候，双方都发生了变化。</code></pre><p>04:51</p><p>A game-changing moment came for me early on in my career, when I was interviewing a high-profile actress, who shall remain nameless.<br>She was starring in a movie that was considered quite controversial at the time, and as a result had been subjected to countless insulting interviews.<br>So by the time I got round to her, things were tense. And to make matters worse, we had absolutely nothing in common to fall back on, with her being a high-profile A-list actress, and me an up-and-coming host.<br>In that moment, I knew I had two choices.<br>One, to carry on as we were, which would have been very uncomfortable for us both, and probably ended in the interview being cut short.<br>Or two, try and find a breakthrough.</p><pre><code class="hljs bash">在我职业生涯的早期，我遇到了一个改变游戏规则的时刻，当时我正在面试一位高调的女演员，她将保持匿名。她主演的一部电影当时被认为颇具争议，因此受到了无数侮辱性的采访。所以当我找到她时，事情变得紧张了。更糟糕的是，我们没有任何共同点可以依靠，她是一位备受瞩目的一线女演员，而我是一位崭露头角的主持人。在那一刻，我知道我有两个选择。第一，继续我们的生活，这对我们俩来说都会很不舒服，很可能会在面试结束时被打断。或者二，尝试寻找突破。</code></pre><p>05:38</p><p>Now this was a well-seasoned actress, and it wasn’t a particularly big-budget movie, so I knew there had to be a bigger reason as to why she’d accepted the role in the first place.<br>So I decided to focus on the character, rather than the controversy, and she immediately opened up.<br>And we were able to have a deep and thoughtful conversation that was actually enjoyable for us both, and she even thanked me at the end.</p><pre><code class="hljs bash">现在这是一位经验丰富的女演员，这不是一部特别大的预算电影，所以我知道她当初接受这个角色的原因一定更大。所以我决定把重点放在人物身上，而不是争议上，她马上开口了。我们进行了一次深思熟虑的交谈，这对我们俩来说都很愉快，她甚至在最后感谢了我。</code></pre><p>06:06</p><p>I learned so much from that encounter, in terms of what can happen when you don’t give up on an uncomfortable connection, and how powerful it can be for both people.<br>To this very day, that moment still serves as a template for me of what to do whenever I find myself in a similar situation.</p><pre><code class="hljs bash">我从那次邂逅中学到了很多，比如当你不放弃一段不舒服的关系时会发生什么，以及它对双方都有多大的影响。直到今天，每当我发现自己处于类似的处境时，那一刻仍然是我该做什么的模板。</code></pre><p>06:28</p><p>Now if we are to move society forward, this is a journey we all have to make.<br>However, I believe when it comes to the workplace, those with the most power and agency must make the biggest leap first.</p><pre><code class="hljs bash">现在，如果我们要推动社会向前发展，这是一段我们都必须走的旅程。然而，我相信，当涉及到工作场所时，那些拥有最大权力和代理权的人必须首先做出最大的飞跃。</code></pre><p>06:44</p><p>Let me tell you about John Landgraf, the CEO of FX.<br>In 2015, Variety magazine wrote a scathing article about the least diverse networks in America, in relation to directors.<br>And at the bottom of what was a pretty bad list was FX.<br>Out of the 168 episodes that had aired on FX and FXX between 2014 and 2015, 88 percent were directed by white men, five percent by white women, seven percent by men of color and zero percent by women of color.</p><pre><code class="hljs bash">让我告诉你关于FX首席执行官约翰·兰德格拉夫的事。2015年，《综艺》杂志（Variety）发表了一篇严厉的文章，描述了美国最不多元化的网络，与导演有关。而在一个相当糟糕的列表的底部是FX。在2014年至2015年间FX和FX播出的168集中，88%由白人男性导演，5%由白人女性导演，7%由有色人种男性导演，0%由有色人族女性导演。</code></pre><p>07:26</p><p>What happened next was interesting.<br>Instead of doing the usual corporate thing of trying to defend the indefensible, rather, Landgraf held up his hand and pledged to diverse creatives that he was going to act, and act quickly at that.<br>So he and his team set about putting together a concrete plan, which included a significant financial investment in diverse creatives and in their suppliers, to find, hire, nurture and develop diverse creatives from industries where there were transferable skills, such as music videos, advertising and theater.<br>Within a year, Landgraf had turned FX from being the least diverse network in America to one of the most. And they had also managed to increase their diverse directing pool to just over half.<br>Critical and commercial success would follow, with hits such as “Atlanta” and “Better Things.” And there would also be an upsurge in paid subscriptions.<br>All because Landgraf stopped following the crowd and instead decided to disrupt in an inclusive way.<br>I would call that rock-star behavior, just saying. (Laughs)</p><pre><code class="hljs bash">接下来发生的事情很有趣。兰德格拉夫并没有像往常一样，为那些站不住脚的人辩护，而是举起手，向多元化的创意人士保证，他将采取行动，并迅速采取行动。因此，他和他的团队开始着手制定一个具体的计划，其中包括对多元化创意人员及其供应商的大量财政投资，以从音乐视频、广告和戏剧等具有可转让技能的行业中寻找、雇佣、培养和发展多元化创意人员。在一年内，Landgraf将FX从美国最不多元化的网络变成了最多元化的网络之一。他们还成功地将多元化的导演队伍增加到了一半多一点。随着《亚特兰大》（Atlanta）和《更好的东西》（Better Things）等热门电影的问世，评论和商业上的成功也将随之而来。付费订阅也将出现激增。这一切都是因为兰德格拉夫不再跟随人群，而是决定以包容的方式进行破坏。我会称之为摇滚明星的行为，只是说。（笑声）</code></pre><p>08:50</p><p>Now someone else that I think is already a rock star in more ways than one is Gareth Southgate, the current England men’s team football manager.<br>Now before becoming England manager, Southgate was a soccer player himself, in the early 1990s and 2000s, and witnessed firsthand the racist abuse his colleagues of color were subjected to, with monkey chants being screamed at them during matches, and banana peels thrown onto the pitch.<br>This searing knowledge would serve Southgate well when he became the custodian of the careers of a new generation of England players.<br>He knew he wanted to create a better world for his players, so he educated himself on racial injustice, and then did the same with the whole team, by bringing in Owen Eastwood, a New Zealand performance coach whose modern-day interpretation of the Māori philosophy, whakapapa – “we are all connected, therefore we all belong” – would become embedded in the psyches of the whole team.</p><pre><code class="hljs bash">现在，我认为在很多方面已经是摇滚明星的另一个人是加雷斯·索斯盖特，现任英格兰男子足球队经理。现在，在成为英格兰队主教练之前，索斯盖特本人也是一名足球运动员，在20世纪90年代初和21世纪初，他亲眼目睹了他的有色人种同僚遭受的种族主义虐待，在比赛中，人们对他们大声喊叫，并将香蕉皮扔到球场上。当索斯盖特成为新一代英格兰球员职业生涯的看门人时，这种灼热的知识将对他很有帮助。他知道自己想为自己的球员创造一个更美好的世界，所以他对种族不公正进行了自我教育，然后对整个球队也进行了同样的教育，引进了新西兰表演教练欧文·伊斯特伍德（Owen Eastwood），他对毛利人哲学的现代诠释——“我们都是相连的，因此我们都属于”——将融入整个球队的心理。</code></pre><p>09:57</p><p>Now, this England squad was like nothing the country had ever seen before.<br>Vibrant with swagger – as the young people would say – ethnically diverse and aligned to movements such as BLM.<br>So when American players, led by Colin Kaepernick, decided to take the knee, Southgate’s players did so too, in solidarity.<br>A public backlash ensued. Rather than bow to public pressure, Southgate penned an open letter to the nation, saying, “I have a responsibility to the wider community to use my voice, and so do the players.<br>It’s their duty to continue to interact with the public on matters such as equality, inclusivity and racial injustice, while using the power of their voices to help put debates on the table, raise awareness and educate.”</p><pre><code class="hljs bash">现在，这支英格兰队是这个国家从未见过的。正如年轻人所说，充满活力，昂首阔步，种族多样，与土地运动等运动保持一致。因此，当科林·凯珀尼克（Colin Kaepernick）领导的美国球员决定接受膝盖手术时，索斯盖特的球员也这样做了，以示团结。公众的强烈反对随之而来。索斯盖特没有屈服于公众的压力，而是写了一封公开信给国家，说：“我有责任让更广泛的社区使用我的声音，球员们也有责任。他们有责任继续在平等、包容和种族不公正等问题上与公众互动，同时利用他们的声音来帮助将辩论摆上台面，提高认识和教育。”</code></pre><p>10:56</p><p>There would soon be another moment of truth.<br>When three of his Black players – Marcus Rashford, Bukayo Saka and Jadon Sancho – missed their penalties in the Euro’s finals.<br>A barrage of torrid racist abuse would follow.<br>Again, Southgate stepped up and not only defended his players, but took the blame, as coach.<br>And the beautiful thing that also happened was, because of the education piece that had gone before, the whole team rallied around the players, seeing an attack on one as an attack on them all.</p><pre><code class="hljs bash">很快就会有另一个真相时刻。当他的三名黑人球员——马库斯·拉什福德、布卡约·萨卡和贾登·桑乔——在欧洲杯决赛中错失点球时。接踵而来的是一连串激烈的种族主义辱骂。索斯盖特再次站出来，不仅为他的球员辩护，而且作为教练承担了责任。同样发生的一件美妙的事情是，由于之前的教育片，整个球队都聚集在球员周围，把对一个人的攻击视为对所有人的攻击。</code></pre><p>11:40</p><p>The unequivocal solidarity that Gareth Southgate has been able to create within this England team is truly a profile in courage.<br>The level of emotional intelligence and understanding that he has displayed means that he is now leading one of the most unified sports teams in modern times.</p><pre><code class="hljs bash">加雷斯·索斯盖特（Gareth Southgate）在英格兰队中所创造的明确团结，是一种真正的勇气。他表现出的情商水平和理解力意味着他现在领导着现代最团结的运动队之一。</code></pre><p>12:02</p><p>There’s no reason this can’t be a template for business too.<br>There are hierarchies of inclusion that exist in every society, with those at the top on the inside, and those at the bottom cast outside.<br>I grew up in London as the daughter of African immigrants, so I know what it feels like to disrupt the world the way it is, and to break through.<br>As a working-class Black woman, somehow, I had a different vision for myself than the one the world had created for me.<br>Fortunately, we are now starting to see more and more women of color progress. But it shouldn’t be on us.</p><pre><code class="hljs bash">没有理由这不能成为商业的模板。每一个社会都存在着包容的等级制度，顶层在内部，底层在外部。我在伦敦长大，是非洲移民的女儿，所以我知道以这种方式破坏世界，并突破世界是什么感觉。作为一个工人阶级的黑人女性，不知何故，我对自己有着不同于世界为我创造的愿景。幸运的是，我们现在开始看到越来越多的有色人种女性进步。但它不应该在我们身上。</code></pre><p>12:46</p><p>Now I know many of you will have noticed – because I saw your faces, I know you did – that the list of business leaders that I opened my talk with were all white men. And all white men from mainly affluent backgrounds, at that.<br>That isn’t a coincidence. No one group has a monopoly on talent or ability, but as a result of the detrimental impact of imperialism and colonialism, up until very recently, at least from a Western perspective, this group has had a monopoly on access and opportunity.<br>We are heading into some very turbulent times economically, and socially we’re at a crossroads, too.<br>In the past, difficult times has often meant that diversity and inclusion have been put on a back burner.<br>I would argue now is the time for us to dig deeper. We know inclusion grows the bottom line, and the leaders who truly understand this will be the ones that not only win, but win the right way.</p><pre><code class="hljs bash">现在我知道你们中的许多人都会注意到——因为我看到了你们的脸，我知道你们看到了——我开始谈话的商业领袖名单都是白人。所有白人男性都来自富裕的背景。这不是巧合。没有一个群体垄断人才或能力，但由于帝国主义和殖民主义的有害影响，直到最近，至少从西方的角度来看，这个群体垄断了获取和机会。我们正进入经济和社会动荡时期，我们也正处于十字路口。在过去，困难时期往往意味着多样性和包容性被搁置一旁。我认为现在是我们深入挖掘的时候了。我们知道包容会增加底线，真正理解这一点的领导者不仅会赢，而且会以正确的方式赢。</code></pre><p>13:56</p><p>So these innovators, these guys, these rock stars who have taken on everything from computing, to commerce, to coffee – wouldn’t it be cool to see them disrupt inequity too?<br>To look at the world the way it is, just like Gareth and John did, and say to themselves, “Nah, that’s not it.”<br>I don’t know about you, but those are the kind of rock stars I want to see.</p><pre><code class="hljs bash">所以这些创新者，这些家伙，这些摇滚明星，他们承担了从计算到商业，再到咖啡的一切——看到他们也破坏了不平等，不是很酷吗？就像加雷斯和约翰一样，看待这个世界，然后对自己说：“不，不是这样。”我不知道你的情况，但那些是我想看的那种摇滚明星。</code></pre><p>14:27</p><p>Thank you.</p><pre><code class="hljs bash">非常感谢。</code></pre><p>14:28</p><p>(Cheers and applause)</p><p>摘录地址:</p><pre><code class="hljs bash">https://www.ted.com/talks/june_sarpong_we_need_leaders_who_boldly_champion_inclusion/transcript</code></pre><p><u><strong>本文为学习记录, 仅供学习与参考!</strong></u></p>]]></content>
    
    
    <categories>
      
      <category>english</category>
      
      <category>ted talks daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>english</tag>
      
      <tag>ted talks daily</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The truth about faking orgasms</title>
    <link href="/2022/10/20/20221020_The%20truth%20about%20faking%20orgasms/"/>
    <url>/2022/10/20/20221020_The%20truth%20about%20faking%20orgasms/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="The-truth-about-faking-orgasms"><a href="#The-truth-about-faking-orgasms" class="headerlink" title="The truth about faking orgasms"></a>The truth about faking orgasms</h3><p>00:00</p><p>Take a moment to think about your sex life. Don’t worry, I’m a professional, I ask this question all the time.<br>My guess is that most of you are thinking about solo pleasure or the interaction between you and someone else, perhaps.<br>There’s probably very few of you who are thinking about how your sex life connects to wider dynamics in society.</p><pre><code class="hljs bash">花点时间想想你的性生活。别担心，我是专业人士，我一直在问这个问题。我猜你们大多数人都在考虑独处的乐趣或者你和其他人之间的互动。你们中可能很少有人会思考你们的性生活是如何与社会更广泛的动态联系起来的。</code></pre><p>00:25</p><p>Let me explain by starting somewhere a little different. The gender pay gap has reduced in the last three decades in the UK, and we have more women in senior management positions than ever before.<br>But there is also still such a long way to go. Britain only ranks 21st in the world for gender equality.<br>And not all women benefit equally from the advances we’ve made so far.<br>Today, I’m going to tell you how the orgasm gap, which is data about gender inequality from sex science, is a lesser known but powerful indicator of just how far we still have to go.</p><pre><code class="hljs bash">让我从一个稍微不同的地方开始解释。在过去三十年里，英国的性别薪酬差距已经缩小，我们的高级管理职位中女性人数比以往任何时候都多。但还有很长的路要走。英国在性别平等方面仅排在世界第21位。并非所有女性都能从我们迄今取得的进步中平等受益。今天，我要告诉你，性高潮差距，这是来自性科学的关于性别不平等的数据，是一个鲜为人知但却强有力的指标，表明我们还有多远的路要走。</code></pre><p>01:11</p><p>Progress towards equality in any area is about breaking free of entrenched social norms. And this is especially the case in sex.<br>In my work, as a clinical psychologist specializing in helping people with their sex lives, I noticed that we’re often unaware of how much of how we are sexually is dictated by forces outside of ourselves or outside of our sexual relationships.<br>What we should say, how we’re supposed to be, what we’re supposed to look like, who does what and when, what we’re supposed to be into. These scripts, they’re all written for us, and we learn them from language, from peers and from the media.</p><pre><code class="hljs bash">在任何领域实现平等的进展都是为了打破根深蒂固的社会规范。这在性方面尤其如此。在我的工作中，作为一名专门帮助人们性生活的临床心理学家，我注意到，我们常常不知道我们的性生活方式在多大程度上是由我们自己或性关系之外的力量决定的。我们应该说什么，我们应该怎样，我们应该看起来像什么，谁做什么，什么时候做，我们应该做什么。这些脚本都是为我们编写的，我们从语言、同龄人和媒体那里学习它们。</code></pre><p>01:59</p><p>I don’t know about you, but I’m starting to see a small change in these scripts.<br>These days, my social media feeds are full of posts about women’s sexual empowerment and women’s bodily autonomy compared to, say, five years ago. And this is great.<br>But in my work, I notice that this change has not yet translated to real life and to the bedroom.<br>Not that everyone has sex there, but you know what I mean.</p><pre><code class="hljs bash">我不知道你的情况，但我开始看到这些脚本中有一些小变化。这些天，与五年前相比，我的社交媒体上充斥着关于女性性能力和女性身体自主的帖子。这很好。但在我的工作中，我注意到这种变化尚未转化为现实生活和卧室。不是每个人都在那里做爱，但你知道我的意思。</code></pre><p>02:27</p><p>(Laughter)</p><p>02:31</p><p>I see plenty of women in my clinic who tell me that they feel more empowered than ever to take up space, to call out misogyny, to demand a seat at the table.<br>But when it comes to their sex lives, they can’t seem to bring themselves to feel empowered in the same way.<br>They tell me that they feel silenced, disempowered and made to feel that they are the problem. And they don’t know how to tackle it.</p><pre><code class="hljs bash">我在诊所里看到很多女性，她们告诉我，她们比以往任何时候都更有能力占据空间，呼吁厌恶女性，要求在餐桌旁坐下。但当涉及到性生活时，他们似乎无法以同样的方式让自己感到被授权。他们告诉我，他们感到沉默，失去权力，觉得自己是问题所在。他们不知道如何应对。</code></pre><p>03:03</p><p>So why is this happening? Well, we used to think that women’s orgasms were hard to come by, and that because they were “tricky,” this was the obvious explanation as to why when cis men and cis women have sex together, it’s more often the man who leaves feeling satisfied. This is a common myth.<br>And it’s kind of got in the way of us really noticing and questioning this imbalance of pleasure across genders.<br>This “tricky orgasm” myth has been challenged by various pieces of sex research over the last few decades, and we now know that when people masturbate, there is no difference in the rates of orgasm or the time taken to orgasm across genders, turning this idea of women’s orgasms being more complex or taking longer on its head.<br>But this sex science, and the fact that only a minority of women can come from vaginal penetration without any clitoral stimulation, is still not that widely known, leaving many women feeling like they are the problem, that they’re taking too long or needing something unusual to get there.<br>When in fact, they’re entirely normal. Feeling abnormal leads them to fake it, and faking it gives their partner the wrong idea of what women’s bodies need.<br>Meaning the next woman who tries to assert what she wants or needs with that partner is seen as difficult or labeled as “hard work.”<br>As a result, research tells us that men consistently overestimate how often women orgasm during partnered sex.<br>And underestimate how often women are faking it. This is the reason why some women describe partnered sex as like “listening to your favorite song, but having the radio switched off before it gets to the best bit.”</p><pre><code class="hljs bash">那么为什么会发生这种情况呢？我们过去认为女性的高潮很难达到，因为她们很“棘手”，这就是为什么当顺式男人和顺式女人在一起做爱时，男人更容易感到满足的原因。这是一个常见的神话。这在某种程度上阻碍了我们真正注意到并质疑这种跨性别的快乐失衡。在过去几十年里，这种“棘手的性高潮”神话受到了各种性研究的挑战，我们现在知道，当人们手淫时，性高潮的速度或达到性高潮所需的时间在不同性别之间没有差异，这改变了女性性高潮更为复杂或持续时间更长的观念。但这门性科学，以及只有少数女性能够在不刺激阴蒂的情况下通过阴道插入，这一事实仍然不为人们所知，这让许多女性觉得自己是问题所在，她们需要花费太长时间或需要一些不寻常的东西才能达到目的。事实上，它们是完全正常的。感觉不正常会让她们假装不正常，而假装不正常会使她们的伴侣对女性的身体需要有错误的认识。这意味着，下一个试图向伴侣表明自己想要什么或需要什么的女性被视为很难或被贴上“努力工作”的标签因此，研究告诉我们，男性总是高估女性在伴侣性交中的高潮频率。低估了女性假装的频率。这就是为什么一些女性将伴侣性爱描述为“听你最喜欢的歌，但在达到最佳状态之前关掉收音机”的原因</code></pre><p>05:12</p><p>(Laughter)</p><p>05:16</p><p>But why does it matter?<br>Well, the first thing to say is that orgasms are not the be-all and end-all of good sex and we must not treat them as if they are.<br>Good sex can bring connection, stress relief, affirmation, intimacy and fun.<br>And orgasms are just another reward like these, that serve to make us feel good and keep humans coming back for more.<br>But what if the pleasure of one group of people is consistently privileged over the pleasure of another? What does that tell us about our society?</p><pre><code class="hljs bash">但为什么这很重要？好吧，首先要说的是，高潮并不是好性爱的全部，我们不能把它们当作是好性爱。好的性爱可以带来联系、减压、肯定、亲密和乐趣。高潮只是像这样的另一种奖励，它让我们感觉很好，让人类回来追求更多。但是，如果一组人的快乐总是优先于另一组人呢？这对我们的社会有什么启示？</code></pre><p>05:59</p><p>I mentioned earlier that people of all genders can orgasm at a similar rate when they’re alone.<br>And that rate is about 95 percent of the time.<br>The orgasm gap refers to data from sex science, which tells us how our chances of orgasming can move from this 95 percent when we have sex with another person. The biggest gap we see is for women having sex with men.<br>When their chances of orgasming drop from this 95 percent they might expect alone to around 65 percent with a regular partner.<br>We see an even bigger gap emerging with casual or hookup sex between women and men, when women’s chance of orgasming drops further still.<br>Crucially, men’s rate of orgasming when having sex with women stays at around 85 to 95 percent, whether that’s a regular partner, casual sex and just as reliably as when they’re on their own.<br>We don’t see such a dramatic orgasm gap when LGBTQ+ people have sex with each other.<br>So, for example, women having sex with women can expect an orgasm rate only slightly less than when they’re on their own.</p><pre><code class="hljs bash">我之前提到过，所有性别的人在独处时都能以同样的速度达到高潮。这一比率大约为95%。高潮间隙指的是性科学的数据，它告诉我们，当我们与另一个人发生性行为时，我们的高潮机会是如何从这95%上升的。我们看到的最大差距是女性与男性发生性关系。当他们的性高潮机会从95%下降到65%左右时，他们可能会期望有一个固定的伴侣。当女性的性高潮机会进一步下降时，我们看到男女之间在随意性行为或性交中出现了更大的差距。最重要的是，无论是普通伴侣还是随意性行为，男性与女性发生性行为时的高潮率都保持在85%到95%左右，这与他们自己发生性行为一样可靠。当LGBTQ+人群发生性行为时，我们看不到如此显著的性高潮差距。因此，举例来说，与女性发生性关系的女性期望的高潮率仅比她们独自一人时略低。</code></pre><p>07:16</p><p>This data is important because it tells us that it’s gender which is responsible for inequality in the experience of orgasms.<br>Not anatomy, not capacity for pleasure, but rather whose pleasure is prioritized as most important.<br>As a society, we still aren’t signed up to an idea that women’s sexual pleasure is as important as men’s. We’re happy to strive for it, but only if the route to achieving it doesn’t jeopardize men’s pleasure in the process.</p><pre><code class="hljs bash">这些数据很重要，因为它告诉我们，性别是导致性高潮体验不平等的原因。不是解剖学，不是快乐的能力，而是谁的快乐被认为是最重要的。作为一个社会，我们仍然没有认同一个观点，即女性的性快感与男性一样重要。我们很高兴为之奋斗，但前提是实现这一目标的途径不会危及男性在这一过程中的快乐。</code></pre><p>07:54</p><p>Now there is a complex mix of factors which maintains the orgasm gap.<br>Firstly, not knowing what’s normal. And feeling as if it’s your body which is wrong.<br>Falling for this old idea that your orgasms are somehow tricky, even though you know that they’re not when you’re alone.<br>Secondly, women being socialized to put other people’s needs first and being polite so as to not hurt someone else’s feelings or ego. And lastly, the simple fact that the patriarchy shows itself in the way men and women have sex together.<br>The sheer physicality of a sexual script which favors penis and vagina sex above all else as “real sex,” simply suits men’s anatomy more.<br>This is one of the reasons we don’t see such a dramatic orgasm gap when women have sex with other women, and we can learn from this. Ditch the script and have more sex which looks like the sex you enjoy alone.</p><pre><code class="hljs bash">现在有一个复杂的混合因素来维持性高潮的差距。首先，不知道什么是正常的。感觉好像是你的身体出了问题。虽然你知道高潮并不是在你一个人的时候，但你还是会为你的高潮有些棘手的旧观念而倾倒。第二，女性被社会化，把别人的需要放在首位，并保持礼貌，以免伤害别人的感情或自我。最后一个简单的事实是，父权制体现在男性和女性在一起做爱的方式上。性爱脚本的纯粹物理性，将阴茎和阴道性爱视为“真正的性爱”，更符合男性的解剖学。这就是为什么当女性与其他女性发生性行为时，我们没有看到如此巨大的性高潮差距，我们可以从中吸取教训。抛开剧本，多做爱，这看起来像是你独自享受的性爱。</code></pre><p>09:05</p><p>So, what are we to do? Stop faking it. Yes, I know you’ve all done it. And you’re so, so good at it.</p><pre><code class="hljs bash">那么，我们该怎么办？别装了。是的，我知道你们都做了。你是如此，如此擅长。</code></pre><p>09:16</p><p>(Laughter)</p><p>09:17</p><p>I know it comes from a place of not feeling normal or wanting to communicate something or trying to protect someone else’s feelings. But all faking does is strengthen this patriarchal script and means your needs are less likely to be met over time.<br>We can also notice how inequality shows up in the bedroom.<br>Is it OK with you that your needs are sidelined in favor of someone else’s? How does that fit with your values around equality and other areas of your life?<br>It’s OK to be motivated by something other than orgasms when you have sex. But this should be your choice to make, not some kind of sexual glass ceiling based on gender.</p><pre><code class="hljs bash">我知道它来自一个不正常的地方，或者想要交流什么，或者试图保护别人的感情。但所有的伪装都会强化这种父权制的脚本，意味着随着时间的推移，你的需求不太可能得到满足。我们还可以注意到卧室里的不平等现象。你可以把你的需求放在一边而让别人的需求占上风吗？这与你围绕平等和其他生活领域的价值观有何契合？当你做爱的时候，除了性高潮之外，你还可以通过其他东西来激励自己。但这应该是你的选择，而不是基于性别的某种性玻璃天花板。</code></pre><p>10:06</p><p>And lastly, by showing up for each other.<br>If more women felt able to be upfront about their pleasure and what their body needs, this would pave the way for women collectively to benefit.<br>It would mean the next woman who tries to be open about what her body needs would be less likely to be dismissed as complex or unusual.<br>It would change the story. It would redress the balance.</p><pre><code class="hljs bash">最后，通过相互支持。如果更多的女性能够坦诚表达自己的快乐和身体需要，这将为女性集体受益铺平道路。这意味着，下一个试图公开自己身体需要什么的女性，不太可能因为复杂或不寻常而被忽视。这将改变故事。这将纠正这种平衡。</code></pre><p>10:39</p><p>But this journey isn’t just for women to take. Men can show up here also, by believing women when they say what they need.<br>These women are not the outliers you think they are. They are the voice of change.<br>Men can also show up by understanding that women’s capacity for pleasure is equal to their own and by genuinely championing sex which has mutual pleasure at its core, even if that means sacrificing their own, more comfortable position of privilege from time to time.</p><pre><code class="hljs bash">但这段旅程不仅仅是女性的。男人也可以出现在这里，只要相信女人说了他们需要的话。这些女性并不是你认为的局外人。他们是变革的声音。男人也可以通过理解女性的享乐能力与自己的能力相等，以及真正拥护以共同快乐为核心的性爱来表现自己，即使这意味着不时牺牲自己更舒适的特权地位。</code></pre><p>11:15</p><p>So, let’s start a revolution.<br>After all, who knows what the impact of gender equality behind closed doors might have on the rest of society.</p><pre><code class="hljs bash">所以，让我们开始一场革命。毕竟，谁知道闭门后的两性平等会对社会其他人产生什么影响。</code></pre><p>11:27</p><p>Thank you.</p><pre><code class="hljs bash">Thank you.</code></pre><p>11:28</p><p>(Applause and cheers)</p><p>摘录地址:</p><pre><code class="hljs bash">https://www.ted.com/talks/karen_gurney_the_truth_about_faking_orgasms/transcript</code></pre><p><u><strong>本文为学习记录, 仅供学习与参考!</strong></u></p>]]></content>
    
    
    <categories>
      
      <category>english</category>
      
      <category>ted talks daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>english</tag>
      
      <tag>ted talks daily</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How video games can use their power for good</title>
    <link href="/2022/10/18/20221018_How%20video%20games%20can%20use%20their%20power%20for%20good/"/>
    <url>/2022/10/18/20221018_How%20video%20games%20can%20use%20their%20power%20for%20good/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="How-video-games-can-use-their-power-for-good"><a href="#How-video-games-can-use-their-power-for-good" class="headerlink" title="How video games can use their power for good"></a>How video games can use their power for good</h3><p>00:00</p><p>Do you spend more money on virtual fashion in video games than you do on physical clothes?<br>About a third of all teenage gamers in America do. Do you think the government is actually run by a secret cabal of demon-worshiping perverts?<br>About 50 million people do.</p><pre><code class="hljs bash">你在视频游戏中的虚拟时尚上花费的钱比你在实体服装上花费的钱多吗？美国大约三分之一的青少年玩家都这样做。你认为政府实际上是由一个崇拜恶魔的变态者的秘密阴谋集团管理的吗？大约有5000万人这样做。</code></pre><p>00:17</p><p>(Laughter)</p><p>00:19</p><p>These numbers sound crazy to you? It’s because they are, but they’re also a sign of things to come.<br>The world feels like a pretty insane place right now. And if you spend any time on the internet at all,<br>you can probably tell that people think it’s going to get a lot worse.<br>Now, that may be the case, but this feeling is why I believe that we’re going to see a rise in social unrest in the coming decades,<br>and that is going to come from a surprising place. Video games.</p><pre><code class="hljs bash">这些数字听起来很疯狂？这是因为它们是，但它们也是即将发生的事情的标志。现在这个世界感觉就像一个非常疯狂的地方。如果你有时间上网，你可能知道人们认为情况会变得更糟。现在，情况可能是这样的，但这种感觉就是为什么我相信，在未来几十年里，我们将看到社会动荡加剧，这将来自一个令人惊讶的地方。视频游戏。</code></pre><p>00:50</p><p>Now before you think, “Is this going to be another talk linking video game to violence?”<br>Sorry to disappoint you, that’s been proven conclusively wrong, and that is really old thinking.<br>But what I am going to argue is that video games are going to become the platform through which tomorrow’s social battles will be fought and the source of recruitment for some of the strangest and possibly most impactful social movements of the future.</p><pre><code class="hljs bash">现在，在你思考之前，“这会是另一个将视频游戏与暴力联系起来的话题吗？”对不起，让你失望了，这已经被证明是错误的，这真的是一种古老的想法。但我想说的是，视频游戏将成为未来社会斗争的平台，并成为未来一些最奇怪、可能最具影响力的社会运动的招募来源。</code></pre><p>01:14</p><p>I like to call these video game cults.<br>Sounds kind of scary, I admit, but I hope to show how they might also be used as a tool to cause some serious hope.</p><pre><code class="hljs bash">我喜欢称这些视频游戏为邪教。我承认，听起来有点吓人，但我希望展示一下，它们如何也可以被用作一种工具，带来一些严肃的希望。</code></pre><p>01:26</p><p>Now this is all just my personal opinion. But I started thinking about this a few years ago after I heard a very interesting story while working in the Gulf.<br>The story was about Hassan ibn Sabbah, a charismatic young preacher who lived about 1,000 years ago in an age full of drama, conflict and social change.<br>Hassan became famous for creating the Order of Assassins: a fanatically devoted group of young men known as the fedayeen,<br>“those who sacrifice themselves.” His men were so devoted to him that, the legend goes, they would throw themselves from the rafters to their death at his command.<br>Actually, this is where we get the expression “a leap of faith” from.</p><pre><code class="hljs bash">这只是我个人的看法。但几年前，当我在海湾工作时听到一个非常有趣的故事后，我开始思考这个问题。故事是关于哈桑·伊本·萨巴赫的，他是一位有魅力的年轻传教士，生活在大约1000年前的一个充满戏剧、冲突和社会变革的时代。哈桑因创建刺客团而出名：一群狂热的年轻人被称为“牺牲自己的人”，他们被称为fedayeen。传说，他的手下对他如此忠诚，以至于他们会在他的命令下从椽子上跳下来，直到死亡。事实上，这就是“信仰的飞跃”的由来。</code></pre><p>02:07</p><p>So this got me thinking. Why would someone do this?<br>What could convince someone so fervently to believe in something that they would welcome their own death?<br>The answer is 11th century virtual reality.<br>See, Hassan had cultivated a myth that he could send people to heaven and bring them back again without actually having to die.<br>And of course, he didn’t actually have this power, but before a mission, the story goes, he would dose his soldiers with massive amounts of hash.</p><pre><code class="hljs bash">这让我思考。为什么有人会这样做？有什么能说服一个人如此热忱地相信他们会欣然接受自己的死亡呢？答案是11世纪的虚拟现实。看，哈桑培养了一个神话，他可以把人送上天堂，然后把他们带回来，而不必真的死去。当然，他实际上并没有这种能力，但在执行任务之前，据说，他会给他的士兵吃大量的大麻。</code></pre><p>02:39</p><p>(Laughter) </p><p>Their enemies actually called them the “ḥashshāshīn,” which is also where we get the word “assassin” from.<br>This would knock them out and then he would lower them down into a secret garden he had built behind his mountain fortress, designed to look exactly like a replica of heaven.<br>Waking up in this simulated paradise, his men would gorge themselves on all the things they had been denied in life.<br>Then, after a night of ecstasy, they would awaken back in their barracks, convinced of Hassan’s powers, eager to fulfill his suicide missions in order to return to heaven again.</p><pre><code class="hljs bash">他们的敌人实际上称他们为<span class="hljs-string">&quot;ḥashshāshīn&quot;</span>, 这也是我们得到<span class="hljs-string">&quot;刺客&quot;</span>一词的地方。这会把它们击倒，然后他会把它们放在一个秘密花园里，这个花园是他在山上的堡垒后面建造的，看起来就像天堂的复制品。当他在这个模拟的天堂里醒来时，他的手下会狼吞虎咽地吃下他们生活中被剥夺的一切。然后，在一夜狂喜之后，他们会在军营中醒来，确信哈桑的力量，渴望完成他的自杀任务，以便再次回到天堂。</code></pre><p>03:13</p><p>So. What does this have to do with today?<br>Well, most scholars agree that this is probably just a myth, but that’s not the point.<br>The point is that people believed deeply in Hassan and his vision for the world and were willing to sacrifice their lives for it.<br>He gave them a sense of meaning and purpose during a time of great uncertainty.<br>A purpose which he communicated using the best tools of his day. And that is what brings us to video games.</p><pre><code class="hljs bash">所以这和今天有什么关系？大多数学者都认为这可能只是一个神话，但这不是重点。问题是，人们深深相信哈桑和他的世界观，并愿意为此献出自己的生命。在一个非常不确定的时期，他给了他们意义和目的感。他用当时最好的工具传达的目标。这就是视频游戏带给我们的。</code></pre><p>03:42</p><p>Video games are already the world’s dominant form of entertainment.<br>They’re three times larger than the entire global film and music industries combined.<br>Every year, the top streamers on Twitch receive on average twice as many views as the biggest Hollywood movies.<br>And collectively, we spend twice as much time watching and playing video games as we do using all other forms of social media combined. That’s a lot of eyeballs.<br>Game sales are huge, but the real action is in in-game economies where people spend over 130 billion dollars a year buying and selling virtual goods online.<br>Everything from outfits to avatars, to vehicles to weapons, to dances to architecture to music, to access to live events and more.<br>Haven’t even mentioned NFT or Web3, but these hopefully will become the infrastructure that drives this going forward.<br>So if you’re wondering what the metaverse looks like, this is it.</p><pre><code class="hljs bash">电子游戏已经成为世界上最主要的娱乐形式。他们的规模是全球电影和音乐产业总和的三倍。每年，Twitch上的顶级流媒体平均获得的观看次数是最大的好莱坞电影的两倍。总的来说，我们花在观看和玩视频游戏上的时间是使用所有其他形式社交媒体加起来的时间的两倍。那是很多眼球。游戏销售额巨大，但真正的行动是在游戏经济中，人们每年花费超过1300亿美元在网上购买和销售虚拟商品。从服装到化身，从车辆到武器，从舞蹈到建筑到音乐，再到现场活动等等。还没有提到NFT或Web3，但它们有望成为推动这一进程的基础设施。所以如果你想知道元宇宙是什么样子的，这就是它。</code></pre><p>04:42</p><p>The reason games are so successful is because they provide a deep sense of engagement, community and purpose.<br>Yes, we use them to escape and to entertain, and that’s OK.<br>But at their best, they speak to some of our primal social and psychological needs, from feeling effective to achieving our goals, to belonging to a group, to working for something bigger than yourself.<br>Describing his experience in a top World of Warcraft guild, the player Wincy once wrote, “It felt so amazing… Thinking back, it was probably the most intense, positive emotional experience of my life.<br>Not my kid being born, not getting married.”</p><pre><code class="hljs bash">游戏之所以如此成功，是因为它们提供了一种深刻的参与感、社区感和目的感。是的，我们用它们来逃避和娱乐，这没关系。但在最好的情况下，他们表达了我们的一些基本社会和心理需求，从感觉有效到实现目标，到属于一个团队，再到为比自己更大的目标而工作。在描述他在魔兽世界顶级公会的经历时，玩家温西曾写道：“感觉太棒了……回想起来，这可能是我一生中最强烈、最积极的情感体验。不是我的孩子出生了，不是结婚了。</code></pre><p>05:22</p><p>(Laughter)</p><p>05:24</p><p>“My mind was convinced we were in a war against an insurmountable foe and we won.”</p><pre><code class="hljs bash">“我确信我们正在与一个不可逾越的敌人作战，我们赢了。”</code></pre><p>05:31</p><p>You can probably see where I’m going with this.<br>Although he later went on to regret the amount of time he spent online, gamers develop a deep sense of commitment to a shared narrative world.<br>A world which provides for them in a way that “real-world” jobs and relationships often do not.<br>And this is already the world that our children live in.<br>The only thing that my son and daughter want for their birthdays are Skyblock coins and digital emotes for their characters.<br>Most of their social time outside of school is spent hanging out in-game with their friends.<br>My son Teo, he’s already flipping NFTs to, in his words, get rich as quickly as possible so he can take care of us when the world falls apart. Thanks Teo, appreciate that.</p><pre><code class="hljs bash">你也许能看到我的想法。尽管后来他对自己花在网上的时间感到遗憾，但玩家们对共享的叙事世界产生了深刻的承诺感。这个世界为他们提供了一种“现实”工作和关系通常无法提供的方式。这已经是我们孩子们生活的世界。我的儿子和女儿生日想要的唯一礼物是Skyblock硬币和他们角色的数字表情。他们在校外的大部分社交时间都花在和朋友玩游戏上。我的儿子特奥，用他的话来说，他已经把NFT变成了尽快致富的人，这样他就可以在世界崩溃时照顾我们了。谢谢Teo，谢谢你。</code></pre><p>06:14</p><p>That’s why I think games are going to be one of the driving forces of tomorrow’s culture.<br>But if that’s the game’s part, what about the cults part?<br>Well, I’m sure we can all agree that the coming years are going to be interesting, to say the least.<br>From climate change, mass migration, pandemics, job loss and now war. The future feels terrifying for many people.<br>And this is having a tremendous impact on our mental health.<br>One third of all US undergraduates surveyed report having moderate to severe anxiety. Their rates of suicidal thinking and severe depression doubled over the last decade or so. And COVID didn’t help. But it’s not just the US, either.<br>Two thirds of those surveyed in a study of 17 different countries reported that they thought their children were going to grow up poorer and not have successful careers.<br>In other words, the world feels like it’s falling apart for a lot of people. And when worlds fall apart, people start looking for answers wherever they can find them. And charismatic leaders like Hassan have always been happy to provide them.<br>And their actions have shaped the course of history. From the Protestant Reformation in the 16th century to the rise of new religious movements in the 19th century, every era of social change historically has been followed by a wave of new believers and fanatical behavior.<br>QAnon is just the most recent example. And while each generation’s cults look different and the definition of a cult is certainly up for debate, they do share general characteristics.<br>The first is that they inspire a sense of higher purpose, often through a lens of good versus evil, where you are the hero, that creates a sense of passion or commitment that seems insane or irrational to the outsider.<br>And the second is that they adopt the form of and use the tools of the dominant organizations of their day.<br>From the church to the corporation to the social media network to our subject for today, the metaverse.</p><pre><code class="hljs bash">这就是为什么我认为游戏将成为明天文化的驱动力之一。但如果这是游戏的一部分，那么邪教部分呢？嗯，至少可以说，我相信我们都会同意，未来几年将会很有趣。气候变化、大规模移民、流行病、失业以及现在的战争。对许多人来说，未来是可怕的。这对我们的心理健康有着巨大的影响。三分之一的美国本科生表示有中度至重度焦虑。在过去十年左右的时间里，他们的自杀想法和严重抑郁症的发生率翻了一番。而COVID没有帮忙。但也不仅仅是美国。在一项针对17个不同国家的调查中，三分之二的受访者表示，他们认为自己的孩子长大后会更穷，事业也不会成功。换言之，对于很多人来说，这个世界似乎正在崩溃。当世界四分五裂时，人们开始到处寻找答案。像哈桑这样有魅力的领导人总是乐于提供这些服务。他们的行动塑造了历史进程。从16世纪的新教改革到19世纪新宗教运动的兴起，历史上每一个社会变革的时代都伴随着新信徒和狂热行为的浪潮。QAnon只是最近的一个例子。虽然每一代人的邪教看起来都不一样，而且邪教的定义肯定会有争议，但它们确实具有共同的特点。首先，它们激发了一种更高的目标感，通常是通过善与恶的镜头，你是英雄，这会产生一种激情或承诺感，对于局外人来说，这种激情或承诺似乎是疯狂的或非理性的。第二，他们采用了当时主导组织的形式和工具。从教会到企业，再到社交媒体网络，再到我们今天的主题，元宇宙。</code></pre><p>08:21</p><p>So what happens when you mix billions of people looking for meaning, safety and security with widespread virtual worlds, crypto economies and gaming culture?<br>The answer, I believe, is “gamecults.”<br>Large-scale social movements powered by extreme or bizarre beliefs, birthed in virtual worlds, driven by game dynamics, but with real-world consequence.</p><pre><code class="hljs bash">那么，当你将数十亿寻求意义、安全和安保的人与广泛的虚拟世界、加密经济和游戏文化混合在一起时，会发生什么呢？我认为，答案是“游戏崇拜”。由极端或奇异信仰驱动的大规模社会运动，诞生于虚拟世界，由游戏动力学驱动，但具有现实后果。</code></pre><p>08:51</p><p>The future is about to get weird. We can already see examples of this all around us. We just haven’t had a name for it yet.<br>Softer versions look like BTS stans swarming Donald Trump rallies online, but more extreme versions look like Hezbollah’s own custom-made video game called Special Forces, designed to recruit young people and train them to kill their enemies.<br>White nationalist groups are hosting Call of Duty tournaments online to attract followers, and there are Roblox games where you can drive your car through Black Lives Matter protesters or assume the role of Kyle Rittenhouse and shoot anti-fascist protesters.<br>And there are many other examples, but all of them are wrapped in a layer of Discord servers and YouTube channels and podcasts that act as the funnel to draw you deeper into a web of extremism and radical behavior.<br>What starts on the screen no longer stays on the screen.<br>QAnon is a perfect example of this. What started on 4chan and Facebook, mutated into a live-action role-playing group for evangelical militants and ended up as an anti-vaccination campaign.<br>Before you know it, we have a million excess deaths from COVID in the United States and a political landscape far stranger than anything we’ve ever seen. The same is going to be true for games.<br>First you’re a player, then you’re a fan, soon you’re in a clan, and before you know it, you’re invading the Capitol.</p><pre><code class="hljs bash">未来将变得怪异。我们已经在身边看到了这样的例子。我们只是还没有一个名字。较软的版本看起来像是聚集在唐纳德·特朗普（Donald Trump）网上的BTS斯坦斯，但更极端的版本看起来就像是真主党自己定制的名为“特种部队”（Special Forces）的视频游戏，旨在招募年轻人并训练他们杀死敌人。白人民族主义团体正在网上举办“使命召唤”锦标赛以吸引追随者，还有Roblox游戏，你可以开车穿过黑人生活事件抗议者，或扮演Kyle Rittenhouse的角色，枪击反法西斯抗议者。还有许多其他的例子，但所有这些都被包裹在一层Discord服务器、YouTube频道和播客中，它们就像一个漏斗，将你拉入极端主义和激进行为的网络。屏幕上开始的内容不再停留在屏幕上。QAnon就是一个很好的例子。从4chan和Facebook开始，演变成一个福音派武装分子的实况角色扮演小组，最终成为一场反疫苗运动。在你意识到这一点之前，我们在美国有一百万人死于禽流感，政治形势比我们见过的任何情况都要奇怪。游戏也是如此。首先你是一名球员，然后你是一个球迷，很快你就加入了一个家族，在你意识到这一点之前，你正在入侵国会大厦。</code></pre><p>10:19</p><p>So I’m a futurist. And there’s a saying with futurists, that your job is not to just predict the automobile, but to predict the traffic jams.<br>So what might this look like in 10 or 20 years, when widespread augmented and virtual reality meets thriving crypto economies and a generalized crisis of meaning?<br>Well in the future, games are going to be everywhere. They’re going to move from our screens and onto the streets around us. Hundreds of millions, if not billions of people will be buying, selling, making and trading virtual goods online.<br>They’re going to assume roles as characters, follow quests and get real-world money for in-game performance.<br>Guilds, corporations and clans will form around them. They might start offering salaries, paying benefits, and providing real-world services like education or health care or even security.<br>People’s entire lives will be built around their characters and their stories, particularly if things get really bad.<br>And those stories will come to dominate popular culture and politics.</p><pre><code class="hljs bash">所以我是一个未来学家。未来学家有一句话说，你的工作不仅仅是预测汽车，而是预测交通堵塞。那么，在10年或20年后，当广泛的增强和虚拟现实遇到繁荣的加密经济和普遍的意义危机时，这会是什么样子？未来，游戏将无处不在。它们将从我们的屏幕移动到我们周围的街道上。数以亿计，如果不是数十亿计的人将在线购买、销售、制造和交易虚拟商品。他们将扮演角色，跟随任务，为游戏中的表现获得真实的金钱。他们周围将形成帮会、公司和部族。他们可能会开始提供薪水，支付福利，并提供诸如教育、医疗保健甚至安全等现实服务。人们的整个生活都将围绕着他们的角色和故事，尤其是当事情变得非常糟糕的时候。这些故事将主宰大众文化和政治。</code></pre><p>11:23</p><p>Now, thankfully, not all of them will be harmful, but some will be violently evangelical in their nature.<br>It’s got me thinking, there must be a better way that we can use these dynamics to heal instead of harm.<br>So I started thinking, what might this look like? How can we explore possible futures for positive game cults?<br>So here are just three examples I came up with a few friends.<br>Consider Druidica, a Minecraft-like nature game designed to restore damaged ecosystems and preserve indigenous knowledge.<br>Or perhaps Walkabout, a Rust-like survival game for refugees designed to encourage skill sharing, interdependence and mutual aid linked to scriptural messages of tolerance and compassion.<br>Or perhaps Temple, a pray-to-earn game, linked to a network of nondenominational meditation spaces where players can perform coordinated acts of care to level up on the good works board.<br>A kind of, decentralized church of kindness, powered maybe by HOLY coin.</p><pre><code class="hljs bash">谢天谢地，并不是所有这些都是有害的，但有些人的本性是极端的福音派。这让我想，一定有更好的方法，我们可以利用这些动力来治愈而不是伤害。所以我开始思考，这看起来像什么？我们如何探索积极游戏崇拜的未来？下面是我和几个朋友想出的三个例子。以Druidia为例，这是一款类似于Minecraft的自然游戏，旨在恢复受损的生态系统并保护本土知识。或者也许是步行游戏，一种类似于Rust的难民生存游戏，旨在鼓励技能分享、相互依存和互助，并将其与圣经中的宽容和同情信息联系起来。或者，Temple，一款祈求赚钱游戏，与一个非教派冥想空间网络相连，玩家可以在那里进行协调的护理行为，从而在优秀作品板上升级。一种分散的仁慈教会，可能由圣洁的硬币驱动。</code></pre><p>12:33</p><p>It’s clear that something like this is coming.<br>The question is: What can we do about it now? As we’ve learned from social media, technological fixes and regulatory restrictions will only go so far. And in the attention economy of political priorities, gamecults are clearly quite low.<br>But that’s OK, it means we still have time to do something about them.<br>That’s why I think that everyone, from policymakers to players to game designers and gamers should be having a conversation about what this means right now.<br>If you are a media company, you should be talking to experts in radicalization.<br>If you are a game company, you should be speaking to those who don’t understand gaming dynamics and the communities around them.<br>If you’re a church or a religious institution, you should be understanding how people use these tools to build beliefs and what they’re believing.<br>And finally, perhaps most importantly, if you’re a parent, you should be playing games with your kids to understand the world that they’re growing up in and to have a conversation with them about the role that they might play in it.</p><pre><code class="hljs bash">很明显，类似的事情即将发生。问题是：我们现在能做什么？正如我们从社交媒体中了解到的那样，技术修复和监管限制只会走这么远。而在政治重点的注意力经济中，游戏崇拜者显然相当少。但没关系，这意味着我们还有时间做一些事情。这就是为什么我认为每个人，从决策者到玩家到游戏设计者和玩家，都应该就这意味着什么进行对话。如果你是一家媒体公司，你应该与激进派专家交谈。如果你是一家游戏公司，你应该与那些不了解游戏动态和周围社区的人交流。如果你是一个教堂或宗教机构，你应该了解人们如何使用这些工具来建立信仰以及他们信仰什么。最后，也许最重要的是，如果你是家长，你应该和你的孩子玩游戏，了解他们成长的世界，并与他们谈论他们可能在其中扮演的角色。</code></pre><p>13:37</p><p>Someone’s going to connect these dots. The question is: Who is going to be our modern-day Hassan?<br>And will the games of tomorrow be games of subjugation and domination? Or inspiration and liberation. It’s really up to us.</p><pre><code class="hljs bash">有人会把这些点连接起来。问题是：谁将成为我们今天的哈桑？明天的游戏会是征服和统治的游戏吗？或者灵感和解放。这完全取决于我们。</code></pre><p>13:55</p><p>Thank you.</p><pre><code class="hljs bash">非常感谢。</code></pre><p>13:56</p><p>(Applause)</p><p>摘录地址:</p><pre><code class="hljs bash">https://www.ted.com/talks/noah_raford_how_video_games_can_use_their_power_for_good/transcript</code></pre><p><u><strong>本文为学习记录, 仅供学习与参考!</strong></u></p>]]></content>
    
    
    <categories>
      
      <category>english</category>
      
      <category>ted talks daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>english</tag>
      
      <tag>ted talks daily</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>re-正则表达式-01</title>
    <link href="/2022/09/18/re-sample-01/"/>
    <url>/2022/09/18/re-sample-01/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="re-正则表达式-01"><a href="#re-正则表达式-01" class="headerlink" title="re-正则表达式-01"></a>re-正则表达式-01</h3><h4 id="1-分隔空格"><a href="#1-分隔空格" class="headerlink" title="1.分隔空格,;"></a>1.分隔空格,;</h4><pre><code class="hljs python">asdf fjdk; afed, fjek,asdf, foo</code></pre><p>匹配符:</p><pre><code class="hljs bash">[;,\s]\s*</code></pre><p>匹配结果:</p><pre><code class="hljs python">line = <span class="hljs-string">&#x27;asdf fjdk; afed, fjek,asdf, foo&#x27;</span>s = re.split(<span class="hljs-string">r&#x27;[;,\s]\s*&#x27;</span>, line)print(<span class="hljs-string">&#x27;re split: &#x27;</span>, s)结果:re split:  [<span class="hljs-string">&#x27;asdf&#x27;</span>, <span class="hljs-string">&#x27;fjdk&#x27;</span>, <span class="hljs-string">&#x27;afed&#x27;</span>, <span class="hljs-string">&#x27;fjek&#x27;</span>, <span class="hljs-string">&#x27;asdf&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>]</code></pre><p>函数 re.split() 是非常实用的，因为它允许你为分隔符指定多个正则模式.<br>比如， 在上面的例子中，分隔符可以是逗号，分号或者是空格，并且后面紧跟着任意个的空格.<br>只要这个模式被找到，那么匹配的分隔符两边的实体都会被当成是结果中的元素返回.</p><h4 id="2-括号捕获分组"><a href="#2-括号捕获分组" class="headerlink" title="2.括号捕获分组"></a>2.括号捕获分组</h4><p>使用 re.split() 函数时候，需要特别注意的是正则表达式中是否包含一个括号捕获分组.<br>如果使用了捕获分组，那么被匹配的文本也将出现在结果列表中.</p><p>匹配符:</p><pre><code class="hljs bash">(;|,|\s)\s*</code></pre><p>匹配结果:</p><pre><code class="hljs python">line = <span class="hljs-string">&#x27;asdf fjdk; afed, fjek,asdf, foo&#x27;</span>fields = re.split(<span class="hljs-string">r&#x27;(;|,|\s)\s*&#x27;</span>, line)print(<span class="hljs-string">&#x27;re split (): &#x27;</span>, fields)结果:re split ():  [<span class="hljs-string">&#x27;asdf&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;fjdk&#x27;</span>, <span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;afed&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;fjek&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;asdf&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;foo&#x27;</span>]</code></pre><h4 id="3-非捕获分组"><a href="#3-非捕获分组" class="headerlink" title="3.非捕获分组"></a>3.非捕获分组</h4><p>不想保留分割字符串到结果列表中去，但仍然需要使用到括号来分组正则表达式的话，<br>确保你的分组是<u><strong>非捕获分组</strong></u>，形如 <code>(?:...)</code></p><p>匹配符:</p><pre><code class="hljs bash">(;|,|\s)\s*</code></pre><p>匹配结果:</p><pre><code class="hljs python">line = <span class="hljs-string">&#x27;asdf fjdk; afed, fjek,asdf, foo&#x27;</span>a = re.split(<span class="hljs-string">r&#x27;(?:,|;|\s)\s*&#x27;</span>, line)print(<span class="hljs-string">&#x27;re split ?: &#x27;</span>, a)结果:re split ?:  [&#x27;asdf&#x27;, &#x27;fjdk&#x27;, &#x27;afed&#x27;, &#x27;fjek&#x27;, &#x27;asdf&#x27;, &#x27;foo&#x27;]</code></pre><h4 id="4-多行匹配"><a href="#4-多行匹配" class="headerlink" title="4.多行匹配"></a>4.多行匹配</h4><p>为了修正这个问题，你可以修改模式字符串，增加对换行的支持.<br>在这个模式中，<code>(?:.|\n)</code> 指定了一个非捕获组 (也就是它定义了一个仅仅用来做匹配，而不能通过单独捕获或者编号的组).</p><pre><code class="hljs python">text2 = <span class="hljs-string">&#x27;&#x27;&#x27;/* this is a</span><span class="hljs-string"> multiline comment */ </span><span class="hljs-string">        &#x27;&#x27;&#x27;</span>multi_comment = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;/\*((?:.|\n)*?)\*/&#x27;</span>)c = multi_comment.findall(text2)print(<span class="hljs-string">&#x27;findall multi lines found: &#x27;</span>, c)结果findall multi lines found:  [<span class="hljs-string">&#x27; this is a\n multiline comment &#x27;</span>]</code></pre>]]></content>
    
    
    <categories>
      
      <category>framework</category>
      
    </categories>
    
    
    <tags>
      
      <tag>framework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>架构-01</title>
    <link href="/2022/09/15/framework-01/"/>
    <url>/2022/09/15/framework-01/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p><u><strong>PS: 本文为学习记录, 仅供参考使用.</strong></u></p><h3 id="架构-01"><a href="#架构-01" class="headerlink" title="架构-01"></a>架构-01</h3><h4 id="1-学习方针"><a href="#1-学习方针" class="headerlink" title="1. 学习方针"></a>1. 学习方针</h4><ul><li>空杯心态</li><li>坚持学习</li><li>深度思考, 刻意练习</li><li>35岁之前靠智力, 35岁之后靠体力</li></ul><h4 id="2-知识目标"><a href="#2-知识目标" class="headerlink" title="2. 知识目标"></a>2. 知识目标</h4><ul><li>互联网三高架构演进之道</li><li>单体架构设计与实践</li><li>面向服务架构设计与实践</li><li>水平分层架构设计与实践</li><li>微服务架构设计与实践</li><li>服务网络架构设计与实践</li><li>大中台化架构设计与实践</li><li>云原生架构设计与实践</li><li>线上真实案例演进实践</li></ul><h3 id="3-架构"><a href="#3-架构" class="headerlink" title="3. 架构"></a>3. 架构</h3><p>架构:</p><ul><li>对业务场景抽象后得出的支撑骨架<ul><li>业务复杂度 / 数据规模大小 / 人员技术研发能力 / 时间成本 / 运维能力</li></ul></li><li>最适合”架构都是各方面折中(Balance)”的结果<ul><li>降本增效</li></ul></li></ul><p>一切脱离业务场景谈架构, 都是耍流氓</p><p>一切脱离场景谈架构, 都是耍流氓</p><p>场景驱动架构不断演进</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/framework-01/001.png" alt="001"></p><p><code>1:22</code></p>]]></content>
    
    
    <categories>
      
      <category>framework</category>
      
    </categories>
    
    
    <tags>
      
      <tag>framework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pmp-冲刺</title>
    <link href="/2022/08/13/pmp-sprint/"/>
    <url>/2022/08/13/pmp-sprint/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="1-敏捷实践指南"><a href="#1-敏捷实践指南" class="headerlink" title="1. 敏捷实践指南"></a>1. 敏捷实践指南</h3><ul><li>看板</li></ul><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-sprint/02.png" alt="02"></p><pre><code class="hljs bash">一个新成立的Scrum开发团队正在为用户故事，测试用例寻找模板。他们应该找谁？A. 敏捷 PMOB. 另一个项目的Scrum 主管C. 产品负责人D. 质量控制团队<span class="hljs-comment"># A</span><span class="hljs-comment"># 《敏捷实践指南》P80-6.6.3.敏捷PMO为多学科型.</span><span class="hljs-comment"># PMO可以制定和实施标准，提供用户故事、测试案例、累积流图等模板.</span></code></pre><pre><code class="hljs bash">你的组织中的一个敏捷团队收集了对一个特定项目迭代的所有需求.这些需求被转化为设计规格，随后开始进行开发工作.在验收测试过程中，团队意识到一些设计假设不成立，大部分功能需要返工.到底是哪里出了问题？A. 没有出错，敏捷团队欢迎返工B. 团队没有把设计规格中的假设记录下来C. 团队掉进了迷你瀑布的陷阱D. 需求收集过程可能存在缺陷<span class="hljs-comment"># C</span><span class="hljs-comment"># 《敏捷实践指南》P39 知识点：敏捷团队.</span><span class="hljs-comment"># 关键词：所有需求，转化为设计规格，开发工作 可以看到题目中的场景更像一种瀑布的模式，</span><span class="hljs-comment"># 团队在给定时间解决所有的需求，然后试图完成所有的设计，继而又去完成所有的构建，</span><span class="hljs-comment"># 就会发生迷你瀑布的情况。使用这个场景，在构建中或构建后测试中的某一时刻，</span><span class="hljs-comment"># 团队可能会意识到，原先的假设已经不再有效.</span><span class="hljs-comment"># 这种情况下，团队解决所有的需求根本是在浪费时间。所以选项C正确.</span><span class="hljs-comment"># A - 敏捷拥抱变化，但返工是一种浪费.</span><span class="hljs-comment"># B - 敏捷中假设需要不断的和客户验证来防止，单单记录下来并不能解决问题.</span><span class="hljs-comment"># D - 题目没有提及，且项目是不断变化的，需求收集不可能完美。这也是敏捷存在的意义.</span></code></pre><pre><code class="hljs bash">一个小组已经在一起工作了一个月。在每天的会议上，一个团队成员持续表示他们在完成的任务方面有问题.项目经理应该怎么做？A. 与所有团队成员开始讨论，帮助解决这些问题B. 等待团队独立发现并解决问题C. 将团队成员转移到另一个技能更合适的任务上D. 与团队成员进行秘密讨论，找出根本原因<span class="hljs-comment"># B</span><span class="hljs-comment"># 4.3 团队构成《敏捷实践指南》第38-43页 敏捷的原则指出最佳的架构、需求和设计将出自自组织团队，</span><span class="hljs-comment"># 因此项目经理在敏捷团队中应该鼓励团队自我领导、互相合作并且独立解决问题，</span><span class="hljs-comment"># 因此，本题答案选选项B.</span><span class="hljs-comment"># A - 应该鼓励团队成员自主解决问题，而不是直接帮团队解决问题</span><span class="hljs-comment"># C - 自组织团队是跨职能的，应该培养成员成为通才型专家，而不是在成员遇到问题时将他转移到别的任务上.</span><span class="hljs-comment"># D - 秘密讨论不利于团队成员之间互相交流沟通、共同解决问题.</span></code></pre><pre><code class="hljs bash">预测性项目管理强调项目整合管理的重要性，希望项目经理能够掌控详细的产品规划，并将项目的不同环节相互融合.在敏捷项目中，谁主要负责整合管理?A. 敏捷教练B. 服务型领导C. 产品负责人D. 开发团队<span class="hljs-comment"># D</span><span class="hljs-comment"># 《敏捷实践指南》P40 知识点：跨职能团队成员.</span><span class="hljs-comment"># 关键词：谁主要负责整合管理 敏捷团队的属性之一就是跨职能团队成员为完成任务，</span><span class="hljs-comment"># 整合所有工作活动。所以选择D选项.</span><span class="hljs-comment"># AB - 敏捷教练和服务型领导都对整合提供指导和支持，并不进行决定.</span><span class="hljs-comment"># C  - 产品负责人主要职责在维护产品待办事项列表和代表客户验收.</span></code></pre><pre><code class="hljs bash">一个新的团队成员加入了一个自组织的团队.这位新成员不愿意发言，也不愿意参与团队的讨论或决策.该团队应该采取哪两个行动来吸引这个新成员？(选择两个）A. 重温团队中关于团队行为和规范的讨论B. 促进对所有想法和观点的公开讨论C. 迫使新的团队成员参与那些被认为是容易的活动D. 指导新团队成员提高对团队的参与度E. 向项目经理报告新团队成员的行为<span class="hljs-comment"># BD</span><span class="hljs-comment"># 《敏捷实践指南》4.3.1-敏捷团队.</span><span class="hljs-comment"># 注意关键字&quot;自组织的团队&quot;，说明团队已经形成自我管理的能力，</span><span class="hljs-comment"># AC - 此时不宜采用命令的方式进行管理，强调团队成员的主观能动性，所以选项AC都是错误的.</span><span class="hljs-comment"># E  - 另外，团队的效率取决于团队成员之间的紧密程度，</span><span class="hljs-comment">#      所以向项目经理报告的这种会降低团队成员信任感的行为不可取，排除E选项.</span></code></pre><pre><code class="hljs bash">一家公司的项目管理办公室（PMO）已经开始实施迭代工具.一位项目经理正在开始一个新的项目，并发现了一个使用迭代工具的机会.其中一位高级经理对这个修改后的框架感到担忧，因为它对公司来说相当新.项目经理应该先做什么？A. 向该高级经理发送关于新框架的优势的文件B. 将高级经理的担忧上报给项目发起人，并将状态分发给团队C. 寻找关于新框架的外部培训，以消除利益相关方的低参与度的风险D. 与利益相关方组织个别会议，以建立对新框架的认识和信任<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK-13.3.2.5 会议.</span><span class="hljs-comment"># 在敏捷转型的过程中，相关方对新的框架感到担忧是正常的，</span><span class="hljs-comment"># 应该通过沟通，了解相关方的关切点，然后进行解决和建立信任，选项D正确.</span><span class="hljs-comment"># AC - 都是具体的解决措施，没有了解相关方担忧的点以及原因是什么就实施措施不合适.</span><span class="hljs-comment"># B  - 项目经理应先自行尝试沟通解决，不宜直接上报.</span></code></pre><pre><code class="hljs bash">在项目执行期间，项目经理注意到，只有一名团队成员拥有构建产品所需的其中一项技术技能.项目经理担心，这将来可能会对质量和进度计划产生影响，因为多数即将开展的活动将至少需要三名具备该特定技能的团队成员，项目经理应采取哪两种措施来避免团队成员不符合资格要求？（选择两项）A. 将该新技能教给整个团队B. 鼓励团队成员结对工作，并进行知识共享C. 增加需要此类能力的活动预计所需时间D. 与外部培训师一起开展培训活动E. 将相关活动从路线图中剔除<span class="hljs-comment"># BD</span><span class="hljs-comment"># 《敏捷实践指南》39页，4.3.1-敏捷团队.</span><span class="hljs-comment"># 在成功的敏捷团队中，团队成员在工作中以各种方式开展合作，</span><span class="hljs-comment"># 例如结对、群集、群体开发，所以鼓励团队成员结对合作相互学习，</span><span class="hljs-comment"># 可以弥补所需资源短缺的问题，因此选项B正确.</span><span class="hljs-comment"># 而传统的培训方式自然也是可以用来解决这一问题，所以选项D正确.</span><span class="hljs-comment"># A - 再有两位团队成员具备此项技能就能满足项目实施的要求，所以传授给整个团队，是一种浪费.</span><span class="hljs-comment">#     虽然在敏捷团队中，提倡T型人才的加入，但也并不是要求所有的团队成员都通晓所有的工具，</span><span class="hljs-comment">#     这是不现实的，一般来说，一个团队成员能够掌握3~4种技能或者工具的使用，就能够满足敏捷实践的要求.</span><span class="hljs-comment"># C - 如果考虑增加任务的时长也需要针对团队经过培训学习后的执行效率来增加，直接增加缺乏估算的依据.</span><span class="hljs-comment"># E - 将任务删除，这是极其错误的做法，排除.</span></code></pre><pre><code class="hljs bash">某预测型组织最近决定转向敏捷交付方法.正在进行的项目仍将由项目经理领导，由于项目A预算意外超支，高层管理人员对敏捷项目团队是否已做好对项目预算进行自我管理的准备缺乏信心.项目A的项目经理应采取哪两种措施？（选择两项）A. 邀请高层管理人员参加站会，向其提供开支方面的状态报告B. 与高层管理人员就开支问题确定上报层级C. 让敏捷教练向高层管理人员提供项目开支周报D. 邀请高层管理人员参加每个冲刺的回顾会议，以便对开支作出评估E. 在敏捷教练的帮助下创建信息发射源，使开支可视化<span class="hljs-comment"># BE</span><span class="hljs-comment"># 《敏捷实践指南》50页，5.2-常见敏捷实践.</span><span class="hljs-comment"># 预测型生命周期向敏捷的转型如同儿童学步，组织不安于彻底放手，</span><span class="hljs-comment"># 敏捷实施的过程中但凡受阻，组织就总想再握紧敏捷团队的手.</span><span class="hljs-comment"># 所以要想打消组织对敏捷团队的顾虑，就需要做好信息的同步，</span><span class="hljs-comment"># 可以采取的良好实践是建立固定的信息传递渠道，定期的让组织知晓团队的开销状况，</span><span class="hljs-comment"># 另外也可以信息发射源的方式，满足组织中的某些管理层想要频繁了解项目开支状况的期望，所以选项BE正确.</span><span class="hljs-comment"># A - 站会上通常讨论工作进展和遇到的障碍，不涉及到成本支出.</span><span class="hljs-comment"># C - 敏捷教练负责辅导团队成员熟悉敏捷实践的框架和工具，在存在项目经理的时候，上报的责任归属于项目经理.</span><span class="hljs-comment"># D - 回顾会议上讨论的是导致成本超支的原因，进而在下一次迭代中改善绩效.</span></code></pre><pre><code class="hljs bash">在某项目的一个迭代中，一项已规划的活动变得越发复杂，相关工作应在最短时间内交付，这种情况下应运用什么样的方法？A. 产品负责人将该活动载入产品待办事项列表B. 团队成员引入专业人士提供帮助C. 跨职能部门的团队成员协同努力完成该活动D. 团队指导者从外部团队成员获得支持<span class="hljs-comment"># C</span><span class="hljs-comment"># 《敏捷实践指南》42页，4.3.3-通才型专家.</span><span class="hljs-comment"># 要理解&quot;一项已规划的活动变得越发复杂&quot;，潜台词是当前团队成员应对颇为困难，</span><span class="hljs-comment"># 同时又要保证项目的工期。这时，就迫切需要引入强力的支援.</span><span class="hljs-comment"># 在敏捷实践中，对于支援力量倾向于从组织内部获取跨职能部门的协助，</span><span class="hljs-comment"># 相对从组织外部获取支援，跨职能部门的协作更为紧密和融洽，选项C正确.</span><span class="hljs-comment"># A  - &quot;已规划的活动&quot;说明已经位于产品待办事项列表.</span><span class="hljs-comment"># BD - 冒然引入外部资源，可能会影响到当前团队的执行效率，</span><span class="hljs-comment">#      所以在迫不得已使用外部资源时，要采用团队扩充的策略.</span></code></pre><pre><code class="hljs bash">在一个敏捷项目的建立过程中，产品负责人明确表示希望在产品开发过程中发布功能,而不是在一年内完成产品的开发。项目经理应该怎么做？A. 促进一个富有成效的环境，让每个人都能在不被其他团队成员干扰的情况下工作B. 建立一个奖励制度，表彰团队的贡献，以激发人们的积极性并提高绩效C. 促进冲刺计划会议，重点是定义最小可行产品 (MVP)D. 设计一套衡量标准，包括速度，这是衡量交付价值的一个好方法<span class="hljs-comment"># C</span><span class="hljs-comment"># 关键字&quot;在产品开发过程中发布功能&quot;，</span><span class="hljs-comment"># 说明了将采用增量的方式进行发布，那么发布的一定是最具有价值的小批量的产品，即C答案;</span><span class="hljs-comment"># A - 建设不受干扰环境和题目目的不搭;</span><span class="hljs-comment"># B - 是团建的工具，同样和题目增量的开发要求也不搭;</span><span class="hljs-comment"># D - 团队的速率velocity，是衡量团队绩效的指标，不是交付价值的指标.</span></code></pre><pre><code class="hljs bash">选项ABCD中显示了所创造的商业价值以及在产品中实施各种功能需要进行的开发工作.团队应优先实施哪项功能？A. 功能名称 Feature Name: A 商业价值（单位） Business Value(units):6 开发工作（周数 Development Effort(weeks):2B. 功能名称 Feature Name: B 商业价值（单位） Business Value(units):10 开发工作（周数） Development Effort(weeks):4C. 功能名称 Feature Name: C 商业价值（单位） Business Value(units):4 开发工作（周数） Development Effort(weeks):4D. 功能名称 Feature Name: D 商业价值（单位） Business Value(units):8 开发工作（周数） Development Effort(weeks):8<span class="hljs-comment"># A</span><span class="hljs-comment"># 《敏捷实践指南》22页，3.1.3-增量型生命周期的特征.</span><span class="hljs-comment"># 4个功能模块的价值/开发周数，可以得到4个功能模块在单位时间内获得的价值，</span><span class="hljs-comment"># 分别为3、2.5、1、1，所以从追求快速交付价值的维度来分析，首先开发功能A较为理想.</span></code></pre><pre><code class="hljs bash">一个新的商业业务最近启动了一个项目，开发一个网络知识库.由于预算限制，该项目需要依赖有限的内部资源。管理层对持续时间较长的项目有较高的容忍度，只要初期能交付网站的基本版本，其余的需求就可以在后期交付.你会为这个项目选择哪种生命周期?A. 预测型B. 敏捷型C. 增量型D. 瀑布型<span class="hljs-comment"># C</span><span class="hljs-comment"># 《敏捷实践指南》第22页.</span><span class="hljs-comment"># 有些项目优化是为了加快交付速度. 许多企业和项目无法等待所有的事情全部完成，</span><span class="hljs-comment"># 这种情况下，客户愿意接受整个解决方案的一个部分.</span><span class="hljs-comment"># 这种少量可交付成果的频繁交付即为增量型生命周期.</span><span class="hljs-comment"># 题干中的关键字&quot;初期能交付网站的基本版本，其余的需求可以在后期交付&quot;指出该项目可以先交付基本版本，</span><span class="hljs-comment"># 后期交付其余部分，向客户提供的是可立即使用的可交付成果，符合增量型生命周期的特征，选项C正确.</span><span class="hljs-comment"># A - 预测型生命周期适用于需求明确，成本明确，时间明确的项目，</span><span class="hljs-comment">#     项目通常要提前进行大量的计划工作，然后一次性执行，执行是一个连续的过程.</span><span class="hljs-comment"># B - 敏捷型生命周期适用于频繁小规模交付，但每次的可交付成果并不一定是最小可用产品，</span><span class="hljs-comment">#     而是反复执行直到实现客户价值.</span><span class="hljs-comment"># D - 瀑布型生命周期是将产品生存周期的各项活动规定为按固定顺序而连接的若干阶段工作，</span><span class="hljs-comment">#     形如瀑布流水，最终得到产品。选项ABD均不符合题干描述的情景.</span></code></pre><pre><code class="hljs bash">敏捷实践促进了专门的团队成员。如果不是这样的话，团队成员必须处理多项任务，并经历生产力的损失.平均而言，生产力损失的范围是什么？A. 0%至10%B. 15%至30%C. 50%至75%D. 20%至40%<span class="hljs-comment"># D</span><span class="hljs-comment"># 那些不专注于敏捷团队、</span><span class="hljs-comment"># 必须在不同任务间切换的团队成员平均损失20%到40%的生产力，概念题，背一下即可。</span></code></pre><pre><code class="hljs bash">罗恩是一名开发人员，正在开发一个新的智能手机应用程序.他和他的团队正在使用Scrum来执行这项工作.罗恩刚刚完成了他在当前冲刺阶段所负责的用户故事的工作，并审查了标准，以确保它们是完整的，并准备好供客户使用.这些标准被称为什么？A. 验收标准B. 完成的定义C. 价值流图谱D. 计划-执行-检查-行动<span class="hljs-comment"># B</span><span class="hljs-comment"># 完成的定义 （DOD） 是指一个团队的检查清单，</span><span class="hljs-comment"># 其中包含了所有需要满足的标准，这样一个交付物就可以被认为是可以供客户使用的.</span><span class="hljs-comment"># 验收标准是指在交付物被接受之前必须满足的一系列条件.</span></code></pre><pre><code class="hljs bash">你是一名敏捷教练，希望确认开发团队有一种简单的方法来整理工作并将迭代中的剩余工作可视化.以下哪项是你可用来实现这个目的的最好方法?A. 使用信息发射源B. 使用燃尽图C. 使用燃起图D. 使用任务板说明<span class="hljs-comment"># D</span><span class="hljs-comment"># 《敏捷实践指南》，A3.4.看板方法，P105.</span><span class="hljs-comment"># 题干中的关键句是&quot;一种简单的方法来整理工作并将迭代中的剩余工作可视化&quot;.</span><span class="hljs-comment"># A - 错误，信息发射源是一种可见的实物展示，其向组织内其他成员提供信息在不干扰团队的情况下即时实现知识共享.</span><span class="hljs-comment">#     因此它是一种即时实现知识共享的媒介.</span><span class="hljs-comment"># B - 错误，这道题容易错选B，燃尽图是当前迭代剩余工作与时间盒内剩余时间关系的一种图形化表示形式，</span><span class="hljs-comment">#     它可视化的展示了当前迭代剩余的故事点数，但是它并不是&quot;一种简单的整理工作的方法&quot;. </span><span class="hljs-comment"># C - 错误，燃起图是对当前迭代已完成工作与时间盒内剩余时间关系的一种图形化表示形式，</span><span class="hljs-comment">#     它存在两个错误点，一是燃起图展示的是当前迭代已完成和故事点，和题干描述正好相反;</span><span class="hljs-comment">#     二是燃起图和燃尽图一样，它也并不是&quot;一种简单的整理工作的方法&quot;.</span><span class="hljs-comment"># D - 正确，&quot;任务板&quot;，也成看板面板，看板面板是一种技术含量低但接触广泛的技术，</span><span class="hljs-comment">#     利用列进入和退出策略以及限制在制品等制约因素，可提供一目了然的工作流、瓶颈、阻碍和整体状态信息，</span><span class="hljs-comment">#     也包括当前迭代剩余工作的状态，符合题目的要求，因此选D.</span></code></pre><pre><code class="hljs bash">你是SubZero Delights公司的一名项目经理，该公司为旅行者提供非凡的体验.你的最新项目涉及开发一个智能手机应用程序，该程序可以自动获取客户的GPS坐标，以提供定制的资源和建议。你选择了一种混合方法，目的是为了更快地交付成果，并最大限度地提高团队的工作速度. 该团队可以采用以下哪种技术实践来实现这一目标？A. 持续集成B. 在所有级别进行测试C. 测试驱动的开发D. 峰值E. 以上都是F. 以上都不是<span class="hljs-comment"># E</span><span class="hljs-comment"># 有一些技术实践可以帮助团队以最快的速度交付，</span><span class="hljs-comment"># 其中一些来自于eXtreme编程.</span><span class="hljs-comment"># 例如，持续集成、各级测试、验收测试驱动的开发、测试驱动的开发和行为驱动的开发，以及尖峰.</span></code></pre><pre><code class="hljs bash">一家公司的领导团队决定使用敏捷方法投资一个新产品，商业和产品团队已经开始为这个新企业进行规划活动，为了交付这个产品，项目经理需要哪三个关键因素？（选择3个）A. 高水平的产品待办事项B. 关键绩效指标 (KPIs)C. 产品愿景D. 计划绩效指标(SP)E. 产品路线图<span class="hljs-comment"># ACE</span><span class="hljs-comment"># 关键宇&quot;为这个新企业进行规划活动&quot;，所以对敏捷的成功执行需要的是项目目标，</span><span class="hljs-comment"># 开发的列表以及用户故事地图等，这里对应的就是ACE答案.</span><span class="hljs-comment"># BD - 属于绩效指标，那么属于项目过程中需要的而不是现在需要的指标.</span></code></pre><pre><code class="hljs bash">一位项目经理最近加入公司。在面试中，该项目经理展示了敏捷交付的经验，而项目管理办公室(PMO）的经理要求协助实施敏捷.项目经理应该怎么做才能在公司内部启动敏捷的应用？A. 与开发人员和测试人员一起组织敏捷研讨会，以获得他们对项目使用敏捷方法的支持B. 要求所有的项目经理和业务经理接受项目经理之前使用的敏捷框架的培训C. 建议PMO经理继续使用公司目前的预测性方法，直到所有正在执行的项目都结束D. 评估组织的文化，确定是否可以在项目交付中使用敏捷，并确定要使用的做法<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键字&quot;怎么做才能在公司内部启动敏捷的应用&quot;，只能说D是最优化的.</span></code></pre><pre><code class="hljs bash">Manfrit和Frank是两个项目经理，在他们的职业生涯中一直相互支持.在一次偶然的午餐中，Frank向Manfrit征求意见，指出他一直在努力让他的团队接受eXtreme编程实践.他注意到，在经历了几次培训之后，团队并不理解这些术语，而且觉得很困惑.在这种情况下，Manfrit应该提供什么建议？A. 推进团队同地办公B. 表现出透明度C. 修改术语，让他们感觉更熟悉D. 提供教育和培训<span class="hljs-comment"># C</span><span class="hljs-comment"># 对于希望采用更多敏捷实践的团队来说，</span><span class="hljs-comment"># &quot;定制&quot;往往是解决障碍和阻碍的一种方式.</span><span class="hljs-comment"># 当敏捷的术语和语言不符合组织规范时，克服它的方法之一是修改术语，</span><span class="hljs-comment"># 使团队成员理解并同意这些活动. 为了成功，团队应该明确定义术语，以便与意义保持一致.</span></code></pre><pre><code class="hljs bash">一个项目团队正在使用敏捷的方法来开发一个复杂系统，公司不希望帮助他们测试，因为他们认为测试不是他们的责任.项目经理应该如何鼓励公司同意进行初步审查或测试？A. 使用行为驱动开发的方式进行商业审查B. 使用执行、负责、咨询和知情图向管理层说明这一情況C. 建议测试团队完成所有测试D. 建议质量控制团队为公司进行测试<span class="hljs-comment"># B</span><span class="hljs-comment"># 关键字&quot;一个项目团队正在使用敏捷的方法来开发一个复杂系统&quot;，</span><span class="hljs-comment"># 敏捷的职能其实是没有人有具体职能，或者说所有的职能是交叉的，</span><span class="hljs-comment"># 所以，测试当然是项目团队的工作一部分，这个与管理层的认知有问题，</span><span class="hljs-comment"># 当务之急是弄清楚敏捷的这个特质，所以选择B.</span><span class="hljs-comment"># A  - 的问题商业审查属于要不要开项目的条件.</span><span class="hljs-comment"># CD - 其实是双胞胎，都和敏捷的无具体职能相悖.</span></code></pre><h3 id="2-人际关系与团队技能"><a href="#2-人际关系与团队技能" class="headerlink" title="2. 人际关系与团队技能"></a>2. 人际关系与团队技能</h3><ul><li>会议管理</li><li>敏捷拳头</li></ul><pre><code class="hljs bash">一位项目经理邀请公司CEO、发起人、团队成员和一位外部客户代表参加会议，审查项目管理计划。项目经理开始介绍预算，但CEO突然要求结束会议. 项目经理应该怎么做才能避免这种情况？A. 与外部客户代表一起进行根本原因分析，并将分析结果记录在经验教训登记簿上B. 在会议之前，先将演示幻灯片发给内部参与者，然后再发给外部客户代表C. 在邀请外部客户代表参加会议之前，与内部参与者和CEO一起审查了成本管理计划D. 在邀请外部客户代表参加会议之前，审查了沟通管理计划<span class="hljs-comment"># C</span><span class="hljs-comment"># 《PMBOK》第6版86页，4.2.2.3 人-人际关系与团队技能-会议管理.</span><span class="hljs-comment"># 会议是项目管理过程中非常常用的工具，因此需要利用好会议来实现目的.</span><span class="hljs-comment"># 情景中会议被突然中断，源于&quot;项目经理开始介绍预算&quot;，这个举动超过了CEO的预期.</span><span class="hljs-comment"># C - 因此要想避免这个问题，要清楚会议的目的什么，并根据想要实现的目的来安排会议议程.</span><span class="hljs-comment"># A - 根本原因分析属于事后分析.</span><span class="hljs-comment"># B - 需要先在内部达成一致，而不是先发给谁后发给谁.</span><span class="hljs-comment"># D - 沟通管理计划没有问题，是会议管理不当.</span></code></pre><pre><code class="hljs bash">由于时间方面的制约因素，项目发起人通常会让项目经理免去项目回顾会议，但项目经理会通过减少准备和讨论的时间，坚特保留这一重要会议.项目经理的这些措施可能会导致的两个问题是什么？（选择两项）A. 参加研讨会的团队缺乏方向和积极性B. 聚焦于负面情况，对进一步的改进不感兴趣C. 进行的很多讨论要么无果而终，要么可能会形成太多结果D. 其他团队的经验教训不会被纳入考虑范围E. 回顾研讨会的时间管理计划不会得到更新<span class="hljs-comment"># AC</span><span class="hljs-comment"># 《敏捷实践指南》50页，5.2.1-回顾，《PMBOK》第6版386页，10.2.2.6-人际关系与团队技能-会议管理.</span><span class="hljs-comment"># 会议是一种常用的工具，之所以强调会议的工具属性，</span><span class="hljs-comment"># 是提醒各位将要走上项目管理岗位或者正在实施项目管理的同学，开会不是目的，</span><span class="hljs-comment"># 开会要解决问题同时形成后续的行动方案。所以，若想开好一个会议，</span><span class="hljs-comment"># 需要设置明确的会议议题、议程、参与人员、时间、地点，会后要形成能够指导行动的会议纪要，</span><span class="hljs-comment"># 否则就会白白浪费与会人员的时间。通常来说，为了能够在会议上进行有效地决策，</span><span class="hljs-comment"># 而不是陷入漫无目的的讨论，在参会之前，建议与会人员对在会上要讨论的内容进行预习，选项AC正确.</span><span class="hljs-comment"># B - 如果能够聚焦于负面情况也算是少有成效的会议了，但是更大的可能是连什么是负面情况与会人员都不清楚.</span><span class="hljs-comment"># D - 经验教训可能被提及，但是由于与会人员之前对经验教训并不了解，所以很难达成共识.</span><span class="hljs-comment"># E - 没有回顾研讨会的时间管理计划.</span></code></pre><pre><code class="hljs bash">一个项目经理正在与一个敏捷团队合作，以增强：以增强一个产品.由于有一个由于时间紧迫，该团队正试图通过让多个资源同时参与项目工作来缩短进度.然而，技术环境被配置为一次只允许一个资源在一个功能上工作.团队计划升级技术环境，但无法就未来的发展方向达成一致.项目经理应该先做什么？A. 进行一次建立共识的会议，决定如何处理下一组工作B. 将这个上报给产品负责人解决C. 将这一冲突添加到议程中，以便在下一次日常工作会议上讨论D. 进行一次计划会议，决定如何处理下一组工作<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键宇&quot;团队计划升级技术环境，但无法就末来的发展方向达成一致&quot;，属于资源问题，</span><span class="hljs-comment"># 而且是大家对方案有歧义，需要项目经理引导，开引导式研讨会.</span><span class="hljs-comment"># A - 的问题是开共识大会，这个大会pmp有一个，就是initiation大会.</span><span class="hljs-comment"># B - 麻烦发起人.</span><span class="hljs-comment"># C - 和D比较相对D更优化，C开的是日常会议，相比较还是D开的计划会议更有针对性.</span></code></pre><pre><code class="hljs bash">在项目规划阶段，一个项目经理召集了一次会议，与代表最终用户的多个利益相关者讨论产品待办事项，并与以不同身份代表最终用户的多个利益相关者进行讨论.只有一个执行经理参加了会议。项目经理应该怎么做？A. 与每个利益相关者单独会面，收集对产品待办事项的意见并开始项目规划B. 根据以前的经验教训，继续对产品待办事项进行优先排序，并完成项目规划阶段C. 重新安排会议时间，确保大多数利益相关者出席产品待办事项的讨论D. 继续召开会议，以保持项目的进度，并开始对产品待办事项进行优先排序<span class="hljs-comment"># A</span><span class="hljs-comment"># 关键字&quot;只有一个执行经理参加了会议&quot;，</span><span class="hljs-comment"># 属于敏捷里如何应对相关方的问题；对于收集需求的人数不足够，只能按A的说法，起码保证了相关方的参与;</span><span class="hljs-comment"># BD - 属于&quot;你说你的我做我的&quot;的消极答案;</span><span class="hljs-comment"># C  - 貌似可以，不过问题处在大多数能出席，不是全部.</span></code></pre><pre><code class="hljs bash">在软件开发项目的冲刺会议上，项目经理正在为某个决定投票，一名团队成员握紧拳头。这是什么意思?A. 他没有兴趣参与B. 他对这个决定没意见C. 他不同意这个决定D. 他完全支持这个决定<span class="hljs-comment"># C</span><span class="hljs-comment"># 举手表决是从投票方法衍生出来的一种形式，经常用于敏捷项目中.</span><span class="hljs-comment"># 采用这种技术时，项目经理会让团队成员针对某个决定示意支持程度，</span><span class="hljs-comment"># 举拳头表示不支持，伸五个手指表示完全支持，伸出三个以下手指的团队成员有机会与团队讨论其反对意见.</span><span class="hljs-comment"># 项目经理会不断进行举手表决，直到整个团队达成共识（所有人都伸出三个以上手指）或同意进入下一个决定.</span><span class="hljs-comment"># 题干中&quot;团队成员握紧拳头&quot;表示该成员不同意该决定，选项C正确，选项ABD不正确.</span></code></pre><pre><code class="hljs bash">敏捷项目团队的一些成员在远程工作，因此很难定期举行面对面的待办列表梳理会议.敏捷管理专业人士应该如何确保团队能够在这种环境中减少沟通错误和返工？A. 认可相关方的不同沟通方式，并对适合团队的最佳沟通方式进行投票B. 将该问题升级上报给高级管理层，并确保项目团队中的每个人都能为计划的所有敏捷事件进行物理上的集中办公C. 投资技术协作工具，以实现有效沟通，并确保对范围、问题和解决方案达成共识D. 了解团队的物理和虛拟沟通需求，并根据团队成员的大多数需求规划敏捷事件<span class="hljs-comment"># C</span><span class="hljs-comment"># 敏捷思维强调面对面沟通，分散式团队成员也需要虚拟的工作空间，</span><span class="hljs-comment"># 需要定期聚集一堂，以便建立信任、学习怎么开展合作，充分使用协作技术，</span><span class="hljs-comment"># 如一些协作工具，帮助团队实现有效沟通.</span></code></pre><h3 id="3-风险管理计划"><a href="#3-风险管理计划" class="headerlink" title="3. 风险管理计划"></a>3. 风险管理计划</h3><ul><li>相关方风险偏好</li></ul><pre><code class="hljs bash">项目经理正在为一个政府项目管理风险识别过程.鉴于该项目的政治影响，多数主要相关方已经表现出高度的风险厌恶情绪.项目经理应该采取什么策略来应对关键相关方的这种情绪？A. 规避和转移风险B. 倾向于作出“镀金式”的回应C. 对风险过程展现出高层级的承诺D. 识别重要和不重要的威胁<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK（6）407，11.1.3.1-风险管理计划-相关方风险偏好.</span><span class="hljs-comment"># 相关方的风险偏好将联合决定可接受的整体项目风险敞口水平.</span><span class="hljs-comment"># 既然相关方已经表现出了高度的风险厌恶情绪，对风险的可接受程度较低，</span><span class="hljs-comment"># 此时宜采用规避和转移风险的应对策略.</span><span class="hljs-comment"># BCD - 都没有回应情景中提及的相关方的风险偏好，故排除.</span></code></pre><pre><code class="hljs bash">一位项目经理最近被任命为一个敏捷项目的负责人.该项目将对公司有很大的知名度和影响，所以项目管理办公室(PMO）经理希望确保项目经理能正确管理风险.项目经理应该怎么做？A. 实施敏捷风险宣言，以确保对项目风险的正确跟踪、分析和补救B. 要求产品负责人作为风险管理者，协助补救风险C. 落实敏捷风险管理人的角色，负责风险管理过程D. 遵循风险管理过程，同时确保风险在每个迭代中被识别、分析和管理<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键字&quot;项目管理办公室 (PMO）经理希望确保项目经理能正确管理风险&quot;，</span><span class="hljs-comment"># 敏捷过程对于风险管理过程没有详细描述，</span><span class="hljs-comment"># 所以敏捷的风险管理可以借鉴预测型风险管理的做法，识别风险，分析风险和规划风险应对等，</span><span class="hljs-comment"># 所以选择D是最优答案.</span><span class="hljs-comment"># A  - 没有风险宣言.</span><span class="hljs-comment"># BC - 都是甩锅他人不可取.</span></code></pre><h3 id="4-确认范围"><a href="#4-确认范围" class="headerlink" title="4. 确认范围"></a>4. 确认范围</h3><pre><code class="hljs bash">在某产品最终版本获批之前举行的相关方会议上，其中一位相关方抱怨称，该产品缺失一项重要功能.项目经理应先采取哪项措施?A. 讨论该问题，并让该相关方相信增加更多功能为时已晚B. 估算增加该功能的成本并让相关方予以批准C. 利用定义的验收标准核实该功能是否属于项目范围D. 根据该相关方的要求提交变更请求<span class="hljs-comment"># PMBOK（6）P163，5.5-确认范围.</span><span class="hljs-comment"># &quot;相关方抱怨&quot;，那么相关方的主张是否是合理的呢？</span><span class="hljs-comment"># 情景中没有交代，那就需要首先对问题进行分析确认，</span><span class="hljs-comment"># 如果相关方的主张是合理的，通过变更的方式进行补救.</span><span class="hljs-comment"># A  - 违背了对相关方管理的原则，增加了项目失败的可能性.</span><span class="hljs-comment"># BD - 还未评估即执行，错误.</span></code></pre><pre><code class="hljs bash">一家公司正在领导一个项目，使用敏捷方法开发一个新产品.一个供应商根据强制性的范围、稳定的要求和固定价格的合同，为其中的一个产品功能提供解决方案. 在与供应商的会谈中，项目经理被告知，公司的业务分析员也要求供应商为另一个功能增加一个解决方案，作为他们交付的一部分. 项目经理应该怎么做？A. 将该功能添加到供应商的需求列表中，以便他们能够交付该功能B. 要求供应商在当前的协议下满足额外的范围C. 确保项目团队理解与供应商签订的协议和合同D. 监督业务分析员的工作，以避免范围潜变<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键字&quot;一个供应商根据强制性的范围、稳定的要求和固定价格的合同&quot;且&quot;为另一个功能增加一个解决方案&quot;，</span><span class="hljs-comment"># 所以这只是一个采用了敏捷的方法来处理一个范围明确的项目，</span><span class="hljs-comment"># 这里要求增加一个功能，不在合同范国内，不可用敏捷的思路来对其操作，</span><span class="hljs-comment"># 应该是针对预测型项目的管理方法走变更进行控制.</span></code></pre><pre><code class="hljs bash">在基于 WEB 的软件项目中，项目业务负责人向团队成员询问一个阶段性的状态，团队成员回应工作已完成，业务负责人感到困惑，因为在访问网站时，新功能不存在，是什么原因导致这种误解呢?A. 团队成员感到压力而夸大项目进展，以便让业务负责人满意B. 该特性的开发工作已完成，但该特性末发布C. 该特性的开发工作末获得项目千系人的批准D. 业务负责人未能在用户故事中定义该特性的验收标准<span class="hljs-comment"># D</span><span class="hljs-comment"># 团队说做完了，业务负责人说没完成，原因是啥？</span><span class="hljs-comment"># 就是两个角色对完成的定义不统一啊，所以D最合适，</span><span class="hljs-comment"># B - 选项，就算没发布，也是对完成的定义不统一，因为团队回答的是已完成.</span></code></pre><pre><code class="hljs bash">在产品开发阶段结束时，敏捷项目团队确认所有测试均已经通过，产品已发布，但是客户投诉产品有缺陷，在产品发布之前，项目团队应已完成下列哪一项？A. 请求项目发起人的批准B. 执行所有需求评审C. 开展阶段结束演示D. 执行一次回顾，核实项目可交付成果<span class="hljs-comment"># C</span><span class="hljs-comment"># 通过评审会对产品进行演示，得到产品负责人和客户对产品的反馈.</span></code></pre><h3 id="5-索赔管理"><a href="#5-索赔管理" class="headerlink" title="5. 索赔管理"></a>5. 索赔管理</h3><pre><code class="hljs bash">某供应商联系项目经理，解释说由于台风破坏了他们的制造工厂，他们无法交付一个至关重要的项目组件，合同涉及保密条款和不可抗力条款.项目经理该做什么？A. 启动索赔调查B. 修订风险管理计划C. 根据合同处罚供应商D. 根据合同避免处罚供应商<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK（6）P498，12.3.2.2-索赔管理.</span><span class="hljs-comment"># &quot;台风&quot;通常属于合同中约定的不可抗力条款，</span><span class="hljs-comment"># C - 如果是由于台风造成的进度延误，不属于供应商主观上的违约，应该免责.</span><span class="hljs-comment"># D - 但是这道题目不能选D，因为&quot;台风破坏了他们的制造工厂&quot;，</span><span class="hljs-comment"># 是供应商的单方面解释，需要经过项目经理的验证.</span><span class="hljs-comment"># B - 情景中没有提及风险管理存在缺失.</span></code></pre><pre><code class="hljs bash">一位在敏捷项目管理办公室工作的项目经理正在使用一个新的经批准的承包商来为她的项目快速实施基于云的解决方案.作为监督项目采购活动的一部分，她对承包商的工作进行了结构化审查.这个问题描述了哪种工具和技术？A. 支付系统B. 索赔管理系统C. 合同变更控制系统.D. 检查<span class="hljs-comment"># D</span><span class="hljs-comment"># 检查可能涉及对承包商所完成的工作进行简单或实际的审查.</span><span class="hljs-comment"># 它的性质是结构化的，目的是确保对正在进行的工作有一个共同的理解.</span></code></pre><h3 id="6-项目章程"><a href="#6-项目章程" class="headerlink" title="6. 项目章程"></a>6. 项目章程</h3><pre><code class="hljs bash">项目经理有三个月的时间为即将到来的贸易展交付复杂的电子商务项目,这个截止日期至关重要，因为管理层渴望提升公司在市场上的竞争优势.若要确保项目实现其目标，项目经理应该做什么？A. 开始制定项目管理计划B. 使用快速跟进计划压缩技术C. 确定关键成功因素和高层级交付策略D. 制定项目的相关方参与计划<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK（6）P75，4.1-制定项目章程.</span><span class="hljs-comment"># 项目的目标要在项目章程中明确，特别是提到了管理层对项目的期望，</span><span class="hljs-comment"># 要达成共识后列入项目章程。选项ABD，均在C选项之后.</span></code></pre><h3 id="7-仆人式领导"><a href="#7-仆人式领导" class="headerlink" title="7. 仆人式领导"></a>7. 仆人式领导</h3><pre><code class="hljs bash">一个敏捷项目正在进行八次迭代中的第五次.在最后一次迭代规划后，团队被告知市场上出现了一个新的竞争对手，有必要加快行动以确保不错过市场份额. 项目经理应该怎么做？A. 将竞争对手的功能添加到产品待办事项列表里，以改进产品B. 帮助团队找到一种新的方法来尽快推出产品C. 要求团队提高速度，尽快推出产品D. 要求发起人在团队中加入更多的人<span class="hljs-comment"># B</span><span class="hljs-comment"># 《敏捷实践指南》P35-仆人式领导的促进作用.</span><span class="hljs-comment"># 项目经理成为仆人式领导时，工作重点就会从&quot;管理协调&quot;转向&quot;促进合作&quot;，</span><span class="hljs-comment"># 帮助团队创建可接受的解决方案，B选项正确.</span><span class="hljs-comment"># A  - 产品待办事项列表的更新还是由产品负责人负责，项目经理没有权限进行更新.</span><span class="hljs-comment"># CD - 敏捷团队是自组织的团队，项目经理以命令的语气为敏捷团队做决策不符合敏捷理念.</span></code></pre><pre><code class="hljs bash">一个团队对如何解决正在建设中的产品的一个功能有不同的想法，虽然两天前开始冲刺，但他们仍然没有达成共识. 项目经理应该怎么做？A. 安排一次会议，让每个人都有机会表达他们对每个想法的看法，然后进行投票和决定B. 对每个想法的优点和缺点提出意见，并试图在一个促进会议上达成共识C. 要求作为关键利益相关者的产品负责人在不同的想法中做出选择D. 向小组提出想法，请大家投票，然后选择最受欢迎的想法<span class="hljs-comment"># A</span><span class="hljs-comment"># 4.2 仆人式领导为团队赋权《敏捷实践指南》第33-37页.</span><span class="hljs-comment"># 当团队成员对产品功能的想法不能达成共识时，项目经理应该以仆人式领导的思维帮助团队达成共识.</span><span class="hljs-comment"># 项目经理成为仆人式领导时，工作重点就会从&quot;管理协调&quot;转向&quot;促进合作&quot;.</span><span class="hljs-comment"># 促进者将帮助每个人各尽所能地思考和工作。促进者鼓励团队参与、理解，并对团队输出共同承担责任.</span><span class="hljs-comment"># 促进者帮助团队创建可接受的解决方案.</span><span class="hljs-comment"># A - 既是鼓励团队成员尽所能地思考和互相交流，又鼓励团队自己做出决策，符合仆人式领导的原则.</span><span class="hljs-comment"># B - 仆人式领导应该鼓励团队自己做出决策，而非替团队决策.</span><span class="hljs-comment"># C - 团队内部的问题应该由项目经理和团队共同解决，而不是请相关方决策.</span><span class="hljs-comment"># D - 缺少了让团队进行交流互动的环节，不符合面对面交流的原则.</span></code></pre><pre><code class="hljs bash">一个项目经理使用预测性方法已经超过10年了，现在要转到一个敏捷项目，团队成员以前没有一起工作过.经过两个冲刺阶段的工作，团队没有取得任何成果，完成工作的压力非常大.在这个阶段，项目经理应该使用什么样的领导风格？A. 一种被动的领导风格，允许团队自我组织，直到达到规范化阶段B. 一种指令性的风格，为团队做出决定，以达到早期的结果C. 使用多数人意见占上风的技术的民主风格D. 一种指导希望得到帮助的人并促进团队合作的领导风格<span class="hljs-comment"># D</span><span class="hljs-comment"># 《敏捷实践指南》P35-仆人式领导的促进作用.</span><span class="hljs-comment"># 在敏捷项目里面，项目经理成为仆人式领导时，工作重点就会从&quot;管理协调&quot;转向&quot;促进合作&quot;，</span><span class="hljs-comment"># 帮助每个人各尽所能地思考和工作以及帮助团队创建可接受的解决方案，因此，选项D正确.</span><span class="hljs-comment"># ABC - 都不符合敏捷项目的领导风格.</span></code></pre><pre><code class="hljs bash">一位曾在敏捷环境中工作过的新团队成员让项目团队的一些成员感到沮丧，这位新团队成员每天都会接近项目团队成员，试图参加每日站立会，项目经理应该做什么？A. 就项目团队正在使用的方法，为该新团队成员提供辅导B. 安排会议，让项目团队查阅沟通管理计划C. 向项目团队成员发送电子邮件，概述沟通策略D. 让项目团队其他成员继续与该新团队成员开展讨论<span class="hljs-comment"># A</span><span class="hljs-comment"># 《敏捷实践指南》35页，4.2.1.2-仆人式领导消除组织障碍.</span><span class="hljs-comment"># 这名团队成员虽然在努力地加入敏捷团队的沟通，但是他的行为已经干扰到了团队的运行，形成了障碍.</span><span class="hljs-comment"># 若想解决此障碍，就需要针对团队成员的短板进行有针对性的培训，</span><span class="hljs-comment"># 例如辅导团队成员使用信息发射源来获取信息，而不是无时无刻的询问，选项A正确.</span><span class="hljs-comment"># B - 出现问题的是单一成员，另外在敏捷实践过程中，如无必要，不会形成书面的沟通管理计划.</span><span class="hljs-comment"># C - 同B，另外在敏捷实践中，能够通过面对面的沟通可以解决的问题，就不要拉长反馈的环路.</span><span class="hljs-comment"># D - 本已避之不及，怎么可能鼓励团队成员迎难而上.</span></code></pre><pre><code class="hljs bash">营销团队正在过渡到使用混合方法进行项目.营销总监对混合方法不了解，而项目经理需要总监的支持，因为营销总监是一个关键相关方.项目经理应该做什么来获得支持？A. 向营销总监提供关于混合方法的指导B. 培训营销团队并让总监了解情况C. 要求营销团队的成员对总监进行指导D. 要求营销总监参加日常会议<span class="hljs-comment"># A</span><span class="hljs-comment"># 《敏捷实践指南》P37-4.2.1.4 考虑这些仆人式领导的职责.</span><span class="hljs-comment"># 在仆人式领导的职责里面其中有一点是教育相关方，使其了解为什么要敏捷以及如何敏捷.</span><span class="hljs-comment"># 因此对于场景当中相关方不了解混合方法的情况，项目经理应该向营销总监提供关于混合方法的指导.</span><span class="hljs-comment"># B - 题目只提到营销总监不了解，所以没有必要通过培训整个团队的方式来让总监了解.</span><span class="hljs-comment"># C - 这是项目经理的责任.</span><span class="hljs-comment"># D - 站会更多的是帮助营销总监了解项目的进度.</span></code></pre><pre><code class="hljs bash">在某软件开发项目中，产品负责人和开发团队就冲刺未完项达成一致.未完项中优先级最高的事项是开发一个支付模块.在冲刺的前半程，该团队忙于开发该模块，但现在两名开发人员希望在冲刺的后半程调整工作重心，聚焦于重构另一个功能，而这将来可能会产生问题，项目经理该做什么？A. 向开发人员重申聚焦和达到冲刺目标的重要性B. 对开发人员的积极主动性和注重质量予以称赞C. 让开发人员注重于重构工作并在回顾会议上进行讨论D. 将该问题上报给开发人员的职能部门经理<span class="hljs-comment"># A</span><span class="hljs-comment"># 《敏捷实践指南》34页，4.2.1-仆人式领导的职责.</span><span class="hljs-comment"># 障碍已经暴露出来了，&quot;两名开发人员希望在冲刺的后半程调整工作重心&quot;，</span><span class="hljs-comment"># 针对障碍展开分析讨论研判，尽量减少障碍对冲刺目标的影响，选项A正确.</span><span class="hljs-comment"># B - 开发人员模糊了冲刺的目标，忽视了任务的优先级，并不是什么值得提倡的行为.</span><span class="hljs-comment"># C - 让开发人员执行了优先级较低的任务，存在问题，另外在冲刺过程中障碍要及时解决.</span><span class="hljs-comment">#     在回顾上要重点分析为何出现了不明智的举动的根本原因，避免在未来的冲刺过程中再次出现.</span><span class="hljs-comment"># D - 并不是团队成员的能力存在不可弥补的短板而需要向职能部门经理申请替换资源，所以联系职能部门经理没有必要.</span></code></pre><pre><code class="hljs bash">某敏捷项目正在开展活动，以定义最小可行性产品（MVP),在会议期间，项目经理发现了一些强制性法规，但是否将这些法规包含进MVP中团队尚未达成共识，因为它可能会使项目持续时间延长。项目经理该做什么？A. 让团队承诺将所有必要法规包含进来B. 告知与会者需要仅聚焦于产品功能C. 按管理层的要求，向团队提供这些新法规方面的培训D. 让项目发起人为项目分配更多时间<span class="hljs-comment"># C</span><span class="hljs-comment"># 《敏捷实践指南》34页，4.2.1-仆人式领导的职责.</span><span class="hljs-comment"># &quot;将这些法规包含进MVP中团队尚未达成共识&quot;，对这些法规该如何应对还存在困惑.</span><span class="hljs-comment"># 因此，需要首先完成对法规的相关培训，充分理解后方能更新产品待办事项列表，选项C正确.</span><span class="hljs-comment"># A - 自组织团队，多数情况下要团队自己做出决策，所以逼迫团队做出承诺是一种错误的管理行为.</span><span class="hljs-comment"># B - 如果首先就忽略了法律法规的影响，可能会导致产出成果无法上市销售，造成重大损失.</span><span class="hljs-comment"># D - 是否需要更多的时间来应对，依赖于对法规的了解和认知.</span></code></pre><pre><code class="hljs bash">在一家飞机制造公司工作的Scrum团队已经完成了一个关键项目的第一次迭代.对于项目发起人来说，在预算范围内按时完成项目是非常重要的，但是，燃尽图显示该项目已经落后于计划.项目经理应该采取哪两个行动来管理障碍并提高团队的速度？(选择两个）A. 寻找导致瓶颈和减慢团队敏捷性的过程B. 将复杂度高的项目分配给高级开发人员C. 授权给团队，让他们做出决定来消除障碍D. 与团队合作，尽可能快地消除障碍E. 将复杂度高的项目移到最后的迭代中<span class="hljs-comment"># CD</span><span class="hljs-comment"># 关键字&quot;管理障碍并提高团队的速度&quot;，属于项目质量提升，</span><span class="hljs-comment"># 因此结合敏捷的特征，团队自己决定如何改进，CD比较优化;</span><span class="hljs-comment"># BE一定是错误的，</span><span class="hljs-comment"># A其实问题在于和团队的结合 不够紧密导致.</span></code></pre><pre><code class="hljs bash">仆人式领导是按照什么顺序来处理他们的工作的？A. 过程.人.目的B. 人.过程.目的C. 目的.人.过程D. 过程.目的.人<span class="hljs-comment"># C</span><span class="hljs-comment"># 根据《敏捷实践指南》，仆人式领导实践并散发着敏捷的气息.</span><span class="hljs-comment"># 他们按以下顺序处理工作：</span><span class="hljs-comment"># 目的（与团队一起确定&quot;为什么&quot;，人员（鼓励团队创造一个人人都能成功的环境），过程（寻找结果）.</span></code></pre><pre><code class="hljs bash">某组织使用混合方法进行项目管理. 一位项目经理被分配到一个外部项目，即项目A，该项目中的三个模块中有两个需要机器学习技能.项目经理所在组织中唯一的机器学习专家正在参与一个即将结束的内部项目，即项目B.项目经理应该怎么做？A. 优先考虑项目A而不是项目B，因为A是一个外部项目，而B是一个内部项目B. 以冲刺的方式计划项目A，从不需要机器学习技能的模块开始C. 让人力资源管理人员为项目A雇用一名机器学习专家D. 当机器学习专家可用时，计划项目A在项目B结束时开始<span class="hljs-comment"># B</span><span class="hljs-comment"># 关键字&quot;三个模块中有两个需要机器学习技能&quot;然而&quot;唯一的机器学习专家正在参与一个即将结束的内部项目&quot;，</span><span class="hljs-comment"># 就是机器学习专家分身无术怎么办，这个在敏捷被称为障碍，如果有障碍存在，</span><span class="hljs-comment"># 是不能继续进行项目的，所以B是最佳方案，等项目B结束后障碍不存在则开始这两个模块的工作.</span></code></pre><pre><code class="hljs bash">一个团队正在使用 Kanban，日产出率低于预测的估计值.为了提高产出率，敏捷教练应该首先做什么？A. 重新进行代办列表优先级排序B. 检查泳道中的工作C. 安排回顾会议D. 与服务需求经理阐明接下来的步骤<span class="hljs-comment"># B</span><span class="hljs-comment"># 这题优先看泳道是否达到在制品限制，如果达到，那么优化达到的泳道工作.</span></code></pre><h3 id="8-产品负责人"><a href="#8-产品负责人" class="headerlink" title="8. 产品负责人"></a>8. 产品负责人</h3><pre><code class="hljs bash">在你的项目的第三个冲刺过半时，开发团队在测试代码时发现了一个严重的问题.他们必须尽快修复这个问题，但这需要的时间超过了他们在当前冲刺中剩余的时间.他们应该怎么做呢？A. 产品负责人应该召集团队会议，讨论潜在的解决方案B. 产品负责人在产品待办事项列表中增加一个高优先级的工作项来修复问题C. 产品负责人延长冲刺截止日期以适应修复的要求D. 产品负责人将工作项添加到冲刺和产品待办事项列表中<span class="hljs-comment"># B</span><span class="hljs-comment"># 《敏捷实践指南》P40-4.3.2 敏捷的角色 知识点：产品负责人，冲刺时间盒.</span><span class="hljs-comment"># 关键词：严重问题，超过当前冲刺剩余时间 当出现问题，需要额外的工作的时候，</span><span class="hljs-comment"># 需要产品负责人向产品待办事项列表中维护相应的工作事项和对应的优先级，所以B选项正确.</span><span class="hljs-comment"># A - 选项中针对问题召集会议讨论解决方案，应该是SM和TEAM的职责，并非产品负责人.</span><span class="hljs-comment"># C - 冲刺的时间盒固定，不能延长.</span><span class="hljs-comment"># D - 将工作项添加到冲刺的行为是TEAM决定，不是产品负责人.</span></code></pre><pre><code class="hljs bash">在冲刺评审会议上，其中一位主要利益相关方提出了一项新需求，该需求非常关键，应首先加以考虑.在这种情况下，你作为产品负责人，接下来要做什么？A. 将需求添加到下一个迭代的待办事项列表中B. 将需求添加到产品待办事项列表中C. 召开一个冲刺计划会议，并与团队讨论这个需求D. 在评审会议上通知团队成员，下一步需要处理这个需求<span class="hljs-comment"># B</span><span class="hljs-comment"># 冲刺评审会议主要有两个主要作用，</span><span class="hljs-comment"># 一是评审本次迭代的潜在产品增量.</span><span class="hljs-comment"># 二是与外部相关方进行交互. 当外部相关方在冲刺评审会议中提出了新的需求，</span><span class="hljs-comment"># PO可以加入待办事项列表中，但是只能由PO来最终决定需求优先级. </span><span class="hljs-comment"># A - 错误，需求是不是下个迭代做，是不是马上做，需要PO根据产品待办事项列表中的所有需求，</span><span class="hljs-comment">#     进行评估和决策，而不是在这个冲刺评审会议中直接决定.</span><span class="hljs-comment"># B - 正确，外部相关方提出的任何需求，都是要先加入待办事项列表中.</span><span class="hljs-comment"># C - 错误，与团队讲解和讨论需求，应该在待办事项梳理会议中进行.</span><span class="hljs-comment"># D - 错误，需求是否马上做，需要由PO进行决策，根据产品待办事项列表中的所有需求，进行评估和决策.</span><span class="hljs-comment">#     而不是直接通知团队成员马上处理.</span></code></pre><pre><code class="hljs bash">在软件开发项目的冲刺过程中，相关方向产品负责人介绍一个新故事.产品负责人希望向团队展示整体故事概念.在接下来的哪个会议中，他将与团队讨论新故事？A. 迭代计划会议B. 迭代评审会议C. 待办事项细化会议D. 迭代回顾会议<span class="hljs-comment"># C</span><span class="hljs-comment"># 《敏捷实践指南》，5.2.3.待办事项列表的细化，P52~53.</span><span class="hljs-comment"># 题干的关键词是产品负责人希望向团队展示整体故事概念.</span><span class="hljs-comment"># 产品负责人有很多方法处理待办事项列表的细化准备与会议，</span><span class="hljs-comment"># 其中包括的内容之一就是：把整个故事的概念呈现给团队.</span><span class="hljs-comment"># 团队进行讨论，并根据需要将其细化为许多故事。因此C选项正确.</span></code></pre><pre><code class="hljs bash">某项目团队最近完成了为某公司开发一个自动化薪资管理系统的首个冲刺.项目经理已安排与产品负责人和团队成员举行冲刺规划会，以讨论接下来应该开展哪些功能方面的工作.为了使该会议富有成效且产生预期结果，项目经理需要哪两条信息？（选择两项）A. 产品待办事项列表B. 冲刺章程C. 公司使命和愿景D. 冲刺目标E. 燃尽图<span class="hljs-comment"># AD</span><span class="hljs-comment"># 《敏捷实践指南》101页，A3.2-SCRUM-冲刺计划.</span><span class="hljs-comment"># 这道题目考察大家对Scrum框架中冲刺计划会议的掌握.</span><span class="hljs-comment"># 在冲刺计划会议上，PO从待办事项列表中选择列入冲刺中的任务，并和团队设定冲刺目标，因此选项AD正确.</span><span class="hljs-comment"># B - 冲刺章程，臆造词，排除.</span><span class="hljs-comment"># C - 在冲刺计划会议上会提及产品愿景，用以挑选合适的冲刺任务，而不是公司使命和愿景.</span><span class="hljs-comment"># E - 燃尽图用于测算冲刺绩效，所以不会在计划会议上使用.</span></code></pre><pre><code class="hljs bash">一家公司正在实施一个新系统.项目经理认为最好使用Scrum和Kanban的混合方法来完成这个项目.产品负责人对如何开始交付所需的功能感到困惑.项目经理应该如何帮助产品负责人？A. 讨论产品负责人在项目团队中的责任B. 指导产品负责人如何创建一个产品待办事项列表C. 创建一个工作分解结构（WBS），并向产品负责人解释可交付的成果D. 鼓励团队对项目任务进行细分<span class="hljs-comment"># B</span><span class="hljs-comment"># 4.3.2 敏捷的角色《敏捷实践指南》第41页.</span><span class="hljs-comment"># 题目指出产品负责人对如何开始交付所需的功能感到困惑，</span><span class="hljs-comment"># 说明产品负责人对该产品用户需求的内容或是优先级不明确，</span><span class="hljs-comment"># 可以编制产品代表事项列表把用户需求通过用户故事来明确，</span><span class="hljs-comment"># 并显示预期的可交付成果的序列，以便确定如何交付所需的功能.</span><span class="hljs-comment"># 项目经理可以通过指导PO来创建产品待办事项列表来实现这一过程，因此正确答案是选项B.</span><span class="hljs-comment"># A - 从题意中，产品负责人不一定不知道自己的责任，只是不知道如何操作.</span><span class="hljs-comment"># C - 不符合敏捷项目经理的职责定位.</span><span class="hljs-comment"># D - 产品待办事项是PO的职责，不是团队的职责.</span></code></pre><pre><code class="hljs bash">一个项目发起人要求项目经理为一个新的项目探索一种混合方法.这个项目的产品经理已经为产品准备了一个详细的规格说明书.项目经理应该怎么做才能继续进行项目管理计划？A. 要求团队评估产品规格是否可以用用户故事来表达，以实现Scrum或kanban方法B. 与产品经理一起探讨，确定是否有可行的机会来逐步交付价值并增加商业价值C. 向项目发起人建议，由于产品需求稳定，预测性方法适合于该项目D. 询问产品经理是否准备作为项目的产品负责人，以便参与到迭代计划和审查中<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键字&quot;混合方法&quot;和&quot;准备了一个详细的规格说明书&quot;，</span><span class="hljs-comment"># 所以要求要有敏捷的成分在开发模式中，而角色的准备是第一位的，</span><span class="hljs-comment"># 产品经理可以很容易转换成产品负责人的角色，所以先考虑D，之后可以B和A;</span><span class="hljs-comment"># C - 转换成预测模型不能因为一份详细的说明书就贸然选择，</span><span class="hljs-comment">#     毕竟未来的变更未可知，而且组织决定是混合方法.</span></code></pre><pre><code class="hljs bash">一个敏捷团队被雇来做一个公共服务项目.该团队收到了一份关于业务的模糊想法的清单.现在需要了解.开发并优先考虑功能列表.谁将负责这项任务？A. 项目负责人B. 敏捷领导C. 敏捷团队D. 产品负责人<span class="hljs-comment"># D</span><span class="hljs-comment"># 了解开发用户故事的责任在产品负责人.</span></code></pre><pre><code class="hljs bash">一个新上任的产品负责人正在与一个首次使用敏捷的项目团队合作的项目组工作.产品负责人在一天中不断打断不同的团队成员来讨论进度.这导致团队感到被微观管理，并且因为不断的干扰而感到沮丧.项目经理应该如何进行？A. 邀请产品负责人参加每天的站立会议，以便他们能够评估进展B. 每周与产品负责人安排一次反馈会议，以便他们能够评估进展C. 指示团队将产品负责人推荐给项目经理以获取信息D. 邀请产品拥有者的职能经理参加反馈会议，以上报该问题<span class="hljs-comment"># A</span><span class="hljs-comment"># 关键字&quot;产品负责人在一天中不断打断不同的团队成员来讨论进度&quot;，</span><span class="hljs-comment"># 说明po对进度非常关心，而关于进度的会议是每日站会，</span><span class="hljs-comment"># 所以邀请他参与站会可能是比较好的选择.</span></code></pre><pre><code class="hljs bash">一个敏捷项目在完成25%的时候，产品负责人发生了变化，新的产品负责人对项目的成功没有表现出兴趣，其中一个冲刺阶段被推迟了，因为交付物没有及时得到批准.项目经理应该怎么做才能避免这种延迟？A. 更新利益相关者参与计划，以反映产品负责人的变化B. 更加频繁地与产品负责人沟通项目的状态C. 更新沟通管理计划，以反映沟通需求的变化D. 重新评估新的产品负责人的需求，以便更好的参与<span class="hljs-comment"># A</span><span class="hljs-comment"># 关键字&quot;产品负责人发生了变化&quot;且&quot;新的产品负责人对项目的成功没有表现出兴趣&quot;，</span><span class="hljs-comment"># 所以要想恢复正常水平，需要这个新相关方的适当参与，属于相关方题，</span><span class="hljs-comment"># 对于相关方题，先记录此变更，再进行分析和沟通，以了解对方的需求点，</span><span class="hljs-comment"># 从这个顺序，A第一步;BC属于第二步，C属于信息交换部分，不是相关方题.</span></code></pre><pre><code class="hljs bash">在一次迭代结束时，产品负责人拒绝已开发的工作项井提供反馈意见，若要在将来避免这种情況，敏捷团队应该做什么？A. 安排与产品负责人经常举行待办列表梳理会议，以澄清验收标准B. 确保产品负责人参与每日敏捷团队活动并提供反馈意见C. 确保产品负责人参加每日站会以了解当前状态D. 在回顾会议中记录产品负责人的反馈意见<span class="hljs-comment"># A</span><span class="hljs-comment"># 题目中说产品负责人(PO)拒绝开发的工作产品，</span><span class="hljs-comment"># 这是因为制作的产品和其期望有偏差导致，所以需要进行详细梳理来解决这个问题;</span><span class="hljs-comment"># B - 一般PO不会参加团队的每日站会，这个属于内部会议，用来控制进度风险等元素.</span><span class="hljs-comment"># C - 同理B;</span><span class="hljs-comment"># D - 有点像，不过在回顾会议里应该记录的是经验教训而不是po的反馈意见，所以比较A更优化.</span></code></pre><pre><code class="hljs bash">由于产品需求不明确，与质量部门合作的Scrum团队一直在背离业务部门.现在是第三个冲刺阶段，两个团队已经僵持了几天.项目负责人应该怎么做才能解決这种情况？A. 与两个团队一起分析，找出是否必须返工B. 选择新的团队成员，努力获得新的想法来解决僵局C. 要求业务团队停止浪费时间，定义产品的最终需求D. 告诉业务团队和Scrum团队继续遵循最初的计划<span class="hljs-comment"># A</span><span class="hljs-comment"># 关键字&quot;两个团队已经僵持了几天&quot;，产生了跨职能差异的情况需要引导，因此选择A.</span></code></pre><pre><code class="hljs bash">一个敏捷项目有一个记录在案的需求清单，分出了高、中、低三类优先级.项目组表示很难知道下一步该做什么，因为有很多条目被列为高优先级.项目经理应该如何建议？A. 确保产品负责人根据产品路线图、发布计划和迭代计划来确定优先级B. 要求团队根据他们认为合理的构建顺序来确定高优先级项目的优先级C. 要求团队根据发布计划和最有效的测试方法来确定高优先级项目的优先次序D. 摒弃目前对需求的高、中、低分类，而以数字来确定优先次序<span class="hljs-comment"># A</span><span class="hljs-comment"># 关键宇&quot;分出了高、中、低三类优先级&quot;，</span><span class="hljs-comment"># 这个问题出在产品待办是想应该是一个排序而不是高中低三类优先级，</span><span class="hljs-comment"># 这个排序是产品负责人的责任，所以选择A，且从A答案了解，</span><span class="hljs-comment"># 条目的排序和用户故事地图，发布计划和迭代计划是紧密联系的.</span></code></pre><pre><code class="hljs bash">一个Scrum团队正在分析一个15天冲刺的第四天的进度表.下图显示的是进度表。团队接下来应该做什么？A. 继续进行冲刺，因为进度品示了潜在中断的缓冲区B. 询问产品负责人，是否可以从冲刺阶段削減一些低优先级的故事C. 继续按计划进行冲刺工作，并保持监控D. 要求项目组选择任何额外的故事，因为他们有比计划更多的能力<span class="hljs-comment"># B</span><span class="hljs-comment"># 这题的燃烧图在第15天冲刺结束的时候，计划完成（红色） 曲线都不归零，</span><span class="hljs-comment"># 说明安排的工作量其实大于团队的容量了. 所以这是选择B的缘故.</span></code></pre><pre><code class="hljs bash">是什么决定某一事项完成的标准？A. 产品负责人同意该事项完成B. 项目发起人和团队同意该事项完成C. 客户和产品负责人同意该事项完成D. 团队人和客户接受用户故事<span class="hljs-comment"># A</span><span class="hljs-comment"># 完成标准是由 PO 制定，与团队讨论后确认达成共识，最终由 PO 以验收标准为依据接收用户故事.</span></code></pre><pre><code class="hljs bash">敏捷团队完成了一次迭代以及大部分用户故事，团队希望确保功能具有相关性，团队下一步应该怎么做？A. 通过一次评审会议和迭代演示，获得产品负责人和项目干系人的反馈B. 安排一次迭代回顾会议，改造团队开发C. 将不完整的用户故事包含在下一次迭代中，评估所有用户故事D. 通过延长迭代长度，完成不完整的用户故事<span class="hljs-comment"># A</span><span class="hljs-comment"># 产品负责人和项目千系人针对产品增量进行评审后反馈给团队，</span><span class="hljs-comment"># 最终决策权在产品负责人和项目干系人.</span></code></pre><pre><code class="hljs bash">由于缺乏 PO 对用户故事的澄清，导致团队效率下降，敏捷教练应该怎么做？A. 从另一名团队成员获得澄清，因为团队是自主性的B. 与团队沟通，获得所有澄清是他们的责任C. 告诉团队他们应在迭代开始时解决所有问题D. 告诉产品所有者他们负责提供澄清<span class="hljs-comment"># D</span><span class="hljs-comment"># 与产品负责人进行沟通，由产品负责人针对用户故事进行讲解说明，</span><span class="hljs-comment"># 解决团队效率下降的问题.</span></code></pre><pre><code class="hljs bash">产品负责人的产品待办列表中有各种事项，并且不知道如何对他们进行优先级排序，敏捷管理专业人士应该如何指导产品负责人？A. 确定哪些功能构成可在市场上取得成功的最小功能集，并确定产品的可行性B. 通过降序故事点对待办列表中的故事进行排序，并在列表顶部发布与团队速度相等的故事C. 确定风险最高的特性并首先发布这些特性D. 首先确定待办事项中最有价值的产品特性的优先级<span class="hljs-comment"># A</span><span class="hljs-comment"># 产品待办事项列表是指团队围绕某产品维护的一个以用户为中心的需求的有序列表.</span><span class="hljs-comment"># 优先级排序的重要目的是识别高价值特征(功能)并且使它们得到优先交付，这将有助于组织为客户提供最大价值.</span></code></pre><pre><code class="hljs bash">一个项目是某个项目集的组成部分，但项目团队并没有参加每周项目集会议，敏捷领导在项目集和项目团队之间进行沟通，并根据需要将新范围传递给项目团队，这通常会导致返工，因为项目团队井不真正了解项目集的优先事项.若要确保项目团队和该项目集有关联，敏捷管理专业人员应该做什么？A. 将项目团队纳入所有项目集会议及与范围相关的讨论中，以便他们能够了解整体情况B. 让项目团队了解项目的愿景和总整体目标，以便他们能够了解整体情況C. 收集项目团队提出的顾虑作为该项目集的问题，然后将这些问题添加到下一次待办列表中D. 让项目经理知晓最新的项目状态并分享该项目的状态报告来平衡团队的需求和目标<span class="hljs-comment"># A</span><span class="hljs-comment"># 分析题干项目团队成员没有参加项目集会议，</span><span class="hljs-comment"># 而是依靠领导自上而下的传达和管理，这有悖于敏捷原则.</span><span class="hljs-comment"># 敏捷原则之一：不论团队内外，信息传达最有效的方法都是面对面的交谈.</span><span class="hljs-comment"># 每周项目集会议是保证团队间高效协同的会议.</span><span class="hljs-comment"># A - 正确，面对面沟通信息传递更加准确和高效.</span><span class="hljs-comment"># B - 了解愿景和总体目标项目启动时做的工作.</span><span class="hljs-comment"># C - 不够高效.</span><span class="hljs-comment"># D - 不够高效.</span></code></pre><pre><code class="hljs bash">Moscow 方法的用途是什么？A. 跟踪进度B. 核实产品C. 确定故事的优先级D. 结算故事规模<span class="hljs-comment"># C</span><span class="hljs-comment"># MoSCoW 技术是一种进行需求优先级排序的敏捷方法.</span><span class="hljs-comment"># Must 必须有-这些需求是强制性的.</span><span class="hljs-comment"># Should 应该有-这些需求不是强制性的，但是高度渴望的.</span><span class="hljs-comment"># Could 可以有-这些需求如果满足会很好.</span><span class="hljs-comment"># Won&#x27;t不会有。当下可以不去满足，但是将来可以加入.</span></code></pre><pre><code class="hljs bash">在迭代评审期间，产品负责人表示所交付的工作不符合预期.项目团队对此感到惊讶。应如何预防这种情况？A. 在迭代过程中, 团队应该与产品负责人进行更多的演示B. 团队应该在迭代评审之前检查完成的定义C. 产品负责人应该在计划会议上提供更清楚的解释D. 测试人员应该确保测试用例准确地反映了产品所有者的期望<span class="hljs-comment"># B</span><span class="hljs-comment"># DoD(Definition of Done. 完成)：</span><span class="hljs-comment"># 通过事先确定一个对&quot;完成&quot;的共识可以为团队与业务节约大量的时间来处理反差大、模棱两可或隐藏的工作.</span><span class="hljs-comment"># 分析题干，团队对PO认为工作不符合预期感到惊讶，说明团队成员对于 DoD 的标准不够清楚.</span></code></pre><pre><code class="hljs bash">敏捷团队有一个预先制定的计划，以固定节奏为为期三周的 sprint 工作，每两次sprint 后，邀请干系人审查进展情况.产品负责人应如何确保团队为客户提供价值？A. 要求客户继续确定优先级并确认待办列表B. 让团队继续按照预先制定的计划工作C. 确保为交付功能而生产的工件对下一次迭代仍有价值D. 要求客户定期创建并确认待办列表事项<span class="hljs-comment"># A</span><span class="hljs-comment"># 敏捷开发过程中需要与干系人保持适度的沟通，确保干系人都能适当参与项目.</span><span class="hljs-comment"># 分析题干每两次sprint 后与干系人沟通，为确保为客户提供价值，</span><span class="hljs-comment"># 干系人应检查并调整项目计划，对需求、优先级等方面进行变更，从而实现商业价值的最大化.</span></code></pre><pre><code class="hljs bash">在最后两次冲刺中。一些潜在的问题已经威胁到团队实现目标发布日期的能力.敏捷管理专业人士应该做什么?A. 创建一份问题日志作为信息扩散器和监视器B. 如果再次出现这些问题，则在回顾会议中处理这些问题C. 通过风险燃尽图识别并监控这些问题D. 创建一个任务板以跟踪出现的问题<span class="hljs-comment"># C</span><span class="hljs-comment"># 燃尽图是一种描述项目风险趋势的简单的图形化风险指标.</span><span class="hljs-comment"># 通过每次迭代交付的用户故事来减轻或消除风险板上的风险.</span></code></pre><h3 id="9-进度压缩"><a href="#9-进度压缩" class="headerlink" title="9. 进度压缩"></a>9. 进度压缩</h3><ul><li>快速跟进</li><li>进度网络分析</li></ul><pre><code class="hljs bash">在控制项目工作的同时，团队发现进度绩效指数(SPI)为0.8，成本绩效指数(CPI)为0.95.如果该项目的进度计划是优先事项，且没有其他可用资源，项目经理应该做什么？A. 使用赶工B. 使用快速跟进C. 使用资源平衡D. 使用资源平滑<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK（6）P215，6.5.2.6-进度压缩-快速跟进.</span><span class="hljs-comment"># A - 进度落后，没有其他可用的资源，赶工的技术无法使用，只能采取快速跟进.</span><span class="hljs-comment"># C - 针对资源的过度分配.</span><span class="hljs-comment"># D - 针对资源的过度集中，应削峰填谷.</span></code></pre><pre><code class="hljs bash">项目经理目前正在为一个强制性监管项目制定项目进度计划.项目经理正在接受来自不同相关方的意见，并发现他们中许多人估算的完工时间超出既定的结束日期.项目经理下一步应该做什么？A. 通知发起人并请求修改结束日期以适应所提出的进度计划B. 向相关方提醒项目制约因素并请求修改他们的意见C. 确定一个可以保证项目在结束日期之前完成的新关键路径D. 对项目管理计划进行赶工，以减少对所提出的进度计划进行延期<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK（6）P209，6.5.2.1-进度网络分析.</span><span class="hljs-comment"># D  - 估算的完工时间超出了既定的结束日期，不具备可行性.</span><span class="hljs-comment"># AB - 此时需要反复论证，直至形成可以执行的进度模型，</span><span class="hljs-comment">#      而不是直接通知相关方去调整项目的完工日期.</span></code></pre><pre><code class="hljs bash">在一个混合项目中，每月有100个新基站被添加到4G移动网络中.每个月增加100个新基站。在第一个月结束的时候，团队落后于目标，运营商正在亏损.利益相关者要求了解基站何时可以上线并开始收费.项目经理应该怎么做才能恢复进度并加快项目的投资回报率 (ROI）？A. 将项目方法改为预测性的B. 增加对业务的报告C. 澄清敏捷和预测的模块D. 重新考虑必要的进度储备<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键宇“恢复进度并加快项目的投资回报率”，</span><span class="hljs-comment"># 言下之意就是要使用赶工或者快速跟进的方法，需要使用到对应的储备，因而先择D.</span><span class="hljs-comment"># A - 预测方法无法快速跟进项目;</span><span class="hljs-comment"># B - 从英语来看是要提高对业务的信息透明度，和赶工无关;</span><span class="hljs-comment"># C - 是针对哪些模块用敏捷进行澄清，其实敏捷是拥抱变更，增量开发，对于加速开发，还是赶工比较靠谱.</span></code></pre><pre><code class="hljs bash">项目经理被指派负责的一个项目正处于开发阶段，审查项目进展情况时，项目经理发现几项任务落后于进度计划，经过调查，项目经理发现几名团队成员被抽调开展其他任务，这使他们无法全身心地投入项目经理的项目，项目经理可以采取哪两种措施来让团队重回正轨？（选择两项）A. 与团队一起确定可加速交付项目的方案B. 允许团队成员按自己的节奏把进度赶上来C. 与各个职能部门经理讨论项目延误的风险和工作的优先级D. 举行每日站会，以审查项目进展情况，并跟踪可交付成果的完成情况E. 就进度延误问题，立即提醒业务相关方<span class="hljs-comment"># AC</span><span class="hljs-comment"># 《PMBOK》第6版222页，6.6-控制进度和《PMBOK》第6版352页，9.6-控制资源.</span><span class="hljs-comment"># 涉及到进度和资源两个领域的管理，针对进度领域，要评估团队成员被抽调后的绩效表现，</span><span class="hljs-comment"># 进行偏差分析和预测分析，来了解问题的严重程度，进而可以制定有效的解决方案，A选项正确.</span><span class="hljs-comment"># 针对资源领域，团队成员被抽调，需要和团队成员所归属的职能部门负责人展开协商，</span><span class="hljs-comment"># 来保障项目实施期间资源的可用性，C选项正确.</span><span class="hljs-comment"># B - 项目经理承担整合管理责任，即需要综合各种资源、工具和技术来实现目标，</span><span class="hljs-comment">#     所以针对目前的状况，项目经理要牵头制定有效方案，而不是放任自流.</span><span class="hljs-comment"># D - 问题并不在于团队成员之间未协调步调和进展.</span><span class="hljs-comment"># E - 向相关方传递的信息应以项目状态为主.</span></code></pre><h3 id="10-质量测量指标"><a href="#10-质量测量指标" class="headerlink" title="10. 质量测量指标"></a>10. 质量测量指标</h3><pre><code class="hljs bash">项目经理正在管理一个项目以实施一个新的客户关系管理(CRM)平台，在制定开发进度计划时，发起人提出，该系统必须具有可处理100万条客户记录的可扩展性.项目经理应在哪一个过程记录该标准？A. 管理质量B. 持续改进C. 规划质量管理D. 控制质量<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK（6）P287，8.1.3.2-质量测量指标.</span><span class="hljs-comment"># &quot;该系统必须具有可处理100万条客户记录的可扩展性&quot;是要达到的指标，在规划质量管理过程制定.</span><span class="hljs-comment"># A - 管理质量是关注质量管理活动是否得以落实.</span><span class="hljs-comment"># B - 持续改进属于管理质量活动.</span><span class="hljs-comment"># D - 控制质量关注质量水平.</span></code></pre><pre><code class="hljs bash">某敏捷项目团队正寻求为某项目制定质量标准.项目经理该如何指导他们？A. 坚持要求在进行自动测试的同时实施测试驱动开发B. 确保当产品负责人同意针对用户故事的所有验收标准均已达到时会提供定义“已完成”（DoD)C. 告知团队，为了确保产品负责人接受解决方案，需要进行用户接受度测试D. 确定适合于该项目的工具和技术，并确保尽早以一贯的方式完成测试<span class="hljs-comment"># D</span><span class="hljs-comment"># 《PMBOK》第6版277页，8.1-规划质量管理.</span><span class="hljs-comment"># &quot;为项目制定质量标准&quot;，选定合适的质量标准的同时，</span><span class="hljs-comment"># 还需要对如何验证质量水平符合质量标准，</span><span class="hljs-comment"># 如何通过管理质量和控制质量活动来完成质量管理的要求形成共识，记入质量管理计划.</span><span class="hljs-comment"># 编制完成质量管理计划以后，还要将管理质量和控制质量活动贯彻执行，</span><span class="hljs-comment"># 即要按照控制活动要求来进行测试.</span><span class="hljs-comment"># 如果要调整测试方法，需要首先对质量管理计划进行更新后才能执行，不能擅自调整，因此选项D正确.</span><span class="hljs-comment"># ABC - 均属于可能采取的控制质量活动.</span></code></pre><pre><code class="hljs bash">敏捷项目团队正在努力管理其项目的质量.团队在考虑质量管理方面应主要关注什么？A. 专注于小批量工作B. 定期执行根本原因分析C. 确定质量指标D. 经常进行效益分析<span class="hljs-comment"># A</span><span class="hljs-comment"># 《敏捷实践指南》，第93页，敏捷质量管理.</span><span class="hljs-comment"># 敏捷开发是以迭代的方式频繁交付软件增量，</span><span class="hljs-comment"># 因此对于质量管理，团队也要专注于每个迭代的软件增量的质量，</span><span class="hljs-comment"># 也就是专注于一个迭代的小批量产品的质量，选项A正确.</span><span class="hljs-comment"># BCD - 通常都是在传统瀑布式项目中使用的工具和技术，</span><span class="hljs-comment">#       是在项目整体范围和质量计划比较明确的情况下使用的.</span></code></pre><pre><code class="hljs bash">产品开发的第一次迭代已经完成，在迭代评审期间提出，在下一次迭代期间管理产品质量，若要处理这个问题，敏捷管理专业人士应该怎么做?A. 向高级管理层寻求指导B. 聘用外部专家解决质量问题C. 将重构纳入开发过程D. 要求团队在实施新功能之前解决质量问题<span class="hljs-comment"># C</span><span class="hljs-comment"># 解析：题目中指出&quot;管理&quot;质量问题已经很困难了，</span><span class="hljs-comment"># 所以应考虑使用工程技术实践来提升质量，重构为极限编程(P)中的实践之一</span><span class="hljs-comment"># 是在不改变代码外部行为的前提下，对代码进行优化.</span></code></pre><h3 id="11-成本基准"><a href="#11-成本基准" class="headerlink" title="11. 成本基准"></a>11. 成本基准</h3><pre><code class="hljs bash">一家施工组织的变更管理政策规定，不涉及项目批准的变更可以由职能经理修订和批准，但涉及基准的变更必须由变更控制委员会(CCB)修订.CCB每月开一次会，负责供水项目的项目经理必须获得使用应急储备的授权并继续项目，但下一次CCB项目会议将在两周后召开. 项目经理应该做什么？A. 获得管理层的授权，以更新成本基准，记录变更并通知相关方B. 向CCB提交变更请求并等待批准使用应急储备C. 请企业相应的职能经理批准D. 将该问题升级上报管理层并等待解决<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK（6）P254，7.3.1.1-成本基准.</span><span class="hljs-comment"># 动用应急储备不影响基准，且变更管理政策中规定了不影响项目批准的变更职能部门经理即可批准.</span><span class="hljs-comment"># A - 成本基准不受影响.</span><span class="hljs-comment"># B - 无需提交给CCB.</span><span class="hljs-comment"># D - 没有超过项目经理的处理范围，所以无需上报.</span></code></pre><pre><code class="hljs bash">一个项目经理正在与一个刚接触敏捷的团队合作.其中一个比较有影响力的利益相关者对敏捷的性质感到挣扎.项目经理知道，这个利益相关者需要作为倡导者，并希望尽一切可能让这个利益相关者对项目感到满意.项目经理应该在状态报告中加入什么来说明项目的表现？A. MoSCoW评估的结果B. 成本-效益分析C. 投资回报率 (ROI) 分析D. 挣值分析 (EVA)<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键字&quot;利益相关者对敏捷的性质感到挣扎&quot;, &quot;状态报告&quot;，</span><span class="hljs-comment"># 能说明这位仁兄对敏捷的一些态度，所以需要加入一些预测分析的方法如D令其满意.</span><span class="hljs-comment"># A - 的法则是敏捷对需求的一种分类方法，对需求分为must do, should do, could do和never do;</span><span class="hljs-comment"># B - 属于商业论证的工具，不会出现在状态报告里；C同B.</span></code></pre><pre><code class="hljs bash">在一个正在转型以快速应对变化的组织中，一个敏捷团队正在进行产品交付工作.财务团队要求为新产品提供项目预算. 该团队应该怎么做才能满足这个要求？A. 与财务团队合作，过渡到增量预算编制B. 要求财务团队根据历史数据来分配预算C. 只向财务团队提供计划中的增量预算D. 根据当前的成本绩效指数 (CPI)来推算预算<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键字&quot;财务团队要求为新产品提供项目预算&quot;，敏捷项目是对预算进行粗略估算，</span><span class="hljs-comment"># 且没有适当的范围基准为预算估算提供基础，所以只能根据进度和其他因素来进行粗略估算，</span><span class="hljs-comment"># 这里选择D是最佳方案，考虑团队的成本绩效来估算.</span><span class="hljs-comment"># AC - 都有增量预算的概念，不是很理解这个概念，推断是随着时间变更提交不同的预算版本.</span><span class="hljs-comment"># B  - 根据历史数据来分配预算，这里用分配就明显是对控制账户的预算分配，和题目做估算有出入.</span></code></pre><h3 id="12-规划资源管理"><a href="#12-规划资源管理" class="headerlink" title="12. 规划资源管理"></a>12. 规划资源管理</h3><ul><li>控制资源</li></ul><pre><code class="hljs bash">一家公司正在为处于不同国家的几家分支机构部署新的战略利益解决方案.安装该解决方案的团队中受过专门培训的资源有限，无法并行管理多个部署.第一个国家的部署项目抵迟，现在与下一个国家的部署同步进行.项目经理宣布，由于缺乏资源，所有国家的部署都将推迟.若要避免这种情况，项目经理事先应该做什么？A. 更密切地监控第一个国家部署的进度，并告知所有相关方B. 要求每个国家提供额外预算，以便为部署雇佣高级资源C. 在团队中包含额外资源，让他们可以接受产品培训并能够部署产品D. 查看每个分支机构的需求优先级，并与他们一起制定新的部署进度计划<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK（6）P312，9.1-规划资源管理.</span><span class="hljs-comment"># &quot;若要避免&quot;、&quot;事先应该&quot;，出现类似的关键字，要向前回溯看缺少了什么.</span><span class="hljs-comment"># &quot;受过专门培训的资源有限&quot;，已经指明了问题所在，</span><span class="hljs-comment"># 所以提前规划所需资源并安排培训，有助于避免问题的发生.</span><span class="hljs-comment"># AD - 属于接受了资源短缺的风险，没有解决问题.</span><span class="hljs-comment"># B  - 情景中没有提及安装团队是高级资源.</span></code></pre><pre><code class="hljs bash">某关键可交付成果要求具备特定的技能和知识组合，但项目组织中只有一位特定资源具备该技能和知识组合.此人已现疲劳的迹象，竭力按时完成任务.在这种情况下，项目经理该做什么？A. 增加额外资源，以便按时完成任务B. 评估为完成任务正在应用的方法、技术和工具C. 修改项目管理计划，并调整进度计划，以便反映实际可完成的工作D. 将该项目资源换下，但仍让其留在项目中，作为被分配到项目中的新资源的信息来源<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK（6）P352，9.6-控制资源.</span><span class="hljs-comment"># 遇到问题，首先分析问题，然后根据分析结果做出决策.</span><span class="hljs-comment"># ACD - 是可能做出的决策，在B选项之后.</span></code></pre><pre><code class="hljs bash">一个项目经理正在领导一个混合项目. 自组织的团队在交付Demo上越来越迟，导致士气低落指导委员会熟悉与预测性方法相关的报告和计划，并对该项目感到担忧，因为它不清楚是否会交付预期的价值.项目经理应该怎么做？A. 向各团队强调达到商定的最后期限和价值的重要性B. 要求指导团队，以确保积极的项目团队成员加入C. 更新项目进度表，增加缓冲区，以反映团队的预期延误D. 建议团队限制每个迭代的工作范围，这样他们就会开始更可靠地交付<span class="hljs-comment"># A</span><span class="hljs-comment"># 关键宇&quot;自组织的团队在交付Demo上越来越迟，导致士气低落&quot;，属于资源题，</span><span class="hljs-comment"># 其实最优答案应该是团队建设，而答案没有类似的答案，所以用排除法，</span><span class="hljs-comment"># B - 的问题在于新团队加入不一定能加速开发过程;</span><span class="hljs-comment"># C - 直接更新进度表，增加缓冲，属于耍流氓行为和进一步允许延迟的做法;</span><span class="hljs-comment"># D - 不是范围的问题而是士气低落的问题，所以A相对比较好，</span><span class="hljs-comment">#     在思维意识上给与警示，具有团建的效果.</span></code></pre><pre><code class="hljs bash">敏捷团队里一位正在处理一个非常复杂和极其关键的特性的成员被调到另一个项目工作，因为另一个项目已进入关键期，客户威胁要从公司手上将项目收回.应该做些什么来避免这个问题？A. 安排一个替补成员以结对编程模式工作，与其他正在处理关键特性的成员一起完成任务B. 什么都不做，这只是团队中发生的另一个变化。删除无法完成的特性，在下一次迭代计划中再考虑该特性C. 在冲刺计划期间，团队应该与他们的经理重新确认可以获得哪些资源，以保证有更好的资源规划D. 团队应加班加点来应对当前的困难<span class="hljs-comment"># C</span><span class="hljs-comment"># 避免这个问题，也就是提前识别并且能够规避此问题的发生，</span><span class="hljs-comment"># 只有C选项在迭代前做除了识别资源的变化，从而可以避免资源限制对项目的影响.</span><span class="hljs-comment"># B  - 选项什么都不错不能避免发生;</span><span class="hljs-comment"># AD - 选项违反了敏捷的&quot;可持续开发&quot;原则（敏捷过程倡导可持续开发。责任人、开发人员和用户要能够共同维持其步调稳定延续）</span></code></pre><pre><code class="hljs bash">在项目的最后一次迭代期间，由于缺乏必要的技能，敏捷团队在交付某项功能过程中陷入困境，该项目己经延期五天了，但预计还要至少延期十天。敏捷项目领导事先应该怎么做来避免这种情况？A. 确保团队由跨职能的通才专家组成B. 为特定团队成员提供所需技能的适时培训C. 将该功能分配给具有所需技能成员的另一个敏捷团队D. 降低该功能的优先级，直到一名团队成员掌握构建该功能的技能为止<span class="hljs-comment"># A</span><span class="hljs-comment"># 分析题干: 因为团队缺乏必要的技能导致陷入困境，</span><span class="hljs-comment"># 可以看出团队不是由跨职能团队人员组成.</span><span class="hljs-comment"># 知识点：敏捷团队强调应该是由跨职能的人员组成，包含各种专业人士，</span><span class="hljs-comment"># 团队作为一个整体具有创建产品增量所具有的全部功能.</span><span class="hljs-comment"># 通才型专家不仅深入掌握单一专业技能而且广泛掌握团队所需其他技能，既有专长又有多种技能经验.</span></code></pre><h3 id="13-敏捷教练"><a href="#13-敏捷教练" class="headerlink" title="13. 敏捷教练"></a>13. 敏捷教练</h3><pre><code class="hljs bash">沙迪是一名Scrum Master，负责跟进一个敏捷项目的团队.团队成员抱怨他们的工作被拖延了，因为新的发起人每次都在询问他们项目的细节.在这种情况下，作为一个Scrum Master，沙迪会怎么做？A. 联系发起人，要求他向你（scrum master）询问所有的问题B. 与产品负责人商量，请他帮忙处理新发起人的问题C. 告诉团队，在与发起人进行任何讨论之前，要先征得他（scrum master）的同意D. 与团队讨论，固定一名成员作为发起人的代言人<span class="hljs-comment"># A</span><span class="hljs-comment"># 《敏捷实践指南》P40-4.3.2 敏捷的角色；知识点：敏捷教练；关键词：scrum master.</span><span class="hljs-comment"># 团队成员抱怨他们的工作被拖延了. 作为敏捷教练，</span><span class="hljs-comment"># 一项主要职责就是协助团队成员排除价值交付的阻碍，并且敏捷教练有组织内协调的职责，所以A选项正确.</span><span class="hljs-comment"># B - 产品负责人跟客户合作确定产品的方向，但不负责对外沟通.</span><span class="hljs-comment"># C - SM没有控制团队的权力，只能协助团队.</span><span class="hljs-comment"># D - 固定的发言人应该就是敏捷教练.</span></code></pre><pre><code class="hljs bash">一家公司正在向混合型方法转变，并为所有的项目经理进行了能力建设活动.在这些能力建设活动中，重点是敏捷方法和团队促进技能.当开始实施阶段时，项目经理们面临着激励新聘用的敏捷员工的问题.为什么项目经理在激励敏捷员工方面会有问题？A. 能力建设活动错过了仆人式领导的概念转移B. 过渡期通常会造成这类问题C. 敏捷员工不习惯于由项目经理领导D. 项目经理被期望成为敏捷团队的教练<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键字&quot;重点是敏捷方法和团队促进技能&quot;，</span><span class="hljs-comment"># 这是团建的目标，自然项目经理角色在团建中需要转变原来一言堂到团队自组织的工作风格，</span><span class="hljs-comment"># 可能他目前面临的还是&quot;我说了算&quot;的心里，这点是项目经理们绕不过去的一道坎.</span></code></pre><pre><code class="hljs bash">由于一个技术难点，一名敏捷团队成员对完成任务有困难，该名团队成员应该怎么做？A. 与scrum 主管一起解決这个问题B. 请求团队领导协助C. 咨询另一名团队经理D. 在下一次站会上讨论该问题<span class="hljs-comment"># A</span><span class="hljs-comment"># scrum 主管职责就是负责移除障碍.</span></code></pre><pre><code class="hljs bash">团队在与客户接洽方面有困难，客户几乎不回应问题，经常缺席迭代和评审和演示，但是仍然期望产品按时交付并满足期望，敏捷项目管理师应该怎么做？A. 教育客户积极参与的重要性B. 让团队使用专家判断做出有根据的决策C. 停止开发，执行需求收集D. 要求产品负责人获得必要的客户反馈<span class="hljs-comment"># D</span><span class="hljs-comment"># 如果客户不能全程参与，可以由产品负责人跟客户沟通，</span><span class="hljs-comment"># 再由产品负责人将客户的意见和想法反馈给团队.</span></code></pre><pre><code class="hljs bash">某组织在一个受管制的行业中决定从预测性的方法转为敏捷的交付方式.已经决定正在进行的项目将采用Scrum，项目经理仍然要对项目结果负责.在第四次冲刺演示中，客户注意到一个功能不符合规定.项目经理应该怎么做？A. 让团队与合规官员协商，为过去的冲刺阶段的用户故事更新完成的定义 (DoD)B. 让产品负责人与变更控制委员会(CCB） 协商，以实施必要的合规要求C. 让Scrum主管组织一次每周的会议，由合规官员、产品负责人和项目团队参加D. 让产品负责人定期与合规官员一起审查产品待办事项中的用户故事，以确定任何差距<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键字&quot;客户注意到一个功能不符合规定&quot;，属于范围的问题，</span><span class="hljs-comment"># 对于不合规的问题的发现，对于该功能应当增加产品待办事项，并确定下一次是否能修复，</span><span class="hljs-comment"># 对于不合规的整体问题，需要产品负责人检查并细化其他的产品待办事项，以防事情重复发生，这里D是最优解.</span><span class="hljs-comment"># A - 的建立DoD是针对质量的，无法针对合规或者范围的问题.</span><span class="hljs-comment"># B - 敏捷中没有CCB组织，无法执行变更控制流程.</span><span class="hljs-comment"># C - 这个会议是Review审查会议，审查功能是否符合要求，从题目中得知已经执行了此会议.</span></code></pre><pre><code class="hljs bash">一个组织正在向敏捷环境过渡。项目经理发现，大多数团队成员对敏捷环境并不熟悉.项目经理应该怎么做来解决这个问题？A. 与团队一起改变方法B. 与敏捷教练会面来处理这个问题C. 分析团队的敏捷成熟度D. 支持团队成员的成长和发展<span class="hljs-comment"># C</span><span class="hljs-comment"># 关键字&quot;大多数团队成员对敏捷环境并不熟悉&quot;，根据顺序，CBAD.</span></code></pre><pre><code class="hljs bash">一名敏捷团队成员的任务落后时，Scrum 主管应该怎么做？A. 将任务移交给在中有余力的另一名团队成员B. 让团队提供建议C. 召开一对一会议，鼓励该团队成员履行任务承诺D. 通知关键干系人<span class="hljs-comment"># B</span><span class="hljs-comment"># 敏捷方法强调仆人式领导，敏捷坚持自我管理的团队，</span><span class="hljs-comment"># 仆人式领导不需要管理任务而是要帮助、指导团队共同解决障碍实现目标.</span></code></pre><pre><code class="hljs bash">资源经理请求提供包含任何团成员进度的每日报告，Scrum 主管应该怎么做？A. 要求每位成员创建一份定制的状态报告B. 为相关方提供一份燃尽图C. 在仪式活动期间收集进度情况并分发D. 将该任务委派给 PMO<span class="hljs-comment"># C</span><span class="hljs-comment"># A - 错误，增加了成员的工作量.</span><span class="hljs-comment"># B - 错误，燃尽图反应的是项目的进展，包括总范围、 已完成工作量、剩余工作量，没有具体团队成员的进度信息.</span><span class="hljs-comment"># C - 正确，在站会上可利用看板等工具收集进度情况，并分发给相关方.</span><span class="hljs-comment"># D - 错误，PMO 设立的目的是引导组织实现商业价值.</span></code></pre><pre><code class="hljs bash">敏捷的团队正在努力解决一个问题,一位团队成员提到另一个团队有一个类似的问题已得到解决，但是无法获得经验教训文件。敏捷管理专业人士应该怎么做？A. 与该团队合作，但创建一个在整个公司传播团队知识的解决方案B. 鼓励团队独立寻找解决方案C. 建议所有敏捷团队分享他们项目的每周报告D. 建议聘请外部专家就在团队之间分享知识的最佳方法提供建议<span class="hljs-comment"># A</span><span class="hljs-comment"># 分析题干，其他团队有成功经验可借鉴，可以与其协作，</span><span class="hljs-comment"># 把知识、经验和多种技能聚集到一起为新产品开发做贡献的过程.</span><span class="hljs-comment"># 敏捷鼓励在团队和组织之间之间传播知识和实践，推动系统性改进，</span><span class="hljs-comment"># 防止同类问题再次发生，提升组织的整体效能.</span></code></pre><h3 id="14-管理相关方参与"><a href="#14-管理相关方参与" class="headerlink" title="14. 管理相关方参与"></a>14. 管理相关方参与</h3><ul><li>人际关系与团队技能-会议管理</li><li>监控项目工作</li></ul><pre><code class="hljs bash">一位项目经理正在实施一个新的软件系统.一些部门工作人员质疑变更的必要性，并认为新系统会妨碍他们当前的流程.项目经理在项目开始时应该做些什么来防止这种阻力？A. 让公司各个层面的相关方都参与其中，以便每个人都了解变化B. 在接受项目之前确保公司文化鼓励变革C. 制定沟通管理计划，概述与利益相关者沟通的方法D. 鼓励项目发起人与经常抵制变革的部门讨论变革<span class="hljs-comment"># A</span><span class="hljs-comment"># 《PMBOK》第6版523页，13.3-管理相关方参与.</span><span class="hljs-comment"># 不是所有的项目相关方都会支持项目. 尤其以一个组织来说，变革经常遇到层层组力，</span><span class="hljs-comment"># 要不也不会抽调资源组成项目组来做变革的破局者. 所以项目经理在管理相关方参与的时候，</span><span class="hljs-comment"># 需要在适当的项目阶段引导相关方参与，以便获取、确认或维持他们对项目成功的持续承诺.</span><span class="hljs-comment"># 从情景描述中可以看出，相关方出现了抵制的态度，身为项目经理在项目开始时要尽早的让相关方参与进来，</span><span class="hljs-comment"># 了解项目的变化，减少来自相关方的阻力，选项A正确.</span><span class="hljs-comment"># B - 变革作为口号所起到的作用有限，如果要破局，还是需要具体的行动.</span><span class="hljs-comment"># C - 在确定与相关方的沟通管理计划之前，要先让相关方参与到项目中，先A再C.</span><span class="hljs-comment"># D - 管理责任是项目经理而不是项目发起人.</span></code></pre><pre><code class="hljs bash">高级项目经理正在与来自多个国家/地区的众多相关方一起开展一个工业产能扩张项目.相关方对几个项目组成部分意见不一，这正对项目进展产生影响.项目发起人已要求项目经理解决这些分歧.项目经理可采取以下哪三项措施来解决这一问题？（选择三项）A. 创建团队章程B. 积极倾听C. 编写精心组织的信息D. 进行相关方映射分析E. 鼓励具备文化意识<span class="hljs-comment"># BDE</span><span class="hljs-comment"># 《PMBOK》第6版523页，13.3-管理相关方参与.</span><span class="hljs-comment"># 对于相关方之间的分歧，要对其分析来理解他们的分歧，</span><span class="hljs-comment"># 考虑文化差异，积极倾听主动管理，因此选项BDE正确.</span><span class="hljs-comment"># A - 注意审题，分歧出现在相关方之间，而不是团队成员之间，</span><span class="hljs-comment">#     所以通过设定团队章程无法解决分歧.</span><span class="hljs-comment"># C - 导致分歧的根源并不是沟通补偿.</span></code></pre><pre><code class="hljs bash">在一个项目的规划阶段，项目经理意识到光靠标准的相关方参与方法是不够的.其中一位客户代表（并非关键决策者）极其固执.鉴于在会议期间人们认为该客户代表威信很高，他/她可能成为项目推进过程中的障碍. 项目经理应该如何处理这个问题?A. 更新项目进度计划，以迎合该特定相关方B. 更新风险登记册，将其可能对项目造成的影响考虑进来C. 在关键的决策会议之前，花时间争取该相关方的认同D. 要求只有关键决策者才能参加项目会议<span class="hljs-comment"># C</span><span class="hljs-comment"># 《PMBOK》第6版523页，13.3-管理相关方参与《PMBOK》第6版386页，10.2.2.6-人际关系与团队技能-会议管理.</span><span class="hljs-comment"># &quot;光靠标准的相关方参与方法是不够的&quot;，说明要对相关方进行有效管理要因人而异.</span><span class="hljs-comment"># 因此，针对这位会对项目造成障碍的相关方，要分析其对项目的期望是什么，</span><span class="hljs-comment"># 为什么会对项目持有抵制的态度，进而找到合适的调动其参与到项目中的策略.</span><span class="hljs-comment"># 关于会议，要意识到会议的工具属性，也就是说我们需要通过会议来实现会议的目标，</span><span class="hljs-comment"># 进而形成可实施的执行方案。为了避免在会议上陷入无休止的争论，</span><span class="hljs-comment"># 建议在会议前完成对相关方的分析和必要信息的同步（适当的沟通也是调动相关方参与的策略之一），因此C选项正确.</span><span class="hljs-comment"># A - 在未了解相关方的期望之前，一味的退让并不一定能换来相关方的支持，</span><span class="hljs-comment">#     &quot;今日割五城，明日割十城，然后得一夕安寝。起视四境，而秦兵又至矣&quot;.</span><span class="hljs-comment"># B - &quot;光靠标准的相关方参与方法是不够的&quot;，属于已知的问题，即已经暴露出来的障碍.</span><span class="hljs-comment">#     首先要解决问题和障碍，在解决后，如果问题解决后，</span><span class="hljs-comment">#     仍然存在复现的可能性，将其列为风险进行管理，B选项在C选项之后.</span><span class="hljs-comment"># D - 哪些相关方可以与会，要视会议的目标而定.</span></code></pre><pre><code class="hljs bash">项目经理难以使项目需求获批，因为项目相关方之间存在意见分歧，这一问题正导致项目进度计划面临风险.项目经理首先该做什么来促使项目需求获批？A. 进行相关方分析B. 识别分歧的缘由C. 举办团队建设活动D. 查阅项目章程<span class="hljs-comment"># A</span><span class="hljs-comment"># 《PMBOK》第6版512页，13.1.2.4-相关方分析.</span><span class="hljs-comment"># &quot;相关方之间存在意见分歧&quot;，是什么导致了分歧，</span><span class="hljs-comment"># 能否针对导致分歧的根源进行引导，这都需要首先对相关方展开分析，</span><span class="hljs-comment"># 了解相关方关于项目存在哪些期望和需求，选项A正确.</span><span class="hljs-comment"># B - 识别导致分歧的缘由属于相关方分析的一部分.</span><span class="hljs-comment"># C - 团队建设活动针对团队成员，相关方从隶属关系上不归项目经理管辖，</span><span class="hljs-comment">#     所以团队建设活动对其不适用.</span><span class="hljs-comment"># D - 项目章程不涉及如何相关方进行管理.</span></code></pre><pre><code class="hljs bash">在项目设计阶段，项目经理注意到进度绩效指数(SPI)为1.8，成本绩效指数(CPI）为0.1，在与高层管理人员召开的每周例会上，项目经理报告了关于这些指标的顾虑。但顾虑最大之人正是项目发起人，他/她说如果这种趋势继续下去，他们将被迫提前关闭项目.项目经理应该怎么做？A. 停止赶工加快进度计划B. 关注项目发起人，但要理解在项目设计阶段支出增加非常正常C. 运用资源平衡技术D. 密切跟进了解项目发起人，并修改项目的资源管理计划，以改善指标<span class="hljs-comment"># D</span><span class="hljs-comment"># 《PMBOK》第6版523页，13.3-管理相关方参与和《PMBOK》第6版105页，4.5-监控项目工作.</span><span class="hljs-comment"># 进度绩效指数(SPI)为1.8，成本绩效指数(CPI）为0.1，</span><span class="hljs-comment"># 项目的绩效表现惨不忍睹，也难怪项目发起人威胁说如果项目绩效持续恶化将关闭项目.</span><span class="hljs-comment"># 所以，项目经理一方面要找到改善项目绩效的解决方案，</span><span class="hljs-comment"># 一方面又要对相关方进行管理，争取到项目发起人对项目的支持与信心</span><span class="hljs-comment"># （至少要争取到解决问题的时间），选项D正确.</span><span class="hljs-comment"># A - 情景中没有提到CPI为0.1是由于赶工所造成的，而且忽视了对相关方的管理.</span><span class="hljs-comment"># B - 支出增加是否正常，要做有理有据的说明.</span><span class="hljs-comment"># C - 同A，情景中并没有提及CPI的问题是由于资源管理所导致的.</span></code></pre><h3 id="15-数据收集"><a href="#15-数据收集" class="headerlink" title="15. 数据收集"></a>15. 数据收集</h3><ul><li>问卷调查</li><li>访谈</li></ul><pre><code class="hljs bash">在项目的规划阶段，公司进行组织结构变革，项目经理认为大多数相关方已经发生变化.项目经理应该使用哪种工具或技术来验证相关方是否已经发生变化？A. 问卷调查B. 决策矩阵C. 鱼骨图D. 思维导图<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK（6）P511，13.1.2.2-数据收集-问卷调查.</span><span class="hljs-comment"># 问卷调查可以用于对大量相关方的信息收集.</span><span class="hljs-comment"># B - 决策矩阵通常用于多标准决策分析，多标准决策分析用于监督相关方过程.</span><span class="hljs-comment"># C - 鱼骨图通常用于分析原因.</span><span class="hljs-comment"># D - 思维导图通常用于头脑风暴.</span></code></pre><pre><code class="hljs bash">项目经理正在与虚拟团队一起最终确定项目的详细需求.若要确保对所收集的数据有信心，项目经理应该做什么？A. 制定并分发问题日志B. 定期确认范围C. 更新项目管理计划D. 进行面对面或在线访谈<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK（6）P142，5.2.2.2-数据收集-访谈.</span><span class="hljs-comment"># &quot;若要确保对所收集的数据有信心&quot;，强调了收集需求的过程，只有选项D是收集需求的工具.</span><span class="hljs-comment"># A - 问题日志通常用于已出现问题的记录和跟踪.</span><span class="hljs-comment"># B - 确认范围是对可交付成果的验收.</span><span class="hljs-comment"># C - 收集到的需求经过分析评估后列入需求文件，在D选项之后.</span></code></pre><pre><code class="hljs bash">相关方识别工作已完成，并且相关方位于许多不同国家，项目经理需要收集基于项目章程中确定的高层级需求所提出的详细需求.为了快速从这些相关方收集信息，应采用的最佳数据收集技术是哪一项？A. 与各相关方召开单独的会议B. 与相关方召开Web会议C. 焦点小组会议D. 调查<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK（6）P143，5.2.2.2-数据收集-问卷调查.</span><span class="hljs-comment"># 注意关键字，&quot;快速从相关方收集信息&quot;，只有问卷调查满足此要求.</span><span class="hljs-comment"># 因为相关方处于不同国家，所以采取何种会议形式相对问卷调查来说都要慢.</span></code></pre><h3 id="16-合同类型"><a href="#16-合同类型" class="headerlink" title="16. 合同类型"></a>16. 合同类型</h3><pre><code class="hljs bash">在某项目中，一些相关方请求对初始工作范围做出几项变更.大家已就这些变更达成一般性共识，但对进度计划和预算的影响尚未得到适当分析和管理.分包商对于这些变更不知所措，当前采用的是总价合同.分包商采用哪种合同降低财务风险？A. 固定总价合同（FFP） B. 工料合同（T&amp;M) C. 成本加激励费用合同（CPIF）D. 成本加奖励费用合同（CPAF) <span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK（6）P471，12.1.1.6-组织过程资产-合同类型.</span><span class="hljs-comment"># 注意，现在是要降低分包商所面临的财务风险，成本型合同对分包商比较有利.</span><span class="hljs-comment"># 奖励条款依赖于买方的主观认识，风险相对激励条款较大，</span><span class="hljs-comment"># 所以最适合分包商采用的是成本加激励费用合作，选C.</span></code></pre><pre><code class="hljs bash">在一个固定时间和预算的项目中，客户希望一个核心组件的开发是基于敏捷实践的，因为（他的需求）的最终范围没有完全开发. 项目经理正在与销售团队一起参与合同开发，并希望确保开发成本不影响项目的盈利能力. 项目经理应将哪两项控制措施纳入合同，以具体解決核心部件的开发？（选择两个)A. 在合同中限制开发的迭代次数B. 建立一个治理委员会来审查合同的交付C. 为固定组件和敏捷组件的合同分层D. 在合同中的特定项目阶段提供范围变更的替代方案E. 要求该项目只使用内部资源<span class="hljs-comment"># AD</span><span class="hljs-comment"># 关键宇&quot;最终范围还没有完全开发&quot;, &quot;纳入合同”，所以属于采购题.</span><span class="hljs-comment"># 对于范围不明确应该选择工料合同，为了避免应对成本无限制增加．</span><span class="hljs-comment"># 需要界定天数限制成者成本限制，所以选择A.</span><span class="hljs-comment"># 合同中另外一个风险就是变更．如何执行变更的流程也需要得到阐明，所以是D.</span><span class="hljs-comment"># BCE - 都是操作，而不是纳入合同的合同选项，也不用考虑.</span></code></pre><h3 id="17-实施整体变更控制"><a href="#17-实施整体变更控制" class="headerlink" title="17. 实施整体变更控制"></a>17. 实施整体变更控制</h3><pre><code class="hljs bash">作为客户代表的一位关键主题专家(SME)发现某项功能应该被纳入项目范围.通过变更控制过程，变更控制委员会 (CCB)已对该功能进行沟通、定价、评估及否决.尽管如此，该主题专家仍执着地坚持要求该功能纳入项目范围，并继续宣扬该所需功能的差异之处。项目经理该做什么？A. 为该功能寻找重要的替代性机会B. 继续执行原来商定的范围C. 将该问题上报给该主题专家的职能经理D. 在风险登记册中提出一项内容<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK（6）P113，4.6-实施整体变更控制.</span><span class="hljs-comment"># &quot;通过变更控制过程，变更控制委员会 (CCB)已对该功能进行沟通、定价、评估及否决&quot;，</span><span class="hljs-comment"># CCB已经对变更请求做出了决策，进行了否决，所以继续按照原定的范围执行.</span></code></pre><pre><code class="hljs bash">项目经理已被指派负责一个教育项目，该项目旨在为从事应用开发的员工提供培训.其中的一项可交付成果是向客户的活跃项目中最优秀的学员提供见习机会，但客户目前开展的项目数量不够。项目经理决定创建几个内部项目，以确保能够提供足够的见习机会项目经理应采取哪三种措施来实现该目标，同时不会增加客户的成本负担？（选择三项）A. 管理交付的质量B. 使用项目的紧急情况预算C. 使用新内部项目的范围来创建变更请求D. 使用内部项目来创建新范围的工作分解结构(WBS)E. 对客户施加影响，促使其启动新项目<span class="hljs-comment"># ACD</span><span class="hljs-comment"># 《PMBOK》第6版298页，8.3-控制质量和《PMBOK》第6版113页，4.6-实施整体变更控制.</span><span class="hljs-comment"># 难度来源于读题，教育项目原定向客户输送学生进行实习体验，</span><span class="hljs-comment"># 但是由于客户内部岗位需求不足，需要在当前公司内部启动几个内部项目来满足实习要求，</span><span class="hljs-comment"># 因此涉及到项目范围的变更（客户侧实习变为公司内部实习），选项D正确.</span><span class="hljs-comment"># 对范围的变更需要通过实施整体变更控制来实现，选项C正确.</span><span class="hljs-comment"># 在这个过程中，对于实习质量的要求不能降低，选项A正确.</span><span class="hljs-comment"># B - 并未提到客户方内部岗位不足属于不确定性因素，所以这道题目并不是考察大家对储备的使用.</span><span class="hljs-comment"># E - 客户侧实习岗位不足，属于事业环境因素，也就是说会影响项目实施的灵活性，但是很难被项目所改变.</span></code></pre><pre><code class="hljs bash">一位项目经理正在领导一家承包公司的项目，项目组刚刚完成了一个迭代.产品通过了检查，但在产品中增加了个额外的功能.客户注意到了这个额外的功能，认为它将给产品带来新的风险项目经理应该怎么做才能避免将来出现这种情况？A. 管理范围基线以影响驱动变化的因素B. 遵循适当的变更控制流程，评估变更的进一步影响C. 与客户合作，以确保该功能增加价值D. 与客户进行频繁的审查，以确保产品按预期运行<span class="hljs-comment"># B</span><span class="hljs-comment"># 关键字&quot;在产品中增加了一个额外的功能&quot;，</span><span class="hljs-comment"># 敏捷虽然拥抱变更，但是在迭代中也严令禁止范围蔓延和镀金行为，</span><span class="hljs-comment"># 所以敏捷也是处于一个在迭代期内对变更控制的过程，所以B最优化;</span><span class="hljs-comment"># A - 的意思是设定范围基准，就可以影响变更的产生，</span><span class="hljs-comment">#     比如前期调研越详细的需求，那么后期就可以少变更，这是预测模型的目的;</span><span class="hljs-comment"># C - 是反其道而行之;</span><span class="hljs-comment"># D - 控制范围应该在团队内部执行．而不用太过麻烦客户.</span></code></pre><pre><code class="hljs bash">在一个敏捷项目的演示期间，项目经理缺席，在审查己完成的工作之后，产品负责人要求进行一项变更，然后获得房间中每个人的致同意，开发团队立即开始实施这项变更，当项目经理回来工作后，这项变更已经完成，项目经理下一步应该怎么做？A. 将该不一致性问题通知相关方B. 将已完成的变更更新到工作范围中C. 与项目团队开会，讨论变更控制过程D. 向变更控制委员会CCB登记这项变更并请求批准<span class="hljs-comment"># C</span><span class="hljs-comment"># 首先，敏捷里没有CCB，排除D选项；</span><span class="hljs-comment"># 一般敏捷对于变更的做法是将客户提交的变更写成用户故事，</span><span class="hljs-comment"># 在下一次迭代中进行范围基准规划工作，这里在本迭代就实施了这个变更明显是违反了这个原则;</span><span class="hljs-comment"># 所以C相对比较好，让团队了解敏捷里的变更是怎么走的.</span><span class="hljs-comment"># A的问题在于是团队自己没有把控好变更的节奏；</span><span class="hljs-comment"># B不能容忍这个违规变更，不能加入当前的工作范围内.</span></code></pre><pre><code class="hljs bash">一个敏捷项目处于10次迭代中的第6次迭代迭代审查后，团队收到利益相关者的反馈，可能会导致产品的改变.项目经理应该采取哪两个行动？（选择两个）A. 询问利益相关者关于这个变化的优先级B. 要求产品负责人审查产品的待办事项列表C. 要求团队成员分析这一变更的影响D. 要求发起人批准该变更请求E. 要求团队成员在下一次迭代中加入该变更<span class="hljs-comment"># AB</span><span class="hljs-comment"># 关键字&quot;可能会导致产品的改变&quot;，属于敏捷的范围变更的问题，</span><span class="hljs-comment"># 应该需要产品负责人介入审查优先级和澄清该需求所以AB比较优化；</span><span class="hljs-comment"># DE一定是不对的，C可能也是对的，不过和敏捷的特性比较，C属于预测模型的步骤，可能AB更加优化.</span></code></pre><pre><code class="hljs bash">在一次冲刺计划会议上，一个利益相关者被告知，他们的需求正在进行中，最终产品将在接下来的两个冲刺中完成。利益相关者对时间表非常满意，并对敏捷团队给予全力支持。会议结束后，项目发起人打电话给项目经理，说有一个大的需求，他们希望团队马上去做，因为它有很大的商业价值.项目经理应该怎么做？A. 给利益相关者打电话，告诉他们，由于这个最后一分钟的紧急要求，最终产品的进度必须延长B. 在决定新的优先级之前，进行影响分析并分享整体进度影响C. 拒绝发起人的新要求，因为这将影响利益相关者最终产品的交付D. 要求产品负责人优先考虑发起人的新要求，并要求团队立即开展工作<span class="hljs-comment"># B</span><span class="hljs-comment"># 关键字&quot;说有一个大的需求，他们希望团队马上去做&quot;，</span><span class="hljs-comment"># 这个是在冲刺中的一个需求，发起人觉得非常有价值，在冲刺阶段是拒绝接受变更，</span><span class="hljs-comment"># 不过可以停止当前迭代并进入冲刺规划，</span><span class="hljs-comment"># 那么针对此变更就需要和产品负责人合作并执行价值排序和细化工作，因此选择B.</span><span class="hljs-comment"># AD - 这类答案没有通过一个规划的阶段就贸然接收一定是错误的.</span><span class="hljs-comment"># C  - 直接拒绝不妥当.</span></code></pre><pre><code class="hljs bash">在敏捷项目部署期间，客户对可交付成果不满意并要求进行变更.敏捷项目经理下一步应该怎么做？A. 将这些变更添加进问题日志B. 在交付期间整合实施变更C. 在下次评审会议期间纳入这些变更D. 尽可能地限制变更<span class="hljs-comment"># B</span><span class="hljs-comment"># 关键字&quot;敏捷项目部署期间，客户对可交付成果不满意并要求进行变更&quot;，</span><span class="hljs-comment"># 敏捷方法强调拥抱变更，不考虑使用变更流程，</span><span class="hljs-comment"># A - 的问题在于不满意要求变更要记录在需求池里，而不是问题日志.</span><span class="hljs-comment"># C - 的问题是评审会是类似客户确认范围的个会，下一次会议纳入变更为时过晚.</span><span class="hljs-comment"># D - 一定不对，B是在下一次的交付期间，纳入这个变更进行实施工作，是敏捷的一般做法.</span></code></pre><pre><code class="hljs bash">在与产品负责人交谈后，一位项目团队开发人员为当前迭代添加了一项关键功能，以确保新的销售. 该团队成员已经开始开发该功能. 项目经理下一步应该怎么做？A. 指示团队成员停止开发该功能，直到遵循变更控制程序B. 建议开发人员主动添加该功能，并告知产品负责人该功能在当前迭代后可用C. 如果不影响当前正在进行的任何其他功能交付，指导团队完成该功能的开发D. 将该问题上报给人力资源部门，以确保产品负责人将来不会绕过命令链<span class="hljs-comment"># A</span><span class="hljs-comment"># 关键字&quot;一位项目团队开发人员为当前迭代添加了一项关键功能&quot;，敏捷对于变更的态度虽然是拥抱变更，</span><span class="hljs-comment"># 但是敏捷的变更的方法是当前有变更，会排入需求池，</span><span class="hljs-comment"># 并在下一个迭代开始前规划一个迭代周期的范围基准，</span><span class="hljs-comment"># 但是敏捷对于交付过程中是明令禁止变更的，所以这点和题目中当前迭代添加功能有违背.</span><span class="hljs-comment"># 所以这对敏捷而言也是非法变更问题，看看四个答案，如果没有相应的选项，</span><span class="hljs-comment"># 则优先考虑pmp中的变更流程，选择A</span><span class="hljs-comment"># BC - 属于承认非法变更的事情. </span><span class="hljs-comment"># D  - 一般人力资源部门不要选择.</span></code></pre><pre><code class="hljs bash">一个敏捷项目处于16个迭代中的第8个迭代，在最后一次迭代审查后，团队成员从安全部门收到关于项目必须遵守的规定的反馈.项目经理应该采取哪两个行动？(选择两个）A. 要求团队成员分析包括这一规定的影响B. 询问利益相关者关于这个规定的优先级C. 要求产品所有者将需求纳入产品待办事项列表中D. 向安全部门了解有关法规的细节E. 要求团队成员在下一次迭代中包括这些需求<span class="hljs-comment"># CD</span><span class="hljs-comment"># 关键字&quot;团队成员从安全部门收到关于项目必须遵守的规定的反馈&quot;，</span><span class="hljs-comment"># 必须遵守的反馈是新的变更，对于敏捷来说，</span><span class="hljs-comment"># 需要加入产品待办事项并进行细化和重新规划的过程，这里答案都比较接近，顺序是CDBAE.</span></code></pre><h3 id="18-相关方参与计划"><a href="#18-相关方参与计划" class="headerlink" title="18. 相关方参与计划"></a>18. 相关方参与计划</h3><pre><code class="hljs bash">某新项目经理接受的一个项目目前正处于执行阶段，在人事变更会议上，项目集经理和即将离任的项目经理向该新项目经理介绍了情况.他们指出，该项目涉及一些很难对付的相关方.为了确定冲突来源，该新项目经理应完成以下哪项关键任务？A. 更新需求文件、风险管理计划和相关方参与计划B. 完成相关方分析，并更新相关方参与计划C. 完成风险分析，并更新风险登记册和问题日志D. 完成项目评估，并更新完成的项目管理计划文件<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK（6）522，13.2.3.1-相关方参与计划.</span><span class="hljs-comment"># 注意审题，&quot;为了确定冲突来源，应完成以下哪项关键任务&quot;，</span><span class="hljs-comment"># 要对相关方进行管理，需要提前识别相关方并制定相关方参与计划.</span><span class="hljs-comment"># A - &quot;很难对付的相关方&quot;，更新需求文件、风险管理计划与之无关.</span><span class="hljs-comment"># C - 确定来源，而不是分析相关方对项目产生影响的可能性.</span><span class="hljs-comment"># D - 与题目无关.</span></code></pre><pre><code class="hljs bash">项目经理将项目章程草案提交给运营经理，运营经理就该项目对团队的影响表达了顾虑，并将所顾虑之事上报给项目发起人.项目经理应更新哪个文件来定义与该投诉相关的活动?A. 效益管理计划B. 资源管理计划C. 相关方参与计划D. 沟通管理计划<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK（6）522，13.2.3.1-相关方参与计划.</span><span class="hljs-comment"># &quot;项目对团队的影响&quot;，运营经理认为他的团队受到了项目的影响，</span><span class="hljs-comment"># 那么就属于相关方，需要就这个情况更新相关方参与计划.</span><span class="hljs-comment"># A - 是对创造、提高和保持项目效益的书面文件.</span><span class="hljs-comment"># B - 针对的是资源如何管理.</span><span class="hljs-comment"># D - 针对的是信息如何传递.</span></code></pre><pre><code class="hljs bash">某市场团队正在开发思路，改进一个现有产品.市场主管主动联系项目经理，以确保成功推出产品所需的必要措施.项目经理应关注什么？A. 确保制定范围管理计划，以涵盖所有相关目标B. 确保团队还将聚焦于总体的变更管理计划C. 为常规的项目更新作出规划，以涵盖关键可交付成果的状态D. 确定并调整有助于评估产品成功交付的绩效指标<span class="hljs-comment"># D</span><span class="hljs-comment"># 《PMBOK》第6版33页，1.2.6.2-项目效益管理计划.</span><span class="hljs-comment"># 市场主管联系项目经理，确保&quot;推出产品所需的必要措施&quot;，</span><span class="hljs-comment"># 也就是市场主管从他的专业角度来阐述了要想赢得市场的认可，必须具备的产品能力.</span><span class="hljs-comment"># 因此，从项目管理的视角，要将市场侧的需求转变成项目必须实现的价值，</span><span class="hljs-comment"># 并且为了验证项目成功的赢取价值，要设定一系列的监测点和监测指标.</span><span class="hljs-comment"># 通过监测获取的数据来判断项目的目标是否出现偏离，尽最大的可能保障项目的成功实施，选项D正确.</span><span class="hljs-comment"># A - 范围管理计划中记录了如何定义范围、创建WBS、确认范围和控制范围，</span><span class="hljs-comment">#     与范围相关的目标记录在范围基准中而不是范围管理计划.</span><span class="hljs-comment"># B - 如果能够在一开始就理解了项目所需要获得的价值是什么，将减少一些不必要的变更.</span><span class="hljs-comment"># C - 关键可交付成果尚不清楚是什么的时候，无法进行更新.</span></code></pre><pre><code class="hljs bash">由于最近的预算减少，两个团队成员从一个敏捷团队中被释放.客户仍然期待着项目的早期结果.项目经理应该采取哪两个行动来调整客户的期望？(选择两个）A. 要求敏捷团队与客户一起审查最新的冲刺速度B. 要求产品所有者与客户一起审查优先级的产品待办事项列表C. 要求敏捷团队与客户一起回顾和更新质量管理计划D. 与客户一起审查障碍记录E. 向客户发送一份详细的项目管理计划<span class="hljs-comment"># AB</span><span class="hljs-comment"># 关键字&quot;两个团队成员从一个敏捷团队中被释放&quot;, &quot;调整客户的期望”，</span><span class="hljs-comment"># 人员离职，最主要的影响是团队的容量和速度velocity发生了变化，</span><span class="hljs-comment"># 因此调整期望的最主要做法就是速度，因此AB为最优化答案.</span></code></pre><h3 id="19-燃起图"><a href="#19-燃起图" class="headerlink" title="19. 燃起图"></a>19. 燃起图</h3><ul><li>燃尽图</li></ul><pre><code class="hljs bash">在执行过程中，一个新的Scrum主管加入了敏捷Scrum之后的软件开发项目.他想知道项目的范围，以及到目前为止完成的工作。他首先应该做什么？A. 查看项目范围声明B. 查看燃尽图C. 查看燃起图D. 安排与团队的会议，以了解项目范围和已完成的工作<span class="hljs-comment"># C</span><span class="hljs-comment"># 《敏捷实践指南》，图5-2.燃起图，P63.</span><span class="hljs-comment"># 题干中的关键词是&quot;到目前为止已完成的工作&quot;，</span><span class="hljs-comment"># 而燃起图就是显示一个敏捷项目或者迭代到目前为止已经完成的工作，选项C正确.</span><span class="hljs-comment"># A - 敏捷类型项目的范围是可变的，因此不存在项目范围声明或者类似的项目文件.</span><span class="hljs-comment"># B - 燃尽图和燃起图正好正反，它是显示一个敏捷项目或者迭代到目前为止剩余的工作.</span><span class="hljs-comment"># D - 本身的做法并没有什么错误，但是相较于C，可以直接通过信息发射源获取项目当前状态的方式，</span><span class="hljs-comment">#     选项D的做法相对低效，不符合&quot;尽最大可能减少不必要工作&quot;的敏捷原则.</span></code></pre><pre><code class="hljs bash">作为中型适应型软件开发项目的项目经理，您正在使用一个工具来确定当前迭代中有多少工作需要完成.这里提到了什么工具？A. 燃尽图B. 燃起图C. Why-why 图D. 运行图表<span class="hljs-comment"># A</span><span class="hljs-comment"># 《敏捷实践指南》P62-图5-1.燃尽图.</span><span class="hljs-comment"># 通过燃尽图可以可视化的展示当前迭代中还有多少工作需要完成，选项A正确.</span><span class="hljs-comment"># B - 燃起图显示的是已完成的工作量和总工作量，不正确.</span><span class="hljs-comment"># C - Why-why 图主要是做根本原因分析的工具，所以C在这里不适用.</span><span class="hljs-comment"># D - 运行图评估进程的运行方式，因此 D 不正确.</span></code></pre><pre><code class="hljs bash">以下哪项最能说明燃尽图？A. 表示为发布产品而完成的工作的图表B. 追踪有待完成的工作与时间框内剩余时间的图表C. 表示进度信息的条形图，活动列在纵轴上，日期在横轴上D. 标明主要交付物和关键外部接口的预定开始或完成时间的图表<span class="hljs-comment"># B</span><span class="hljs-comment"># 燃尽图是指剩余工作与时间盒中剩余时间的图形表示.</span></code></pre><pre><code class="hljs bash">一个新的敏捷项目经理正试图确定团队该如何执行一个发布计划的进度.哪种工具可以更深入地了解团队的进展？A. 发布计划系统B. 产品路线图C. 看板D. 燃尽图<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键宇&quot;如何执行一个发布计划的进度&quot;，</span><span class="hljs-comment"># 燃尽图是剩余工作量和剩余时问的进度状态图，可以做偏差分析和趋势分析.</span></code></pre><h3 id="20-敏捷宣言-十二大原则"><a href="#20-敏捷宣言-十二大原则" class="headerlink" title="20. 敏捷宣言-十二大原则"></a>20. 敏捷宣言-十二大原则</h3><pre><code class="hljs bash">以下哪个敏捷原则有助于通过最小化范围蔓延和鼓励只做那些产生业务价值的工作类别来促进消除浪费？A. 可用的软件是衡量进度的首要衡量标准B. 对技术的精益求精以及对设计的不断完善将提高敏捷性C. 简洁，即尽最大可能减少不必要的工作，这是一门艺术D. 项目实施过程中，业务人员与开发人员必须始终通力协作<span class="hljs-comment"># C</span><span class="hljs-comment"># 《敏捷实践指南》，图2.2.《敏捷宣言》十二大原则，P9.</span><span class="hljs-comment"># 题干中的关键词是&quot;最小化&quot;和&quot;消除浪费&quot;，</span><span class="hljs-comment"># 因此十二大原则中的&quot;简洁，即尽最大可能减少不必要的工作&quot;是符合的，</span><span class="hljs-comment"># 也就是专注于产生业务价值的工作，选项C正确.</span></code></pre><pre><code class="hljs bash">一位项目经理被指派发起一个大型项目，以提供复杂的设备.项目的一部分将是一个长期研究过程的结果，但是一旦完成，项目的另一部分必须逐步交付给客户.项目经理应该为这个项目选择哪种方法？A. 敏捷式B. 瀑布式C. 预测式D. 混合型<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">你在一个正在向敏捷工作方式过渡的PMO中工作.该团队遇到了来自领导层的巨大阻力，他们不习惯于适应性的方法.PMO的领导可以做些什么来鼓励采用敏捷工作方式？A. 勇往直前，在新方法被使用时提供及时的培训B. 对项目经理进行各种适应性方法的培训，以帮助其传播信息C. 保持预测性的方法，直到领导层的支持增加D. 使用混合方法，结合预测性和适应性方法<span class="hljs-comment"># D</span><span class="hljs-comment"># 对于那些不熟悉或不习惯这种工作方式的人来说，</span><span class="hljs-comment"># 过渡到敏捷方法可能是困难和混乱的.</span><span class="hljs-comment"># 一种获得采用的方法是开始使用混合方法，结合预测和敏捷方法，</span><span class="hljs-comment"># 作为向团队介绍敏捷的一种手段.</span></code></pre><pre><code class="hljs bash">为了增加不确定的项目的沟通，使用敏捷方法的项目经理可能要做什么？A. 每天进行沟通B. 以数字方式进行临时沟通C. 频繁沟通D. 基于计划的沟通<span class="hljs-comment"># C</span><span class="hljs-comment"># 具有高度模糊性和变化的项目需要频繁和快速的沟通.</span><span class="hljs-comment"># 频繁和透明的沟通是敏捷方法的一个共同特点.</span></code></pre><pre><code class="hljs bash">变更控制委员会(CCB)批准一项重大变更请求，以重新构建某个项目的交付模型，对于正在执行阶段的实施，项目经理必须让预测性规划方法适应敏捷方法.但是，监控和收尾仍将保持预测性。在项目经理开始这个过程之前需要批准什么？A. 让进度计划适应任务排序和关键路径B. 迭代进度计划.适应的用户故事和己完成的定义 (DoD)C. 所有计划迭代的测试用例和责任分配矩阵(RAM)D. 迭代次数并让工作分解结构(WBS)适应第一个末完成项<span class="hljs-comment"># B</span><span class="hljs-comment"># 将原预测型项目交付模型变更为敏捷项目管理，监控和收尾依然采用预测型，</span><span class="hljs-comment"># 那么规划和执行用敏捷项目管理。在预测向敏捷切换前，</span><span class="hljs-comment"># 先确定迭代的进度计划，即第一次迭代计划，以及迭代要开发的内容【用户故事】以及对完成的定义.</span><span class="hljs-comment"># A - 关键路径属于预测方法.</span><span class="hljs-comment"># C - 属于测试的方法.</span><span class="hljs-comment"># D - 没有什么问题，不过从内容上来说比B要少，B可能更加优化.</span></code></pre><pre><code class="hljs bash">在敏捷中，<span class="hljs-string">&quot;T&quot;</span>型人指的是什么？A. 可以承担待办事项工作中任何工作的通才，无论需要何种技能B. 处于职业生涯早期，需要与任务同时进行辅导的人C. 在某一领域有很深的专业性，很少在该领域之外做出贡献的人D. 在某一领域的专业知识中，以相关领域的不发达技能作为补充的人<span class="hljs-comment"># D</span><span class="hljs-comment"># &quot;T&quot;型的人被认为是泛化的专家，他们在某一领域有专长，但也能对其他领域作出贡献.</span><span class="hljs-comment"># &quot;I&quot;形人指的是那些在某-领域有很深的专业性，很少对该领域以外的工作做出贡献的人.</span></code></pre><pre><code class="hljs bash">一家公司转向采用跨职能团队进行项目开发的敏捷方法,并将项目经理分配到关键的项目.项目经理应该如何避免员工辞职的可能性？A. 进行圆桌讨论研讨会和一对一的会议B. 成立一个委员会来确定敏捷方法C. 要求人力资源部门参与该项目以协助员工管理D. 为所有项目团队成员协商更好的工资或项目奖金<span class="hljs-comment"># A</span><span class="hljs-comment"># 本题考敏捷方法内容。敏捷方法强调自组织团队，</span><span class="hljs-comment"># 即团队自我管理，项目经理负责营造氛围，圆桌讨论是敏捷的一个专有术语，</span><span class="hljs-comment"># 意思是在平等和谐的气氛下进行沟通，所以排他选择A.</span></code></pre><pre><code class="hljs bash">在敏捷项目部署期间，客户对可交付成果不满意并要求进行变更.敏捷项目经理下一步应该怎么做？A. 将这些变更添加进问题日志B. 在交付期间整合实施变更C. 在下次评审会议期间纳入这些变更D. 尽可能地限制变更<span class="hljs-comment"># A</span><span class="hljs-comment"># 解析：敏捷实践.</span><span class="hljs-comment"># 敏捷是多次交付，变更驱动的项目管理模式，因此要拥抱变更.</span><span class="hljs-comment"># 因此将问题加入问题日志，然后在下个冲刺开始的时候制定冲刺计划的时候来确定是否变更和排定优先级.</span><span class="hljs-comment"># B - 在敏捷场景里面，对于变更的处理，</span><span class="hljs-comment">#     正确的敏捷实践应该是在下个冲刺开始的时候制定冲刺计划的时候来确定是否变更和排定优先级，</span><span class="hljs-comment">#     而不会像B选项在交付期间直接实施变更.</span><span class="hljs-comment"># C - 在评审会议的时候变更</span><span class="hljs-comment"># D - 敏捷是拥抱变化的，所以不会限制变更，所以它也不是敏捷实践.</span></code></pre><pre><code class="hljs bash">一个项目经理正在努力创造一个产品，一旦通过严格的质量标准，就可以向市场发布.历史上.该公司一直使用预测性的方法，但该公司正在探素实施敏捷方法.公司要求项目经理解释通过使用敏捷过程获得的价值.项目经理应该如何回答？A. 在产品完全发布之前，早期价值是无法实现的B. 早期价值可以通过在初始阶段测试最重要的功能来修复偏差而获得C. 只有当测试版产品可以发布到市场上时，才能获得早期价值D. 只有当可以提高速度向市场发布产品时，才能获得早期价值<span class="hljs-comment"># B</span><span class="hljs-comment"># 关键字&quot;通过使用敏捷过程获得的价值&quot;，</span><span class="hljs-comment"># 敏捷的价值是快速迭代，做最重要的事情，采用检视调整的做法等等，</span><span class="hljs-comment"># 这里只有B符合敏捷的价值的.</span></code></pre><pre><code class="hljs bash">一个组织正在使用混合方法生产一个产品，有几个阶段.有些阶段计划用预测法执行，有些用敏捷法执行.在敏捷阶段，项目经理注意到团队成员有时会不自觉地在同一个任务上工作.项目经理应该怎么做？A. 以明确的方式向团队成员传达任务分配情况B. 确认产品负责人已经明确了任务的分配C. 确认敏捷教练已经明确了任务分配的内容集D. 确认团队成员是否已经明确了任务分配<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键字&quot;项目经理注意到团队成员有时会不自觉地在同一个任务上工作&quot;，</span><span class="hljs-comment"># 根据敏捷团队自组织性，所以确认团队是否明确任务比较妥当.</span></code></pre><pre><code class="hljs bash">一个项目经理刚刚被分配到一个项目，作为一个有经验的敏捷团队的领导.项目经理应该如何影响团队来完成项目目标？A. 表示相信团队有能力完成必要的交付物B. 对团队进行判断C. 使用一个计划驱动的方法，以显示对项目的控制D. 增加主题专家（SMEs） 的数量以获得更好的结果<span class="hljs-comment"># A</span><span class="hljs-comment"># 关键宇&quot;如何影响团队来完成项目目标&quot;，团队的自组织意识需要觉醒，</span><span class="hljs-comment"># 这是教练一个不可回避的责任，所以需要A答案.</span></code></pre><pre><code class="hljs bash">某组织使用预测性方法，但对使用一些敏捷实践持开放态度.项目经理被要求推荐一个敏捷实践，以便在整个项目中提供商业价值.项目经理应该推荐什么？A. 有时间限制的迭代，使测试团队能够彻底测试产品的增量B. 递增式交付和基于用户反馈的频繁的产品待办事项的细化C. 迭代开发和收集项目组成员的频繁反馈D. 频繁的回顾，以确保经验教训和改进行动得到实施<span class="hljs-comment"># B</span><span class="hljs-comment"># 关键字&quot;项目经理被要求推荐一个敏捷实践&quot;，</span><span class="hljs-comment"># 答案B是对敏捷的一种定义，相对于其他的敏捷定义要完整，突出了增量和迭代的特征.</span></code></pre><pre><code class="hljs bash">scrum 团队的成员对使用看板的另一个团队不断有误解，两个团队应该怎么做？A. 通过每个团队的领导沟通，确保达成共识B. 通过使用详细的电子沟通确保记录各种决策C. 让部门负责人标准化单一敏捷方法D. 讨论选择不同方法的理由，并制定一份常见词汇表<span class="hljs-comment"># D</span><span class="hljs-comment"># 在团队内或者团队间沟通很重要，虽然各自持有不同的观点，</span><span class="hljs-comment"># 通过积极主动的沟通，可以互抒己见，求同存异。前三项不符合敏捷思想.</span></code></pre><pre><code class="hljs bash">在一个新建筑的施工项目中，项目经理决定将敏捷原则应用于建筑基础阶段，在与团队一起评估项目进度时，项目经理认为估计不准确.项目经理应该如何解决这个问题？A. 创建一个产品待办事项列表B. 与团队一起进行冲刺审查C. 评估以前的项目速度D. 通过拆分故事来减少故事的大小<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键字&quot;项目经理认为估计不准确&quot;，其实敏捷的估算的确是不准的，</span><span class="hljs-comment"># 估算之所以不准确，是因为需求无法分解到足够的颗粒度导致，因此选择D.</span></code></pre><pre><code class="hljs bash">一个项目经理正在管理两个敏捷团队，并审查他们的指标以找出哪个团队表现更好.应该采取哪种方法?A. 速度较快的团队表现较好，应该得到奖励B. 这个应该在下一次迭代中作为回顾的一部分来解决C. 速度不应该被比较，因为团队可以有不同的项目规模D. 两个团队的速度应该在每个迭代结束时进行比较<span class="hljs-comment"># C</span><span class="hljs-comment"># 敏捷的指标在于进度指标，发觉团队是否有进步，比如速率，生产率等，</span><span class="hljs-comment"># 团队间由于比较的用户故事本身就大小不一, </span><span class="hljs-comment"># 不是个苹果和另一个苹果的关系，因此无法比较团队间的绩效.</span></code></pre><h3 id="21-组织过程资产"><a href="#21-组织过程资产" class="headerlink" title="21. 组织过程资产"></a>21. 组织过程资产</h3><pre><code class="hljs bash">一个大型IT项目接近尾声。由于项目团队正被转派去开展另一个高优先级项目，他们对举行经验教训会议兴趣不大。项目经理该做什么?A. 让项目发起人安排并举行经验教训会议B. 让团队成员通过电子邮件提供关于原有项目的反馈C. 告知项目发起人将不会安排经验教训会议D. 让关键相关方与团队成员一起审核项目可交付成果<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK（6）128，4.7.3.4-组织过程资产更新.</span><span class="hljs-comment"># C - 在收尾阶段，当前项目的经验教训必须总结，所以C选项错误.</span><span class="hljs-comment"># A - 经验教训总结由项目经理负责，所以甩给项目发起人是错误的.</span><span class="hljs-comment"># D - 审核可交付成果是验收过程，在收尾之前.</span></code></pre><pre><code class="hljs bash">为了估算一个与去年实施的项目相似的新项目的成本，项目经理与前一个项目的专家小组会面。该小组使用三点估算技术.项目经理将估算的预算提交给项目发起人批准.新加入公司的项目发起人很担心，因为预算超过了他们的预期.项目经理应该怎么做？A. 回顾去年项目的历史信息和经验教训，以证明新的预算估计的合理性B. 使用软技能来说服项目发起人批准新的预算估计C. 改变预算编制技术，采用更准确的、自下而上的成本估算D. 审查组织流程评估，以确定预算估计中是否考虑了应急储备<span class="hljs-comment"># A</span><span class="hljs-comment"># 《PMBOK》第6版251页，7.3.1.6-组织过程资产.</span><span class="hljs-comment"># 在完成估算时，还需要编制支持文件，在支持文件中，</span><span class="hljs-comment"># 要说明估算结果是如何得出的以及置信空间，供关键相关方进行决策，选项A正确.</span><span class="hljs-comment"># B - 说服要有理有据，并不是只靠软技能就可以的.</span><span class="hljs-comment"># C - 目前存在的问题并不是估算结果偏差较大，而是如何征得关键相关方的认可.</span><span class="hljs-comment"># D - 按照正确的项目管理实践，预算中会包含应急储备.</span></code></pre><h3 id="22-事业环境因素"><a href="#22-事业环境因素" class="headerlink" title="22. 事业环境因素"></a>22. 事业环境因素</h3><pre><code class="hljs bash">项目经理正在制定一个新项目的成本管理计划，该计划基于已批准的项目章程信息.这是一个创新项目，并且该公司过去没有交付过类似的项目.项目经理下一步应该做什么？A. 使用项目章程的可交付成果进行类比估算B. 要求项目团队在公司以外寻找类似项目C. 制定工作分解结构(WBS)以进行自下而上的成本估算D. 制定具有应急储备的预算草案，以应对未知因素<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK（6）237，7.1.1.3-事业环境因素.</span><span class="hljs-comment"># 因为公司之前没有做过类似的项目，所以要到外界去寻找可借鉴的案例.</span><span class="hljs-comment"># ACD - 目前正在制定的是成本管理计划，不是估算成本.</span></code></pre><pre><code class="hljs bash">在项目执行期间，监管团队公布了新的质量标准.更新质量管理计划时，项目经理应该考虑什么？A. 经验教训登记册B. 成本效益分析C. 风险登记册D. 事业环境因素<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK（6）P301-8.3.1.6控制质量-事业环境因素.</span><span class="hljs-comment"># &quot;新的质量标准&quot;属于&quot;特定应用领域的相关规则、标准和指南&quot;这个内容在事业环境因素里.</span><span class="hljs-comment"># A - 经验教训登记册中记录了在项目实施过程当中所收集的经验教训，在项目收尾过程汇入组织过程资产.</span><span class="hljs-comment"># B - 在质量管理领域的成本效益分析主要是用来获取成本投入和质量水平之间的对应关系.</span><span class="hljs-comment"># C - 风险登记册侧重在对项目实施过程当中所面临的不确定性事件进行管理.</span></code></pre><h3 id="23-沟通方法"><a href="#23-沟通方法" class="headerlink" title="23. 沟通方法"></a>23. 沟通方法</h3><ul><li>互动沟通</li></ul><pre><code class="hljs bash">项目经理正管理着一个住宅建设项目，在将项目管理计划提交给有关的相关方之前，项目经理希望与作为相关负责人的土木工程师、提供商和承包商沟通，尽力确保施工材料能够准备好并如期运到工地.在这种情况下，项目经理应运用哪种沟通技能?A. 互动沟通B. 推式沟通C. 拉式沟通D. 小组沟通<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK（6）P374，10.1.2.5-沟通方法-互动沟通.</span><span class="hljs-comment"># &quot;尽力确保施工材料能够准备好并如期运到工地&quot;，需要对信息进行确认，所以宜采用交互式沟通.</span><span class="hljs-comment"># B - 推式沟通能保证信息的发送，但是不能保证信息的接收.</span><span class="hljs-comment"># C - 拉式沟通适用于对大量信息的获取.</span><span class="hljs-comment"># D - 小组沟通通常在3-6人的小组内部展开，不要认为&quot;土木工程师、提供商、承包商&quot;是3个人，</span><span class="hljs-comment">#     其实是3个身份群组，人数可能在6个人以上.</span></code></pre><pre><code class="hljs bash">一家公司已经同意使用敏捷方法运行一个转型项目.在实施过程中，有来自职能部门的反馈认为项目进展太快了.项目经理在项目开始时应该做什么来防止这种情况的发生？A. 传阅项目章程B. 评估组织文化C. 确定员工的成孰度D. 沟通项目进度计划<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键字&quot;进展太快&quot;，可能是对项目的进度不了解导致，</span><span class="hljs-comment"># 因此厲于沟通题，需要查看—下沟通计划并进行项目计划的沟通工作.</span></code></pre><h3 id="24-责任分配矩阵"><a href="#24-责任分配矩阵" class="headerlink" title="24. 责任分配矩阵"></a>24. 责任分配矩阵</h3><pre><code class="hljs bash">在一次项目绩效审查会议上，两名团队成员意识到他们一直在进行相同的技术设计.两位团队成员都说该设计符合他们的工作描述，希望对方停止开展该设计方面的工作.争执开始升级，项目经理要快速控制形势.项目经理应该做什么来解决这一问题？A. 安排与两位团队成员举行私人会议讨论该问题B. 查看职位描述，以确定孰是孰非C. 审查责任分配矩阵(RAM) D. 将该任务分配给完成比例更高的团队成员<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK（6）P317，9.1.2.2-规划资源管理-责任分配矩阵.</span><span class="hljs-comment"># 情景容易造成误判，会被引导至冲突管理题型.</span><span class="hljs-comment"># 注意，情景中导致问题发生的根源是工作内容上存在重叠，</span><span class="hljs-comment"># 所以要首先对问题进行分析，然后根据分析结果做出决策.</span><span class="hljs-comment"># 在导致问题的根源没有弄清楚之前，对冲突采取强迫、妥协还是缓和都是治标不治本.</span></code></pre><h3 id="25-监督风险"><a href="#25-监督风险" class="headerlink" title="25. 监督风险"></a>25. 监督风险</h3><pre><code class="hljs bash">作为项目经理，您正在管理一个项目，该项目有来自外部供应商的14个可交付成果.一个供应商一直在与合作伙伴谈判以获得更多融资，如果他们不同意，可能会导致供应商停止生产您的一个可交付成果？有传言说供应商的工厂将因这个问题而关闭.您应该采取的最佳行动方案是什么？A. 联系供应商并讨论这个问题B. 开始联系其他供应商作为备用计划C. 一找到供应商就更换供应商D. 启动为此供应商创建的风险应对计划<span class="hljs-comment"># A</span><span class="hljs-comment"># 《PMBOK》第6版453页，11.7-监督风险.</span><span class="hljs-comment"># 注意，情景中用到的是&quot;传言&quot;和&quot;可能&quot;，</span><span class="hljs-comment"># 也就是说供应商的问题亦真亦假，存在着不确定性，属于风险事件.</span><span class="hljs-comment"># 要想对风险进行有效的管理，需要基于对风险的了解和理解，因此选项A是正确的.</span><span class="hljs-comment"># BCD - 是否启动对现供应商的替代或者应对计划，</span><span class="hljs-comment">#       要基于对这个风险事件的分析评估的结果，在选项A之后.</span></code></pre><pre><code class="hljs bash">在项目执行阶段，风险责任人正在监督一款动力发动机的临界速率，该速率最终会触发已定义的风险应对策略.在风险评估和管理过程阶段中，该款动力发动机被确定具有以下特征：1,600rpm(每分钟转速)→停止工作，系统崩溃.1,500rpm(每分钟转速)→允许的最大速率警告,1,400rpm(每分钟转速)→降低功率，对发动机进行制动操作. 以下哪项表述正确？A. 1,600rpm是项目问题；1,500rpm是会触发应对策略的事件；及1,400rpm是项目风险B. 1,600rpm是项目问题；1,500rpm是项目风险；及1,400rpm是会触发应对策略的事件C. 1,600rpm是会触发应对策略的事件；1,500rpm是项目问题；及1,400rpm是项目风险D. 1,600rpm是项目风险；1,500rpm是会触发应对策略的事件；及1,400rpm是项目问题<span class="hljs-comment"># B</span><span class="hljs-comment"># 《PMBOK》第6版395页，第11章-项目风险管理.</span><span class="hljs-comment"># 非常有难度的一道题目，同学们可能会感觉到陌生。</span><span class="hljs-comment"># 发动机在1,400rpm时，就需要引起警觉，所以1,400rpm是会触发应对策略的事件.</span><span class="hljs-comment"># 当发动机转速达到1,500rpm时，达到风险临界值，如果不进行干预，会造成损失.</span><span class="hljs-comment"># 所以发动机转速1,500rpm是风险.</span><span class="hljs-comment"># 当发动机转速达到1,600rpm时，发动机停转、系统崩溃，之前不确定的事件（发动机损坏）成真了.</span><span class="hljs-comment"># 所以发动机转速1,600rpm是问题，选项B正确.</span></code></pre><pre><code class="hljs bash">公司聘用一名项目经理来协调个期限紧迫的敏捷项目，项目经理和敏捷团队都由一位项目组合经理管理，该项目组合经理倾向于根据需要将开发人员重新分配给其他紧急事项，当项目经理与其接洽时，项目组合经理坚持认为他们有权根据需要调动资源，项目经理应该怎么做？A. 将此问题提升为问题日志中的问题B. 更新风险登记册C. 将此问题升级上报给项目组合经理的主管D. 请求额外的资源<span class="hljs-comment"># B</span><span class="hljs-comment"># 关键字&quot;项目组合经理坚持认为他们有权根据需要调动资源&quot;，</span><span class="hljs-comment"># 相关方的错误认识将可能给项目带来麻烦，是潜在的(尚末发生问题），</span><span class="hljs-comment"># 更像风险而不是问题。所以A更新问题日志不妥.</span><span class="hljs-comment"># C或D如果要采取具体措施也是在B之后的事情.</span></code></pre><pre><code class="hljs bash">在一个有虚拟团队的多国多地的项目中，项目经理已经建立了一个项目基线.项目经理发现一些风险因素已经出现.而项目经理在项目的计划阶段并没有预见到这些风险.项目经理应该如何计算以解决这个关键的预算情况？(选择两个）A. 项目中的应急控制和重新设定基准线B. 项目中的減轻控制C. 项目中的效益管理控制D. 项目中的综合变更控制E. 货币兑换率<span class="hljs-comment"># AD</span><span class="hljs-comment"># 关键宇&quot;发现一些风险因素已经出现&quot;且&quot;并没有预见到这些风险&quot;，</span><span class="hljs-comment"># 说明此题是风险管理的识别风险的部分，那么需要风险管理过程来进行应对，</span><span class="hljs-comment"># 所以选择AD比较优化；其中A中的重新设定基线，</span><span class="hljs-comment"># 由于之前没有预见风险，则视为未知的未知风险，</span><span class="hljs-comment"># 可能未来需要管理储备进行管理，重设基线也说得过去；</span><span class="hljs-comment"># 而CE相比较都是明显错误的答案；B可能也是正确的，属于风险应对规划阶段.</span></code></pre><pre><code class="hljs bash">一个项目经理在执行一个项目时，项目组的一个关键成员需要请一个意外的长期假期，该项目比计划提前，并在预算内运行。项目经理最初应该采取哪两个行动来解决这个？（选择两个）A. 检查风险登记册，看是否准备好应对资源突然不可用的情况B. 检查团队成员的活动是否有充分的文件记录，以便于交接C. 检查项目的责任分配矩阵 (RAM)，以确定哪些活动将受到影响D. 利用现有的浮动培训，重新分配其余成员的责任E. 获得项目发起人的支持，替换休假的团队成员<span class="hljs-comment"># AC</span><span class="hljs-comment"># 关键字&quot;关键成员需要请一个意外的长期假期&quot;,&quot;计划提前和预算运行&quot;，</span><span class="hljs-comment"># 所以直接感觉是当风险发生的应对来处理，所以AC比较优化</span><span class="hljs-comment"># A  - 属于风险应对措施.</span><span class="hljs-comment"># C  - 是查看活动受到的影响.</span><span class="hljs-comment"># BD - 属于具体的应对，应该在A之后的步骤.</span><span class="hljs-comment"># E  - 麻烦发起人了.</span></code></pre><pre><code class="hljs bash">公司总裁担心一次自然灾害对公司的影响，管理层应该如何识别需要应用其他资源并减轻潜在影响的领域？A. 制定并保留一份积极的风险登记册，包含风险减轻策略和成本收益分析B. 根据定性风险分析，制定并保留一份积极的风险登记册C. 让每个开发团队在信息看板上登记最高风险项D. 通过将开发团队分割成两个地方规避风险，确保知识持续性<span class="hljs-comment"># C</span><span class="hljs-comment"># 敏捷最大风险管理特点就是公开.</span></code></pre><pre><code class="hljs bash">一个团队一直在持续交付成果。然而，根据他们目前的表现，发现他们的速度已经下降了30%.项目经理应该做什么来确保速度在控制之下？A. 要求产品负责人至少看四到八个迭代，并根据团队目前的表现，重新规划下一个迭代的速度B. 要求scrum master通过增加一个团队成员来弥补团队绩效的差距，以弥补速度的下降C. 要求团队改善他们的周期时间以弥补速度的下降D. 要求团队单独改善准备时间、周期时间和个人响应时间，并跟踪结束<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键字&quot;根据他们目前的表现，发现他们的速度已经下降了30%&quot;，</span><span class="hljs-comment"># 说明是团队绩效下降了，需要采用改进措施来进行绩效提升.</span><span class="hljs-comment"># A - 重新规划迭代的速度不可取，因为是团队的速度自己下降，题目并没有提到外因，</span><span class="hljs-comment">#     所以要纠正的是团队而不是降低速度.</span><span class="hljs-comment"># B - 加人通常不是什么正确答案，而且敏捷的加人会导致团队容量增加，速度也会被要求提高.</span><span class="hljs-comment"># C - 其实也可以的，不过从字面意义没有D来得优化.</span></code></pre><h3 id="26-建设团队"><a href="#26-建设团队" class="headerlink" title="26. 建设团队"></a>26. 建设团队</h3><pre><code class="hljs bash">在一个项目的第三次迭代中，两个现有的团队成员被替换.当项目进入下一个迭代时，团队的速度下降，业绩开始下滑.项目经理应该怎么做？A. 与人力资源部门讨论生产力下降的问题B. 将这个问题上报给项目发起人C. 引导团队重新回到组建和震荡阶段D. 召开团队建设活动，解决关键绩效指标（KPI）<span class="hljs-comment"># C</span><span class="hljs-comment"># 《PMBOK》第6版336页，9.4-建设团队.</span><span class="hljs-comment"># 一道考察大家对资源管理工具的细微差别理解的题目。</span><span class="hljs-comment"># &quot;两名现有团队成员被取而代之&quot;，有两位资源被释放（此释放非彼释放），</span><span class="hljs-comment"># 同时又加入了两位新的资源. </span><span class="hljs-comment"># 新加入的资源同被释放的资源与原有团队的协作程度和融洽关系必然存在着区别，</span><span class="hljs-comment"># 而协作程度和融洽关系会直接影响到项目的绩效，因为这两者会放大团队成员的个人能力差距.</span><span class="hljs-comment"># 所以，若想改善团队绩效，就需要从团队的协作程度和融洽关系入手，最好的办法就是选项C，</span><span class="hljs-comment"># 重新认识团队成员、理解项目的目标和冲刺的任务，开始新加入成员和原有团队之间的磨合.</span><span class="hljs-comment"># A - 项目经理担负团队的管理责任，而非人力资源部门.</span><span class="hljs-comment"># B - 执行阶段，项目发起人不宜介入微观管理.</span><span class="hljs-comment"># D - 这道题目里面最难排除的一个选项就是团队建设，</span><span class="hljs-comment">#     很多同学选择了这个答案。团队建设采用在非正式场合的社交方式，来改善团队的氛围，</span><span class="hljs-comment">#     侧重于改善团队紧张情绪，但是对团队成员之间相互协作的影响作用偏弱，所以不选.</span></code></pre><pre><code class="hljs bash">一个新的敏捷团队在完成任务时遇到困难.团队中出现了很多纠纷。在这种情况下，敏捷领导应该怎么做？A. 将上报给团队的经理B. 撤掉一些团队成员C. 审查角色和责任文件D. 与团队制定工作协议<span class="hljs-comment"># C</span><span class="hljs-comment"># 关键字&quot;完成任务时遇到困难&quot;, &quot;团队中出现了很多纠纷&quot;，</span><span class="hljs-comment"># 这需要团队章程对个人的行为进行规范，不过没有这个答案，</span><span class="hljs-comment"># 只能退而求其次查看角色和职责文件.</span><span class="hljs-comment"># D - 的工作协议不是团队章程，更像是和个人签订的合同之类的文件.</span></code></pre><pre><code class="hljs bash">在一个敏捷项目中，项目经理注意到一个团队成员在日常检查中很少报告阻碍因素.此外，这个团队成员很害羞，不愿意参加团队活动，更愿意单独向项目经理提供状态更新。项目经理应该如何纠正这种情況？A. 审查团队文化和个人的个性特征，以解决状态更新的差距B. 为状态更新创造一个安全的空间，鼓励团队接近项目经理C. 更彻底地审查团队的状态更新，以解決差距D. 支持团队的融入，将状态更新的格式改为电子邮件<span class="hljs-comment"># B</span><span class="hljs-comment"># 关键宇&quot;这个团队成员很害羞&quot;，要解决害羞问题，需要进行团建活动，B是最优答案.</span><span class="hljs-comment"># A  - 的目的仅仅是为了做状态更新.</span><span class="hljs-comment"># CD - 同理A，仅仅针对状态更新而不解决害羞问题，因此都不可取.</span></code></pre><pre><code class="hljs bash">在一次团队会议上，属于主题专家（SMEs） 的成员提到他们不断为重复任务工作，导致工作士气下降，敏捷项目管理师应该怎么做？A. 组织一次团队建设活动，提高团队士气B. 让团队成员结对工作，互相学习，并研究新技术C. 让团队成员执行其活动的价值流分析D. 为团队添加更多资源，鼓励完成任务<span class="hljs-comment"># B</span><span class="hljs-comment"># 改进工作过程是 SM 的职责之一.</span><span class="hljs-comment"># A - 可能如果是传统项目的选择，他可以提高士气，但是如果有重复的工作的话还是解决不了，</span><span class="hljs-comment"># 而相对而言 B 更合适，因为 scrum 主管的职责之一就是帮助团队进行改进，所以B更合适.</span></code></pre><pre><code class="hljs bash">你是Subzero Delights公司的一名项目经理，该公司为旅行者提供非凡的体验.你的最新项目涉及开发一个智能手机应用程序，该程序可以自动获取客户的GPS坐标，以提供量身定制的资源和建议。你选择了一种混合的方法来管理这个项目，而这个团队现在已经深入到使用一个月的迭代来执行项目工作.自从执行活动开始以来，该项目在团队成员中一直充斥着各种问题一从意见分歧到糟糕的会议礼仪. 什么原因可能导致这些问题？A. 团队成员之间存在个性冲突B. 团队仍处于形成阶段C. 基本规则还没有建立D. 混合方法对团队不起作用<span class="hljs-comment"># C</span><span class="hljs-comment"># 基本规则指的是团队对他们要表现出的可接受行为所建立的期望.</span><span class="hljs-comment"># 基本规则通常作为团队章程的一部分. 它们成为管理利益相关者参与时的重要工具.</span></code></pre><pre><code class="hljs bash">来自不同公司现场的两个敏捷团队需要在同一个项目上工作和协作.若要确保两个团队之间的顺畅合作，敏捷项目经理应该采取的第一个行动是什么?A. 组织待办事项改进研讨会以确保达成共识B. 建立每周会议，所有团队成员都参加C. 请产品负责人组织一场团队建设活动D. 召开现场会议，讨论并商定基本规则<span class="hljs-comment"># D</span><span class="hljs-comment"># 来自不同公司现场的两个敏捷团队即分步式团队：在不同地点拥有多个跨职能团队.</span><span class="hljs-comment"># 在A/B/C/D四个选项中，D选项相对更合适，面对面沟通确定规则，保证接下来的流程顺畅.</span></code></pre><h3 id="27-虚拟团队"><a href="#27-虚拟团队" class="headerlink" title="27. 虚拟团队"></a>27. 虚拟团队</h3><pre><code class="hljs bash">项目经理在启动一个新的虚拟团队时应该考虑哪两个行动？(选择两个)A. 评估自己作为虚拟团队领导者的优势和劣势，以确定可避免的陷阱B. 确定每个工作包或活动所需资源的类型和数量C. 在组织内招募最好的资源来成为虚拟团队的一部分D. 核实团队成员是否在一个以上的团队中，是否能为这个团队投入足够的时间E. 在一开始就确定如何监测进展和沟通进展的最佳手段<span class="hljs-comment"># BE</span><span class="hljs-comment"># 《PMBOK》第6版333页，9.3.2.4-虚拟团队.</span><span class="hljs-comment"># 当团队成员不能处于同一物理位置，又需要协作的时候，可以考虑组建虚拟团队，</span><span class="hljs-comment"># 虚拟团队需要首先考虑沟通技术，也就是说，既然这些团队成员不能面对面的沟通，</span><span class="hljs-comment"># 再失去了通过远程沟通能力的话，协作也就无从谈起了，所以E选项正确.</span><span class="hljs-comment"># A - 评估一个虚拟团队如何运转的时候，应该是从团队绩效的视角来评估，而不是从项目经理的个人利益，排除.</span><span class="hljs-comment"># B - 组建虚拟团队的目的在于完成计划好的工作，所以需要根据计划来评估吸纳哪些资源进入虚拟团队，正确.</span><span class="hljs-comment"># C - 完成计划好的工作，不一定必须依赖组织中最优秀的资源，</span><span class="hljs-comment">#     而且在项目管理实战中，即便我们列出了高等级的资源要求，也免不了要和职能经理讨价还价，排除.</span><span class="hljs-comment"># D - 在预测型生命周期中，我们无法规避某一个团队成员的时间被数个项目占据，</span><span class="hljs-comment">#     题目没有说明是预测型还是敏捷型，所以D选项的评估没有意义.</span></code></pre><h3 id="28-冲突管理"><a href="#28-冲突管理" class="headerlink" title="28. 冲突管理"></a>28. 冲突管理</h3><pre><code class="hljs bash">项目经理观察到，两个团队成员在会议上公开争吵.为了推动他们的想法，每个团队成员都单独与发起人直接对话，并在没有通知项目经理或其他团队成员的情况下做出决定.项目经理应该采取哪两个行动？(选择两项）A. 直接与他们的经理讨论这种行为，要求他们纠正这种行为B. 与每个团队成员一起解决该行为问题C. 要求团队成员自己解决这个问题D. 与其他项目经理讨论这种情况并征求意见E. 在下次会议上重申基本规则，确保所有团队成员都清楚这些规则<span class="hljs-comment"># BE</span><span class="hljs-comment"># 《PMBOK》第6版348页，9.5.2.1-冲突管理.</span><span class="hljs-comment"># A - 项目所需资源进入项目组后，管理责任就转移给了项目经理，项目经理应优先主动解决问题.</span><span class="hljs-comment"># B - 采取公开面对的方式来应对冲突，是正确的处理策略.</span><span class="hljs-comment"># C - 采用了撤退的策略，一方面问题得不到解决，另外一方面也与项目经理的职责相违背.</span><span class="hljs-comment"># D - 没有提到其他项目经理且项目经理应优先主动解决问题, 排除.</span><span class="hljs-comment"># E - 提前约定基本规则，是正确的决策.</span></code></pre><pre><code class="hljs bash">项目执行期间，在每次项目团队会议上，项目经理与其中一位团队成员总会发生冲突.持续不断的冲突正在妨碍各项任务和可交付成果，使其无法完成，项目经理考虑改变其领导风格，项目经理应该做什么？A. 查阅人员技能文档B. 查看团队成员的职责C. 回避该团队成员，以防发生进一步的冲突D. 将情况上报至项目发起人<span class="hljs-comment"># C</span><span class="hljs-comment"># 《PMBOK》第6版348页，9.5.2.1-冲突管理.</span><span class="hljs-comment"># 在我们以往接触过的考察冲突管理的题目中，项目经理通常需要处理的两位团队成员之间的冲突，</span><span class="hljs-comment"># 但是在当前的场景中，项目经理也成为了冲突中的一员，又该如何处理？</span><span class="hljs-comment"># 该怎么处理就怎么处理，大胆选择。</span><span class="hljs-comment"># 4个选项中唯有选项C是冲突解决办法，所以C选项正确.</span><span class="hljs-comment"># AB - 并未提到是由于技能、职责和角色所导致的冲突.</span><span class="hljs-comment"># D  - 在执行阶段，尽量不要让发起人陷入微观管理.</span></code></pre><pre><code class="hljs bash">在一个混合型项目中，项目经理正作为敏捷专家开展工作，对团队成员之间的冲突予以处理，项目经理应采用什么样的策略处理这种冲突？A. 将冲突列入共享的冲突列表，确保大家都能看到该列表B. 将冲突分为两类：积极的和消极的C. 将冲突分为两类：结构方面的和人际关系方面的D. 在每日Scrum会议期间审查相关冲突，以便它们能够得到及时处理<span class="hljs-comment"># B</span><span class="hljs-comment"># 《PMBOK》第6版348页，9.5.2.1-冲突管理.</span><span class="hljs-comment"># 在项目实施过程中，冲突是无法避免的。因为资源占用、进度安排、个人风格等均会导致冲突的发生.</span><span class="hljs-comment"># 对于冲突，项目经理不应抱有畏惧心理，管理得当的冲突有助于团队成员间思维的对撞，</span><span class="hljs-comment"># 进而找出更加有效的解决方案。对于冲突，要将其分为建设性冲突（积极的）和破坏性冲突（消极的），</span><span class="hljs-comment"># 对于建设性冲突，项目经理要设法推动和促进，</span><span class="hljs-comment"># 而对于破坏性冲突，要在破坏团队稳定关系前进行主动干预，因此选项B正确.</span><span class="hljs-comment"># A - 没有冲突列表.</span><span class="hljs-comment"># C - 分类方法有误，而且因为人际关系所引发的冲突要远远少于资源占用和进度安排.</span><span class="hljs-comment"># D - 每日站会期间只暴露问题，不展开对问题的讨论.</span></code></pre><pre><code class="hljs bash">一个项目经理正在主持一个会议，为即将到来的迭代进一步定义用户故事.在会议开始的时候，有两个团队成员，Bob和Jenny，非常有发言权，Jenny热情地指出，第二个用户故事应该被推迟到一个迭代.她继续讨论下一个用户故事，无视鲍勃对这个话题的反对意见.鲍勃迟疑地接受了这个決定，并在会议的剩余时问里保持沅默，接受了珍妮和团队其他成员的其他決定. 在会议结束时，项目经理告诉鲍勃，她将把2号用户故事放在产品待办列表的首位，如果能力允许的话，将把它拉到迭代中.在这种情况下，项目经理使用了以下哪种解决冲突的方法？A. 平滑化B. 妥协C. 引导D. 协作<span class="hljs-comment"># B</span><span class="hljs-comment"># 在会议结束时，项目经理采取了妥协的方式，也被称为调和.</span><span class="hljs-comment"># 这是指一个人试图使所有各方在一定程度上满意，以部分解决冲突.</span><span class="hljs-comment"># 项目经理的做法是通过提高2号用户故事的优先级，并允许它被拉入迭代的可能性.</span></code></pre><h3 id="29-采购审计"><a href="#29-采购审计" class="headerlink" title="29. 采购审计"></a>29. 采购审计</h3><pre><code class="hljs bash">在一个有众多供应商的项目结束时，项目经理审核了结束流程，结果意外发现尚有财务结余.以下哪项有助于项目经理理解为何会出现这种情祝？A. 经验教训B. 采购审计C. 组织过程资产D. 项目审计<span class="hljs-comment"># B</span><span class="hljs-comment"># 《PMBOK》第6版498页，12.3.2.5-采购审计.</span><span class="hljs-comment"># 此次采购的过程是较为理想的，成本不仅没有超支甚至出现了结余，</span><span class="hljs-comment"># 那么在此次采购过程中，哪些环节有所改善进而影响了采购的绩效，</span><span class="hljs-comment"># 就可以通过针对采购的结构化审查来总结经验教训，既采购审计，所以B正确.</span><span class="hljs-comment"># A - 经验教训的增加来源于采购审计的结果.</span><span class="hljs-comment"># C - 经验教训在项目收尾阶段汇入组织过程资产，所以AC选项均在B选项之后.</span><span class="hljs-comment"># D - 项目审计是在项目收尾阶段对项目实施的结构化审查，</span><span class="hljs-comment">#     例如对比项目在立项时设定的预期收益和交付后所获得的实际价值，从而优化组织层面的决策水平.</span></code></pre><h3 id="30-根本原因分析"><a href="#30-根本原因分析" class="headerlink" title="30. 根本原因分析"></a>30. 根本原因分析</h3><pre><code class="hljs bash">一个大型的、多年的、工业项目的项目经理有一个项目，有来自不同地域的多样化的利益相关方.最近，该项目经理遇到了利益相关者参与方面的问题.项目经理应该使用哪两个工具来确定参与没有达到计划效果的根本原因？(请选择两项）A. 开放空间会议B. 问题记录C. 石川图D. 五个为什么E. 沟通管理计划<span class="hljs-comment"># CD</span><span class="hljs-comment"># 《PMBOK》第6版533页，13.4.2.1-根本原因分析.</span><span class="hljs-comment"># 在相关方参与效果没有达到期望要求时，应开展根本原因分析，确定相关方参与未达预期效果的根本原因.</span><span class="hljs-comment"># &quot;五个为什么&quot;是丰田公司创始人丰田章一于20世纪30年代提出的，</span><span class="hljs-comment"># 后经《丰田生产方式》进入管理学的工具箱.</span><span class="hljs-comment"># &quot;五个为什么&quot;通过连续的&quot;为什么&quot;来倒逼问题的真相，</span><span class="hljs-comment"># 找出导致问题发生的根本原因，在组织内部形成解决问题的企业文化，</span><span class="hljs-comment"># 因此，选项D是可以找出没有达到计划效果的根本原因的.</span><span class="hljs-comment"># 选项C因果图是寻找根本原因、核心原因，最常用的工具。因此CD两个选项正确.</span></code></pre><h3 id="31-监督沟通"><a href="#31-监督沟通" class="headerlink" title="31. 监督沟通"></a>31. 监督沟通</h3><pre><code class="hljs bash">一些行业的利益相关者喜欢直接与程序员和系统分析员打交道，绕过项目经理. 这使得项目的资源管理变得复杂.项目经理应该如何解决这个问题？A. 要求与高级管理层会面，将情况升级B. 建议实施一个新的项目管理信息系统（PMIS）C. 举办一个团队建设活动，以培养团队的凝聚力和改善沟通D. 与项目团队一起促进沟通管理计划的采用<span class="hljs-comment"># D</span><span class="hljs-comment"># 《PMBOK》第6版388页，10.3-监督沟通.</span><span class="hljs-comment"># &quot;绕过项目经理&quot;，之前制定的沟通管理计划无法得以执行，</span><span class="hljs-comment"># 因此需要重申沟通管理计划的重要性，选项D正确.</span><span class="hljs-comment"># A - 项目经理应该优先尝试自行解决问题，</span><span class="hljs-comment">#     再者如果关键相关方对项目的实施真的造成了严重的困扰，</span><span class="hljs-comment">#     应该是向项目发起人寻求帮助（项目治理结构）.</span><span class="hljs-comment"># B - PMIS属于工具，单靠工具而不是从根源上入手，是无法彻底解决问题的.</span><span class="hljs-comment"># C - 问题并没有出在团队资源的管理上.</span></code></pre><pre><code class="hljs bash">一位项目经理与一个全球虚拟团队一起工作.该团队面临着相互沟通的困难，经常错过重要信息.这种困难导致错过最后期限。项目经理应该做什么来提高项目团队的效率？A. 实施团队集中办公以改善沟通B. 找出沟通问题的根本原因C. 启动项目进展的日常沟通D. 安排一次沟通控制委员会会议<span class="hljs-comment"># B</span><span class="hljs-comment"># 《PMBOK》第6版388页，10.3-监督沟通.</span><span class="hljs-comment"># 虚拟团队的管理在日常工作中是个难点，既要避免沟通的冷场，</span><span class="hljs-comment"># 又要抑制无效信息在沟通渠道中的泛滥，所以当沟通受阻时，</span><span class="hljs-comment"># 肩负着管理责任的项目经理要找出沟通障碍出现的根本原因并加以解决，选项B正确.</span><span class="hljs-comment"># A - 全球团队，在同一物理地点办公属实有难度.</span><span class="hljs-comment"># C - 虚拟团队的沟通不仅仅局限于项目进展.</span><span class="hljs-comment"># D - 没有沟通控制委员会这个名词.</span></code></pre><pre><code class="hljs bash">在对某国际公司进行文档审计期间，审计人员发现，最新版本的项目进度计划还是一个月前的版本，尽管项目经理知道项目进度计划最近已经更新，项目经理本应如何处理项目文档？A. 将文档存入项目管理信息系统(PMIS),并与适当的相关方分享B. 查阅风险登记册，以确定审计的应对计划C. 指派一名项目团队成员，以确保所有项目文档都得到更新D. 定期更新项目管理计划，并以安全的方式将之分享给所有相关方<span class="hljs-comment"># A</span><span class="hljs-comment"># 《PMBOK》第6版388页，10.3-监督沟通.</span><span class="hljs-comment"># 审计人员发现了文档未做到及时的更新，要针对审计的结果尽快做出响应，</span><span class="hljs-comment"># 将文档上传至具有文件文档存储能力的项目信息管理系统，即PMIS.</span><span class="hljs-comment"># 同时，在控制文档的查阅权限时，要根据沟通管理计划进行对应的设置，A选项正确.</span><span class="hljs-comment"># B - 场景描述中没有提及文档未及时更新之前被识别为一项风险，</span><span class="hljs-comment">#     所以现在它属于问题，记录在问题日志，进行后续的跟踪解决.</span><span class="hljs-comment"># C - 项目的进度计划不仅仅是更新的问题，还涉及向关键的相关方进行同步，</span><span class="hljs-comment">#     且在项目经理手里的进度计划已经是最新版.</span><span class="hljs-comment"># D - 分享给所有的相关方就错了，对于信息的获取存在着权限差异.</span></code></pre><pre><code class="hljs bash">一个敏捷的高级项目组成员突然从组织中辞职.在这次离开后，剩下的团队成员在获取信息方面遇到困难，无法完成一项可交付成果。项目经理接下来应该做什么？A. 确保了项目信息库是最新的B. 更新了所有团队角色的工作描述C. 为所有团队成员提供了专业培训D. 努力重新雇用高级项目组成员<span class="hljs-comment"># A</span><span class="hljs-comment"># 关键字&quot;剩下的团队成员在获取信息方面遇到困难&quot;，</span><span class="hljs-comment"># 属于沟通范畴的问题，排除法可以得出A答案;</span><span class="hljs-comment"># B - 的职责描述</span><span class="hljs-comment"># C - 培训</span><span class="hljs-comment"># D - 雇佣新成员和获取信息没有关系</span></code></pre><h3 id="32-结束项目或阶段"><a href="#32-结束项目或阶段" class="headerlink" title="32. 结束项目或阶段"></a>32. 结束项目或阶段</h3><pre><code class="hljs bash">在一个有不同国家的特定用户的项目完成后，项目经理的主管询问项目用户是否对项目的运行方式感到满意.项目经理应该采取哪两个行动？(选择两项）A. 向项目参与者发送一份调查问卷，征求他们的反馈B. 准备好项目阶段的经验教训C. 将项目材料交付给用户，看他们是否有意见D. 获得各国对新流程的正式批准.E. 参照沟通管理计划<span class="hljs-comment"># AE</span><span class="hljs-comment"># 《PMBOK》第6版123页，4.7-结束项目或阶段.</span><span class="hljs-comment"># 这是一道涉及到收尾过程的题目，题目考察的是项目经理要如何对项目相关方进行满意度调查.</span><span class="hljs-comment"># 如果被访问的相关方数量较多、调查的内容趋于统一固定的话，</span><span class="hljs-comment"># 就可以采用问卷调查的方式完成快速收集和汇总，选项A正确.</span><span class="hljs-comment"># 在这个过程中，涉及到了信息的传递，所以要遵循沟通管理计划，选项E正确.</span><span class="hljs-comment"># B - 总结经验教训是收尾阶段的步骤之一，但题目考察的是相关方满意度，此题不选.</span><span class="hljs-comment"># C - 首先用户是否具有查看所有项目材料的权限就值得商榷，</span><span class="hljs-comment">#     另外这种开放式的提问会产生非常大的工作量.</span><span class="hljs-comment"># D - 没有提到所谓的新流程，排除.</span></code></pre><h3 id="33-监督相关方参与"><a href="#33-监督相关方参与" class="headerlink" title="33. 监督相关方参与"></a>33. 监督相关方参与</h3><pre><code class="hljs bash">一位关键的项目相关方在一个复杂的敏捷项目开始时就表现出兴趣，但随着冲刺的推进，由于需要承担额外职责，该关健相关方参与度下降.几个冲刺过后，该关健相关方拒绝了一项功能方面的可交付成果.下一个冲刺期间，团队需要对被拒绝的可交付成果进行返工，项目经理本应采取什么措施来避免发生这种情况？A. 记录项目愿景和目标B. 分析相关方属性中的变化C. 让关键相关方参与决策过程D. 根据相关方的需要对相关方沟通进行定制<span class="hljs-comment"># B</span><span class="hljs-comment"># 《PMBOK》第6版530页，13.4-监督相关方参与.</span><span class="hljs-comment"># 非常典型的相关方在项目实施过程种的变化.</span><span class="hljs-comment"># 做为项目相关方，在项目启动阶段，通常会表现的比较积极和乐观，</span><span class="hljs-comment"># 但是随着不断的将资源投入到项目中，相关方对于项目的态度会发生变化，</span><span class="hljs-comment"># 会因为见到资源的日益消耗，对项目的态度由积极转变为消极甚至抵制.</span><span class="hljs-comment"># 相关方所发生的这些变化，在对相关方进行管理时要进行定期的跟踪和分析，</span><span class="hljs-comment"># 进而调整调动相关方参与项目的策略，选项B正确.</span><span class="hljs-comment"># A - 项目的目标和愿景即使不发生变化，相关方对于项目的态度仍然会发生变化.</span><span class="hljs-comment"># C - 越让关键相关方参与到决策过程越容易诱发相关方态度上的变化，</span><span class="hljs-comment">#     因为在决策的过程中可以看到资源的投入与消耗.</span><span class="hljs-comment"># D - 导致问题的根源不在于沟通不畅.</span></code></pre><h3 id="34-回顾"><a href="#34-回顾" class="headerlink" title="34. 回顾"></a>34. 回顾</h3><pre><code class="hljs bash">某项目团队在完成某任务时发生延误，而结果证明该任务比预估的更加复杂.该任务非常重要，可能会对当前的迭代目标造成影响，以下哪两个方案将有助于团队最初克服该障碍的努力？（选择两项）A. 进行根本原因分析B. 审查并更新依赖关系C. 创建风险管理计划D. 将该问题上报给项目发起人E. 举行回顾会议<span class="hljs-comment"># AE</span><span class="hljs-comment"># 《敏捷实践指南》50页，5.2.1-回顾.</span><span class="hljs-comment"># 延误可能影响到项目目标的达成，为了解决障碍，</span><span class="hljs-comment"># 需要对导致延误的问题进行分析，找到问题的根源.</span><span class="hljs-comment"># 同时，针对问题的分析结果，要在回顾上达成共识，形成行动方案，</span><span class="hljs-comment"># 尽量避免在未来的冲刺中再次出现类似的问题和障碍，因此选项AE正确.</span><span class="hljs-comment"># B - 导致延误的表面原因是&quot;任务比预估的更为复杂&quot;，并不是任务之间的依赖关系.</span><span class="hljs-comment"># C - 在敏捷实践中，对于风险的管理会采用在团队中形成风险管理的意识，</span><span class="hljs-comment">#     不会采用正式编订的风险管理计划（敏捷价值观之一：可用的软件而不是完整的文档）.</span><span class="hljs-comment"># D - 在项目执行阶段，要避免发起人涉足微观管理.</span></code></pre><pre><code class="hljs bash">在一次迭代结束时，一位团队成员告诉项目经理，由于几天前出现了无法解决的问题，一个计划任务未完成.若要在将来避免这种情况，项目经理应该怎么做？A. 在回顾总结会议上讨论该问题B. 在演示中说明该问题C. 在下一次迭代规划会上讨论该问题D. 在下一次迭代每日站立会上审查该问题<span class="hljs-comment"># A</span><span class="hljs-comment"># 关键字&quot;迭代结束&quot;、&quot;若要在将来避免这种情况&quot;；</span><span class="hljs-comment"># 所以是敏捷题，题目中要避免问题影响计划任务完成的情况，</span><span class="hljs-comment"># 应收集经验教训，回顾总结会就是收集经验教训，排他选A;</span><span class="hljs-comment"># B - 演示会是类似pmp的确认范国，由客户发起对可交付成果的验收会;</span><span class="hljs-comment"># C - 迭代规划会相当于pmp的定义范围和制定wbs，属于迭代开始的范围基准定义;</span><span class="hljs-comment"># D - 每日站会是每天都要开的状态沟通会.</span></code></pre><pre><code class="hljs bash">上一次冲刺回顾之后，你与团队决定开始用迭代方法完成更改和流程改进.你应该使用以下哪种方法或工具?A. PDCA(计划、执行、检查、行动) B. 根本原因分析C. 全面生产维护(TPM) D. 价值流图<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)第275页，PDCA是持续改进的基本方法，</span><span class="hljs-comment"># 通过这个质量改进举措可以提高项目管理的质量以及最终产品、服务或成果的质量.</span><span class="hljs-comment"># B - 根本原因分析关注识别问题的主要原因，</span><span class="hljs-comment">#     它可用于识别出现偏差的原因以及项目经理为达成项目目标应重点关注的领域.</span><span class="hljs-comment"># C - TPM活动就是通过全员参与，并以团队工作的方式，</span><span class="hljs-comment">#     创建并维持优良的设备管理系统，提高设备的开机率（利用率），</span><span class="hljs-comment">#     增进安全性及高质量，从而全面提高生产系统的运作效率.</span><span class="hljs-comment"># D - 价值流程图运用精益制造的工具和技术来帮助企业理解和精简生产流程.</span></code></pre><pre><code class="hljs bash">经批准的项目章程指出必须采用敏捷方法，在经验教训会议上，客户指出团队无法为该项目提供可靠的成本估算，应该在第一次迭代中分配更多的时间来定义范團.在经验教训资源库中应收集哪个经验教训？A. 客户应该提前接触敏捷方法以了解成本估算过程B. 如果客户需要可靠的成本估算，则不应使用敏捷方法C. 在项目的第一次迭代中，应分配时间来定义范围并确保执行可靠的成本估算D. 敏捷方法的沟通应纳入每日站会<span class="hljs-comment"># A</span><span class="hljs-comment"># 关键字&quot;应该在第一次迭代中分配更多的时间来定义范围&quot;；</span><span class="hljs-comment"># 这句话本身就是不了解敏捷而为，</span><span class="hljs-comment"># 敏捷是先有成本，再有范围，和题目这句话是相悖的.</span><span class="hljs-comment"># 所以结论只有一个，客户需要更多了解敏捷的特征和使用场景.</span><span class="hljs-comment"># A - 是提前告知客户敏捷成本估算的特点，让客户了解过程后自行选择.</span><span class="hljs-comment"># B - 直接否定开发方法过于激进，所以A更优；</span><span class="hljs-comment"># C - 不属于敏捷的做法.</span><span class="hljs-comment"># D - 这句话是正确的，然而每日站会是促进沟通的做法，但是和题目的有关成本问题无关.</span></code></pre><pre><code class="hljs bash">在回顾会议上，项目经理必须执行哪些任务？A. 设置平台，沟通议程和分发资料B. 在所有讨论中指导团队，避免冲突C. 将所有反馈上报给项目千系人D. 如果参与度不足，提前结束会议<span class="hljs-comment"># B</span><span class="hljs-comment"># 敏捷中项目经理扮演引导者的角色，强调指导和帮助的方式.</span></code></pre><pre><code class="hljs bash">一个敏捷项目开始了，指定的团队是敏捷的新成员.在第一次日常会议上，项目经理观察到团队在实现目标方面有问题，项目经理应该怎么做？A. 计划一次户外活动，让团队互相了解B. 要求团队回顾敏捷项目管理方法C. 要求人力资源部门提供—个有经验的敏捷团队D. 举行一次会议，帮助国队确定田队章程<span class="hljs-comment"># B</span><span class="hljs-comment"># 关键字&quot;敏捷的新成员&quot;，因为新成员，对敏捷不了解，</span><span class="hljs-comment"># 才导致实现目标方面有问题；所以选择B，先做好培训工作再说.</span></code></pre><pre><code class="hljs bash">一个项目经理正在管理一个旨在每三个月向市场提供增量产品的项目.团队已经分配好了，产品负责人创建了产品待办事项，并确定了优先次序. 在四次迭代之后，产品负责人将投诉上报给CEO，因为产品没有达到产品负责人的期望.项目经理应该怎么做才能避免这种情况的发生？A. 与产品负责人一起实施冲刺回顾，与团队一起实施回顾，以减少差距。B. 在每天的Scrums中进行风险管理分析C. 审查组织流程资产（OPA） 和类似项目的经验教训D. 梳理待办事项的工作，以确保满足验收标准<span class="hljs-comment"># A</span><span class="hljs-comment"># 关键字&quot;因为产品没有达到产品负责人的期望&quot;，</span><span class="hljs-comment"># 没达到期望属于相关方题或者是质量题，对于相关方题要了解对方的顾虑，分析其利益.</span><span class="hljs-comment"># 对于质量题，要过程改进，进行根本原因分析，所以两种都指向A答案.</span></code></pre><pre><code class="hljs bash">在回顾会议上协调员的角色是什么?A. 分发相关文件，设定基调并说明会议议程B. 提供一致的会议方向，避免争议C. 确保项目干系人全部告知反馈D. 监督参与程度，如果交互不足，则结束会议<span class="hljs-comment"># A</span><span class="hljs-comment"># A - 为协调员职责.</span><span class="hljs-comment"># B - 为项目经理职责.</span><span class="hljs-comment"># C - 不对，回顾会为内部会议，不要告知全部项目干系人.</span><span class="hljs-comment"># D - 描述不对.</span></code></pre><pre><code class="hljs bash">在项目的第一次迭代期间，一支新组建的敏捷团队遇到主要流程问题，一名团队成员建议召开一次回顾会议，解決这些问题，敏捷团队领导应该怎么做?A. 解释说回顾会议只能在迭代结束时举行B. 在中途停止迭代，并召开回顾会议C. 解释说团队正在经历震荡阶段，并鼓励他们设法克服这个问题D. 寻求外部协助。帮助团队解决过程问题<span class="hljs-comment"># C</span><span class="hljs-comment"># 解析：碰到问题中途停止迭代不合适.</span></code></pre><h3 id="35-产品待办事项"><a href="#35-产品待办事项" class="headerlink" title="35. 产品待办事项"></a>35. 产品待办事项</h3><pre><code class="hljs bash">在一个采用敏捷方法的软件项目中，最近有一些工作超支.经过评估，项目经理得出结论，超额工作的发生是由于产品待办事项的条目不够完善.项目经理应该怎么做来纠正这个？A. 与发起人合作，修改产品愿景B. 为产品待办事项项目创建一个准备就绪的定义 (DoR)C. 与服务请求经理讨论这个问题D. 与利益相关者一起完善产品待办事项<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键字&quot;产品待办事项的条目不够完善&quot;，所以最佳方法是事前完善，所以D会比较优化;</span><span class="hljs-comment"># A - 方法问题不能动方向;</span><span class="hljs-comment"># B - 定义DoR是可行的，不过从实际操作来没有D好，这么说吧，DOR面向客户是强迫命令而D是合作解决.</span><span class="hljs-comment"># C - 的对象服务请求经理是运营的人，和题目不搭.</span></code></pre><pre><code class="hljs bash">项目经理在做一个定义不明确的内部项目时，收到了来自高级管理层的多个变更请求.项目经理应该先做什么？A. 确定所提出的改变将如何使项目在商业案例中受益B. 要求临时增加预算以避免成本超支C. 保持团队的动力和激励，以避免在一个漫长的项目上工作的疲意D. 评估时间表的延误，并开始实施以避免更多的滞后<span class="hljs-comment"># A</span><span class="hljs-comment"># 关键字&quot;收到了来自高级管理层的多个变更请求&quot;，</span><span class="hljs-comment"># 那么需求入待办事项列表，进行价值排序和澄清是下一步的工作，这里选择A是最佳答案.</span></code></pre><pre><code class="hljs bash">在与团队的会议中，你合作为即将到来的迭代准备故事，目的是为团队提供足够的故事信息，以了解故事的内容并确定大小.你在从事什么活动？A. 为即将到来的冲刺做计划B. 完善产品待办事项列表C. 创建产品待办事项D. 制定产品路线图<span class="hljs-comment"># B</span><span class="hljs-comment"># 团队正在从事细化产品待办列表的活动.</span><span class="hljs-comment"># 这包括与团队合作，为即将到来的迭代准备故事.</span><span class="hljs-comment"># 故事应该包含足够的细节，让团队了解工作的范围和它们之间的关系有多大，</span><span class="hljs-comment"># 这个是敏捷的产品细化完善会议的目的.</span></code></pre><pre><code class="hljs bash">在展示期间，客户提供了反馈意见，并由于一项规定变化而请求一项紧急的新改进，敏捷项目经理下一步应该怎么做？A. 将新需求添加到迭代代办列表B. 在回顾会议上讨论新需求C. 在下一个迭代规划会讨论新需求D. 与团队一起审查新需求，并要求他们开始为新需求工作<span class="hljs-comment"># C</span><span class="hljs-comment"># 关键字&quot;由于一项规定变化而请求一项紧急的新改进&quot;&quot;敏捷项目经理&quot;，所以是敏捷题，</span><span class="hljs-comment"># 敏捷是拥抱变更的，对于这个变更，敏捷的做法是在下一个迭代规划周期内执行，所以选择C.</span><span class="hljs-comment"># A - 迭代代办列表不是需求列表，是当前的范围基准，</span><span class="hljs-comment">#     不能加在当前的基准中，应该在下一个迭代开始进行规划.</span><span class="hljs-comment"># B - 回顾会议是做经验教训收集.</span><span class="hljs-comment"># D - 直接开始工作不妥，敏捷拥抱变更和及时响应，</span><span class="hljs-comment">#     其实也是在小批量下一次迭代的时候进行规划，而不能直接进行.</span></code></pre><pre><code class="hljs bash">以下哪项是对产品待办事项细化会(backlog Refinement） 的最佳定义？A. 一个团队为一个产品保持的以用户为中心的需求的有序列表B. 随着更多的信息和更精确的估计的出现，增加计划中的详细程度的迭代过程C. 对项目需求的逐步阐述和或团队审查、更新和编写需求以满足客户需求的持续活动D. 由团队举行的会议，对冲刺期间完成的工作进行审查<span class="hljs-comment"># C</span><span class="hljs-comment"># 产品待办事项细化会被定义为项目需求的逐步阐述和或团队审查、更新和编写需求以满足客户需求的持续活动.</span><span class="hljs-comment"># 其他提供的定义是指</span><span class="hljs-comment"># A - 产品待办事项列表.</span><span class="hljs-comment"># B - 逐步阐述.</span><span class="hljs-comment"># C - 冲刺审查.</span></code></pre><h3 id="36-每日站会"><a href="#36-每日站会" class="headerlink" title="36. 每日站会"></a>36. 每日站会</h3><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-sprint/01.png" alt="01"></p><pre><code class="hljs bash">一个复杂的、高价值的敏捷项目包括每四个星期与客户进行一次冲刺演示.高层管理人员关心项目的进展，希望更频繁地更新项目状态.项目经理应该怎么做？A. 告知执行管理层，在冲刺演示中让客户了解状态B. 准备好每周的状态报告，每周与执行管理层分享C. 告知执行管理层关于项目所遵循的敏捷原则和流程D. 请求团队每周准备并与执行管理层分享状态报告<span class="hljs-comment"># D</span><span class="hljs-comment"># 关键字&quot;希望更频繁地更新项目状态&quot;，最佳答案应该是邀请高层参加站会，</span><span class="hljs-comment"># 不过人家是高层…，可以用排除法.</span><span class="hljs-comment"># A - 问题在于题目己经有冲刺演示了，如果更频繁的演示可能效果会更好;</span><span class="hljs-comment"># C - 敏捷的频繁互动的宣言告诉我们高层的要求是正当的，所以不用和他们掰扯这个道理;</span><span class="hljs-comment"># B - 和D雷同，唯一不同的是一个是团队一个项目经理自身，考虑到自组织关系，这个锅可以甩给团队.</span></code></pre><pre><code class="hljs bash">你的敏捷团队正在召开第一次冲刺计划会议.他们正在讨论使用适当的工具和技术识别风险.以下工具和技术不合适的是:A. 根本原因分析B. 清单C. 提示列表D. 系统交互图<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK（6）409-识别风险的工具技术.</span><span class="hljs-comment"># 题目考察识别风险的工具技术，选项ABC都是其中的工具技术，</span><span class="hljs-comment"># 而系统交互图是范围模型的一个例子，它对产品范围的可视化描绘，</span><span class="hljs-comment"># 显示业务系统（过程、设备、计算机系统等）及其与人和其他系统（行动者）之间的交互方式，它是收集需求的工具.</span></code></pre><pre><code class="hljs bash">某组织的管理系统正在由一个敏捷团队进行升级。虽然项目的范国被彻底地界定了，但是功能需求被移交给了 项目团队，没有主题专家(SME）可以持续地在项目上工作.项目经理担心团队的进展会因为他们的知识匮乏而受到阻碍.哪两个项目事件可以帮助项目经理确定是否是这样的情況？（选择两个）A. 需求分析B. 回顾会议C. 冲刺计划D. 站立会议E. 细化产品待办事项<span class="hljs-comment"># BD</span><span class="hljs-comment"># 关键字&quot;没有主题专家(SME）可以持续地在项目上工作&quot;，</span><span class="hljs-comment"># 确定受知识匮乏的制约因素，在敏捷里确定问题和障碍，</span><span class="hljs-comment"># 一个是从站立会议，一个是从回顾会议，收集经验教训，并做出改进的计划.</span></code></pre><pre><code class="hljs bash">在一次每日站会上，scrum 主管了解到一个用户的故事不完整，因为团队成员无法对某个方法达成一致意见，scrum 主管应该怎么做？A. 与经理开会，确定最佳方法B. 鼓励团队对方法达成一致意见C. 要求团队领导选择最佳方法D. 要求说明每种方法，并选择最佳的<span class="hljs-comment"># B</span><span class="hljs-comment"># Scrum Master的职责应该是鼓励团队自己做决策, 而不应该要求团队如何做.</span></code></pre><pre><code class="hljs bash">哪种敏捷实践最能品著提高团队的速度？A. 每日站会B. 迭代与发布计划C. 对弱点领域进行培训D. 迭代回顾会议<span class="hljs-comment"># A</span><span class="hljs-comment"># 每日站会增进团队内部的交流沟通、减少其他会议、</span><span class="hljs-comment"># 发现开发过程中需要移除的障碍，促进快速地做决策、</span><span class="hljs-comment"># 提高开发团队的认知程度. 通过每日站会团队对项目动态有了更好的认识，速度将会逐步稳定和提高.</span></code></pre><h3 id="37-培训"><a href="#37-培训" class="headerlink" title="37. 培训"></a>37. 培训</h3><ul><li>敏捷培训</li></ul><pre><code class="hljs bash">客户向敏捷项目经理抱怨团队未能处理客户提交的请求，相反，团队为当前迭代选择了高优先级任务.敏捷项目经理应该做什么？A. 告诉团队处理客户的请求，并推迟已选择任务的工作B. 要求团队同时处理他们的选择和客户的请求C. 告知客户团队根据优先级确定他们的工作D. 建议客户参加培训以更好地了解流程<span class="hljs-comment"># D</span><span class="hljs-comment"># 客户不了解敏捷项目管理，多有抱怨，四个选项中，建议客户参加敏捷培训是最佳选项.</span><span class="hljs-comment"># A - 不符合敏捷项目管理.</span><span class="hljs-comment"># B - 不符合敏捷项目管理.</span><span class="hljs-comment"># C - 客户不了解敏捷项目管理，局部的解释不如通过培训系统的学习更加清楚的理解敏捷项目管理.</span></code></pre><h3 id="38-发布计划"><a href="#38-发布计划" class="headerlink" title="38. 发布计划"></a>38. 发布计划</h3><pre><code class="hljs bash">你正在与产品负责人一起确定可行的产品迭代计划.当你讨论各种特性并确定它们的优先级时，你们都在努力理解哪些特性应该具有更高的优先级.项目经理和产品负责人应该查询什么工具？A. 任务列表。任务列表将帮助产品经理和产品负责人理解创建一个特性所需要的元素B. 迭代计划。迭代计划将摆脱所需的各种特性C. 发布计划。发布计划将摆脱项目的迭代D. Scrum 待办事项列表<span class="hljs-comment"># C</span><span class="hljs-comment"># 当Scrum团队按照Sprint的方式进行迭代交付的时候，他们更加关注的是发布，而不是项目.</span><span class="hljs-comment"># 发布是对整个产品发布过程的展望，是一个开发团队交付一个可以工作的软件给团队外部的人使用，以满足他们的某个目的.</span><span class="hljs-comment"># 而迭代计划是发布计划的进一步计划，只是对一次迭代的展望，只在Sprint开始时才开始做迭代计划.</span><span class="hljs-comment"># 项目经理和产品负责人在确定可行的产品迭代计划和优先级时，需要先定义产品的开发方向，</span><span class="hljs-comment"># 因此应查阅发布计划，选C而不选B.</span><span class="hljs-comment"># A - 任务列表是团队为实现用户故事需要完成的各项工作的列表，是开发团队的工作文件，选项A不符合题干要求.</span><span class="hljs-comment"># D - Scrum待办事项列表是所有工作的有序列表，它以故事形式呈现给团队，并根据需要进行不断调整和细化，选项D不符合题干要求.</span></code></pre><h3 id="39-看板"><a href="#39-看板" class="headerlink" title="39. 看板"></a>39. 看板</h3><pre><code class="hljs bash">项目团队在完成现有工作后，马上在团队内部分配新工作.这是因为缺乏适当的汇报制度，也没有对在制品和剩余的工作进行控制.在这种情况下，你建议团队怎么做?A. 使用看板指示牌B. 消除工作中的浪费，创造额外的工作能力C. 应用六西格码，解决缺陷D. 使用敏捷开发方法<span class="hljs-comment"># A</span><span class="hljs-comment"># 敏捷实践指南，P105.</span><span class="hljs-comment"># 看板面板（看板指示牌）利用列进入和退出策略以及限制在制品等制约因素，</span><span class="hljs-comment"># 可提供一目了然的工作流、瓶颈、阻碍和整体状态信息.</span><span class="hljs-comment"># 此外，面板可作为面向所有观众的信息发射源，提供团队工作状态的最新信息.</span><span class="hljs-comment"># B - 题目没有提及浪费相关，排除;</span><span class="hljs-comment"># C - 六西格玛是一种改善企业质量流程管理的技术，通过减少缺陷来提高质量，降低成本, 不符合题意.</span><span class="hljs-comment"># D - 范围太大，没有聚焦题干的问题，排除.</span></code></pre><pre><code class="hljs bash">你正在使用敏捷方法管理软件项目.该团队将通过多次迭代扩大产品范围。你应该何时确定和批准具体的产品范围？A. 在项目一开始时B. 在项目一结束时C. 在每次迭代开始时D. 在每次迭代结束时<span class="hljs-comment"># C</span><span class="hljs-comment"># 敏捷实践指南，P52 待办事项列表是所有工作的有序列表，它以故事形式呈现给团队.</span><span class="hljs-comment"># 工作开始之前，不需要为整个项目创建所有的故事，只需要了解第一个发布的主要内容正确即可，</span><span class="hljs-comment"># 然后就可以为下一个迭代开发足够的项目.</span><span class="hljs-comment"># 在基于迭代的敏捷中，产品负责人往往在迭代中期的一次或多次会议中与团队合作，</span><span class="hljs-comment"># 根据客户的需求为即将进行的迭代准备或者更新一些故事.</span></code></pre><pre><code class="hljs bash">一个项目正处于执行阶段.你通过浏览一系列图像的敏捷方法收集了项目需求.你在收集需求时可能使用了哪种方法？A. 亲和图 B. 思维导图C. 故事版D. 上下文关系图<span class="hljs-comment"># C</span><span class="hljs-comment"># 故事板是一种流行的、使用图像和（或）图示的敏捷原型技术.</span></code></pre><pre><code class="hljs bash">看板使用的是以下哪种调度方法？A. 关键路径法B. 关键链法C. 迭代排程法D. 按需排程法<span class="hljs-comment"># D</span><span class="hljs-comment"># 看板遵循一种精益的方法，使用基于拉动的调度系统，也被称为按需调度，</span><span class="hljs-comment"># 以保持灵活性和专注于持续交付.</span><span class="hljs-comment"># 这个拉动系统涉及到使用看板以可视化的方式在一个过程中移动工作.</span></code></pre><h3 id="40-计划扑克"><a href="#40-计划扑克" class="headerlink" title="40. 计划扑克"></a>40. 计划扑克</h3><pre><code class="hljs bash">下列哪一项属于估算用户故事规模的技术？A. 专家判断B. 计划扑克C. 燃尽图D. 看板扑克<span class="hljs-comment"># B</span><span class="hljs-comment"># 计划扑克是敏捷估算故事规模的常用技术.</span></code></pre><pre><code class="hljs bash">敏捷团队希望集体决定项目的可能规模，如果他们使用计划扑克技术来完成，那么团队将会做什么？A. 估算用户故事点的相对规模B. 通过将故事放在存储桶中来估算故事C. 通过将故事点与过去的相似特征进行比较来估算故事点D、使用点数投票估算故事点<span class="hljs-comment"># A</span><span class="hljs-comment"># 故事点是描述一个用户故事及其相关努力总体规模的测量单元，</span><span class="hljs-comment"># 通常是团队运营计划扑克等估算技术来确定的.</span></code></pre><p><u><strong>PS: 本文仅为学习记录!</strong></u>/</p>]]></content>
    
    
    <categories>
      
      <category>pmp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pmp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Npm学习一</title>
    <link href="/2022/07/25/npm-started/"/>
    <url>/2022/07/25/npm-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="1-npm安装"><a href="#1-npm安装" class="headerlink" title="1. npm安装"></a>1. npm安装</h3><p>安装NodeJS, 下载地址:<code>http://nodejs.cn/download</code></p><pre><code class="hljs bash"><span class="hljs-comment"># 查看版本</span>node -v<span class="hljs-comment"># 选择已经安装好的node版本:</span>n<span class="hljs-comment"># 选择安装指定版本的node:</span>sudo n 15</code></pre><p>mac或linux系统升级命令:</p><pre><code class="hljs bash">sudo npm install npm -g</code></pre><p>查看npm版本:</p><pre><code class="hljs bash">npm -v</code></pre><h3 id="2-安装webpack"><a href="#2-安装webpack" class="headerlink" title="2. 安装webpack"></a>2. 安装webpack</h3><p>安装打包工具webpack:</p><pre><code class="hljs bash">sudo npm install webpack -g</code></pre><h3 id="3-安装vue-cli"><a href="#3-安装vue-cli" class="headerlink" title="3. 安装vue-cli"></a>3. 安装vue-cli</h3><pre><code class="hljs bash">sudo npm install vue-cli -gsudo npm i -g @vue/cli-init卸载电脑中的vue-cli旧的版本:sudo npm uninstall -g @vue/clisudo npm uninstall -g vue-cli安装:sudo npm install -g @vue/cli</code></pre><p>安装淘宝镜像:</p><pre><code class="hljs bash">npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><h3 id="4-安装Yarn"><a href="#4-安装Yarn" class="headerlink" title="4. 安装Yarn"></a>4. 安装Yarn</h3><pre><code class="hljs bash">sudo npm i yarn -g -verbose</code></pre><p>将yarn切换成淘宝镜像:</p><pre><code class="hljs bash">yarn config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org</code></pre><p>Yarn命令:</p><pre><code class="hljs bash">npm install-&gt;yarn installnpm install --save [package]-&gt;yarn add [package]npm install --save-dev [package]-&gt;yarn add [package] --devnpm install --global [package]-&gt;yarn global add [package]npm uninstall --save [package]-&gt;yarn remove [package]npm uninstall --save-dev [package]-&gt;yarn remove [package]</code></pre><h3 id="5-生成项目"><a href="#5-生成项目" class="headerlink" title="5. 生成项目"></a>5. 生成项目</h3><pre><code class="hljs bash">% vue init webpack mango-ui? Project name mango-ui? Project description mango ui? Author lingchen? Vue build standalone? Install vue-router? Yes? Use ESLint to lint your code? No? Set up unit tests No? Setup e2e tests with Nightwatch? No? Should we run `npm install` <span class="hljs-keyword">for</span> you after the project has been created? (recommended) yarn   vue-cli · Generated <span class="hljs-string">&quot;mango-ui&quot;</span>.% <span class="hljs-built_in">cd</span> mango-ui% yarn installyarn install v1.22.18[1/5] 🔍  Validating package.json...[2/5] 🔍  Resolving packages...success Already up-to-date.✨  Done <span class="hljs-keyword">in</span> 0.65s.</code></pre><p>启动项目:</p><pre><code class="hljs bash">npm run dev</code></pre><h3 id="6-安装Element-ui"><a href="#6-安装Element-ui" class="headerlink" title="6. 安装Element-ui"></a>6. 安装Element-ui</h3><pre><code class="hljs bash">% yarn add element-ui</code></pre><p>在<code>main.js</code>引入Element-ui</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>Vue.config.productionTip = <span class="hljs-literal">false</span>Vue.use(ElementUI)</code></pre><h3 id="7-安装SCSS"><a href="#7-安装SCSS" class="headerlink" title="7. 安装SCSS"></a>7. 安装SCSS</h3><pre><code class="hljs bash">yarn add sass-loader node-sass --dev注意版本:`<span class="hljs-string">&quot;sass-loader&quot;</span>: <span class="hljs-string">&quot;^7.1.0&quot;</span>,``<span class="hljs-string">&quot;node-sass&quot;</span>: <span class="hljs-string">&quot;^4.11.0&quot;</span>,`</code></pre><p>在build文件夹的<code>webpack.base.conf.js</code>的rules标签下添加配置:</p><pre><code class="hljs javascript">rules: [  <span class="hljs-comment">// 配置scss.</span>  &#123;    test: <span class="hljs-regexp">/\.scss$/</span>,    loaders: [<span class="hljs-string">&#x27;style&#x27;</span>, <span class="hljs-string">&#x27;css&#x27;</span>, <span class="hljs-string">&#x27;sass&#x27;</span>]  &#125;,  ...]</code></pre><p>在页面代码的<code>style</code>标签中把lang设置成scss, 即可:</p><pre><code class="hljs vue">&lt;style lang&#x3D;&quot;sass&quot; scoped&gt;&lt;&#x2F;style&gt;</code></pre><p><strong>错误</strong>: mac系统:安装sass-loader node-sass</p><p><code>&quot;sass-loader&quot;: &quot;^7.1.0&quot;,</code></p><p><code>&quot;node-sass&quot;: &quot;^4.11.0&quot;,</code></p><pre><code class="hljs bash">gyp verb download using dist-url https://npmmirror.com/mirrors/nodegyp verb check python checking <span class="hljs-keyword">for</span> Python executable <span class="hljs-string">&quot;python2&quot;</span> <span class="hljs-keyword">in</span> the PATH.......<span class="hljs-comment"># 安装python2, 到官网上下载python2</span>https://www.python.org/downloads/macos/下载:python-2.7.13-macosx10.6.pkg安装好, 配置path:vi ~/.bash_profile<span class="hljs-built_in">export</span> PYTHON2=/Library/Frameworks/Python.framework/Versions/2.7/bin<span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PYTHON2</span>:<span class="hljs-variable">$PATH</span><span class="hljs-built_in">source</span> ~/.bash_profilevi ~/.zshrc<span class="hljs-built_in">alias</span> python2=/Library/Frameworks/Python.framework/Versions/2.7/bin/python2<span class="hljs-built_in">source</span> ~/.zshrcsudo rm -rf $(xcode-select -p)sudo xcode-select --install再次运行:yarn install错误:node.js - error: no template named ‘remove_cv_t’ <span class="hljs-keyword">in</span> namespace ‘std’; did you mean ‘remove_cv’本机的node过高, node 版本要降级:15node -vv16.3.0降低版本:sudo n 15安装好, 查看node版本:node -vv15.14.0再次运行:yarn install能够安装好依赖!npm run dev启动工程, sass能够生效!</code></pre><h3 id="8-安装axios"><a href="#8-安装axios" class="headerlink" title="8. 安装axios"></a>8. 安装axios</h3><pre><code class="hljs bash">yarn add axios@0.18.0</code></pre><h3 id="9-安装mockjs"><a href="#9-安装mockjs" class="headerlink" title="9. 安装mockjs"></a>9. 安装mockjs</h3><pre><code class="hljs bash">yarn add mockjs@1.0.1-beta3 --dev</code></pre><p>在<code>src</code>文件夹中新建一个<code>mock/mock.js</code></p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Mock <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mockjs&#x27;</span>Mock.mock(<span class="hljs-string">&#x27;http://localhost:8080/user&#x27;</span>, &#123;  <span class="hljs-comment">// 随机生成姓名.</span>  <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;@name&#x27;</span>,  <span class="hljs-comment">// 随机生成邮箱.</span>  <span class="hljs-string">&#x27;email&#x27;</span>: <span class="hljs-string">&#x27;@email&#x27;</span>,  <span class="hljs-comment">// 年龄在1~10岁之间.</span>  <span class="hljs-string">&#x27;age|1-10&#x27;</span>: <span class="hljs-number">5</span>,&#125;)Mock.mock(<span class="hljs-string">&#x27;http://localhost:8080/menu&#x27;</span>, &#123;  <span class="hljs-comment">// id自增.</span>  <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;@increment&#x27;</span>,  <span class="hljs-comment">// 名称为menu.</span>  <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;menu&#x27;</span>,  <span class="hljs-comment">// 排序在1~20之间.</span>  <span class="hljs-string">&#x27;order|1-20&#x27;</span>: <span class="hljs-number">5</span>,&#125;)</code></pre><p>在<code>Home.vue</code>中访问mock接口:</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">getUser</span>(<span class="hljs-params"></span>)</span> &#123;  axios.get(<span class="hljs-string">&#x27;http://localhost:8080/user&#x27;</span>).then(    res =&gt; &#123;      alert(<span class="hljs-built_in">JSON</span>.stringify(res.data))    &#125;  )&#125;,<span class="hljs-function"><span class="hljs-title">getMenu</span>(<span class="hljs-params"></span>)</span> &#123;  axios.get(<span class="hljs-string">&#x27;http://localhost:8080/menu&#x27;</span>).then(    res =&gt; &#123;      alert(<span class="hljs-built_in">JSON</span>.stringify(res.data))    &#125;  )&#125;</code></pre><p>mock会根据请求url拦截对应请求并返回模拟数据.</p><h3 id="10-封装axios模块"><a href="#10-封装axios模块" class="headerlink" title="10. 封装axios模块"></a>10. 封装axios模块</h3><ul><li>统一url配置.</li><li>统一 api请求.</li><li>request（请求）拦截器. 例如：带上token 等，设置请求头.</li><li>response（响应）拦截器. 例如：统一错误处理，页面重定向等.</li><li>根据需要，结合 vuex 做全局的loading 动画，或者错误处理.</li><li>将axios 封装成 Vue 插件使用.</li></ul><p>安装<code>js-cookie</code>:</p><pre><code class="hljs bash">yarn add js-cookie@2.2.0</code></pre><p><code>src/utils/global.js</code>:</p><p>全局的配置, 常量和方法放置在此文件中.</p><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 全局常量、方法封装模块.</span><span class="hljs-comment"> * 通过原型挂载到Vue属性.</span><span class="hljs-comment"> * 通过 this.Global 调用.</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 后台管理系统服务器地址.</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> baseUrl = <span class="hljs-string">&#x27;http://localhost:8001&#x27;</span><span class="hljs-comment">// 系统数据备份还原服务器地址.</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> backupBaseUrl = <span class="hljs-string">&#x27;http://localhost:8002&#x27;</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  baseUrl,  backupBaseUrl&#125;</code></pre><h4 id="1-config-js"><a href="#1-config-js" class="headerlink" title="(1) .config.js"></a>(1) .config.js</h4><p>axios默认配置, 包含基础路径等信息.</p><p><code>src/http/config.js</code>:</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; baseUrl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/global&#x27;</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  method: <span class="hljs-string">&#x27;get&#x27;</span>,  <span class="hljs-comment">// 基础url前缀.</span>  baseUrl: baseUrl,  <span class="hljs-comment">// 请求头信息.</span>  headers: &#123;    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json;charset=UTF-8&#x27;</span>  &#125;,  <span class="hljs-comment">// 参数.</span>  data: &#123;&#125;,  <span class="hljs-comment">// 设置超时时间.</span>  timeout: <span class="hljs-number">10000</span>,  <span class="hljs-comment">// 携带凭证.</span>  withCredentials: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 返回数据类型.</span>  responseType: <span class="hljs-string">&#x27;json&#x27;</span>&#125;</code></pre><h4 id="2-axios-js"><a href="#2-axios-js" class="headerlink" title="(2). axios.js"></a>(2). axios.js</h4><p>二次封装axios模块, 包含拦截器等信息.</p><p><code>src/http/axios.js</code>:</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><span class="hljs-keyword">import</span> config <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./config&#x27;</span><span class="hljs-keyword">import</span> Cookies <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;js-cookie&#x27;</span><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/router&#x27;</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$axios</span>(<span class="hljs-params">options</span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;    <span class="hljs-keyword">const</span> instance = axios.create(&#123;      baseURL: config.baseUrl,      headers: config.headers,      timeout: config.timeout,      withCredentials: config.withCredentials    &#125;)    <span class="hljs-comment">// request请求拦截器.</span>    instance.interceptors.request.use(      config =&gt; &#123;        <span class="hljs-keyword">let</span> token = Cookies.get(<span class="hljs-string">&#x27;token&#x27;</span>)        <span class="hljs-keyword">if</span> (token) &#123;          <span class="hljs-comment">// 发送请求时携带token.</span>          config.headers.token = token        &#125; <span class="hljs-keyword">else</span> &#123;          <span class="hljs-comment">// 重定向到登录页面.</span>          router.push(<span class="hljs-string">&#x27;/login&#x27;</span>)        &#125;        <span class="hljs-keyword">return</span> config      &#125;,      error =&gt; &#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error)      &#125;    )    <span class="hljs-comment">// response响应拦截器.</span>    instance.interceptors.response.use(      response =&gt; &#123;        <span class="hljs-keyword">return</span> response.data      &#125;,      err =&gt; &#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(err)      &#125;    )    <span class="hljs-comment">// 请求处理.</span>    instance(options).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;      resolve(res)      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>    &#125;).catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;      reject(error)    &#125;)  &#125;)&#125;</code></pre><h4 id="3-api-js"><a href="#3-api-js" class="headerlink" title="(3). api.js"></a>(3). api.js</h4><p>请求接口汇总模块, 聚合所有模块API.</p><p><code>src/http/api.js</code>:</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 接口统一集成模块.</span><span class="hljs-comment"> * 此模块是一个聚合模块, 汇合modules目录下所有子模块的API.</span><span class="hljs-comment"> */</span><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> login  <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/login&#x27;</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  login,&#125;</code></pre><h4 id="4-index-js"><a href="#4-index-js" class="headerlink" title="(4). index.js"></a>(4). index.js</h4><p>将axios封装成插件, 按插件方式引入.</p><pre><code class="hljs javascript"><span class="hljs-comment">// 导入所有接口.</span><span class="hljs-keyword">import</span> api <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./api&#x27;</span><span class="hljs-keyword">const</span> install = <span class="hljs-function"><span class="hljs-params">Vue</span> =&gt;</span> &#123;  <span class="hljs-keyword">if</span> (install.installed) &#123;    <span class="hljs-keyword">return</span>;  &#125;  install.instanlled = <span class="hljs-literal">true</span>  <span class="hljs-built_in">Object</span>.defineProperties(Vue.prototype, &#123;    <span class="hljs-comment">// 注意, 此处挂载在Vue原型的$api对象上.</span>    $api: &#123;      <span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span> &#123;        <span class="hljs-keyword">return</span> api;      &#125;    &#125;  &#125;)&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> install</code></pre><h4 id="5-modules文件夹"><a href="#5-modules文件夹" class="headerlink" title="(5). modules文件夹"></a>(5). modules文件夹</h4><p>用户管理, 菜单管理等子模块API.</p><p><code>src/http/modules/login.js</code>:</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../axios&#x27;</span>;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 系统登录模块.</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 登录</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> login = <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;  <span class="hljs-keyword">return</span> axios(&#123;    url: <span class="hljs-string">&#x27;login&#x27;</span>,    method: <span class="hljs-string">&#x27;post&#x27;</span>,    data  &#125;)&#125;<span class="hljs-comment">// 登出.</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> logout = <span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-keyword">return</span> axios(&#123;    url: <span class="hljs-string">&#x27;logout&#x27;</span>,    method: <span class="hljs-string">&#x27;get&#x27;</span>  &#125;)&#125;</code></pre><h4 id="6-main-js"><a href="#6-main-js" class="headerlink" title="(6). main.js"></a>(6). main.js</h4><p>修改<code>src/main.js</code>, 导入API模块, 并通过Vue.use(api)语句进行使用注册, 这样可以通过<code>this.$api.子模块.方法</code>的方式来调用后台接口了.</p><p>引入<code>global</code>模块, 并通过<code>Vue.prototype.global = global</code>进行挂载, 可以通过<code>this.global.xxx</code>来获取全局配置了.</p><pre><code class="hljs javascript"><span class="hljs-comment">// The Vue build version to load with the `import` command</span><span class="hljs-comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><span class="hljs-keyword">import</span> api <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./http&#x27;</span><span class="hljs-keyword">import</span> <span class="hljs-built_in">global</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/global&#x27;</span><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><span class="hljs-comment">// 注册使用Element.</span>Vue.use(ElementUI)<span class="hljs-comment">// 注册使用API模块.</span>Vue.use(api)<span class="hljs-comment">// Vue.config.productionTip = false</span><span class="hljs-comment">// 挂载全局配置模块.</span>Vue.prototype.global = <span class="hljs-built_in">global</span><span class="hljs-comment">/* eslint-disable no-new */</span><span class="hljs-keyword">new</span> Vue(&#123;  el: <span class="hljs-string">&#x27;#app&#x27;</span>,  router,  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App)  <span class="hljs-comment">// components: &#123; App &#125;,</span>  <span class="hljs-comment">// template: &#x27;&lt;App/&gt;&#x27;</span>&#125;)</code></pre><h3 id="11-封装mock模块"><a href="#11-封装mock模块" class="headerlink" title="11. 封装mock模块"></a>11. 封装mock模块</h3><p><code>index.js</code>是聚合模块, 统一导入所有子模块并通过调用mock进行数据模拟.</p><p><code>src/mock/index.js</code>:</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Mock <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mockjs&#x27;</span><span class="hljs-keyword">import</span> &#123; baseUrl &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/utils/global&#x27;</span>;<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> login <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/login&#x27;</span><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> user <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/user&#x27;</span><span class="hljs-comment">// 1.开启/关闭[所有模块]拦截, 通过调用[openMock参数]设置.</span><span class="hljs-comment">// 2.开启/关闭[业务模块]拦截, 通过调用fnCreate方法[isOpen参数]设置.</span><span class="hljs-comment">// 3.开启/关闭[业务模块中某个请求]拦截, 通过函数返回对象中的[isOpen属性]设置.</span><span class="hljs-keyword">let</span> openMock = <span class="hljs-literal">true</span><span class="hljs-comment">// let openMock = false</span>fnCreate(login, openMock)fnCreate(user, openMock)<span class="hljs-comment">/**</span><span class="hljs-comment"> * 创建mock模拟数据.</span><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>mod 模块.</span><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> </span>isOpen 是否开启?</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fnCreate</span>(<span class="hljs-params">mod, isOpen = <span class="hljs-literal">true</span></span>) </span>&#123;  <span class="hljs-keyword">if</span> (isOpen) &#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> mod) &#123;      (<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;        <span class="hljs-keyword">if</span> (res.isOpen !== <span class="hljs-literal">false</span>) &#123;          <span class="hljs-keyword">let</span> url = baseUrl          <span class="hljs-keyword">if</span> (!url.endsWith(<span class="hljs-string">&#x27;/&#x27;</span>)) &#123;            url = url + <span class="hljs-string">&#x27;/&#x27;</span>          &#125;          url = url + res.url          Mock.mock(<span class="hljs-keyword">new</span> <span class="hljs-built_in">RegExp</span>(url), res.type, <span class="hljs-function">(<span class="hljs-params">opts</span>) =&gt;</span> &#123;            opts[<span class="hljs-string">&#x27;data&#x27;</span>] = opts.body ? <span class="hljs-built_in">JSON</span>.parse(opts.body) : <span class="hljs-literal">null</span>            <span class="hljs-keyword">delete</span> opts.body            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;\n&#x27;</span>)            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;%cmock拦截, 请求: &#x27;</span>, <span class="hljs-string">&#x27;color:blue&#x27;</span>, opts)            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;%cmock拦截, 响应: &#x27;</span>, <span class="hljs-string">&#x27;color:blue&#x27;</span>, res.data)            <span class="hljs-keyword">return</span> res.data          &#125;)        &#125;      &#125;)(mod[key]() || &#123;&#125;)    &#125;  &#125;&#125;</code></pre><p><code>user.js</code>: mock的用户管理模块, 格式跟后台接口保持一致.</p><p><code>src/mock/modules/user.js</code></p><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 用户管理模块.</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 查询用户.</span><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findUser</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">const</span> userFindData = &#123;    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>,    <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">null</span>,    <span class="hljs-string">&quot;data&quot;</span>: &#123;      <span class="hljs-comment">// 随机生成姓名.</span>      <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;name&#x27;</span>,      <span class="hljs-comment">// 随机生成邮箱.</span>      <span class="hljs-string">&#x27;email&#x27;</span>: <span class="hljs-string">&#x27;email&#x27;</span>,      <span class="hljs-comment">// 年龄在1~10岁之间.</span>      <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">5</span>    &#125;  &#125;  <span class="hljs-keyword">return</span> &#123;    url: <span class="hljs-string">&#x27;user/find&#x27;</span>,    type: <span class="hljs-string">&#x27;get&#x27;</span>,    data: userFindData  &#125;&#125;<span class="hljs-comment">// 保存.</span><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">return</span> &#123;    url: <span class="hljs-string">&#x27;user/save&#x27;</span>,    type: <span class="hljs-string">&#x27;post&#x27;</span>,    data: &#123;      <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>,      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">null</span>,      <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-number">1</span>    &#125;  &#125;&#125;<span class="hljs-comment">// 批量删除.</span><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">batchDelete</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">return</span> &#123;    url: <span class="hljs-string">&#x27;user/delete&#x27;</span>,    type: <span class="hljs-string">&#x27;post&#x27;</span>,    data: &#123;      <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>,      <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">null</span>,      <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-number">1</span>    &#125;  &#125;&#125;<span class="hljs-comment">// 分页查询.</span><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findPage</span>(<span class="hljs-params">params</span>) </span>&#123;  <span class="hljs-keyword">let</span> findPageData = &#123;    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>,    <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">null</span>,    <span class="hljs-string">&quot;data&quot;</span>: &#123;&#125;  &#125;  <span class="hljs-keyword">let</span> pageNum = <span class="hljs-number">1</span>  <span class="hljs-keyword">let</span> pageSize = <span class="hljs-number">8</span>  <span class="hljs-keyword">if</span> (params !== <span class="hljs-literal">null</span>) &#123;    <span class="hljs-comment">// pageNum = params.pageNum</span>  &#125;  <span class="hljs-keyword">if</span> (params !== <span class="hljs-literal">null</span>) &#123;    <span class="hljs-comment">// pageSize = params.pageSize</span>  &#125;  <span class="hljs-keyword">let</span> content = <span class="hljs-built_in">this</span>.getContent(pageNum, pageSize)  findPageData.data.pageNum = pageNum  findPageData.data.pageSize = pageSize  findPageData.data.totalSize = <span class="hljs-number">50</span>  findPageData.data.content = content  <span class="hljs-keyword">return</span> &#123;    url: <span class="hljs-string">&#x27;user/findPage&#x27;</span>,    type: <span class="hljs-string">&#x27;post&#x27;</span>,    data: findPageData  &#125;&#125;<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getContent</span>(<span class="hljs-params">pageNum, pageSize</span>) </span>&#123;  <span class="hljs-keyword">let</span> content = []  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; pageSize; i++) &#123;    <span class="hljs-keyword">let</span> obj = &#123;&#125;    <span class="hljs-keyword">let</span> index = ((pageNum - <span class="hljs-number">1</span>) * pageSize) + i + <span class="hljs-number">1</span>    obj.id = index    obj.name = <span class="hljs-string">&#x27;mango&#x27;</span> + index    obj.password = <span class="hljs-string">&#x27;9ec9750e709431dad22365cabc5c625482e574c74adaebba7dd02f1129e4ce1d&#x27;</span>    obj.salt = <span class="hljs-string">&#x27;YzcmCZNvbXocrsz9dm8e&#x27;</span>    obj.email = <span class="hljs-string">&#x27;mango&#x27;</span> + index + <span class="hljs-string">&#x27;@123.com&#x27;</span>    obj.mobile = <span class="hljs-string">&#x27;18688982323&#x27;</span>    obj.status = <span class="hljs-number">1</span>    obj.deptId = <span class="hljs-number">12</span>    obj.deptName = <span class="hljs-string">&#x27;技术部&#x27;</span>    <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> === <span class="hljs-number">0</span>) &#123;      obj.deptId = <span class="hljs-number">13</span>      obj.deptName = <span class="hljs-string">&#x27;市场部&#x27;</span>    &#125;    obj.createBy= <span class="hljs-string">&#x27;admin&#x27;</span>    obj.createTime= <span class="hljs-string">&#x27;2018-08-14 11:11:11&#x27;</span>    obj.createBy= <span class="hljs-string">&#x27;admin&#x27;</span>    obj.createTime= <span class="hljs-string">&#x27;2018-09-14 12:12:12&#x27;</span>    content.push(obj)  &#125;  <span class="hljs-keyword">return</span> content&#125;<span class="hljs-comment">// 查找用户的菜单权限标识集合.</span><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">findPermissions</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">let</span> permsData = &#123;    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">200</span>,    <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-literal">null</span>,    <span class="hljs-string">&quot;data&quot;</span>: [      <span class="hljs-literal">null</span>,      <span class="hljs-string">&quot;sys:user:view&quot;</span>,      <span class="hljs-string">&quot;sys:menu:delete&quot;</span>,      <span class="hljs-string">&quot;sys:dept:edit&quot;</span>,      <span class="hljs-string">&quot;sys:dict:edit&quot;</span>,      <span class="hljs-string">&quot;sys:dict:delete&quot;</span>,      <span class="hljs-string">&quot;sys:menu:add&quot;</span>,      <span class="hljs-string">&quot;sys:user:add&quot;</span>,      <span class="hljs-string">&quot;sys:log:view&quot;</span>,      <span class="hljs-string">&quot;sys:dept:delete&quot;</span>,      <span class="hljs-string">&quot;sys:role:edit&quot;</span>,      <span class="hljs-string">&quot;sys:role:view&quot;</span>,      <span class="hljs-string">&quot;sys:dict:view&quot;</span>,      <span class="hljs-string">&quot;sys:user:edit&quot;</span>,      <span class="hljs-string">&quot;sys:user:delete&quot;</span>,      <span class="hljs-string">&quot;sys:dept:view&quot;</span>,      <span class="hljs-string">&quot;sys:dept:add&quot;</span>,      <span class="hljs-string">&quot;sys:role:delete&quot;</span>,      <span class="hljs-string">&quot;sys:menu:view&quot;</span>,      <span class="hljs-string">&quot;sys:menu:edit&quot;</span>,      <span class="hljs-string">&quot;sys:dict:add&quot;</span>,      <span class="hljs-string">&quot;sys:role:add&quot;</span>    ]  &#125;  <span class="hljs-keyword">return</span> &#123;    url: <span class="hljs-string">&#x27;user/findPermissions&#x27;</span>,    type: <span class="hljs-string">&#x27;get&#x27;</span>,    data: permsData  &#125;&#125;</code></pre><p>前台访问接口:</p><p><code>src/http/modules/user.js</code>:</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../axios&#x27;</span><span class="hljs-comment">/**</span><span class="hljs-comment"> * 用户管理模块.</span><span class="hljs-comment"> */</span><span class="hljs-comment">// 查询用户.</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> findUser = <span class="hljs-function">() =&gt;</span> &#123;  <span class="hljs-keyword">return</span> axios(&#123;    url: <span class="hljs-string">&#x27;/user/find&#x27;</span>,    method: <span class="hljs-string">&#x27;get&#x27;</span>  &#125;)&#125;<span class="hljs-comment">// 保存.</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> save = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;  <span class="hljs-keyword">return</span> axios(&#123;    url: <span class="hljs-string">&#x27;/user/save&#x27;</span>,    method: <span class="hljs-string">&#x27;post&#x27;</span>,    data  &#125;)&#125;<span class="hljs-comment">// 删除.</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> batchDelete = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;  <span class="hljs-keyword">return</span> axios(&#123;    url: <span class="hljs-string">&#x27;/user/delete&#x27;</span>,    method: <span class="hljs-string">&#x27;post&#x27;</span>,    data  &#125;)&#125;<span class="hljs-comment">// 分页查询.</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> findPage = <span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;  <span class="hljs-keyword">return</span> axios(&#123;    url: <span class="hljs-string">&#x27;/user/findPage&#x27;</span>,    method: <span class="hljs-string">&#x27;post&#x27;</span>,    data  &#125;)&#125;<span class="hljs-comment">// 查找用户的菜单权限标识集合.</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> findPermissions = <span class="hljs-function">(<span class="hljs-params">params</span>) =&gt;</span> &#123;  <span class="hljs-keyword">return</span> axios(&#123;    url: <span class="hljs-string">&#x27;/user/findPermissions&#x27;</span>,    method: <span class="hljs-string">&#x27;post&#x27;</span>,    params  &#125;)&#125;</code></pre><p><code>src/http/api.js</code>:</p><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><span class="hljs-comment"> * 接口统一集成模块.</span><span class="hljs-comment"> * 此模块是一个聚合模块, 汇合modules目录下所有子模块的API.</span><span class="hljs-comment"> */</span><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> login  <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/login&#x27;</span><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> user <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./modules/user&#x27;</span><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  login,  user,&#125;</code></pre><p>前台访问方式:</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><span class="hljs-comment">// import mock from &#x27;@/mock/mock.js&#x27;</span><span class="hljs-keyword">import</span> mock <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/mock/index.js&#x27;</span><span class="hljs-keyword">import</span> &#123; findUser &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../http/modules/user&#x27;</span>;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;  name: <span class="hljs-string">&#x27;Home&#x27;</span>,  methods: &#123;    <span class="hljs-function"><span class="hljs-title">getUser</span>(<span class="hljs-params"></span>)</span> &#123;      <span class="hljs-built_in">this</span>.$api.user.findUser().then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;        alert(<span class="hljs-built_in">JSON</span>.stringify(res.data))      &#125;)    &#125;  &#125;&#125;</code></pre><h3 id="12-安装第三方图标库"><a href="#12-安装第三方图标库" class="headerlink" title="12. 安装第三方图标库"></a>12. 安装第三方图标库</h3><p>Font Awesome提供了可缩放的矢量图标.</p><p>安装依赖:</p><pre><code class="hljs bash">yarn add font-awesome@4.7.0</code></pre><p>项目引入:</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;font-awesome/css/font-awesome.min.css&#x27;</span></code></pre><p>页面引入:</p><pre><code class="hljs vue">&lt;li class&#x3D;&quot;fa fa-home fa-lg&quot;&gt;&lt;&#x2F;li&gt;</code></pre><h3 id="13-多语言国际化"><a href="#13-多语言国际化" class="headerlink" title="13. 多语言国际化"></a>13. 多语言国际化</h3><p>安装依赖:</p><pre><code class="hljs javascript">yarn add vue-i18n@<span class="hljs-number">8.7</span><span class="hljs-number">.0</span></code></pre><p>添加配置:</p><p><code>src/i18n/index.js</code>:</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><span class="hljs-keyword">import</span> VueI18n <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-i18n&#x27;</span>Vue.use(VueI18n)<span class="hljs-comment">// 注册i18n实例并引入语言文件, 文件格式等一下解析.</span><span class="hljs-keyword">const</span> i18n = <span class="hljs-keyword">new</span> VueI18n(&#123;  locale: <span class="hljs-string">&#x27;zh_cn&#x27;</span>,  messages: &#123;    <span class="hljs-string">&#x27;zh_cn&#x27;</span>: <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@/assets/languages/zh_cn.json&#x27;</span>),    <span class="hljs-string">&#x27;en_us&#x27;</span>: <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;@/assets/languages/en_us.json&#x27;</span>)  &#125;&#125;)<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> i18n</code></pre><p>添加静态国际化文件:</p><p><code>src/assets/languages/en_us.json</code>:</p><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;common&quot;</span>: &#123;    <span class="hljs-attr">&quot;home&quot;</span>: <span class="hljs-string">&quot;Home&quot;</span>,    <span class="hljs-attr">&quot;login&quot;</span>: <span class="hljs-string">&quot;Login&quot;</span>,    <span class="hljs-attr">&quot;logout&quot;</span>: <span class="hljs-string">&quot;Logout&quot;</span>,    <span class="hljs-attr">&quot;doc&quot;</span>: <span class="hljs-string">&quot;Document&quot;</span>,    <span class="hljs-attr">&quot;blog&quot;</span>: <span class="hljs-string">&quot;Blog&quot;</span>,    <span class="hljs-attr">&quot;projectRepo&quot;</span>: <span class="hljs-string">&quot;Project&quot;</span>,    <span class="hljs-attr">&quot;myMsg&quot;</span>: <span class="hljs-string">&quot;My Message&quot;</span>,    <span class="hljs-attr">&quot;config&quot;</span>: <span class="hljs-string">&quot;Config&quot;</span>,    <span class="hljs-attr">&quot;backup&quot;</span>: <span class="hljs-string">&quot;Backup&quot;</span>,    <span class="hljs-attr">&quot;restore&quot;</span>: <span class="hljs-string">&quot;Restore&quot;</span>,    <span class="hljs-attr">&quot;backupRestore&quot;</span>: <span class="hljs-string">&quot;Backup Restore&quot;</span>,    <span class="hljs-attr">&quot;versionName&quot;</span>: <span class="hljs-string">&quot;Version&quot;</span>,    <span class="hljs-attr">&quot;exit&quot;</span>: <span class="hljs-string">&quot;Exit&quot;</span>  &#125;,  <span class="hljs-attr">&quot;action&quot;</span>: &#123;    <span class="hljs-attr">&quot;operation&quot;</span>: <span class="hljs-string">&quot;Operation&quot;</span>,    <span class="hljs-attr">&quot;add&quot;</span>: <span class="hljs-string">&quot;Add&quot;</span>,    <span class="hljs-attr">&quot;edit&quot;</span>: <span class="hljs-string">&quot;Edit&quot;</span>,    <span class="hljs-attr">&quot;delete&quot;</span>: <span class="hljs-string">&quot;Delete&quot;</span>,    <span class="hljs-attr">&quot;batchDelete&quot;</span>: <span class="hljs-string">&quot;Batch Delete&quot;</span>,    <span class="hljs-attr">&quot;search&quot;</span>: <span class="hljs-string">&quot;Search&quot;</span>,    <span class="hljs-attr">&quot;loading&quot;</span>: <span class="hljs-string">&quot;loading&quot;</span>,    <span class="hljs-attr">&quot;submit&quot;</span>: <span class="hljs-string">&quot;Submit&quot;</span>,    <span class="hljs-attr">&quot;comfirm&quot;</span>: <span class="hljs-string">&quot;Comfirm&quot;</span>,    <span class="hljs-attr">&quot;cancel&quot;</span>: <span class="hljs-string">&quot;Cancel&quot;</span>,    <span class="hljs-attr">&quot;reset&quot;</span>: <span class="hljs-string">&quot;Reset&quot;</span>  &#125;&#125;</code></pre><p><code>src/assets/languages/zh_cn.json</code>:</p><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;common&quot;</span>: &#123;    <span class="hljs-attr">&quot;home&quot;</span>: <span class="hljs-string">&quot;首页&quot;</span>,    <span class="hljs-attr">&quot;login&quot;</span>: <span class="hljs-string">&quot;登录&quot;</span>,    <span class="hljs-attr">&quot;logout&quot;</span>: <span class="hljs-string">&quot;退出登录&quot;</span>,    <span class="hljs-attr">&quot;doc&quot;</span>: <span class="hljs-string">&quot;文档&quot;</span>,    <span class="hljs-attr">&quot;blog&quot;</span>: <span class="hljs-string">&quot;博客&quot;</span>,    <span class="hljs-attr">&quot;projectRepo&quot;</span>: <span class="hljs-string">&quot;项目&quot;</span>,    <span class="hljs-attr">&quot;myMsg&quot;</span>: <span class="hljs-string">&quot;我的消息&quot;</span>,    <span class="hljs-attr">&quot;config&quot;</span>: <span class="hljs-string">&quot;系统配置&quot;</span>,    <span class="hljs-attr">&quot;backup&quot;</span>: <span class="hljs-string">&quot;备份&quot;</span>,    <span class="hljs-attr">&quot;restore&quot;</span>: <span class="hljs-string">&quot;还原&quot;</span>,    <span class="hljs-attr">&quot;backupRestore&quot;</span>: <span class="hljs-string">&quot;备份还原&quot;</span>,    <span class="hljs-attr">&quot;versionName&quot;</span>: <span class="hljs-string">&quot;版本名称&quot;</span>,    <span class="hljs-attr">&quot;exit&quot;</span>: <span class="hljs-string">&quot;退出&quot;</span>  &#125;,  <span class="hljs-attr">&quot;action&quot;</span>: &#123;    <span class="hljs-attr">&quot;operation&quot;</span>: <span class="hljs-string">&quot;操作&quot;</span>,    <span class="hljs-attr">&quot;add&quot;</span>: <span class="hljs-string">&quot;新增&quot;</span>,    <span class="hljs-attr">&quot;edit&quot;</span>: <span class="hljs-string">&quot;编辑&quot;</span>,    <span class="hljs-attr">&quot;delete&quot;</span>: <span class="hljs-string">&quot;删除&quot;</span>,    <span class="hljs-attr">&quot;batchDelete&quot;</span>: <span class="hljs-string">&quot;批量删除&quot;</span>,    <span class="hljs-attr">&quot;search&quot;</span>: <span class="hljs-string">&quot;查询&quot;</span>,    <span class="hljs-attr">&quot;loading&quot;</span>: <span class="hljs-string">&quot;拼命加载中&quot;</span>,    <span class="hljs-attr">&quot;submit&quot;</span>: <span class="hljs-string">&quot;提交&quot;</span>,    <span class="hljs-attr">&quot;comfirm&quot;</span>: <span class="hljs-string">&quot;确定&quot;</span>,    <span class="hljs-attr">&quot;cancel&quot;</span>: <span class="hljs-string">&quot;取消&quot;</span>,    <span class="hljs-attr">&quot;reset&quot;</span>: <span class="hljs-string">&quot;重置&quot;</span>  &#125;&#125;</code></pre><p>在main.js中引入i18n:</p><p><code>src/main.js</code>:</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> i18n <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./i18n&#x27;</span><span class="hljs-keyword">new</span> Vue(&#123;  el: <span class="hljs-string">&#x27;#app&#x27;</span>,  i18n,  router,  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App)  <span class="hljs-comment">// components: &#123; App &#125;,</span>  <span class="hljs-comment">// template: &#x27;&lt;App/&gt;&#x27;</span>&#125;)</code></pre><p>字符引用</p><p><code>src/views/Home.vue</code>:</p><p>通过<code>this.$i18n.locale = lang</code>方式就可以全局切换语言, Vue框架会根据locale的值ygbc</p><pre><code class="hljs vue">&lt;template&gt;  &lt;div class&#x3D;&quot;page&quot;&gt;    &lt;h2&gt;Home Page&lt;&#x2F;h2&gt;    &lt;h3&gt;&#123;&#123;$t(&#39;common.doc&#39;)&#125;&#125;&lt;&#x2F;h3&gt;    &lt;el-button type&#x3D;&quot;success&quot; @click&#x3D;&quot;changeLanguage(&#39;zh_cn&#39;)&quot;&gt;简体中文&lt;&#x2F;el-button&gt;    &lt;el-button type&#x3D;&quot;success&quot; @click&#x3D;&quot;changeLanguage(&#39;en_us&#39;)&quot;&gt;English&lt;&#x2F;el-button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;    &#x2F;&#x2F; 语言切换.    changeLanguage(lang) &#123;      lang &#x3D;&#x3D;&#x3D; &#39;&#39; ? &#39;zh_cn&#39; : lang      this.$i18n.locale &#x3D; lang      this.langVisible &#x3D; false    &#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>npm</category>
      
    </categories>
    
    
    <tags>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-security学习记录一</title>
    <link href="/2022/07/10/spring-security-inited/"/>
    <url>/2022/07/10/spring-security-inited/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="spring-security学习记录一"><a href="#spring-security学习记录一" class="headerlink" title="spring-security学习记录一"></a>spring-security学习记录一</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>Spring Security 是 Spring 社区的一个顶级项目，也是 Spring Boot 官方推荐使用的安全框架.<br>除了常规的认证（Authentication）和授权（Authorization）之外，Spring Security还提供了诸如ACLs，LDAP，JAAS，CAS等高级特性以满足复杂场景下的安全需求.</p><p>Spring Security 应用级别的安全主要包含两个主要部分，即登录认证（Authentication）和访问授权（Authorization）.<br>首先用户登录的时候传入登录信息，登录验证器完成登录认证并将登录认证好的信息存储到请求上下文，然后在进行其他操作，如接口访问、方法调用时，权限认证器从上下文中获取登录认证信息，然后根据认证信息获取权限信息，通过权限信息和特定的授权策略决定是否授权.</p><h4 id="2-代码解析"><a href="#2-代码解析" class="headerlink" title="2.代码解析"></a>2.代码解析</h4><h5 id="登录认证过滤器"><a href="#登录认证过滤器" class="headerlink" title="登录认证过滤器"></a>登录认证过滤器</h5><p>在继承 WebSecurityConfigurerAdapter 的配置类中的 configure(HttpSecurity http) 方法中有配置过滤器:</p><p><code>WebSecurityConfig.java</code>:</p><pre><code class="hljs java"><span class="hljs-comment">// token验证过滤器.</span>http.addFilterBefore(  <span class="hljs-keyword">new</span> JwtAuthenticationFilter(authenticationManager()),  UsernamePasswordAuthenticationFilter.class);</code></pre><p>配置使用内置的登录验证过滤器，默认实现为 UsernamePasswordAuthenticationFilter.</p><p>看 UsernamePasswordAuthenticationFilter 过滤器的构造函数内绑定了 POST 类型的 /login 请求，<br>也就是说，如果配置了 formLogin 的相关信息，那么在使用 POST 类型的 /login URL进行登录的时候就会被这个过滤器拦截，并进行登录验证.</p><p><code>UsernamePasswordAuthenticationFilter.java</code>:</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UsernamePasswordAuthenticationFilter</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-keyword">super</span>(<span class="hljs-keyword">new</span> AntPathRequestMatcher(<span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>));&#125;</code></pre><p>UsernamePasswordAuthenticationFilter，发现它继承了 AbstractAuthenticationProcessingFilter，<br>AbstractAuthenticationProcessingFilter 中的 doFilter 包含了触发登录认证执行流程的相关逻辑.</p><p><code>attemptAuthentication(request, response)</code><br>这是 AbstractAuthenticationProcessingFilter 中的一个抽象方法，包含登录主逻辑，由其子类实现具体的登录验证，如 UsernamePasswordAuthenticationFilter 是使用表单方式登录的具体实现.<br>如果是非表单登录的方式，如JNDI等其他方式登录的可以通过继承 AbstractAuthenticationProcessingFilter 自定义登录实现.</p><p><code>AbstractAuthenticationProcessingFilter.java</code>:</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;  HttpServletRequest request = (HttpServletRequest)req;  HttpServletResponse response = (HttpServletResponse)res;  <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.requiresAuthentication(request, response)) &#123;    chain.doFilter(request, response);  &#125; <span class="hljs-keyword">else</span> &#123;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isDebugEnabled()) &#123;      <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">&quot;Request is to process authentication&quot;</span>);    &#125;    Authentication authResult;    <span class="hljs-keyword">try</span> &#123;      authResult = <span class="hljs-keyword">this</span>.attemptAuthentication(request, response);      <span class="hljs-keyword">if</span> (authResult == <span class="hljs-keyword">null</span>) &#123;        <span class="hljs-keyword">return</span>;      &#125;      <span class="hljs-keyword">this</span>.sessionStrategy.onAuthentication(authResult, request, response);    &#125; <span class="hljs-keyword">catch</span> (InternalAuthenticationServiceException var8) &#123;      <span class="hljs-keyword">this</span>.logger.error(<span class="hljs-string">&quot;An internal error occurred while trying to authenticate the user.&quot;</span>, var8);      <span class="hljs-keyword">this</span>.unsuccessfulAuthentication(request, response, var8);      <span class="hljs-keyword">return</span>;    &#125; <span class="hljs-keyword">catch</span> (AuthenticationException var9) &#123;      <span class="hljs-keyword">this</span>.unsuccessfulAuthentication(request, response, var9);      <span class="hljs-keyword">return</span>;    &#125;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.continueChainBeforeSuccessfulAuthentication) &#123;      chain.doFilter(request, response);    &#125;    <span class="hljs-keyword">this</span>.successfulAuthentication(request, response, chain, authResult);  &#125;&#125;</code></pre><p><code>UsernamePasswordAuthenticationFilter.java</code></p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Authentication <span class="hljs-title">attemptAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.postOnly &amp;&amp; !request.getMethod().equals(<span class="hljs-string">&quot;POST&quot;</span>)) &#123;    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> AuthenticationServiceException(<span class="hljs-string">&quot;Authentication method not supported: &quot;</span> + request.getMethod());  &#125; <span class="hljs-keyword">else</span> &#123;    String username = <span class="hljs-keyword">this</span>.obtainUsername(request);    String password = <span class="hljs-keyword">this</span>.obtainPassword(request);    <span class="hljs-keyword">if</span> (username == <span class="hljs-keyword">null</span>) &#123;      username = <span class="hljs-string">&quot;&quot;</span>;    &#125;    <span class="hljs-keyword">if</span> (password == <span class="hljs-keyword">null</span>) &#123;      password = <span class="hljs-string">&quot;&quot;</span>;    &#125;    username = username.trim();    UsernamePasswordAuthenticationToken authRequest = <span class="hljs-keyword">new</span> UsernamePasswordAuthenticationToken(username, password);    <span class="hljs-keyword">this</span>.setDetails(request, authRequest);    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getAuthenticationManager().authenticate(authRequest);  &#125;&#125;</code></pre><p><code>successfulAuthentication</code>方法:<br>登录成功之后，将认证后的 Authentication 对象存储到请求线程上下文，这样在授权阶段就可以获取到 Authentication 认证信息，并利用 Authentication 内的权限信息进行访问控制判断.</p><p><code>AbstractAuthenticationProcessingFilter.java</code>:</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">successfulAuthentication</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.logger.isDebugEnabled()) &#123;    <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">&quot;Authentication success. Updating SecurityContextHolder to contain: &quot;</span> + authResult);  &#125;  SecurityContextHolder.getContext().setAuthentication(authResult);  <span class="hljs-keyword">this</span>.rememberMeServices.loginSuccess(request, response, authResult);  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.eventPublisher != <span class="hljs-keyword">null</span>) &#123;    <span class="hljs-keyword">this</span>.eventPublisher.publishEvent(<span class="hljs-keyword">new</span> InteractiveAuthenticationSuccessEvent(authResult, <span class="hljs-keyword">this</span>.getClass()));  &#125;  <span class="hljs-keyword">this</span>.successHandler.onAuthenticationSuccess(request, response, authResult);&#125;</code></pre><p>Spring Security的登录认证过程是委托给 AuthenticationManager 完成的，它先是解析出用户名和密码.<br>然后把用户名和密码封装到一个UsernamePasswordAuthenticationToken 中，传递给 AuthenticationManager，交由 AuthenticationManager 完成实际的登录认证过程.</p><p><code>AuthenticationManager.java</code>:</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AuthenticationManager</span> </span>&#123;    <span class="hljs-function">Authentication <span class="hljs-title">authenticate</span><span class="hljs-params">(Authentication var1)</span> <span class="hljs-keyword">throws</span> AuthenticationException</span>;&#125;</code></pre><p><code>ProviderManager.java</code>:</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Authentication <span class="hljs-title">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;  Class&lt;? extends Authentication&gt; toTest = authentication.getClass();  AuthenticationException lastException = <span class="hljs-keyword">null</span>;  Authentication result = <span class="hljs-keyword">null</span>;  Authentication parentResult = <span class="hljs-keyword">null</span>;  <span class="hljs-keyword">boolean</span> debug = logger.isDebugEnabled();  Iterator var7 = <span class="hljs-keyword">this</span>.getProviders().iterator();  <span class="hljs-keyword">while</span>(var7.hasNext()) &#123;    AuthenticationProvider provider = (AuthenticationProvider)var7.next();    <span class="hljs-keyword">if</span> (provider.supports(toTest)) &#123;      <span class="hljs-keyword">if</span> (debug) &#123;        logger.debug(<span class="hljs-string">&quot;Authentication attempt using &quot;</span> + provider.getClass().getName());      &#125;      <span class="hljs-keyword">try</span> &#123;        result = provider.authenticate(authentication);        <span class="hljs-keyword">if</span> (result != <span class="hljs-keyword">null</span>) &#123;          <span class="hljs-keyword">this</span>.copyDetails(authentication, result);          <span class="hljs-keyword">break</span>;        &#125;      &#125; <span class="hljs-keyword">catch</span> (AccountStatusException var12) &#123;        <span class="hljs-keyword">this</span>.prepareException(var12, authentication);        <span class="hljs-keyword">throw</span> var12;      &#125; <span class="hljs-keyword">catch</span> (InternalAuthenticationServiceException var13) &#123;        <span class="hljs-keyword">this</span>.prepareException(var13, authentication);        <span class="hljs-keyword">throw</span> var13;      &#125; <span class="hljs-keyword">catch</span> (AuthenticationException var14) &#123;        lastException = var14;      &#125;    &#125;  &#125;  ...</code></pre><p>验证方式的多样化，AuthenticationProvider 衍生出多种类型的实现，<br>AbstractUserDetailsAuthenticationProvider 是 AuthenticationProvider 的抽象实现，定义了较为统一的验证逻辑，<br>各种验证方式可以选择直接继承 AbstractUserDetailsAuthenticationProvider 完成登录认证，如 DaoAuthenticationProvider 就是继承了此抽象类，完成了从DAO方式获取验证需要的用户信息的.</p><p><code>AbstractUserDetailsAuthenticationProvider.java</code>:</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Authentication <span class="hljs-title">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;  Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication, () -&gt; &#123;    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.messages.getMessage(<span class="hljs-string">&quot;AbstractUserDetailsAuthenticationProvider.onlySupports&quot;</span>, <span class="hljs-string">&quot;Only UsernamePasswordAuthenticationToken is supported&quot;</span>);  &#125;);  String username = authentication.getPrincipal() == <span class="hljs-keyword">null</span> ? <span class="hljs-string">&quot;NONE_PROVIDED&quot;</span> : authentication.getName();  <span class="hljs-keyword">boolean</span> cacheWasUsed = <span class="hljs-keyword">true</span>;  UserDetails user = <span class="hljs-keyword">this</span>.userCache.getUserFromCache(username);  <span class="hljs-keyword">if</span> (user == <span class="hljs-keyword">null</span>) &#123;    cacheWasUsed = <span class="hljs-keyword">false</span>;    <span class="hljs-keyword">try</span> &#123;      <span class="hljs-comment">// 子类根据自身情况从指定的地方加载认证需要的用户信息.</span>      user = <span class="hljs-keyword">this</span>.retrieveUser(username, (UsernamePasswordAuthenticationToken)authentication);    &#125; <span class="hljs-keyword">catch</span> (UsernameNotFoundException var6) &#123;      <span class="hljs-keyword">this</span>.logger.debug(<span class="hljs-string">&quot;User &#x27;&quot;</span> + username + <span class="hljs-string">&quot;&#x27; not found&quot;</span>);      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.hideUserNotFoundExceptions) &#123;        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BadCredentialsException(<span class="hljs-keyword">this</span>.messages.getMessage(<span class="hljs-string">&quot;AbstractUserDetailsAuthenticationProvider.badCredentials&quot;</span>, <span class="hljs-string">&quot;Bad credentials&quot;</span>));      &#125;      <span class="hljs-keyword">throw</span> var6;    &#125;    Assert.notNull(user, <span class="hljs-string">&quot;retrieveUser returned null - a violation of the interface contract&quot;</span>);  &#125;  <span class="hljs-keyword">try</span> &#123;    <span class="hljs-keyword">this</span>.preAuthenticationChecks.check(user);    <span class="hljs-keyword">this</span>.additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken)authentication);  &#125; <span class="hljs-keyword">catch</span> (AuthenticationException var7) &#123;    <span class="hljs-keyword">if</span> (!cacheWasUsed) &#123;      <span class="hljs-keyword">throw</span> var7;    &#125;    cacheWasUsed = <span class="hljs-keyword">false</span>;    user = <span class="hljs-keyword">this</span>.retrieveUser(username, (UsernamePasswordAuthenticationToken)authentication);        <span class="hljs-comment">// 前置检查，一般是检查账号状态，如是否锁定之类.</span>    <span class="hljs-keyword">this</span>.preAuthenticationChecks.check(user);    <span class="hljs-comment">// 进行一般逻辑认证，如 DaoAuthenticationProvider 实现中的密码验证就是在这里完成的.</span>    <span class="hljs-keyword">this</span>.additionalAuthenticationChecks(user, (UsernamePasswordAuthenticationToken)authentication);  &#125;  <span class="hljs-comment">// 后置检查，如可以检查密码是否过期之类.</span>  <span class="hljs-keyword">this</span>.postAuthenticationChecks.check(user);  <span class="hljs-keyword">if</span> (!cacheWasUsed) &#123;    <span class="hljs-keyword">this</span>.userCache.putUserInCache(user);  &#125;  Object principalToReturn = user;  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.forcePrincipalAsString) &#123;    principalToReturn = user.getUsername();  &#125;  <span class="hljs-comment">// 验证成功之后返回包含完整认证信息的 Authentication 对象.</span>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.createSuccessAuthentication(principalToReturn, authentication, user);&#125;</code></pre><p>AuthenticationProvider 通过 retrieveUser(String username, UsernamePasswordAuthenticationToken authentication) 获取验证信息，对于我们一般所用的 DaoAuthenticationProvider 是由 UserDetailsService 专门负责获取验证信息的.</p><p><code>DaoAuthenticationProvider.java</code>:</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> UserDetails <span class="hljs-title">retrieveUser</span><span class="hljs-params">(String username, UsernamePasswordAuthenticationToken authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;  <span class="hljs-keyword">this</span>.prepareTimingAttackProtection();  <span class="hljs-keyword">try</span> &#123;    UserDetails loadedUser = <span class="hljs-keyword">this</span>.getUserDetailsService().loadUserByUsername(username);    <span class="hljs-keyword">if</span> (loadedUser == <span class="hljs-keyword">null</span>) &#123;      <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InternalAuthenticationServiceException(<span class="hljs-string">&quot;UserDetailsService returned null, which is an interface contract violation&quot;</span>);    &#125; <span class="hljs-keyword">else</span> &#123;      <span class="hljs-keyword">return</span> loadedUser;    &#125;  &#125; <span class="hljs-keyword">catch</span> (UsernameNotFoundException var4) &#123;    <span class="hljs-keyword">this</span>.mitigateAgainstTimingAttack(authentication);    <span class="hljs-keyword">throw</span> var4;  &#125; <span class="hljs-keyword">catch</span> (InternalAuthenticationServiceException var5) &#123;    <span class="hljs-keyword">throw</span> var5;  &#125; <span class="hljs-keyword">catch</span> (Exception var6) &#123;    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InternalAuthenticationServiceException(var6.getMessage(), var6);  &#125;&#125;</code></pre><p>UserDetailsService 接口只有一个方法，loadUserByUsername(String username)，一般需要我们实现此接口方法，根据用户名加载登录认证和访问授权所需要的信息，并返回一个 UserDetails的实现类，后面登录认证和访问授权都需要用到此中的信息.</p><p><code>UserDetailsService.java</code>:</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserDetailsService</span> </span>&#123;    <span class="hljs-function">UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String var1)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException</span>;&#125;</code></pre><p>UserDetails 提供了一个默认实现 User，主要包含用户名（username）、密码(password)、权限（authorities）和一些账号或密码状态的标识。<br>如果默认实现满足不了你的需求，可以根据需求定制自己的 UserDetails，然后在 UserDetailsService 的 loadUserByUsername 中返回即可.</p><h5 id="访问授权"><a href="#访问授权" class="headerlink" title="访问授权"></a>访问授权</h5><p>访问授权主要分为两种：通过URL方式的接口访问控制和方法调用的权限控制。</p><h5 id="接口访问权限"><a href="#接口访问权限" class="headerlink" title="接口访问权限"></a>接口访问权限</h5><p>在通过比如浏览器使用URL访问后台接口时，是否允许访问此URL，就是接口访问权限.<br>在进行接口访问时，会由 FilterSecurityInterceptor 进行拦截并进行授权.<br>FilterSecurityInterceptor 继承了 AbstractSecurityInterceptor 并实现了 javax.servlet.Filter 接口， 所以在URL访问的时候都会被过滤器拦截.</p><h5 id="方法调用权限"><a href="#方法调用权限" class="headerlink" title="方法调用权限"></a>方法调用权限</h5><p>在进行后台方法调用时，是否允许该方法调用，就是方法调用权限.<br>比如在方法上添加了此类注解 @PreAuthorize(“hasRole(‘ROLE_ADMIN’)”) ，Security 方法注解的支持需要在任何配置类中（如 WebSecurityConfigurerAdapter ）添加 @EnableGlobalMethodSecurity(prePostEnabled = true) 开启，才能够使用.</p><p><code>WebSecurityConfig.java</code>:</p><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebSecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;&#125;</code></pre><p><strong><u>PS: 本文为学习记录, 仅供学习与参考.</u></strong></p>]]></content>
    
    
    <categories>
      
      <category>spring</category>
      
      <category>security</category>
      
    </categories>
    
    
    <tags>
      
      <tag>security</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring-boot之分页请求封装</title>
    <link href="/2022/06/22/pagehelper-findpage/"/>
    <url>/2022/06/22/pagehelper-findpage/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="spring-boot之分页请求封装"><a href="#spring-boot之分页请求封装" class="headerlink" title="spring-boot之分页请求封装"></a>spring-boot之分页请求封装</h3><h4 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1.工程结构"></a>1.工程结构</h4><ul><li>mango-platform : 主工程包.</li><li>mango-admin : 后台管理模块，包含用户、角色、菜单管理等.</li><li>mango-common : 公共代码模块，主要放置一些工具类.</li><li>mango-core : 核心业务代码模块，主要封装公共业务模块.</li></ul><p>参与的github地址:</p><pre><code class="hljs bash">https://github.com/LingChenBill/mango-platform.git</code></pre><h4 id="2-POM文件"><a href="#2-POM文件" class="headerlink" title="2.POM文件"></a>2.POM文件</h4><p>mango-platform的<code>pom.xml</code>:</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.iplume<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mango-platform<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mango-platform<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Mango platform project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>    <span class="hljs-comment">&lt;!--modules config.--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>mango-admin<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>mango-common<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>mango-core<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>mango-admin之<code>pom.xml</code>:</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.iplume<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mango-admin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mango-admin<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>mango-admin project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">swagger.version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">swagger.version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mybatis.version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">log4j.version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">log4j.version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- swagger --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;swagger.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- mybatis --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- mysql --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- druid --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!-- log4j --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-comment">&lt;!--mango core.--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.iplume<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mango-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-comment">&lt;!--打包时复制Mybatis的映射文件.--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/sqlmap/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>mango-common之<code>pom.xml</code>:</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.iplume<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mango-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mango-common<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>mango-core之<code>pom.xml</code>:</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.iplume<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mango-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mango-core<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Mango core project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">pagehelper.version</span>&gt;</span>1.2.5<span class="hljs-tag">&lt;/<span class="hljs-name">pagehelper.version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-comment">&lt;!-- pagehelper --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.iplume<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mango-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>$&#123;java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h4 id="3-通用CURD接口"><a href="#3-通用CURD接口" class="headerlink" title="3.通用CURD接口"></a>3.通用CURD接口</h4><p>CurdService 是对通用增、删、改、查接口的封装，统一定义了包含保存、删除、批量删除、根据 DD 查询和分页查询方法，<br>一般的业务 Service 接口会继承此接口，提供基础增、删、改、查服务，这几个接口能满足大部分基础 CURD 业务的需求.</p><p><code>com/iplume/core/service/CurdService.java</code> : </p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.core.service;<span class="hljs-keyword">import</span> com.iplume.core.page.PageResult;<span class="hljs-keyword">import</span> com.iplume.core.page.PageRequest;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 通用CURD接口.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/20</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CurdService</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 保存操作.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> record</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">save</span><span class="hljs-params">(T record)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 删除操作.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> record</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">delete</span><span class="hljs-params">(T record)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 批量删除操作.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> records</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">delete</span><span class="hljs-params">(List&lt;T&gt; records)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 根据ID查询.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function">T <span class="hljs-title">findById</span><span class="hljs-params">(Long id)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 分页查询.</span><span class="hljs-comment">     * 这里统一封装了分页请求和结果，避免直接引入具体框架的分页对象, 如MyBatis或JPA的分页对象.</span><span class="hljs-comment">     * 从而避免因为替换ORM框架而导致服务层、控制层的分页接口也需要变动的情况，替换ORM框架也不会.</span><span class="hljs-comment">     * 影响服务层以上的分页接口，起到了解耦的作用.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageRequest 自定义，统一分页查询请求.</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> PageResult 自定义，统一分页查询结果.</span><span class="hljs-comment">     */</span>    <span class="hljs-function">PageResult <span class="hljs-title">findPage</span><span class="hljs-params">(PageRequest pageRequest)</span></span>;&#125;</code></pre><h4 id="4-分页请求封装"><a href="#4-分页请求封装" class="headerlink" title="4.分页请求封装"></a>4.分页请求封装</h4><p><code>com/iplume/core/page/PageRequest.java</code> : </p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.core.page;<span class="hljs-keyword">import</span> java.util.HashMap;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 分页请求.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/20</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageRequest</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 当前页码.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pageNum = <span class="hljs-number">1</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 每页数量.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pageSize = <span class="hljs-number">10</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询参数.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; params = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPageNum</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> pageNum;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPageNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageNum)</span> </span>&#123;        <span class="hljs-keyword">this</span>.pageNum = pageNum;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPageSize</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> pageSize;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPageSize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageSize)</span> </span>&#123;        <span class="hljs-keyword">this</span>.pageSize = pageSize;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">getParams</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> params;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setParams</span><span class="hljs-params">(Map&lt;String, Object&gt; params)</span> </span>&#123;        <span class="hljs-keyword">this</span>.params = params;    &#125;&#125;</code></pre><h4 id="5-分页结果封装"><a href="#5-分页结果封装" class="headerlink" title="5.分页结果封装"></a>5.分页结果封装</h4><p><code>com/iplume/core/page/PageResult.java</code> :</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.core.page;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 分页返回结果.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/20</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageResult</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 当前页码.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pageNum;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 每页数量.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pageSize;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 记录总数.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> totalSize;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 页码总数.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> totalPages;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 分页数据.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> List&lt;?&gt; content;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPageNum</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> pageNum;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPageNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageNum)</span> </span>&#123;        <span class="hljs-keyword">this</span>.pageNum = pageNum;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPageSize</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> pageSize;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPageSize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageSize)</span> </span>&#123;        <span class="hljs-keyword">this</span>.pageSize = pageSize;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getTotalSize</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> totalSize;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalSize</span><span class="hljs-params">(<span class="hljs-keyword">long</span> totalSize)</span> </span>&#123;        <span class="hljs-keyword">this</span>.totalSize = totalSize;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getTotalPages</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> totalPages;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalPages</span><span class="hljs-params">(<span class="hljs-keyword">int</span> totalPages)</span> </span>&#123;        <span class="hljs-keyword">this</span>.totalPages = totalPages;    &#125;    <span class="hljs-keyword">public</span> List&lt;?&gt; getContent() &#123;        <span class="hljs-keyword">return</span> content;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setContent</span><span class="hljs-params">(List&lt;?&gt; content)</span> </span>&#123;        <span class="hljs-keyword">this</span>.content = content;    &#125;&#125;</code></pre><h4 id="6-分页助手封装"><a href="#6-分页助手封装" class="headerlink" title="6.分页助手封装"></a>6.分页助手封装</h4><p><code>com/iplume/core/page/MybatisPageHelper.java</code> :</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.core.page;<span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<span class="hljs-keyword">import</span> com.github.pagehelper.PageInfo;<span class="hljs-keyword">import</span> com.iplume.mango.common.utils.ReflectionUtils;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * MyBatis 分页查询助手.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/20</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPageHelper</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String FIND_PAGE = <span class="hljs-string">&quot;findPage&quot;</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 分页查询, 约定查询方法名为 &quot;findPage&quot;.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageRequest 分页请求.</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mapper      Dao对象，MyBatis的 Mapper.</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PageResult <span class="hljs-title">findPage</span><span class="hljs-params">(PageRequest pageRequest, Object mapper)</span> </span>&#123;        <span class="hljs-keyword">return</span> findPage(pageRequest, mapper, FIND_PAGE);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 调用分页插件进行分页查询.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageRequest     分页请求.</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> mapper          Dao对象，MyBatis的 Mapper.</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> queryMethodName 要分页的查询方法名.</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args            方法参数.</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PageResult <span class="hljs-title">findPage</span><span class="hljs-params">(PageRequest pageRequest, Object mapper,</span></span><span class="hljs-function"><span class="hljs-params">                                      String queryMethodName, Object... args)</span> </span>&#123;        <span class="hljs-comment">// 设置分页参数.</span>        <span class="hljs-keyword">int</span> pageNum = pageRequest.getPageNum();        <span class="hljs-keyword">int</span> pageSize = pageRequest.getPageSize();        PageHelper.startPage(pageNum, pageSize);        <span class="hljs-comment">// 利用反射调用查询方法.</span>        Object result = ReflectionUtils.invoke(mapper, queryMethodName, args);        <span class="hljs-keyword">return</span> getPageResult(pageRequest, <span class="hljs-keyword">new</span> PageInfo((List) result));    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 将分页信息封装到统一的接口.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageRequest</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageInfo</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> PageResult <span class="hljs-title">getPageResult</span><span class="hljs-params">(PageRequest pageRequest, PageInfo&lt;?&gt; pageInfo)</span> </span>&#123;        PageResult pageResult = <span class="hljs-keyword">new</span> PageResult();        <span class="hljs-comment">// 当前页码.</span>        pageResult.setPageNum(pageInfo.getPageNum());        <span class="hljs-comment">// 每页数量.</span>        pageResult.setPageSize(pageInfo.getPageSize());        <span class="hljs-comment">// 记录总数.</span>        pageResult.setTotalSize(pageInfo.getTotal());        <span class="hljs-comment">// 页码总数.</span>        pageResult.setTotalPages(pageInfo.getPages());        <span class="hljs-comment">// 分页数据.</span>        pageResult.setContent(pageInfo.getList());        <span class="hljs-keyword">return</span> pageResult;    &#125;&#125;</code></pre><p><code>com/iplume/mango/common/utils/ReflectionUtils.java</code> :</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.mango.common.utils;<span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<span class="hljs-keyword">import</span> java.lang.reflect.Method;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 反射相关辅助方法.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/20</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ReflectionUtils</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 根据方法名调用指定对象的方法.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> object 要调用方法的对象.</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> method 要调用的方法名.</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args   参数对象数组.</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title">invoke</span><span class="hljs-params">(Object object, String method, Object... args)</span> </span>&#123;        Object result = <span class="hljs-keyword">null</span>;        Class&lt;? extends Object&gt; clazz = object.getClass();        Method queryMethod = getMethod(clazz, method, args);        <span class="hljs-keyword">if</span> (queryMethod != <span class="hljs-keyword">null</span>) &#123;            <span class="hljs-keyword">try</span> &#123;                result = queryMethod.invoke(object, args);            &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;                e.printStackTrace();            &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123;                e.printStackTrace();            &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;                e.printStackTrace();            &#125;        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">try</span> &#123;                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> NoSuchMethodException(clazz.getName() + <span class="hljs-string">&quot; 类中没有找到 &quot;</span> + method + <span class="hljs-string">&quot; 方法。&quot;</span>);            &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;                e.printStackTrace();            &#125;        &#125;        <span class="hljs-keyword">return</span> result;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 根据方法名和参数对象查找方法.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> args  参数实例数据.</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Method <span class="hljs-title">getMethod</span><span class="hljs-params">(Class&lt;? extends Object&gt; clazz, String name, Object[] args)</span> </span>&#123;        Method queryMethod = <span class="hljs-keyword">null</span>;        Method[] methods = clazz.getMethods();        <span class="hljs-keyword">for</span> (Method method : methods) &#123;            <span class="hljs-keyword">if</span> (method.getName().equals(name)) &#123;                Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();                <span class="hljs-keyword">if</span> (parameterTypes.length == args.length) &#123;                    <span class="hljs-keyword">boolean</span> isSameMethod = <span class="hljs-keyword">true</span>;                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; parameterTypes.length; i++) &#123;                        Object arg = args[i];                        <span class="hljs-keyword">if</span> (arg == <span class="hljs-keyword">null</span>) &#123;                            arg = <span class="hljs-string">&quot;&quot;</span>;                        &#125;                        <span class="hljs-keyword">if</span> (!parameterTypes[i].equals(args[i].getClass())) &#123;                            isSameMethod = <span class="hljs-keyword">false</span>;                        &#125;                    &#125;                    <span class="hljs-keyword">if</span> (isSameMethod) &#123;                        queryMethod = method;                        <span class="hljs-keyword">break</span>;                    &#125;                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> queryMethod;    &#125;&#125;</code></pre><h4 id="7-HTTP结果封装"><a href="#7-HTTP结果封装" class="headerlink" title="7.HTTP结果封装"></a>7.HTTP结果封装</h4><p><code>com/iplume/core/http/HttpResult.java</code> :</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.core.http;<span class="hljs-comment">/**</span><span class="hljs-comment"> * HTTP结果封装.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/20</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpResult</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 状态码.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> code = <span class="hljs-number">200</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 错误信息.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> String msg;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 数据.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> Object data;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HttpResult <span class="hljs-title">error</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> error(HttpStatus.SC_INTERNAL_SERVER_ERROR, <span class="hljs-string">&quot;未知异常，请联系管理员&quot;</span>);    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HttpResult <span class="hljs-title">error</span><span class="hljs-params">(String msg)</span> </span>&#123;        <span class="hljs-keyword">return</span> error(HttpStatus.SC_INTERNAL_SERVER_ERROR, msg);    &#125;    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> HttpResult <span class="hljs-title">error</span><span class="hljs-params">(<span class="hljs-keyword">int</span> code, String msg)</span> </span>&#123;        HttpResult r = <span class="hljs-keyword">new</span> HttpResult();        r.setCode(code);        r.setMsg(msg);        <span class="hljs-keyword">return</span> r;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HttpResult <span class="hljs-title">ok</span><span class="hljs-params">(String msg)</span> </span>&#123;        HttpResult r = <span class="hljs-keyword">new</span> HttpResult();        r.setMsg(msg);        <span class="hljs-keyword">return</span> r;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HttpResult <span class="hljs-title">ok</span><span class="hljs-params">(Object data)</span> </span>&#123;        HttpResult r = <span class="hljs-keyword">new</span> HttpResult();        r.setData(data);        <span class="hljs-keyword">return</span> r;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HttpResult <span class="hljs-title">ok</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HttpResult();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCode</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> code;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setCode</span><span class="hljs-params">(<span class="hljs-keyword">int</span> code)</span> </span>&#123;        <span class="hljs-keyword">this</span>.code = code;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> msg;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;        <span class="hljs-keyword">this</span>.msg = msg;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getData</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> data;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setData</span><span class="hljs-params">(Object data)</span> </span>&#123;        <span class="hljs-keyword">this</span>.data = data;    &#125;&#125;</code></pre><p><code>com/iplume/core/http/HttpStatus.java</code> :</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.core.http;<span class="hljs-comment">/**</span><span class="hljs-comment"> * HTTP结果状态.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/20</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">HttpStatus</span> </span>&#123;    <span class="hljs-comment">// --- 1xx Informational ---</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 100 Continue&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_CONTINUE = <span class="hljs-number">100</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 101 Switching Protocols&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_SWITCHING_PROTOCOLS = <span class="hljs-number">101</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 102 Processing&#125; (WebDAV - RFC 2518)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_PROCESSING = <span class="hljs-number">102</span>;    <span class="hljs-comment">// --- 2xx Success ---</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 200 OK&#125; (HTTP/1.0 - RFC 1945)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_OK = <span class="hljs-number">200</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 201 Created&#125; (HTTP/1.0 - RFC 1945)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_CREATED = <span class="hljs-number">201</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 202 Accepted&#125; (HTTP/1.0 - RFC 1945)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_ACCEPTED = <span class="hljs-number">202</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 203 Non Authoritative Information&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class="hljs-number">203</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 204 No Content&#125; (HTTP/1.0 - RFC 1945)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_NO_CONTENT = <span class="hljs-number">204</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 205 Reset Content&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_RESET_CONTENT = <span class="hljs-number">205</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 206 Partial Content&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_PARTIAL_CONTENT = <span class="hljs-number">206</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 207 Multi-Status&#125; (WebDAV - RFC 2518)</span><span class="hljs-comment">     * or</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 207 Partial Update OK&#125; (HTTP/1.1 - draft-ietf-http-v11-spec-rev-01?)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_MULTI_STATUS = <span class="hljs-number">207</span>;    <span class="hljs-comment">// --- 3xx Redirection ---</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 300 Mutliple Choices&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_MULTIPLE_CHOICES = <span class="hljs-number">300</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 301 Moved Permanently&#125; (HTTP/1.0 - RFC 1945)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_MOVED_PERMANENTLY = <span class="hljs-number">301</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 302 Moved Temporarily&#125; (Sometimes &#123;<span class="hljs-doctag">@code</span> Found&#125;) (HTTP/1.0 - RFC 1945)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_MOVED_TEMPORARILY = <span class="hljs-number">302</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 303 See Other&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_SEE_OTHER = <span class="hljs-number">303</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 304 Not Modified&#125; (HTTP/1.0 - RFC 1945)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_NOT_MODIFIED = <span class="hljs-number">304</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 305 Use Proxy&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_USE_PROXY = <span class="hljs-number">305</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 307 Temporary Redirect&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_TEMPORARY_REDIRECT = <span class="hljs-number">307</span>;    <span class="hljs-comment">// --- 4xx Client Error ---</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 400 Bad Request&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_BAD_REQUEST = <span class="hljs-number">400</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 401 Unauthorized&#125; (HTTP/1.0 - RFC 1945)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_UNAUTHORIZED = <span class="hljs-number">401</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 402 Payment Required&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_PAYMENT_REQUIRED = <span class="hljs-number">402</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 403 Forbidden&#125; (HTTP/1.0 - RFC 1945)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_FORBIDDEN = <span class="hljs-number">403</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 404 Not Found&#125; (HTTP/1.0 - RFC 1945)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_NOT_FOUND = <span class="hljs-number">404</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 405 Method Not Allowed&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_METHOD_NOT_ALLOWED = <span class="hljs-number">405</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 406 Not Acceptable&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_NOT_ACCEPTABLE = <span class="hljs-number">406</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 407 Proxy Authentication Required&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class="hljs-number">407</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 408 Request Timeout&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_REQUEST_TIMEOUT = <span class="hljs-number">408</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 409 Conflict&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_CONFLICT = <span class="hljs-number">409</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 410 Gone&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_GONE = <span class="hljs-number">410</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 411 Length Required&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_LENGTH_REQUIRED = <span class="hljs-number">411</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 412 Precondition Failed&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_PRECONDITION_FAILED = <span class="hljs-number">412</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 413 Request Entity Too Large&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_REQUEST_TOO_LONG = <span class="hljs-number">413</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 414 Request-URI Too Long&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_REQUEST_URI_TOO_LONG = <span class="hljs-number">414</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 415 Unsupported Media Type&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class="hljs-number">415</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 416 Requested Range Not Satisfiable&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="hljs-number">416</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 417 Expectation Failed&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_EXPECTATION_FAILED = <span class="hljs-number">417</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Static constant for a 418 error.</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 418 Unprocessable Entity&#125; (WebDAV drafts?)</span><span class="hljs-comment">     * or &#123;<span class="hljs-doctag">@code</span> 418 Reauthentication Required&#125; (HTTP/1.1 drafts?)</span><span class="hljs-comment">     */</span>    <span class="hljs-comment">// not used</span>    <span class="hljs-comment">// public static final int SC_UNPROCESSABLE_ENTITY = 418;</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Static constant for a 419 error.</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 419 Insufficient Space on Resource&#125;</span><span class="hljs-comment">     * (WebDAV - draft-ietf-webdav-protocol-05?)</span><span class="hljs-comment">     * or &#123;<span class="hljs-doctag">@code</span> 419 Proxy Reauthentication Required&#125;</span><span class="hljs-comment">     * (HTTP/1.1 drafts?)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_INSUFFICIENT_SPACE_ON_RESOURCE = <span class="hljs-number">419</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Static constant for a 420 error.</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 420 Method Failure&#125;</span><span class="hljs-comment">     * (WebDAV - draft-ietf-webdav-protocol-05?)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_METHOD_FAILURE = <span class="hljs-number">420</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 422 Unprocessable Entity&#125; (WebDAV - RFC 2518)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_UNPROCESSABLE_ENTITY = <span class="hljs-number">422</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 423 Locked&#125; (WebDAV - RFC 2518)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_LOCKED = <span class="hljs-number">423</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 424 Failed Dependency&#125; (WebDAV - RFC 2518)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_FAILED_DEPENDENCY = <span class="hljs-number">424</span>;    <span class="hljs-comment">// --- 5xx Server Error ---</span>    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 500 Server Error&#125; (HTTP/1.0 - RFC 1945)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="hljs-number">500</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 501 Not Implemented&#125; (HTTP/1.0 - RFC 1945)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_NOT_IMPLEMENTED = <span class="hljs-number">501</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 502 Bad Gateway&#125; (HTTP/1.0 - RFC 1945)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_BAD_GATEWAY = <span class="hljs-number">502</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 503 Service Unavailable&#125; (HTTP/1.0 - RFC 1945)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_SERVICE_UNAVAILABLE = <span class="hljs-number">503</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 504 Gateway Timeout&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_GATEWAY_TIMEOUT = <span class="hljs-number">504</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 505 HTTP Version Not Supported&#125; (HTTP/1.1 - RFC 2616)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class="hljs-number">505</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * &#123;<span class="hljs-doctag">@code</span> 507 Insufficient Storage&#125; (WebDAV - RFC 2518)</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> SC_INSUFFICIENT_STORAGE = <span class="hljs-number">507</span>;&#125;</code></pre><h4 id="8-MyBatis分页查询"><a href="#8-MyBatis分页查询" class="headerlink" title="8.MyBatis分页查询"></a>8.MyBatis分页查询</h4><p>添加依赖:</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">pagehelper.version</span>&gt;</span>1.2.5<span class="hljs-tag">&lt;/<span class="hljs-name">pagehelper.version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><span class="hljs-comment">&lt;!-- pagehelper --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>添加配置:</p><p><code>src/main/resources/application.yml</code> :</p><pre><code class="hljs yaml"><span class="hljs-comment"># pagehelper.</span><span class="hljs-attr">pagehelper:</span>  <span class="hljs-attr">helper-dialect:</span> <span class="hljs-string">mysql</span>  <span class="hljs-attr">reasonable:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">support-methods-arguments:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">params:</span> <span class="hljs-string">count=countSql</span></code></pre><h4 id="9-分页代码"><a href="#9-分页代码" class="headerlink" title="9.分页代码"></a>9.分页代码</h4><p><code>com/iplume/mango/admin/dao/SysUserMapper.java</code>:</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.mango.admin.dao;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> com.iplume.mango.admin.model.SysUser;<span class="hljs-comment">/**</span><span class="hljs-comment"> * SysUserMapper.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/19</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SysUserMapper</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 按主键删除.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">deleteByPrimaryKey</span><span class="hljs-params">(Long id)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 插入操作.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> record</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insert</span><span class="hljs-params">(SysUser record)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 插入操作.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> record</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">insertSelective</span><span class="hljs-params">(SysUser record)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 按id查询数据.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function">SysUser <span class="hljs-title">selectByPrimaryKey</span><span class="hljs-params">(Long id)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 更新数据.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> record</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateByPrimaryKeySelective</span><span class="hljs-params">(SysUser record)</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 更新数据.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> record</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">updateByPrimaryKey</span><span class="hljs-params">(SysUser record)</span></span>;        <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询全部用户信息.</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function">List&lt;SysUser&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 分页查询.</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function">List&lt;SysUser&gt; <span class="hljs-title">findPage</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p><code>com/iplume/mango/admin/sqlmap/SysUserMapper.xml</code>:</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.iplume.mango.admin.dao.SysUserMapper&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;com.iplume.mango.admin.model.SysUser&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;BIGINT&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;nick_name&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;nickName&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;avatar&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;avatar&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;salt&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;salt&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;mobile&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;mobile&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;status&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TINYINT&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;status&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_id&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;BIGINT&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptId&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_by&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createBy&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;create_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;createTime&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;last_update_by&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;VARCHAR&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;lastUpdateBy&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;last_update_time&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TIMESTAMP&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;lastUpdateTime&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;del_flag&quot;</span> <span class="hljs-attr">jdbcType</span>=<span class="hljs-string">&quot;TINYINT&quot;</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;delFlag&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span>&gt;</span>    id, name, nick_name, avatar, password, salt, email, mobile, status, dept_id, create_by,     create_time, last_update_by, last_update_time, del_flag  <span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span>  ...    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findAll&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span>    select     <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span> /&gt;</span>    from sys_user  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findPage&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span>&gt;</span>    select    <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;Base_Column_List&quot;</span> /&gt;</span>    from sys_user  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><p><code>com/iplume/mango/admin/service/SysUserService.java</code>:</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.mango.admin.service;<span class="hljs-keyword">import</span> com.iplume.core.service.CurdService;<span class="hljs-keyword">import</span> com.iplume.mango.admin.model.SysUser;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 用户服务接口.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/19</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SysUserService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CurdService</span>&lt;<span class="hljs-title">SysUser</span>&gt; </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查找所有用户.</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function">List&lt;SysUser&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>;&#125;</code></pre><p><code>com/iplume/mango/admin/service/impl/SysUserServiceImpl.java</code>:</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.mango.admin.service.impl;<span class="hljs-keyword">import</span> com.iplume.core.page.MybatisPageHelper;<span class="hljs-keyword">import</span> com.iplume.core.page.PageRequest;<span class="hljs-keyword">import</span> com.iplume.core.page.PageResult;<span class="hljs-keyword">import</span> com.iplume.mango.admin.dao.SysUserMapper;<span class="hljs-keyword">import</span> com.iplume.mango.admin.service.SysUserService;<span class="hljs-keyword">import</span> com.iplume.mango.admin.model.SysUser;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 用户服务实现类.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/19</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysUserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SysUserService</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> SysUserMapper sysUserMapper;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;SysUser&gt; <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> sysUserMapper.findAll();    &#125;......    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 分页查询SysUser.</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageRequest 自定义，统一分页查询请求.</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> PageResult <span class="hljs-title">findPage</span><span class="hljs-params">(PageRequest pageRequest)</span> </span>&#123;        <span class="hljs-keyword">return</span> MybatisPageHelper.findPage(pageRequest, sysUserMapper);    &#125;&#125;</code></pre><p>编写分页查询接口:</p><p><code>com/iplume/mango/admin/controller/SysUserController.java</code>:</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.mango.admin.controller;<span class="hljs-keyword">import</span> com.iplume.core.http.HttpResult;<span class="hljs-keyword">import</span> com.iplume.core.page.PageRequest;<span class="hljs-keyword">import</span> com.iplume.mango.admin.service.SysUserService;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 用户控制类.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2022/6/19</span><span class="hljs-comment"> */</span><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(&quot;user&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SysUserController</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SysUserService sysUserService;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SysUserController</span><span class="hljs-params">(SysUserService sysUserService)</span> </span>&#123;        <span class="hljs-keyword">this</span>.sysUserService = sysUserService;    &#125;    <span class="hljs-meta">@GetMapping(value = &quot;/findAll&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">findAll</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> sysUserService.findAll();    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 分页查询用户信息.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageRequest</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@PostMapping(value = &quot;/findPage&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> HttpResult <span class="hljs-title">findPage</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> PageRequest pageRequest)</span> </span>&#123;        <span class="hljs-keyword">return</span> HttpResult.ok(sysUserService.findPage(pageRequest));    &#125;&#125;</code></pre><h4 id="10-分页查询接口测试"><a href="#10-分页查询接口测试" class="headerlink" title="10.分页查询接口测试"></a>10.分页查询接口测试</h4><p>访问swagger-ui接口, 进行测试:</p><pre><code class="hljs bash">http://localhost:8001/swagger-ui.html</code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pagehelper-findpage/01-swagger-ui.png" alt="01-swagger-ui"></p><p>查询结果:</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pagehelper-findpage/02-swagger-ui-pagehelper-result.png" alt="02-swagger-ui-pagehelper-result"></p><p><strong>PS: 本文仅为学习记录, 仅供参与!</strong></p>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
      <category>pagehelper</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pagehelper</tag>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python的weasyprint的PDF导出</title>
    <link href="/2022/04/20/weasyprint-pdf-started/"/>
    <url>/2022/04/20/weasyprint-pdf-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Python的weasyprint的PDF导出"><a href="#Python的weasyprint的PDF导出" class="headerlink" title="Python的weasyprint的PDF导出"></a>Python的weasyprint的PDF导出</h3><h4 id="1-安装依赖"><a href="#1-安装依赖" class="headerlink" title="1.安装依赖"></a>1.安装依赖</h4><p>安装指南, 查看官网:</p><pre><code class="hljs bash">https://doc.courtbouillon.org/weasyprint/stable/first_steps.html</code></pre><p>安装依赖:</p><pre><code class="hljs bash">pip install weasyprint</code></pre><p><strong>错误一</strong>: 安装后, <code>import weasyprint</code>后, 启动django时, </p><pre><code class="hljs bash">OSError: cannot load library <span class="hljs-string">&#x27;gobject-2.0-0&#x27;</span>: dlopen(gobject-2.0-0, 0x0002): tried: <span class="hljs-string">&#x27;gobject-2.0-0&#x27;</span> (no such file), <span class="hljs-string">&#x27;/usr/local/lib/gobject-2.0-0&#x27;</span> (no such file), <span class="hljs-string">&#x27;/usr/lib/gobject-2.0-0&#x27;</span> (no such file), <span class="hljs-string">&#x27;/Users/zhuyangze/Documents/fork/django/todjango3/chapter08/myshop/gobject-2.0-0&#x27;</span> (no such file), <span class="hljs-string">&#x27;/usr/local/lib/gobject-2.0-0&#x27;</span> (no such file), <span class="hljs-string">&#x27;/usr/lib/gobject-2.0-0&#x27;</span> (no such file).  Additionally, ctypes.util.find_library() did not manage to locate a library called <span class="hljs-string">&#x27;gobject-2.0-0&#x27;</span></code></pre><p>要安装依赖:</p><pre><code class="hljs bash">brew install pango libffi</code></pre><p><strong>错误二</strong>:</p><pre><code class="hljs bash">Error: pango: undefined method `cellar<span class="hljs-string">&#x27; for #&lt;BottleSpecification:0x00007fdf649e52c8&gt;</span></code></pre><p>解决策:</p><pre><code class="hljs bash">rm -fr $(brew --repo homebrew/core)brew tap homebrew/corebrew install pango libffi</code></pre><h4 id="2-安装pdf导出依赖"><a href="#2-安装pdf导出依赖" class="headerlink" title="2.安装pdf导出依赖"></a>2.安装pdf导出依赖</h4><pre><code class="hljs bash">pip install WeasyPrint</code></pre><h4 id="3-创建pdf的templates"><a href="#3-创建pdf的templates" class="headerlink" title="3.创建pdf的templates"></a>3.创建pdf的templates</h4><p> <code>chapter08/myshop/orders/templates/orders/order/pdf.html</code>:</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>My shop<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>My shop<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>    Invoice no. &#123;&#123; order.id &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;secondary&quot;</span>&gt;</span>      &#123;&#123; order.created|date:&#x27;Y/m/d&#x27; &#125;&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Bil to<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>    &#123;&#123; order.first_name &#125;&#125; &#123;&#123; order.last_name &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>    &#123;&#123; order.email &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>    &#123;&#123; order.address &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>    &#123;&#123; order.postal_code &#125;&#125;, &#123;&#123; order.city &#125;&#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Items brought<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Product<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Price<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Quantity<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Cost<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span>      &#123;% for item in order.items.all %&#125;        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;row&#123;% cycle &#x27;1&#x27; &#x27;2&#x27; %&#125;&quot;</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>&#123;&#123; item.product.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;num&quot;</span>&gt;</span>&#123;&#123; item.price &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;num&quot;</span>&gt;</span>&#123;&#123; item.quantity &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>          <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;num&quot;</span>&gt;</span>&#123;&#123; item.get_cost &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>      &#123;% endfor %&#125;      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;total&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>Total<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;num&quot;</span>&gt;</span>&#123;&#123; order.get_total_cost &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;&#123;% if order.paid %&#125;paid&#123;% else %&#125;pending&#123;% endif %&#125;&quot;</span>&gt;</span>    &#123;% if order.paid %&#125;Paid&#123;% else %&#125;Pending payment&#123;% endif %&#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h4 id="4-编写view"><a href="#4-编写view" class="headerlink" title="4.编写view"></a>4.编写view</h4><p> <code>chapter08/myshop/orders/views.py</code>:</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> weasyprint<span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<span class="hljs-keyword">from</span> django.template.loader <span class="hljs-keyword">import</span> render_to_string<span class="hljs-meta">@staff_member_required</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">admin_order_pdf</span>(<span class="hljs-params">request, order_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    打印PDF.</span><span class="hljs-string">    :param request:</span><span class="hljs-string">    :param order_id:</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-comment"># 获取具有给定ID的Order对象，然后使用Django提供的render_to_string()函数来呈现orders/Order/pdf.html.</span>    <span class="hljs-comment"># 呈现的HTML保存在HTML变量中.</span>    order = get_object_or_404(Order, <span class="hljs-built_in">id</span>=order_id)    html = render_to_string(<span class="hljs-string">&#x27;orders/order/pdf.html&#x27;</span>,                            &#123;<span class="hljs-string">&#x27;order&#x27;</span>: order&#125;)    response = HttpResponse(content_type=<span class="hljs-string">&#x27;application/pdf&#x27;</span>)    response[<span class="hljs-string">&#x27;Content-Disposition&#x27;</span>] = <span class="hljs-string">f&#x27;filename=order_<span class="hljs-subst">&#123; order.<span class="hljs-built_in">id</span>&#125;</span>.pdf&#x27;</span>    <span class="hljs-comment"># 使用WeasyPrint从呈现的HTML代码生成PDF文件，并将该文件写入HttpResponse对象.</span>    <span class="hljs-comment"># 使用静态file css/pdf.css将css样式添加到生成的PDF文件中.</span>    <span class="hljs-comment"># 然后，使用STATIC_ROOT设置从本地路径加载它. 最后，返回生成的response.</span>    weasyprint.HTML(string=html).write_pdf(response,                                           stylesheets=[weasyprint.CSS(                                               settings.STATIC_ROOT + <span class="hljs-string">&#x27;css/pdf.css&#x27;</span>)])    <span class="hljs-keyword">return</span> response</code></pre><h4 id="5-创建pdf的css"><a href="#5-创建pdf的css" class="headerlink" title="5.创建pdf的css"></a>5.创建pdf的css</h4><p><code>chapter08/myshop/shop/static/css/pdf.css</code>:</p><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;    <span class="hljs-attribute">font-family</span>:Helvetica, sans-serif;    <span class="hljs-attribute">color</span>:<span class="hljs-number">#222</span>;    <span class="hljs-attribute">line-height</span>:<span class="hljs-number">1.5</span>;&#125;<span class="hljs-selector-tag">table</span> &#123;    <span class="hljs-attribute">width</span>:<span class="hljs-number">100%</span>;    <span class="hljs-attribute">border-spacing</span>:<span class="hljs-number">0</span>;    <span class="hljs-attribute">border-collapse</span>: collapse;    <span class="hljs-attribute">margin</span>:<span class="hljs-number">20px</span> <span class="hljs-number">0</span>;&#125;<span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">th</span>, <span class="hljs-selector-tag">table</span> <span class="hljs-selector-tag">td</span> &#123;    <span class="hljs-attribute">text-align</span>:left;    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">14px</span>;    <span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;&#125;<span class="hljs-selector-tag">tbody</span> <span class="hljs-selector-tag">tr</span><span class="hljs-selector-pseudo">:nth-child(odd)</span> &#123;    <span class="hljs-attribute">background</span>:<span class="hljs-number">#efefef</span>;&#125;<span class="hljs-selector-tag">thead</span> <span class="hljs-selector-tag">th</span>, <span class="hljs-selector-tag">tbody</span> <span class="hljs-selector-tag">tr</span><span class="hljs-selector-class">.total</span> &#123;    <span class="hljs-attribute">background</span>:<span class="hljs-number">#5993bb</span>;    <span class="hljs-attribute">color</span>:<span class="hljs-number">#fff</span>;    <span class="hljs-attribute">font-weight</span>:bold;&#125;<span class="hljs-selector-tag">h1</span> &#123;    <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;&#125;<span class="hljs-selector-class">.secondary</span> &#123;    <span class="hljs-attribute">color</span>:<span class="hljs-number">#bbb</span>;    <span class="hljs-attribute">margin-bottom</span>:<span class="hljs-number">20px</span>;&#125;<span class="hljs-selector-class">.num</span> &#123;    <span class="hljs-attribute">text-align</span>:right;&#125;<span class="hljs-selector-class">.paid</span>, <span class="hljs-selector-class">.pending</span> &#123;    <span class="hljs-attribute">color</span>:<span class="hljs-number">#1bae37</span>;    <span class="hljs-attribute">border</span>:<span class="hljs-number">4px</span> solid <span class="hljs-number">#1bae37</span>;    <span class="hljs-attribute">text-transform</span>:uppercase;    <span class="hljs-attribute">font-weight</span>:bold;    <span class="hljs-attribute">font-size</span>:<span class="hljs-number">22px</span>;    <span class="hljs-attribute">padding</span>:<span class="hljs-number">4px</span> <span class="hljs-number">12px</span> <span class="hljs-number">0px</span>;    <span class="hljs-attribute">float</span>:right;    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">15deg</span>);    <span class="hljs-attribute">margin-right</span>:<span class="hljs-number">40px</span>;&#125;<span class="hljs-selector-class">.pending</span> &#123;    <span class="hljs-attribute">color</span>:<span class="hljs-number">#a82d2d</span>;    <span class="hljs-attribute">border</span>:<span class="hljs-number">4px</span> solid <span class="hljs-number">#a82d2d</span>;&#125;</code></pre><h4 id="6-配置静态文件路径"><a href="#6-配置静态文件路径" class="headerlink" title="6.配置静态文件路径"></a>6.配置静态文件路径</h4><p><code>settings.py</code>:</p><pre><code class="hljs python"><span class="hljs-comment"># PDF conf.</span>STATIC_ROOT = os.path.join(BASE_DIR, <span class="hljs-string">&#x27;static/&#x27;</span>)</code></pre><p>生成相关静态文件:</p><pre><code class="hljs bash">python manage.py collectstatic</code></pre><h4 id="7-配置URL"><a href="#7-配置URL" class="headerlink" title="7.配置URL"></a>7.配置URL</h4><p><code>chapter08/myshop/orders/urls.py</code>:</p><pre><code class="hljs python"><span class="hljs-comment"># pdf导出.</span>path(<span class="hljs-string">&#x27;admin/order/&lt;int:order_id&gt;/pdf/&#x27;</span>, views.admin_order_pdf, name=<span class="hljs-string">&#x27;admin_order_pdf&#x27;</span>),</code></pre><h4 id="8-将功能加入管理页面"><a href="#8-将功能加入管理页面" class="headerlink" title="8.将功能加入管理页面"></a>8.将功能加入管理页面</h4><p> <code>chapter08/myshop/orders/admin.py</code>:</p><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">order_pdf</span>(<span class="hljs-params">obj</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    pdf导出.</span><span class="hljs-string">    :param obj:</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    url = reverse(<span class="hljs-string">&#x27;orders:admin_order_pdf&#x27;</span>, args=[obj.<span class="hljs-built_in">id</span>])    <span class="hljs-keyword">return</span> mark_safe(<span class="hljs-string">f&#x27;&lt;a href=&quot;<span class="hljs-subst">&#123;url&#125;</span>&quot;&gt;PDF&lt;/a&gt;&#x27;</span>)order_pdf.short_description = <span class="hljs-string">&#x27;Invoice&#x27;</span><span class="hljs-meta">@admin.register(Order)</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderAdmin</span>(<span class="hljs-params">admin.ModelAdmin</span>):</span>    list_display = [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;first_name&#x27;</span>, <span class="hljs-string">&#x27;last_name&#x27;</span>, <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-string">&#x27;address&#x27;</span>, <span class="hljs-string">&#x27;postal_code&#x27;</span>,                    <span class="hljs-string">&#x27;city&#x27;</span>, <span class="hljs-string">&#x27;paid&#x27;</span>, <span class="hljs-string">&#x27;created&#x27;</span>, <span class="hljs-string">&#x27;updated&#x27;</span>,                    order_detail,                    order_pdf]</code></pre><h4 id="9-在页面验证"><a href="#9-在页面验证" class="headerlink" title="9.在页面验证"></a>9.在页面验证</h4><pre><code class="hljs bash">python manage.py runserver</code></pre><pre><code class="hljs text">http://127.0.0.1:8000/admin/orders/order/</code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/weasyprint-pdf-started/001.png" alt="001"></p><p>生成PDF:</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/weasyprint-pdf-started/002.png" alt="002"></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>weasyprint</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>weasyprint</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>001-django命令</title>
    <link href="/2022/01/29/django-started/"/>
    <url>/2022/01/29/django-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="001-django命令"><a href="#001-django命令" class="headerlink" title="001-django命令"></a>001-django命令</h3><h4 id="一-安装虚拟环境"><a href="#一-安装虚拟环境" class="headerlink" title="一.安装虚拟环境"></a>一.安装虚拟环境</h4><h5 id="1-创建"><a href="#1-创建" class="headerlink" title="1.创建"></a>1.创建</h5><pre><code class="hljs bash">python3 -m venv ~/.virtualenvs/djangodev</code></pre><h5 id="2-激活"><a href="#2-激活" class="headerlink" title="2.激活"></a>2.激活</h5><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.virtualenvs/djangodev/bin/activate</code></pre><p>或者</p><pre><code class="hljs bash">. ~/.virtualenvs/djangodev/bin/activate</code></pre><h4 id="二-安装django"><a href="#二-安装django" class="headerlink" title="二.安装django"></a>二.安装django</h4><h5 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h5><pre><code class="hljs bash">python -m pip install Django</code></pre><h5 id="2-查看版本"><a href="#2-查看版本" class="headerlink" title="2.查看版本"></a>2.查看版本</h5><pre><code class="hljs bash">python -m django --version</code></pre><h4 id="三-创建工程"><a href="#三-创建工程" class="headerlink" title="三.创建工程"></a>三.创建工程</h4><h5 id="1-创建-1"><a href="#1-创建-1" class="headerlink" title="1.创建"></a>1.创建</h5><pre><code class="hljs bash">django-admin startproject my_site</code></pre><h5 id="2-查看"><a href="#2-查看" class="headerlink" title="2.查看"></a>2.查看</h5><p>配置tree命令</p><pre><code class="hljs jboss-cli">sudo vi ~<span class="hljs-string">/.bash_profile</span></code></pre><p>输入命令:</p><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> tree=<span class="hljs-string">&quot;find . -print | sed -e &#x27;s;[^/]*/;|____;g;s;____|; |;g&#x27;&quot;</span></code></pre><p>保存退出, 使配置生效</p><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bash_profile</code></pre><p>查看<code>my_site</code>目录结构:</p><pre><code class="hljs bash">tree</code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/django-started/001.png" alt="001" style="zoom:80%; margin-left: 0;"></p><p>目录结构解析:</p><ul><li>最外层的 <code>mysite/</code> 根目录只是你项目的容器， 根目录名称对 Django 没有影响，你可以将它重命名为任何你喜欢的名称.</li><li><code>manage.py</code>: 一个让你用各种方式管理 Django 项目的命令行工具. 你可以阅读 <a href="https://docs.djangoproject.com/zh-hans/4.0/ref/django-admin/">django-admin 和 manage.py</a> 获取所有 <code>manage.py</code> 的细节.</li><li>里面一层的 <code>mysite/</code> 目录包含你的项目，它是一个纯 Python 包. 它的名字就是当你引用它内部任何东西时需要用到的 Python 包名。 (比如 <code>mysite.urls</code>).</li><li><code>mysite/__init__.py</code>：一个空文件，告诉 Python 这个目录应该被认为是一个 Python 包. 如果你是 Python 初学者，阅读官方文档中的 <a href="https://docs.python.org/3/tutorial/modules.html#tut-packages">更多关于包的知识</a>.</li><li><code>mysite/settings.py</code>：Django 项目的配置文件。如果你想知道这个文件是如何工作的，请查看 <a href="https://docs.djangoproject.com/zh-hans/4.0/topics/settings/">Django 配置</a> 了解细节.</li><li><code>mysite/urls.py</code>：Django 项目的 URL 声明，就像你网站的“目录”. 阅读 <a href="https://docs.djangoproject.com/zh-hans/4.0/topics/http/urls/">URL调度器</a> 文档来获取更多关于 URL 的内容.</li><li><code>mysite/asgi.py</code>：作为你的项目的运行在 ASGI 兼容的 Web 服务器上的入口. 阅读 <a href="https://docs.djangoproject.com/zh-hans/4.0/howto/deployment/asgi/">如何使用 ASGI 来部署</a> 了解更多细节.</li><li><code>mysite/wsgi.py</code>：作为你的项目的运行在 WSGI 兼容的Web服务器上的入口. 阅读 <a href="https://docs.djangoproject.com/zh-hans/4.0/howto/deployment/wsgi/">如何使用 WSGI 进行部署</a> 了解更多细节.</li></ul><h4 id="四-启动"><a href="#四-启动" class="headerlink" title="四.启动"></a>四.启动</h4><h5 id="1-启动"><a href="#1-启动" class="headerlink" title="1.启动"></a>1.启动</h5><pre><code class="hljs bash">python manage.py runserver</code></pre><p>若报下面的错误:</p><pre><code class="hljs bash">ImportError: Couldn<span class="hljs-string">&#x27;t import Django. Are you sure it&#x27;</span>s installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?</code></pre><p>执行激活命令:</p><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.virtualenvs/djangodev/bin/activate</code></pre><p>再执行启动命令:</p><pre><code class="hljs bash">python manage.py runserver</code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/django-started/002.png" alt="002" style="zoom:80%;margin-left: 0;"></p><p>访问网站:</p><pre><code class="hljs bash">http://127.0.0.1:8000/</code></pre><p>查看网站效果:</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/django-started/003.png" alt="003" style="zoom:80%;margin-left: 0;"></p><h5 id="2-变换端口"><a href="#2-变换端口" class="headerlink" title="2.变换端口"></a>2.变换端口</h5><pre><code class="hljs bash">python manage.py runserver 8080</code></pre><p>访问地址变成:</p><pre><code class="hljs bash">http://127.0.0.1:8080/</code></pre><h4 id="五-建立app"><a href="#五-建立app" class="headerlink" title="五.建立app"></a>五.建立app</h4><h5 id="1-创建-2"><a href="#1-创建-2" class="headerlink" title="1.创建"></a>1.创建</h5><pre><code class="hljs bash">python manage.py startapp news</code></pre><p>在<code>/my_site/news/models.py</code>中添加:</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-comment"># Create your models here.</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reporter</span>(<span class="hljs-params">models.Model</span>):</span>    full_name = models.CharField(max_length=<span class="hljs-number">70</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self.full_name<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Article</span>(<span class="hljs-params">models.Model</span>):</span>    pub_date = models.DateField()    headline = models.charField(max_length=<span class="hljs-number">200</span>)    content = models.TextField()    reporter = models.ForeignKey(Reporter, on_delete=models.CASCADE)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self.headline</code></pre><h5 id="2-建表"><a href="#2-建表" class="headerlink" title="2.建表"></a>2.建表</h5><p>运行Django命令行实用程序自动创建数据库表:</p><pre><code class="hljs bash">python manage.py makemigrationspython manage.py migrate</code></pre><p>该 <a href="https://docs.djangoproject.com/zh-hans/4.0/ref/django-admin/#django-admin-makemigrations"><code>makemigrations</code></a> 命令查找所有可用的模型，为任意一个在数据库中不存在对应数据表的模型创建迁移脚本文件.<br><a href="https://docs.djangoproject.com/zh-hans/4.0/ref/django-admin/#django-admin-migrate"><code>migrate</code></a> 命令则运行这些迁移来自动创建数据库表。还提供可选的 <a href="https://docs.djangoproject.com/zh-hans/4.0/topics/migrations/">更丰富的控制模式</a>.</p><h5 id="3-调用Python-API"><a href="#3-调用Python-API" class="headerlink" title="3.调用Python API"></a>3.调用Python API</h5><p>若在python console中引入model出错:</p><pre><code class="hljs bash">from news.models import Article, Reporter</code></pre><p><code>RuntimeError: Model class news.models.Reporter doesn&#39;t declare an explicit app_label and isn&#39;t in an application in INSTALLED_APPS.</code></p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/django-started/004.png" alt="004" style="zoom:80%;margin-left: 0;"></p><p>对策:</p><p>在<code>setting.py</code>文件的app配置中加入新建的app: <code>news</code></p><pre><code class="hljs python">INSTALLED_APPS = [    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,    <span class="hljs-string">&#x27;news&#x27;</span>]</code></pre><p>重新启动<code>python console</code>后, 输入查询语句:</p><pre><code class="hljs bash">from news.models import Article, ReporterReporter.objects.all()</code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/django-started/005.png" alt="005" style="zoom:80%;margin-left:0"></p><h5 id="4-建立polls"><a href="#4-建立polls" class="headerlink" title="4.建立polls"></a>4.建立polls</h5><pre><code class="hljs bash">python manage.py startapp polls</code></pre><p><strong>建立view</strong>: <code>polls/views.py</code></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<span class="hljs-comment"># Create your views here.</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>(<span class="hljs-params">request</span>):</span>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)</code></pre><p><strong>建立urls</strong>: <code>polls/urls.py</code></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> viewsurlpatterns = &#123;    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index, name=<span class="hljs-string">&#x27;index&#x27;</span>)&#125;</code></pre><p><strong>配置app的urls</strong>: <code>my_site/urls.py</code></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, includeurlpatterns = [    path(<span class="hljs-string">&#x27;polls/&#x27;</span>, include(<span class="hljs-string">&#x27;polls.urls&#x27;</span>)),    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),]</code></pre><h5 id="5-Model"><a href="#5-Model" class="headerlink" title="5.Model"></a>5.Model</h5><p>但是，其中一些应用程序至少使用一个数据库表，因此我们需要在数据库中创建表，然后才能使用它们. 为此，运行以下命令:</p><pre><code class="hljs bash">python manage.py migrate</code></pre><p><strong>建立Model</strong>: <code>polls/model.py</code></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-comment"># Create your models here.</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Question</span>(<span class="hljs-params">models.Model</span>):</span>    question_text = models.CharField(max_length=<span class="hljs-number">200</span>)    pub_date = models.DateTimeField(<span class="hljs-string">&#x27;date published&#x27;</span>)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Choice</span>(<span class="hljs-params">models.Model</span>):</span>    question = models.ForeignKey(Question, on_delete=models.CASCADE)    choice_text = models.CharField(max_length=<span class="hljs-number">200</span>)    votes = models.IntegerField(default=<span class="hljs-number">0</span>)</code></pre><p> <strong>配置app</strong>: <code>my_site/settings.py</code></p><pre><code class="hljs python">INSTALLED_APPS = [    <span class="hljs-string">&#x27;polls.apps.PollsConfig&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.admin&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.auth&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.contenttypes&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.sessions&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.messages&#x27;</span>,    <span class="hljs-string">&#x27;django.contrib.staticfiles&#x27;</span>,    <span class="hljs-string">&#x27;news&#x27;</span>]</code></pre><p>命令创建<code>polls/model</code>相关的model:</p><pre><code class="hljs bash">python manage.py makemigrations polls</code></pre><p>查看生成的<code>sql</code></p><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> sqlmigrate polls <span class="hljs-number">0001</span></code></pre><pre><code class="hljs bash">python manage.py migrate</code></pre><p><strong>api shell</strong>:</p><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash"> python manage.py shell  </span>Python 3.8.3 (default, Jul  2 2020, 11:26:31) [Clang 10.0.0 ] on darwinType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.(InteractiveConsole)<span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; from polls.models import Choice, Question</span><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; Question.objects.all()</span>&lt;QuerySet []&gt;<span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; from django.utils import timezone</span><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; q = Question(question_text=<span class="hljs-string">&quot;What&#x27;s new?&quot;</span>, pub_date=timezone.now())</span><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; q.save()</span><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; q.id</span>1<span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; q.question_text</span>&quot;What&#x27;s new?&quot;<span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; q.pub_date</span>datetime.datetime(2022, 3, 4, 2, 54, 59, 415032, tzinfo=datetime.timezone.utc)<span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; q.question_text = <span class="hljs-string">&quot;What&#x27;s up?&quot;</span></span><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; q.save()</span><span class="hljs-meta">&gt;</span><span class="bash">&gt;&gt; Question.objects.all()</span>&lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;</code></pre><p>重新设置Model</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<span class="hljs-keyword">from</span> django.utils <span class="hljs-keyword">import</span> timezone<span class="hljs-comment"># Create your models here.</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Question</span>(<span class="hljs-params">models.Model</span>):</span>    question_text = models.CharField(max_length=<span class="hljs-number">200</span>)    pub_date = models.DateTimeField(<span class="hljs-string">&#x27;date published&#x27;</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self.question_text    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">was_published_recently</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="hljs-number">1</span>)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Choice</span>(<span class="hljs-params">models.Model</span>):</span>    question = models.ForeignKey(Question, on_delete=models.CASCADE)    choice_text = models.CharField(max_length=<span class="hljs-number">200</span>)    votes = models.IntegerField(default=<span class="hljs-number">0</span>)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-keyword">return</span> self.choice_text</code></pre><p>重新进入shell:</p><pre><code class="hljs fsharp">% python manage.py shellPython <span class="hljs-number">3.8</span><span class="hljs-number">.3</span> (<span class="hljs-keyword">default</span>, Jul  <span class="hljs-number">2</span> <span class="hljs-number">2020</span>, <span class="hljs-number">11</span>:<span class="hljs-number">26</span>:<span class="hljs-number">31</span>) [Clang <span class="hljs-number">10.0</span><span class="hljs-number">.0</span> ] on darwinType <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, <span class="hljs-string">&quot;credits&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;license&quot;</span> <span class="hljs-keyword">for</span> more information.(InteractiveConsole)&gt;&gt;&gt; from polls.models import Choice, Question&gt;&gt;&gt; Question.objects.all()&lt;QuerySet <span class="hljs-meta">[&lt;Question: What&#x27;s up?&gt;]</span>&gt;</code></pre><h5 id="6-创建用户"><a href="#6-创建用户" class="headerlink" title="6.创建用户"></a>6.创建用户</h5><pre><code class="hljs bash">python manage.py createsuperuser</code></pre><h5 id="7-访问admin"><a href="#7-访问admin" class="headerlink" title="7.访问admin"></a>7.访问admin</h5><pre><code class="hljs bash">http://localhost:8000/admin/</code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/django-started/006.png" alt="006" style="zoom:67%;margin-left: 0;"></p><h5 id="8-将Question整合到admin"><a href="#8-将Question整合到admin" class="headerlink" title="8.将Question整合到admin"></a>8.将Question整合到admin</h5><p>修改<code>polls/admin.py</code></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Question<span class="hljs-comment"># Register your models here.</span>admin.site.register(Question)</code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/django-started/007.png" alt="007" style="zoom:67%;margin-left: 0;"></p><h5 id="9-view"><a href="#9-view" class="headerlink" title="9.view"></a>9.view</h5><p>编写不同的view: <code>polls/views.py</code></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<span class="hljs-comment"># Create your views here.</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>(<span class="hljs-params">request</span>):</span>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;Hello, world. You&#x27;re at the polls index.&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">detail</span>(<span class="hljs-params">request, question_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    详细页面.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;You&#x27;re looking at question %s.&quot;</span> % question_id)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">results</span>(<span class="hljs-params">request, question_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    结果页面.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    response = <span class="hljs-string">&quot;You&#x27;re looking at the results of question %s.&quot;</span>    <span class="hljs-keyword">return</span> HttpResponse(response % question_id)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">vote</span>(<span class="hljs-params">request, question_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    投票.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">&quot;You&#x27;re voting on question %s.&quot;</span> % question_id)</code></pre><p>修改<code>polls/urls.py</code></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> viewsurlpatterns = [    <span class="hljs-comment"># ex: /polls/</span>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index, name=<span class="hljs-string">&#x27;index&#x27;</span>),    <span class="hljs-comment"># ex: /polls/1</span>    path(<span class="hljs-string">&#x27;&lt;int:question_id&gt;/&#x27;</span>, views.detail, name=<span class="hljs-string">&#x27;detail&#x27;</span>),    <span class="hljs-comment"># ex: /polls/1/results/</span>    path(<span class="hljs-string">&#x27;&lt;int:question_id&gt;/results/&#x27;</span>, views.results, name=<span class="hljs-string">&#x27;results&#x27;</span>),    <span class="hljs-comment"># ex: /polls/1/vote/</span>    path(<span class="hljs-string">&#x27;&lt;int:question_id&gt;/vote/&#x27;</span>, views.vote, name=<span class="hljs-string">&#x27;vote&#x27;</span>),]</code></pre><p>访问网址:</p><pre><code class="hljs bash">http://localhost:8000/polls/1/</code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/django-started/008.png" alt="008" style="zoom:67%;margin-left: 0;"></p><p>修改view: <code>polls/models.py</code></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Question<span class="hljs-comment"># Create your views here.</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>(<span class="hljs-params">request</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    问题列表页面.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    latest_question_list = Question.objects.order_by(<span class="hljs-string">&#x27;-pub_date&#x27;</span>)[:<span class="hljs-number">5</span>]    output = <span class="hljs-string">&#x27;, &#x27;</span>.join([q.question_text <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> latest_question_list])    <span class="hljs-keyword">return</span> HttpResponse(output)</code></pre><p>访问网址验证: </p><pre><code class="hljs bash">http://localhost:8000/polls/</code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/django-started/009.png" alt="009" style="zoom:80%;margin-left: 0;"></p><h5 id="10-编写templates"><a href="#10-编写templates" class="headerlink" title="10.编写templates:"></a>10.编写templates:</h5><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>问题列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>&#123;% if latest_question_list %&#125;  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>    &#123;% for question in latest_question_list %&#125;      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    &#123;% endfor %&#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>&#123;% else %&#125;  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No polls are available.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#123;% endif %&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>更新<code>polls/views.py</code>:</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<span class="hljs-keyword">from</span> django.template <span class="hljs-keyword">import</span> loader<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Question<span class="hljs-comment"># Create your views here.</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>(<span class="hljs-params">request</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    问题列表页面.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    latest_question_list = Question.objects.order_by(<span class="hljs-string">&#x27;-pub_date&#x27;</span>)[:<span class="hljs-number">5</span>]    template = loader.get_template(<span class="hljs-string">&#x27;polls/index.html&#x27;</span>)    context = &#123;        <span class="hljs-string">&#x27;latest_question_list&#x27;</span>: latest_question_list    &#125;    <span class="hljs-keyword">return</span> HttpResponse(template.render(context, request))</code></pre><p>访问网页:</p><pre><code class="hljs bash">http://localhost:8000/polls/</code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/django-started/010.png" alt="010"></p><h5 id="11-render"><a href="#11-render" class="headerlink" title="11.render"></a>11.render</h5><p>加载模板、填充上下文并返回带有呈现模板结果的HttpResponse对象是一种非常常见的习惯用法.<br>Django提供了一条捷径。这是完整的index（）视图，已重写<code>polls/views.py</code></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<span class="hljs-keyword">from</span> django.template <span class="hljs-keyword">import</span> loader<span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Question<span class="hljs-comment"># Create your views here.</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>(<span class="hljs-params">request</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    问题列表页面.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    latest_question_list = Question.objects.order_by(<span class="hljs-string">&#x27;-pub_date&#x27;</span>)[:<span class="hljs-number">5</span>]    context = &#123;        <span class="hljs-string">&#x27;latest_question_list&#x27;</span>: latest_question_list    &#125;    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;polls/index.html&#x27;</span>, context)</code></pre><h5 id="12-Http404"><a href="#12-Http404" class="headerlink" title="12.Http404"></a>12.Http404</h5><p>编写详细view <code>polls/views.py</code></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse, Http404<span class="hljs-keyword">from</span> django.template <span class="hljs-keyword">import</span> loader<span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Question<span class="hljs-comment"># Create your views here.</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">detail</span>(<span class="hljs-params">request, question_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    详细页面.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">try</span>:        question = Question.objects.get(pk=question_id)    <span class="hljs-keyword">except</span> Question.DoesNotExist:        <span class="hljs-keyword">raise</span> Http404(<span class="hljs-string">&quot;Question does not exist&quot;</span>)    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;polls/detail.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;question&#x27;</span>: question&#125;)</code></pre><p>编写详细页面<code>polls/templates/polls/detail.html</code></p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>详细页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>&#123;&#123; question &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>访问网址验证:</p><pre><code class="hljs bash">http://localhost:8000/polls/1/</code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/django-started/011.png" alt="011" style="zoom:80%;margin-left: 0;"></p><p>查不到数据的验证</p><pre><code class="hljs bash">http://localhost:8000/polls/2/</code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/django-started/012.png" alt="012" style="zoom:80%;margin-left: 0;"></p><p>简写版的http404:</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse, Http404<span class="hljs-keyword">from</span> django.template <span class="hljs-keyword">import</span> loader<span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, get_object_or_404<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Question<span class="hljs-comment"># Create your views here.</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">detail</span>(<span class="hljs-params">request, question_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    详细页面.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-comment"># try:</span>    <span class="hljs-comment">#     question = Question.objects.get(pk=question_id)</span>    <span class="hljs-comment"># except Question.DoesNotExist:</span>    <span class="hljs-comment">#     raise Http404(&quot;Question does not exist&quot;)</span>    question = get_object_or_404(Question, pk=question_id)    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;polls/detail.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;question&#x27;</span>: question&#125;)</code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/django-started/013.png" alt="013" style="zoom:80%;margin-left: 0;"></p><p>更新detail页面<code>polls/templates/polls/detail.html</code></p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>详细页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>  &#123;% for choice in question.choice_set.all %&#125;    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>  &#123;% endfor %&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>修改<code>polls/templates/polls/index.html</code></p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>问题列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>&#123;% if latest_question_list %&#125;  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>    &#123;% for question in latest_question_list %&#125;      &#123;#<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/polls/&#123;&#123; question.id &#125;&#125;/&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>#&#125;      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% url &#x27;detail&#x27; question.id %&#125;&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    &#123;% endfor %&#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>&#123;% else %&#125;  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No polls are available.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#123;% endif %&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/django-started/014.png" alt="014" style="zoom:80%;margin-left: 0;"></p><p>详细页面: </p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/django-started/015.png" alt="015" style="zoom:80%;margin-left:0;"></p><h5 id="13-app命名空间"><a href="#13-app命名空间" class="headerlink" title="13.app命名空间"></a>13.app命名空间</h5><p>该教程项目只有一个应用程序polls. 在真正的Django项目中，可能有五个、十个、二十个或更多的应用程序.<br>Django如何区分它们之间的URL名称？<br>例如，polls应用程序有一个详细视图，同一项目中的一个应用程序也可能有一个用于博客的详细视图.<br>当使用<code>&#123;%url%&#125;</code>模板标记时，如何使Django知道为url创建哪个应用程序视图？</p><p>修改<code>polls/urls.py</code></p><pre><code class="hljs python"><span class="hljs-comment">#! /usr/bin/python3</span><span class="hljs-comment"># -*- coding:utf-8 -*-</span><span class="hljs-comment"># @Time: 2022/3/4</span><span class="hljs-comment"># @Author: Lingchen</span><span class="hljs-comment"># @Prescription:</span><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> viewsapp_name = <span class="hljs-string">&#x27;polls&#x27;</span>urlpatterns = [    <span class="hljs-comment"># ex: /polls/</span>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.index, name=<span class="hljs-string">&#x27;index&#x27;</span>),    <span class="hljs-comment"># ex: /polls/1</span>    path(<span class="hljs-string">&#x27;&lt;int:question_id&gt;/&#x27;</span>, views.detail, name=<span class="hljs-string">&#x27;detail&#x27;</span>),    <span class="hljs-comment"># ex: /polls/1/results/</span>    path(<span class="hljs-string">&#x27;&lt;int:question_id&gt;/results/&#x27;</span>, views.results, name=<span class="hljs-string">&#x27;results&#x27;</span>),    <span class="hljs-comment"># ex: /polls/1/vote/</span>    path(<span class="hljs-string">&#x27;&lt;int:question_id&gt;/vote/&#x27;</span>, views.vote, name=<span class="hljs-string">&#x27;vote&#x27;</span>),]</code></pre><p>修改<code>polls/templates/polls/index.html</code></p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>问题列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>&#123;% if latest_question_list %&#125;  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>    &#123;% for question in latest_question_list %&#125;      &#123;#<span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% url &#x27;detail&#x27; question.id %&#125;&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>#&#125;      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% url &#x27;polls:detail&#x27; question.id %&#125;&quot;</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    &#123;% endfor %&#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>&#123;% else %&#125;  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>No polls are available.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#123;% endif %&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h4 id="六-Form"><a href="#六-Form" class="headerlink" title="六.Form"></a>六.Form</h4><h5 id="1-html"><a href="#1-html" class="headerlink" title="1.html"></a>1.html</h5><p>让我们更新上一个教程中的投票详细信息模板<code>（polls/detail.html）</code>，以便该模板包含一个<code>html&lt;form&gt;</code>元素：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>详细页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&#123;% url &#x27;polls:vote&#x27; question.id %&#125;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>    &#123;% crsf_token %&#125;    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span>      <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>      <span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span>      &#123;% if error_message %&#125;        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>&#123;&#123; error_message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>      &#123;% endif %&#125;      &#123;% for choice in question.choice_set.all %&#125;        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;choice&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;choice&#123;&#123; forloop.counter &#125;&#125;&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123; choice.id &#125;&#125;&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;choice&#123;&#123; forloop.counter &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; choice.choice_text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>      &#123;% endfor %&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Vote&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>上面的模板为每个问题选择显示一个单选按钮.<br>每个单选按钮的值是相关问题选择的ID. 每个单选按钮的名称是”选择”.<br>这意味着，当某人选择其中一个单选按钮并提交表单时，它将发送<code>POST data choice=#其中#是所选选项的ID</code>.<br>这是<code>HTML</code>表单的基本概念. 我们将表单的操作设置为<code>&#123;%url'polls:vote'question.id%&#125;</code>，并设置<code>method=&quot;post&quot;</code>.<br>使用<code>method=&quot;post&quot;（而不是method=&quot;get&quot;）</code>非常重要，因为提交此表单的行为将改变服务器端的数据.<br>无论何时创建改变服务器端数据的表单，请使用<code>method=&quot;post&quot;</code>.<br>这个技巧不是Django特有的；一般来说，这是很好的web开发实践. </p><p><code>forloop.counter</code>指示<code>for</code>标记经过其循环的次数.</p><p>由于我们正在创建一个<code>POST</code>表单（它可能具有修改数据的效果），我们需要担心<code>Cross Site Request Forgeries</code>.<br>谢天谢地，你不必太担心，因为<code>Django</code>提供了一个有用的系统来抵御它.<br>简而言之，所有针对内部<code>URL</code>的帖子表单都应该使用<code>&#123;%csrf_token%&#125;</code>模板标记.</p><h5 id="2-urls"><a href="#2-urls" class="headerlink" title="2.urls"></a>2.urls</h5><p><code>polls/urls.py</code></p><pre><code class="hljs python"><span class="hljs-comment"># ex: /polls/1/vote/</span>path(<span class="hljs-string">&#x27;&lt;int:question_id&gt;/vote/&#x27;</span>, views.vote, name=<span class="hljs-string">&#x27;vote&#x27;</span>),</code></pre><h5 id="3-views"><a href="#3-views" class="headerlink" title="3.views"></a>3.views</h5><p><code>polls/views.py</code></p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse, Http404, HttpResponseRedirect<span class="hljs-keyword">from</span> django.template <span class="hljs-keyword">import</span> loader<span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, get_object_or_404<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> reverse<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Question<span class="hljs-comment"># Create your views here.</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>(<span class="hljs-params">request</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    问题列表页面.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    latest_question_list = Question.objects.order_by(<span class="hljs-string">&#x27;-pub_date&#x27;</span>)[:<span class="hljs-number">5</span>]    context = &#123;        <span class="hljs-string">&#x27;latest_question_list&#x27;</span>: latest_question_list    &#125;    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;polls/index.html&#x27;</span>, context)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">detail</span>(<span class="hljs-params">request, question_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    详细页面.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-comment"># try:</span>    <span class="hljs-comment">#     question = Question.objects.get(pk=question_id)</span>    <span class="hljs-comment"># except Question.DoesNotExist:</span>    <span class="hljs-comment">#     raise Http404(&quot;Question does not exist&quot;)</span>    question = get_object_or_404(Question, pk=question_id)    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;polls/detail.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;question&#x27;</span>: question&#125;)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">results</span>(<span class="hljs-params">request, question_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    结果页面.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    response = <span class="hljs-string">&quot;You&#x27;re looking at the results of question %s.&quot;</span>    <span class="hljs-keyword">return</span> HttpResponse(response % question_id)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">vote</span>(<span class="hljs-params">request, question_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    投票.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    question = get_object_or_404(Question, pk=question_id)    <span class="hljs-keyword">try</span>:        select_choice = question.choice_set.get(pk=request.POST[<span class="hljs-string">&#x27;choice&#x27;</span>])    <span class="hljs-keyword">except</span> (KeyError, Choice.DoesNotExist):        <span class="hljs-keyword">return</span> render(            request            , <span class="hljs-string">&#x27;polls/detail.html&#x27;</span>            , &#123;                <span class="hljs-string">&#x27;question&#x27;</span>: question,                <span class="hljs-string">&#x27;error_message&#x27;</span>: <span class="hljs-string">&quot;You didn&#x27;t select a choice.&quot;</span>            &#125;        )    <span class="hljs-keyword">else</span>:        select_choice.votes += <span class="hljs-number">1</span>        select_choice.save()        <span class="hljs-keyword">return</span> HttpResponseRedirect(reverse(<span class="hljs-string">&#x27;polls:results&#x27;</span>, args=(question.<span class="hljs-built_in">id</span>,)))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">results</span>(<span class="hljs-params">request, question_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    结果页面.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    question = get_object_or_404(Question, pk=question_id)    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;polls/results.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;question&#x27;</span>: question&#125;)</code></pre><p><code>polls/results.html</code></p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>结果<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>    &#123;% for choice in question.choice_set.all %&#125;      <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>        &#123;&#123; choice.choice_text &#125;&#125; -- &#123;&#123; choice.votes &#125;&#125; vote&#123;&#123; choice.votes|pluralize &#125;&#125;      <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>    &#123;% endfor %&#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;% url &#x27;polls:detail&#x27; question.id %&#125;&quot;</span>&gt;</span>Vote again?<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/django-started/016.png" alt="016" style="zoom:67%;margin-left: 0;"></p><h5 id="4-Less-code"><a href="#4-Less-code" class="headerlink" title="4.Less code"></a>4.Less code</h5><p>让我们将投票应用程序转换为使用通用视图系统，这样我们就可以删除一些自己的代码.<br>我们必须采取一些步骤来进行转换。我们将： </p><ul><li>转换URLconf.</li><li>删除一些旧的、不需要的视图.</li><li>基于Django的通用视图引入新视图.</li></ul><p><code>polls/views.py</code></p><p>我们在这里使用两个通用视图：<code>ListView</code>和<code>DetailView</code>.</p><p>这两个视图分别抽象了<code>显示对象列表</code>和<code>显示特定类型对象的详细信息页面</code>的概念.<br>每个通用视图都需要知道它将作用于什么模型. 这是使用<code>model</code>属性提供的.<br><code>DetailView</code>泛型视图希望从URL捕获的主键值被称为<code>pk</code>，因此我们将泛型视图的<code>question_id</code>更改为<code>pk</code>.</p><p>默认情况下，DetailView通用视图使用名为<code>&lt;app name&gt;/&lt;model name&gt;_ detail.html</code>.<br>在我们的例子中，它将使用模板<code>polls/question_detail.html</code>.<br><code>template_name</code>属性用于告诉<code>Django</code>使用特定的模板名称，而不是自动生成的默认模板名称.<br>我们还为结果列表视图指定模板名称，这确保了结果视图和细节视图在渲染时具有不同的外观，即使它们都是幕后的细节视图.</p><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse, Http404, HttpResponseRedirect<span class="hljs-keyword">from</span> django.template <span class="hljs-keyword">import</span> loader<span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, get_object_or_404<span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> reverse<span class="hljs-keyword">from</span> django.views <span class="hljs-keyword">import</span> generic<span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Question, Choice<span class="hljs-comment"># Create your views here.</span><span class="hljs-comment"># def index(request):</span><span class="hljs-comment">#     &quot;&quot;&quot;</span><span class="hljs-comment">#     问题列表页面.</span><span class="hljs-comment">#     &quot;&quot;&quot;</span><span class="hljs-comment">#     latest_question_list = Question.objects.order_by(&#x27;-pub_date&#x27;)[:5]</span><span class="hljs-comment">#     context = &#123;</span><span class="hljs-comment">#         &#x27;latest_question_list&#x27;: latest_question_list</span><span class="hljs-comment">#     &#125;</span><span class="hljs-comment">#     return render(request, &#x27;polls/index.html&#x27;, context)</span><span class="hljs-comment">#</span><span class="hljs-comment">#</span><span class="hljs-comment"># def detail(request, question_id):</span><span class="hljs-comment">#     &quot;&quot;&quot;</span><span class="hljs-comment">#     详细页面.</span><span class="hljs-comment">#     &quot;&quot;&quot;</span><span class="hljs-comment">#     # try:</span><span class="hljs-comment">#     #     question = Question.objects.get(pk=question_id)</span><span class="hljs-comment">#     # except Question.DoesNotExist:</span><span class="hljs-comment">#     #     raise Http404(&quot;Question does not exist&quot;)</span><span class="hljs-comment">#     question = get_object_or_404(Question, pk=question_id)</span><span class="hljs-comment">#     return render(request, &#x27;polls/detail.html&#x27;, &#123;&#x27;question&#x27;: question&#125;)</span><span class="hljs-comment">#</span><span class="hljs-comment">#</span><span class="hljs-comment"># def results(request, question_id):</span><span class="hljs-comment">#     &quot;&quot;&quot;</span><span class="hljs-comment">#     结果页面.</span><span class="hljs-comment">#     &quot;&quot;&quot;</span><span class="hljs-comment">#     response = &quot;You&#x27;re looking at the results of question %s.&quot;</span><span class="hljs-comment">#     return HttpResponse(response % question_id)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">vote</span>(<span class="hljs-params">request, question_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    投票.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    question = get_object_or_404(Question, pk=question_id)    <span class="hljs-keyword">try</span>:        select_choice = question.choice_set.get(pk=request.POST[<span class="hljs-string">&#x27;choice&#x27;</span>])    <span class="hljs-keyword">except</span> (KeyError, Choice.DoesNotExist):        <span class="hljs-keyword">return</span> render(            request            , <span class="hljs-string">&#x27;polls/detail.html&#x27;</span>            , &#123;                <span class="hljs-string">&#x27;question&#x27;</span>: question,                <span class="hljs-string">&#x27;error_message&#x27;</span>: <span class="hljs-string">&quot;You didn&#x27;t select a choice.&quot;</span>            &#125;        )    <span class="hljs-keyword">else</span>:        select_choice.votes += <span class="hljs-number">1</span>        select_choice.save()        <span class="hljs-keyword">return</span> HttpResponseRedirect(reverse(<span class="hljs-string">&#x27;polls:results&#x27;</span>, args=(question.<span class="hljs-built_in">id</span>,)))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">results</span>(<span class="hljs-params">request, question_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    结果页面.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    question = get_object_or_404(Question, pk=question_id)    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;polls/results.html&#x27;</span>, &#123;<span class="hljs-string">&#x27;question&#x27;</span>: question&#125;)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexView</span>(<span class="hljs-params">generic.ListView</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    简化Index.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    template_name = <span class="hljs-string">&#x27;polls/index.html&#x27;</span>    context_object_name = <span class="hljs-string">&#x27;latest_question_list&#x27;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        返回最后五个已发布的问题.</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-keyword">return</span> Question.objects.order_by(<span class="hljs-string">&#x27;-pub_date&#x27;</span>)[:<span class="hljs-number">5</span>]<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DetailView</span>(<span class="hljs-params">generic.DetailView</span>):</span>    model = Question    template_name = <span class="hljs-string">&#x27;polls/detail.html&#x27;</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResultsView</span>(<span class="hljs-params">generic.DetailView</span>):</span>    model = Question    template_name = <span class="hljs-string">&#x27;polls/results.html&#x27;</span></code></pre><p><code>polls/urls.py</code></p><p>请注意，第二个和第三个模式的路径字符串中匹配模式的名称已从<code>&lt;question_id&gt;</code>更改为<code>&lt;pk&gt;</code>.</p><pre><code class="hljs python"><span class="hljs-comment">#! /usr/bin/python3</span><span class="hljs-comment"># -*- coding:utf-8 -*-</span><span class="hljs-comment"># @Time: 2022/3/4</span><span class="hljs-comment"># @Author: Lingchen</span><span class="hljs-comment"># @Prescription:</span><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> viewsapp_name = <span class="hljs-string">&#x27;polls&#x27;</span>urlpatterns = [    <span class="hljs-comment"># # ex: /polls/</span>    <span class="hljs-comment"># path(&#x27;&#x27;, views.index, name=&#x27;index&#x27;),</span>    <span class="hljs-comment"># # ex: /polls/1</span>    <span class="hljs-comment"># path(&#x27;&lt;int:question_id&gt;/&#x27;, views.detail, name=&#x27;detail&#x27;),</span>    <span class="hljs-comment"># # ex: /polls/1/results/</span>    <span class="hljs-comment"># path(&#x27;&lt;int:question_id&gt;/results/&#x27;, views.results, name=&#x27;results&#x27;),</span>    <span class="hljs-comment"># # ex: /polls/1/vote/</span>    <span class="hljs-comment"># path(&#x27;&lt;int:question_id&gt;/vote/&#x27;, views.vote, name=&#x27;vote&#x27;),</span>    path(<span class="hljs-string">&#x27;&#x27;</span>, views.IndexView.as_view(), name=<span class="hljs-string">&#x27;index&#x27;</span>),    path(<span class="hljs-string">&#x27;&lt;int:pk&gt;/&#x27;</span>, views.DetailView.as_view(), name=<span class="hljs-string">&#x27;detail&#x27;</span>),    path(<span class="hljs-string">&#x27;&lt;int:pk&gt;/results/&#x27;</span>, views.ResultsView.as_view(), name=<span class="hljs-string">&#x27;results&#x27;</span>),    path(<span class="hljs-string">&#x27;&lt;int:question_id&gt;/vote/&#x27;</span>, views.vote, name=<span class="hljs-string">&#x27;vote&#x27;</span>)]</code></pre><p><u><strong>PS: 本文为操作记录, 仅供学习与参与!</strong></u></p>]]></content>
    
    
    <categories>
      
      <category>django</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PMP-关键词记录</title>
    <link href="/2022/01/29/pmp-keywords-starts/"/>
    <url>/2022/01/29/pmp-keywords-starts/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="PMP-关键词记录"><a href="#PMP-关键词记录" class="headerlink" title="PMP-关键词记录"></a>PMP-关键词记录</h3><h4 id="1-监控项目工作"><a href="#1-监控项目工作" class="headerlink" title="1.监控项目工作"></a>1.监控项目工作</h4><pre><code class="hljs bash">备选方案分析: 用于在出现偏差时选择要执行的纠正措施或纠正措施和预防措施的组合.成本效益分析: 有助于确定最节约成本的纠正措施.挣值分析: 对范围, 进度和成本绩效进行了综合分析.根本原因分析: 可用于识别出现偏差的原因.趋势分析: 根据以往结果预测未来绩效.偏差分析: 审查目标绩效与实际绩效之间的差异.</code></pre><p>趋势分析是一种分析技术, 它使用数学模型根据历史结果预测未来结果.<br>趋势分析根据以往结果预测未来绩效, 它可以预测项目的进度延迟, 提前让项目经理意识到, 按照既定趋势发展, 后期进度可能出现的问题.<br>趋势分析旨在<u>审查项目绩效</u>随时间的变化情况, 以判断绩效是正在改善还是正在恶化.<br>要想打消发起人的顾虑, 项目经理就得用趋势分析, 用客观, 具体的数字证明现在的<strong>偏差</strong>是能够在未来被纠正的, 而且项目成本不会突破预算.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/001.png" alt="001"></p><p>问题:</p><pre><code class="hljs bash">一个项目正在实施将为组织提供竞争优势的技术.项目经理了解到, 一项刚推出的新技术可以导致计划推出的技术过时.项目经理应该怎么做?A. 忽略这技术的发展, 并关注项目的原始范围B. 建议使用新技术来跟上最新的技术发展C. 执行成本效益分析, 以确定升级是否合理D. 完成影响评估并为项目建议最佳可选方案<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">根据当时的初步信息, 商业案例中的财务预测数量级较高. 在项目规划期间, 现在很清楚, 需要完成若干其他扶持活动才能交付项目.这意味着项目预算至少比商业认证中所述的要增加50%.你接下来应该怎么做?A. 在项目范围中包括活动, 在产品预算中包括新的估算值B. 对项目执行成本/收益分析C. 将此记录为项目风险并夸大应急储备D. 发出变更请求以增加时间和预算<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">你最近向客户交付了一款产品, 你花了18个月的时间才构建产品. 该产品是根据具有特定产品规格的合同专门为该客户制造的.因测试遗漏了一项缺陷, 产品投入生产, 引起了客户投诉. 产品符合合同中的规范, 因为合同只规定了高层级产品要求, 没有指定设计细节.你应该先做什么?A. 调查问题并确定根本原因B. 发出变更请求以修复缺陷C. 通知客户产品符合要求, 但你愿意考虑解决此问题D. 修复问题, 但向客户收取任何额外费用<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">以下所有选项都是有效变更控制过程的组成部分, 除了: A. 偏差分析B. 专家判断C. 变更控制D. 会议<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">你正在参加一个由项目经理展示其项目的项目评审会议. 到目前为止, 他的项目受到了良好控制, 在成本和进度基准方面表现良好.在此基础上, 项目经理预测了项目完成日期和最终成本估算. 项目经理应用了哪种技术?A. 历史分析B. 趋势分析C. 参数化分析D. 帕累托分析<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">在审查一个长期项目期间, 相关方对项目经理关于项目绩效已随时间转移而得到改善的主张表示不认同.他们要求提交详细的报告. 项目经理应该怎么做?A. 完成趋势分析, 并报告结果B. 确定进度绩效指数(SPI), 以显示团队的工作效率C. 计算完工尚需估算(ETC), 以显示潜在的新完成日期D. 执行偏差分析, 并报告结果<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">在一个项目中途, 一名新项目经理加入团队. 在审查项目管理计划后, 项目经理意识到项目需求存在差距. 项目经理下一步应该做什么?A. 要求项目发起人提供所有遗漏的需求B. 与项目团队合作以收集所有遗漏的需求C. 与关键相关方开会, 以识别与遗漏需求相关的风险D. 安排一次与关键相关方的需求澄清会议<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">在项目执行中, 项目经理发现了严重成本超支问题. 在进行根本原因分析后, 项目经理确定批准的预算与原始估算不一致.若要避免这个问题, 项目经理应该事先做什么?A. 注意在每次挣值审查期间的趋势, 并在第一次出现超支迹象时重新估算B. 预测成本超支, 并请求提供更高的应急储备以解决潜在的差距C. 在创建成本管理计划期间识别这种差异, 并增加预算D. 减少团队估算的小时数以与原始项目预算保持一致<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">你正在开发一个实时跟踪公司开支的解决方案. 在详细设计过程中, 团队发现软件体系结构依赖于第三方开源组件, 该组件会导致某些负载的稳定性问题.此组件对整个系统的设计至关重要, 但给项目带来重大风险. 你应该先做什么?A. 雇用程序员来定制和增强第三方组件B. 从头开始开发组件C. 与第三方接触, 共同处理稳定性问题D. 执行备选方案分析<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">发起人担心按照现在的状况发展, 完成项目的成本会突破预算. 项目经理应该做以下哪种分析来打消发起人的顾虑?A. 储备分析B. 偏差分析C. 趋势分析D. 成本效益分析<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">供应商建议项目经理,为了满足要求的规格,需要更换特定材料.为确保成本基准不受影响,项目经理应该审查下列哪一项？A. 管理储备B. 应急储备C. 成本预测D. 挣值分析(EV)<span class="hljs-comment"># D</span><span class="hljs-comment"># 要变更材料，先分析影响，然后再考虑其他措施，因此选D.</span><span class="hljs-comment"># 挣值分析，确定成本绩效与基准是否一致.</span><span class="hljs-comment"># A - 管理储备会动用基准.</span><span class="hljs-comment"># B - 在D的后面.</span><span class="hljs-comment"># C - 成本预测是输出.</span></code></pre><pre><code class="hljs bash">一个为期两年的项目完成了50%，进度绩效指数1.051和成本绩效指数为1.02.一个新的项目进入投资组合，被视为一个优先级并且高于当前的项目.因此，目前项目失去了三个关键资源. 尽管资源紧张，但是高级主管仍然要求项目经理按时完成项目，并且按照预算且不会有额外的资源补给.项目经理应该怎样做?A. 执行资源平衡B. 赶工C. 变更项目基准D. 实施偏差分析<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P262 章节：7.4.2.2偏差分析：</span><span class="hljs-comment"># 可开展偏差分析，来识别成本基准与实际项目绩效之问的差异；</span><span class="hljs-comment"># 然后可以实施进一步的分析，以判定偏离进度基准的原因和程度，</span><span class="hljs-comment"># 并决定是否需要采取纠正或预防措施.</span><span class="hljs-comment"># 先进行偏差分析，再确认是否要采取纠正或预防措施.</span></code></pre><pre><code class="hljs bash">项目发起人不断要求尽快交付项目.项目经理识别到一个将会让项目延迟一周时间的问题.项目经理应该做什么？A. 向整个团队发送包含修订后进度计划和预算的更新状态报告B. 在项目管理计划中记录这项延迟,并与发起人沟通该问题C. 制定恢复计划以尽量减少影响,并与项目发起人开会讨论该问题D. 请一位主题专家(SME)亲自与项目发起人讨论该问题<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK 6th 页码：P110章节：4.5.2.2 备选方案分析.</span><span class="hljs-comment"># 备选方案分析用于在出现偏差时选择要执行的纠正措施或纠正措施和预防措施的组合.</span></code></pre><pre><code class="hljs bash">一名新项目经理被任命管理一个目前落后于进度的项目，新项目经理应使用挣值技术来确定下列哪一项？A. 资源分解结构B. 与进度延迟有关的风险C. 项目中的范围蔓延D. 基准偏差<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P263 章节：7.4.2.2 挣值分析.</span><span class="hljs-comment"># 进度绩效指数（SPI）是测量进度效率的一种指标，</span><span class="hljs-comment"># 表示为挣值与计划价值之比，反映了项目团队完成工作的效率.</span><span class="hljs-comment"># 当 SPI 小于 1.0 时，说明已完成的工作量未达到计划要求；</span><span class="hljs-comment"># 当 SPI 大于 1.0 时，则说明已完成的工作量超过计划.</span><span class="hljs-comment"># SPI与CPI所比较的“1”就是基准.</span></code></pre><h4 id="2-结束项目或阶段"><a href="#2-结束项目或阶段" class="headerlink" title="2.结束项目或阶段"></a>2.结束项目或阶段</h4><p><strong>中止</strong> : 项目中止, 先要调查原因, 再更新经验教训, 调查原因的目的是经验教训.</p><pre><code class="hljs bash">一个关键项目相关方撤回对项目的财务支持. 项目现在资金不足, 可能会取消, 项目经理应该怎么做?A. 与该项目相关方开会, 确定撤回财务支持的原因B. 与团队一起头脑风暴成本节约方案C. 寻找愿意提供财务支持的新项目相关方D. 与项目发起人开会, 建议取消项目<span class="hljs-comment"># A</span></code></pre><p> <strong>移交</strong> : 交付所有权, 转交给运营团队</p><pre><code class="hljs bash">项目经理成功地将空调采购从 A 供应商转向 B 供应商. 新产品检验完毕, 并交付了所有项目可交付成果. 项目经理下一步应该怎么做?A. 将所有权移交采购部, 以便再次订购B. 向供应商 B 授予成本加激励费用采购合同C. 作出自制或外购决定D. 审查采购工作说明书<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">在被要求比预期时间更早地完成项目的行政收尾时，项目经理应该做什么?A. 重定需求规范的基准B. 确保项目文档已存档C. 更新问题日志D. 提交变更请求<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P113章节：4.6变更流程：</span><span class="hljs-comment"># 变更提出后，先分析影响，再提交含解决措施的变更请求给CCB.</span><span class="hljs-comment"># 改变了进度基准，需要提交变更请求.</span></code></pre><pre><code class="hljs bash">项目已准备好收尾,但审计认为组织归档程序存在缺陷.由于发起人对归档不感兴趣, 项目经理接下来应该做什么?A. 与所有相关方开会B. 更新组织归档标准C. 项目收尾D. 聘请归档专家<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)4.7 结束项目或阶段.</span><span class="hljs-comment"># 项目审计发现问题，就解决问题，更新归档相关的标准程序.</span><span class="hljs-comment"># A - 没有必要.</span><span class="hljs-comment"># C - 不能忽略审计的问题.</span><span class="hljs-comment"># D - 主要是程序问题，改进就好了.</span></code></pre><pre><code class="hljs bash">由于财务问题，客户取消了一个接近完成的项目.项目经理下一步应该怎么做？A. 立即解散所有项目资源B. 请求项目发起人批准停止工作C. 记录经验教训D. 完成剩余任务<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P121-4.7结束项目或阶段.</span><span class="hljs-comment"># &quot;取消了一个接近完成的项目&quot;，项目中止，进入结束项目阶段，要总结经验教训.</span><span class="hljs-comment"># A - 工作在C之后.</span><span class="hljs-comment"># D - 项目中止，没有必要完成剩余的任务.</span></code></pre><h4 id="3-塔克曼阶梯理论"><a href="#3-塔克曼阶梯理论" class="headerlink" title="3.塔克曼阶梯理论"></a>3.塔克曼阶梯理论</h4><p>团队建设通常要经过五个阶段</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/002.png" alt="002"></p><ul><li><p>形成阶段: 团队成员刚刚加入团队, 对项目的任务和分工通常都不甚了解, 需要项目经理直截了当, 清晰明确地指明工作内容和要求.<br>在这个阶段, 处于了解项目情况中, 完成的<u>工作量是最小的</u>.项目经理需要指导团队, 并将他们从这个阶段推进到执行阶段.<br>团队成员<u>独立工作</u>.</p></li><li><p>震荡阶段: 团队成员之间爆发冲突, 土气低落, 项目应该通过斡旋, 调解, 利用自己的影响力引导团队走出冲突的旋涡.<br>团队开始<u>了解项目工作</u>.</p></li><li><p>规范阶段: 团队成员已经开始互相认可, 彼此适应, 项目应该适度接后撤, 需要参与时再参与, 主要起到帮助和促进团队建设的作用.<br>团队开始<u>相互学习</u>.<br>交流项目执行的故事，属于学习<u><strong>相互信任的阶段</strong></u>，因此属于规范阶段.</p></li><li><p>表现阶段/成熟阶段: 团队已经配合默契, 项目经理应该充分信任团队, 给团队成员更充分的授权, 为团队提供必要的支持.<br>在成熟阶段, 他们作为一个组织良好的单位工作, 达到最大的性能.</p></li></ul><p>团队经历了多个项目, 已经完成了塔克曼阶梯理论中的形成, 磨合, 规范阶段, 当再接新项目时, 可以直接进入<u><strong>表现阶段</strong></u>.</p><p>团队不同发展阶段项目经理的领导风格:</p><ul><li>形成阶段  -  指令型/指导式</li><li>震荡阶段  -  影响型/教练式</li><li>规范阶段  -  参与型</li><li>表现阶段/成熟阶段  -  授权型/委任式</li></ul><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/009.png" alt="009"></p><pre><code class="hljs bash">项目经理观察到这段时间团队冲突在减少, 团队成员开始彼此接受并主动配合对方. 这时项目经理应该采取以下哪种领导风格?A. 指令型B. 影响型C. 参与型D. 授权型<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">项目经理发现项目团队成员之间缺乏信任, 冲突不断, 土气低落. 团队可能进入了什么阶段? 此时项目经理应该采取哪种类型的领导风格?A. 震荡阶段, 指导型B. 规范阶段, 参与型C. 规范阶段, 授权型D. 震荡阶段, 影响型<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">团队经历不同的发展阶段, 根据塔克曼发展阶梯, 完成工作量最小的阶段通常是: A. 震荡阶段B. 形成阶段C. 规范阶段D. 成熟阶段<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">你正在与高级经理会面, 他正在帮助你组织和管理来自不同背景的IT人员团队. 在讨论团队现在展示的创造力和突破性表现时, 你的高级经理表示你的团队已经从震荡阶段转移到了成熟阶段. 以下哪一项描述了成熟阶段的特征?A. 在成熟阶段, 团队开始一起工作并调整他们的行为B. 在成熟阶段, 团队作为一个组织良好的单位发挥作用C. 在成熟阶段, 团队完成工作并作为项目团队解散D. 在成熟阶段, 团队成员不协作<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">一个项目团队连续成功交付了3个重要项目, 团队成员之间相互信任, 彼此欣赏, 而且配合默契. 他们又接到一个类似的新项目, 团队最有可能进入以下哪个阶段?A. 形成阶段B. 震荡阶段C. 规范阶段D. 表现阶段<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">在获取成功完成项目的活动中，项目团队喜欢互动和交流项目执行的故事，此时项目团队处于什么阶段？ A. 震荡阶段B：调整阶段C：成熟阶段D：规范阶段<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK （6）P338-9.4建设团队-塔克曼阶梯理论.</span><span class="hljs-comment"># 规范阶段，团队成员开始协同工作，并调整各自的工作习惯和行为来支持团队，</span><span class="hljs-comment"># 团队成员会学习相互信任.</span><span class="hljs-comment"># 成熟阶段，团队就像一个组织有序的单位那样工作，团队成员之间相互依靠，平稳高效解决问题.</span><span class="hljs-comment"># 抓住关键词：学习相互信任 - 规范；成员相互依靠 - 成熟.</span><span class="hljs-comment"># 本题成员们互动交流项目管理案例，是一种相互学习，不是相互依靠，所以选规范阶段，不选成熟阶段。</span></code></pre><pre><code class="hljs bash">项目团队已经互相介绍并知晓知道项目的含义.团队接下来要经历哪两个阶段？(选择两项)A. 规范阶段B. 形成阶段C. 震荡阶段D. 解散阶段E. 成熟阶段<span class="hljs-comment"># AC</span><span class="hljs-comment"># PMBOK 6th 页码：P338章节：9.4 塔克曼阶梯理论：</span><span class="hljs-comment"># 形成阶段、震荡阶段、规范阶段、成熟阶段、解散阶段.</span><span class="hljs-comment"># 互相介绍，属于形成阶段，接下来应该是震荡阶段和规范阶段.</span></code></pre><pre><code class="hljs bash">项目经理观察到某些项目团队成员开始一起工作并调整工作习惯，但是，他们彼此不互相信任.项目经理可以得出下列哪一项关于团队的结论?A. 团队处于发展的规划阶段，很有可能前进到执行阶段B. 团队处于发展的规范阶段，很有可能倒退回震荡阶段C. 团队处于发展的震荡阶段，很好有可能前进到规划阶段D. 团队处于发展的震荡阶段，很有可能倒退回组建阶段<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK Gth 页码：P338章节：9.4塔克曼阶梯理论：</span><span class="hljs-comment"># 形成阶段、震荡阶段、规范阶段、成熟阶段、解散阶段</span><span class="hljs-comment"># 调整工作习惯，属于规范阶段，但是不信任，可能后退到震荡.</span></code></pre><pre><code class="hljs bash">一位敏捷教练被分配到一个新成立的团队中负责他们的第一个项目.教练安排了团队，提供了关于敏捷最佳实践的培训，并解释说敏捷团队是自我管理的.然而，团队成员正在努力从看板面板分配用户故事，并且由于缺乏协作，生产力正在受到影响.敏捷教练的最佳行动方案是什么?A. 忽略这个问题，因为敏捷团队应该是自我管理的B. 从现在开始，将用户故事标记给各个团队成员C. 将团队章程替换为更有生产力的项目团队的章程D. 采取更直接的方法，由于团队仍处于形成阶段<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P338 章节：9.4 塔克曼阶梯理论：</span><span class="hljs-comment"># 形成阶段、震荡阶段、规范阶段、成熟阶段、解散阶段</span><span class="hljs-comment"># 形成阶段，敏捷教练应该指导团队.</span></code></pre><pre><code class="hljs bash">项目经理与团队定期举行虛拟会议. 在执行阶段,项目经理注意到两名特定团队成员经常争辩和发生分歧,这导致会议超时并让团队其他成员分心. 项目经理应该做什么?A. 与团队成员讨论问题,如果继续存在该行为,则寻求管理层的决议B. 告知这些团队成员他们的行为违反了团队章程,并将他们从团队中开除C. 要求这些团队成员的职能经理解决这种行为D. 认识到这是震荡阶段的一部分,并安排团队建设活动<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P338-9.4 团队争吵，属于塔克曼阶梯理论的震荡阶段.</span><span class="hljs-comment"># 团队建设是此过程重要的工具.</span><span class="hljs-comment"># AC - 都是找他人解决，不合适.</span><span class="hljs-comment"># B  - 直接开除明显不正确.</span></code></pre><pre><code class="hljs bash">你的团队已经不再因琐碎的工作问题而无休止地争论.你同意他们是一群实力强大、知识渊博的人，但同时也固执己见.你知道你已经花了无数个小时来解决大大小小的冲突.几个月后的今天，你领导的敏捷团队终于进入了执行阶段.团队成员现在需要你作为他们的领导者做什么？A. 他们需要很多指导才能让他们完全专注于他们的目标B. 他们现在需要你的指导和支持，以确保他们的表现保持高水平C. 他们现在不需要太多的指导或支持；他们基本上可以自我支持和自我指导的D. 尽管他们不会承认，但他们仍然需要很多支持。你可以让他们自己指导自己的工作<span class="hljs-comment"># C</span><span class="hljs-comment"># 当团队到达执行阶段时，团队成员不需要领导者的太多指导或支持;</span><span class="hljs-comment"># 他们一起工作得非常顺利，基本上可以自我指导和自我支持.</span></code></pre><h4 id="4-引导式研讨会"><a href="#4-引导式研讨会" class="headerlink" title="4.引导式研讨会"></a>4.引导式研讨会</h4><p>引导与主题研讨会结合使用, 把主要相关方召集在一起定义产品需求.<br>研讨会可用于快速定义跨职能需求并协调相关方的需求差异.</p><p>引导式研讨会可用于快速定义跨职能需求并协同相关方的需求差异.<br>因为具有群体互动的特点, 有效引导的研讨会有助于参与之间建立信任, 改进关系, 改善沟通, 从而有利于相关方达成一致意见.<br>此外, 分别召开会议相比, 研讨会能够更早发现并解决问题.</p><p>引导式研讨会 : 特征是由主持人引导来自<u><strong>跨部门, 跨专业的参会者</strong></u>, 并收集他们的需求.</p><p>积极倾听 : 一种沟通方式, 要求听众通过重新陈述或解释他们听到的话, 确认他们听到的消息以及确认双方的理解来反馈他们听到的声音.<br>在收集和分析相关方的需求和期望时, 积极倾听至关重要.</p><p>JAD是引导式研讨会的一种, 引导式研讨会就是为了解决不同相关方需求差异的重要工具.</p><p><strong>数据收集-问卷调查</strong><br>问卷调查是指设计一系列书面问题，向众多受访者快速收集信息. 问卷调查方法非常适用于以下情况：<br><strong>受众多样化</strong>，需要快速完成调查，<u><strong>受访者地理位置分散</strong></u>，并且适合开展<u>统计分析</u>.</p><p>人际关系和团队技能: </p><ul><li>积极倾听</li><li>冲突管理<br>冲突管理中, 首先明确<u>是不是一个问题</u>, 而不是风险. 再确定如何解决冲突.</li><li>文化意识</li><li>会议管理</li><li>人际交往</li><li>政治意识</li></ul><p>keywords : 需求不同, 需求差异, 需求不一致</p><p>人际关系与团队技能-用户技能 : </p><p>用户故事是对所需功能的简短文字描述, 经常产生于<strong>需求研讨会</strong>.<br>用户故事描述哪个相关方将从功能中受益(角色), 他需要实现什么(目标), 以及他期望获得什么利益(动机), 这种工具通常用于<strong>敏捷开发方法</strong>.<br>公司有大量的产品增强功能待办事项及用户故事, 针对这个情况, 项目经理要在启动的时候把敏捷的生命周期记录下来并讨论需求.</p><p><strong>名义小组</strong> : 名义小组的特点就是<u>参会者互不干扰</u>, 独立思考, 独立发表见解, 并投票表决出最优方案.</p><pre><code class="hljs bash">项目团队在项目规划阶段收集需求. 客户的信息技术团队所提交的某些需求与客户的商务部提出的需求相冲突.应该用下列哪一项来与相关方解决这个问题?A. 开展访谈B. 引导式研讨会C. 召集焦点小组会议D. 执行需求头脑风暴<span class="hljs-comment"># B</span>引导式研讨会 -&gt; 专门用于解决需求不一致的工具</code></pre><pre><code class="hljs bash">在收集需求过程的中途, 项目经理发现有许多与产品需求有关未解决的问题, 以下哪一项通常是发现和解决问题的最佳方法?A. 面谈B. 使用相关方登记册C. 问卷调查D. 研讨会<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">在位于不同地区的众多相关方验收可交付成果后, 项目经理希望衡量他们的满意度. 项目经理该使用哪种工具?A. 头脑风暴B. 焦点小组C. 访谈D. 调研<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">你目前正领导组织中一个重大项目的需求收集和业务分析活动. 除了一流的技术和分析能力, 你将依赖于你的人际交往技巧来实现这个小项目的成功.在收集和分析相关方的需求和期望时, 以下哪种人际交往最为重要?A. 建立信任B. 解决冲突C. 克服阻力D. 积极倾听<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">项目经理面对一个由两个合资企业组成的指导委员会, 他们拥有对立的优先级. 一个伙伴希望加快进度; 而第二个合作伙伴想要高质量, 并且愿意接受更长时间的进度. 项目经理应该如何解决这个冲突?A. 将该冲突作为一项风险纳入风险管理计划中B. 更新问题日志并监控该冲突的解决方案C. 启动一个新的范围定义, 并与所有项目相关方进行协商D. 将该问题包含在质量管理计划中<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">在一个软件项目章程获得批准后, 项目经理计划收集相关方, 解决方案以及产品需求. 两位关键相关方离开项目, 由位于不同时区的人员取代. 若要完成需求跟踪矩阵, 项目经理应该怎么做?A. 使用名义小组技术收集多个地区的意见B. 安排一次联合应用设计(JAD)研讨会C. 举行多次虚拟会议D. 执行站点顺序需求审查<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P145-5.2.2.6 引导.</span><span class="hljs-comment"># JAD是引导式研究会的一种，引导式研讨会就是为了解决不同相关方需求差异的重要工具.</span><span class="hljs-comment"># A  - 名义小组也是收集需求的工具, 不过跨职能的需求B更合适一些.</span><span class="hljs-comment"># CD - 非收集需求的工具.</span></code></pre><pre><code class="hljs bash">项目经理希望每一位团队成员都能独立思考, 并发表各自独立的见解. 项目经理应该采用下列哪一项技术?A. 头脑风暴B. 焦点小组C. 引导式研讨会D. 名义小组<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">项目经理为一个新项目收集需求, 相关方来自不同的专业部门, 并且需求也各不相同. 为了确保相关方的需求都能够被收集,项目经理应该使用下列哪一项技术?A. 焦点小组B. 引导式研讨会C. 名义小组D. 德尔菲技术<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">一家跨国公司的组织单位有大量的产品增强功能待办事项, 这些产品增加功能是暂时保留的用户故事.待批准的预算申请在上周获得批准. 作为初始程序的一部分, 新指派的项目经理应该做什么?A. 记录项目生命周期和方法讨论需求B. 为所有用户故事制定一份进度计划C. 对所有用户故事执行风险评估D. 根据以前的相同产品的项目分配资源<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P145-5.2.2.6人际关系与团队技能-用户故事.</span><span class="hljs-comment"># 用户故事是对所需功能的简短文字描述，经常产生于需求研讨会.</span><span class="hljs-comment"># 用户故事描述哪个相关方将从功能中受益（角色)，他需要实现什么(目标)，</span><span class="hljs-comment"># 以及他期望获得什么 利益(动机)，这种工具通通常用于敏捷开发方法.</span><span class="hljs-comment"># 公司有大量的产品增强功能待办事项及用户故事，针对这个情况，</span><span class="hljs-comment"># 项目经理要在启动的时候把敏捷的生命周期记录下来并讨论需求.</span><span class="hljs-comment"># BC - &quot;为所有用户故事&quot;错误.</span><span class="hljs-comment"># D  - &quot;根据以往相同产品的项目&quot;错误，每个项目具有独特性，经验不能照搬复用.</span></code></pre><pre><code class="hljs bash">一个地理位置分散的团队成功完成了一个项目, 项目经理希望快速获得团队的统计分析反馈，项目经理应该使用下列哪种方法？A. 视频会议B. 焦点小组会议C. 调查问卷D. 电子邮件<span class="hljs-comment"># C</span><span class="hljs-comment"># A - 无法满足快速要求.</span><span class="hljs-comment"># B - 位置分散, 不可取.</span><span class="hljs-comment"># D - 速度慢, 同时由于反馈格式的不统一, 不利于对统计结果的整理.</span></code></pre><pre><code class="hljs bash">项目经理与一个由15人组成的团队召开会议，会议不断发生中断，会议目标几乎没有完成.若要解决这个问题，项目经理应该利用以下哪一项？A. 冲突管理B. 政治意识C. 非语言沟通D. 积极倾听<span class="hljs-comment"># A</span><span class="hljs-comment"># 10.2.2.6-冲突管理.</span><span class="hljs-comment"># 会议管理要能够处理会议中的期望、问题和冲突.</span><span class="hljs-comment"># 冲突已经出现，那么接下来就要对冲突进行管理.</span><span class="hljs-comment"># B - 政治意识，政治意识通常用于引导相关方参与.</span><span class="hljs-comment"># C - 沟通不是情景中暴露出来的问题的焦点.</span><span class="hljs-comment"># D - 积极倾听包括告知已收到、澄清与确认信息、理解，</span><span class="hljs-comment">#     以及消除妨碍理解的障碍，用来确保信息传递的效果，与情景焦点不符.</span></code></pre><pre><code class="hljs bash">在项目执行期间，某些任务所花的时间比预期长，团队成员之间存在一些分歧.并且发起人要求迅速采取行动来解决这个问题. 项目经理应该怎么做？A. 制定团队章程B. 与团队一起审查团队章程C. 与人力资源部门和团队一起开会讨论这个问题D. 实施冲突管理过程<span class="hljs-comment"># D</span><span class="hljs-comment"># 9.5.2.1-人际关系技能-冲突管理.</span><span class="hljs-comment"># 情景中提到了“存在分歧”，还需要”迅速采取行动“.</span><span class="hljs-comment"># 所以此时可以采用冲突管理中的强迫策略。选项ABC，与”迅速采取行动“的情景冲突.</span></code></pre><h4 id="5-需求跟踪矩阵"><a href="#5-需求跟踪矩阵" class="headerlink" title="5.需求跟踪矩阵"></a>5.需求跟踪矩阵</h4><p>需求跟踪矩阵是收集需求过程的输出, 它用于跟踪需求到<u>项目范围</u>, <u>目标</u>和<u>测试策略</u>. 将需求跟踪到项目风险是无效的.</p><p>需求跟踪矩阵提供了在整个项目生命周期中跟踪需求的一种方法.<br>把每个需求与业务目标或项目目标联系起来.<br>需求跟踪矩阵, 将<u><strong>相关方和可交付成果</strong></u>连接起来.</p><p>需求跟踪矩阵: 确定<u>可交付成果有没有满足需求</u>, 需求跟踪矩阵就对了</p><p>keywords : 相关方对可交付成果所有权有争议; 如何跟踪需求; 可交付成果的变更过程; 与业务目标联系</p><pre><code class="hljs bash">项目经理正与两名都声称对某一特定可交付成果拥有所有权的职能经理交涉. 项目经理可以查阅哪一份说明该问题的文件?A. 工作分析结构B. 需求跟踪矩阵C. 工作说明书D. 责任分配矩阵<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">你最近被聘为复杂流程数字化项目的项目经理. 该项目是目前正在使用瀑布式实践进行管理的更大项目的一部分.你希望在项目上尝试敏捷方法, 但需要维护需求可追溯性矩阵以符合计划治理需求.需求跟踪矩阵有助于跟踪以下所有情况, 但以下情况除外: A. 项目目标的要求B. 测试策略的要求C. 项目风险要求D. 项目范围的要求<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">项目经理已经在一个项目上工作了三个月, 该项目是关于在公司的网站上发布了一个新功能, 然而, 一位关键相关方感到不满, 因为可交付成果未能满足他们的期望.项目经理应该参考什么文件?A. 范围管理计划B. 项目范围说明书C. 需求跟踪矩阵D. 需求文件<span class="hljs-comment"># C</span><span class="hljs-comment"># ABD - 没有将相关方联系起来进行跟踪.</span></code></pre><pre><code class="hljs bash">项目经理应使用什么工具来向客户证明最终产品需求满足业务需求？A. 工作分解结构(WBS)B. 项目范围说明书C. 需求跟踪矩阵D. 项目管理计划<span class="hljs-comment"># C</span><span class="hljs-comment"># AB - 都起不了跟踪需求的作用</span><span class="hljs-comment"># D - 太大了, 不明确.</span></code></pre><pre><code class="hljs bash">一个设计团队被分配开发一项新技术，让公司能够符合新的政府规定，应该用什么来收集产品设计属性？A. 控制图B. 需求跟踪矩阵C. 工作分解结构(WBS)D. 亲和图<span class="hljs-comment"># B</span><span class="hljs-comment"># 需求跟踪矩阵：应在需求跟踪矩阵中记录每个需求的相关属性，</span><span class="hljs-comment"># 这些属性有助于明确每个需求的关键信息.</span><span class="hljs-comment"># D - 请注意题目问的是收集产品设计属性，不是收集需求，因此D不对.</span></code></pre><pre><code class="hljs bash">项目发起人通知项目经理，即使已完成的项目符合进度计划，在预算范围满足范围需求，但客户对最终产品感到不满意.若要避免这种情况，项目经理应该事先做什么？A. 在制定质量管理计划的同时安排更多的会议B. 确保可交付成果符合质量控制测量结果中列出的要求C. 实施石川图工具D. 完成需求跟踪矩阵<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK (6） P148-5.2.3.2需求跟踪矩阵.</span><span class="hljs-comment"># 客户是对最终产品不满意，而不是对产品质量不满意，</span><span class="hljs-comment"># 最终产品的实现效果偏离了用户的预期，选D不选B.</span><span class="hljs-comment"># A - 问题出在了需求管理上，而不是质量管理.</span><span class="hljs-comment"># C - 题干强调“事先”应该做什么，而不是出现了问题怎么分析.</span></code></pre><pre><code class="hljs bash">在编制项目章程用于批准时，项目经理发现有两名相关方对关键可交付成果的期望有冲突.若要解决期望冲突问题并完成项目章程，项目经理应该首先做什么？A. 与关键相关方一起召开一个问题解决会B. 将该问题上报给项目发起人C. 使用专家判断来决定可交付成果D. 在章程中减少可交付成果用于后期定义<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P80章节：4.1.2.3引导式研讨会：</span><span class="hljs-comment"># 引导是指有效引导团队活动成功以达成决定、解决方案或结论的能力.</span><span class="hljs-comment"># 引导者确保参与者有效参与，互相理解，考虑所有意见，</span><span class="hljs-comment"># 按既定决策流程全力支持得到的结论或结果，</span><span class="hljs-comment"># 以及所达成的行动计划和协议在之后得到合理执行.</span><span class="hljs-comment"># 引导式研讨会能够达成决定、解决方案或结论.</span></code></pre><h4 id="6-范围说明书"><a href="#6-范围说明书" class="headerlink" title="6.范围说明书"></a>6.范围说明书</h4><p>项目范围说明书提供产品描述, 验收标准, <u><strong>关键可交付成果</strong></u>, 项目边界, 假设和有关项目的制约因素.<br>项目范围说明书是对项目范围, 主要可交付成果, 假设条件和制约因素的描述.</p><ul><li>产品范围描述</li><li><u><strong>可交付成果</strong></u></li><li>验收标准</li><li>项目除外责任</li></ul><p>keywords : 可交付成果, 不知道如何满足需求, 验收标准</p><p>设计阶段 -&gt; 实施阶段, 产品还没有开发出来, 因此, 阶段关口不应该包括<u><strong>产品验收</strong></u>.</p><p>项目范围说明书 : 范围说明书对可交付成果进行详细的描述，承包商问了一堆问题，工程师都回答不了，<br>说明对自己的项目范围不明确. 若要获得更为明确的可交付成果，先完成项目范围说明书.</p><pre><code class="hljs bash">项目经理被任命管理一个现有项目, 需求了解项目可交付成果, 项目经理应该参考下列哪一份文件?A. 项目章程B. 项目需求规范C. 项目范围说明书D. 项目进度表<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P161-5.4.3.1范围基准.</span><span class="hljs-comment"># 项目范围说明书包括对项目范围、主要可交付成果、假设条件和制约因素的描述.</span><span class="hljs-comment"># A - 项目章程中记录的是高层次需求.</span><span class="hljs-comment"># B - 需求规划了描述了如何收集和记录需求.</span><span class="hljs-comment"># D - 项目进度表主要描述进度上的规划.</span></code></pre><pre><code class="hljs bash">一家公司将更换使用了10年, 不再符合市场需求基于旧平台的集成系统. 在项目规划期间, 管理人员将一个更灵活的价格结构作为关键需求.高级管理人员还未决定如何满足这项需求, 但是同意该需求的战略正确性. 在项目执行期间, 价格结构的变更将要求频繁的返工和重新测试.下列哪项项目计划元素能够系统的解决这些问题?A. 项目变更需要获得高级管理人员批准的质量政策B. 能够从新需求中识别风险的风险应对计划C. 实施价格结构变更的人员增加计划D. 具有详细实施需求的范围说明书<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">在收集需求过程中, 各种工具和技术决定了项目需求. 这些要求构成了定义项目范围的基础.项目经理的职责之一是在这个过程中确定关键的项目可交付成果.关键项目可交付成果记录在哪里?A. 范围管理计划B. 需求管理计划C. 项目范围说明书D. 验收的可交付成果<span class="hljs-comment"># C</span><span class="hljs-comment"># D - &quot;验收的可交付成果&quot;属于成果，不属于计划和文件，因此不能用于记录.</span><span class="hljs-comment"># A - &quot;范围管理计划&quot;和选项B &quot;需求管理计划&quot;，均属于项目管理计划.</span><span class="hljs-comment"># 属于纲领和指南，并不记录具体的项目信息.</span><span class="hljs-comment"># C - &quot;项目范围说明书&quot;正确. 项目范围说明书是对项目范围、</span><span class="hljs-comment">#     主要可交付成果、假设条件和制约因素的描述.</span><span class="hljs-comment">#     它记录了整个范围，包括项目和产品范围；详细描述了项目的可交付成果.</span></code></pre><pre><code class="hljs bash">你最近接手了一个陷入困境的项目, 担任新的项目经理. 你发现以前的项目经理不太注重风险管理过程, 因此现在出现了一些问题,而你没有制定对应的应急计划. 你想要开始详细的调查, 现在正在寻找与项目关联的特定假设的详细说明.哪一个文档应该包含此内容?A. 项目章程B. 项目范围说明书C. 项目配置文档D. 变更管理计划<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">为客户开发产品, 你刚刚完成了项目设计阶段的工作, 准备进入实施阶段. 以下都是此时需要做的工作. 除了:A. 总结经验B. 质量检查C. 范围确认D. 产品验收<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">一名工程师正在从事一个设施升级项目。在项目可交付成果目的说明会上，承包商询问了多个工程师无法回答的问题. 会议结束后，工程师让承包商根据他们自已对可交付成果的理解提交建议书. 若要获得更为明确的可交付成果愿景，项目经理应事先完成哪一项？A. 工作分解结构(WBS)B. 项目管理计划C. 项目范围D. 项目章程<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">业务案例记录了业务需求和成本效益分析，以证明项目的合理性。项目如何实现业务案例中确定的业务需求的摘要记录见以下文档：A. 项目WBSB. 项目范围说明书C. 项目章程D. 项目最终报告<span class="hljs-comment"># D</span><span class="hljs-comment"># 项目如何实现业务案例中确定的商业论证的摘要包含在项目的最终报告中.</span><span class="hljs-comment"># 其他选项是项目启动或计划文档.</span></code></pre><pre><code class="hljs bash">项目经理与项目相关方开会，收集需求并制作项目需求文档.项目经理下一步该怎么做？A. 制定需求基准，并获得关键关系人的批准B. 与团队一起创建工作分解结构C. 准备一份详细的项目范围说明书D. 制定项目管理计划<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK 6th 页码：P151章节：5.3定义范围：</span><span class="hljs-comment"># 在收集需求过程中识别出的所有需求未必都包含在项目中，</span><span class="hljs-comment"># 所以定义范围过程就要从需求文件中选取最终的项目需求，然后制定出关于产品的详细描述.</span><span class="hljs-comment"># 准备好详细的项目范围说明书，对项目成功至关重要. 定义范围的作用.</span></code></pre><pre><code class="hljs bash">一个实施企业资源规划(ERP)软件的项目已经完成.项目经理希望将可交付成果的所有权移交给 IT 部门.为确保可交付成果的验收，项目经理应查阅哪一份文件?A. 范围管理计划B. 沟通管理计划C. 需求文件D. 项目章程<span class="hljs-comment"># A</span><span class="hljs-comment"># 《PMBOK》第6版165页，5.5.1.1-范围管理计划</span><span class="hljs-comment"># 项目管理计划定义了如何正式验收已经完成的可交付成果.</span><span class="hljs-comment"># C - 需求文件也是输入，但是不符合题干说的确保验收的说法.</span></code></pre><h4 id="7-WBS"><a href="#7-WBS" class="headerlink" title="7.WBS"></a>7.WBS</h4><p>WBS : 100%原则, 滚动式规划, 唯一编码</p><p>滚动式规划 : 在项目生命周期的不同阶段, 工作的详细程度会有所不同. 在早期的战略规划阶段, 信息尚不够明确, 工作包只能分解到已知的详细水平;<br>而后, 随着了解到更多的信息, 近期即将实施的工作包就可以分解到具体的活动.<br>keywords : 无法继续分解, 信息不够明确, 后期规划</p><p>项目范围根据项目范围基准进行测量, 该基准由项目范围声明, 其关联的 WBS 和 WBS 词典组成.<br><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/027.png" alt="027"></p><p><u><strong>范围基准</strong></u>是创建 WBS 流程的输出.</p><p>创建WBS的输入包括 : </p><ul><li>范围管理计划</li><li>项目范围说明书</li><li>需求文件</li><li>事业环境因素</li><li>组织过程资产</li></ul><p><strong><u>自下而上估算</u></strong> : 当活动很复杂且无法准确估计时, 将活动分解为<u>较小的组件</u>进行估算. 然后<u>汇总</u>这些单独的组件估算, 以获取活动的成本估算. </p><p><u><strong>组织分解结构(OBS)</strong></u> : 与WBS类似, 不是根据项目交付成果的细目来安排的, 而是根据组织现有的部门, 单位或团队来安排的.</p><p><strong>过程流程</strong> :</p><p>收集需求 -&gt; 定义范围 -&gt; 创建WBS -&gt; 定义活动</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/016.png" alt="016" style="zoom:67%;"><pre><code class="hljs bash">进行自制或外购分析后, 项目经理将已经包含工作分解结构(WBS)中的内容进行外包, 项目经理应该采取下列哪一项措施?A. 将需要外包的可交付成果从WBS中移除B. 将需要外包的可交付成果保留在WBS中C. 创建另一个WBS, 仅包含将需要外包的可交付成果D. 等到选定外包供应商后才对WBS进行更改<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目管理团队等到可交付成果或子项目澄清后才能制定详细的工作分解结构, 这种情况下, 该选择下面哪项技术?A. 叠加式规划B. 自上而下规划C. 滚动式规划D. 自下而上规划<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">你正在领导一个业务过程自动化项目, 业务分析师正在帮助你满足业务需求. 你作为项目经理负责整个项目范围, 而业务分析师负责产品范围.产品范围是根据产品要求来衡量的, 而项目范围是根据: A. WBS 和 WBS 词典B. 项目范围说明书及其关联的 WBS 和 WBS 词典C. 项目要求和 WBSD. 验收标准<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">在一场正在给城市建造赌场的承包商的分包投标中, 你的组织成功中标. 中标工程范围包括在项目现场采购和安装闭路电视摄像机.你现在正在为此项目开发WBS. 在创建WBS结构时, 你不应使用以下哪项作为输入?A. 物料清单B. 项目范围说明书C. 组织过程资产D. 需求文件<span class="hljs-comment"># A</span><span class="hljs-comment"># 物料清单(BOM) : 是生产制造中产品的原材料组成清单, 不用作创建WBS过程中的输入.</span></code></pre><pre><code class="hljs bash">一个项目团队目前正在规划一个网站开发项目. 所有客户的要求都已经收集, 记录并由客户验证.团队现在已经准备好整合项目的工作分解结构. 以下哪一项是创建 WBS 过程的输出?A. 分解B. 项目范围说明书C. 需求文件D. 范围基准<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">在纺织制造项目中, 一个团队将项目工作分成35个工作包, 并分配了几个工作包到设计部门进行审核.审核后, 设计部门的经理要求团队进一步将工作包划分为更易于管理的工作组件, 以便估算和调度资源, 团队应使用以下哪种技术来满足经理的要求?A. 分解B. 参数估算C. 优先级绘制图表方法D. 自下而上估算<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">你最近启动了一个机器人过程自动化项目. 项目进度计划的初稿已经制定, 现在你已经把注意力转移到了估算项目成本上.你要求项目团队将项目活动分解为较小的组件, 以便获得更准确的成本估计, 然后将较低级别组件的这些成本估算聚合到总体项目预算中.这是哪种估算技术?A. 工作分解结构B. 自下而上估算C. 类比估算D. 分解<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">受P&amp;T建筑公司雇用，一位造价工程师为该公司在中国的首个油田的管道建设项目估算成本，但没有得到任何详细工程数据.这位工程师应采用哪种费用估算方法为P&amp;T建筑公司提供初步成本预算？A. 近似估算B. 量级估算C. 限定性估算D. 可行性估算<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK Gth 页码：P240 章节：7.2 粗略量级估算.</span><span class="hljs-comment"># 在启动阶段可得出项目的粗略量级估算(Rough Order ofMagnitude， ROM),</span><span class="hljs-comment"># 其区间为 -25% 到 +75%; 之后，随着信息越来越详细，确定性估算的区间可缩小至 -5% 到 +10%.</span></code></pre><pre><code class="hljs bash">你最近完成了项目管理计划的初稿. 现在, 你希望召开高级相关方会议, 说服他们为该项目提供最佳可用资源.你希望一目了然地显示分配给各个组织部门的所有工作包或项目活动. 你应该使用以下哪些工具?A. 组织分解结构(OBS)B. RACI矩阵C. 工作分解结构(WBS)D. 角色和责任图表<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">WBS及WBS词典已经完成, 项目团队开始识别风险. 发起人找到了项目经理, 要求制定一个100,000美元的责任分配矩阵.项目在三个国家进行, 使用人员14人. 项目预计风险很小, 而且项目经理以前做了很多类似的项目. 接下来项目经理应该做什么?A. 理解类似项目发起人的经验教训B. 创造活动清单C. 确保项目范围得到了定义D. 完成风险管理, 制定责任分配矩阵<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目经理正在管理价值300万美元, 涉及两个供应商的项目. 项目经理为每名供应商创建了一份工作说明书(SOW). 下列哪一项需要SOW的信息?A. 风险管理计划B. 合同C. 采购管理计划D. 供应商范围说明书<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P473-12.1.3.4采购工作说明书.</span><span class="hljs-comment"># 工作说明书会充分详细地描述拟采购的产品、服务或成果，</span><span class="hljs-comment"># 以便潜在卖方确定是否有能力提供此类产品、服务或成果.</span><span class="hljs-comment"># A - SOW不是制定风险管理计划的输入。但有可能是风险的来源.</span><span class="hljs-comment"># C - 采购管理计划是实施采购的输入.</span><span class="hljs-comment"># D - 供应商范围说明书与SOW重叠，但题干的问题是“哪一项需要SOW的信息”，所以合同是最需要SOW的.</span></code></pre><pre><code class="hljs bash">工作分解结构(WBS)编码系统具有以下作用, 除了:A. 按照编码区分项目工作的优先级B. 展现WBS中各元素的关系C. 识别每个WBS元素在哪个层级D. 与组织分解结构与资源分解结构进行整合<span class="hljs-comment"># A</span><span class="hljs-comment"># WBS的编码系统主要是展现WBS元素的层级和隶属关系, 不是用于区分优先级的.</span></code></pre><pre><code class="hljs bash">以下哪一个描述符合滚动式规划的特征?A. 从工作包向上滚动到WBS更高级的规划方法B. 只规划一个阶段的工作, 完成后滚动到下一个阶段, 开始新的规划C. 按照项目所涉及的各专业领域, 完整滚动一圈来完成规划D. 随着项目信息的不断收集, 规划包变成工作包的过程<span class="hljs-comment"># D</span><span class="hljs-comment"># 滚动式规划指的是对近期工作详细描述, 对远期工作粗略描述, 是随着项目不断发展.</span><span class="hljs-comment"># 获取信息越来越丰富, 一次次逐渐细化的规划方法.</span></code></pre><pre><code class="hljs bash">制定项目范围说明书之后，团队已准备好继续进行其他项目活动.项目团队要项目经理为下一个项目会议的活动和成果提供指导.项目经理接下来应该怎么做？A. 列出限制团队更新项目文件选择范围的制约因素B. 收集需求，创建需求跟踪活动资源C. 将活动清单排序，估算活动D. 审查之前项目的政策，程序和经验教训，创建工作分解结构<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P156 章节：5.4 创建工作分解结构(WBS)</span><span class="hljs-comment"># 是把项目可交付成果和项目工作分解成较小, 更易于管理的组件的过程.</span><span class="hljs-comment"># 定义范围后，创建WBS.</span></code></pre><h4 id="8-范围基准"><a href="#8-范围基准" class="headerlink" title="8.范围基准"></a>8.范围基准</h4><p>范围基准是经过批准的范围说明书, WBS和相应的WBS词典, 只有通过正式的变更控制程序才能进行变更, 它被用作比较的基础.</p><ul><li>范围说明书</li><li>WBS</li><li>WBS词典<br>活动的<u>逻辑关系</u>, 依赖关系, 所需要的资源都在WBS词典里.</li></ul><p>keywords : 变更程序, 包含三项, 验收标准</p><p>RACI : 责任分配矩阵是为了确保一件事必须有人在负责, 需要更新责任分配矩阵, 给每个人确定职责, 这样才会确保<strong>团队有效参与</strong>.</p><pre><code class="hljs bash">在项目实施期间, 一些团队成员抱怨说他们对项目可交付成果不确定. 若要确保项目团队按照项目范围工作, 项目经理应该怎么做?A. 审查执行, 负责, 咨询和知情(RACI)矩阵B. 更新沟通管理计划, 澄清期望C. 与团队分享项目章程D. 将工作分解结构(WBS)分发给团队<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P157 章节：5.4 创建WBS.</span><span class="hljs-comment"># WBS是对项目团队为实现项目目标、创建所需可交付成果而需要实施的全部工作范围的层级分解.</span><span class="hljs-comment"># WBS 组织并定义了项目的总范围，代表着经批准的当前项目范围说明书中所规定的工作.</span><span class="hljs-comment"># WBS规定了所有要做的事情，与范围说明书、WBS词典共同组成了范围基准.</span></code></pre><pre><code class="hljs bash">一个大型项目的工作分解结构(WBS)显示, 2级项目计划几乎没有提供有关活动, 依赖关系以及所需的资源的信息.若要评估项目持续时间, 项目经理应该做什么?A. 制定WBS词典B. 执行自下而上估算C. 分析资源分解结构(RBS)D. 制定资源日历<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P162-5.4.3.1 WBS词典.</span><span class="hljs-comment"># 题干中提到的活动的逻辑关系、所需要的资源都在WBS词典里.</span></code></pre><pre><code class="hljs bash">在测试新的网络基础设施时, 供应商发现由于存在潜在硬件缺陷, 一个组件必须升级. 为确保团队有效参与项目, 项目经理应该怎么做?A. 生成变更请求B. 执行优势, 劣势, 机会与威胁(SWOT分析)C. 更新执行, 负责, 咨询和知情(RACI)矩阵D. 修订相关方登记册<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P17-9.1.2.2 责任分配矩阵 RACI矩阵.</span><span class="hljs-comment"># 为了确保一件事必须有人在负责，需要更新责任分配矩阵，</span><span class="hljs-comment"># 给每个人确定职责，这样才会确保团队有效参与.</span><span class="hljs-comment"># A - 目前没有必要变更.</span><span class="hljs-comment"># B - 识别风险, 不合题意.</span><span class="hljs-comment"># D - 非相关方问题.</span></code></pre><pre><code class="hljs bash">你所负责的项目正在执行过程中，一个团队成员找到你，询问关于他的职责和工作，因为他不知道如何去完成工作.项目经理应该给他看什么？A. 责任分配矩阵B. 人员配备管理计划C. 项目管理计划D. 项目组织机构图<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P317 章节：9.1.2.2 责任分配矩阵.</span><span class="hljs-comment"># 展示项日资源在各个工作包中的任务分配.矩阵图能反映与每个人相关的所有活动，</span><span class="hljs-comment"># 以及与每项活动相关的所有人员，它也可确保任何一项任务都只有一个人负责，</span><span class="hljs-comment"># 从而避免职权不清. 角色(人)跟职责(活)之问的关系，找责任分配矩阵.</span></code></pre><h4 id="9-范围蔓延"><a href="#9-范围蔓延" class="headerlink" title="9.范围蔓延"></a>9.范围蔓延</h4><p>范围蔓延 : 未经控制的产品或项目范围的扩大(未对时间, 成本和资源做相应调整)</p><ul><li>客户或相关方变更范围</li><li>团队成员主动变更范围</li></ul><p>是否实施整体变更控制,是 -&gt; 蔓延; 否 -&gt; 镀金</p><p>控制范围<br>直接变更客户需求并且实施以提供更高价值是镀金行为，需要立即停止工作，并走正式的变更控制流程.</p><p>keywords : 团队包含了; 项目经理增加了; 主动增加了; 成员按照要求执行;</p><pre><code class="hljs bash">在为一家公司开发软件时, 供应商收到几个新的客户请求, 这些请求都包含在系统中, 软件按时交付, 但因为高级管理人员认为软件不符合要求而拒收该软件.若要避免这个问题, 供应商的项目经理应该事先做什么?A. 审查需求跟踪矩阵B. 请求高级管理层参与客户高级管理层一起讨论需求C. 执行实施整体变更控制过程, 并更新项目文件和基准D. 核实项目范围<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">你当前正在审核组织的项目管理实践, 你已经意识到, 尽管大多数项目都有已批准的范围声明, 但范围蔓延是所有组织项目中的常见问题. 现在, 你已经将注意力转移到了这些范围蔓延的内容上, 以确定此问题的根本原因. 项目范围说明书的以下哪个组件在减少范围蔓延方面很有用?A. 除外条款B. 范围描述C. 验收标准D. 可交付成果<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">你正在为你所在国家的一家大型快递公司管理一个运输管理系统开发项目.这个项目有大量的相关方, 到目前为止, 你们一直在努力定义系统开发所需的详细项目需求.因此, 你决定尝试敏捷方法进行系统开发. 在没有定义详细的系统需求的情况下, 以下哪项是项目的主要风险之一?A. 范围蔓延B. 确认范围C. 增值范围D. 范围控制<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">一个项目已经失控, 项目经理正试图重新控制它并对项目范围进行了一些更改.其中一些变更导致进一步的变化, 项目成本上升, 项目进度也超出计划. 这称为: A. 项目蠕变B. 范围上升C. 范围蔓延D. 范围控制<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">你正在管理组织重新设计项目. 尽管更高级别的运营模式得到了首席执行官的批准, 但高管们正努力设想未来的状态. 这给你项目的成功带来了很大的不确定性. 以下哪一项是现阶段的主要项目风险?A. 变更控制B. 范围蔓延C. 项目的战略调整D. 员工流动率<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目经理了解到，一名团队成员变更客户需求以提供更高价值，并且实施这一变更的工作已经开始，项目经理应该怎么做？A. 将该问题上报给项目发起人B. 指示该团队成员立即修改工作, 满足客户的原始需要C. 指示该团队成员停止对变更的工作, 直到收到变更控制委员会(CCB)的批准D. 批准该变更, 并将其记录在变更日志中<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">在制定项目管理计划的过程中，项目经理了解到过去的项目遭受了范围蔓延、无效的变更控制过程和低相关方满意度的困扰. 为了确保更好地管理当前的项目，项目经理决定在整个项目中定期与相关方社区进行互动. 以下哪一项是项目经理决定的最不可能的结果？A. 降低范围B. 减轻风险C. 降低成本D. 更多信任<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P167章节：5.6控制范围.</span><span class="hljs-comment"># 未经控制的产品或项目范围的扩大(未对时间、成本和资源做相应调整)被称为范围蔓延.</span><span class="hljs-comment"># 变更不可避免，因此在每个项目上，都必须强制实施某种形式的变更控制，</span><span class="hljs-comment"># 任何范围变更都要走正式的变更控制流程.</span></code></pre><pre><code class="hljs bash">在你的项目中，镀金一直是反复出现的问题，因为团队一直在添加他们认为对客户有用的功能，尽管这些功能并没有包含在WBS中. 变更请求是在事后提交的，并且一些功能最终被添加到项目范围. 你担心与计划的偏差.你会怎样做才能更好地控制范围，防止进一步镀金？A. 采用敏捷方法，这样团队就可以开发任何他们认为有价值的功能B. 提交变更请求，以获取问题日志中的镀金问题C. 在项目回顾中讨论问题，并更新经验教训登记册D. 与团队成员进行日常站会的敏捷实践相协调<span class="hljs-comment"># D </span><span class="hljs-comment"># 范围蔓延</span><span class="hljs-comment"># 在客户的要求下，没有经过正常的范围变更控制批准程序，</span><span class="hljs-comment"># 而直接扩大了项目定义范围的工作内容.</span><span class="hljs-comment"># 镀金：范围蔓延的一种，指在定义范围的工作范围以内，项目团队主动增加的额外工作.</span><span class="hljs-comment"># 镀金是在任何开发方法中 都不建议的.</span><span class="hljs-comment"># 因此A不对，即使到敏捷，也是PO决定范围.</span><span class="hljs-comment"># D - 每日站会让开发团队集中在现有范围内.</span></code></pre><pre><code class="hljs bash">一名有影响力的项目相关方直接要求项目团队添加产品功能，而团队也遵守该要求，项目经理在项目状态会议上获悉这些变更.由于这些变更导致成本超支，项目经理首先应该怎么做？A. 使用应急储备支付额外成本，保持该项目相关方的参与B. 要求该相关方提交变更请求供批准C. 更新范围说明书，包含新的功能D. 与项目发起人讨论该情况<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P168 章节：5.6范围蔓延.</span><span class="hljs-comment"># 控制范围过程应该与其他控制过程协调开展.</span><span class="hljs-comment"># 未经控制的产品或项目范围的扩大(未对时间、成本和资源做相应调整)被称为范围蔓延.</span><span class="hljs-comment"># 变更不可避免，因此在每个项目上，都必须强制实施某种形式的变更控制.</span><span class="hljs-comment"># 范围蔓延是指未经过正经变更流程的范围增加。必须实施强制的变更控制.</span></code></pre><h4 id="10-预防措施"><a href="#10-预防措施" class="headerlink" title="10.预防措施"></a>10.预防措施</h4><p>预防措施 : 如何采取行动以确保今后的遵守</p><ul><li>纠正措施 : 为使项目工作绩效重新与项目管理计划一致, 而进行的有目的的活动</li><li>预防措施 : 为确保项目工作的<u><strong>未来绩效</strong></u>符合项目管理计划, 而进行的有目的的活动</li><li>缺陷补救 : 为了修正不一致产品或产品组件的有目的的活动</li><li>更新 : 对正式受控的项目文件或计划等进行的变更, 以反映修改或增加的意见或内容</li></ul><pre><code class="hljs bash">你管理过一个联邦公路建设项目, 该项目旨在改善该国南北地区之间的交通. 在执行阶段, 你收到了许多相关方的投诉, 包括公路运输机构.这些投诉至少有一半是关于道路微观结构的质量, 以及不符合项目质量管理计划的质量水平.到目前为止, 你已成功修复了所有报告的问题, 但你担心此重复事件. 你应该怎么做来避免将来出现类似的问题?A. 启动缺陷补救以修复道路或完全铺平新道路B. 采取预防措施, 减少与道路质量有关的负面后果的可能性C. 启动变更请求以更新项目质量管理计划D. 采取纠正措施, 使道路的未来质量符合项目管理计划<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">朱莉娅正在管理一个软件开发项目. 最近, 一个意外事件把项目推迟了15天. 朱莉娅召集了一个团队会议, 以确定采取哪些措施使项目如期进行.为使结果与项目计划保持一致, 最好采取的措施为?A. 变更请求B. 预防措施C. 纠正措施D. 缺陷补救<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">你被要求审计一个项目的项目绩效, 这个项目偏离成本基准并且难以满足进度计划.你希望先从项目范围开始审计, 以确定是否真的是那些没经过变更控制的变更行为造成了项目的范围变化.对项目范围本身的分析得出了变更请求可能会引起范围基准的变化变更请求可以包括以下所有内容, 除了: A. 纠正措施B. 支持行动C. 缺陷修复D. 预防措施<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">在生产了一些项目可交付成果之后，项目集经理将其中两个项目团队成员转移到优先级更高的项目中，并为你提供替换选项。新的团队成员缺乏担任角色的经验，而你意识到不再可以达到绩效测量基准.你必须采取以下哪些操作?(选择两项)A. 提交变更请求以修改项目基准B. 修订项目团队的分配以适应人员变动C. 更新汲取的经验教训知识库以反映任何新的最佳实践D. 调整WBS和WBS词典以反映新的任务<span class="hljs-comment"># AB</span><span class="hljs-comment"># 变更请求 - 通过比较实际情况与计划要求，可能需要提出变更请求，</span><span class="hljs-comment"># 来扩大、调整或缩小项目范围与产品范围，</span><span class="hljs-comment"># 或者提高、调整或降低质量要求和进度或成本基准提交变更，修定基准和资源管理计划.</span><span class="hljs-comment"># 1) 纠正措施</span><span class="hljs-comment"># 2) 预防措施</span><span class="hljs-comment"># 3) 缺陷补救</span></code></pre><pre><code class="hljs bash">一个新的政府法规将要求对一个处于开发阶段的产品进行变更.项目团队在项目开始时修订项目管理计划以实施新的需求，而非在后期添加需求.这应该使用什么类型的变更请求？A. 纠正措施B. 主动措施C. 预防措施D. 更新措施<span class="hljs-comment"># D</span><span class="hljs-comment"># 修订项目管理计划，属于变更请求中的“更新”类型.</span><span class="hljs-comment"># A - 通常由于对绩效不佳进行纠偏.</span><span class="hljs-comment"># C - 为确保项目工作的未来绩效符合项目管理计划，而进行的有目的的活动.</span></code></pre><h4 id="11-合同"><a href="#11-合同" class="headerlink" title="11.合同"></a>11.合同</h4><p>合同是对双方都有约束力的协议. 它强制卖方提供规定的产品, 服务或成果, 强制买方向卖方支付相应的报酬.<br>合同建立了受法律保护的买卖双方的关系.</p><p>PMI道德与职业行为准则<br>项目经理应该按照合同做事, <u>超出合同的部分不应该谈判或接受</u>.</p><p>当发现项目有范围重复, 由于你是根据客户组织的<u><strong>合同</strong></u>执行此项目, 因此出现这个问题, 你需要根据合同上报此事.</p><p>处理合同相关的情景问题 : </p><ul><li>首先查阅合同中是否对此进行约定</li><li>如未约定, 对合同进行变更, 将检查标准纳入合同范围</li><li>根据新增加的合同条款监督合同的执行</li></ul><p>协议 : 协议包含了工作说明书, 验收标准, 绩效报告, 奖惩措施等.<br>当项目为外部客户执行时, 正式交付成果验收的要求以及如何处理不符合要求的交付成果通常在<u><strong>项目协议</strong></u>中定义.</p><pre><code class="hljs bash">你最近为市政府开发了一种新的交通监控系统. 该产品在测试环境中通过了用户验收. 但是, 当系统迁移到生产环境时, 你发现现有基础结构不符合目标.你现在应该怎么做?A. 将项目置于保留状态, 直到客户端升级基础结构B. 检查有关现有基础结构升级的合同职责C. 向客户组织提交损害赔偿要求D. 发出升级基础结构的变更请求<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">你正在管理客户端组织的业务过程优化项目. 在项目的早期, 你发现客户的IT部门已经启动了业务工作过程自动化项目, 而自动化的过程之一就是你的团队正在尝试优化的过程. 你关注到了此重叠的项目范围. 你现在应该怎么做?A. 发出变更请求以提供额外的时间和预算B. 将问题上报到变更控制委员会C. 根据你的合同上报问题D. 等待IT完成过程的自动化, 然后进行差距分析<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">正处于执行阶段的某项目收到了一个装配组件, 生产该组件需要更多的原材料, 超过了与供应商所立合同的规定. 供应商要求为所使用的额外材料付款. 项目经理应该如何处理这种情况?A. 接受该额外成本, 向供应商支付该成本B. 接收这批材料, 但将付款延迟至项目结束C. 就降低该批额外材料的价格展开谈判D. 拒绝该额外成本, 让供应商承担该成本<span class="hljs-comment"># D</span><span class="hljs-comment"># 采购 -&gt; 实施采购 -&gt; 输出 -&gt; 协议</span><span class="hljs-comment"># 道德题目，项目经理应该按照合同做事，超出合同的部分不应该谈判或接受. D选项正确.</span><span class="hljs-comment"># 干扰选项C，在实际情况中更常见，但不适用于PMI考试答题.</span></code></pre><pre><code class="hljs bash">在交付服务过程中某外包项目报告存在几个人为错误, 包括未完成程序, 未得到正确遵循的程序以及未执行的一般性检查,总经理发现了这些问题, 要求尽快提高服务质量. 项目经理首先应该做什么?A. 将惩罚条款纳入合同, 以迫使该外包公司提高服务交付人员的水平B. 提交变更请求, 将资源的技能质量标准纳入与该外包公司签订的合同C. 要求该外包公司制定相关过程并对服务交付人员进行培训D. 如果外包公司未提高服务的交付质量, 则与该公司终止合同<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">若干可交付成果作为项目的一部分提交给了买方. 项目经理在哪里可以找到有关正式交付成果接受要求以及如何处理不符合交付成果的文档?A. 在经验教训文件中B. 在可交付发布说明中C. 在工作说明书中D. 在协议中<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">A公司委托B公司开发一款软件, B公司认为合同规定的工作都已交付, 但是A公司认为软件未能满足使用要求, 所以拒绝向B公司支付费用.虽然双方经过多轮谈判仍未达成共识, 但并不希望这个局面完全公开, 都倾向于通过尽可能简便的方式解决这个争议.面对这种情况, 双方应该选择哪种争议解决方法?A. 替代争议解决(ADR)B. 仲裁C. 诉讼D. 谈判<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">项目经理注意到，尽管项目管理计划有关于如何与供应商共享项目信息的具体指示，但有些供应商并没有收到项目沟通. 造成这个问题的最可能的原因是什么？A. 忽略将供应商包括在项目沟通登记册中B. 没有问题；供应商不应接收项目沟通C. 忘记执行制定项目管理计划过程D. 未能在识别相关方过程中审查协议<span class="hljs-comment"># D</span><span class="hljs-comment"># 协议: 协议的各方都是项目相关方, 还可涉及其他相关方</span><span class="hljs-comment"># A - 没有沟通登记册这个概念.</span></code></pre><pre><code class="hljs bash">项目经理在预算范围内按时成功收尾项目, 最终产品已移交运营并对适当的文件存档.几周后, 供应商提供的一个部件发生故障, 但仍在保修期内, 运营经理致电项目经理并要求采取纠正措施, 包括使用剩余的项目预算来支付维修费用.项目经理下一步应该怎么做?A. 重新审查项目，确定是否有足够的剩余资金来支付维修费用，并执行纠正措施B. 建议运营经理审查采购文件，并遵循供应商合同中规定的保修索赔程序C. 要求法务部门对供应商采取法律行动，以赔偿与更换和安装部件相关的成本D. 将问题升级上报给高级管理层，以防止运营经理可能采取任何可能的行动<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P489-12.2.3.2协议.</span><span class="hljs-comment"># 合同中包括：检查、质量和验收标准；担保和后续产品支持；终止条款和替代争议解决方法等.</span><span class="hljs-comment"># 所以对售后维保产生争议的时候，首先查看合同.</span><span class="hljs-comment"># A - 控制账户已关闭，无法动用资金.</span><span class="hljs-comment"># C - 在选项B之后，根据合同中的约定进行索赔管理.</span><span class="hljs-comment"># D - 不解决问题，解决了发现问题的人.</span></code></pre><h4 id="12-文化问题"><a href="#12-文化问题" class="headerlink" title="12.文化问题"></a>12.文化问题</h4><p>因为文化问题, 项目进度受到影响, 并存在重大风险, 将影响进度和成本的基准.</p><p>在采取任何应对措施之前, 需要遵循<u><strong>整体变更控制流程</strong></u></p><pre><code class="hljs bash">你正在一个发展中国家开展一个电信网络项目, 由于一些文化问题, 目前在与分包商的有效协作方面, 陷入了困境.这已经给项目造成了一些小的延误. 然而, 如果这一趋势继续下去, 延迟不仅会变大, 还会导致成本下滑.如果你控制不了这个问题, 下一个最好的做法是什么?A. 终止合同并找到新的分包商B. 接受风险, 继续前进C. 继续与分包商谈判D. 评估对成本和进度的影响并发出变更请求<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">你和你的项目团队与来自不同国家的相关方举行见面会.会议后的反馈表明，项目团队感到相关方很冷漠，因为他们在参与对话时总是退让. 然而，一些相关方认为项目团队过于强势，不尊重他们的个人空间.有什么可以帮助你避免这些观念？A. 更好的文化意识B. 获取资源C. 进行虚拟会议D. 应用冲突管理技能<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P376 章节：10.1.2.6 文化意识</span><span class="hljs-comment"># 指理解个人、群体和组织之间的差异.</span><span class="hljs-comment"># 具有文化意识并采取后续行动，</span><span class="hljs-comment"># 能够最小化因项目相关方社区内的文化差异而导致的理解错误和沟通错误.</span><span class="hljs-comment"># 文化意识和文化敏感性有助于项目经理依据相关方和</span><span class="hljs-comment"># 团队成员的文化差异和文化需求对沟通进行规划.</span><span class="hljs-comment"># 一般不同的人或组织之前有着相反的差异，都属于文化差异.</span></code></pre><h4 id="13-项目章程"><a href="#13-项目章程" class="headerlink" title="13.项目章程"></a>13.项目章程</h4><p>项目章程 : 明确项目与组织战略目标之间的直接联系,确立项目的正式地位, 并展示组织对项目的承诺.<br><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/020.png" alt="020"></p><p>项目章程一旦被批准, 就标志着项目的正式启动.</p><p>项目章程对项目经理有<u><strong>明确授权</strong></u>, 项目资源的调配和工作的分配是项目经理的权力, 发起人无权越俎代庖, 直接指挥团队成员.<br>项目章程规定了<u>项目经理的权力</u>. 因此, 项目经理是否有权力使用他们组织的资源, 需要展示<u>项目章程</u>给运营经理.</p><p>项目章程在获得关键项目相关方确认的过程中, 如果发现存在问题, 要及时<u>修订</u>, 并获得项目相关方的<u>再次确认</u>.<br>“项目建议书谈判期间”, 项目的<strong>启动阶段</strong>, 基准尚未形成, 此时收到的变更请求通过<u><strong>协商的方式</strong></u>来解决.</p><p><u><strong>项目商业认证</strong></u> : 指文档化的经济可行性报告, 用来对尚缺乏充分定义的所选方案的收益进行有效认证.<br>商业认证的结果要结合项目的制约因素进行讨论, 找到一个项目成功的平衡点.</p><p>商业文件 : 一个新项目, 首先确定是否值得投资, 因此需要进行<strong>商业认证</strong>, 商业认证包含<strong>商业需求</strong>和<strong>成本效益分析</strong>.</p><p>项目章程 : 是由发起人批准发布的, 一般不能<u><strong>轻易修改</strong></u>, 即便必须修改, 也得由发起人做出决策.<br>裁剪 : 是项目经理主导的工作, 其根据项目的特点和需要来决定适合的裁剪对象.</p><p>关键相关方<u>意见缺失是一个重要的风险</u>. 应体现在章程的风险描述部分, 可以提醒主要相关方在评审章程时注意.</p><p>收到商业认证, 说明在项目启动阶段, 接下来是制定项目章程. <strong>商业认证是制定项目章程的输入</strong>.</p><pre><code class="hljs bash">相关方已就项目可交付成果，关键里程碑以及角色与职责达成一致意见，项目经理与商业分析师开会，以评估项目的详细需求，项目经理首先应该怎么做？A. 安排需求评审会议B. 分享项目章程C. 制定范围管理计划D. 审查工作分解结构(WBS)<span class="hljs-comment"># B</span><span class="hljs-comment"># ACD - 在选项B之后, 有了项目章程, 才有用于动员资源收集需求的权力.</span></code></pre><pre><code class="hljs bash">你目前正在启动生产过程改造项目, 并代表项目发起人起草项目章程. 项目章程最终确定并授权后,你作为项目经理可以将组织资源应用于项目. 通常, 以下哪一项不是制定项目章程过程的输入?A. 协议B. 商业认证C. 效益管理计划D. 相关方登记册<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">项目经理范围已有明确定义, 且项目团队之前做过此类工作. 进度绩效指数为0.7. 在调查完差异之后, 项目经理了解到, 项目发起人要求在现场工作的一名团队成员去执行他认为对项目很重要的额外的活动.若要避免这种情况发生, 项目经理应该如何做?A. 改进项目沟通, 确保所有需求都得到满足B. 根据新的需求对项目范围进行变更C. 跟这位同事明确说明停止范围蔓延D. 对于必须完成的变更, 与变更控制委员会进行沟通<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">在指派项目经理前, 公司营销团队批准了新项目的项目章程, 当发送项目章程给项目经理审查时, 项目经理发现了几个问题, 包括缺失和不正确的假设. 项目经理接下来该做什么?A. 将观察结果记录在假设日志, 问题日志和风险登记册中B. 将观察结果上报给项目发起人, 并请求安排时间审查和修改项目章程C. 联系客户, 并请求时间审查和修改项目章程D. 参照项目章程中的假设, 继续推进规划阶段<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">一家公司有一位经常延迟付款的长期客户，该公司现在与该客户有一个新项目.项目经理应该确保使用哪份文件来为该项目记录延迟付款的信息？A. 项目章程B. 历史信息和经验教训加知识库C. 假设日志D. 风险管理计划<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P81-4.1.3.2假设日志.</span><span class="hljs-comment"># 假设日志用于记录整个项目生命周期中的所有假设条件和制约因素.</span><span class="hljs-comment"># 之前经常延迟付款，我们需要把这个假设情况记录在假设日志.</span><span class="hljs-comment"># A - 由于假设日志比项目章程更有针对性，所以此题选C不选A.</span><span class="hljs-comment"># B - 不是用来记录现项目制约信息的.</span><span class="hljs-comment"># D - 进入到规划阶段以后，要将客户延迟付款的风险记入风险登记册而不是风险管理计划.</span></code></pre><pre><code class="hljs bash">在讨论一个新项目的相关方会议上, 运营经理表示他们不知道项目经理有权使用他们部门的资源.项目经理应该做什么?A. 让发起人与运营经理会谈B. 与运营经理单独会面以澄清期望C. 向运营经理发送正式的通知备忘录D. 向运营经理提供一份项目章程的副本<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">根据批准的商业认证, 项目必须在12个月内完成, 以最大限度地提高经济效益, 在审查商业认证之后, 项目经理识别到一些制约因素, 这些制约因素将导致无法在规定时间范围内完成项目, 项目经理应该怎么做?A. 在项目章程中包括12个月的项目持续时间B. 在考虑到这些制约因素的影响后, 在项目章程中更新修订后的完成日期C. 通知管理层无法实现项目时间表D. 与管理层开会讨论此事并最终确定行动计划<span class="hljs-comment"># D</span><span class="hljs-comment"># A - 制约因素是在12个月的工期内完成项目.</span><span class="hljs-comment"># B - 完工日期不能由项目经理确认, 是由发起人确认的.</span><span class="hljs-comment"># C - 消极态度.</span></code></pre><pre><code class="hljs bash">项目经理加入一个项目, 该项目要求在两年内更换现有的IT系统. 项目经理下一步应该做什么?A. 与相关方一起执行效益分析B. 确定商业需求和预期效益C. 根据与相关方的讨论执行单项评估D. 制定项目管理计划<span class="hljs-comment"># B</span><span class="hljs-comment"># A 没有商业需求.</span><span class="hljs-comment"># C 没有与相关方进行单向评估.</span><span class="hljs-comment"># D 还在后面做.</span></code></pre><pre><code class="hljs bash">裁剪的对象可以是以下几个选项, 除了: A. 项目管理过程B. 项目生命周期和阶段C. 输入, 输出及工具技术D. 项目章程<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">在制定项目章程时, 一位关键的相关方没有提供任何意见. 项目经理反复询问并请他提供必要的信息,以便完成高层级的需求. 虽然项目经理尽力了, 但情况没有得到改善.项目经理接下来应该怎么做?A. 将该相关方从相关方列表中删除B. 与项目团队假定相关方需求C. 将意见缺失作为项目风险, 添加到主要风险描述中D. 将该问题上报给项目发起人<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">在一个工厂的项目建议书谈判期间, 客户通知项目经理需要进行一项变更来提高性能.项目经理该怎么做?A. 让项目发起人增加额外资金B. 征求高级管理层的建议C. 更新工作分解结构(WBS)D. 修订风险应对计划<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目经理从一家公司的高级管理层收到一份商业论证，该公司之前曾有在项目执行阶段中途放弃项目且不能提供足够要求资源的历史. 项目经理应该怎么做？A. 制定工作分解结构(WBS)B. 制定项目章程C. 制定项目管理计划D. 制定战略计划<span class="hljs-comment"># B</span><span class="hljs-comment"># AC - 规划阶段.</span><span class="hljs-comment"># D  - 战略计划组织制定, 项目是组织战略的实现途径.</span></code></pre><pre><code class="hljs bash">一名新项目经理收到一份项目章程草案，哪些信息将帮助项目经理参与完成这份文件？A. 商业认证B. 项目进度计划C. 成本基准D. 项目管理系统(PMIS)<span class="hljs-comment"># A</span><span class="hljs-comment"># 整合 -&gt; 制定项目章程.</span><span class="hljs-comment"># D  - 注意题干中强调了”哪些信息“，不考察工具和技术，排除.</span><span class="hljs-comment"># BC - 另外，”项目章程草案“，说明仍然处于启动阶段，</span><span class="hljs-comment">#      所以在规划阶段产出的选项BC排除.</span></code></pre><pre><code class="hljs bash">在项目启动阶段，项目经理发现，事业环境因素中最近的变更已对预算产生影响.导致团队完成全部工作范围的事项变得不切实际。项目经理应如何缓解这种情况？A. 根据纠正后的预算制定项目管理计划B. 联系项目发起人，更正项目章程并寻求其重新予以批准C. 找机会缩小项目范围，使之与获批的预算一致D. 将范围方面的顾虑列为一种风险，并制定应急计划<span class="hljs-comment"># B</span><span class="hljs-comment"># 4.1.3.1 项目章程。关键词“启动阶段“，事业环境因素变更影响了工作范围.</span><span class="hljs-comment"># 因为在启动阶段，只有项目章程，含有高层级的需求等信息，章程由发起人负责，因此选B.</span><span class="hljs-comment"># 对项目章程更新并再次获得批准. 此阶段不存在项目管理计划、范围，ACD错.</span></code></pre><pre><code class="hljs bash">在设计阶段进行的一项分析表明，项目可能在财务方面不可行.项目经理应该审查什么？A. 项目前五年的运营成本B. 基于预算线的非营运性投资成本C. 商业论证中的社会和业务目标效益D. 基于之前类似投资的预期回报效益<span class="hljs-comment"># C</span><span class="hljs-comment"># 4.1.1.1商业论证. </span><span class="hljs-comment"># 设计阶段发现财务方面不可行，要回溯看一下商业论证的结果，</span><span class="hljs-comment"># 判断导致问题产生的原因.</span><span class="hljs-comment"># AB - 提到的成本是在规划后的，排除.</span><span class="hljs-comment"># D  - 属于商业论证中可能出现的内容.</span></code></pre><pre><code class="hljs bash">在一个高层管理会议上，定义了组织战略目标. 其中一个目标是通过进入本地区内的一个细分市场提高8%的销售组合.一名项目经理被任命管理这个项目. 项目经理下一步应该怎么做？A. 执行成本效益分析B. 召开焦点小组会议收集市场调研C. 执行相关方分析D. 查阅组织过程资产<span class="hljs-comment"># A</span><span class="hljs-comment"># 4.1.1.1商业论证;</span><span class="hljs-comment"># 经批准的商业论证或类似文件是最常用于制定项目章程的商业文件.</span><span class="hljs-comment"># 商业论证从商业视角描述必要的信息，并且据此决定项目的期望结果是否值得所需投资.</span><span class="hljs-comment"># 商业论证包括：商业需求 和 成本效益分析.</span></code></pre><pre><code class="hljs bash">在项目管理计划获得批准后，项目经理得知该项目的工作环境存在潜在问题，项目经理应该审查哪份文件?A. 项目章程B. 质量管理计划C. 相关方参与计划D. 组织过程资产<span class="hljs-comment"># A</span><span class="hljs-comment"># 4.1.3.2假设日志</span><span class="hljs-comment"># 通常，在项目启动之前编制商业论证时，识别高层级的战略和运营假设条件与制约因素.</span><span class="hljs-comment"># 这些假设条件与制约因素应纳入项目章程.</span><span class="hljs-comment"># 工作环境的潜在问题属于假设与制约，应该记录在项目章程.</span></code></pre><pre><code class="hljs bash">客户所用的软件应用程序已有10个年头，但仍需要该软件支持其业务流程，关联项目相关方认为文件已过时，并需要更换，以便满足当前的信息技术标准.一名项目经理被任命制作商业论证书. 商业论证书将用来确定下列哪一项？A. 整个项目的成本B. 项目相关方的决策是否正确C. 项目是否值得进行投资D. 整个项目的持续时间<span class="hljs-comment"># C</span><span class="hljs-comment"># 商业认证: 经批准的商业认证或类似文件是最常用于制定项目章程的商业文件.</span><span class="hljs-comment"># 商业认证从商业视角描述必要的信息, 并且据此决定项目的期望结果是否值得所需投资.</span><span class="hljs-comment"># 商业认证包括商业需求和成本效益分析.</span></code></pre><pre><code class="hljs bash">由于组织管理层的变化，一名新的项目相关方被分配到项目上.新的项目相关方请求高层级需求以及职权级别相关的信息.若要帮助该项目相关方，项目经理应查阅哪份文件？A. 范围管理计划B. 项目章程C. 项目范围说明书D. 项目管理计划<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P81章节：4.1.3.1项目章程</span><span class="hljs-comment"># 是由项目启动者或发起人发布的，正式批准项目成立，</span><span class="hljs-comment"># 并授权项目经理使用组织资源开展项目活动的文件. </span><span class="hljs-comment"># 它记录了关于项目和项目预期交付的产品、服务或成果的高层级信息.</span><span class="hljs-comment"># 宏观、高层次、整体这些关键字要想到项目章程.</span></code></pre><pre><code class="hljs bash">在启动阶段，项目经理意识到主要里程碑与范围不一致，这可能导致误解，项目经理下一步应该怎么做？A. 在项目管理计划中详细说明范围和可交付成果B. 提出一项变更请求，以修改范围和可交付成果C. 在项目章程中规定范围和可交付成果D. 在问题日志中记录误解范围和可交付成果的可能性<span class="hljs-comment"># C</span><span class="hljs-comment"># 解析：PMBOK（6）P75-4.1制定项目章程.</span><span class="hljs-comment"># 项目的启动阶段，关键里程碑记录在项目章程中.</span><span class="hljs-comment"># 此时尚未生成基准，可交付成果尚未明确，自然也无法采用整体变更控制流程，排除ABD.</span></code></pre><pre><code class="hljs bash">项目经理正在为客户管理一个跨国项目，拟采用最新技术替换其电信基础设备.项目经理得知，在某些国家，必须遵循特定的环境规定来处置被替换的硬件.在制定商业论证时，未考虑到这些规定，项目经理应该怎么做？A. 更新商业论证以包含硬件处置成本B. 建议发起人将遵守这项规定的成本纳入商业论证C. 提出一个包含遵守环境法规成本的实施策略D. 根据业务需求识别主要可交付成果，以管理客户期望并遵守该规定<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6) P30-1.2.6.1项目商业论证</span><span class="hljs-comment"># 项目商业论证指文档化的经济可行性报告，用来对尚缺乏充分定义的所选方案的收益进行有效论证.</span><span class="hljs-comment"># 新了解到的信息要重新进行商业论证，用来论证项目的可行性.</span><span class="hljs-comment"># AC - 要评估环境规定带来的影响，而不是简单的把成本加进去.</span><span class="hljs-comment"># D  - 问题聚焦在新规定对商业论证的影响，而不是管理相关方期望.</span></code></pre><pre><code class="hljs bash">在初始项目会议期间，有权做出重要项目决策的关键相关方无法参加，若要避免潜在的项目交付风险，项目经理应该怎么做？A. 将关键相关方集合在一起，以澄清业务需求B. 与项目发起人开会，以获得对项目目标的批准C. 将会议纪要发送给关键相关方D. 与项目发起人一起审查相关方参与计划<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P80- 4.1.2.4 会议看英文“initial project meeting&#x27;</span><span class="hljs-comment"># 初始会议，启动阶段，”关键相关方无法参加“，</span><span class="hljs-comment"># 因为这个相关方有决策权，且确定不能参会，所以只有C最合适.</span><span class="hljs-comment"># A - 相关方已经确定不能参会了</span><span class="hljs-comment"># B - 不参会的相关方有决策权，只要发起人不合适.</span><span class="hljs-comment"># D - 启动阶段还没有相关方参与计划.</span></code></pre><pre><code class="hljs bash">在项目启动大会结束时，项目经理陈述项目范围并让关键相关方和高管提出意见，项目经理正在尝试完成什么目标？A. 记录需求日志的信息B. 设定团队成员对项目可交付成果的期望C. 获得相关方的正式承诺D. 创建项目的范围基准<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6) P86-4.2.2.4会议.</span><span class="hljs-comment"># 项目开工会议的目标在&quot;传达项目目标、获得团队对项目的承诺，以及阐明每个相关方的角色和职责&quot;.</span></code></pre><pre><code class="hljs bash">首席执行官宣布一个新项目，该项目具有成本和时间限制目标，商业论证尚末最终确定.根据经验，项目经理强烈感觉将不能实现这些目标.若要确保项目成功，项目经理应该怎么做？ A. 项目团队协商承诺长时间工作，并快速跟进该项目B. 与首席执行官会面，并强调可以实现的目标C. 修改项目章程以适应首席执行官的期望D. 将首席执行官的假设条件更新到假设日志中<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P80 4.1.2.4会议．</span><span class="hljs-comment"># 制定项目章程工具与技术. </span><span class="hljs-comment"># 与关键相关方举行会议的目的是识别项目目标、成功标准、</span><span class="hljs-comment"># 主要可交付成果、高层级需求、总体里程碑和其他概述信息.</span><span class="hljs-comment"># 新项目商业论证尚未最终确定说明属于制定项目章程阶段过程，</span><span class="hljs-comment"># 要确保项目成功那就要就项目成功标淮与关键相关方(首席执行官)举行会议讨论，最终形成一致意见.</span><span class="hljs-comment"># A  - 尚未正式立项，项目团队成员还没有加入到团队.</span><span class="hljs-comment"># CD - 在与首席执行官共同明确项目范围后进行.</span><span class="hljs-comment"># (题干中没有描述有分歧.只是感觉不能实现目标，不是对目标有不同意见通过开会细化标准，看看有哪些制约因素，是否能实现等等）.</span></code></pre><pre><code class="hljs bash">项目经理正在编写采购工作说明书(SOW), 以分包新工厂的机器安装任务.项目经理应该查阅哪一份文件来确保其与项目目标一致?A. 供方选择标准B. 项目章程C. 采购文件D. 项目管理计划<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P468-12.1.1.1 规划采购管理的输入 - 项目章程.</span><span class="hljs-comment"># 项目章程包括目标、项目描述、总体里程碑，以及预先批准的财务资源.</span><span class="hljs-comment"># 项目目标在项目章程里，编制SOW需要参考.</span><span class="hljs-comment"># ACD - 都没有项目目标．</span></code></pre><pre><code class="hljs bash">项目经理与关键相关方进行了成本效益分析研讨会，以确定项目边界并证明其合理性. 在审校结果后,项目经理发现预期收益的值不一致. 项目经理应该做什么？A. 接洽相关方,以确认所提供的值与项目范围一致B. 根据相关方提供的值修改项目范围,并更新项目章程C. 计算不一致值的平均值,并更新分析以符合预期收益D. 将该不一致性记录为一项风险,并假设风险与风险管理计划中列出的预期收益一致<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P77 章节：4.1.1.1 </span><span class="hljs-comment"># 一般情况下，商业论证会包含商业需求 和 成本效益分析,</span><span class="hljs-comment"># 以论证项目的合理性并确定项目边界.</span><span class="hljs-comment"># 商业论证过程发现问题，不能自行处理，因此排除BC，D假设一致也有问题.</span></code></pre><pre><code class="hljs bash">一位高级经理将商业论证交给项目经理，该商业论证将用作制定项目章程的输入.有几个源作为创建商业论证的触发项. 以下哪一项不是触发因素之一？A. 项目经理的专家判断B. 法律要求C. 客户需求D. 社会需求<span class="hljs-comment"># PMBOK 6th 页码：P78 章节：4.1.1.1商业论证的触发.</span><span class="hljs-comment"># (1) 市场需求</span><span class="hljs-comment"># (2) 组织需求</span><span class="hljs-comment"># (3) 客户要求</span><span class="hljs-comment"># (4) 技术进步</span><span class="hljs-comment"># (5) 法律要求</span><span class="hljs-comment"># (6) 生态影响</span><span class="hljs-comment"># (7) 社会需要 </span><span class="hljs-comment"># 里面没有项目经理的专家判断.</span></code></pre><h4 id="14-混合模型"><a href="#14-混合模型" class="headerlink" title="14.混合模型"></a>14.混合模型</h4><p>混合模型 :  预测 + 敏捷</p><pre><code class="hljs bash">你负责设计一种即将向市场大规模推出的新手持设备. 该项目被视为公司的蓝海战略, 如果成功, 将创建自己的市场.然而, 围绕需求存在的高度不确定性, 这只能通过原型设计来实现.下列哪一种方法最有可能成功?A. 使用混合模型, 设计阶段采用敏捷方法, 推出阶段采用预测法B. 设计和推出阶段都使用预测法C. 使用混合模型, 设计阶段采用预测法, 推出阶段采用敏捷方法D. 设计和推出阶段都使用敏捷方法<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">你已经加入了一个项目，在该项目中，需求在交付期间定期细化，并且交付被划分为整个产品的子集.变更是定期合并的，风险和成本是通过使用新信息逐步细化计划来控制的.主要相关方定期参与. 在你的项目中使用了什么开发方法？A. 敏捷B. 预测C. 混合D. 周期<span class="hljs-comment"># C</span><span class="hljs-comment"># 敏捷实践指南 页码：P26 章节：3.1.6 混合生命周期的特征.</span><span class="hljs-comment"># 对于整个项目，没有必要使用单一的方法.</span><span class="hljs-comment"># 为达到特定的目标，项目经常要结合不同的生命周期要素.</span><span class="hljs-comment"># 预测、迭代、增量和/或敏捷方法的组合就是一种混合方法.</span><span class="hljs-comment"># A - 敏捷型需要频繁的交付与计划.</span><span class="hljs-comment"># B - 预测是一次性交付，不会定期包含变更.</span></code></pre><h4 id="15-配置控制和变更控制"><a href="#15-配置控制和变更控制" class="headerlink" title="15.配置控制和变更控制"></a>15.配置控制和变更控制</h4><p>配置控制 : 侧重于交付成果和过程的规范</p><p>变更控制 : 侧重于识别, 记录和控制项目变更</p><p><u>变更请求的过程</u> : </p><p>除非已确定修复程序, 否则没有必要发出变更请求. 同样, 除非找到根本原因, 否则无法找到修复程序的方法. 只有在分析报告的漏洞时, 才能确定根本原因.</p><p><code>分析漏洞 -&gt; 确定根本原因 -&gt; 确定修复程序 -&gt; 发出变更请求</code></p><pre><code class="hljs bash">Rob是一名初级项目经理, 最近加入了你的咨询公司. Rob已被分配到一个客户端组织. 该客户端组织目前正在转换其某些核心过程.作为首次担任项目的Rob目前正在为配置控制和变更控制之间的差别而苦苦挣扎. 区别在于:A. 配置控制侧重于交付成果和过程的规范, 但变更控制侧重于识别, 记录和控制对项目的变更B. 配置控制的重点是确保所有变更都记录在案, 而变更控制侧重于审批过程C. 变更控制侧重于可交付成果和过程的规范, 而配置控制侧重于识别, 记录和控制对项目的变更D. 变更控制的重点是确保记录和控制已批准的变更, 而配置控制侧重于确保变更控制委员会正确识别和批准变更<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">你正在管理对业务具有高价值的产品的开发. 产品发布日期已经确定, 到目前为止一切都进展顺利.在发布前几天, 产品中发现严重的安全漏洞. 以下哪一项是接下来需要进行的活动正确顺序?A. 分析漏洞, 确定根本原因, 确定修复程序并发出变更请求B. 发出变更请求, 分析漏洞, 确定根本原因并确定修复程序C. 确定根本原因, 发出变更请求, 确定修复程序并分析漏洞D. 确定修复程序, 发出变更请求, 分析漏洞并确定根本原因<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">一个产品开发项目正在进行中。该项目在软件开发中使用敏捷的生命周期，并在一个包罗万象的项目管理计划中运行. 尽管经过周密的计划但在发布了两个软件版本之后，用户指南并没有更新以反映最新的版本，这给最终用户造成了很大的混乱.项目经理应该做什么来确保此问题不再发生?A. 提交变更请求以修改用户指南，使指南与当前软件版本保持一致B. 还原到软件的用户指南与发布给用户的软件一致的最后一个版本C. 要求CCB执行配置审查，以确保项目配置项的组成正确D. 提交变更请求以修订变更管理计划，以确保将用户指南标识为配置要素<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK 6th 页码：P118章节：4.6.2.2变更控制工具：</span><span class="hljs-comment"># 为了便于开展配置和变更管理，可以使用一些手动或自动化的工具.</span><span class="hljs-comment"># 配置控制重点关注可交付成果及各个过程的技术规范，</span><span class="hljs-comment"># 而变更控制则着眼于识别、记录、批准或否决对项目文件、可交付成果或基准的变更.</span><span class="hljs-comment"># 配置管理的一个重要功能就是管理产品版本.</span></code></pre><pre><code class="hljs bash">在项目测试期间，识别到多个缺陷.由于团队还在解决积压的缺陷，测试将会超支的风险现在己经增加.项目经理应该怎么做？A. 将该问题上报给项目发起人B. 采用冲突管理技术来审查和确定缺陷的优先级C. 提交变更请求来解决缺陷D. 请求额外的资源来处理缺陷积压<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P306-8.3.3.4变更请求.</span><span class="hljs-comment"># 通过变更的方式来对缺陷进行补救.</span><span class="hljs-comment"># AD - 在对缺陷补救的时候，对积压的风险进行跟踪评估，制定应急计划.</span><span class="hljs-comment">#      至于是否上报还是求助额外额度资源要依据评估的结果.</span><span class="hljs-comment"># B  - 冲突管理通常用于团队内部，缺陷积压的问题根据评估的结果制定应对策略.</span></code></pre><pre><code class="hljs bash">一个项目的规模已经大到由指导委员会取代单一的项目发起人.项目经理应该怎么做来适应这种新发展？A. 认识到相关方结构发生了变化，并量身定做与这个团队的沟通B. 按照最初的计划继续工作，同时认识到该项目现在包括其他相关方C. 为团队组织一次与新的指导委员会一起召开的会议，继续进行项目工作D. 与新的委员会分享当前的状态报告<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P529 13.3.3.2项目管理计划更新：沟通管理计划和相关方参与计划.</span><span class="hljs-comment"># 需要更新沟通管理计划，以反映新的或已变更的相关方需求.</span><span class="hljs-comment"># 需要更新相关方参与计划，以反映为有效引导相关方参与所需的新的或更改的管理策略.</span><span class="hljs-comment"># 题目中&quot;由指导委员会取代单一的项目发起人&quot;，相关方发生了变化，根据变化来跟新相关方沟通.</span><span class="hljs-comment"># B - 相关方已经发生了变化，不能再按照原来的计划进行管理.</span><span class="hljs-comment"># C - 采取适合的方式与新相关方沟通，会议只是一种沟通方式.</span><span class="hljs-comment"># D - 不符合题意.</span></code></pre><pre><code class="hljs bash">在审查进度计划时，项目经理发现由于个意外问题导致存在严重的范围蔓延.项目经理应该怎么做？A. 停止与该问题相关的工作，并通知项目发起人B. 更新风险登记册并通知发起人C. 向变更控制委员会(CCB)提交变更请求，并更新项目基准D. 使用因果图执行根本原因分析，并更新风险管理计划<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P170-5.6.3.2变更请求.</span><span class="hljs-comment"># 分析项目绩效后，可能会就范围基准和进度基准，</span><span class="hljs-comment"># 或项目管理计划的其他组成部分提出变更请求，</span><span class="hljs-comment"># 变更请求需要经过实施整体变更控制过程的审查和处理.</span><span class="hljs-comment"># &quot;范围蔓延”是未经控制的范围扩大，因此需要走变更流程进行范围控制.</span><span class="hljs-comment"># A - 是否停工要查看风险登记册上预设的应急计划.</span><span class="hljs-comment"># B - 是否通知发起人要看预设的应急计划和沟通管理计划.</span><span class="hljs-comment"># D - 风险管理计划是风险管理的策略，更新风险管理计划有误.</span></code></pre><h4 id="16-应急计划"><a href="#16-应急计划" class="headerlink" title="16.应急计划"></a>16.应急计划</h4><ul><li>应急计划 : 对风险提前做出了应对计划, 发生了启用了这个应对计划</li><li>权变措施 : 事先没有计划, 当有情况发生时需要随机应变, 临时想办法</li><li>弹回计划 : 放弃项目原目标, 尽量减少损失, 体面收场, 属于撤退计划</li></ul><p>应急计划, 弹回计划, 权变措施(除了紧急情况下的已授权的自动权变之外)在实施前都需要经过<u>变更控制程序</u>, 并获得批准. </p><pre><code class="hljs bash">在监督和控制风险时, 项目经理在看过月度项目绩效报告后发现, 需要实施应急计划. 项目经理接下来应该怎么做?A. 更新项目进度计划和预算, 以配合应急计划的实施B. 提出变更请求, 在应急计划实施前获得批准C. 记录因实施应急计划而获得的经验教训D. 将实施应急计划的信息通知所有相关方<span class="hljs-comment"># B</span></code></pre><h4 id="17-决策树分析"><a href="#17-决策树分析" class="headerlink" title="17.决策树分析"></a>17.决策树分析</h4><p>通过决策树分析, 分别计算每个方案成功的收益和失败的损失. 省的钱就是收益, 取正值; 增加的钱就是损失, 取负值.<br>最终选择预期货币价值(EMV)高的方案.</p><p><u><strong>预期货币价值(EMV)分析</strong></u>是一个统计概念, 又称为<u><strong>决策树分析</strong></u>, 用于计算未来可能发生的情况或可能不会发生的情况时不同分支组合的收益与成本.<br>机会的EMV通常是正值, 而风险会导致负值.</p><p><strong>帕累托图</strong> : 帕累托原理告诉我们, 20%的原因导致了80%的问题. 所以, 只要我们找到并解决了少数原因导致的问题, 就能解决大部分问题.<br>帕累托图的原理就是将<strong>缺陷按原因归类后排序</strong>(缺陷从多到少), 然后画出<strong>缺陷累计曲线</strong>.<br>少数原因造成缺陷已占到总缺陷数量的大部分, 所以只需要帮助项目经理集中精力找出少数原因, 就能解决大部分缺陷.</p><p>挣值分析:<br>需要提交成本状态报告, <u><strong>S曲线</strong></u>, 能够展示成本, 进度与基准的偏离情况</p><pre><code class="hljs bash">项目经理正在为项目准备两个备选方案.方案一成功的概率是80%, 如果成功, 可以为项目节省100万美元, 但是如果失败, 就要增加100万美元的成本.方案二成功的概率是50%, 如果成功, 可以为项目节省200万美元, 但是如果失败, 就要增加100万美元的成本.那么项目经理应该推荐哪个方案? 理由是什么?A. 方案一, 因为预期货币价值(EMV)比方案二多10万美元B. 方案二, 因为方案如果成功, 方案二可以比方案一多节省100万美元C. 方案一, 因为方案一成功的概率比方案二高30%D. 方案二, 因为预期货币价值(EMV)比方案一多20万美元<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">Joe正在管理一家大型制造公司的发电厂设计和建设项目. 由于市场条件不稳定和环境法规不明确, 该项目存在重大风险.Joe目前正在尝试计算未来一些不确定情景可能带来的财务影响. 他可以使用什么方法?A. 帕累托图B. 挣值分析C. 偏差分析D. 预期货币价值分析(EMV)<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">客户抱怨产品质量很差. 项目经理通过分析发现大部分的质量问题都是由某几个原因造成的. 项目经理使用的是哪种工具?A. 直方图B. 帕累托图C. 散点图D. 层级图<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目团队发现造成产品缺陷的原因可以归纳为五种, 而且每种原因导致的缺陷的数量是不同的.以下哪个工具有助于项目经理决定这些原因的优先顺序?A. 帕累托图B. 鱼骨图C. 直方图D. 散点图<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">项目经理正在为刚刚进入第三次迭代的项目使用混合方法. 完工预算为500,000美元，已经完成100个故事点中的50个，每个故事点价值5,000美元，项目实际成本(AG)为400,000美元.管理层要求在下一次指导委员会会议上提交成本状态报告. 项目经理应该使用什么来提交该报告？A. 信息发射源B. S曲线C. 燃尽图D. 燃起图<span class="hljs-comment"># B</span><span class="hljs-comment"># A包括CD, 都偏重于任务进度, 而非成本</span></code></pre><pre><code class="hljs bash">项目经理希望确定产生项目中大多数问题或缺陷的原因.帮助确定问题领域，项目经理应该使用哪项工具?A. 控制图B. 流程图C. 帕累托图D. 散点图<span class="hljs-comment"># C</span><span class="hljs-comment"># 《PMBOK》第6版293页，8.2.2.4-帕累托图</span><span class="hljs-comment"># 是一种特殊的直方图. 理论依据为80/20原则，用于寻找 关键原因、主要原因等.</span></code></pre><pre><code class="hljs bash">项目经理建立了一个虛拟团队，以尽量减少项目成本.然而，经过几个月缓慢进展和成本超支后，项目发起人开始抱怨.项目经理应该怎么做？A. 增加与虚拟团队的沟通频率B. 与项目发起人协商项目预算C. 使用挣值管理(EVM)技术评估项目绩效，然后采取适当行动D. 终止虛拟团队并让团队成员集中办公<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P105-4.5 监控项目工作.</span><span class="hljs-comment"># 发起人报怨项目绩效，因此要进行挣值分析、偏差分析、趋势分析、原因分析给出解决方案.</span><span class="hljs-comment"># 只有C是先进行了分析，然后再评估措施.</span><span class="hljs-comment"># 其他选项：ABD都直接给了方案，没有C完整.</span></code></pre><pre><code class="hljs bash">在一个价值200万美元项目的测试阶段，团队发现了一些缺陷.由于截止期限很紧，团队成员承认他们可能无法修复所有缺陷.若要确定应集中哪些工作，项目经理应该使用什么工具或技术？A. 帕累托图B. 矩阵图C. 散点图D. 专家判断<span class="hljs-comment"># A</span><span class="hljs-comment"># 帕累托图，是一种特殊的垂直条形图，用于识别造成大多数问题的少数重要原因.</span><span class="hljs-comment"># 缺陷太多不能都修复，要确定应集中哪些工作，然后优先修复主要缺陷，使用帕累托图给缺陷排序.</span></code></pre><h4 id="18-凸显模型"><a href="#18-凸显模型" class="headerlink" title="18.凸显模型"></a>18.凸显模型</h4><p>凸显模型就是综合分析相关方权力, 紧迫性和合法性, 确定相关方需要<u><strong>被关注的优先级</strong></u>, 以及管理相关方参与的策略.<br>凸显模型适用于复杂的<u><strong>相关方大型社区</strong></u>.</p><pre><code class="hljs bash">项目经理已经识别出一个新项目的许多相关方, 但每个相关方的权力大小, 需要被关注的紧迫性和参与项目的合法性都不同.项目经理应该使用以下哪个工具来确定相关方应该被关注的优先级, 以便确定合适的相关方管理策略?A. 相关方参与度评估矩阵B. 权力/利益方格C. 相关方立方体D. 凸显模型<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">项目经理中途接手一个复杂的项目. 项目相关方众多, 而项目经理精力有限, 希望给相关方评级, 评估哪些相关方应该第一时间关照, 哪些相关方可以稍后联系,并且可以控制相关方现在的参与状态, 避免不必要的参与度升级. 项目经理最好使用下面哪个工具?A. 凸显模型B. 相关方管理计划C. 权力/利益方格D. 相关方参与度评估矩阵<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">项目经理正与多位相关方一起管理一个庞大而复杂的项目. 一些相关方反对项目的效益, 而另一些则非常支持. 项目经理应该使用什么来澄清并正确管理这些相关方?A. 凸显模型B. 权力/利益方格C. 影响/影响力方格D. 相关方立方体<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">项目经理中途接手一个复杂的项目. 由于项目相关方众多, 项目经理担心特别需要被关照的相关方被自己冷落.项目经理应该查阅什么?A. 沟通管理计划B. 相关方管理计划C. 权力-利益方格D. 相关方参与度评估矩阵<span class="hljs-comment"># C</span><span class="hljs-comment"># 通过分析相关方的权力和利益, 可以确定哪些相关方应重点关注.</span></code></pre><pre><code class="hljs bash">一家公司正在执行一个关键项目，而该项目可能极大影响到公司的收入.首席执行官非常关注项目成功，并承诺分配所有必要资源.该首席执行官的参与程度应如何分类？A. 管理B. 领导C. 参与D. 支持<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P521 章节：13.2.2.5 相关方参与度评估矩阵：</span><span class="hljs-comment"># 不了解型 - 不知道项目及其潜在影响.</span><span class="hljs-comment"># 抵制型 - 知道项目但抵制.</span><span class="hljs-comment"># 中立型 - 了解项目，但中立.</span><span class="hljs-comment"># 支持型 - 了解项目，并支持.</span><span class="hljs-comment"># 领导型 - 了解项目及其潜在影响，而且积极参与以确保目取得成功.</span><span class="hljs-comment"># 了解项目及其潜在影响，而且积极参与确保项目成功.</span></code></pre><pre><code class="hljs bash">对于一个政府项目，项目成果会对一群当地相关方造成负面影响.这群相关方对于项目有高影响和低利益.但是他们有权终止项目. 项目经理应该使用什么方法？A. 推式沟通B. 协作和合作C. 参与D. 咨询<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P512 章节：13.1.2.4 权利利益方格</span><span class="hljs-comment"># 基于相关方的职权级别（权力）、对项目成果的关心程度（利益）、</span><span class="hljs-comment"># 对项目成果的影响能力（影响），或改变项目计划或执行的能力，每一种方格都可用于对相关方进行分类.</span><span class="hljs-comment"># 权利高、利益低，通过不断地咨询，令其满意.</span></code></pre><h4 id="19-质量功能展开-QFD"><a href="#19-质量功能展开-QFD" class="headerlink" title="19.质量功能展开(QFD)"></a>19.质量功能展开(QFD)</h4><p>制造业产品研发项目一般用<u>质量功能展开</u>(QFD, 一种引导技术)来识别相关方对产品的需求.</p><pre><code class="hljs bash">在某个电动大客车的研发项目中, 项目经理从收集客户需求开始, 然后客观地对这些需求进行分析, 并一步步地将这些需求转化为设计, 开发和生产指标.他用的是下列哪种技术?A. 联合应用设计和开发(JAD)B. 质量功能展开(QFD)C. 用户故事D. 待办事项列表<span class="hljs-comment"># B</span></code></pre><h4 id="20-敏感性分析"><a href="#20-敏感性分析" class="headerlink" title="20.敏感性分析"></a>20.敏感性分析</h4><p>根据敏感性进行<u><strong>从高到低排序</strong></u>就是敏感性分析.<br>风险的变化对项目最终绩效的影响程度是指因变量(项目最终绩效)对自变量(各种风险)的敏感性.</p><pre><code class="hljs bash">项目团队识别出很多个风险, 项目经理说在接下来的风险评审会上, 必须向项目相关方汇报哪些风险的变化对项目最终绩效的影响最大,而且应该由从高到低排出顺序. 项目团队需要用到下面哪一种技术?A. 敏感性分析B. 决策树分析C. 挣值分析D. 蒙特卡洛分析<span class="hljs-comment"># A</span></code></pre><h4 id="21-活动属性"><a href="#21-活动属性" class="headerlink" title="21.活动属性"></a>21.活动属性</h4><p>活动属性可能包括活动描述, 紧前活动, 紧后活动, <strong>逻辑关系</strong>, 提前量和滞后量, 资源需求, 强制日期, 制约因素和假设条件.</p><p>滞后量 : 在前一项工作完成后增加<strong>等待的时间</strong>, 而不是让后序工作马上开始.</p><p>keywords : 逻辑关系, 关于活动的详细描述, 资源需求</p><pre><code class="hljs bash">项目经理在制定项目进度计划时, 希望按照符合逻辑的方式排列任务顺序, 并使用至少有高级的承包商. 项目经理应该查阅哪份文件?A. 里程碑清单B. 项目范围说明书C. 活动清单D. 活动属性<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">经过项目绩效评估, 团队发现项目进度已明显落后于计划. 项目经理建议接下来采取快速跟进的措施, 以保证能够按照合同约定的时间向客户交付项目. 以下哪个选项符合项目经理的建议?A. 减少测试和简化文档工作B. 为关键路径上的活动设置提前量C. 为关键路径上的活动增加资源D. 为非关键路径上的活动增加资源<span class="hljs-comment"># B</span><span class="hljs-comment"># 设置提前量, 与前序工作并行, 可以有效压缩项目进度</span></code></pre><pre><code class="hljs bash">滞后量(Lag)的含义是什么?A. 在不影响项目总工期的前提下, 活动可以拖延的总时间B. 在不影响紧后工作最早开始时间的前提下, 活动可以拖延的总时间C. 等待的时间D. 与紧前工作并行的时间<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">项目经理在和团队编制进度计划时, 计划在10天后开发完成一项新功能.项目经理担心负责这项新功能开发的工程师缺少这方面的经验.所以把测试开始的时间定于15天后. 计划中从开发完成到测试开始中间的5天时间属于:A. 提前量B. 滞后量C. 管理储备D. 总浮动时间<span class="hljs-comment"># B</span><span class="hljs-comment"># 在编制计划时, 主动在两项具有依赖关系的活动之间增加的等待时间属于滞后量.</span><span class="hljs-comment"># 可以有效缓解前项工作因不能按时完成而给后序工作乃至整个计划带来的冲击.</span><span class="hljs-comment"># 在活动之间依赖关系的基础上, 增加的间隔时间被称为滞后量(Lag).</span><span class="hljs-comment"># 减少的间隔时间被称为提前量(Lead).</span><span class="hljs-comment"># 设置提前量也叫快速跟进, 是缩短工期的重要方式.</span></code></pre><pre><code class="hljs bash">项目经理通过将工作包分解到活动中去，识别并记录产生项目可交付成果的具体行动，结果将产生哪一份文件？A. 资源分解结构(RBS)B. 活动资源需求C. 里程碑清单D. 活动持续时间估算<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P186-6.2.3.3里程碑清单.</span><span class="hljs-comment"># 将工作包分解到活动，我们定位到定义活动子过程. 定义活动输出里程碑清单.</span><span class="hljs-comment"># A - 是选项D的输入.</span><span class="hljs-comment"># B - 是6.5制定进度计划的输入.</span><span class="hljs-comment"># D - 在定义活动之后.</span></code></pre><h4 id="22-进度网络分析"><a href="#22-进度网络分析" class="headerlink" title="22.进度网络分析"></a>22.进度网络分析</h4><p> 进度网络分析是创建项目进度模型的一种综合技术, 它采用了其他几种技术.</p><ul><li><p>关键路径法<br>快速跟进: 开始到开始(SS), 来加速关键路径活动.<br>哪些工作在关键路径上是由工作本身的时间特点来决定的, <u><strong>不是可以被随便修改的</strong></u>.<br>若要将关键路径上的工作变到非关键路径上, 只有<u>压缩关键路径上的工作</u>, 或者<u>延长非关键路径上的工作</u>, 使关键路径与非关键路径发生交换才能实现.<br>这不是合理的方案.<br><strong>浮动时间 &lt;= 0的活动一定在关键路径</strong>上.</p></li><li><p>资源优化技术 : 资源平衡 和 资源平滑</p><p>资源平滑是指利用非关键路径上的浮动时间, 向前或向后挪动工作, 以实现资源数量随时间的波动幅度减少.</p><p>通过调动非关键路径上的活动资源来支援关键活动上的活动, 以保证项目工期.<br>资源平滑<u>不增加成本</u>, 因为资源平滑可以节约出一些潜在的免费资源来.<br>资源平衡: 可能造成<strong>总工期的延长</strong>.</p></li><li><p>建模技术 : 蒙特卡洛分析 和 进度压缩技术<br>蒙特卡洛技术: 是通过模拟各种风险组合以及每种风险发生的<strong>概率</strong>来估算不同情况下项目需要的成本或工期.</p></li></ul><p>keywords : 综合技术, 反复过程</p><p>赶工是通过<u>增加资源</u>, 以最小的成本代价来压缩进度工期的一种技术.<br>赶工的例子: 批准加班, 增加额外资源或支付加急费用, 来加快关键路径上的活动.<br>赶工会增加<u>成本</u>.<br>任务不能并行, 要压缩进度, 不能快速跟进, 只能<u><strong>赶工</strong></u>.</p><p>快速跟进: 一种将正常情况下按顺序进行的活动或阶段改为至少是部分<u>并行开展</u>的进度压缩技术.</p><p>进度压缩技术 : 在不缩减项目范围的前提下, 缩短或加快进度工期, 以满足进度制约因素, 强制日期或其他进度目标.</p><p>“上线的日期是固定的” : 要以上线日期进行分析, 根据分析的结果调整项目管理计划, 譬如缩小项目范围, 追加资源投入等.</p><p>当工期被缩短且不能增加预算时, 只能利用项目<strong>范围, 进度, 成本之间相互影响和制约的关系</strong>, 取得工期和范围之间的平衡.<br>删除一部分需求也就是适当缩小范围, 从而缩短工期.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/003.png" alt="003"></p><p><strong>关键链法</strong>:<br>关键链法是<u><strong>高德拉特</strong></u>在制约理论基础上提出的分析技术, 强调<strong>储备(缓冲)集中管理</strong>, 避免储备事先被分配到活动上, 但风险未发生, 从而造成浪费.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/022.png" alt="022"></p><pre><code class="hljs bash">项目发起人批准项目里程碑进度计划并任命一名项目经理. 评审进度计划之后, 项目经理得出日期不现实的结论. 项目经理下一步应该怎么做?A. 创建一份因果图B. 产生进度计划网络图C. 对批准的进度计划赶工D. 执行进度网络分析<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">一名项目经理成员被要求支持另一个职能部门三天时间. 项目经理识别到这将会让项目延期五天. 项目经理应使用什么技术来确定这一点?A. 进度网络分析B. 关键路径法(CPM)C. 关键链法(CCM)D. 资源平衡<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">Jane担心她的项目, 因为她许多的任务进展缓慢, 两个关键任务可能会延迟之后. 她进行了彻底的资源分析, 发现下周有5个人有空. 她希望指派这些提前完成她的任务, 并防止项目完成日期延后. 这是使用什么工具技术?A. 赶工B. 管理储备C. 快速跟进D. 资源平衡<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">由于竞争对手意外发布了类似产品, Widgets国际执行团队加大了对产品团队的压力, 要求他们提前三个月发布Widget产品. 项目经理可以使用什么技术来缩短计划, 但保持项目范围?A. 滚动式规划B. 进度网络分析C. 进度压缩D. 进度管理计划<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">由于监管要求, 项目的上线日期是固定的, 项目经理在规划阶段运行了关键路径这种方法, 结果显示该项目预计会比规定时间晚两个月完成.项目经理该做什么来纠正这种情况?A. 更新成本管理计划, 为该项目分配更多资源B. 包含进度计划储备或紧急情况, 并分析新的关键路径C. 进行反向排程, 以重新定义所需的时间和资源D. 通过剔除某些活动和缩短期限来缩减项目范围<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">要求在某个特定日期提供某个产品. 项目经理测量了项目绩效, 并意识到关键路径活动没有实现预期进展, 因此, 进度计划将被延迟.项目经理应该怎么做?A. 执行资源平滑并评估潜在的免费资源是否会提高这些活动的绩效B. 向职能经理提交变更请求以添加更多资源C. 在项目章程中包含储备, 以确保涵盖此风险并创建应急计划D. 要求项目发起人实施应急计划<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">客户要求项目经理在60天内交付项目, 而之前原本计划在90天内交付, 没有可以并行执行的活动, 请求的变更已经获得变更控制委员会的批准. 若要满足这项要求, 项目经理应该做什么?A. 为项目进度计划创建应急储备B. 对项目进度计划赶工C. 在项目进度计划中创建项目阶段D. 快速跟进项目进度计划<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目经理得知一位团队成员即将离职, 于是查阅了责任分配矩阵和进度网络图, 发现该成员负责的工作并不在关键路径上, 而且有3天的总浮动时间.项目经理可以得到以下哪个结论?A. 该成员的离职不会对项目整体进度产生影响B. 只要3天内找到替补的成员, 就不会对项目进度计划产生任何影响C. 如果其他团队成员加班争取出3天的浮动时间, 就可以抵消该成员离职的影响D. 如果该成员负责的工作延误3天以上, 那么项目的关键路径将发生改变<span class="hljs-comment"># D</span><span class="hljs-comment"># B B会使进度计划中原路径的浮动时间减少了, 就是影响</span><span class="hljs-comment"># C 再争取3天的浮动时间, 也只是浮动时间变多了, 没有接替的人, 还是会影响项目进度计划的</span><span class="hljs-comment"># D 离职人员负责的工作延误3天以上, 路径上的总浮动时间被耗尽, </span><span class="hljs-comment">#   该路径就成为关键路径, 同时总工期也延长了.</span></code></pre><pre><code class="hljs bash">一家组织正在一个新兴市场启动一个项目. 新兴市场的法律, 经济, 原材料和劳务市场都存在着各种不确定性. 项目发起人要求项目经理提供不同概率下的成本估算, 项目经理应使用什么工具或技术?A. 成本效益分析B. 敏感性分析C. 概率和影响矩阵D. 蒙特卡洛技术<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">项目主管担心一个计划驱动的项目可能无法实现其完成日期. 若要减轻这个问题, 项目经理应该做什么?A. 制定资源分解结构(RBS)B. 应用资源平衡C. 采用开始到开始(SS)任务关系来加速关键路径活动D. 重定进度基准和资源管理计划<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">任务B依赖于任务A, 而任务A延迟了. 任务B的资源可用性有限, 必须按时开始任务B. 项目经理应该如何重新安排进度计划以确保最终期限保持不变?A. 快速跟进任务B并立即开始工作B. 对任务A赶工, 并在计划的时候开始任务BC. 重新计划任务B的开始日期, 让其可以在A任务完成D. 快速跟进任务A并移动任务B的开始日期<span class="hljs-comment"># B</span><span class="hljs-comment"># A延迟了, 要尽快将A压缩回正常进度, 以确保B正常开始.</span></code></pre><pre><code class="hljs bash">如果任务B有12天的自由时差, 而且有24天的总时差. 假设其最早开始日期被推迟26天, 那么项目的完工日期将会受到什么影响?A. 该任务将不再位于关键路径上B. 紧后活动的开始日期将被延后14后C. 项目的完工日期将会延后2天D. B和C<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">项目团队中的一位技术人员要请假一周, 相关方非常担心项目进度因此而延误. 项目经理很坚定的说, 项目进度不会受到影响. 下面都有可能是项目经理这么说的依据, 除了:A. 团队资源冗余, 这位技术人员的工作可以由其他人分担B. 这位技术人员负责的工作已领先计划一周以上C. 这位技术人员负责的工作在非关键路径上, 且总浮动时间大于一周D. 这位技术人员负责的工作在关键路径上, 但可以将其改到非关键路径上<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">项目经理带领团队按照从下而上的估算法估算出项目的工期为6个月, 但发起人提出必须4个月交付项目, 而且不能增加预算. 项目经理应该怎么做?A. 按照发起人的要求压缩工期B. 减少测试环节, 以节约工期C. 寻求新技术, 以加快进度D. 建议删除一部分项目需求<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">项目经理不允许团队成员在评估活动历时时期间增加安全时间, 但他自己在给发起人汇报项目工期时额外多报了5周. 针对他的这种做法, 你怎么看?A. 项目经理太自私, 欺上瞒下B. 项目经理这么做没有错, 他争取的是管理储备C. 项目经理这么做没有错, 他采用的是关键路径法D. 项目经理这么做没有错, 他采用的是关键链法<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">项目资源已过载, 但是项目经理无法获取更多的资源, 不过项目工期还有一些余量. 项目经理最好怎么做?A. 将非关键路径改为关键路径B. 快速跟进项目C. 实施资源平衡D. 实施资源平滑<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">在项目进度状态汇报会上, 项目经理提供的关键路径法(CPM)图中显示有两项活动的总浮动时间是负的.从该项分析中, 我们可以得出下列哪一项结论?A. 这两项活动都在关键路径上B. 这两项活动的最早开始时间都早于最晚开始时间C. 这两项活动的最晚结束时间都早于最晚结束时间D. 因为活动有负的浮动时间, 所以项目进度比计划超前了<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">因为项目资源有限, 团队无法获得更多资源, 而且活动之间的逻辑关系也使活动无法并行, 所以项目经理应该使用什么技术来充分利用项目资源, 而不会导致项目完成时间延后呢?A. 快速跟进B. 赶工C. 资源平滑D. 资源平衡<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">为了确定最长的工期路径，项目团队同时考虑了任务的依赖关系和资源制约条件. 项目经理使用的是下列哪一项进度安排方法?A. 关键链法B. 关键路径法C. 关键评审技术D. 图形路径法<span class="hljs-comment"># A</span><span class="hljs-comment"># 关键链法 - 考虑了任务的依赖关系和资源制约条件 - 艾利·高德拉特.</span><span class="hljs-comment"># 关键路径法 - 确定逻辑网络路径的进度灵活性大小.</span></code></pre><pre><code class="hljs bash">项目经理发现, 关键路径上的活动已出现延误, 职能部门已没有更多的人手可以提供.并且, 受关键路径上的活动之间的逻辑关系制约, 团队无法采取快速跟进的办法.如果要保证项目按时交付, 项目经理应该怎么办?A. 实施资源平衡B. 实施资源平滑C. 没有办法, 只能修改进度基准D. 在非关键路径上实施快速跟进<span class="hljs-comment"># B</span><span class="hljs-comment"># 资源平滑是利用非关键路径上的浮动时间修改非关键路径上的活动开始或结束的时间.</span><span class="hljs-comment"># 削峰填谷, 减少资源在时间分布上不均衡的情况.</span><span class="hljs-comment"># 根据题干所示, 团队需要调用非关键路径上的活动资源支援关键路径上的活动.</span><span class="hljs-comment"># 因为非关键路径上有浮动时间, 所有减少资源造成的活动历时变化也可以被消化, </span><span class="hljs-comment"># 也就是说, 资源能够支援到关键路径上.</span><span class="hljs-comment"># 是通过赶工的方式缩短关键路径上的活动历时, 进而减轻项目工期延误的风险.</span><span class="hljs-comment"># 资源平衡 -&gt; 工期延长.</span><span class="hljs-comment"># 资源平滑 -&gt; 拆东墙补西墙.</span></code></pre><pre><code class="hljs bash">在进行绩效评审后，项目经理识别到关键路径上五个工作包的其中一个可能会延迟两周时间.若要确保项目按进度执行，项目经理应该做什么？A. 通知相关方，并请求更多时间来处理该工作包B. 请求额外的资源来处理受影响的工作包C. 分析该工作包以确定是否可以使用一些浮动时间D. 调整受影响工作包的进度管理计划<span class="hljs-comment"># B</span><span class="hljs-comment"># 进度 -&gt; 进度压缩</span><span class="hljs-comment"># A - 焦点是工期出现了延迟，再请求更多的事件，问题更加严重.</span><span class="hljs-comment"># C - “关键路径”，浮动时间为0.</span><span class="hljs-comment"># D - 进度管理计划是针对整个项目的，而不是针对工作包，错误.</span></code></pre><pre><code class="hljs bash">负责跟踪项目文件的团队成员被指派到另一个项目项目经理现在正在寻求项目文件，以便帮助制定进度计划。项目经理应使用哪些项目文件？A. 经验教训登记册、里程碑列表、项目团队任务分配表B. 里程碑列表、资源需求和项目章程C. 范围基准、里程碑列表和活动清单D. 活动清单、假设日志和进度基准<span class="hljs-comment"># C</span><span class="hljs-comment"># 进度 -&gt; 制定进度计划</span><span class="hljs-comment"># 题干关键词“帮助制定进度计划”.</span><span class="hljs-comment"># A - 错误，项目团队任务分配表，即责任分配矩阵，具体到每个成员对每个工作包的职责.</span><span class="hljs-comment"># 而项目团队派工单指的是每个成员在项目中的角色和职责，并未与每个工作包关联起来。</span><span class="hljs-comment"># 责任分配矩阵不是6.5的输入.</span><span class="hljs-comment"># B - 错误，项目章程不是6.5的输入；</span><span class="hljs-comment"># D - 错误，进度基准是6.5的输出，而非输入.</span></code></pre><pre><code class="hljs bash">在规划某项目的进度计划时，项目经理注意到，项目章程中定义了一个不切实际的时间范围.而且某些里程碑预期会发生迟延，项目经理接下来该做什么？A. 遵守项目章程中规定的时间范围，因为这是一个业务需求B. 与有关的相关方开会解决这一偏差C. 调整时间范围，并寻求项目发起人批准D. 将该风险记录在风险日志中，并定期审查<span class="hljs-comment"># B</span><span class="hljs-comment"># 进度 -&gt; 制定进度计划</span><span class="hljs-comment"># 需要在整个项目期间不断修订和维护项目进度模型，确保进度计划一直切实可行.</span><span class="hljs-comment"># 题干关键词“规划项目进度时”</span><span class="hljs-comment"># 在进度基准被批准前，可以进行进度计划的更新，并无需遵循正式的变更流程。</span><span class="hljs-comment"># 在这个时候，可以直接设法解决这一偏差，故选B</span><span class="hljs-comment"># A - 错误，项目章程不是6.5的输入.</span><span class="hljs-comment"># C - 错误，项目经理无权修改项目章程中的时间范围.</span><span class="hljs-comment"># D - 错误，这不是一个风险，而是一个确定会发生里程碑延期的问题.</span></code></pre><pre><code class="hljs bash">一位经验丰富的项目经理加入团队，对一个陷入困境的项目执行健康检查.健康检查报告确定所有任务是同时执行的，并且从项目开始时就不断出现问题.若要提供更好的项目结果，原先的项目经理应该事先做什么？A. 审查详细的项目和阶段可交付成果B. 定义项目的制约因素和限制条件C. 记录已识别的风险和假设条件D. 制定更详细的项目进度计划<span class="hljs-comment"># D</span><span class="hljs-comment"># 进度 -&gt; 制定进度计划</span><span class="hljs-comment"># 题干关键词“所有任务同时执行”.</span><span class="hljs-comment"># 由于所有任务同时执行并不断出现问题，可见原先的项目进度计划并没有创建合适的进度模型，故选D</span><span class="hljs-comment"># 选项ABC在D之后，问“事先做什么”，选离问题时间点最近的那个选项.</span></code></pre><pre><code class="hljs bash">地震已导致项目里程碑的截止日期推迟.项目团队现在面临着在不降低质量的情況下将影响降至最低的压力.若要确保维持质量,项目经理应该做什么?A. 确保团队遵循质量管理计划,同时快速跟进该项目B. 专注于高质量完成高优先级工作包,以确保按时交付C. 减少质量控制点，以更快完成项目D. 通过制定新的质量管理计划来适应这种情况<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P228-6.6.2.6 进度压缩.</span><span class="hljs-comment"># 题干中明确说不降低质量，因此要遵循质量管理计划，</span><span class="hljs-comment"># 同时要解决延迟的问题，因此选择快速跟进.因此A最全面.</span><span class="hljs-comment"># B - 不能只关注高优先级的工作.</span><span class="hljs-comment"># C - 降低了质量.</span><span class="hljs-comment"># D - 要更新质量管理计划要先变更.</span></code></pre><pre><code class="hljs bash">在为一个有预算限制的项目生成状态报告时,项目经理发现该项目比进度计划落后一周.若要将项目拉回正轨，项目经理应该怎么做？A. 重新分配关键路径活动的团队成员B. 向项目发起人要求额外的时间C. 请求项目管理办公室(PMO)增加团队成员D. 执行资源优化<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P215-6.5.2.6进度压缩-赶工.</span><span class="hljs-comment"># 通过增加资源来压缩进度工期.</span><span class="hljs-comment"># C - 团队成员是由职能部门经理提供的.</span><span class="hljs-comment"># B - 要求增加额外的时间，不解决项目进度滞后的问题.</span><span class="hljs-comment"># D - 资源优化包含了资源平衡. 资源平衡会使项目进度延长，不可选.</span></code></pre><pre><code class="hljs bash">在批准一位团队成员的紧急请假请求之前，项目经理需要确保计划的项目活动不会被延迟.项目经理首先应该审查哪份文件？ A. 责任分配矩阵(RAM)B. 资源日历C. 资源分解结构(RBS)D. 项目进度计划<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P222-6.6控制进度.</span><span class="hljs-comment"># 资源日历发生变化，要结合进度基准评估团队成员请假的影响.</span><span class="hljs-comment"># 当然，评估不局限于进度基准.</span><span class="hljs-comment"># ABC - 注意，情景中强调了确保计划的项目活动不会延迟，所以要首先审查项目进度计划.</span></code></pre><pre><code class="hljs bash">在开发阶段结束时, 一名关键开发人员因工作量繁重而想要辞职.但是，该开发人员的专业知识在用户验收测试和调试期问至关重要.项目经理应该怎么做？A. 查看资源日历，以获取资源平衡机会B. 要求人力资源部门替换该开发人员C. 将该问题上报给开发人员的直线经理D. 将该问题上报给项目管理办公室(PMO) <span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P227-6.6.2.4 资源优化.</span><span class="hljs-comment"># 任务分配过于繁重，可以通过资源平衡让资源得以休息.</span><span class="hljs-comment"># 其他选项：工作繁重，是项目进度计划有问题，先从工作规划入手解决问题.</span><span class="hljs-comment"># BCD各种找领导不合适.</span></code></pre><pre><code class="hljs bash">项目经理在规划进度期问注意到，项目所需的技术分析人员数量有限，并且常常不可用，为了弥补这一点，项目经理在进度计划中增加三周时间.项目经理使用的是什么工具或技术来调整进度计划？A. 资源优化B. 进度计划工貝C. 提前量和滞后量D. 关键链法 (CCM)<span class="hljs-comment"># A</span><span class="hljs-comment"># 资源优化 - 资源平衡.</span></code></pre><h4 id="23-敏捷发布规划"><a href="#23-敏捷发布规划" class="headerlink" title="23.敏捷发布规划"></a>23.敏捷发布规划</h4><p>基于项目路线图和产品发展愿景, 提供了高度概括的发布进度时间轴(通常是3到6个月).<br>同时, 敏捷发布规划还确定了发布的迭代或冲刺次数</p><p>keywords : 确定迭代的冲刺次数, 敏捷规划, 基于产品愿景</p><p>迭代 : <u>迭代是有时间限制的</u>.<br>解析, 你想满足客户的愿望, 但将迭代延长几天以完成客户想要的一切, 包括新功能是不行的.<br>迭代是有时间限制的, 因此团队只需要完成为该迭代计划的内容. 将审查附加功能并将在<u><strong>下一次迭代中</strong></u>完成.</p><p><u>冲刺时长在开始冲刺后不会改变</u>; 在理想情况下, 除非冲刺时长被缩短, 否则在整个项目进行时都不会改变.<br>时间盒为冲刺设置一个固定的结束日期, 在此日期之前必须完成一个好的方案, 以此强制结束可能没完没了的工作.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/004.png" alt="004"></p><pre><code class="hljs bash">你正在创建在你的公司部署一个新的ERP软件的时间表. 该公司目前正在进行敏捷转型, 因此决定迭代开发新的ERP.ERP的第一个版本应该在四个月内推出, 你知道另一个全公司范围操作系统升级的项目计划在三个月内推出.随着升级项目影响你的进度, 你应该评估以下哪一项以确定在推出前的迭代次数?A. 发布规划B. 产品路线图C. 迭代待办事项列表D. 项目章程<span class="hljs-comment"># A</span><span class="hljs-comment"># 216章节：6.5.2.8</span><span class="hljs-comment"># 敏捷发布规划基于项目路线图和产品发展愿景，</span><span class="hljs-comment"># 提供了高度概括的发布进度时间轴通常是 3到6个月. </span><span class="hljs-comment"># 同时，敏捷发布规划还确定了发布的迭代或冲刺次数，</span><span class="hljs-comment"># 使产品负责人和团队能够决定需要开发的内容，并基于业务目标、</span><span class="hljs-comment"># 依赖关系和障碍因素确定达到产品放行所需的时间.</span><span class="hljs-comment"># 敏捷发布规划确定了发布迭代次数或冲刺次数.</span></code></pre><pre><code class="hljs bash">你的开发团队正在完成最新的迭代, 并且取得了很大进展. 一大早, 你的客户来电, 要求召开紧急会议讨论产品需求.你很惊讶, 因为他们对项目的进展非常满意, 并且对迄今为止已开发的产品功能感到满意.你与他们会面, 他们问是否可以在此迭代中增加一个特性. 是否可以将迭代延长几天以增加产品特性?A. 看情况B. 不可接受. 迭代是有时间限制的C. 可以, 可以在极少数情况下延长迭代时间D. 如果Scrum主管决定可以的, 就可以<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">你发现按照当前的冲刺节奏, 一周的冲刺时长已不实际. 开发团队无法在一周内创造出成形的产品, 完成测试并批准产品.冲刺速度非常低, 利益相关方非常担忧. 作为Scrum主管, 你应该怎么做?A. 将冲刺时长增加到两周, 开发团队在为期两周的冲刺时长中生产力会更高B. 保持当前的冲刺时长, 较短的冲刺时长减少了从利益相关方收到反馈的时间C. 改变冲刺目标. 既然团队无法实现冲刺目标, 该目标便变得无关紧要D. 取消冲刺并开始一个故事点数较少的新冲刺<span class="hljs-comment"># C</span><span class="hljs-comment"># 冲刺时长在开始冲刺后不会改变；在理想情况下，</span><span class="hljs-comment"># 除非冲刺时长被缩短，否则在整个项目进行时都不会改变.</span><span class="hljs-comment"># 时间盒为冲刺设置一个固定的结束日期，在此日期之前必须完成一个好的方案，</span><span class="hljs-comment"># 以此强制结束可能没完没了的工作.</span></code></pre><pre><code class="hljs bash">敏捷项目负责人希望确保产品愿景在整个项目过程中不会在团队成员的脑海中消失.对于敏捷领导者来说，实现这个目标的最佳方式是什么?A. 在启动会议上提出产品愿景声明B. 将产品愿景声明显示为信息发射源C. 将产品愿景声明邮件给所有项目相关方D. 在每次迭代开始时传达产品愿景<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P216 章节：6.5.2.8</span><span class="hljs-comment"># 敏捷发布规划基于项目路线图和产品发展愿景，提供了高度概括的发布进度时间轴(通常是3到6个月）.</span><span class="hljs-comment"># 同时敏捷发布规划还确定了发布的迭代或冲刺次数，使产品负责人和团队能够决定需要开发的内容，</span><span class="hljs-comment"># 并基于业务目标、依赖关系和障碍因素确定达到产品放行所需的时问. 产品愿景需要不断声明.</span></code></pre><pre><code class="hljs bash">在冲刺评审会议上，其中一位主要利益相关方提出了一项新需求，该需求非常关键，应首先加以考虑. 在这种情况下.你作为产品负责人，接下来要做什么？A. 将需求添加到下一个迭代的待办事项列表中B. 将需求添加到产品待办事项列表中C. 召开一个冲刺计划会议，并与团队讨论这个需求D. 在评审会议上通知团队成员，下一步需要处理这个需求<span class="hljs-comment"># B</span><span class="hljs-comment"># 冲刺评审会议主要有两个主要作用: </span><span class="hljs-comment"># 一是评审本次迭代的潜在产品增量.</span><span class="hljs-comment"># 二是与外部相关方进行交互.</span><span class="hljs-comment"># 当外部相关方在冲刺评审会议中提出了新的需求，PO可以加入待办事项列表中，但是只能由PO来最终决定需求优先级.</span><span class="hljs-comment"># A - 错误，需求是不是下个迭代做，是不是马上做，</span><span class="hljs-comment">#     需要PO根据产品待办事项列表中的所有需求，进行评估和决策，</span><span class="hljs-comment">#     然后确定是否要加入到下一个迭代的待办事项中，而不是在这个冲刺评审会议中直接决定.</span><span class="hljs-comment"># B - 正确，外部相关方提出的任何需求，都是要先加入待办事项列表中.</span><span class="hljs-comment"># C - 错误，与团队讲解和讨论需求，应该在待办事项梳理会议中进行选项.</span><span class="hljs-comment"># D - 错误，需求是否马上做，需要由PO 进行决策，</span><span class="hljs-comment">#     根据产品待办事项列表中的所有需求，进行评估和决策. 而不是直接通知团队成员马上处理.</span></code></pre><pre><code class="hljs bash">你正在与客户进行冲刺评审会议. 以下哪项不是这次会议的目的？A. 确定交付的故事是否满足客户期望B. 确保对交付的每一个故事做出了正确的估计C. 讨论即将到来的冲刺和应完成的故事D. 确定交付的故事是否需要更改<span class="hljs-comment"># B</span><span class="hljs-comment"># 冲刺评审会议的目的是:</span><span class="hljs-comment"># A - 确定交付的故事是否满足客户期望.</span><span class="hljs-comment"># B - 确定交付的故事是否需要更改.</span><span class="hljs-comment"># C - 了解新的需求.</span><span class="hljs-comment"># D - 在会议的末尾专门讨论即将到来的冲刺和应完成的故事.</span></code></pre><pre><code class="hljs bash">敏捷团队里一位正在处理一个非常复杂和极其关键的特性的成员被调到另一个项目工作，因为另一个项目已进入关键期，客户威胁要从公司手上将项目收回.应该做些什么来避免这个问题？A. 安排一个替补成员以结对编程模式工作，与其他正在处理关键特性的成员一起完成任务B. 什么都不做，这只是团队中发生的另一个变化。删除无法完成的特性，在下一次迭代计划中再考虑该特性C. 在冲刺计划期间，团队应该与他们的经理重新确认可以获得哪些资源，以保证有更好的资源规划D. 团队应加班加点来应对当前的困难<span class="hljs-comment"># C</span><span class="hljs-comment"># 团队在每次冲刺规划时都应确认可以使用多少人力资源.</span></code></pre><h4 id="24-储备分析"><a href="#24-储备分析" class="headerlink" title="24.储备分析"></a>24.储备分析</h4><p>应急储备用于 <strong>已知 - 未知风险</strong>.<br>管理储备用于 <strong>未知 - 未知风险</strong>. 管理储备<strong>不包含在成本基准中</strong>, 但<u><strong>包含在项目预算中</strong></u>(项目预算 = 成本基准 + 管理储备)<br>若要使用管理储备, 则需要走正式的变更流程, 将管理储备纳入到基准中.<br><u>不管什么储备</u>, 都是为项目预留的, 项目经理可以使用, 需要正式的变更流程.</p><p>储备分析用于确定项目所需的应急储备量和管理储备.<br>在进行持续时间估算时, 需考虑应急储备, 以应对进度方面的不确定性.<br>keywords : 剩余资金应对风险, 风险变化, 剩余储备时间.</p><p><strong>估算活动持续时间</strong>:</p><p>输入:<br>活动:</p><ul><li>活动属性</li><li>活动清单</li></ul><p>资源:</p><ul><li>项目团队派工单</li><li>资源分解结构</li><li>资源日历</li><li>资源需求</li></ul><p>风险:</p><ul><li>风险登记册</li></ul><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/005.png" alt="005"></p><pre><code class="hljs bash">项目经理确定项目已超出预算, 并将需要管理储备来完成项目, 为完成项目, 项目经理应该怎么做?A. 获得项目发起人批准使用管理储备B. 修改成本基准并使用管理储备C. 获得项目发起人的批准, 包含额外资金D. 执行实施整体变更控制过程, 并修改成本基准<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">离完成分配的任务只剩30天时, 一名项目团队成员离开公司, 可惜的是, 没有可用的替代资源. 项目经理在项目进度计划中包含一个应急储备金. 为了计算剩余的应急储备金, 项目经理应该使用什么技术?A. 风险审计B. 趋势分析C. 储备分析D. 技术绩效衡量<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">一个新项目的项目经理获得一份活动清单以及一份公司已经执行过的类似项目的资源估算, 为了估算活动持续时间, 项目经理首先必须制定哪一个过程?A. 识别风险B. 估算活动持续时间C. 排列活动顺序D. 控制进度<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">一个大型项目涉及许多专业团队，在规划期间，项目经理需要团队负责人提供工作量估算以及与任务相关的最终成本.项目经理应该要求团队负责人提供什么？A. 单点估算，因为它们更准确并且更容易规划预算B. 对没有发生风险的任务进行一次估算，对与潜在风险相关的额外成本进行一次估算C. 基于最佳案例场景分析的单点估算D. 估算除风险经理处理之外的风险<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P246章节：7.2.3.1应急储备：</span><span class="hljs-comment"># 成本估算包括对完成项目工作可能需要的成本、</span><span class="hljs-comment"># 应对已识别风险的应急储备，以及应对计划外工作的管理储备的量化估算.</span><span class="hljs-comment"># 应急储备用于己知风险管理储备用于未知风险.</span></code></pre><pre><code class="hljs bash">某个特定采购商品的原料成本预计增加发生，项目经理首先应该怎么做？A. 通知发起人B. 执行储备分析C. 执行实施整体变更控制过程D. 研究偏差的原因<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P456-11.7.2.1数据分析-储备分析，</span><span class="hljs-comment"># 储备分析是指在项目的任一时点比较剩余应急储备与剩余风险量，从而确定剩余储备是否仍然合理.</span><span class="hljs-comment"># 可以用各种图形(如燃尽图)来显示应急储备的消耗情况.</span><span class="hljs-comment"># AC - 通过储备分析如果有必要实施风险应对的话，提交变更请求对基准进行更新，同时通知相关方.</span><span class="hljs-comment"># D  - 偏差分析通常用于分析在临界值区间是否有必要采取纠正或预防措施.</span></code></pre><pre><code class="hljs bash">项目经理正在执行一个历时数年的大型跨国项目,除了一个地区外,项目经理确定所在地区的成本偏差(CV)均低于10%.若要避免这个问题,项目经理应该事先做什么?A. 考虑所有地区的汇率和通货膨胀率B. 将汇率和通货膨胀率记录在风险登记册中C. 为该地区包含应急费用D. 请求额外的资源<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P261-7.2.2.6 储备分析.</span><span class="hljs-comment"># 题干的意思是说，10%以内的偏差是正常的，但是有一个国家大于了10%，</span><span class="hljs-comment"># 因此推断是当时这个国家的汇率或通货膨胀率有问题，因此应该把这个风险登记在风险登记册中.</span><span class="hljs-comment"># A - 数年的项目会考虑到正常的通货膨胀率.</span><span class="hljs-comment"># C - 在B的后面做.</span><span class="hljs-comment"># D - 没作用.</span></code></pre><pre><code class="hljs bash">由于突然和极端的汇率波动，进口项目设备的成本增加了27%.项目经理应该如何减轻这个成本超支问题？A. 使用变更控制程序来吸收额外成本B. 使用管理储备支付额外成本C. 修改成本基准以反映当前状况D. 采用应急储备补贴成本超支<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P252-7.3.2.3数据分析.</span><span class="hljs-comment"># 突然和极端的汇率波动属于未知-未知风险，需要使用管理储备.</span><span class="hljs-comment"># 管理储备是为了管理控制的目的而特别留出的项目预算，</span><span class="hljs-comment"># 用来应对项目范围中不可预见的工作，目的是用来应对会影响项目的&quot;未知一末知&quot;风险.</span><span class="hljs-comment"># D - 应急储备，针对的是&quot;已知-未知&quot;风险.</span><span class="hljs-comment">#     一旦动用管理储备，成本基准随之调整.</span><span class="hljs-comment"># A - 选项吸收额外成本描述有误.</span><span class="hljs-comment"># C - 选项的描述有误，动用管理储备要经过CCB的审批.</span></code></pre><h4 id="25-三点估算"><a href="#25-三点估算" class="headerlink" title="25.三点估算"></a>25.三点估算</h4><p>从未做过的项目, 意味着存在着较大的不确定性和风险, 这种时候通过<u><strong>三点估算</strong></u>来估算成本.</p><p>三角分布 : cE = (cO + cM + cP) / 3</p><p>贝塔分布(PERT加权分析法) : cE = (cO + 4 * cM + cP) / 6,  <strong>标准差</strong>: (P - O) / 6</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/024.png" alt="024"></p><p>keywords : 三个数字, PERT, 最小最大最可能</p><pre><code class="hljs bash">项目经理估算开发新产品的价格. 在最可能情景中, 成本将会是10,000美元; 在最好情况下, 成本将会是9,000美元; 在最坏情况下, 成本将会是17,000美元; 如果利用PERT加权分析法, 项目的预期成本将会是多少?A. 9,000美元B. 10,000美元C. 11,000美元D. 12,000美元<span class="hljs-comment"># C</span>(9 + 4 * 10 + 17) / 6 = 11</code></pre><pre><code class="hljs bash">项目经理正在估算其组织之前从未从事过的一类项目的成本. 应该使用什么方法来估算成本?A. 参数估算B. 自下而上估算C. 自上而下估算D. 三点估算<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">将旧系统的数据迁移到新系统, 乐观估计是4天, 最可能估计是7天, 悲观估计是16天. 团队采用贝塔分布计算期望值和标准差.以下结果正确的是?A. 期望值是9天, 标准差是2天B. 期望值是8天, 标准差是1天C. 期望值是7天, 标准差是2天D. 期望值是8天, 标准差是2天<span class="hljs-comment"># D</span><span class="hljs-comment"># 期望值 : (O + 4M + P) / 6 = (4 + 4*7 + 16) / 6 = 8</span><span class="hljs-comment"># 标准差 : (P - O) / 6 = (16 - 4) / 6 = 2</span></code></pre><pre><code class="hljs bash">一家组织正在一个新兴市场启动一个项目.这个市场的法规将在项目的生命周期中快速而持续地发生变化,项目发起人要求项目经理提供预算估测项目经理应使用什么工具或技术来提供预算预测？A. 鱼骨图B. 三点估算C. 备选方案分析D. 蒙特卡洛分析<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P244- 7.2.2.5三点估算.</span><span class="hljs-comment"># 本题考查的是估算的方法，只有B三点估算是成本估算的方法.</span><span class="hljs-comment"># 三点估算主要针对风险的估算，题干中也提到了各种不确定性.</span><span class="hljs-comment"># A  - 鱼骨即是根本. 原因分析，是解决问题用的；</span><span class="hljs-comment"># CD - 针对风险管理的工具也不对.</span></code></pre><pre><code class="hljs bash">一个新项目完工所需成本的不确定性很高.项目经理应该用什么方法来确定预期成本?A. 类比估算B. 统计技术估算C. 参数估算D. 三点估算<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P244-7.2.2.5三点估算.</span><span class="hljs-comment"># 该新项目所需成本不确定性很高，而三点估算适用于面临不确定性与风险，</span><span class="hljs-comment"># 通过三种估算值来确定活动成本的近似区间.</span></code></pre><pre><code class="hljs bash">你最近被分配到一个从未合作过的 Scrum 团队担任产品负责人.一周后，你的公司的一位经理与你联系，并请你确认该项目将在3月6日之前完成.他说他查看了你的团队给出的预估完成时间，需要你们承诺项目在该确切日期完成.在这种情况下出现了什么问题？A. 经理应该去找Scrum主管，而不是你B. 许多经理将预估时间与承诺时间混淆。一旦团队预估了一个时间，就要求他们承诺实现C. 你最近才被分配到该项目，因此还无法做出任何承诺D. 敏捷团队不承诺在特定日期完成项目<span class="hljs-comment"># B</span><span class="hljs-comment"># 估算只是一种可能性，</span><span class="hljs-comment"># 不能对可能性作出承诺只能对具体日期作出承诺，</span><span class="hljs-comment"># 通常要求(或告知)团队承诺的日期是他们指定的概率小于100%的日期.</span></code></pre><h4 id="26-质量成本"><a href="#26-质量成本" class="headerlink" title="26.质量成本"></a>26.质量成本</h4><ul><li><p>一致性成本</p><ul><li>预防成本(打造某种高质量产品) : 培训; 文件过程; 设备; 完成时间</li><li>评估成本(评估质量) : 测试; 破坏性试验损失; 检查<br>破坏性测试, 归于评估成本下, 与其他测试和检查一起, 它有助于评估产品质量.<br><u><strong>检查, 测试属于评价成本.</strong></u></li></ul></li><li><p>不一致成本</p><ul><li><p>内部失败成本(项目中发现的失败) : 返工; 报废</p><p>质量成本: 因产品、可交付成果或服务与相关方需求或期望不一致而导致的相关成本成为<u><strong>失败成本</strong></u>.<br>失败成本分为内部与外部，内部失败成本是<strong>项目过程中发现的失败成本</strong>，<strong>内部返工</strong>成本属于<u><strong>内部失败成本</strong></u>.</p></li><li><p>外部失败成本(客户发现的成本) : 债务; 保修工作; 失去业务<br>正在执行保修工作以纠正制造缺陷. 这些缺陷<u><strong>由外部客户识别</strong></u>, 成本称为外部故障成本.<br>由于产品<u>不符合质量要求</u>, 因此这些成本也称为非一致性成本.</p></li></ul></li></ul><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/006.png" alt="006"></p><pre><code class="hljs bash">客户识别到一个新实践产品的性能问题, 项目经理应使用哪一个质量成本(COQ)类别来估算这项成本?A. 预防成本B. 外部失败成本C. 评估成本D. 内部失败成本<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">Cindy曾在制造业担任项目经理. 这个项目的目的是生产用于计算机的高质量半导体.由于半导体是用硅片生产的, 她与一家公司签约, 为该项目持续提供硅片.由于未知原因, 承包商向该项目提供了低质量的晶片, 损害了半导体的电气性能.由于受到计算机部门的投诉, Cindy现在有义务纠正制造缺陷, 以避免将来承担责任. 在这种情况下, Cindy产生的成本为: A. 外部失败成本或非一致性成本B. 预防成本或一致性成本C. 评估成本或非一致性成本D. 内部故障成本或一致性成本<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">一个项目涉及高速硬盘的开发. 作为测试的一部分, 硬盘在高速和高温下连续运行.在测试结束时, 硬盘被销毁, 无法使用. 此类测试的成本通常分为: A. 评估成本B. 预防成本C. 非一致性成本D. 内部失败成本<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">为了确保满足质量标准, 项目经理聘请外部资源来检查可交付成果的质量.这种检查的成本可以分为哪种成本类型?A. 预防成本B. 评价成本C. 外部成本D. 失败成本<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">在向客户移交之前,对项目可交付成果的一部分进行核实.负责质量南计的团队成员在其中项可交付成果中找到一些有缺陷的部分,他们将其发回给装配线团队返工,这将增加成本。这种质量成本(COQ)如何分类?A. 内部失败成本B. 外部失败成本C. 预防成本D. 评估成本<span class="hljs-comment"># A</span><span class="hljs-comment"># B - 外部失败成本是客户发现的失败</span><span class="hljs-comment"># C - 预防成本是预防特定项目的产品, 可交付成果或服务质量低劣所带来的相关成本, 比如培训</span><span class="hljs-comment"># D - 评估成本是评估, 测量, 审计和测试特定项目, 比如测试</span></code></pre><pre><code class="hljs bash">一个项目经理正在为一个建造定制工业冲压机床的项目制定质量管理计划.这台机器将由供应商生产的部件组装而成.为了确定质量成本，项目经理检查一致性和非一致性的成本.项目经理应该审查下列哪一项以确定一致性的成本?(选择四个)A. 因零件或工艺缺陷而引起的保修费用B. 与项目团队培训相关的成本C. 组装前与机器单个部件测试有关的费用D. 因破坏性试验而引起的损失E. 由于产品故障而导致业务损失的经济价值F. 在生产过程中与部件检查相关的成本<span class="hljs-comment"># BCDF</span><span class="hljs-comment"># 《PMBOK》第6版348页，9.5.2.1-质量成本</span><span class="hljs-comment"># 一致性成本的核心就是花钱规避失败.</span></code></pre><pre><code class="hljs bash">项目经理建议为一个软件开发团队提供单元测试技术培训，该技术可以在编码阶段应用.另外，项目经理建议在软件开发期间采购一台服务器来运行测试用例.这个例子是什么？A. 质量管理预算B. 预防成本C. 评价成本D. 软件测试预算<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P282 章节：8.1.2.3质量成本：</span><span class="hljs-comment"># 预防成本: 预防特定项目的产品质量低劣所带来的相关成本.</span><span class="hljs-comment"># 评估成本: 评估、测量、审计和测试特定项目的产品所带来的相关成本.</span><span class="hljs-comment"># 失败成本(内部/外部). 因产品与相关方需求不一致而导致的相关成本.</span><span class="hljs-comment"># 测试本身是评估成本，但是购买设备是预防成本.</span></code></pre><pre><code class="hljs bash">项目发起人希望减少质量保证时间来缩短进度，项目经理应该怎么做？A. 减少质量保证时间B. 执行质量成本（CoQ）分析C. 告诉发起人项目管理计划中关于质量保证（QA）的部分D. 与质量保证团队一起进行时间估算<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P282 章节：8.1.2.3 质量成本.</span><span class="hljs-comment"># 1) 预防成本. 预防特定项目的产品、可交付成果或服务质量低劣所带来的相关成本.</span><span class="hljs-comment"># 2) 评估成本. 评估、测量、审计和测试特定项目的产品、可交付成果或服务所带来的相关成本.</span><span class="hljs-comment"># 3) 失败成本（内部/外部）. 因产品、可交付成果或服务与相关方需求或期望不一致而导致的相关成本.</span><span class="hljs-comment"># 减少质量保证时间，需要进行质量成本分析.</span></code></pre><pre><code class="hljs bash">公司推出一项新产品，预估实施质量控制系统将花费100万美元，预期的故障和潜在维修成本估计为50万美元.项目经理应该提出什么建议？A. 在做出决定之前考虑声誉损失成本B. 实施质量控制系统，因为这是质量成本(COQ)C. 不实施质量控制系统，因为非一致性成本较低D. 实施质量控制系统，因为质量控制是最佳实践<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P282-8.1.2.3数据分析-质量成本.</span><span class="hljs-comment"># 题干中没有考虑到声誉损失等外部失败成本，</span><span class="hljs-comment"># 因此项目经理应向公司提出需考虑外部失败成本的建议.</span><span class="hljs-comment"># B  - 缺乏逻辑关系，排除.</span><span class="hljs-comment"># CD - 是否实施，要根据综合考虑的结果后决策.</span></code></pre><h4 id="27-成本效益分析-质量"><a href="#27-成本效益分析-质量" class="headerlink" title="27.成本效益分析(质量)"></a>27.成本效益分析(质量)</h4><p>成本效益分析是用来估算备选方案优势和劣势的财务分析工具, 以确定可以创造最佳效益的备选方案.</p><p>keywords : <strong><u>相关方不想投资质量</u></strong>, 质量经理要求增加质量调试</p><pre><code class="hljs bash">在项目规划阶段, 质量保证经理建议实现三重测试环境以确保产品质量, 项目经理确定这会增加成本, 而且开发和认证环境足以保证质量.项目经理应使用什么来影响质量保证经理?A. 质量成本(COQ)B. 实施设计(DOE)C. 成本效益分析D. 质量标杆对照<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">在项目执行期间，由于行业趋势下滑和产品价格下降，客户重新协商定价，这导致项目预算减少，项目经理确定必须大大改造类似项目中遵循的业务流程才能使项目取得成功.项目经理应该做些什么来确定改进的领域？A. 检查风险报告B. 审查经验教训C. 使用精益六西格玛方法D. 执行成本效益分析<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P296-8.2.2.8质量改进方法-六西格玛.</span><span class="hljs-comment"># 精益六西格玛是最常用于分析和评估改进机会的质量改进工具.</span><span class="hljs-comment"># 它要解决的问题不仅是控制一个过程的产品一次通过率，还要优化整个生产流程，</span><span class="hljs-comment"># 简化某些动作，缩短生产提前期.</span><span class="hljs-comment"># 项目经理要改造类似项目中遵循的业务流程才能使项目取得成功，可使用精益六西格玛方法.</span><span class="hljs-comment"># A - 属于风险管理的行目档案.</span><span class="hljs-comment"># B - 通常用于借鉴，情景聚焦在&quot;如何确定&quot;.</span><span class="hljs-comment"># D - 成本效益分析针对投入成本和质量水平之间的关系.</span></code></pre><pre><code class="hljs bash">在创建质量管理计划时，项目经理确定预防和质量评估的成本非常高，然而，增加预算不会減少公司未来的故障维修费用.项目经理应该怎么做？A. 修改预算以增加预防和质量评估活动B. 保持当前的质量活动C. 修改预算以解决故障成本问题D. 变更制造过程以减少缺陷<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P282-8.1.2.3数据分析-成本效益分析.</span><span class="hljs-comment"># 成本效益分析是用来估算备选方案优势和劣势的财务分析工具，</span><span class="hljs-comment"># 以确定可以创造最佳效益的备选方案.</span><span class="hljs-comment"># AC - 从题干陈述的情景看，再多的投入并不能带来质量水平的显著提升，所以排除AC.</span><span class="hljs-comment"># D  - 生产工艺流程的改造，也需要投入成本.</span></code></pre><h4 id="28-审计"><a href="#28-审计" class="headerlink" title="28.审计"></a>28.审计</h4><p>审计是用于确定项目活动是否遵循了组织和项目的政策, 过程与程序的一种结构化且独立的过程.</p><p>keywords : 过程, 有效性, 降低质量成本, 纠正措施</p><p>采购审计 : 是<u><strong>控制采购</strong></u>过程中的一个工具, 进行采购审计, 以确定值得承认的成功和失败. 使用此工具时, 将彻底检查所有采购过程, 并检查相应的文档是否出现问题.</p><pre><code class="hljs bash">项目已完成并获得客户批准, IT部门计划对项目进行未规划的审计. 项目经理应该怎么做?A. 请求审查IT部门的质量保证政策B. 告知项目发起人IT审计不是质量管理计划的一部分C. 审查公司政策并通知涉及项目的相关方D. 允许审计, 因为可以为项目提供更多价值<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">迪娜是一个硬件项目的项目经理, 正在对采购过程进行结构化的审查. 她想检查从计划采购管理过程到控制采购过程的每一份文件,以确定失败之处. 迪娜应该用什么工具?A. 控制采购过程中的采购审计B. 实施采购过程中的绩效报告C. 控制采购过程中的谈判结算D. 实施采购过程中采购审计<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">项目经理希望在新项目中使用一名特定供应商。该供应商目前正在为项目经理管理的另一个项目工作。项目经理希望在开始为新项目工作之前，先完成当前项目。在供应商开始为新项目工作之前，项目经理应该做什么?A. 与供应商一起评审合同协议B. 更新采购文档C. 执行采购审计D. 要求供应商完成所有现有工作<span class="hljs-comment"># C</span><span class="hljs-comment"># 12.3.2.5-采购审计。</span><span class="hljs-comment"># 审计是对采购过程的结构化审查.</span><span class="hljs-comment"># 应该在采购合同中明确规定与审计有关的权利和义务.</span></code></pre><h4 id="29-项目资源管理"><a href="#29-项目资源管理" class="headerlink" title="29.项目资源管理"></a>29.项目资源管理</h4><p>建设团队提升项目绩效</p><p>管理团队优化项目绩效</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/007.png" alt="007"></p><pre><code class="hljs bash">一个项目正在多个国家执行, 虚拟团队中共有七名区域项目经理. 其中一名区域项目经理收到一份报告, 显示他们团队的绩效低于平均水平.项目经理应使用什么工具或技术来提高团队绩效和项目绩效?A. 团队建设活动B. 质量审计C. 偏差分析D. 过程分析<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P338-9.4 建设团队.</span><span class="hljs-comment"># 团队建设的主要作用，就是通过团队建设提高团队绩效，进而提高项目绩效.</span><span class="hljs-comment"># 题目直接问了提高团队绩效和项目绩效，使9.4建设团队的工具最匹配.</span><span class="hljs-comment"># BCD - 都不是建设团队的工具.</span></code></pre><pre><code class="hljs bash">项目经理注意到有一个部门完成每个项目活动花费的时间都比计划长.到目前为止，这些活动/工作包都不在关键路径上，也没有影响到已经发生的关键链计划编制.项目经理担心关键链会出问题，因为接下来的5个关键路径活动中有4个要由该部门完成.项目经理打了3个电话，最后总算能和部门经理说上话了，项目经理想知道发生了什么.对话进行得很慢，因为两个人说的是不一样的母语，他们试着用法语一共同语言一讲话为了使谈话更容易，项目经理总是让部门经理再说一遍. 部门经理说，他的下属遵照一项公司政策，该政策要求2级测试.谈话中，部门经理还作出一些评论，这让项目经理相信该政策会增加工作量.这已经是该项目经理第4次听到这样的评论了. 他该怎么办？A. 编制更好的沟通管理计划，要求该项目使用一种语言，并安排翻译随时候命B. 联系部门中其他的能更流利的说项目经理母语的成员，来确认部门经理的意见C. 确认接下来的活动是否要重新估算D. 通过不断的改进存在问题的政策，提高执行机构的效率<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK Gth 页码：P292 章节：8.2.2.2过程分析</span><span class="hljs-comment"># 可以识别过程改进机会，同时检查在过程期间遇到的问题、制约因素，以及非增值活动.</span><span class="hljs-comment"># 排除法政策效率低下会导致很多非增值活动，需要进行过程改进.</span></code></pre><h4 id="30-团队章程"><a href="#30-团队章程" class="headerlink" title="30.团队章程"></a>30.团队章程</h4><p>团队价值观; 沟通指南; 决策标准和过程冲突处理过程; 会议指南; 团队共识.</p><p>制定项目章程: 项目章程中记录了对项目<strong>可交付成果的约定</strong>、<strong>关键里程碑、角色和职责</strong>.</p><p>keywords : 纪律问题; 不认真开会; 团队的最佳实践</p><p>团队章程:<br>团队章程是为团队创建团队价值观、共识和工作指南的文件. 团队章程可能包括（但不限于）：</p><ul><li><strong>团队价值观</strong>；</li><li>沟通指南；</li><li>决策标准和过程；</li><li><strong>冲突处理过程</strong>；</li><li><strong>会议指南</strong>；</li><li>团队共识.</li></ul><pre><code class="hljs bash">在团队会议期间, 项目经理不能保持项目团队的注意力, 团队成员不断查看电子邮件, 并讨论不相关的话题, 发生这种问题的原因是什么?A. 项目经理没有准备会议议程B. 项目经理没有沟通基本原则(团队原则)C. 项目经理处于一个弱矩阵型组织D. 项目经理的领导力不足<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P319 章节：9.1.3.2 团队章程</span><span class="hljs-comment"># (1) 团队价值观;</span><span class="hljs-comment"># (2) 沟通指南;</span><span class="hljs-comment"># (3) 决策标准和过程;</span><span class="hljs-comment"># (4) 冲突处理过程;</span><span class="hljs-comment"># (5) 会议指南;</span><span class="hljs-comment"># (6) 团队共识</span><span class="hljs-comment"># 需要有团队的基本规则，来确定团队的纪律、价值观和一致性.</span></code></pre><pre><code class="hljs bash">一位项目经理正在领导一个项目，该项目最近从预测阶段过渡到敏捷阶段，并将使用Scrumban.当开发团队审查看板面板时，他们开始争论谁将完成所需的用户描述.在僵局中，项目经理开始将用户描述分配给特定的团队成员. 项目经理本可以有什么不同做法？A. 为项目的敏捷阶段更新了团队章程B. 为不同阶段设计不同的项目管理方法C. 使用极限编程框架，而不是Scrumban方法D. 不可能采取不同的行动，因为冲突是不可避免的<span class="hljs-comment"># A</span><span class="hljs-comment"># 《敏捷实践指南》页码：P50章节：5.1</span><span class="hljs-comment"># 团队价值观，例如可持续开发速度和核心工作时间；</span><span class="hljs-comment"># 工作协议，例如“就绪”如何定义“完成”如何定义；</span><span class="hljs-comment"># 考虑时间盒；或使用工作过程限制；基本规则，</span><span class="hljs-comment"># 例如有关-人在会议上发言的规定；团队规范.</span><span class="hljs-comment"># 例如团队如何对待会议时间. </span><span class="hljs-comment"># 团队章程，即团队的社会契约，规定团队成员间彼此互动的方式.</span></code></pre><pre><code class="hljs bash">一个国际项目的团队由来自不同的背景，年龄和兴趣的个人组成.项目一开始后就发现他们末能齐心协力一起合作.项目经理如何才能促进更好的团队合作？A. 举行正式的团队会议来讨论团队合作的重要性B. 与团队开会以解释基本规则，共同愿景和价值观，并更好的理解团队成员的优先级C. 请人力资源部门对团队进行多样性方面的教育和培训D. 让团队自行建设，然后在下一次绩效评估会议上处理问题<span class="hljs-comment"># B</span><span class="hljs-comment"># 解析：PMBOK(6)P319-9.1.3.2 团队章程.</span><span class="hljs-comment"># 团队的差异较大，使用团队章程能够明确团队规划与团队价值观，</span><span class="hljs-comment"># B  - 就是团队章程.</span><span class="hljs-comment"># AC - 这种活动的成果都可以纳入团队章程.</span><span class="hljs-comment"># D  - 自行建设不对，项目经理要承担团队建设.</span></code></pre><pre><code class="hljs bash">一名新项目经理与由高级技术人员组成的项目团体工作，在制定项目治理中，新项目经理将有来自高级技术人员的阻力.项目经理下一步该怎么做？A. 为项目团队成员建立角色和职责B. 制定并同意项目人员配备方案C. 制定工作分解结构D. 制定并同意团队运行规则<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P319 章节：9.1.3.2 团队章程.</span><span class="hljs-comment"># 1) 团队价值观；</span><span class="hljs-comment"># 2) 沟通指南；</span><span class="hljs-comment"># 3) 决策标准和过程；</span><span class="hljs-comment"># 4) 冲突处理过程；</span><span class="hljs-comment"># 5) 会议指南；</span><span class="hljs-comment"># 6) 团队共识.</span><span class="hljs-comment"># 需要有团队的基本规则，来确定团队的纪律、价值观和一致性.</span></code></pre><pre><code class="hljs bash">一位具有独特和关键技能的主题专家(SME)不愿接受项目经理的指令，项目经理首先应该怎么做？A. 与该主题专家的直线经理开会以解决该冲突B. 与该主题专家一起审查项目管理计划以核实所有团队角色C. 要求项目发起人替换该主题专家D. 更新资源管理计划和风险登记册<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6P319-9.1.3.2团队章程.</span><span class="hljs-comment"># 团队章程是为团队创建团队价值观、共识和工作指南的文件，</span><span class="hljs-comment"># 其中包括团队价值观、沟通指南、冲突处理过程、团队共识等.</span><span class="hljs-comment"># AC - 首先尝试在团队内部解决问题，如果无法解决，再选择寻求职能部门经理介入或上报.</span><span class="hljs-comment"># D  - 问题解决以后，看是否还存在着不确定性，或者是否对资源管理策路进行调整，</span><span class="hljs-comment">#      再判断是否需要更新资源计划和风险登记册.</span></code></pre><pre><code class="hljs bash">项目经理感觉到项目会议的成效很差，与会者都没做好准备，无法遵照会议议程. 项目经理应该怎么做来改变项目团队的态度？A. 首先开始改变个人行为，更好地为下一个会议做准备B. 填写一份关于会议文化和会议规矩的备忘录C. 在下一次会议开始时讨论做好会议准备的重要性D. 开展较少但更为重要的会议<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P319 章节：9.1.3.2 团队章程.</span><span class="hljs-comment"># 团队章程是为团队创建团队价值观、共识和工作指南的文件.</span><span class="hljs-comment"># 团队章程可能包括(但不限干):</span><span class="hljs-comment"># 1) 团队价值观;</span><span class="hljs-comment"># 2) 沟通指南;</span><span class="hljs-comment"># 3) 决策标准和过程;</span><span class="hljs-comment"># 4) 冲突处理过程;</span><span class="hljs-comment"># 5) 会议指南；</span><span class="hljs-comment"># 团队共识, 团队章程中有会议指南相关的内容.</span></code></pre><pre><code class="hljs bash">项目团队成员在地理位置、文化以及工作实践方面存在多样化，若要确保团队遵从标准方法，项目经理可以怎么做？A. 采用由所有团队成员都同意的最佳实践B. 在风险登记册中记录并接受相关风险，但允许有充足的项目应急C. 使用帕累托图确定在哪里可以实现共性D. 在制定项目管理计划之前要求团队输入<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P319 章节：9.1.3.2 团队章程.</span><span class="hljs-comment"># (1) 团队价值观；</span><span class="hljs-comment"># (2) 沟通指南；</span><span class="hljs-comment"># (3) 决策标准和过程；</span><span class="hljs-comment"># (4) 冲突处理过程；</span><span class="hljs-comment"># (5) 会议指南；</span><span class="hljs-comment"># (6) 团队共识. </span><span class="hljs-comment"># 所有成员都同意的最佳实践，属于团队章程.</span></code></pre><h4 id="31-谈判"><a href="#31-谈判" class="headerlink" title="31.谈判"></a>31.谈判</h4><p>在资源分配谈判中, 项目管理团队影响他人的能力很重要, 如同在组织中的政治能力一样重要</p><p>keywords : 确认资源可用性, 获取资源, 资源被人调走</p><pre><code class="hljs bash">项目需要一名熟练的工程师来执行某个特定任务, 但由于工作量大, 该工程师不能参与这个项目. 项目经理下一步应该怎么做?A. 修改进度计划, 以适应该资源B. 与职能经理谈判该资源的参与C. 培训项目团队去执行需要的活动D. 向发起人请求更多时间去寻找另一名资源执行该任务<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">对于一个具有战略意义的重要客户资源，项目经理在确认矩阵组织中资源可用性时，发现某个关键资源已调往一个内部项目，项目经理首先应该采取何种行动？A. 与项目赞助人协商推迟项目B. 要求项目管理办公室将资源重新调回项目C. 更新风险登记薄D. 与职能经理协商将资源重新调回项目<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P332 章节：9.3.2.2谈判.</span><span class="hljs-comment"># 职能经理. 确保项目在要求的时限内获得最佳资源，直到完成职责.</span><span class="hljs-comment"># 执行组织中的其他项目管理团队. 合理分配稀缺或特殊资源, 外部组织和供应商. </span><span class="hljs-comment"># 提供合适的、稀缺的、特殊的、合格的、经认证的或其他特殊的团队或实物资源.</span><span class="hljs-comment"># 特别需要注意与外部谈判有关的政策、惯例、流程、指南、法律及其他标准.</span><span class="hljs-comment"># 获取资源，优先谈判.</span></code></pre><h4 id="32-建设团队的工具"><a href="#32-建设团队的工具" class="headerlink" title="32.建设团队的工具"></a>32.建设团队的工具</h4><p>建设团队: 是提高工作能力, 促进团队成员互动, 改装团队整体氛围, 以<u><strong>提高项目绩效</strong></u>的过程.</p><ul><li><p>集中办公 : 作战室<br>提升团队绩效最直接, 有效的方法就是<u>集中办公</u>. 团队成员在一起工作, 除了可以提升氛围, 方便沟通, 也能加速磨合, 快速度过塔克曼阶梯理论中的”形成-磨合-规范”阶段, 到达绩效水平最高的表现阶段.</p></li><li><p>虚拟团队 : 适用于不同工作地点的项目团队成员<br>在虚拟团队的环境中, <u><strong>沟通规划</strong></u>变得日益重要. 可能需要花更多时间, 来设定明确的期望, 促进沟通, 制定冲突解决方法, 召集人员参与决策, 理解文化差异, 以及共享成功喜悦.</p></li><li><p>沟通技术 : 解决集中办公和虚拟团队的信息交互, <u><strong>沟通技术</strong></u>至关重要.<br>书上提到的, 拟传递的信息是否属于敏感或机密信息? 如果是, 可以需要采取合理的安全措施.<br>为员工制定社交媒体政策, 以确保行为适当, 信息安全和知识产权保护. 直接使用社交媒体传递项目信息, 有可能触及信息安全政策的问题.<br>因此, 先审查<u><strong>安全政策</strong></u>.</p></li><li><p>团队建设 : 工作内 -&gt; 共同完成WBS, 项目计划; 工作外 -&gt; 举办活动.<br>团队建设的主要作用, 就是通过团队建设提高<u><strong>团队绩效</strong></u>, 进而提高<u><strong>项目绩效</strong></u>.</p></li><li><p>认可与奖励 : 只有满足成员重要需求的奖励才是有效的; 应在项目生命周期中考虑奖励, 而不是完成后.</p></li><li><p>培训 : 对技能的培训; 培训可以做为计划的一部分, 包含在进度与成本计划中.</p><p>培训包括旨在提高项目团队成员能力的全部活动, 可以是正式或非正式的.</p><p>一个新人加入进来了, 需要进行团队建设, <u><strong>培训是团队建设的工具</strong></u>, 确保新人快速上手工作.</p><ul><li>计划培训 : 如人力资源计划所述, 可以包括在线培训; <u><strong>课程</strong></u>; 工作等.</li><li>计划外培训 : 谈话; 观察; <strong>项目绩效评估</strong></li></ul><p>项目经理应该按<strong>资源管理计划</strong>中的安排来实施预定的培训, 也应该根据管理项目团队过程中的观察, 交谈和项目评估的结果, 来开展必要的<strong>计划外培训</strong>.</p><p>培训: 项目经理应该按<strong>资源管理计划中</strong>的安排来实施预定的培训，也应该根据管理项目团队过程中的观察、交谈和项目，有效评估的结果，来开展必要的计划外培训.</p></li></ul><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/008.png" alt="008"></p><p>建设团队，这个考点比较多，考试涉及场景：<br>＞团人成员反对项目经理（震荡）<br>＞项目进行过程中来了几个新人不配合（团队建设）<br>＞团队人感不强离职率高（团队建设、集中办公）<br>＞不同工作地点（虚拟团队与沟通技术）<br>＞项目绩效很好因队成员很累（认可与奖励）<br>＞塔克曼阶梯理论（重点区分规范与成熟）<br>＞因人成员技能不足（培训）等.</p><p><u><strong>场景1-团队成员问题管理场景</strong></u></p><ol><li><p>团队成员请假、辞职问题的选择（绩效差）</p><pre><code>  - 团队成员请假、辞职首先是个问题，更新、        - 查看资源管理计划即可;        - 重要的资源辞职、请假，影响严重时，视为风险，按风险管理              - 可按风险识别处理（从对项目进度、结果的影响来看），记录、分析影响；              - 也可按风险发生处理（从人力资源，资源可用性来看），记录、实施应对措施；</code></pre></li><li><p>团队成员出现冲突<br>a、和相关冲突当事人面对、开会、了解原因，是解决团队冲突的首选；</p><pre><code>  其次是采取措施来影响团队，以及制定策略彻底解决冲突；注意，&lt;u&gt;**一定要面对面**&lt;/u&gt;.</code></pre><p>b、冲突发生，题目问如何预防，选：1、团队章程（基本规则）2、团建<br>C、冲突发生，题目问如何应对，选冲突解决策略、除团队成员之间发生正面冲突、误解之外，</p><pre><code>  团队成员有挫折感、消极、士气低落等考试中都可以按冲突问题来处理；  相关方不配合，故意刁难，也可以按&lt;u&gt;**冲突问题**&lt;/u&gt;来处理.</code></pre></li></ol><pre><code class="hljs bash">在即将到来的敏捷项目中, 执行组织雇佣了来自不同国家但使用相同语言的开发人员. 团队将被安排在同一地点, 并且项目经理理解在文化多样性的情况下,提供一个有效沟通和协作的环境将是项目成功的一个重要因素.对项目经理来说, 最好的行动方案是什么?A. 设置虚拟沟通工具B. 为团队提供作战室C. 只配置私人办公区域不设立公共办公区域D. 结合使用Scrum of Scrums<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">一个项目需要在技术部门之间进行详细信息交流, 项目团队位于不同位置. 一些团队成员对提议的沟通系统没有经验. 项目经理应该使用什么来解决这个问题?A. 沟通管理计划B. 沟通技能C. 项目沟通渠道D. 沟通技术<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">意料之外的技术问题需要添加三个新的项目资源. 现有团队表现良好, 但由于没有跟团队新资源分享关键信息, 导致落后于进度. 项目经理应该怎么做?A. 指示所有团队成员查看沟通管理计划B. 与新资源开会, 说明基本规则并要求妥协C. 要求职能经理指示新团队成员遵循相关方管理计划D. 开展团队建设活动, 鼓励人际关系纽带<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">开发一款银行零售业务新产品的项目正在进行中, 由于团队成员缺乏激励, 该项目落后于进度. 项目经理应该如何激励项目团队?A. 提供认可与奖励B. 使用教练和指导技能C. 授权D. 应用创造性的问题解决方法<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">在编制人力资源计划时, 项目经理发现来自职能部门的一名成员需要经过3天的培训, 才能具备某种特定的技能, 来完成某个特定的工作包, 由于专业的限制, 项目团队中没有其他人可以替代该成员. 项目经理应该怎么做?A. 在项目进度计划中增加3天时间B. 要求他利用业余时间完成这3天的培训C. 把该培训作为项目工作之一, 加入项目计划中, 并进行风险分析D. 要求用一个不需培训的成员来替换该成员<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">一个项目的项目团队成员分别位于亚利桑那州, 内布拉斯加州, 纽约和爱尔兰. 在这样的团队环境中, 以下哪些活动变得至关重要?A. 团队建设B. 状态报告C. 冲突解决D. 沟通规划<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">一位项目经理为他的团队安排了一些培训计划. 然而, 他知道, 除了计划的培训外, 计划外培训也以多种方式进行. 哪些不是计划外培训的进行方式之一?A. 课程B. 观察C. 项目绩效评估D. 谈话<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">一位项目团队成员临时离开项目, 由具有类似技术技能的资源代替, 由于新资源未参加过往项目会议, 导致项目中断, 项目经理应向新资源提供什么?A. 项目绩效报告B. 定期培训以及项目文档的访问权C. 项目管理计划, 包括范围和进度基准D. 工作绩效报告<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P342-9.4.2.6培训.</span><span class="hljs-comment"># 一个新人加入进来了，需要进行团队建设，</span><span class="hljs-comment"># 培训是团队建设的工具，确保新人快速上手工作.</span><span class="hljs-comment"># AD - 是给领导看的.</span><span class="hljs-comment"># C  - 光看基准还不行，还需要增强技能.</span></code></pre><pre><code class="hljs bash">项目经理正在管理一个全球项目, 其团队成员分散于多个国家. 为简化项目状态更新, 来自一个地区的经理启动了本地语言社交媒体账户. 项目经理应该做什么?A. 审计新的沟通渠道以确保其遵守PMO政策B. 要求这些经理传达新渠道内容的翻译版本C. 要求这些经理遵守项目管理办公室(PMO)的沟通政策D. 更新沟通管理计划, 以包含新的沟通渠道<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P371-10.1.2.3 沟通技术.</span><span class="hljs-comment"># 书上提到：拟传递的信息是否属于敏感或机密信息？如果是，可能需要采取合理的安全措施.</span><span class="hljs-comment"># 为员工制定社交媒体政策，以确保行为适当、信息安全和知识产权保护.</span><span class="hljs-comment"># 这个经理直接使用社交媒体传递项目信息，有可能触及信息安全政策的问题，</span><span class="hljs-comment"># 因此，先审查安全政策.</span><span class="hljs-comment"># B - 与题目关联不大.</span><span class="hljs-comment"># C - 应该先审查政策，再让这些经理遵守.</span><span class="hljs-comment"># D - 在最后做.</span></code></pre><pre><code class="hljs bash">一个时间紧迫, 涉及专业多, 技术难度大的项目, 能否按期交付直接影响公司的生存. 项目经理应该采取以下哪种技术来提升团队绩效?A. 集中办公B. 技术培训C. 虚拟团队D. 激励计划<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">在系统升级后, 客户向支持团队抱怨他们无法使用该系统. 支持团队没有从负责升级的项目团队那里接受过培训.若要解决这个问题, 项目经理应该怎么做?A. 查看支持团队的培训计划, 并安排培训课程B. 应将问题升级上报给项目发起人, 并建议项目团队接管支持职能C. 遵循变更管理计划, 采取必要的纠正措施以满足客户的期望D. 与部署团队合作, 安排修复升级问题<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P342-9.4.2.6培训.</span><span class="hljs-comment"># 项目经理应该按资源管理计划中的安排来实施预定的培训，</span><span class="hljs-comment"># 也应该根据管理项目团队过程中的观察、交谈和项目，效评估的结果，</span><span class="hljs-comment"># 来开展必要的计划外培训.</span><span class="hljs-comment"># B - 是人员技能存在短板、而不是职能部门经理拒绝提供资源.</span><span class="hljs-comment"># C - 人的能力不够，功能以然无法实现.</span><span class="hljs-comment"># D - 未经验收，无法部署.</span></code></pre><pre><code class="hljs bash">一个项目正在多个国家执行, 虚拟团队中共有七名区域项目经理, 其中一名区域项目经理收到一份报告, 显示他们团队的绩效低于平均水平.项目经理应使用什么工具或技术来提高团队绩效和项目绩效?A. 团队建设活动B. 质量审计C. 偏差分析D. 过程分析<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">一位关键团队成员犯了一个严重错误，将导致项目严重延迟. 按照相关方参与计划，项目经理与相关方开会讨论此问题.在会议上，项目经理应该提供什么信息？A. 团队的培训计划，以避免类似错误B. 说明防止类似问题发生的新规定C. 修改范围以保持项目进度计划的方案D. 根本原因分析, 解释错误发生的原因<span class="hljs-comment"># A</span><span class="hljs-comment"># B - 规定不能解决人的技能短板.</span><span class="hljs-comment"># C - 人的问题没有解决, 因为人的技能短板而调整本末倒置.</span><span class="hljs-comment"># D - 导致问题发生的问题已经清楚了.</span></code></pre><pre><code class="hljs bash">在与新组建的团队启动项目后不久，项目经理发现团队成员对意见分歧极为直言不讳.若要在团队建设过程中鼓励进展，项目经理应该怎么做?A. 要求团队成员专注于完成任务B. 营造一个反馈和肯定的环境, 巩固支持团队的习惯C. 强调团队成员之间达成共识以尽量减少冲突的重要性D. 经常审查并评团队和项目绩效<span class="hljs-comment"># B</span><span class="hljs-comment"># D - 团队绩效评估, 是对团队建设效果的评价, 在选项B之后.</span></code></pre><pre><code class="hljs bash">一个项目团队成员已经延迟两次交付一个工作包，其职能经理已经通知项目经理，该团成员资历较新，需要时间学习。项目经理应该怎么做？A. 要求职能经理替换该团队成员B. 与该团队成员私下讨论该问题C. 向该团队成员提供培训D. 在团队会议上讨论该问题<span class="hljs-comment"># C</span><span class="hljs-comment"># 9.4.2.6-培训.</span><span class="hljs-comment"># 如果项目团队成员缺乏必要的管理或技术技能，可以把对这种技能的培养作为项目工作的一部分.</span><span class="hljs-comment"># 项目经理应该按资源管理计划中的安排来实施预定的培训。选项A，先要进行培训，看是否能够弥补短板.</span><span class="hljs-comment"># B - 团队成员的问题已经清晰了，”资历较新，需要时间学习“，无需再去私下讨论.</span><span class="hljs-comment"># D - 在团队会议上讨论会给该团队成员带来负面影响.</span></code></pre><pre><code class="hljs bash">你正在管理一个项目团队，该团队最新新增来自另一个国家的成员.他们的角色已经被概述为初步的团队章程.然而，你已经注意到团队中相当缺乏对文化差异的接受，这导致了频繁的冲突。以下哪一种技巧可以在这种情况下帮助你？(选择三项)A. 焦点小组B. 角色定义C. 基本规则D. 能力测试E. 会议<span class="hljs-comment"># ACE</span><span class="hljs-comment"># 建设团队：建设团队是提高工作能力，促进团队成员互动，改善团队整体氛围，以提高项目绩效的过程.</span><span class="hljs-comment"># 本过程的主要作用是，改进团队协作、增强人际关系技能、激励员工、减少摩擦以及提升整体项目绩效.</span><span class="hljs-comment"># B和D非PMBOK中的正式工具.</span></code></pre><pre><code class="hljs bash">项目经理在演示和审查会议上收到进度报告. 报告显示，敏捷项目并没有走上正轨. 因为所有的工作都是为了达到更高层次的目标而特意选择和安排的，所以项目经理对报告感到惊讶. 项目经理在未来如何在敏捷项目中防止这种类型的误解?A. 支持项目团队的自组织，并帮助他们为项目提供支持B. 确保有应急储备来应付这些问题C. 确保团队接受过使用敏捷过程报告系统的培训D. 为项目团队提供关于敏捷方法的早期培训和持续指导<span class="hljs-comment"># D</span><span class="hljs-comment"># 《PMBOK》第6版342页，9.4.2.6-培训.</span><span class="hljs-comment"># 如果项目团队成员缺乏必要的管理或技术技能，</span><span class="hljs-comment"># 可以把对这种技能的培养作为项目工作的一部分.</span><span class="hljs-comment"># 项目经理按敏捷方式来，团队没有，说明团队没有掌握敏捷方法的技能.</span></code></pre><pre><code class="hljs bash">在演示和审查会议期间，进度报告显示一个敏捷项目脱离正轨，项目经理感到很惊讶，因为所有工作都是经过有目的性的选择和排序以满足更高层级的目标.若要预防这种沟通不畅的问题，项目经理应该事先做什么?A. 鼓励团队自行组织并提供项目支持B. 创建一份应急储备C. 让团队参与记录敏捷进度报告系统D. 培训并指导团队使用敏捷方法<span class="hljs-comment"># D</span><span class="hljs-comment"># 《PMBOK》第6版342页，9.4.2.6-培训.</span><span class="hljs-comment"># 如果项目团队成员缺乏必要的管理或技术技能，可以把对这种技能的培养作为项目工作的一部分.</span><span class="hljs-comment"># 项目经理按敏捷方式来，团队没有，说明团队没有掌握敏捷方法的技能.</span></code></pre><pre><code class="hljs bash">一项任务花费的时间比预期长，经申查，项目经理确定所分配的人员不具备必要的技能.若要将项目任务拉回正轨，项目经理应该怎么做？A. 制定并管理一份技能不熟练人员的纠正措施计划，以获得必要的技能B. 分配技能熟练的人员以帮助不熟练人员获得必要的技能C. 与职能经理会面，请求协助培训技能不熟练的人员D. 与职能经理一起合作，以替换该人员<span class="hljs-comment"># A</span><span class="hljs-comment"># 《PMBOK》 第6版342页，9.4.2.6：培训.</span><span class="hljs-comment"># 项目经理应该按资源管理计划中的安排来实施预定的培训，</span><span class="hljs-comment"># 也应该根据管理项目团队过程中的观察、交谈和项目，有效评估的结果来开展必要的计划外培训.</span><span class="hljs-comment"># B - 如果有技能熟练的人员，就不存在短缺的问题.</span><span class="hljs-comment"># C - 在团队内部的培训由项目经理负责.</span><span class="hljs-comment"># D - 太绝对，因为职能部门也可能缺少合适的资源.</span></code></pre><pre><code class="hljs bash">两名团队成员之间的冲突正在放慢工作进展，但进度尚末受到影响，项目经理应该做什么？A. 与互相冲突的团队成员合作，并将两个观点结合起来向前推进项目B. 等待着两名团队成员是否能够解决冲突C. 指示两名团队成员为项目的成功而共同合作D. 变更其中一名或两名团队成员以避免末来的时间延迟<span class="hljs-comment"># A</span><span class="hljs-comment"># 解析：PMBOK (6) P349-9.5.2.1管理团队-冲突管理-合作/解决问题.</span><span class="hljs-comment"># 综合考虑不同的观点和意见，采用合作的态度和开放式对话引1导各方达成共识和承诺.</span><span class="hljs-comment"># 这种方法可以带来双赢的局面.</span></code></pre><pre><code class="hljs bash">一个项目正处于在客户工厂的最终测试和验收阶段.若要满足项目期限，项目经理应使用哪一项？A. 观察/对话B. 集中办公C. 强迫/指导D. 基本规则<span class="hljs-comment"># B</span><span class="hljs-comment"># P340-9.4.2.1集中办公.</span><span class="hljs-comment"># 集中办公是指把许多或全部最活跃的项目团队成员安排在同一个物理地点工作，以增强团队工作能力.</span><span class="hljs-comment"># A  - 观察/对话常用于范围管理.</span><span class="hljs-comment"># CD - 情景突出的是要求团队具有高产出而非解决团队成员之间的摩擦，所以排除.</span></code></pre><pre><code class="hljs bash">一位项目经理正在领导一个位于三个不同国家的多元文化项目团队.最近，任务延后变得很常见，团队成员经常发生争论而不合作.若要减少潜在的冲突，并改善团队沟通和交付，项目经理应该怎么做？A. 使用批准的虚拟工具安排每周一次的重新调整会议，以确保团队充分参与B. 与每个团队安排一次电话会议，并进行团队建设练习C. 为团队成员发送一封电子邮件，鼓励他们一起工作D. 将该问题升级上报给高级管理层<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P340-9.4.2.2虚拟团队.</span><span class="hljs-comment"># 分散在多个国家同时面临多元文化挑战的团队，团队凝聚力较差，</span><span class="hljs-comment"># 采取虛拟团队有助于提升沟通频率、拉近彼此之间的距离.</span><span class="hljs-comment"># B - 由于分布在多个国家，团队建设活动成本过高，故排除.</span><span class="hljs-comment"># C - 不解决问题，电子邮件不能对接收后的效果.</span><span class="hljs-comment"># D - 项目管理的责任在项目经理身上.</span></code></pre><pre><code class="hljs bash">项目经理新加入一家公司，之前没有管理过具有国际团队成员的项目.项目经理应该如何培养文化敏感性？A. 认识到需要学习文化，设法了解当地习俗，并在与团队成员一起工作时保持灵活性B. 与人力资源部门开会，以获得这方面的正式培训C. 拒绝该项目，理由是与文化多样化人员一起工作存在困难D. 了解每个团队成员文化的每个细节，以便对他们的需求保持敏感<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P338-9.4建设团队引言.</span><span class="hljs-comment"># 项目经理在全球化环境和富有文化多样性的项目中工作.</span><span class="hljs-comment"># 团队讲不同的语言，有时甚至会在工作中使用一种不同于其本土语言或文化的&quot;团队语言&quot;或文化规范.</span><span class="hljs-comment"># 项目管理团队应该利用文化差异，在整个项目生命周期中致力于发展和维护项目团队，</span><span class="hljs-comment"># 并促进在相互信任的氛围中充分协作.</span><span class="hljs-comment"># B - 项目团队的培训由项目经理规划并安排，而非人力资源部门.</span><span class="hljs-comment"># C - 拒绝错误.</span><span class="hljs-comment"># D - 要了解每个成员文化的每个细节不现实，而且也缺少在整个项目周期内要促进文化建设的意识，不能仅仅是了解.</span></code></pre><pre><code class="hljs bash">一位项目经理正在组织一次冲刺回顾会议，团队成员在会上讨论客户对他们在冲刺期间交付的产品增量的不满.讨论揭示了主要使用电子邮件与团队其他成员沟通的远程团队成员的一些问题.什么是最有可能导致产品增量没有满足客户期望的原因？A. 未能应对范围变更B. 不在同一地点的团队成员C. 在每次冲刺中交付工作软件D. 士气低落的团队成员<span class="hljs-comment"># B</span><span class="hljs-comment"># 敏捷实践指南 页码：P46 章节：4.3.6.</span><span class="hljs-comment"># 团队工作场所团队需要一个工作场所，他们可以一起工作，了解他们作为团队的状态，并进行协作.</span><span class="hljs-comment"># 在不同地点工作的团队成员需要虚拟的工作空间.</span><span class="hljs-comment"># 另外，要考虑让团队成员定期聚集一堂，以便建立信任，学习怎样开展合作.</span><span class="hljs-comment"># 敏捷团队如果能集中办公是最好的. 若分布式办公会存在协作滞后的问题.</span></code></pre><pre><code class="hljs bash">在一个项目的实施阶段，一位新指派的团队负责人接洽项目经理，以核实团队的任务和进度计划，这项工作未按计划取得进展，因为该团队负责人缺乏管理经验，这可能会造成项目延误.项目经理该做什么？A. 向新指派的团队负责人提供辅导B. 让人力资源总监指派一名高级团队负责人C. 将可能发生的延误问题告知项目发起人D. 直接管理项目团队，以避免发生项目延误<span class="hljs-comment"># A</span><span class="hljs-comment"># 解析：《PMBOK》第6版342页，9.4.2.6-培训.</span><span class="hljs-comment"># 团队负责人的能力不足，非常典型的考察培训的场景，选项A正确.</span><span class="hljs-comment"># B - 没有完美无瑕100%适用于当前项目的资源，哪怕是在组织内部工作多年的熟手，</span><span class="hljs-comment">#     在进入项目组后也需要了解项目实施的情况才能着手工作，</span><span class="hljs-comment">#     所以靠替换资源并不能从根本上解决问题.</span><span class="hljs-comment"># C - 在汇报风险管理的效果时，</span><span class="hljs-comment">#     通常汇报当前项目所面临的风险水平以及会到项目造成重大影响的单项风险，</span><span class="hljs-comment">#     并不需要做到事无巨细通通上报.</span><span class="hljs-comment"># D - 项目经理承担整合的责任，所谓整合就是要利用好组织提供的资源和工具技术来实现项目的目标，</span><span class="hljs-comment">#     既然团队负责人是可用的资源，项目经理就不适合越俎代庖.</span><span class="hljs-comment">#     上一个事必躬亲的名人叫做诸葛亮，什么结果大家也都看到了.</span></code></pre><h4 id="33-事业环境因素"><a href="#33-事业环境因素" class="headerlink" title="33.事业环境因素"></a>33.事业环境因素</h4><p>事业环境因素(EEFs) : 是指项目团队不能控制的, 将对项目产生影响, 限制或指令作用的各种条件.</p><p>组织过程资产 : 执行组织所特有并使用的计划, 过程, 政策和知识库, 会影响对具体项目的管理.</p><p><u><strong>收尾更新</strong></u>的组织过程资产包括:<br>(1) 项目文件<br>(2) 运营和支持文档<br>(3) 项目或阶段收尾文件<br>(4) 经验教训知识库<br>组织过程资产更新: 当前项目发现的问题要纳入到<u><strong>组织过程资产</strong></u>中, 特别是情景中已经强调了”未来的项目”, 不是解决现有项目的问题.</p><p>项目计划模版和经验教训登记册属于<strong>组织过程资产</strong>, 是历史上的其他项目留下来的.</p><p>已发布的<u><strong>商业信息</strong></u>被视为影响估算成本过程的事业环境因素的至关重要的部分.<br>“新的质量标准”是对当前项目的<u>制约</u>, 属于事业环境因素.</p><p>缺乏历史数据, 是必须要<u>接受的客观因素</u> -&gt; 事业环境因素. 专家判断属于工具和技术.<br>组织过程资产是供项目借鉴的, 而情景中描述的问题属于对项目的制约因素.</p><pre><code class="hljs bash">你们目前正在启动一个发电厂扩容升级项目, 目标是将产量提高50%. 在开始项目计划之前, 你希望确保已经考虑并记录了该项目所有适用的事业环境因素. 以下哪项是你项目的事业环境因素?A. 配置管理知识库B. 变更控制程序C. 商业数据库D. 历史信息<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">作为估算成本过程的一部分, 项目经理获得了某些商业数据库的访问权限,以获取资源成本费率信息. 此类公布的商业信息被视为什么类型的输入?A. 事业环境因素B. 历史信息C. 组织过程资产D. 人力资源<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">在项目执行期间, 监管合规团队公布了新的质量标准. 更新质量管理计划时, 项目经理应考虑什么?A. 经验教训登记册B. 成本效益分析C. 风险登记册D. 事业环境因素<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">当面临缺乏历史数据时, 项目经理会做出各种假设, 许多这些假设被证明是不正确的, 至少引发了一个高影响的问题. 若要避免这个问题, 项目经理应该事先使用什么?A. 显性知识B. 事业环境因素C. 专家判断D. 组织过程资产<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P78-4.1.1.3事业环境因素.</span><span class="hljs-comment"># 缺乏历史数据，是必须要接受的客观因素.</span><span class="hljs-comment"># C - 专家判断属于工具和技术.</span><span class="hljs-comment"># D - 组织过程资产是供项目借鉴的，而情景中描述的问题属于对项目的制约因素.</span></code></pre><pre><code class="hljs bash">在项目的实施阶段，在工程图纸中发现一个错误，该错误导致重大的返工和成本超支，项目经理执行根本原因分析，并发现未根据程序检查图纸. 项目经理应该做些什么来确保在末来的项目中不会发生这种情况？A. 识别并面对导致错误的人员B. 收集经验教训储存库中的结果C. 更新质量管理计划D. 通知所有其他项目经理<span class="hljs-comment"># B</span><span class="hljs-comment"># 看到关键词 - &quot;未来的项目&quot;.</span></code></pre><pre><code class="hljs bash">下面属于事业环境因素的是?A. 上一个项目的经验教训登记册B. 项目管理信息系统(PMIS)C. 企业购买的最新的行业数据D. 整体变更控制程序<span class="hljs-comment"># B</span><span class="hljs-comment"># 企业提供的项目管理信息系统(PMIS)和其他企业信息化平台(如CRM, ERP, OA等)性质相同.</span><span class="hljs-comment"># 需要所有项目团队都规范使用, 属于项目团队必须遵守的组织内部的流程制度.</span><span class="hljs-comment"># 不过, PMIS中保留下来的以往项目的数据, 模版, 日志, 报告等都属于组织过程资产.</span></code></pre><pre><code class="hljs bash">项目经理正在制定一个关键项目的资源管理计划，该项目涉及位于不同国家具有不同文化的资源, 下列哪一项将帮助项目经理处理这种情况?A. 团队建设活动B. 事业环境因素C. 人际关系技能D. 虚拟团队<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P315 章节：9.1.1.4 事业环境因素.</span><span class="hljs-comment"># 组织文化和结构;</span><span class="hljs-comment"># 设施和资源的地理分布;</span><span class="hljs-comment"># 现有资源的能力和可用性;</span><span class="hljs-comment"># 市场条件;</span><span class="hljs-comment"># 只有B是规划资源管理的输入或工具.</span></code></pre><pre><code class="hljs bash">项目经理正在创建一份文件，正式授杈建筑改造项目. 装修要求拆除石棉绝缘材料，因为它是一种已知致癌物。这种情況会如何影响目前正在进行的过程？A. 应急储备需要分配并记录在文件中B. 该文件需要包括对已识别的风险的详细的风险应对计划C. 该文件需要符合任何适用的政府和行业标准D. 移除石棉的详细时间表应包含在文件中<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK 6th 页码：P78章节：4.1.1.3</span><span class="hljs-comment"># 事业环境因素政府或行业标准法律法规要求和制约因素.</span><span class="hljs-comment"># 授权项目的文件指得是项目章程.</span><span class="hljs-comment"># ABD都不属于启动阶段.</span></code></pre><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/034.png" alt="034" style="zoom:80%;margin-left: 0;"><pre><code class="hljs bash">为了制定一份前后一致的风险管理计划，项目经理需要考虑哪些因素？A. 客户的风险态度以及组织过程资产B. 项目管理计划和事业环境因素C. 风险登记册和范围说明书D. 潜在响应列表和项目管理计划<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P401章节：11.1规划风险管理的输入:</span><span class="hljs-comment"># (1) 项目章程</span><span class="hljs-comment"># (2) 项目管理计划</span><span class="hljs-comment"># (3) 相关方登记册</span><span class="hljs-comment"># (4) 事业环境因素</span><span class="hljs-comment"># (5) 组织过程资产</span><span class="hljs-comment"># 项目管理计划与事业环境因素.</span></code></pre><pre><code class="hljs bash">一家公司准备重新启动一个暂停的项目.遗憾的是，整个项目团队均已解散.项目经理应该使用什么来重新制定项目计划?A. 经验教训储存库B. 项目发起人的意见C. 商业论证D. 可行性研究<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P84-4.2.1.4组织过程资产.</span><span class="hljs-comment"># 之前暂停的项目会有大量的经验教训. </span><span class="hljs-comment"># 现在需要制定项目计划，以组织过程资产作为制定项目管理计划的输入，A最合题意.</span><span class="hljs-comment"># B  - 题目没有提及发起人相关，明显不对.</span><span class="hljs-comment"># CD - 是启动阶段的输入.</span></code></pre><pre><code class="hljs bash">一名团队成员已经制定一种创新方法，来缩短项目时问表.若要与其他项目团队分享该方法，项目经理应该更新什么？A. 项目管理计划B. 事业环境因素C. 项目管理信息系统(PMIS)D. 组织过程资产<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P105-4.4.3.4 组织过程资产更新.</span><span class="hljs-comment"># 所有项目都会生成新知识. 有些知识应该被编撰，</span><span class="hljs-comment"># 并在管理项目知识过程中被嵌入可交付成果，或者被用于改进过程和程序.</span><span class="hljs-comment"># 创新的方法，是重要的组织过程资产，更新以后做为其他项目团队的输入.</span><span class="hljs-comment"># 题目在问”与其他项目团队分享“，则更新组织过程资产即可.</span><span class="hljs-comment"># ABC - 都是为本项目服务的，不合适.</span></code></pre><pre><code class="hljs bash">一家银行正在执行一个项目，在整个组织中部署新软件.在完成项目的第一阶段后，项目经理召集所有部门的职能经理召开会议，以审查项目问题并收集经验教训.项目经理应该在会议期间使用什么来检查项目问题并分析经验教训？A. 头脑风暴B. 因果分析C. 专家判断D. 散点图<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK 6th 页码：P126 章节：4.7.2.1 专家判断.</span><span class="hljs-comment"># 1) 管理控制;</span><span class="hljs-comment"># 2) 审计;</span><span class="hljs-comment"># 3) 法规与采购;</span><span class="hljs-comment"># 4) 法律法规.</span><span class="hljs-comment"># 这题只有专家判断是收尾过程的工具.</span></code></pre><pre><code class="hljs bash">项目经理正在管理一个进度紧张的项目.团队成员位于全国各地,非常繁忙,对关注经验教训登记册并不感兴趣.若要确保准备、管理并跟踪经验教训,项目经理应该做什么?A. 安排定期电话会议,以收集信息并更新经验教训登记册B. 组织项目结束会议,以便团队成员可以报告问题并应用最佳实践C. 要求每个团队成员在有时间时更新经验教训登记册D. 分配一名资源用问题日志来准备和更新经验教训登记册<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK（6）P333，9.3.2.4-虚拟团队.</span><span class="hljs-comment"># 虚拟团队可定义为具有共同目标、在完成角色任务的过程中很少或没有时间面对面工作的一群人.</span><span class="hljs-comment"># 现代沟通技术（如电子邮件、电话会议、社交媒体、网络会议和视频会议等）使虚拟团队成为可行.</span><span class="hljs-comment"># B  - 对经验教训的总结收集要在项目实施过程中不间断的进行，而不是在项目的结束阶段才进行收集.</span><span class="hljs-comment"># CD - 项目经理承担对经验教训登记册维护的责任，分配专人来更新登记册，</span><span class="hljs-comment">#      为完成而完成，失去了通过对经验教训的收集总结来使未来项目少走弯路的意义.</span></code></pre><h4 id="34-阶段关口"><a href="#34-阶段关口" class="headerlink" title="34.阶段关口"></a>34.阶段关口</h4><p>阶段关口设立在阶段结束点, 在该时点, 把项目的绩效及进展与各种项目文件及业务文件进行比较. 这些文件包括</p><ul><li>项目商业认证</li><li>项目章程</li><li>项目管理计划</li><li>效益管理计划<br>税率变化会直接影响项目的采购成本, 进而影响<u>项目的效益</u>, 所以项目经理应该评估税率变化的影响, 并根据评估结果更新项目的<u><strong>效益管理计划</strong></u>.</li></ul><p>项目和开发周期 : 必须在得知这些信息之后尽快满足需求, 所以先基于初始需求制定一套<u>高层级的计划</u>, 再逐渐把需求细化到适合<u>特定规划周期</u>所需的详细程度, 能够对快速变化的需求尽快响应.</p><pre><code class="hljs bash">你正在为外部客户管理一个复杂的软件开发项目. 你按照合同要求使用瀑布式方法来管理项目. 但是, 你不习惯这种方法. 你相信客户并不真正知道他们想要什么; 相反, 他们想要的是在项目过程中不断重复的双向交互. 在你当前的情况下, 瀑布式方法强调的是预先的需求捕获和设计, 然后是产品开发, 最后是系统测试.客户只会在需求收集和系统测试阶段参与, 而在开发活动期间将会完全失去联系.以下哪一项可以帮助你减轻瀑布式方法所带来的风险?A. 采用混合生命周期B. 采用增量型生命周期C. 将项目划分为多个阶段, 并组织阶段关口D. 采用迭代型生命周期<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">一家公司的竞争对手向市场推出了一种新的解决方案, 该公司的首席执行官决定创建一个项目来评估这种解决方案的影响,并快速实施类似的产品来留住现有的客户. 有关竞争对手新解决方案的信息很少, 发起人必须在得知这些信息之后尽快满足需求.在制定一份项目章程时, 项目经理应该向发起人建议什么?A. 在项目章程中定义一个多阶段项目, 分阶段处理每个新需求B. 与关键相关方一起审查在该项目中使用适应性方法的可行性C. 制定一份项目的章程, 仅识别, 列明各种需求并对需求进行优先级排序, 然后在后续项目中实施这些需求D. 根据识别到的需求使用小增量来改进当前服务的现有功能<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目经理与发起人正在定期评审效益管理计划. 采购经理说近期税率的变化对采购成本的影响还不可知. 项目经理应该怎么做?A. 评估税率变化的影响, 并重新修订效益管理计划B. 建议发起人增加管理储备, 以应对税率的变化C. 更新风险登记册并规划风险应对D. 更新采购管理计划并实施采购<span class="hljs-comment"># A</span></code></pre><h4 id="35-技术项目管理技能"><a href="#35-技术项目管理技能" class="headerlink" title="35.技术项目管理技能"></a>35.技术项目管理技能</h4><p>技术项目管理技能指有效运用项目管理知识实现项目集或项目的预期成果的能力.<br>顶尖的项目经理会具备几种关键技能, 包括针对每个项目裁剪传统或敏捷工具, 技术和方法.</p><p>敏捷领导者尝试将团队成员的<strong>个人目标和个人动机</strong>与团队实现项目目标的<strong>进度保持一致</strong>.<br>要做到这一点, 有必要要先学会<strong>理解这些动机</strong>. 忽视, 沉迷或利用个人目标来操纵他们并没有那么有效.<br>我们只是希望将个人动机与团队实现项目目标的进展保持一致.</p><p><strong>敏捷开发宣言</strong></p><p>个体和互动 高于 流程和工具<br>工作的软件 高于 详尽的文档<br> 客户合作    高于  合同谈判<br> 响应变化    高于  遵循计划</p><p>不论团队内外, 传递信息效果最好效率最高的方式是<u><strong>面对面的交谈</strong></u>.<br>坚持不懈地追求<strong>技术卓越和良好设计</strong>, 敏捷能力由此增强.</p><pre><code class="hljs bash">一个熟练的项目经理应该有必要的专业知识来识别合适的项目管理方法(传统的还是敏捷的), 并为每个项目定制工具, 技术和方法这些技能叫什么?A. 战略和商业管理技能B. 技术项目管理技能C. 领导能力D. 软技能<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">过去几年你一直在管理敏捷项目. 根据你的经验, 个人互动和人际交往能力对于组建你的团队来说是最重要的.你知道训练和指导成员是提高团队成员技能的最佳方法之一. 作为团队教练, 你对团队成员的个人目标和个人动机应该持有什么态度?A. 忽略它们: 个人问题与实现项目目标无关B. 培养他们: 个人目标是人们希望在工作中取得成功的重要原因C. 理解它们: 尝试将个人动机与团队实现项目目标的进展保持一致D. 利用他们: 用个人目标说服团队成员提高他们的绩效水平<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">你审查了项目的WBS, 意识到由于缺乏内部专业知识, 一些可交付成果需要外包给供应商.然而, 这些可交付成果的需求目前还没有被很好地理解.因此, 你决定需要使用敏捷框架来管理外包的工作部分. 在与供应商谈判协议时, 你最好的方法是什么?A. 寻求非正式协议而不是正式合同B. 为外包范围争取总价合同C. 积极谈判最有利的条件D. 追求共享风险-回报合同关系<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">一家公司可交付的项目一直滞后并超出预算, 敏捷管理专业人士建议采取敏捷方法减少此类问题, 敏捷管理专业人士该怎么做来说服管理层采取敏捷方法?A. 解释频繁交付价值给组织带来的好处B. 证明限制质量控制文件能够减少项目预算并缩短交付时间C. 证明在开始时捕获项目范围, 能够限制范围蔓延和项目延期D. 指出敏捷可以加快交付, 这是因为可以调整速度来适应项目进度计划<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">你的敏捷项目需要本地无法找到的专家. 你可以在全球各地找到所需的资源, 但由于各种限制, 不能在项目期间对专家进行配置.你认为推进项目的唯一方法是在虚拟环境下建立团队. 启动会议将在几周后举行. 要让团队参加会议, 你的最佳行动方案是什么?A. 让团队成员在会议期间连接到视频会议B. 可能的话, 带团队成员亲自参加启动会议C. 将会议录下来并将录像发送给团队成员D. 什么都不做, 因为敏捷团队有权作出自己的决策<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">一家公司继承了一个存在大量技术债务的项目. 虽然相关方知道这一点, 但他们未能了解对交付和产品质量的影响. 若要处理这个问题, 敏捷管理专业人士应该怎么做?A. 创建一个重构计划, 供相关方审查B. 提高所有故事点的价值, 以说明重构的原因C. 在下次迭代中为技术债务事项分配最高优先级D. 确保所有技术债务问题均已添加到产品待办列表中<span class="hljs-comment"># D</span></code></pre><h4 id="36-问题日志"><a href="#36-问题日志" class="headerlink" title="36.问题日志"></a>36.问题日志</h4><p>问题日志是一种记录和跟进所有问题的项目文件, 问题日志可以帮助项目经理有效跟进和管理问题, 确保它们得到调查和解决.<br>敏捷是多次交付, 变更驱动的项目管理模式, 因此要拥抱变更. 因此将问题加入<u><strong>问题日志</strong></u>,<br>然后在下个冲刺开始的时候制定冲刺计划的时候来确定是否变更和排定优先级.</p><p>问题日志用于记录和监督问题的解决. 它可用来<u>促进沟通</u>, 确保对问题的共同理解. 情景中项目团队成员, 暴露了”担心”, 那么要对担心的问题进行聚集和跟踪.</p><p>已经发生的<u><strong>项目事故属于问题</strong></u>, 该问题及其处理过程需要被记录.<br>因此, 当发现相同特征的类似事故时, 项目经理应该查阅问题日志.</p><p>项目文件更新 : 记录在监督风险过程中产生的关于单个项目风险的信息, 可能包括添加新风险, 更新已过时的风险或已发生的风险, 以及更新风险应对措施等.<br>若问题已经识别出来并添加到了问题日志, 那么下一步就要进行分析, 确定适当的<u><strong>应对措施</strong></u>, 并把这个应对措施<u><strong>更新到风险登记册</strong></u>里面.</p><pre><code class="hljs bash">你正在管理企业解决方案部署项目, 最终用户对解决方案不满意. 你决定与最终用户会面, 并发现他们尚未接受有关新系统的适当培训.你应该先做什么?A. 更新问题日志B. 安排其他培训C. 进一步调查问题并确定根本原因D. 使用必要的变更更新项目管理计划<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">在第一次回顾期间, 项目经理识别到并记录了几个问题. 在第二次回顾期间, 这些问题依然存在. 项目经理在第一次回顾期间本应采取什么措施?A. 与团队分享问题日志B. 根据所记录的问题制定行动计划C. 请求团队跟进所有问题D. 用行动项目清晰定义问题日志中的问题<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">在敏捷项目部署期间, 客户对可交付成果不满意并要求进行变更. 敏捷项目经理下一步应该怎么做?A. 将这些变更添加进问题日志B. 在交付期间整合实施变更C. 在下次评审会议期间纳入这些变更D. 尽可能地限制变更<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">项目经理通过电子邮件向所有项目相关方(包括本地和海外团队成员)发布每周项目更新, 一个海外项目团队担心由于对项目需求的误解而无法实现目标.项目经理应该怎么做?A. 单独与该海外团队谈话澄清该问题B. 将该问题记录在问题日志中C. 分配另一个海外团队来帮助/指导他们D. 与所有相关方开会, 讨论这个问题<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P387-10.2.3.3管理沟通-项目文件更新-问题日志.</span><span class="hljs-comment"># 问题日志用于记录和监督问题的解决.</span><span class="hljs-comment"># 它可用来促进沟通，确保对问题的共同理解.</span><span class="hljs-comment"># 问情景中项目团队成员，暴露了“担心”那么要对担心的问题进行聚焦和跟踪.</span><span class="hljs-comment"># AC - 在选项B之后.</span><span class="hljs-comment"># D  - 与所有相关方开会不恰当，对于信息的传递要根据沟通管理计划进行.</span></code></pre><pre><code class="hljs bash">一位团队成员通知项目经理有一个问题可能会破坏项目. 项目经理将该问题添加到问题日志中, 并要求团队找到解决方案.项目经理下一步应该怎么做?A. 更新风险登记册B. 修订项目管理计划C. 确定适当的风险应对D. 通知相关方<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P458- 11.7.3.4项目文件更新.</span><span class="hljs-comment"># 记录在监督风险过程中产生的关于单个项目风险的信息，</span><span class="hljs-comment"># 可能包括添加新风险、更新已过时的风险或已发生风险，以及更新风险应对措施等.</span><span class="hljs-comment"># 题目中显示这个问题已经识别出来并添加到了问题日志，</span><span class="hljs-comment"># 那么下一步我们就要进行分析，确定适当的应对措施，</span><span class="hljs-comment"># 并把这个应对措施更新到风险登记册里面.</span><span class="hljs-comment"># 先C -&gt; A, 再到B, D.</span></code></pre><pre><code class="hljs bash">一名项目团队成员发现并登记了一个项目事故, 同时制定, 实施了纠正措施.一个月后, 另一名项目团队成员发现了具有相同特征的类似的事故.项目经理应查阅哪一份文件了解这些事故并与团队沟通该信息?A. 问题日志B. 绩效报告C. 风险登记册D. 变更日志<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">项目关键路径上的任务所需的设备交付延迟了两个星期。项目经理应该做什么？A. 在风险登记册中登记该事件，并立即通知项目发起人B. 在问题日志中解决该事件，并在下次项目状态会议上讨论C. 在问题日志中记录该事件，并立即通知相关方D. 在风险登记册中记录该事件，并在下次项目状态会议上讨论<span class="hljs-comment"># B</span><span class="hljs-comment"># 4.3.3.4指导与管理项目工作-问题日志</span><span class="hljs-comment"># 问题已经出现，所以不应将其当成不确定性事件进行管理，排除AD.</span><span class="hljs-comment"># 问题日志侧重问题的跟踪解决和聚焦，而不是简单的记录和上报，排除选项C.</span></code></pre><pre><code class="hljs bash">在项目执行期间，几位关键项目成员辞职离开项目团队，项目经理该如何应对这种情况？A. 提出项目问题，分析影响，并制定缓解计划B. 提出项目风险，分析影响，并将情况上报给项目发起人C. 使用项目的应急储备安排相关人员代替辞职的成员D. 为辞职的成员加薪，将其挽留住<span class="hljs-comment"># A</span><span class="hljs-comment"># 4.3.3.3 问题日志。关键词“辞职离开项目团队”已经发生，属于问题，而非风险（B错误）.</span><span class="hljs-comment"># 对于问题，先分析影响，再安排应措施. 选A.</span></code></pre><pre><code class="hljs bash">项目经理正在管理一个项目，其供应商负责采购最终组装所需的一种重要材料.但在进入组装阶段时却发现这种重要材料的交货跟踪记录不翼而飞，而且这种材料尚未装运.如果这种材料未按估算的交货时间运达，这可能会导致整个进度计划发生延迟.为解决该问题，项目经理接下来该做什么？A. 记录该情况的所有详细信息，并更新问题日志B. 将该情况报告给项目发起人，并查明延长项目时限将会产生什么样的影响C. 转向先前实施的评估过程中发现的次优的合格采购供应商D. 与采购团队一起评估该情况，并探索加快交货的所有可能的解决方案<span class="hljs-comment"># A</span><span class="hljs-comment"># 4.3.3.3 问题日志。根据题意，材料跟踪记录丢失，已经发生了，属于问题.</span><span class="hljs-comment"># 首先应该记入问题日志，其次分析影响等具体行动. 因此选A.</span></code></pre><pre><code class="hljs bash">项目经理面对一个由两个合资企业组成的指导委员会，他们拥有对立的优先级.伙伴希望加快进度；而第二个合作伙伴想要高质量. 并且愿意接受更长时间的进度.项目经理应该如何解决这个冲突？A. 将该冲突作为一项风险纳入风险管理计划中B. 更新问题日志并监控该冲突的解决方案C. 启动一个新的范围定义，并与所有项目相关方进行协商D. 将该问题包含在质量管理计划中<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P348- 9.5.2.1 冲突管理.</span><span class="hljs-comment"># 首先，这是一个问题，而不是风险. 其次，题干问如何解决冲突，属于冲突管理，因此选B.</span><span class="hljs-comment"># A - 风险纳入的是登记册而不是管理计划.</span><span class="hljs-comment"># C - 范围定义解决不了这个质量与进度的问题.</span><span class="hljs-comment"># D - 仅提供了质量解决方案.</span></code></pre><pre><code class="hljs bash">在施工阶段,一座城市的高端基础设施项目隧道部分遇到排水问题,项目团队正处于寻找解决方案的过程. 更新问题日志之后,项目经理应该做什么?A. 请求预算补贴和延长进度计划B. 与指导委员会沟通该问题,并提供定期进度更新,直至解决为止C. 尽快解决问题,以避免进度计划延迟D. 聘请一位外部顾问,就如何高效和经济有效地解决问题提供专家意见<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P96，4.3.3.3-问题日志.</span><span class="hljs-comment"># 问题日志是一种记录和跟进所有问题的项目文件，</span><span class="hljs-comment"># 可以帮助项目经理有效跟进和管理问题，确保它们得到调查和解决.</span><span class="hljs-comment"># 更新问题日志的意义在于&quot;聚焦&quot;和&quot;跟踪&quot;，所以选项B最贴近出问题日志的总用.</span><span class="hljs-comment"># A - 是否发起变更请求要根据对问题的分析结果.</span><span class="hljs-comment"># C - 解决问题是目标，没有突出问题日志聚焦的作用.</span><span class="hljs-comment"># D - 同选项A一样，如何解决问题要根据对问题的分析结果来实施.</span></code></pre><pre><code class="hljs bash">项目群经理在实施项目审计时，发现问题日志中各项均为项目经理所有，该情况可否接受？A. 不可接受，项目经理不得作为问题及其解决方案的所有者B. 可接受，根据要求，所有问题均有指定的所有者C. 可接受，项目经理必须是所有问题及其解决方案的所有者D. 不可接受，项目团队必须是所有问题及其解决方案的负责人的所有者<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P347 章节：9.5.1.2 问题日志.</span><span class="hljs-comment"># 在管理项目团队过程中，总会出现各种问题.</span><span class="hljs-comment"># 此时，可用问题日志记录由谁负责在目标日期内解决特定问题，并监督解决情况.</span><span class="hljs-comment"># 项目团队共同解决问题.</span></code></pre><pre><code class="hljs bash">一个按时按预算进展的项目距离实现其主要里程碑还有30天,然后项目经理了解到实现这一里程碑的关键组件将有45天不可用.项目经理应该做什么?A. 在下一次项目状态会议上通知相关方B. 向所有相关方发送修订后的进度报告C. 修订风险管理计划D. 更新问题日志<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P132-4.3.3.3 问题日志.</span><span class="hljs-comment"># 首先，组件不可用这个事件已经发生，因此是问题不是风险，</span><span class="hljs-comment"># 因此将此问题纳入问题日志而不是风险相关的文件.</span><span class="hljs-comment"># A - 通知意义不大.</span><span class="hljs-comment"># B - 要先变更才可行.</span><span class="hljs-comment"># C - 不是风险是问题.</span></code></pre><pre><code class="hljs bash">正在审查问题日志的项目经理注意到,分配给某些团队成员的活动明显落后于进度.项目经理应该怎么做？A. 要求负责的团队成员解释延迟的原因以及解决问题的策略B. 要求负责的团队成员将他们的活动恢复到正常进度C. 与相关团队成员一起审查活动，以确定解决策略D. 将该问题升级上报给项目发起人解决<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(69.5 管理团队.</span><span class="hljs-comment"># 管理团队的过程中，遇到团队成员的问题，都是先私下处理，</span><span class="hljs-comment"># 如果还是解决不了必要时再提升处理级别.</span><span class="hljs-comment"># C - 是最积极主动的主理方式.</span><span class="hljs-comment"># A - 仅解释原因还不够，还要找到解决方案.</span><span class="hljs-comment"># B - 项目经理要介入，不能只做要求.</span><span class="hljs-comment"># D - 没必要.</span></code></pre><pre><code class="hljs bash">在项目会议期间，一个团队发现三个月前关闭的问题仍然处于活跃状态,并对项目的预算产生负面影响. 若要防止这种情况再次发生，项目经理可以做什么？A. 要求团队监督潜在问题B. 将该问题作为一项风险记录在风险登记册中C. 更新问题日志,并监督纠正措施D. 将会议纪要就近保存,以跟踪所有问题<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK Gth 页码：P96 章节：4.3.3.3 问题日志.</span><span class="hljs-comment"># 问题日志可以帮助项目经理有效跟进和管理问题，确保它们得到调查和解决.</span><span class="hljs-comment"># 作为本过程的输出，问题日志被首次创建，尽管在项目期间任何时候都可能发生问题.</span><span class="hljs-comment"># 在整个项目生命周期应该随同监控活动更新问题日志.</span><span class="hljs-comment"># 问题解决以后，要更新问题日志，同时审查问题是否真正关闭.</span></code></pre><h4 id="37-亲和图"><a href="#37-亲和图" class="headerlink" title="37.亲和图"></a>37.亲和图</h4><p><u><strong>亲和图</strong></u>用来对大量创意进行分组分类的技术, 以便进一步审查和分析. 是一种群体创新技术, 是收集需求的工具和技术一种.<br>亲和图可以对<u><strong>潜在缺陷成因进行分类</strong></u>, 展示最应关注的领域.</p><p><u><strong>控制图</strong></u>按时间顺序展示过程数据, 并将这些数据与既定的控制界限相比较的一种图形.<br>控制图有一条中心线, 有助于观察图中的数据点向两边控制界限偏移的趋势. 是<strong>控制质量</strong>的技术和工具之一.</p><p><u><strong>文氏图</strong></u>或译Venn图, 是表示集合的一种草图. 它们用于展示在不同的事物群组(集合)之间的数学或逻辑联系, 尤其适用用来表示集合之间的”大致关系”, 它也常常被用来帮助推导关于集合运算的一些规律. <strong>不是收集需求的工具和技术</strong>.</p><p><u><strong>头脑风暴</strong></u>是一种数据收集和创意技术, 主要用于在短时间内获得大量创意, 适用于团队环境.</p><p><u><strong>流程图</strong></u>:展示了引发缺陷的一系列步骤, 流程图通过展示引发缺陷的步骤来帮助分析问题.</p><p>石川图 : <strong>根本原因</strong>用石川图.</p><pre><code class="hljs bash">需求获取团队在会议期间产生了大量的想法来收集产品和项目需求. 以下哪种技术最适合将这些想法分组进行回顾和分析?A. 控制图B. 文氏图C. 亲和图D. 头脑风暴<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">一所大学有一个项目, 为新录取的学生实施新的在线申请系统, 试验解决方案显示, 大量申请捕捉到不完整和不准确的数据. 项目团队, 主题专家(SME)和关键相关方召开了一次研讨会, 以调查这些错误的原因. 若要专注于正确的领域进行变更, 从而提高数据捕捉流程的质量, 项目经理应该与团队一起使用下列哪一项技术?A. 因果图B. 亲和图C. 影响图D. 鱼骨图<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">你加入了一个以其风险管理技能为荣的团队. 在与团队成员进行了几次会议之后, 你认为团队对他们的能力过于自信, 并且正在应用不必要的严格性来分析每个项目的风险. 以下哪项不是常用的定量风险分析技术?A. 敏感性分析B. 模拟C. 控制图D. 决策树分析<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">项目经理正在管理一个旨在减少有缺陷和受损产品的自动化项目. 实施新的自动化生产线三周后, 最终产品中增加的缺陷已超过目标水平,若要确定导致缺陷增加的原因. 项目经理可以使用什么工具或技术?A. 控制图B. 散点图C. 石川图D. 过程分析<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">你所在的公司主要生产方便面. 你们的产品一直很受消费者的欢迎，更没有出现任何与食品安全有关的质量问题. 但是，最近一个月，你们已经接到三次关于质量问题的消费者投诉，说是在食用方便面之后发生腹泻.被消费者投诉的产品，是一种新型的产品，其中有一种新的调味品它是通过一条专门的作业线添加的.公司高级管理层任命你领导一个团队来调查所发生的问题.你和你的团队决定使用以下哪一种技术?A. 实验设计B. 控制图C. 流程图D. 帕累托图<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK 6th 页码：P293 章节：8.2.2.4流程图见 8.1.2.5 节.</span><span class="hljs-comment"># 流程图展示了引发缺陷的一系列步骤. 流程图通过展示引发缺陷的步骤来帮助分析问题.</span></code></pre><pre><code class="hljs bash">在检查一个产品批次期间，客户报告了一个缺陷. 项目经理应使用什么来监测批次质量？A. 鱼骨图B. 统计抽样C. 控制图D. 帕累托图<span class="hljs-comment"># C</span><span class="hljs-comment"># 解析：持续监控趋势，是否失控，使用控制图.</span></code></pre><pre><code class="hljs bash">项目团队正在对一家制造公司的原型进行质量检查，在控制图上连续七个点落在平均线上方，但处于控制界限内.质量过程的绩效水平是什么?A. 在规格界限中B. 在规格界限外C. 失控D. 处于控制当中<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P304-8.3.2.5数据表现。七点连续在均值线同侧是典型的失控.</span><span class="hljs-comment"># BD - 不正确，严格来说，A的说法也对，</span><span class="hljs-comment"># 但是问得是质量过程的绩效水平，而不是可交付成果的检查结果. 因此，C正确.</span></code></pre><h4 id="38-会议"><a href="#38-会议" class="headerlink" title="38.会议"></a>38.会议</h4><p>管理相关方参与是与相关方<strong>进行沟通和协作以满足其需求与期望</strong>, 处理问题, 并促进相关方合理参与的过程.<br>本过程的主要作用是, 让项目经理能够<strong>提高相关方的支持</strong>, 并尽可能降低相关方的抵制. 本过程需要在整个项目期间展开.<br>目前”进度延迟和成本超支”, 项目经理”知道哪些相关方会很挑剔”. 我们管理相关方, 既然挑剔的相关主最难管理, 那就应该<u><strong>先解决他们</strong></u>.-&gt; 主动解决</p><ul><li><p>专家判断</p></li><li><p>沟通技术</p></li><li><p>人际关系与团队技能</p><ul><li>冲突管理</li><li>文化意识 : 有助于项目经理和团队通过考虑文化差异和相关方需求, 来实现在效沟通.</li><li>谈判</li><li>观察和交谈 : 通过观察和交谈, 及时了解项目团队成员和其他相关方的工作和态度.</li><li>政治意识 : 通过了解项目内外的权力关系, 建立政治意识</li></ul><p>人际关系与团队技能是综合应用<u><strong>权力, 领导力和沟通技能</strong></u>, 可以缓和团队抵触情绪, 并影响团队使其接受任务.</p><p><strong>沟通技能</strong>:<br>在开展管理相关方参与过程时, 应该根据沟通管理计划, 针对每个相关方采取相应的沟通方式.<br>因为相关方人数过多, 采取<u><strong>电视和广播</strong></u>的有效地沟通方式.</p></li><li><p>基本规则</p></li><li><p>会议</p></li></ul><pre><code class="hljs bash">你的项目团队正在尝试将手工业务流程数字化. 这个项目已经花了好几年的时间, 没有任何重要的发布.由于对项目的进展感到沮丧, 用户部门已经开始开发他们自己的工具来支持他们的手工流程.随着用户部门引入的每一个新工具, 你的项目范围增加, 因为现在你必须将这个新添加的功能纳入你的设计, 这就产生了一个永无休止的范围蔓延问题. 你该如何处理这种情况?A. 提出延长时间的变更请求B. 与用户部门会面, 了解他们的关注点, 并就前进的方向达成一致C. 将问题上报给发起人, 因为这可能会危及整个项目D. 恢复到原始项目范围, 忽略任何新功能<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">你正在领导一个复杂的组织过程自动化项目, 并且很难收集和验证需求. 你最近组建了一个中小企业团队, 帮助你进行需求收集和文档收集.中小型企业现已提供了一系列不同的要求. 为了在专家之间达成共识, 可以应用哪项技术?A. 三角洲技术B. 偏差分析C. 蒙特卡罗法D. 引导<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">某项目经理的团队成员位于三大洲. 项目经理发现, 某些项目团队成员无法及时收到重要信息. 项目经理该做什么?A. 对所有进度计划做出调整, 以便每个人都能同时工作. 从而实现实时沟通和决策B. 轮流安排电话会议和视频会议, 以便顾及每个人的日程安排, 使团队成员能够进行互动C. 在分散工作团队之间仅使用电子邮件和书面通信, 以便团队成员保留书面记录D. 启用各团队内的一个中心人物, 限制分散工作团队之间的沟通, 从而减少错误传达的发生<span class="hljs-comment"># B</span><span class="hljs-comment"># 沟通 -&gt; 会议</span><span class="hljs-comment"># 题干关键词“无法及时收到重要信息”, 本题用排除法为宜.</span><span class="hljs-comment"># A - 错误，关键词说明这是一个沟通问题，而不是进度计划出了问题；</span><span class="hljs-comment"># B - 正确，交互式的沟通（会议）有利于团队成员交流和分享信息.</span><span class="hljs-comment"># C - 错误，推式沟通效果不如交互式沟通.</span><span class="hljs-comment"># D - 错误，为了减少错误传达而限制沟通是消极的做法.</span></code></pre><pre><code class="hljs bash">一个项目的工作说明书(SOW)要求在六个月内交付项目. 项目经理担心时间表不合理.为解决这种情况, 项目经理应该怎么做?A. 按照SOW制定项目管理计划B. 请求额外的资源C. 与主题专家(SMEs)和发起人会面, 以设定可实现的期望D. 通知项目发起人不能满足时间表<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">项目经理正在审查状态报告, 该报告显示进度延迟和成本超支, 该报告必须在两周内提交给指导委员会, 根据过去的经验, 项目经理知道哪些相关方会很挑剔, 项目经理应该怎么做?A. 与挑剔的相关方开会, 解释延迟和成本超支的原因B. 收集项目团队的其他详细信息, 以澄清延迟和成本超支的原因C. 快速识别可以实施的纠正措施, 以改进状态报告D. 联系管理层寻求如何与挑剔的相关方打交道的帮助<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">新的监管规定要求项目紧急升级更严格的安全验证. 因为项目工期本来就非常紧张, 团队情绪较大. 所以项目经理应该采用以下哪种技能让团队接受这个任务?A. 权力B. 领导力C. 人际关系与团队技能D. 沟通技能<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">项目经理正在领导一个项目, 扩建一个小镇上的制造工厂. 在上次市议会会议期间, 当场居民对该项目表示担忧. 项目经理将当地居民添加到相关方参与计划中, 项目经理接下来应该做什么?A. 向当地的报纸提交一份文件, 解释该扩建及其对社区的好处B. 在市议会厅外安装一个滚动屏幕以提供项目进度更新C. 在下次市议会会议期间召开互动问答会议D. 使用电视和广播点让他们了解项目及其担忧的问题<span class="hljs-comment"># D</span><span class="hljs-comment"># A - 报纸受众较低</span><span class="hljs-comment"># B - 议会厅安排没几个人看得到</span><span class="hljs-comment"># C - 受众也不大</span></code></pre><pre><code class="hljs bash">一位项目团队成员在工作场所之外与项目发起人会面后，向项目经理告知该发起人的新期望. 项目经理应如何解决这个问题?A. 与团队和发起人一起审查沟通管理计划B. 与发起人开会，以确认期望C. 将发起人的期望纳入项目中D. 指示团队成员不要与发起人讨论该项目<span class="hljs-comment"># B</span><span class="hljs-comment"># 13.3-管理相关方参与。通过谈判与沟通了解相关方的期望.</span></code></pre><pre><code class="hljs bash">一个团队误解了项目早期阶段记录的一个产品功能.在当前迭代期间，该功能尚末被开发但是业务代表己提到缺陷.项目经理应该如何进行?A. 功能己经得到正式批准，所以开始变更管理过程B. 安排一次会议，以与项目团队和业务代表对该功能进行讨论和头脑风暴C. 通过将问题上报给项目发起人来确保问题得到解决，项目发起人应该与代表讨论问题D. 继续当前的冲刺，从而认识到将在测试阶段识别问题<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P528 章节：13.3.2.5</span><span class="hljs-comment"># 会议决策；问题解决；经验教训和回顾总结；项目开工；迭代规划；状态更新.</span><span class="hljs-comment"># 管理相关方参与需要尽可能当面与其沟通并达成一致.</span></code></pre><pre><code class="hljs bash">你收到客户通知，他们公司对于你们产品的设计标准有点问题将会影响到整个系统.如果这真的发生了将会对你的项目产生大麻烦.客户，一个星期之后来与你讨论你的团队能否在这方面返工.过去与这位客户都是非正式的交流，而这次他要一个正式的会议.你将如何准备这个会议？A. 更新进度计划并且采取一个被动的角色，因为客户没有告诉你这个潜在问题的细节是什么B. 确认你的团队已经提高了生产率，让客户看到你们是多么的有效率C. 通知团队成员让他们准备一份讨论议题D. 明确每一个成员有他们准备任何议题及所需计划的任务<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P386 章节：10.2.2.6</span><span class="hljs-comment"># 会议管理：准备并发布会议议程；</span><span class="hljs-comment"># 确保会议在规定的时间开始和结束；</span><span class="hljs-comment"># 确保参与者受邀并出席；切题；</span><span class="hljs-comment"># 处理会议中的期望、问题和冲突；</span><span class="hljs-comment"># 记录所有行动以及所分配的行动责任人.</span><span class="hljs-comment"># 需要明确会议议程，包含了具体的计划和目标.</span></code></pre><pre><code class="hljs bash">在项目会议期间, 一位新相关方介绍了对当前流程的一些想法, 以改善运营效率.项目经理认为其中一些想法会影响项目的范围, 预算和进度计划.项目经理应该做什么?A. 与所有相关方进一步讨论这些想法B. 请求更多资源来实施这些想法C. 修订项目管理计划,以包含这些想法D. 建议一种更简单的方法,来提高相关方的效率<span class="hljs-comment"># A</span><span class="hljs-comment"># 《PMBOK》第6版524页，13.3-管理相关方参与.</span><span class="hljs-comment"># 管理相关方参与过程中，需要开展多项活动，</span><span class="hljs-comment"># 例如: 在适当的项目阶段引导相关方参与，以便获取、确认或维持他们对项目成功的持续承诺;</span><span class="hljs-comment"># 通过谈判沟通管理相关方期望;</span><span class="hljs-comment"># 处理与相关方管理有关的任何风险或潜在关注点，预测相关方可能在未来引发的问题;</span><span class="hljs-comment"># 澄清和解决已识别的问题.</span><span class="hljs-comment"># 管理相关方参与要积极主动，当面解决问题.</span></code></pre><pre><code class="hljs bash">一个团队误解了项目早期阶段记录的一个产品功能.在当前迭代期间，该功能尚未被开发，但是业务代表已提到缺陷.项目经理应该如何进行?A. 功能已经得到正式批准，所以开始变更管理过程B. 安排一次会议，以与项目团队和业务代表对该功能进行讨论和头脑风暴C. 通过将问题上报给项目发起人来确保问题得到解决，项目发起人应该与代表讨论问题D. 继续当前的冲刺，从而认识到将在测试阶段识别问题<span class="hljs-comment"># B</span><span class="hljs-comment"># 《PMBOK》第6版528页，13.3.2.5-会议-决策.</span><span class="hljs-comment"># 管理相关方参与需要尽可能当面与其沟通并达成一致.</span></code></pre><pre><code class="hljs bash">由于专家对项目需求的意见不一致，项目现在存在落后于进度的风险，项目经理应该怎么做？A. 将问题上报给项目发起人B. 安排一次会议，审查项目范围C. 提交变更请求D. 妥协，同时关注项目目标<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P145 章节：5.2.2.6引导.</span><span class="hljs-comment"># 引导与主题研讨会结合使用，把主要相关方召集在一起定义产品需求.</span><span class="hljs-comment"># 研讨会可用于快速定义跨职能需求并协调相关方的需求差异.</span></code></pre><pre><code class="hljs bash">项目发起人任命一位高级工程师到指导委员会，来帮助监督项目管理计划.该工程师经常不同意由项目团队制定的计划，并在提交标准之前对项目管理计划表达严重关切.项目经理应该怎么做？A. 通知项目发起人，该工程师延迟了规划过程B. 与指导委员会一起审查项目计划，并解决该工程师提出的任何问题C. 与工程师进行私下会议，了解并解决他关切的问题D. 提交项目管理计划，并在以后通过遵循变更管理程序解决该工程师的关切问题<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P527-13.3.2.3人际关系与团队技能。</span><span class="hljs-comment"># 通过冲突管理、谈判、观察和交谈等技能来管理相关方参与项目.</span><span class="hljs-comment"># A - 在不了解详情的前提下就提交，过于武断.</span><span class="hljs-comment"># B - “任何问题”，错误.</span><span class="hljs-comment"># D - 需要首先了解工程师的顾虑，再决策是否对项目管理计划进行调整，直接提交，错误.</span></code></pre><pre><code class="hljs bash">一个更换关键应用程序的项目将影响多个内部和外部服务.在规划过程中，拥有这些服务的项目相关方未能承诺履行约定活动.项目经理应该如何改进项目相关方的参与程度？A. 用谈判和沟通B. 将这种情况上报给指导委员会C. 准备一份概率和影响矩阵D. 将这种情况记录在问题日志中<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P527-13.3.2.3人际关系与团队技能.</span><span class="hljs-comment"># 通过冲突管理、谈判、观察和交谈等技能来管理相关方参与项目.</span><span class="hljs-comment"># B - 监督相关方参与是PM的职责.</span><span class="hljs-comment"># C - 管理相关方参与的过程中，如果暴露出来的问题有引发风险的可能，要将其视为风险进行管理.</span><span class="hljs-comment"># D - 题干中问到了该如何改进，直接找在这个过程中可能使用的工具和技术，而不是先把问题记录在问题日志当中.</span></code></pre><pre><code class="hljs bash">公司的标准政策是为项目预算中的每个单项增加5%的应急费用，财务部门要求对某一定单项增加10%的应急费用，因为它涉及一个新的可交付成果，该单项的主题专家(SME)认为15%的应急费用更为合适,发起人要求项目经理将预算中的平均应急费用降低到3%,项目经理应该为该特定单项增加多少百分比的应急费用？A. 3%B. 5%C. 10%D. 15%<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P243-7.2.2.1专家判断.</span><span class="hljs-comment"># 情景中给出了3%、5%、10%、15%4个值，</span><span class="hljs-comment"># 所以这不是一道考察三点估算的计算题，在4个数值中，主题专家的意见更可靠.</span></code></pre><pre><code class="hljs bash">一位项目团队成员决定，如果所有功能都已经交付那么让客户参与一些替代设计是不必要的，整个团队决定只让技术部门参与进行最好的产品设计.用户验收测试后，客户对所选的设计有所抱怨.为了确保客户接受项目可交付成果，项目经理应该做什么？A. 与客户沟通产品设计是由技术团队决定的B. 要求客户接受项目可交付成果，因为它们符合所有约定的功能要求C. 确保客户和技术团队协作选择新产品设计D. 将设计问题更新到问题日志中并继续执行项目<span class="hljs-comment"># C</span><span class="hljs-comment"># 人际关系与团队技能-质量功能展开(QFD).</span><span class="hljs-comment"># AB - &quot;客户的声音&quot;在设计环节缺失了.</span><span class="hljs-comment"># D  - 只是只记录，问题还是没有得到解决.</span></code></pre><pre><code class="hljs bash">一位新项目发起人习惯性地错过每周一次的状态会议．并经常找职能经理讨论项目的状态, 定期向其发送会议纪要,但似乎一直末读，项目经理下一步应该怎么做？A. 指示职能经理拒绝讨论项目状态B. 将沟通管理计划发送给该发起人C. 将每周会议纪要重新发送给该发起人D. 与该发起人组织一对一会议<span class="hljs-comment"># D</span><span class="hljs-comment"># 解析：PMBOK(6)P523-13.3管理相关方参与.</span><span class="hljs-comment"># 调整与相关方的沟通管理计划，需要从相关方分析入手，挖掘相关方的核心诉求.</span><span class="hljs-comment"># A  - 武断的決策.</span><span class="hljs-comment"># BC - 之前的信息已经发送了，但是相关方并没有阅读,</span><span class="hljs-comment">#      所以问题不在沟通管理计划的缺失上，先了解一下相关方的诉求.</span></code></pre><pre><code class="hljs bash">在项目中途，一个挑剔的客户要求提供定期报告，包含比沟通管理计划中批准的更详细信息.这项请求将导致生产成本超出预算，项目经理不能承受让客户生气的后果，但客户又拒绝见面讨论此事. 项目经理应该怎么做？A. 提醒客户注意相关方参与计划中列出的要求并请求采取纠正措施B. 要求在该相关方组织中有影响的人物帮助指导客户的期望，使其与商定的计划保持一致C. 提交变更请求以支付制作报告的额外费用D. 接受该请求，让客户满意并更新沟通管理计划<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P534- 13.4.2.5 政治意识.</span><span class="hljs-comment"># 相关方提出了新的需求，但是拒绝沟通，</span><span class="hljs-comment"># 但是项目又不能不走变更流程直接执行因此只能找有影响力的人尝试沟通.</span><span class="hljs-comment"># 政治意识：政治意识有助于理解组织战路，理解谁能行使权力和施加影响，</span><span class="hljs-comment"># 以及培养与这些相关方沟通的能力.</span><span class="hljs-comment"># A  - 客户拒绝沟通.</span><span class="hljs-comment"># CD - 直接接受了不对.</span></code></pre><pre><code class="hljs bash">一个项目落后于进度，并超出预算.由于相关方压力增大，项目团队是在高压下工作，这导致了质量与生产经理之间的冲突，每一方都为项目延误和成本超支而指责对方.项目经理应该怎么做？A. 与两位经理会面，并要求他们立即结束冲突，以避免对项目造成负面影响B. 与相关方讨论该情况，并遵照他们的建议处理冲突C. 与两位经理的主管会面，讨论可能的行动D. 查阅团队章程以了解如何处理这个冲突的指导方针<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)527-13.3.2.3人际关系与团队技能.</span><span class="hljs-comment"># 人际关系与团队技能包括且不限于冲突管理、制定决策、情商、影响力、领导力等.</span><span class="hljs-comment"># A - 直接采取强迫的方式进行处理，过于武断，排除.</span><span class="hljs-comment"># B - 冲突的能解决由项目经理主导，所以遵循相关方的建议来处理冲突也是不恰当的.</span><span class="hljs-comment"># D - 团队章程面对的是团队内部的冲突，但是生产经理和质量经理不属于项目团队内部，因此此处不适用.</span></code></pre><h4 id="39-项目发起人"><a href="#39-项目发起人" class="headerlink" title="39.项目发起人"></a>39.项目发起人</h4><p>在项目过程中, 项目经理应与项目发起人持续合作, 使业务战略和项目策略, 项目目标与业务目标保持一致.</p><p>项目发起人 VS 项目经理:</p><p>项目成功是项目经理的最终责任，因此在考试中大部分的问题都是由项目经理来解决和处理.<br>项目经理要先尽到自己的努力. 如果事情超出了<strong>项目经理的控制范围</strong>，我们才会选择<u><strong>上报发起人</strong></u>.</p><p>1.需要找发起人的场景：</p><p>（1）项目还没有启动时；<br>（2）批准项目章程，项目计划时；<br>（3）项目因各种原因需要中止/终止，确定项目是否要继续时；<br>（4）当风险超出了自身可影响的范围，需要使用风险上报策略时；<br>（5）需要使用管理储备时.</p><p>2.不需要找发起人的场景：<br>原则：项目中具体出现的属于项目经理职责范围内的问题，项目经理需要先发挥自己的主动能动性，主动解决.<br>具体的问题场景包括：</p><p>（1）进度、成本、范围等绩效不佳的问题<br>（2）团队冲突，技能不足等团队管理问题；<br>（3）信息传递不及时等沟通问题；<br>（4）规划执行阶段的资源使用问题；<br>（5）与供应商相关的采购问题；<br>（6）风险识别以及风险发生了之后应对的问题（除风险上报策略外）；<br>（7）质量不过关等问题.</p><pre><code class="hljs bash">你正在管理公司计费系统的升级. 在项目进行到一半时, 你已经意识到业务需求已经改变, 并且需要一个新的问题解决方案,这个问题最初被认为是由目前项目的结果来解决的. 你已经在此项目上消耗了大量资源. 你应该怎么做?A. 终止项目B. 通知发起人并讨论你的忧虑C. 提出变更请求以变更项目上的方向D. 除非发起人提出变更请求, 否则请按照批准的计划继续<span class="hljs-comment"># B</span>团队成员对问题日志中大量未解决的技术问题感到不满.项目经理应该怎么做?A. 解释说这些问题应通过让主题专家(SMEs)参与解决B. 请求更多时间来分析未完成的事项C. 该情况上报给项目发起人, 获得支持D. 提交变更请求, 替换项目经理<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P132- 4.3.3.3 问题日志.</span><span class="hljs-comment"># 问题解决需要更多的时间，需要帮团队成员争取更多时间，选择B.</span><span class="hljs-comment"># A - 推给专家不对，项目管理是项目经理的最终责任，不能推给别人.</span><span class="hljs-comment"># C - 这是项目当中的具体问题，是项目经理要解决的，直接上报发起人不合适.</span><span class="hljs-comment"># D - 还没有尝试解决方案就换项目经理不合理.</span></code></pre><h4 id="40-开工会议"><a href="#40-开工会议" class="headerlink" title="40.开工会议"></a>40.开工会议</h4><p>项目开工会议通常意味着规划阶段结束和执行阶段开始.<br>旨在传达项目目标、获得团队对项目的承诺，以及阐明每个相关方的角色和职责.<br>开工会议不仅仅是传递信息，要拿到关键<u><strong>相关方的承诺</strong></u>.<br>对相关方的管理是项目经理的责任.</p><p>当计划被批准, 准备执行时开的会叫做 <u><strong>项目开工会议</strong></u>, 或者叫 项目开踢会议.<br>当项目启动阶段结束, 准备开始做计划时开的会叫 <u><strong>项目启动会议</strong></u>.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/025.png" alt="025" style="zoom:80%;margin-left: 0;"><pre><code class="hljs bash">某大型项目的项目经理两周前举行了开工会议.会议邀请未发送给其中一位关键相关方，造成了一些误解.项目经理该做什么来应对这种情况？A将启动会议演示文稿和摘要发送给相关方B请项目发起人与相关方会面，确定他们对项目的目标及期望C与未受邀参加启动会议的相关方举行审查会议D让相关方相信这是错误，但了解项目的目标非常重要<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">项目经理负责一个新项目, 项目章程和项目计划已经获得批准.如果要开始实施项目,项目经理下一步应该做什么?A. 召开项目启动会议B. 召开项目开工会议C. 召开需求研讨会D. 召开项目规划会<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目经理集合在地理上分散的团队，为一家组织实施新的强制性监管要求.若要获得相关方的承诺，项目经理应该怎么做?A. 设置必要的沟通基础设施B. 召开项目启动大会C. 执行相关方分析D. 让团队集中办公<span class="hljs-comment"># B</span><span class="hljs-comment"># 强化沟通管理、相关方管理、资源管理都不是问题的关键, 排除ACD.</span></code></pre><pre><code class="hljs bash">某大型项目的项目经理两周前举行了开工会议. 会议邀请未发送给其中一位关键相关方，造成了一些误解. 项目经理该做什么来应对这种情况？A. 将启动会议演示文稿和摘要发送给相关方B. 请项目发起人与相关方会面，确定他们对项目的目标及期望C. 与未受邀参加启动会议的相关方举行审查会议D. 让相关方相信这是错误，但了解项目的目标非常重要<span class="hljs-comment"># C</span><span class="hljs-comment"># 4.2.2.4-会议。项目开工会议通常意味着规划阶段结束和执行阶段开始.</span><span class="hljs-comment"># 旨在传达项目目标、获得团队对项目的承诺，以及阐明每个相关方的角色和职责.</span><span class="hljs-comment"># 开工会议不仅仅是传递信息，要拿到关键相关方的承诺.</span><span class="hljs-comment"># 所以只考虑补发信息是不足的，排除选项AD.</span><span class="hljs-comment"># B - 对相关方的管理是项目经理的责任.</span></code></pre><pre><code class="hljs bash">一些关键相关方不能参加预定的项目开工大会，项目负责人要求项目经理继续举行会议.因为他们还要参加其他会议。项目经理应该做什么确保顺利召开项目开工大会，以便能够开始执行项目？A. 在没有太多项目相关方参与的情况下继续召开会议B. 取消会议，并单独跟进各个相关方C. 推迟会议，直到所有相关方和项目负责人都可以参加D. 重新安排会议，以便除项目负责人以外的所有相关方都可以参加<span class="hljs-comment"># C</span><span class="hljs-comment"># 4.2.2.4-会议。项目开工会议通常意味着规划阶段结束和执行阶段开始.</span><span class="hljs-comment"># 旨在传达项目目标、获得团队对项目的承诺，以及阐明每个相关方的角色和职责.</span><span class="hljs-comment"># 开工会议不仅仅是传递信息，要拿到关键相关方的承诺，</span><span class="hljs-comment"># 所以尽可能让所有人员能够参加会议.</span></code></pre><pre><code class="hljs bash">由于没有空，具有批准权限的相关方拒绝了参与项目开工会议的邀请.该项目时间紧迫，及时开工对于满足截止日期至关重要.项目经理应该做什么?A. 升级上报给项目发起人B. 在没有他们参加的情况下举行项目开工会议C. 将会议重新安排在他们能够参与的时间D. 询问与会者以确定开工会议是否有必要<span class="hljs-comment"># A</span><span class="hljs-comment"># 4.2.2.4-开工会议.</span><span class="hljs-comment"># 项目开工会议通常意味着规划阶段结束和执行阶段开始，</span><span class="hljs-comment"># 旨在传达项目目标、获得团队对项目的承诺，</span><span class="hljs-comment"># 以及阐明每个相关方的角色和职责.</span></code></pre><pre><code class="hljs bash">在项目启动大会期间，人力资源经理沟通说，在提供详细的项目进度计划之前将不会提供资源.若要获得资源，项目经理应该怎么做？A. 将该问题上报给项目发起人B. 提交工作说明书（SOW）C. 创建一份详细的活动清单D. 参见责任分配矩阵（RAM）<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P329 章节：9.3.</span><span class="hljs-comment"># 不能获得项目所需的资源时，可能会影响项目进度、预算、客户满意度、质量和风险;</span><span class="hljs-comment"># 资源或人员能力不足会降低项目成功的概率，最坏的情况可能导致项目取消.</span><span class="hljs-comment"># 资源经理明显对项目渐进明细的特点不了解，需要发起人介入处理.</span><span class="hljs-comment"># keywords: 在项目启动大会期间.</span><span class="hljs-comment"># 项目经理已经不能处理这个问题, 可以上报.</span></code></pre><h4 id="41-确认范围"><a href="#41-确认范围" class="headerlink" title="41.确认范围"></a>41.确认范围</h4><p>获得相关方验收的可交付成果是确认范围这一过程的重要输出.</p><p>确认范围的输入 : 控制质量的输入”发现不符合事先定义的项目标准”, 可以确认可交付成果的验收标准, <u><strong>验收标准在范围基准</strong></u>里.<br>产品是否满足验收标准, 也可以在<u><strong>质量测量指标</strong></u>的参考中体现.<br>质量测量指标 : 不仅包括待测量的指标, 也包括测量方法.<br>质量核对单 : 则是用来核实所要求的一系列步骤是否已经执行的清单.</p><p>确认范围 : 是为了得到客户对可交付成果的认可. 当可交付成果完成时, 应<u><strong>及时”确认范围”</strong></u>.<br>在项目快结束时发现客户认为可交付成果不符合需求, 一定是之前”确认范围”出了问题.<br>可交付成果做完了, 但是相关方的验收遇到了困难. 因此, <strong>确认范围</strong>一定要有客观的<strong>验收标准</strong>, 这样就不用被相关方左右.</p><pre><code class="hljs bash">你在一家制造厂设立了一个项目管理办公室, 并倡导在所有内部组织项目上进行标准化项目管理.由于业务的性质, 员工非常了解质量管理过程, 但不知道范围管理过程.以下哪一项最能描述确认范围过程的作用?A. 验证项目质量是否满足要求B. 控制对项目范围的变更C. 获得相关方对项目可交付成果的正式接受D. 验证项目的所有目标都已实现<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">一个涉及国家教育新标准的项目正在执行中, 在确认准备好的教科书期间, 团队成员发现某些书籍不符合事先定义的项目标准.项目经理应该参考下列哪一项来确认这个问题?A. 范围基准和质量核对单B. 进度基准和质量核对单C. 项目基准和质量核对单D. 范围基准和质量测量指标<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)5.5.1 确认范围的输入&amp; 8.3.1 控制质量的输入.</span><span class="hljs-comment"># &quot;发现不符合事先定义的项目标准&quot;，可以确认可交付成果的验收标准，</span><span class="hljs-comment"># 验收标准在范围基准里. 产品是否满足验收标准，也可以在质量测量指标的参考中体现.</span><span class="hljs-comment"># BC - 验收标准在范围基准里，首先排除.</span><span class="hljs-comment"># A  - 质量测量指标不仅包括待测量的指标，也包括测量方法；</span><span class="hljs-comment">#      而质量核对单则是用来核实所要求的一系列步骤是否已经执行的清单. </span><span class="hljs-comment">#      因此整体来看，D更合适.</span></code></pre><pre><code class="hljs bash">在项目验收阶段, 一个可交付成果不符合客户的需求, 于是项目经理查阅了记录并确认这个可交付成果满足质量要求,那么这种情况最可能是哪个过程出了问题导致的?A. 定义范围B. 确认范围C. 收集需求D. 控制范围<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目团队已完成项目管理计划中的所有可交付成果. 该团队期待尽快做出收尾决定. 但是, 项目经理正在努力向相关方证明该决定的合理性. 若要避免这个问题, 项目经理应该事先做什么?A. 定义项目可交付成果的验收标准B. 确认满足发起人的期望C. 在进入最终产品阶段之前解决所有客户投诉D. 确保最终产品符合承诺的业务价值<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">项目可交付成果已经完成，但由于成果不及预想，主要项目相关方不愿接受这些可交付成果.项目经理怎么做？A. 确保主要项目相关方的要求均得到满足B. 与主要项目相关方确认项目范围和可交付成果C. 继续开展项目收尾工作D. 评估项目所受影响，并相应地激活变更请求过程<span class="hljs-comment"># B</span><span class="hljs-comment"># 范围管理 -&gt; 确认范围</span><span class="hljs-comment"># “不愿意接受”是主观意见，是否能够获得验收确认要看验收标准.</span><span class="hljs-comment"># 如果项目的可交付成果虽然不理想但是符合了验收的条件，项目相关方仍然要签字确认.</span><span class="hljs-comment"># A - 要看项目相关方的要求是否在验收标准中得以明确</span><span class="hljs-comment"># C - 在选项B之后.</span><span class="hljs-comment"># D - 如果项目的可交付成果未能满足验收标准要对缺陷通过变更的方式进行补救，</span><span class="hljs-comment">#     在选项B之后.</span></code></pre><pre><code class="hljs bash">在一个大型的IT实施项目中，客户在确认可交付成果期间发现了缺陷，并且没有在用户验收测试(UAT)上签字，进行进一步分析之后.项目经理将报告的缺陷识别为新需求。在这种情况下，项目经理应该怎么做？A. 与客户分享验收标准B. 实施已识别的新需求C. 根据基准计划分析需求D. 遵循升级上报程序<span class="hljs-comment"># A</span><span class="hljs-comment"># 范围管理 -&gt; 范围基准</span><span class="hljs-comment"># 题干中的关键字是：&quot;确认可交付成果期间&quot;, &quot;新需求&quot;.</span><span class="hljs-comment"># 在项目验收期间应以范围基准中的验收标准为标准核实可交付成果, 选项A正确.</span><span class="hljs-comment"># B - 实施新的需求需要实施变更.</span><span class="hljs-comment"># C - 根据基准计划分析需求需要客户售前提交正式的变更请求.</span><span class="hljs-comment"># D - 此时项目未达到失控状态，排除.</span></code></pre><pre><code class="hljs bash">在制定范围管理计划期间，相关方要求将实验技术添加到项目范围内，以协助产品营销. 项目经理应该做什么？A. 将项目储备用于支付试验技术的成本B. 根据试验技术的成本增加项目预算C. 将相关方包含在范围规划会议中D. 与相关方一起审查范围基准<span class="hljs-comment"># C</span><span class="hljs-comment"># 范围管理 -&gt; 会议</span><span class="hljs-comment"># 题干中的关键词：&quot;执行范围管理计划期间&quot;. 题目中提到制定范围管理计划期间.</span><span class="hljs-comment"># 所以寻找选项中规划范围管理的输入或工具，选项C正确.</span><span class="hljs-comment"># A - 储备用于进度，成本和风险，排除.</span><span class="hljs-comment"># B - 此时还没有开始估算成本，排除.</span><span class="hljs-comment"># D - 制定范围管理计划时还未产生范围基准，排除.</span></code></pre><pre><code class="hljs bash">一个项目涉及来自一个知名供应商的硬件，在项目的中间阶段，该项目经理注意到硬件的质量下降.一名团队成员希望立即开展质量检查.哪一份文件中包含检查规定？A. 质量测量指标B. 风险登记册C. 采购合同D. 绩效报告<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P287章节：8.1.3.2质量测量指标：</span><span class="hljs-comment"># 质量测量指标专用于描述项目或产品属性，</span><span class="hljs-comment"># 以及控制质量过程将如何验证符合程度, 质量该怎么检查，</span><span class="hljs-comment"># 检查到什么程度，在质量测量指标里.</span></code></pre><pre><code class="hljs bash">项目经理的下一次晋升取决于成功按时交付一个高端项目，但该项目落后于进度几周时间. 项目经理在下一次状态会议上怎么做?A. 报告测量指标和状态符合项目相关方的期望B. 报告交付符合进度计划，并计划将进度恢复正常轨道C. 与项目发起人一起分享该信息，并请求指导D. 准确报告测量指标和状态，表明将存在负面后果<span class="hljs-comment"># D</span><span class="hljs-comment"># 项目经理需要根据实际情况汇报项目状态，并寻求进一步解决方案.</span></code></pre><p> 范围与质量:</p><p>可交付成果是在某一过程、阶段或项目完成时，必须产出的任何独特并可核实的产品、成果或服务能力.<br>它通常是项目结果，并可包括项目管理计划的组成部分.</p><p>4.3指导与管理项目工作输出可交付成果；<br>5.5确认范围过程输出：由客户或发起人正式签字批准的符合验收标准的可交付成果.<br>8.3控制质量过程输出：已经完成，并被控制质量过程检查为正确的可交付成果；</p><p>重点：<br>确认范围过程与控制质量过程的不同之处在于，</p><ul><li>前者关注可交付成果的验收.</li><li>而后者关注可交付成果的正确性及是否满足质量要求.</li></ul><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/036.png" alt="036" style="zoom:67%;margin-left: 0;"><pre><code class="hljs bash">一个项目分多个阶段执行. 项目团队完成了第一阶段的可交付成果.第一阶段的可交付成果已经过完整性确认. 目前正在执行下列哪一项项目过程？A. 确认范围过程B. 管理质量过程C. 控制范围过程D. 控制质量过程<span class="hljs-comment"># A</span><span class="hljs-comment"># 指南-5.5确认范围，</span><span class="hljs-comment"># 是正式验收已完成的项目可交付成果的过程.</span><span class="hljs-comment"># 本过程的主要作用是，使验收过程具有客观性；</span><span class="hljs-comment"># 同时通过确认每个可交付成果，来提高最终产品、服务或成果获得验收的可能性.</span></code></pre><pre><code class="hljs bash">由于一个组织的项目发起人在地理上分散在不同地方.项目管理办公室(PMO)启动了一个项目来执行定制的、统一的组织过程.这个过程包括在每个里程碑结束时产生所需的工作.该项目的结果将被用作未来执行的原型.确保这个目标取得成功，项目经理应该怎么做？A. 制定详细的项目管理计划，与所有相关方分享B. 让相关方参与并在每个阶段结束时要求签字C. 促成每周状态更新的虛拟会议D. 每周更新一次项目管理计划<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK6)P163，5.5-确认范围.</span><span class="hljs-comment"># &quot;确保这个目标取得成功&quot;，即项目成果要获得相关方的正式验收.</span><span class="hljs-comment"># A - 详细的项目管理计划有助于项目的成功，</span><span class="hljs-comment">#     但编制好的项目管理计划发送给哪些相关方要根据沟通管理计划实施.</span><span class="hljs-comment"># C - 分散在不同地方的是组织的发起人，发起人为项目提供资金，</span><span class="hljs-comment">#     但对日常的沟通，发起人参与的并不频繁.</span><span class="hljs-comment">#     每周的状态更新会议更多的是针对项目团队成员.</span><span class="hljs-comment"># D - 项目管理计划在变更请求批准后更新，并不是按照划分好的时间周期进行.</span></code></pre><pre><code class="hljs bash">项目发起人非常注意与用户/客户一起制定效益分析和范围.任命的项目经理后来按时按预算完成项目.项目发起人应该如何向用户/客户确保最终可交付成果达到预期目标？A. 查阅工作分解结构(WBS)确认所有工作包已经完成B. 向用户/客户指出，由于满足了进度计划和预算要求，该项目取得成功C. 要求分配的效益负责人在书面报告中提供他们的反馈以进行验证D. 向用户/客户提供在项目结束时使用的一份清单，列出所有已解决的事项<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P163-5.5确认范围.</span><span class="hljs-comment"># 项目的交付成果要获得正式验收，在通过验收后，进行移交程序.</span><span class="hljs-comment"># A - 属于内部的质量控制过程.</span><span class="hljs-comment"># B - 项目是否成功，由项目发起人依据项目章程中的项目成功标准判定.</span><span class="hljs-comment"># D - 已解决事项和遗留问题列表在验收后出具的项目最终报告中记录.</span></code></pre><h4 id="42-沟通模型"><a href="#42-沟通模型" class="headerlink" title="42.沟通模型"></a>42.沟通模型</h4><p>沟通: 发送方发送 -&gt; 接收方反馈</p><p>沟通活动可按多种维度进行分类: </p><ul><li>内部 : 针对项目内部或组织内部的相关方</li><li>外部 : 针对外部相关方, 如客户, 供应商, 其他项目, 组织, 政府, 公众和环保倡导者</li><li>正式 : 报告; 正式会议(定期或临时); 会议议程和记录, 相关方简报和演示</li><li>非正式 : 电子邮件; 社交媒体; 网站, 以及非正式临时讨论的一般沟通活动</li><li>层级沟通 : 相关方或相关方群体相对于项目团队的位置将会以如下影响信息传递的形式和内容<ul><li>向上沟通</li><li>向下沟通</li><li>横向沟通</li></ul></li><li>官方沟通 : 年报</li><li>非官方沟通 : 非正式的手段</li><li>书面与口头沟通</li></ul><p><u><strong>电子邮件</strong></u>通常被视为<strong>非正式</strong>的<strong>书面沟通</strong>. 电子邮件是一个书面的沟通形式.<br>非正式书面沟通的另一个例子是<u><strong>社交媒体</strong></u>.</p><pre><code class="hljs bash">项目经理把发起人的指示函件通过电子邮件转发给了异地的团队成员, 该团队成员收到该邮件后及时发送了邮件回执, 并开始采取行动.然而项目经理到项目上去检查时, 对项目团队成员的工作非常不满意, 坚持说他曲解了邮件的内容. 这可能是沟通中哪个环节出了问题?A. 项目经理编码错误B. 不应该采取电子邮件来传递信息C. 缺乏信息反馈D. 没有及时告知收到信息<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">你是项目团队的成员, 项目经理经常通过电子邮件向你详细说明, 他对你在项目中的工作进展情况的看法. 哪种沟通形式的描述最准确?A. 非正式的语言B. 正式的书面C. 正式的语言D. 非正式的书面<span class="hljs-comment"># D</span></code></pre><h4 id="43-文化意识"><a href="#43-文化意识" class="headerlink" title="43.文化意识"></a>43.文化意识</h4><p>文化意识指理解个人, 群体和组织之间的差异, 并据此调整项目的<u>沟通策略</u>.<br>具有文化意识并采取后续行动, 能够最小化因项目相关方社区内的文化差异而导致的理解错误和沟通错误.</p><p>keywords : 两拨人的背景不同, 文化差异, 风格差异</p><pre><code class="hljs bash">项目团队由前军事和非军事小组成员组成. 没有军事背景的团队成员认为前军事团队成员在他们的项目方法中过于结构化和僵化.前军事成员认为其他团队成员更随意的方式表明他们对该项目不太投入.什么样的工具或技术对项目经理和团队成员进行有效沟通最有用?A. 政治意识B. 团队章程C. 冲突管理D. 文化意识<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">有一种激励理论认为，真正能激励人的是工作本身. 包括工作中的责任感、职业发展和自我实现等，而不是工作所带来的经济收入.这种激励理论是？A. 戴明的PDCA循环理论B. 麦克利兰的成就动机理论C. 马斯洛的需求层次理论D. 赫兹伯格的激励理论<span class="hljs-comment"># D</span><span class="hljs-comment"># 赫兹伯格的激励理论：</span><span class="hljs-comment"># 保健因素：恶劣的卫生因素可能破坏激励.</span><span class="hljs-comment"># 包括：工作环境、薪金、职业保障、个人生活、工作关系、安全；</span><span class="hljs-comment"># 激励因素：能够激励人们的是工作本身，责任、自我实现、晋升、专业发展.</span><span class="hljs-comment"># 保健因素：没有什么好满意的.</span><span class="hljs-comment"># 激励因素：没有什么不满意的, 能够激励人们的是工作本身.</span></code></pre><pre><code class="hljs bash">项目团队成员认为能够独立工作，并认为项目经理信任他们能在不严密管理团队的情况下完成任务.项目经理证明的是哪一种管理方式？A. 归属需求B. X理论C. Y理论D. 权力需求<span class="hljs-comment"># C</span><span class="hljs-comment"># XY理论.</span><span class="hljs-comment"># X理论：人生来是自私、消极的，只能使用马斯洛低层次需求进行激励，适用于严格的管理.</span><span class="hljs-comment"># Y理论：人生来愿意工作并有所成就，能够自我激励，用马斯洛高层次需求进行激励，适用于支持性的工作氛围;</span><span class="hljs-comment"># X理论对人的看法是悲观的、消极的;</span><span class="hljs-comment"># Y理论对人的看法是乐观的、积极的;</span><span class="hljs-comment"># 题目中信任员工，独立工作，因此选择Y理论.</span></code></pre><pre><code class="hljs bash">上一次冲刺回顾之后，你与团队决定开始用迭代方法完成更改和流程改进.你应该使用以下哪种方法或工具?A. PDCA(计划, 执行, 检查, 行动)B. 根本原因分析C. 全面生产维护(TPM)D. 价值流程图<span class="hljs-comment"># A </span><span class="hljs-comment"># PMBOK(6)第275页</span><span class="hljs-comment"># A - PDCA是持续改进的基本方法，</span><span class="hljs-comment">#     通过这个质量改进举措可以提高项目管理的质量以及最终产品、服务或成果的质量.</span><span class="hljs-comment"># B - 根本原因分析关注识别问题的主要原因，</span><span class="hljs-comment">#     它可用于识别出现偏差的原因以及项目经理为达成项目目标应重点关注的领域.</span><span class="hljs-comment"># C - TPM活动就是通过全员参与，并以团队工作的方式，</span><span class="hljs-comment">#     创建并维持优良的设备管理系统，提高设备的开机率(利用率)，增进安全性及高质量，</span><span class="hljs-comment">#     从而全面提高生产系统的运作效率.</span><span class="hljs-comment"># D - 价值流程图运用精益制造的工具和技术来帮助企业理解和精简生产流程.</span></code></pre><pre><code class="hljs bash">两个项目团队正在为同一个项目工作一个团队在海外的客户现场工作，另一个团队在公司总部工作，客户要求新的文档格式以符合当地法律以及战略供应商的新要求，位于公司总部的团队抱怨说，公司已有程序和政策规定不允许对文档格式进行任何变更.客户现场的项目经理应该怎么做？A. 向前推进项目，并在问题日志中更新客户请求的详细信息B. 请求变更以获得公司总部的新格式C. 根据客户请求修改格式，并通知公司团队D. 与公司总部的项目经理召开视频会议以解决该问题<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P348-9.5.2.1 冲突管理.</span><span class="hljs-comment"># 冲突管理，首先采用合作/解决问题，D就是合作/解决问题.</span><span class="hljs-comment"># A  - 属于撤退.</span><span class="hljs-comment"># BC - 都算是强迫，也是直接采取了措施，需要先开会讨论.</span></code></pre><h4 id="44-沟通管理计划"><a href="#44-沟通管理计划" class="headerlink" title="44.沟通管理计划"></a>44.沟通管理计划</h4><p>沟通管理计划描述将如何规划, 结构化, 执行与监督项目沟通, 以提高沟通的有效性.<br>关于沟通相关的选项, 选择沟通中最重要的文件 - <strong><u>沟通管理计划</u></strong>, 让项目团队更好的理解项目目标.<br>项目状态更新, 属于项目信息问题, 应该<strong>审核沟通管理计划</strong>.<br>项目状态的更新属于项目信息, 相关方感到了担心, 发生了这样的问题, 项目经理要<strong>先审查沟通管理计划</strong>, 必要的时候重新收集沟通<u>需要发起变更</u>.</p><p><u>沟通工具和沟通方式</u>是在沟通管理计划中被定义的. 因此, 若要改变沟通工具和沟通方式, 项目经理应更新<strong>沟通管理计划</strong>.</p><p>沟通管理计划:<br><strong>项目相关方的沟通需求</strong>体现在沟通管理计划当中.<br>沟通管理计划，沟通管理计划中包括：<strong>需沟通的信息、上报步骤、项目信息流向图</strong>等.</p><p>keywords : 信息, 报告, 项目状态, 误解, 通知, 开会, 上报步骤, 术语表</p><p><u><strong>场景-常见沟通问题场景</strong></u><br>1、沟通问题（项目中的信息问题，汇报问题）是PMP考试中很常见的情景题，常选选项：<br>     (1) (更新、审查或创建)沟通管理计划<br>     (2) (做好)沟通规划<br>     (3) (进行)沟通需求分析<br>     (4) 沟通管理与相关方管理混在一起的问题，是最困惑的，是沟通还是相关方问题应参考题干，<br>          去除描述性的状语修饰词来申题。<u>相关方的问题通过沟通去解决</u>.</p><p>2、选沟通管理计划的常见场景：<br>    (1) 抱怨没收到，不知情；<br>    (2) 提出新的沟通需求：月会改为周会，远程改为面对面，要求额外信息汇报等.</p><p><strong>冲突管理方法</strong>:</p><p>撤退/回避 : 从实际或潜在冲突中退出, 将问题推迟到准备充分的时候, 或者将问题推给其他人解决.<br>从<strong>冲突中暂时退出</strong>, 搁置争议.</p><p>缓和/包容 : 强调一致而非差异; 为维持和谐与关系而退让一步, 考虑其他方的需要.<br>迁就对方, 为了<strong>缓和双方的关系而牺牲自己的诉求</strong>来包容对方.</p><p>妥协/调解 : 为了暂时或部分解决冲突, 寻找能让各方都在一定程度上满意的方案, 但这种方法有时会<strong>导致”双输”局面</strong>.<br>妥协 : 需要寻找使各方满意一定程度的选项. 以便暂时或部分解决冲突. 这将是处理当前情况的最佳方法.<br><strong>双方各让一步</strong>, 以求达成共识.</p><p>强迫/命令 : 以牺牲其他方为代价, 推行某一方的观点; 只提供赢 - 输 方案. 通常是利用权力来强行解决紧急问题, 这种方法通常会导致”赢输”局面.</p><p>合作/解决 : 综合考虑不同的观点和意见, 采用合作的态度和开放式对话引导各方达成共识和承诺, 这种方法可以带来”双赢”局面.<br>找到<strong>双方都满意</strong>的解决方案.<br>优先级的问题导致冲突, 优先选择合作/解决问题, 若是<u><strong>弱矩阵</strong></u>, 项目经理找团队意义不大, 需要找<strong>职能经理</strong>同意以后才能安排.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/028.png" alt="028" style="zoom:80%;margin-left: 0;"><pre><code class="hljs bash">相关方感觉他们收到的信息十分复杂, 难以理解, 因此, 不能正确做出决定. 若要解决这个问题, 应该怎么做?A. 审查沟通需求B. 减少报告数量C. 包含一个常用术语表D. 添加解释性附件<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P377 章节：10.1.3.1 沟通管理计划.</span><span class="hljs-comment"># 沟通管理计划是项目管理计划的组成部分，描述将如何规划，</span><span class="hljs-comment"># 结构化、执行与监督项目沟通，以提高沟通的有效性.</span><span class="hljs-comment"># 该计划包括如下信息：相关方的沟通需求. 凡信息，找沟通.</span></code></pre><pre><code class="hljs bash">为了应对一些计划任务上的延误, 项目经理重新安排了一些后续任务的优先级以解决这个问题.重新确定优先级并没有使项目回到正轨, 现在项目经理需要将问题上报给项目相关方.为了上报问题, 项目经理首先应该做什么?A. 查阅沟通管理计划B. 审查相关方参与计划C. 查阅变更管理计划D. 审查风险管理计划<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P377 章节：10.1.3.1 沟通管理计划.</span><span class="hljs-comment"># (1) 相关方的沟通需求;</span><span class="hljs-comment"># (2) 需沟通的信息，包括语言、形式、内容和详细程度;</span><span class="hljs-comment"># (3) 上报步骤;</span><span class="hljs-comment"># (4) 发布信息的原因;</span><span class="hljs-comment"># (5) 发布所需信息、确认已收到，或作出回应上报步骤在沟通管理计划里.</span></code></pre><pre><code class="hljs bash">一个项目团队正在不同时区工作, 团队成员之间经常出现误解, 尽管项目经理试图解决这个问题, 但这个问题一直没有得到解决.若要改善这种情况, 项目经理应该怎么做?A. 在团队会议上解决这个问题B. 与每位团队成员分别解决这个问题C. 修订沟通管理计划D. 审查相关方的需求<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK 第六版第十章概述中提到 </span><span class="hljs-comment"># &quot;在项目沟通中，需要尽力预防理解错误和沟通错误，</span><span class="hljs-comment"># 并从规划过程所规定的各种方法，发送方，接收方和信息中做出谨慎选择&quot;</span><span class="hljs-comment"># 由此可见，沟通中出现无解，应从规划过程相关的方法（修订沟通管理计划）的方向去解决.</span><span class="hljs-comment"># 典型的团队问题通过沟通去解决.</span></code></pre><pre><code class="hljs bash">在季度管理会议期间, 发现项目的完成日期将延期. 尽管影响这一延期的问题始于项目早期阶段, 但之前的多次季度会议纪要都显示项目进展正常.项目经理应该做什么?A. 更新项目进度计划并证明延期的正当理由B. 审查沟通管理计划, 以改善沟通的准确性C. 确保使用有效的方法来沟通项目的状态D. 增加项目状态沟通的频率<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目经理在一个全球项目中使用某个地理位置的特定术语. 由于对这些术语的理解有限, 一些相关方拒绝了项目计划.项目经理下一步应该做什么?A. 使用在线翻译工具将该计划翻译成各种相关方的语言并重新分发B. 要求拒绝该计划的相关方使用专业翻译人员来帮助他们理解C. 与相关方讨论术语问题, 并在该计划中添加词汇表以供将来参与D. 修改术语使其更加适用化, 以便所有相关方能普遍理解并统一该计划<span class="hljs-comment"># C</span><span class="hljs-comment"># 沟通 -&gt; 管理沟通</span><span class="hljs-comment"># 管理沟通是确保项目信息及时且恰当地收集、</span><span class="hljs-comment"># 生成、发布、存储、检索、管理、监督和最终处置的过程.</span><span class="hljs-comment"># 术语要严谨统一，所以采用术语表的方式要好过其他选项.</span></code></pre><pre><code class="hljs bash">一个项目相关方抱怨收到太多信息, 另一个相关方却抱怨收到的信息太少, 项目经理应该做什么?A. 标记报告的不同部分, 并要求相关方仅关注属于他们的部分B. 制定一份执行, 负责, 咨询和知情(RACI)图, 以确保满足相关方的沟通需求C. 安排召开两个相关方之间的会议以达成妥协D. 进行沟通需求分析以制定一份整体沟通管理计划<span class="hljs-comment"># D</span><span class="hljs-comment"># 沟通 -&gt; 监督沟通</span><span class="hljs-comment"># 对于沟通管理计划的更新，要根据相关方对信息获取的需求进行分析后决策.</span><span class="hljs-comment"># 而不能仅仅根据相关方的“抱怨”冒然更新，所以选项A错误.</span><span class="hljs-comment"># B - RACI通常用于分配职责与角色.</span><span class="hljs-comment"># C - 问题的焦点不是冲突，而是信息传递上存在缺陷.</span></code></pre><pre><code class="hljs bash">项目经理管理一个分布式团队, 团队成员位于五个国家. 由于时区差异, 他找不到所有团队成员都能接受的时间.哪种冲突解决技术最适合这种情况?A. 妥协B. 回避C. 强迫D. 撤退<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">客户和硬件工程团队对用于衡量质量的控制图现值意见不一致.项目经理与两个相关方开会并听取他们的意见，为了继续该项目，项目经理觉得使用双方意见的平均值.这属于下列哪一项的实例？A. 缓解B. 妥协C. 解决问题D. 协作<span class="hljs-comment"># B</span><span class="hljs-comment"># 资源 -&gt; 人际关系与团队技能 -&gt; 冲突管理</span><span class="hljs-comment"># “适用双方意见的平均值”，冲突的双方都做出了让步，属于妥协策略.</span></code></pre><pre><code class="hljs bash">项目经理的任务是提高组织对其公司<span class="hljs-string">&quot;品牌重塑&quot;</span>项目的认识. 若要实现这一点, 项目经理应该做什么?A. 要求项目管理办公室(PMO)创建内部项目储存库B. 确保定期更新公司的社交媒体账户C. 确保所有项目文件都存储在项目管理信息系统(PMIS)D. 更新沟通管理计划, 并让组织的内部沟通团队参与<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P377-10.1.3.1 沟通管理计划.</span><span class="hljs-comment"># 此题只看题干描述，无法直接看出考点，</span><span class="hljs-comment"># 从四个选项来看，都是沟通相关的选项，因此选择沟通中最重要的文件 《沟通管理计划》.</span><span class="hljs-comment"># ABC - 这些信息的储存、分享方式.</span><span class="hljs-comment"># 都可以在D沟通管理计划中体现，从而让项目团队更好的理解项目目标.</span></code></pre><pre><code class="hljs bash">项目的状态更新与相关方参与计划不符, 项目经理应该怎么做?A. 请求高级管理层提供建议B. 审查沟通管理计划C. 进行项目审查D. 执行检查和审计<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P377- 10.1.3.1 沟通管理计划.</span><span class="hljs-comment"># 项目状态更新，属于项目信息问题，应该审核沟通管理计划.</span><span class="hljs-comment"># 其他选项都与项目信息无关.</span></code></pre><pre><code class="hljs bash">在和客户的会议中, 客户提出对一项功能进行修改, 项目经理认为这项修改并无必要, 但是客户非常坚持这个要求, 导致会议无法继续下去. 项目经理评估修改这项功能对项目影响很小, 于是选择接受客户的要求. 项目经理使用的是哪种冲突管理技术?A. 缓和/包容B. 合作/解决C. 妥协/调解D. 撤退/回避<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">由于项目经理未能提供项目状态更新, 一位关键相关方对项目感到担心, 项目经理应该做什么?A. 与所有团队成员一起审查沟通管理计划B. 将更新后的沟通管理计划发送给相关方C. 与该相关方开会, 以提供更新D. 与所有相关方一起召开项目评审会议<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P377-10.1.3.1 沟通管理计划.</span><span class="hljs-comment"># 项目状态的更新属于项目信息，相关方感到了担心；</span><span class="hljs-comment"># 发生了这样的问题，项目经理要先审查沟通管理计划，</span><span class="hljs-comment"># 必要的时候重新收集沟通需要发起变更.</span><span class="hljs-comment"># B - 变更沟通管理计划以后再做.</span><span class="hljs-comment"># C - 不能直接更新.</span><span class="hljs-comment"># D - 与所有相关方召开评审会议没有必要.</span></code></pre><pre><code class="hljs bash">一名团队成员建议采用即时通信工具替代电子邮件来提升团队的沟通效率, 这项提议得到了团队成员的普遍认同.在实施这项建议前, 项目经理应该怎么做?A. 更新变更管理计划B. 更新沟通管理计划C. 更新相关方参与计划D. 更新经验教训登记册<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">在项目执行阶段, 发现了一个缺陷, 影响到一个弱矩阵组织中的两个职能团队. 两个团队都不想承担修复缺陷的责任, 因为他们忙于完成其他任务.项目经理应该做什么?A. 与两位职能经理讨论此事, 就修复缺陷达成一致意见B. 与两个职能团队开会, 就修复缺陷的责任达成一致意见C. 将任务分配给修复缺陷更相关的团队D. 要求发起人澄清两位职能经理的修复责任<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P348-9.5.2.1冲突管理.</span><span class="hljs-comment"># 因为优先级的问题导致冲突，优先选择合作/解决问题.</span><span class="hljs-comment"># B - 因为是弱矩阵，项目经理找团队意义不大，需要找职能经理同意以后才能安排.</span><span class="hljs-comment"># C - 谁的问题找谁解决.</span><span class="hljs-comment"># D - 这种事情先找职能经理解决不了再考虑上升.</span></code></pre><pre><code class="hljs bash">在一个复杂项目中, 项目经理困扰于大量文件, 以及如何用最佳方法分发这些文件. 项目经理应该查询下列哪一项?A. 项目管理信息系统(PMIS)B. 配置管理系统C. 项目相关方沟通需求D. 绩效报告和问题日志<span class="hljs-comment"># C</span><span class="hljs-comment"># A - 提供信息技术(IT)软件工具, 是否使用要看沟通管理计划中的约定</span><span class="hljs-comment"># B - 常用于交付成果指标, 功能和版本的管理</span><span class="hljs-comment"># D - 是对项目执行情况的概述和记录项目执行过程中暴露出来的问题</span></code></pre><pre><code class="hljs bash">在市政厅项目会议期间,市长提出翻新该城市中央公园的建议. 一些商店业主请求提供每周项目进度报告.项目经理应更新哪一项内容?A. 相关方参与计划B. 沟通管理计划C. 工作说明书D. 项目调度计划<span class="hljs-comment"># B</span><span class="hljs-comment"># AC - 题干聚焦在了&quot;每周项目进度报告&quot;, 这是对信息的要求, 所以是沟通管理计划. 不选</span><span class="hljs-comment"># D - 没有这个说法</span></code></pre><pre><code class="hljs bash">一位团队成员通知项目经理，供应商延迟交付一个重要部件，由于潜在的影响该团队成员希望项目经理允许直接通知发起人并生成与这种情况相关的警报.项目经理应该查阅哪一份计划？A. 采购管理计划B. 沟通管理计划C. 相关方参与计划D. 风险管理计划<span class="hljs-comment"># B</span><span class="hljs-comment"># 描述将如何规划、结构化、执行与监督项目沟通，</span><span class="hljs-comment"># 以提高沟通的有效性包括传递信息的方法、技术等.</span><span class="hljs-comment"># A - 情景的焦点在于”直接通知警报“，属于信息的传递.</span><span class="hljs-comment"># C - 相关方参与计划促进相关方有效参与决策和执行的策略和行动.</span><span class="hljs-comment"># D - 风险管理计划是对风险管理的方法论.</span></code></pre><pre><code class="hljs bash">项目经理发现其中一名团队成员在没有通知项目经理的情况下与客户沟通项目可交付成果和项目进度事宜.项目经理应该做什么？A. 与该团队成员沟通资源分解结构(RBS)B. 在下一次计划的进度会议中讨论该情况C. 与该团队成员沟通执行、负责、咨询和知情(RACI)图表D. 每天向客户发送包含团队成就更新的电子邮件<span class="hljs-comment"># C</span><span class="hljs-comment"># 资源 -&gt; 数据表现 -&gt; RACI矩阵</span><span class="hljs-comment"># 从情景描述看，团队成员没有遵循沟通管理计划，应该首先强调沟通管理计划的重要性.</span><span class="hljs-comment"># 但是选项中没有，所以强调一下团队职责角色也没错.</span><span class="hljs-comment"># A - 资源分解结构是资源的分类.</span><span class="hljs-comment"># B - 问题不是出在进度上.</span><span class="hljs-comment"># D - 遵循沟通管理计划进行沟通.</span></code></pre><pre><code class="hljs bash">一家组织正在开展一个软件应用程序开发项目，有不同的相关方参与到该项目的不同阶段.项目经理应该如何让相关方在整个项目过程中参与?A. 使用来自相关方的信息来制定项目需求B. 定期与所有相关方确认关键项目决策C. 让相关方参与制定项目商业论证D. 不断与所有相关方分享项目状态报告<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P522章节：13.2.3.1 相关方参与计划.</span><span class="hljs-comment"># 是项目管理计划的组成部分. </span><span class="hljs-comment"># 它确定用于促进相关方有效参与决策和执行的策略和行动. </span><span class="hljs-comment"># 解析规划好相关方的定期决策，让相关方持续参与项目.</span></code></pre><pre><code class="hljs bash">项目发起人指出，为确保项目成功，必须让客户意识到可能存在的延误和问题.为此，客户希望他们的技术团队直接与项目的技术团队进行沟通.若要确保这项请求得以解决，项目经理应该申查哪一份文件？A. 沟通管理计划B. 需求跟踪矩阵C. 执行、负责、咨询和知情(RAC)矩阵D. 项目章程<span class="hljs-comment"># A</span><span class="hljs-comment"># 解析：典型沟通问题，找沟通管理计划.</span></code></pre><pre><code class="hljs bash">项目经理计划在一个月内部署一个全球性项目.但是，多名经理联系项目发起人，表示缺乏对项目可交付成果的认识.规划期间，项目经理应完成下列哪一项?A. 开展项目影响分析、安排进度活动并采取行动B. 审查项目章程澄清范围C. 安排每周风险审查会议D. 识别项目相关方，并将其包含进沟通管理计划中<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P366-10.1规划沟通管理.</span><span class="hljs-comment"># 相关方提出了对信息获取的要求，那么在规划阶段，项目经理要组织制定沟通管理计划.</span><span class="hljs-comment"># 解析：缺乏对于可交付成果的认识，属于沟通问题，选项D属于沟通相关的工作.</span><span class="hljs-comment"># AC - 风险管理领域.</span><span class="hljs-comment"># B  - 范围管理领域.</span></code></pre><pre><code class="hljs bash">为了帮忙做出关键决策，客户希望更频繁地收到技术项目更新，项目经理应该怎么做？A. 邀请所有技术负责人和客户参加项目更新会议B. 将该请求上报给项目发起人C. 遵循沟通管理计划D. 要求每位技术负责人向客户发送报告<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK (6) P379-10.2管理沟通.</span><span class="hljs-comment"># 确保项目信息及时且恰当地收集、生成、发布、存储、检索、管理、监督和最终处置.</span><span class="hljs-comment"># ABD - 以什么样的方式传递信息，要遵循沟通管理计划.</span></code></pre><pre><code class="hljs bash">一个项目遇到困难,且项目状态报告到期.但是，项目发起人正在休假. 项目经理应该做什么？A. 要求团队成员直接将项目进度传达给他们的业务联系人B. 将状态报告发送到项目管理办公室(PMO),并要求PMO经理分发摘要C. 按计划发送状态报告D. 暂停分发状态报告,直到项目发起人休假回来<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK (6) P377-10.1.3.1沟通管理计划.</span><span class="hljs-comment"># 沟通管理计划中包括：需沟通的信息、上报步骤、项目信息流向图等.</span><span class="hljs-comment"># 项目状态报告根据沟通管理计划进行发布即可，不受限于项目发起人休假.</span><span class="hljs-comment"># AB - 既然有沟通管理计划，不遵循计划传递信息是错误的.</span></code></pre><pre><code class="hljs bash">一个国际团队被分配到一个项目上工作, 项目经理担心由于文化差异可能会产生误解.项目经理应该使用什么来确保团队对项目目标达成共识？A. 项目章程B. 责任分配矩阵(RAM)C. 相关方登记册D. 沟通管理计划<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P377-10.1.3.1 沟通管理计划.</span><span class="hljs-comment"># ”担心由于文化差异可能会产生误解”，属于沟通问题，通过沟通管理计划解决.</span><span class="hljs-comment"># A  - 因为文化差异所产生的对项目目标的误解，用项目章程解决不了.</span><span class="hljs-comment"># BC - 与题目无关.</span></code></pre><pre><code class="hljs bash">担心与项目无关的邮件数量，一名团队成员认为其中一个可交付成果将延迟，因为在读和回复邮件上花费了大量时间。项目经理应该怎么做?A. 要求团队成员加班完成工作B. 要求项目团队更改项目沟通管理计划C. 与项目团队一起强化时间管理计划指南D. 与项目团队一起强化沟通管理计划指南<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P377 章节：10.1.3.1 沟通管理计划.</span><span class="hljs-comment"># 相关方的沟通需求需沟通的信息，包括语言、形式、内容和详细程度；</span><span class="hljs-comment"># 通用术语表: 了解了通用术语表，沟通难度会大幅降低.</span></code></pre><pre><code class="hljs bash">项目经理通过每周一次的电子邮件与相关方沟通.在接下来的委员会管理会议上，一名相关方得知项目的状态感到很惊讶，并表明其从未收到任何更新. 若要在将来避免这种情况，项目经理应该怎么做？A. 查阅项目章程B. 确保遵循沟通管理计划C. 邀请该相关方参加未来的项目会议D. 密切管理该相关方<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(⑥)P388-10.3监督沟通.</span><span class="hljs-comment"># 信息的传递存在缺失，分析问题，如有必要更新沟通管理计划.</span><span class="hljs-comment"># 问题出在信息的传递上，所以不选相关方管理，排除CD.</span></code></pre><pre><code class="hljs bash">一个大型团队正在开展一个快节奏的项目.关键相关方直接向团队成员询问项目进度.项目经理应该做什么?A. 要求指导委员会向相关方提供更新B. 向相关方定期提供正式更新C. 授权团队成员向相关方报告他们对项目详情的理解D. 确保只有项目管理办公室(PMO)向相关方提供更新<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P377-10.1.3.1沟通管理计划.</span><span class="hljs-comment"># 沟通管理计划中包括：需沟通的信息、上报步骤、项目信息流向图等.</span><span class="hljs-comment"># ACD - 沟通管理的责任在项目经理身上</span></code></pre><h4 id="45-项目管理计划"><a href="#45-项目管理计划" class="headerlink" title="45.项目管理计划"></a>45.项目管理计划</h4><p>根据作为项目管理计划中的**<u>范围基准</u>**衡量项目范围过程的完成.<br>范围基准是经过批准的<u>范围说明书</u>, <u>WBS</u> 和相应的<u>WBS词典</u>, 只有通过正式的变更控制程序才能进行变更, 它被用作比较的基础.</p><p>项目管理计划是说明<u>项目执行</u>, 监控和收尾方式的一份文件, 它整合并综合了所有子管理计划和基准, 以及管理项目所需的其他信息.</p><pre><code class="hljs bash">你为人力资源部门管理一个简单的网站开发项目. 所有项目要求都是在项目早期收集的,到目前为止, 它们保持不变. 作为跟踪项目的一部分, 你现在正在验证项目范围的完成.你会用什么来衡量这个问题?A. 需求跟踪矩阵B. 项目章程C. 需求管理计划D. 项目管理计划<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">某公司的设施经理负责组织的一场年度会议必须于每年八月在公司总部召开, 在该年度会议期间, 总部不得进行任何施工作业, 今年项目经理安排全年在总部开展施工工作. 7月, 设施经理要求项目经理停工, 以便为年度会议准备会议室. 项目经理本应在项目早期阶段采取什么措施来避免发生这种情况?A. 让设施经理另寻备选会议地点B. 让设施经理重新安排今年的开会日期C. 请求某些相关方支持全年进行施工作业D. 将项目管理计划告知所有相关方<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">在向相关方提交项目管理计划时,项目经理被要求在项目管理计划内记录现有效益管理计划中已确定的项目效益.项目经理该做什么？A. 确认已识别的项目效益会成为规划的一部分B. 确认在执行阶段会制定效益管理计划C. 确认已识别的项目效益会受到适当监督D. 确认在项目收尾阶段会制定效益管理计划<span class="hljs-comment"># A</span><span class="hljs-comment"># 4.2.3.1项目管理计划</span><span class="hljs-comment"># 题干关键词“向相关方提交项目管理计划时”.</span><span class="hljs-comment"># 项目管理计划提交相关方批准时，基准尚未被批准，</span><span class="hljs-comment"># 此时可以对项目管理计划进行多次更新，</span><span class="hljs-comment"># 并无需遵循正式流程，故选A</span><span class="hljs-comment"># BCD在规划阶段之后的执行、监控、收尾阶段，</span><span class="hljs-comment"># 再对项目管理计划变更，需要遵循整体变更控制流程.</span></code></pre><pre><code class="hljs bash">你正在促成一个与关键相关方的会议，讨论一个将使用敏捷项目管理方法进行的新项目.其中一个相关方关心的是项目如何与公司的整体组织战略相适应.你会为相关方提出什么建议来解决他们的担忧?A查看效益管理计划B审查假设日志C检查工作分解结构D询问项目发起人<span class="hljs-comment"># A</span><span class="hljs-comment"># 项目效益管理计划: 项目还没有启动，先看商业文件，</span><span class="hljs-comment"># 商业文件包括商业论证和效益管理计划.</span><span class="hljs-comment"># 1) 目标效益</span><span class="hljs-comment"># 2) 战略一致性</span><span class="hljs-comment"># 3) 实现效益的时限</span><span class="hljs-comment"># 4) 效益责任人</span><span class="hljs-comment"># 5) 测量指标</span><span class="hljs-comment"># 6) 假设</span><span class="hljs-comment"># 7) 风险</span></code></pre><pre><code class="hljs bash">为解决具有挑战性的客户请求，启动了一个项目. 该项目必须在短时间内交付. 项目经理应该怎么做来尽可能提高项目的成功率?A. 安排采购会议，加快采购B. 将问题上报给项目发起人C. 开始执行项目活动D. 与团队一起制定详细计划<span class="hljs-comment"># 《PMBOK》第6版86页，4.2.3.1-项目管理计划.</span><span class="hljs-comment"># 项目管理计划是说明项目执行、监控和收尾方式的一份文件，</span><span class="hljs-comment"># 它整合并综合了所有子管理计划和基准，以及管理项目所需的其他信息.</span><span class="hljs-comment"># 详细计划能让项目成功率提高.</span><span class="hljs-comment"># AC - 直接执行，会导致失败.</span><span class="hljs-comment"># B  - 上报领导不对.</span></code></pre><pre><code class="hljs bash">在项目中途,一位关键团队成员离开并被替换,项目经理应该让新资源首先查阅什么？A. 项目管理计划B. 项目状态报告C. 问题日志D. 项目章程<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK (6) P318-9.1.3.1资源管理计划.</span><span class="hljs-comment"># 资源管理计划中包括了角色与职责的分配，以及资源的控制，</span><span class="hljs-comment"># 新资源加入应该首先了解自己的角色和职责，然后再去了解对应他的角色他应该了解的内容.</span><span class="hljs-comment"># 所以查看资源管理计划是第一步，资源管理计划是项目管理计划的组成部分之一. 选择A.</span></code></pre><pre><code class="hljs bash">在项目执行规划研讨会后，所有相关方均讨论、细化了项目范围并达成一致意见.在审查文档之后，项目经理发现在项目生命周期中没有与范围变更相关的参考.若要解决这个问题，项目经理应该怎么做？A. 要求项目发起人更新范围，以保护这项变更B. 确保范围变更得到管理层的批准C. 继续执行项目并根据需要讨论任何范围变更D. 讨论遗漏范围变更程序的主题并制定范围变更流程<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(⑥)P82-4.2 制定项目管理计划.</span><span class="hljs-comment"># 没有与范围变更相关的参考即没有变更流程，要讨论制定变更流程.</span></code></pre><pre><code class="hljs bash">项目经理完成了一个新产品开发项目的规划过程.在继续进入执行过程组之前需要完成的最后一个重要里程碑是什么？A. 最终确定项目章程B. 接收执行项目的项目资金C. 获得发起人和相关方的批准D. 执行相关方管理策路<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK 6th 页码：P86 章节：4.2.3.1 项目管理计划.</span><span class="hljs-comment"># 项目管理计划是说明项目执行、监控和收尾方式的份文件，</span><span class="hljs-comment"># 它整合并综合了所有子管理计划和基准，以及管理项目所需的其他信息.</span><span class="hljs-comment"># 项目管理计划批准以后才能执行.</span></code></pre><h4 id="46-信息邀请书"><a href="#46-信息邀请书" class="headerlink" title="46.信息邀请书"></a>46.信息邀请书</h4><p>信息邀请书(RFI) : 如果需要卖方提供关于拟采购货物和服务的更多信息, 就使用信息邀请书.</p><p>报价邀请书(RFQ) : 如果需要供应商提供关于将如何满足需求和(或)将需要多少成本的更多信息, 就使用报价邀请书.</p><p>建议邀请书(RFP) : 如果项目中出现问题且解决问题难以确定,  就使用建议邀请书. 这是最正式的”邀请书”文件,<br>需要遵守与内容, 时间表, 以及卖方应答有关的严格的采购规则.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/033.png" alt="033" style="zoom:80%;margin-left: 0;"><pre><code class="hljs bash">项目团队需要获得市场上提供的其他数据, 以明确范围中的产品规格. 在这种情况下应该使用哪种类型的投标文件?A. 建议邀请书(RFP)B. 报价邀请书(RFQ)C. 信息邀请书(RFI)D. 解决方案邀请书(RFS)<span class="hljs-comment"># C</span><span class="hljs-comment"># 采购 -&gt; 招标文件 -&gt; 信息邀请书</span><span class="hljs-comment"># 如果需要卖方提供关于拟采购货物和服务的更多信息，就使用信息邀请书.</span><span class="hljs-comment"># 随后一般还会使用报价邀请书或建议邀请书.</span></code></pre><pre><code class="hljs bash">采购部门要求项目经理提供一个项目的招标文件. 这文件中应该包含哪些内容?A. 变更请求B. 选择的卖方C. 质量测量指标D. 建议邀请书<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">项目经理计划为一个建设施工项目采购混凝土. 所有供应商的材料质量都一样.只有价格有差别. 项目经理应向供应商请求哪种应对类型?A. 信息请求B. 建议邀请书C. 报价邀请书D. 工作说明书<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">在执行阶段,一个已签约的第三方供应商交付了项目的主要组件之一.虽然该供应商按时交付组件, 但项目经理发现该组件末能满足批准的标准.由于项目处于收尾和移交的最终阶段,项目经理应该做什么?A. 审查该组件的记录和文件B. 在项目管理办公室(PMO)的指导下结束该项目C. 将组件末能满足标准记录下来,将其传达给供应商,然后结束项目D. 通过查阅对供应商工作的正式验收文件来调查该问题<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P125-4.7.1.7 采购文档.</span><span class="hljs-comment"># 采购文档包含用于管理采购过程的完整支持性记录，</span><span class="hljs-comment"># 包括工作说明书、支付信息、承包商工作绩效信息、计划、图纸和其他往来函件.</span><span class="hljs-comment"># 组件的规格、质量要求在工作说明书里，</span><span class="hljs-comment"># 工作说明书等采购文档可以做为对供应商的验收文件，来确认供应商是否达到了规格标准.</span><span class="hljs-comment"># 题干中处于收尾过程中回顾当时的采购问题，可以查询之前的采购文档.</span><span class="hljs-comment"># A - 描述没有D准确.</span><span class="hljs-comment"># B - 跟题目无关，不对.</span><span class="hljs-comment"># C - 还要找到原因以后才能做为经验教训被记录下来.</span></code></pre><h4 id="47-投标人会议"><a href="#47-投标人会议" class="headerlink" title="47.投标人会议"></a>47.投标人会议</h4><p>投票人会议 : 目的是确保所有潜在投标人对采购要求都有清楚且一致的理解.</p><p><strong>外包流程</strong> : </p><ul><li>变更控制程序</li><li>投标人会议</li><li>独立估算<br>独立估算就是让专业的人把<strong>市场上的最低报价</strong>算清楚, 然后做为<strong>对照基准</strong>. 要包含市场上的最低报价, 使用独立估算可以获取到这样的结果.</li><li>合同谈判</li><li>采购审计</li><li>采购绩效审查</li></ul><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/014.png" alt="014"></p><pre><code class="hljs bash">某开发商按合同为某公司建设和运营一个工厂, 合同采用一次性付清钱款的全包式合同. 该合同将采购该工厂生产的所有产品.该公司不熟悉此类合同安排, 要求在项目实施前必须提供保证. 项目经理应该做什么?A. 将情况告知变更控制委员会(CCB), 并征得其批准B. 安排与该开发商开会讨论合同条款C. 将该合同上报给投资委员会, 待其审批D. 将范围管理计划和质量管理计划提交给投资委员会, 待其审批<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">当前项目的进度绩效指数(SPI)为0.7. 为了满足进度要求, 团队经过评估决定将项目剩余的一部分工作通过招标的方式外包给分包商.在与分包商签订合同之前, 项目经理需要完成以下哪些工作?A. 变更程序, 投标人会议, 独立估算和采购谈判B. 自制外购分析, 独立估算, 投标人会议和采购谈判C. 挣值分析, 独立估算, 采购审计和采购谈判D. 自制外购分析, 索赔管理, 建议邀请书(RFP), 采购审计<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">项目团队正在讨论, 幸运的是项目经理已经建立了奖励机制和团队建设, 有助于鼓励团队进一步合作. 团队最近讨论的一件事是他们是否应自己完成一工作包还是外包给其他人.他们现在肯定是在采购过程的哪个阶段?A. 控制采购B. 规划采购管理C. 实施采购D. 结束采购<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">在为一个价值1500万美元的项目招标过程中, 采购经理发现了两个潜在的公司符合招标书的胜任要求, A公司费用较高, 但比B公司拥有更多的专业知识.然而, B公司符合项目预算, 但A公司不符合. 采购经理正处于下列哪一个过程?A. 召开投标人会议B. 规划采购管理C. 实施采购D. 管理采购<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">收到供应商建议书后, 项目经理应使用什么来确保最低报价在当前市场范围内?A. 独立估算B. 建议书评价技术C. 专家判断D. 分析技术<span class="hljs-comment"># A</span><span class="hljs-comment"># B - 是对建议书本身进行技术上或商业上的评估, 与最低报价不符.</span></code></pre><pre><code class="hljs bash">项目经理向采购团队发出签订新原材料合同的请求。采购团队请求提供所需产品规格的更多信息.在采购团队能够提交建议邀请书（RFP）以找到供应商之前，该过程在四周内有五个迭代.其中的一项关键路径任务导致项目延迟了四周。 项目经理本应采取什么措施来避免发生该延迟？A. 与采购团队开会讨论这些需求B. 与采购团队制定服务水平协议C. 将这些沟通问题上报给项目发起人D. 让供应商更快地完成交付，以避免任何延迟<span class="hljs-comment"># A</span><span class="hljs-comment"># 采购 -&gt; 实施采购 -&gt; 工具技术</span><span class="hljs-comment"># 关键词“采购团队请求更多信息，五个迭代，关键路径延迟，本应该采取措施避免”.</span><span class="hljs-comment"># 表明PM在实施采购的早期未与采购团队达成共识。因此A开会讨论最合适.</span></code></pre><pre><code class="hljs bash">与供应商签订合同，开发一个对公司整体市场份额至关重要的软件包.在交付软件后,一位相关方通知项目经理需求未得到满足.若要避免这个问题，项目经理应该事先做什么？A. 将该供应商包含在需求开发中，并让他们签署需求文件B. 根据采购管理计划监控供应商的活动C. 聘请资源在内部生产产品，以确保完全控制输出D. 为供应商的公司分配一名人员，以确保在整个开发过程中遵循需求<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P492-12.3控制采购.</span><span class="hljs-comment"># 控制采购是管理采购关系，监督合同绩效，实施必要的变更和纠偏，以及关闭合同的过程.</span><span class="hljs-comment"># A - 供应商已经在范围管理当中.</span><span class="hljs-comment"># C - 供应商属于外部资源.</span><span class="hljs-comment"># D - 属于控制采购可能执行的活动，但这样描述极为清晰的选项通常不是正确答案.</span></code></pre><pre><code class="hljs bash">在创建采购管理计划时，项目经理发现组织内部存在的某些资源正在为其他项目效力，项目经理应该怎么做来满足这种需求？A. 开展自制或外购分析B. 创建工作分解结构(WBS)C. 制定风险登记册D. 开始人员分配谈判<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P473-12.1.2.3数据分析-自制外购分析.</span><span class="hljs-comment"># 自制或外购分析用于确定某项工作或可交付成果最好由项目团队自行完成，还是应该从外部采购.</span></code></pre><h4 id="48-工料"><a href="#48-工料" class="headerlink" title="48.工料"></a>48.工料</h4><p>工料合同 : <u>无法快速编制出准确的工作说明书</u>, 往往使用于聘用专家或外部资源.<br>工料合同是一种买方和卖方就<u>单位人工费率</u>和<u>材料</u>实际成本达到一致的合同.<br>聘请专家, 属于工料合同. 工料合同适用于<strong>无法快速编制出准确的工作说明书</strong>的情况下扩充人员, 聘请专家或寻求外部支持.</p><p>总价合同 : 此类合同为既定产品, 服务或成果的采购设定一个总价.这类合同应在已<u>明确定义需求</u>, 且不会出现重大范围变更的情况下使用</p><ul><li>固定总价(FFP) : 货物价格在一开始就已经确定, 并且不允许改变(除非工作范围发生变更).<br>若工作类型是可预测的, 并且需求定义良好且不太可能变更, 那么<strong>总价合同</strong>是最合适的.</li><li>总价加激励费用(FPIF) : 设置一定程度的财务奖励, 并<u>设置价格上限</u>, 高于价格上限的成本由卖方承担.</li><li>总价加经济价格调整(FPEPA) : 跨跃时间年限长, 将以不同货币支付. 允许通化膨胀, 成本增加.</li></ul><p>成本补偿合同 : 此类合同向卖方支付为完成工作而发生的全部合法实际成本(可报销成本), 外加一笔费用作为卖方的利润.这类合同适用于工作范围预计会在合同执行期间<u>重大变更</u>.<br>**<u>成本补偿合同</u>**使项目具有灵活性, 在项目开始时无法精确确定工作范围, 需要变更, 或者当工作中可能存在高风险时, 可以灵活的向卖方支付成本.</p><ul><li>成本加固定费用(CPFF) : 一切可列支成本 + 固定费用(百分比计列).<br>约定成本<strong>实报实销, 都由买方承担</strong>, 另外给卖方的费用是固定的, 对于卖方来说没有任何的不确定性, 无论成本多少, 最终得到的都是固定的费用.</li><li>成本加激励费用(CPIF) : 一切可列支成本 + 激励费用(事先商定的百分比). 如80/20比例分担.</li><li>成本加奖励费用(CPAF) : 报销一切成本, 奖励费用(主观决定), 不允许申诉.</li></ul><pre><code class="hljs bash">由于某项目所需求的专业知识超出了公司的能力. 公司与以在该领域的专业知识著称的供应商签约, 但在项目进行过程中. 公司却无法为精确的工作说明书(SOW)获得足够的详细信息.公司应采用哪种合同?A. 工料(T&amp;M)B. 成本加奖励费用(CPAS)C. 固定总价(FFP)D. 成本加固定费用(CPF)<span class="hljs-comment"># A</span><span class="hljs-comment"># 采购 -&gt; 工料合同定义</span><span class="hljs-comment"># 无法快速编制出准确的工作说明书，往往使用于聘用专家或外部资源.</span><span class="hljs-comment"># 关键词“专业知识著称，无法为精确的工作说明书（Sow）获得足够的详细信息.</span></code></pre><pre><code class="hljs bash">一家公司决定启动一个战略性项目, 这项目将提供有竞争力的技术进步,该项目需要某个特定性技术的专家, 但组织无法提供准确的工作说明书(SOW). 应该使用什么类型的合同?A. 工料合同(T&amp;M)B. 固定总价合同(FFP)C. 成本加固定费用合同(CPFF)D. 成本加激励费用合同(CPIF)<span class="hljs-comment"># A</span><span class="hljs-comment"># 采购 -&gt; 工料合同定义</span><span class="hljs-comment"># 无法快速编制出准确的工作说明书，往往使用于聘用专家或外部资源.</span><span class="hljs-comment"># 关键词“需要某个特定性技术的专家，但组织无法提供准确的工作说明书”；选项A正确.</span></code></pre><pre><code class="hljs bash">由于商品价格上涨, 分包商希望增加其月度发票, 项目经理拒绝该请求.什么类型的合同会证明这一行为的合理性?A. 固定总价合同(FFP)B. 总价加经济价格调整合同(FPEPA)C. 工料会同(T&amp;M)D. 成本加固定费用合同(CPFF)<span class="hljs-comment"># A</span><span class="hljs-comment"># 采购 -&gt; 合同类型</span><span class="hljs-comment"># 固定总价合同FFP：不允许改变（除非范围改变）；A选项最强有力.</span><span class="hljs-comment"># 产品价格上浮，那么根据经济价格调节和成本合同都可以要求增加，排除BD.</span><span class="hljs-comment"># 工料合同可以确定单价或者确定数量.</span><span class="hljs-comment"># 如果是确定数量，那么单价上浮也可以要求增加发票，排除C.</span></code></pre><pre><code class="hljs bash">不确定项目开发时间时，必须避免预算偏差方面的风险.这应该使用哪一个合同类型？A. 总价加经济价格调整合同(FP-EPA)B. 工料合同(T&amp;M)C. 总价加激励费用合同(FPIF)D. 成本加激励费用合同(CPIF)<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P471-12.1.1.6组织过程资产-合同类型.</span><span class="hljs-comment"># 项目的开发时间不确定，而且必须要避免预算偏差，</span><span class="hljs-comment"># 即合同的执行时间长，面临的财务风险较大，适合采用总价加经济价格调整合同.</span></code></pre><pre><code class="hljs bash">无法明确界定项目工作范围, 且项目范围在过程中很有可能发生变化. 哪种类型的合同适合这种情况?A. 总价加经济价格调整合同B. 总价合同C. 成本补偿合同D. 总价加激励费用合同<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">你已收到发送给供应商的 RFP 建议书, 其中一家供应商提议以12,500美元完成该项目.该项目的成本为10,000美元, 其利润为2,500美元. 如果工作类型是可预测的, 并且需求定义明确且不太可能变更, 那么哪种合同最适合?A. 成本加固定费用B. 成本加成本百分比C. 固定价格D. 成本加奖励费<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">以下合同类型中, 风险主要由买方承担的哪一个?A. 固定总价合同B. 成本加激励费用合同C. 成本加固定费用合同D. 总价加激励费用合同<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">一个项目需要进行在一个新国家销售产品的可行性研究, 项目经理应该使用什么合同类型?A. 成本加奖励费用合同(CPAF)B. 成本加激励费用合同(CPIF)C. 工料合同(T&amp;M)D. 总价加经济价格调整合同(FP-EPA)<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">你决定向以前经常为你的公司服务的一家供货商外包合同.该供货商在履行时间表和成本效益方面记录良好，而且与你建立了良好的工作关系.你现在的项目量然与以前的不同，但是与该供货商完成其它工作类似.在这种情况下，你应该订立什么类型的合同：A. 固定价格, 附加币值调整B. 固定酬金(固定目标)C. 固定价格D. 成本加酬金<span class="hljs-comment"># C</span><span class="hljs-comment"># P471 章节：12.1.1.6总价合同：</span><span class="hljs-comment"># 此类合同为既定产品、服务或成果的采购设定一个总价.</span><span class="hljs-comment"># 这种合同应在已明确定义需求，且不会出现重大范围变更的情况下使用.</span><span class="hljs-comment"># 范围明确，要选择固定总价合同.</span><span class="hljs-comment"># 《PMBOK》第6版471页，12.1.1.6-总价合同.</span><span class="hljs-comment"># 此类合同为既定产品、服务或成果的采购设定一个总价.</span><span class="hljs-comment"># 这种合同应在已明确定义需求，且不会出现重大范围变更的情况下使用.</span></code></pre><h4 id="49-采购工作说明书"><a href="#49-采购工作说明书" class="headerlink" title="49.采购工作说明书"></a>49.采购工作说明书</h4><p>采购工作说明书会充分的描述拟采购的产品, 服务或成果, 以便潜在的卖方确定是否有能力提供此产品, 服务或成果.<br>工作说明书的内容包括: 规格, 所需数量, <u>质量水平</u>, 绩效数据, 履约期间, 工作地点和其他要求.<br>采购工作说明书: 项目经理与供应商打交道应该基于<u><strong>外部文件</strong></u>而非内部文件，只有D是与供应商打交道的外部文件.<br>里面确定了规格、数量、质量水平、绩效数据等等.</p><p><strong><u>供方选择标准</u></strong> : 是规划采购管理过程的输出.</p><p>采购管理计划 : 定义了采购的流程, 决策的机制, 应遵循的标准, <strong>采购的方案和工具</strong>等.<br>采购工作说明书(SOW)应遵循采购管理计划, 并在获得相关方的同意后便于实施.</p><pre><code class="hljs bash">项目的混凝土准时到达, 但项目经理发现混凝土的成分不正确. 项目经理应审查哪一份文件来确认混凝土的性能和质量要求?A. 质量管理计划B. 采购管理计划C. 建议邀请书D. 采购工作说明书(SOW)<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">某项目从一个新供应商订购了大量计算机备件. 项目经理如何在达到项目时间表的同时确保产品质量?A. 确保提供商在发货前执行质量检查B. 咨询主题专家(SME)应采用哪些标准C. 根据故障率进行抽样检查D. 为客户购买更多备件<span class="hljs-comment"># B</span><span class="hljs-comment"># 采购 -&gt; 采购工作说明书</span><span class="hljs-comment"># 工作说明书会充分详细地描述拟采购的产品、服务或成果,</span><span class="hljs-comment"># 以便潜在卖方确定是否有能力提供此类产品、服务或成果.</span><span class="hljs-comment"># 情景的描述突出强调了如何满足质量要求，关于供应商交付产品、</span><span class="hljs-comment"># 服务的要求要在采购工作说明书中明确.</span><span class="hljs-comment"># AC - 无规矩不成方圆，质量检查要基于明确的质量标准，在选项B之后.</span><span class="hljs-comment"># D  - 按照合同的约定，供应商要承担在维保期间损坏备件的修复，</span><span class="hljs-comment">#      所以为客户购买更多的备件是错误的.</span></code></pre><pre><code class="hljs bash">你正在审核一个涉及大量采购活动的项目, 令人吃惊的是, 项目团队没有预先定义该采购活动的供方选择标准.项目中采购活动的供方选择标准在以下哪个过程中制定的?A. 控制采购B. 规划采购管理C. 实施采购D. 监控项目<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">由于项目范围发生变化，签约了一家新的供应商. 该供应商曾有不按时交付的记录,这令项目经理十分担心。项目经理应该做什么？A. 立即终止与该供应商的合同B. 要求采购人员密切监督该供应商C. 提出一个随机的供应商检查来验证他们的记录D. 与该供应商一起审查工作说明书（SOW）<span class="hljs-comment"># B</span><span class="hljs-comment"># 采购 -&gt; 控制采购定义</span><span class="hljs-comment"># 确保买卖双方履行法律协议，满足项目需求.</span><span class="hljs-comment"># 题目关键词&quot;签约供应商，不按时交货记录，项目经理担忧&quot;，表明合同已签署，实施采购已完成.</span><span class="hljs-comment"># PM需要确保交付工作顺利进行，故选控制采购B.</span><span class="hljs-comment"># AD - 还未发生问题，不能终止合同和一起审查SOW，排除AD.</span><span class="hljs-comment"># C  - 审计供应商的方式应该由合同约束，C的检查方式不合适，排除.</span></code></pre><pre><code class="hljs bash">项目经理编制了采购工作说明书, 想知道如何获得相关方的同意, 他应该怎么办?A. 查阅沟通管理计划B. 查阅采购管理计划C. 查阅相关方参与计划D. 查阅风险管理计划<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目经理从项目团队和供应商处收到一连串电子邮件,争论最近收到的一个可交付成果.项目团队认为该可交付成果未能满足特定需求, 但供应商却坚持他们不知道这个需求.项目经理首先应该查阅哪份文件？A. 需求管理计划B. 工作分解结构C. 沟通管理计划D. 工作说明书(SOW)<span class="hljs-comment"># D</span><span class="hljs-comment"># ABC - 内部文件.</span><span class="hljs-comment"># D   - 外部文件.</span></code></pre><pre><code class="hljs bash">由于项目执行期间的范围变更，项目经理确定供应商必须对一个已在使用的产品模块进行更改.项目经理首先做什么？A. 准备一份变更请求，以更新供应商的合同条款B. 检查采购管理计划和合同条款C. 将该信息更新到风险登记册和问题日志D. 直接与供应商谈达成协议<span class="hljs-comment"># A</span><span class="hljs-comment"># 采购 -&gt; 实施整体变更控制</span><span class="hljs-comment"># 题干中帮助判断的关键字：范围变更.</span><span class="hljs-comment"># 确定变更了，就直接准备变更请求就好了.</span></code></pre><pre><code class="hljs bash">在执行管道项目的过程中，管道施工承包商提出：使用某种更高级的材料，不改变项目工期和成本目标，在此项改变得到批准后，应该更新哪个文件？A. 采购工作说明书B. 合同工作分解结构C. 质量管理计划D. 过程改进计划<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P499 章节：12.3.3.3 采购文档更新.</span><span class="hljs-comment"># 采购文档更新可包括用于支持合同的全部进度计划、</span><span class="hljs-comment"># 已提出但未批准的合同变更，以及已批准的变更请求.</span><span class="hljs-comment"># 采购文档还包括由卖方编制的技术文件，以及其他工作绩效信息.</span><span class="hljs-comment"># 例如，可交付成果的状况、卖方绩效报告和担保、财务文件(包括发票和支付记录)，</span><span class="hljs-comment"># 以及与合同相关的检查结果. 采购工作说明书中包含了质量要求和规格。后面做为 采购文档需要更新.</span></code></pre><h4 id="50-变更日志"><a href="#50-变更日志" class="headerlink" title="50.变更日志"></a>50.变更日志</h4><p>变更日志用于记录项目期间发生的变更. 当前相关方对变更请求存在争议, 首先查看变更日志中的审批记录.<br>变更日志记录了<u>变更请求处理的经过和批准的决议</u>. 受到影响的相关方一般都有机会在变更控制过程中发表意见.</p><pre><code class="hljs bash">在项目审查会议期间, 相关方A指出已更新一项可交付成果来反映来自相关方B的新需求. 但是, 相关方A未获知并且不同意这一变更. 项目经理下一步应该做什么?A. 检查变更日志以确认相关方A的主张B. 从项目中删除新需求C. 要求相关方A和B之间召开会议以解决冲突D. 将新需求升级上报给项目发起人<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">更换一个关键组件的采购来源在项目执行期间获得批准. 在产品发布之后, 业务经理抱怨说, 这个组件对她的工作产生了负面影响.项目经理依靠哪个文件获得业务经理的验收?A. 风险登记册B. 经验教训登记册C. 变更日志D. 问题日志<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">在项目审计过程中发现一项变更被实施却没有经过CCB批准的记录, 项目经理应该审查下面哪一项?A. 变更日志B. 配置管理计划C. 整体变更控制程序D. 需求跟踪矩阵<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">一个大型复杂项目的项目经理了解到，一位关键相关方反对在项目后期批准的变更，项目经理不愿冒犯这位相关方，但也不希望延迟该项目，项目经理应该做什么？A. 与该相关方一起审查沟通管理计划B. 取消已批准的变更，以满足相关方的要求C. 让相关方参考变更日志，以显示变更批准D. 与相关方一起讨论相关方参与计划<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK 6th 页码：P120 章节：4.6.3.3变更日志：</span><span class="hljs-comment"># 变更日志用于记录项目期间发生的变更.</span><span class="hljs-comment"># 变更已审批，并记录在变更日志中. 因此要看变更日志.</span><span class="hljs-comment"># D - 应该项目经理审查，而不是和相关方审查.</span></code></pre><h4 id="51-假设情景分析"><a href="#51-假设情景分析" class="headerlink" title="51.假设情景分析"></a>51.假设情景分析</h4><p>假设情景分析, 是对各种情景进行评估, 预测它们对项目目标的影响(积极或消极的). 假设情景分析就是对”如果情景X出现, 情况会怎样?” 这样的问题进行分析, 即基于已有的进度计划, 考虑各种各样的情景.<br>可以根据假设情景分析的结果, 评估项目进度计划在不同条件下的可行性, 以及为应对意外情况的影响而<u>编制进度储备</u>和<u>应对计划</u>.</p><pre><code class="hljs bash">项目管理团队预计, 在项目过程中, 由于罢工, 许可过程变更或特定工程工期延长, 组件交付可能会出现延误.什么分析可能有助于制定应急和响应计划来缓解这些问题?A. 应急分析B. 偏差分析C. 假设情景分析D. 进度压缩<span class="hljs-comment"># C</span></code></pre><h4 id="52-定义范围"><a href="#52-定义范围" class="headerlink" title="52.定义范围"></a>52.定义范围</h4><p>相关方对于项目的期望不确定, 所以会频繁的提出变更请求, 那么此时要求项目的相关方多想一想, 想清楚了再做决定有助于减少类似问题的发生.</p><pre><code class="hljs bash">项目经理经常收到关于某项目的变更请求, 但他确保变更控制过程适当地应用中. 项目经理本应采用什么措施来防止频繁的变更请求?A. 确保项目范围获得相关方批准B. 在项目开始时定义项目范围C. 完成责任分配矩阵(RAM)D. 更新需求矩阵<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">在项目执行期问，团队识别到几个变更请求，其中包括项目成功所需的功能，这些功能末能包含在需求跟踪矩阵中.若要避免这种情况，项目经理事先应该做什么？A. 创建工作分解结构(WBS)B. 定义范围C. 核实范围D. 控制范围<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P145-5.3.3.2项目文件更新-需求跟踪矩阵.</span><span class="hljs-comment"># 需求更新了，需求跟踪矩阵也要随之更新.</span><span class="hljs-comment"># A - 题干中描述了几个功能没实现，而不是缺失WBS.</span><span class="hljs-comment"># C - 是验收选项.</span><span class="hljs-comment"># D - 注意情景中强调的是“避免”，而不是现在正在做什么.</span></code></pre><h4 id="53-定义活动"><a href="#53-定义活动" class="headerlink" title="53.定义活动"></a>53.定义活动</h4><p>定义活动是识别和记录为完成项目可交付成果而须采取的具体行动的过程.<br>本过程的主要作用是, 将工作包分解为进度活动, 作为对项目工作进行进度估算, 规划, 执行, 监督和控制的基础.</p><p>详细里程碑列表创建为定义活动流程的输出, 并包含有关里程碑是强制性还是可选的信息.<br>请注意, 项目章程还包含里程碑信息, 但级别较高. 此外, 尚未启动排列活动顺序和制定进度计划流程.</p><pre><code class="hljs bash">你的建设项目正处于规划阶段, 项目团队刚刚敲定了项目的详细里程碑列表. 你现在正计划开始对这些活动确定逻辑关系, 并最终确定项目进度.你刚刚完成了哪个项目管理过程?A. 制定进度计划B. 定义活动C. 排列活动顺序D. 制定项目章程<span class="hljs-comment"># B</span></code></pre><h4 id="54-计算题"><a href="#54-计算题" class="headerlink" title="54.计算题"></a>54.计算题</h4><p>EV(挣值) : 对已完成工作的测量, 用该工作的批准预算来表示. 某时间点(通常为数据日期)所有已完成工作的计划价值(挣值), 与实际成本无关.<br>EV代表<u><strong>已完成的工作的价值</strong></u>.</p><p>PV (计划价值) : 为计划工作分配的经批准的预算. 某时间点(通常为数据日期或项目完成日期)计划完成的工作的价值. </p><p>AC(实际成本) : 在给定的时间段内, 因执行项目活动而实际发生的成本. 某时间点(通常为数据日期)所有已完成工作的实际成本.</p><p>CV(成本偏差) CV = EV - AC : 在某个给定时间点, 预算亏空或盈余量, 表示为挣值与实际成本之差.<br>为了应付现金流突发情况, 在必要考虑做储备. 做储备的前提是要知道<u>挣值与实际成本之间的差距</u>, 才好做储备规划.<br>CV就是指出了<u>实际绩效与成本支出</u>之间的关系.</p><p>SV(进度偏差)  SV = EV - PV : 在某个给定时间点, 项目与计划交付日期相比的亏空或盈余量, 表示为挣值与计划价值之差.</p><p><u>最初的计划不再有效</u>, 意味着CPI和SPI都不能对后续的工作产生影响.完工估算(EAC) = AC + ETC</p><p>完工估算(EAC): 是指根据当前绩效估算<strong>完工需要</strong>的成本.<br>EAC是趋势分析, 趋势分析包括(EAC/ETC/TCPI等)<br>偏差分析(SV/CV/SPI/CPI)<br>挣值分析(EV/PV/AC)</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/017.png" alt="017" style="zoom:50%; margin-left: 0;"><p>ETC : 剩下的工作还需要多少钱?</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/018.png" alt="018" style="zoom:50%;margin-left:0;"><p>按计划完成 : TCPI = (BAC - EV) / (BAC - AC)</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/019.png" alt="019" style="zoom:50%;margin-left: 0;"><pre><code class="hljs bash">你是项目经理, 负责贵公司的重要项目. 该项目在三个月后完成 40%, 耗资35万美元. 该项目的预算为950 000美元, 计划持续8个月.项目的执行情况如何?A. 项目进度落后, 超出预算B. 该项目提前完成, 低于预算C. 该项目进度落后, 低于预算D. 该项目提前完成, 超出预算<span class="hljs-comment"># B</span><span class="hljs-comment"># CPI = EV/AC = (95 * 40%) / 35 = 1.09(预算内)</span><span class="hljs-comment"># SPI = EV/PV = (95 * 40%) / (95 * 3/8) = 1.07(提前)</span></code></pre><pre><code class="hljs bash">你是威克快车公司的项目经理. 你正在为人力资源部的一个项目工作, 计划用一年时间. 项目实施三个月后, 计算出的EV为35000美元, PV为45000美元. 下面哪个选项表示SV的值?A. -10000B. 1.29C. 0.78D. 10000<span class="hljs-comment"># A</span><span class="hljs-comment"># SV = EV - PV = 35000 - 45000 = -10000 </span></code></pre><pre><code class="hljs bash">随着项目临近尾声, 公司高层管理人员询问迄今已完成的工作的价值, 项目经理提供该信息时应使用以下哪种衡量标准?A. 完成预算(BAC)B. 完工偏差(VAC)C. 实际成本(AC)D. 挣值(EV)<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">某经验丰富的项目经理最近被指派管理某经历破产正在复苏的城市的多个项目. 该城市预算紧张. 在计算非预期预算以便为项目的现金流突发情况作出调整时,项目经理规划预算时应将哪个成本要素考虑在内?A. 实际成本(AC)B. 挣值(EV)C. 计划价值(PV)D. 成本偏差(CV)<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">一个项目已经支出350万美元, 现在已经完成400万美元的工作. 该项目的计划价值(PV)为800万美元.主题专家(SME)估算还需要600万美元来完成该项目. 完成该项目的技术方法不再有效. 当前的完工估算(EAC)是多少?A. 800万美元B. 950万美元C. 1000万美元D. 1150万美元<span class="hljs-comment"># B</span><span class="hljs-comment"># EAC = AC + ETC = 350 + 600 = 950</span></code></pre><pre><code class="hljs bash">一个正在执行的项目的成本绩效指数(CPI)为1.25, 进度绩效指数(SPI)为0.8, 计划价值(PV)为10,000美元, 完工预算(BAC)为100,000美元. 为了让项目按计划完成, 必须保持的效率是多少?A. 0.728B. 0.983C. 1.017D. 1.563<span class="hljs-comment"># B</span><span class="hljs-comment"># EV = SPI * PV = 0.8 * 10 = 8</span><span class="hljs-comment"># AC = EV / CPI = 8 / 1.25 = 6.4</span><span class="hljs-comment"># TCPI = (BAC - EV) / (BAC - AC) = (100 - 8) / (100 - 6.4) = 0.983</span></code></pre><pre><code class="hljs bash">挣值分析报告显示, 项目的成本偏差为+20万美元, 进度偏差为-30万美元. 以下哪一个是合理解释?A. 有价值10万美元应该完成的工作没有完成B. 与计划相比, 有50万美元的预算还没有花出去C. 成本节约了20万美元D. 项目进度超前, 同时成本超支<span class="hljs-comment"># B</span><span class="hljs-comment"># CV = EV - AC = 20, 说明实际成本比挣值少 20 万美元</span><span class="hljs-comment"># SV = EV - PV = -30, 说明计划值比挣值多 30 万美元</span><span class="hljs-comment"># 由此可以得出, 与计划值相比, 截至目前实际成本少花了 50 万美元</span></code></pre><pre><code class="hljs bash">项目预算是100万美元, 目前时间已经过半, 实际成本是60万美元, 但只完成了40%的工作. 经过分析发现, 对需求理解错误造成了返工,现已纠正. 发起人询问项目的最终成本将会是多少, 项目经理应该如何回复?A. 利用公式EAC = BAC / CPI计算出完工估算, 报告给发起人, 最终成本将超出预算B. 利用公式EAC = AC + (BAC - EV) 计算出完工估算, 报告给发起人, 最终成本将超出预算C. 改进成本绩效, 纠正成本偏差, 报告给发起人, 最终成本不会超出预算D. 根据趋势分析, 报告给发起人, 项目将提前完工, 而且成本不会超出预算<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目进度过半, 项目经理在项目挣值分析时发现, 成本绩效指数(CPI) = 0.7.进度绩效指数(SPI) = 1.1. 通过根本原因分析, 项目经理发现, 当初低估了某种原材料的用量.发起人询问项目的最终成本将会是多少, 项目经理应该怎么回复?A. 利用公式EAC = BAC / CPI, 计算出完工估算, 报告给发起人最终成本将超出预算B. 利用公式EAC = AC + (BAC - EV), 计算出完工估算, 报告给发起人最终成本将超出预算C. 改进成本绩效, 纠正成本偏差, 报告给发起人最终成本不会超出预算D. 根据趋势分析, 报告给发起人项目将提前完工, 且成本不会超出预算<span class="hljs-comment"># A</span><span class="hljs-comment"># 发起人询问最终成本, 即完工估算(EAC)的值.</span><span class="hljs-comment"># 计划时低估了某种原材料的用量, 说明这种偏差属于典型偏差.</span><span class="hljs-comment"># 也就是没有办法通过管理改进去纠正的偏差, 应该用EAC = BAC / CPI 计算.</span><span class="hljs-comment"># 因为典型偏差无法纠正, 所以EAC一定大于完工预算(BAC), 项目经理应如实报告给发起人.</span></code></pre><pre><code class="hljs bash">在什么时候通过增加剩余项目的预算(利用业绩表现修正的)达到当前实际的计算EAC的方法最经常使用?A. 在偏离被视为非典型的偏离的时候B. 由于条件发生变化, 初始的估计假定不再可信的时候C. 当前的偏离被视为未来偏离的代表的时候D. 初始的估计假定被认为存在根本性缺陷的时候<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK 6th 页码：P265 章节：7.4.2.2</span><span class="hljs-comment"># 预测：假设以当前 CPI完成 ETC 工作.</span><span class="hljs-comment"># 这种方法假设项目将按截至目前的情况继续进行，</span><span class="hljs-comment"># 即ETC工作将按项目截至目前的累计成本绩效指数(CPI)实施.</span><span class="hljs-comment"># 公式：EAC= BAC/CPI. 利用业绩表现修正，说明偏差具备代表性，属于典型偏差.</span></code></pre><pre><code class="hljs bash">项目经理正在进行挣值分析, 计算出了当前的成本偏差和进度偏差. 发起人想要知道基于当前的绩效水平, 完成所有工作所需的成本.项目经理应该提供以下哪一项数据?A. 完工预算(BAC)B. 完工估算(EAC)C. 完工尚需估算(ETC)D. 完工偏差<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">在趋势分析过程中, 项目经理得出结论, 项目绩效已经恶化. 这个结论是基于什么信息得出的?A. 挣值分析(EVA)B. 完工估算(EAC)C. 质量成本(COQ)D. 计划价值(PV)<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目工期为五个月. 项目最初费用拨款总额为30.000美元，目前项目处于第三个月. 项目前两个月的总支出为12,500美元.项目完工部分超前于进度符合预算. 项目的成本差异是多少?A. 大于零B. 小于零C. 零D. 1<span class="hljs-comment"># PMBOK 6th 页码：P263 章节：7.4.2.2</span><span class="hljs-comment"># 挣值分析进度绩效指数(SPI)是测量进度效率的一种指标，</span><span class="hljs-comment"># 表示为挣值与计划价值之比，反映了项目团队完成工作的效率.</span><span class="hljs-comment"># 当SPI小于1.0时，说明已完成的工作量末达到计划要求；</span><span class="hljs-comment"># 当SPI大于1.0时，则说明已完成的工作量超过计划</span><span class="hljs-comment"># 符合预算，说明CV=0.</span></code></pre><pre><code class="hljs bash">项目的成本绩效指数(CPI)和进度绩效指标(SPI)均大于1.0，项目经理减少投入以保持进度。在这个过程中，什么会保持不变？A. 进度B. 成本C. 成本与进度D. 进度基准<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P263 章节：7.4.2.2挣值分析：</span><span class="hljs-comment"># 进度绩效指数(SPI)是测量进度效率的一种指标，表示为挣值与计划价值之比，</span><span class="hljs-comment"># 反映了项目团队完成工作的效率.</span><span class="hljs-comment"># 当 SPI 小于 1.0 时，说明已完成的工作量末达到计划要求；</span><span class="hljs-comment"># 当 SPI 大于 1.0 时，则说明已完成的工作量超过计划.</span><span class="hljs-comment"># 只要没有通过变更修改基准，基准就不会变.</span></code></pre><pre><code class="hljs bash">根据一个工程项目的合同条款，付款与项目总体进度的百分比挂钩，项目经理必须提交月度进度报告，以促进发票开具流程，在项目团队成员每月报告其分配的活动时，项目经理应该如何保持健康的现金流？A. 分配一位团队成员来整合数据B. 提供项目报告C. 执行定量分析D. 应用挣值(EV) 原则<span class="hljs-comment"># D</span><span class="hljs-comment"># &quot;付款与项目总体进度的百分比挂钩&quot;，</span><span class="hljs-comment"># 需要在月度进度报告中回报当前进度的测量结果，选项D的挣值分析可以做到.</span><span class="hljs-comment"># C - 定量分析通常出现在风险管理领域.</span><span class="hljs-comment"># B - 项目报告也包括了挣值分析的结果，所以选D更为精准.</span></code></pre><p>55.参数估算</p><p>参数估算使用历史数据与项目之间的统计关系来<strong>确定相关性</strong>, 从而确定当前项目的成本估算.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/038.png" alt="038" style="zoom:67%;margin-left: 0;"><pre><code class="hljs bash">你的组织是著名的ERP系统设计和实施公司. 你最近被雇用到这个组织, 并给你分配了一个为本地制造设施实施ERP系统的项目.你目前正在估算你的项目成本. 如果你希望将项目成本估算建立在历史数据的基础上, 并在一定程序上依赖于估算的准确性.那么你将使用哪种成本估算技术?A. 参数估算B. 类比估算C. 卖方投标分析D. 自下而上估算<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">项目团队正通过估算每个工作包来制定项目预算.团队使用过往项目的统计值和历史数据. 这使用的是什么估算工具或技术？A. 储备分析B. 类比估算C. 专家判断D. 参数估算<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P244-7.2.2.3参数估算.</span><span class="hljs-comment"># 参数估算是指利用历史数据之间的统计关系和其他变量(如建筑施工中的平方英尺)，</span><span class="hljs-comment"># 来进行项目工作的成本估算历史数据、统计关系，书上的原话.</span></code></pre><pre><code class="hljs bash">项目经理必须创建一个项目的工作分解结构(WBS), 并分析项目范围的技术细节.项目经理应使用什么工具或技术？A. 头脑风暴B. 亲和图C. 专家判断D. 紧前关系绘图法<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P158-5.4.2.1专家判断.</span><span class="hljs-comment"># 专家判断是一个频繁用到的工具.</span><span class="hljs-comment"># A - 已经到了创建WBS的阶段，头脑风暴是不适合的.</span><span class="hljs-comment"># B - 亲和图是一种分组技术，用以收集需求和收集创意，不适用于题干中的场景.</span><span class="hljs-comment"># D - 紧前关系绘图法用于制定进度计划.</span></code></pre><pre><code class="hljs bash">项目经理正在对比项目预算与行业指数，项目经理注意到项目预算低于类似项目的预算，项目经理应该怎么做？A. 更新风险登记册B. 调节资金限制C. 执行储备分析D. 请求专家判断<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P252 章节：7.3.2.1 专家判断.</span><span class="hljs-comment"># 应征求具备以下专业知识或接受过相关培训的个人或小组的意见：</span><span class="hljs-comment"># 1) 以往类似项目；</span><span class="hljs-comment"># 2) 来自行业、学科和应用领域的信息；</span><span class="hljs-comment"># 3) 财务原则；</span><span class="hljs-comment"># 4) 资金需求和来源.</span><span class="hljs-comment"># 项目经理对比的是行业信息，因此选择专家判断. 储备分析与题干无关.</span></code></pre><h4 id="56-控制成本"><a href="#56-控制成本" class="headerlink" title="56.控制成本"></a>56.控制成本</h4><p>控制成本 : 监督项目状态, 以更新项目成本和管理**<u>成本基准变更</u>**的过程.<br>本过程的主要作用是, 在整个项目期间保持对成本基准的维护.</p><p>估算成本 : 对完成项目工作所需资源成本进行近拟估算的过程.<br>本过程的主要作用是, 确定项目所需的资金. 本过程应根据需要在整个项目期间定期开展.</p><p>成本估算: 是基于客观, 严谨和诚信的前提, 发起人要求砍掉15%的成本估算, 那么只有<strong>缩小项目范围</strong>才是直接, 有效的措施.</p><pre><code class="hljs bash">你是铁路建设项目的项目经理, 该项目相对直截了当, 一切按计划进行, 直到政府宣布有关外派员工的新规定.这将对你的项目产生重大成本影响, 因为该项目的25%的员工是从国外雇佣的.如果要管理对项目成本基准的变更, 你使用哪个过程?A. 谈判成本B. 估算成本C. 控制成本D. 制定预算<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">你向项目发起人提供了一份项目成本估算. 发起人不满意, 认为总价应该低一些. 他要求你把项目成本估算砍掉15%. 你应该怎么做?A. 开始运行项目并持续寻找节约成本的方法B. 告诉你的团队把他们各自的成本估算都砍掉15%C. 建议发起人砍掉一些活动D. 什么都不用做, 因为你预留了超过15%的应急储备<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">项目发起人要求项目经理确保在预算范围内交付产品，项目经理应使用什么技术？A. 成本效益分析B. 预防成本C. 面向X的设计D. 统计抽样<span class="hljs-comment"># C</span><span class="hljs-comment"># 这题相当于项目最高优先级的目标是成本不超预算.</span><span class="hljs-comment"># 但是四个选项都是质量工具.</span><span class="hljs-comment"># D - 从成本角度来讲，ABC与成本有关，排除D.</span><span class="hljs-comment"># A - 成本效益分析是对备选方案进行选择，排除.</span><span class="hljs-comment"># B - 质量成本中的预防成本并不能控制成本.</span><span class="hljs-comment"># C - 面向X(DFX的设计比较合适,其中可以选择低成本设计(DFC)，</span><span class="hljs-comment">#     在满足用户需求的前提下，尽可能地降低成本.</span></code></pre><pre><code class="hljs bash">在审查所有项目的财务业绩时, 项目管理办公室(PMO)提出对一个项目感到担忧,根据项目所有者和相关方的反馈, 项目经理确信项目表现良好.项目经理可以应用哪一个指标来量化其假设?A. 成本绩效指数(CPI)B. 财务绩效C. 挣值(EV)D. 成本基准对比<span class="hljs-comment"># PMBOK(6)P257-7.4 控制成本.</span><span class="hljs-comment"># 项目财务业绩，即项目目前为止是超支了还是节约了，这个可以从CPI看出来.</span><span class="hljs-comment"># BD - 没有这种项目指标.</span><span class="hljs-comment"># C  - 不能单独判断.</span></code></pre><h4 id="57-规划质量管理"><a href="#57-规划质量管理" class="headerlink" title="57.规划质量管理"></a>57.规划质量管理</h4><p>质量测量指标是用非常具体的术语描述项目或产品属性的操作定义. 它们还定义了质量控制过程如何衡量它.<br>这些指标是**<u>规划质量管理过程</u>**的输出.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/031.png" alt="031" style="zoom:80%;margin-left: 0;"><pre><code class="hljs bash">你最近接手了一个目前正在管理可交付成果质量方面而苦苦挣扎的项目. 团队现在建议使用一些质量测量指标来控制一切.你想知道在此项目上已经就哪些质量指标达成一致. 在控制质量过程中使用的质量指标是在哪个过程中定义的?A. 规划质量管理B. 定义范围C. 收集需求D. 管理质量<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">项目经理正在收集项目总体运行状况方面的数据. 项目经理注意到为了确保质量，项目团队正在投入大量时间收集和分析数据. 项目经理该做什么？A. 查阅质量管理计划，分析是否要做出任何调整B. 确定新的项目衡量指标，使团队处于可接受的限值之内C. 通过因果分析法、访谈和讨论来调查情况D. 通过优势、劣势、机会与威胁（SWOT）分析确定产生该质量问题的原因<span class="hljs-comment"># A</span><span class="hljs-comment"># 质量 -&gt; 管理质量</span><span class="hljs-comment"># “项目经理注意到”，通常这样描述的时候，紧随其后的是一个问题.</span><span class="hljs-comment"># “项目团队正在投入大量时间收集和分析数据”，这是项目团队正在进行的质量管理活动.</span><span class="hljs-comment"># 判断暴露出来的问题是否是一个问题，要看是否在既定计划之内，所以要查阅质量管理计划.</span><span class="hljs-comment"># B - 没有描述问题出在质量测量指标上，排除.</span><span class="hljs-comment"># C - 是否是一个问题还未确定，在A选项之后.</span><span class="hljs-comment"># D - SWOT分析通常用于识别风险.</span></code></pre><pre><code class="hljs bash">某项目的执行阶段临近尾声，此时项目经理获悉，超过半数的项目可交付成果都能按进度计划且在预算内完成但其中几项可交付成果存在质量问题。项目经理应该如何解决这一问题？A. 将该问题分配给质量经理，因为他/她是质量保证(QA)方面的主题专家（SME）B. 将该问题增加到风险登记册之中，并确定潜在的风险应对方法C. 进行回顾性分析，并将研究结论纳入经验教训，以便未来有所改进D. 运用“五个为什么”技术找到根本原因<span class="hljs-comment"># D</span><span class="hljs-comment"># 质量 -&gt; 控制质量</span><span class="hljs-comment"># 质量问题已经暴露，需要对问题进行分析，最终解决质量问题.</span><span class="hljs-comment"># A - 主题专家提供建议，将问题推给质量经理，有推脱责任之嫌.</span><span class="hljs-comment"># B - 遇到问题首先解决问题，如果问题在将来可能重复出现，将其列为风险进行管理.</span><span class="hljs-comment"># C - 经验教训的总结在解决问题之后.</span></code></pre><pre><code class="hljs bash">核对已完成的工程工作进行随机检查时，发现某些组件不符合标准. 工程经理向项目经理保证, 不符合标准组件的数量很少，不会影响整体项目质量.项目经理应该做什么？A. 记录工程经理的评论，并继续推进项目以避免延期B. 坚持要求团队拆除已完成的工作并替换不符合标准的组件C. 使用统计抽样来验证组件的质量是否在可接受的水平内D. 参考既定的质量保证政策和程序，以确定适当的措施<span class="hljs-comment"># D</span><span class="hljs-comment"># 质量 -&gt; 管理质量</span><span class="hljs-comment"># 随机检查发现的质量问题预示着可能属于大面积出现的共性问题.</span><span class="hljs-comment"># 此时要实施管理质量活动，从流程上去预防质量问题的发生.</span><span class="hljs-comment"># A - 问题需要解决，不能简单的记录了事.</span><span class="hljs-comment"># B - 没有解决潜在的隐患.</span><span class="hljs-comment"># C - 随机检查即是统计抽样，已经做过了.</span></code></pre><pre><code class="hljs bash">由于产品的重要性，发起人希望密切监督项目的进展情况，以确保质量超出市场标准项目经理应该做什么来满足发起人的需求？A. 应用关键路径法B. 使用项目报告C. 评估时间提前量和时间滞后量D. 执行数据分析<span class="hljs-comment"># 质量 -&gt; 数据分析</span><span class="hljs-comment"># 题干中的关键字：“确保质量超过市场标准”.</span><span class="hljs-comment"># 根据题目关键字需要只有用控制质量来保证产品的质量能够达到标准.</span><span class="hljs-comment"># 那么选项中选择和控制质量相关的内容，选项D正确.</span><span class="hljs-comment"># 关键路径，提前量和滞后量都是和进度相关和质量无关，排除AC.</span><span class="hljs-comment"># 项目报告包括太多内容，不够精确，排除B.</span></code></pre><pre><code class="hljs bash">在一个公路施工项中，最近出现了返工的情况，导致项目经理非常担心项目的不一致性成本.项目经理来寻求你的帮助。你能给他的最好的建议是?A. 重新进行规划质量管理过程B. 加强质量控制C. 开展质量审计D. 开展标杆对照<span class="hljs-comment"># 8.2.2.5-审计</span><span class="hljs-comment"># 采取后续措施纠正问题，可以降低质量成本，并提高发起人或客户对项目产品的接受度.</span></code></pre><pre><code class="hljs bash">项目团队报告同行评审过程存在无价值的活动.质量团队必须审查观察结果并处理整体一致性.质量团队执行的是下列哪一项？A. 质量一致性B. 质量审计C. 质量控制D. 质量保证<span class="hljs-comment"># D</span><span class="hljs-comment"># 解析：过程分析检查在过程运行期间遇到的问题、制约因素，以及发现的非增值活动.</span></code></pre><pre><code class="hljs bash">在收到软件开发项目的可交付成果时客户发现没有遵守他们的编码标准，最终产品不符合质量要求. 项目经理下一步应该怎么做？A. 查看质量管理计划B. 开展质量审计C. 审查项目基准D. 与客户协商接受可交付成果<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P286-8.1.3.1 质量管理计划.</span><span class="hljs-comment"># 题目是两个问题：1、不遵守流程，2、最终产品不符合质量.</span><span class="hljs-comment"># 第一问题可以用质量审计，属于管理质量过程；</span><span class="hljs-comment"># 第二个问题要修复缺陷，属于控制质量过程只有A同时指导管理质量过程和控制质量过程.</span><span class="hljs-comment"># B - 被包含在A中.</span><span class="hljs-comment"># C - 项目基准不含质量.</span><span class="hljs-comment"># D - 明确不合格，协商没有用.</span></code></pre><pre><code class="hljs bash">在项目的质量审查期间，团队讨论了对当前质量管理计划的必要变更，以满足相关方的期望，目前的计划包括产品的特定事项和特征，但缺少一个重要方面.若要完成质量管理计划，项目经理应该怎么做？A. 评估交付团队的绩效B. 评估产品的性能C. 考虑产品等级D. 分析提供给客户的价值<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P286-8.1.3.1质量管理计划.</span><span class="hljs-comment"># 质量管理计划中阐述了项目采用的质量标准，</span><span class="hljs-comment"># 质量标准与产品的特定事项、特征和产品等级相关.</span><span class="hljs-comment"># A - 属于资源管理领域.</span><span class="hljs-comment"># B - 属于质量控制过程.</span><span class="hljs-comment"># D - 制定项目章程.</span></code></pre><pre><code class="hljs bash">项目经理正在另一个国家执行一个IT外包项目.客户抱怨说远程团队没有达到他们的质量标准.项目经理应该查阅哪一份文件来确认这一点？A. 外包公司的质量政策B. 质量控制测量结果C. 采购工作说明书(SOW)D. 质量管理计划<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P286 章节：8.1.3.1 质量管理计划.</span><span class="hljs-comment"># 质量管理计划包括（但不限于）以下组成部分：</span><span class="hljs-comment"># 1) 项目采用的质量标准;</span><span class="hljs-comment"># 2) 项目的质量目标;</span><span class="hljs-comment"># 3) 质量角色与职责;</span><span class="hljs-comment"># 4) 需要质量审查的项目可交付成果和过程;</span><span class="hljs-comment"># 5) 质量标准在质量管理计划里.</span></code></pre><h4 id="58-经验教训登记册"><a href="#58-经验教训登记册" class="headerlink" title="58.经验教训登记册"></a>58.经验教训登记册</h4><p>规划风险管理 : 制定风险管理计划的输入, 经验教训登记册.</p><p>总结经验教训 : 结束项目或阶段”复制良好实践”, 首先需要总结经验教训, <u><strong>实施后评审会议</strong></u>, 也就是<u><strong>项目后评价</strong></u>, 就是在做总结经验教训.</p><p>组织过程资产更新:<br>经验教训的收集在整个项目期间开展. 虽然在考察行政收尾的题型中, 反复强调在收尾阶段要进行经验教训的总结, 但<strong>不代表着只在项目收尾阶段进行</strong>.</p><pre><code class="hljs bash">一位初级项目经理必须为一个新项目制定全面的风险管理计划. 项目经理详细审查了项目管理计划. 项目经理应该参考哪一份文件?A. 质量管理计划B. 资源管理计划C. 经验教训登记册D. 工作分解结构(WBS)<span class="hljs-comment"># C</span><span class="hljs-comment"># 风险 -&gt; 规划风险管理</span><span class="hljs-comment"># 考察的是制定风险管理计划的输入，另外情景中提到了“全面的”.</span><span class="hljs-comment"># 所以要多借鉴之前项目的经验.</span></code></pre><pre><code class="hljs bash">项目经理希望从最近完成的一个项目中复制良好实践. 然而, 项目经理在有时间评估最近完成项目的项目信息之前就已经开始负责管理另一个项目. 项目经理应该怎么做?A. 遵从分配调到新项目B. 召开实施后评审会议C. 与新团队分享之前项目的经验教训D. 要求项目管理办公室(PMO)和过程经理收集经验教训<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)4.7 结束项目或阶段 “复制良好实践”，首先需要总结经验教训.</span><span class="hljs-comment"># 选项实施后评审会议，就是项目后评价，也就是在做总结经验教训. 符合题意.</span><span class="hljs-comment"># D  - 经验教训要项目经理主导.</span><span class="hljs-comment"># CA - 都在B的后面.</span></code></pre><pre><code class="hljs bash">一个漫长的施工项目在采购过程中遇到一些问题, 这些问题还在继续发生在调查过程中,一些团队成员希望知道他们应该在何时收集经验教训. 项目经理应该如何答复?A. 在项目生命周期期间和之后不久B. 在项目收尾时C. 在项目阶段收尾期间D. 在每个学习关口<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">在管理当前项目的时候，非常重要的一点是要运用从以往项目上积累的经验教训来提高项目管理的水平.因此在结束项目或阶段程序中，回顾下列哪项是比较重要的？A. 曾发生过的中等程度的风险B. 风险核对单C. 工作分解结构词典D. 团队成员简历<span class="hljs-comment"># B</span><span class="hljs-comment"># P413 章节：11.2.1.6.</span><span class="hljs-comment"># 组织过程资产会影响识别风险过程的组织过程资产包括(但不限于)：</span><span class="hljs-comment"># 项目文档，包括实际数据；组织和项目的过程控制资料；</span><span class="hljs-comment"># 风险描述的格式；以往类似项目的核对单.</span><span class="hljs-comment"># 核对单属于重要的组织过程资产.</span></code></pre><pre><code class="hljs bash">一旦项目移交给运营团队,项目经理下一步应该做什么?A. 归档所有项目文件,并向相关方提供访问权限B. 进行绩效评估,并释放项目资源C. 将经验教训登记册提交给相关方D. 将相关方的反馈加入经验教训库<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P121章节：4.7 收尾流程:</span><span class="hljs-comment"># 已经移交，接下来测量相关方的满意，</span><span class="hljs-comment"># 完成经验教训总结. 测量相关方的满意度.</span></code></pre><pre><code class="hljs bash">项目经理正在管理一个为期五年，价值2亿美元的项目，程序文件管理被列为项目发起人的主要需求，优先级甚至超过了设计本身.在以文件化设计的形式确定关键可交付成果后，项目经理与文件管理员签订合同.在这种情況下项目经理风险管理计划的关键组成部分是哪份计划？A. 需求管理计划B. 成本管理计划C. 资源管理计划D. 质量管理计划<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P401-11.1规划风险管理.</span><span class="hljs-comment"># &quot;程序文件管理被列为发起人的主要需求&quot;，所以在制定风险管理计划时要重点关注需求管理计划.</span><span class="hljs-comment"># B - 描述将如何规划、安排和控制项目成本.</span><span class="hljs-comment"># C - 是关于如何分类、分配、管理和释放项目资源的指南.</span><span class="hljs-comment"># D - 描述如何实施适用的政策、程序和指南以实现质量目标.</span></code></pre><pre><code class="hljs bash">一位项目经理正在为一家初创公司领导一个敏捷项目.虽然这是该组织的第一个此类项目，但可能会有更多类似的项目紧随其后.因此，项目经理希望确保在这个项目中获得的知识能够用于未来的项目.下列哪一种做法将最好地支持知识转移，以造福未来的项目？（选择三个）A. 记录在整个项目中学习到的经验教训中获得的知识B. 确保经验教训登记册最后定稿并转移到经验教训存储库C. 与项目团队和相关相关方定期召开回顾会议D. 定期审查作为项目管理计划组成部分的知识管理计划E. 确保在配置管理计划中将所学到的经验记录作为配置元素列出<span class="hljs-comment"># ABC</span><span class="hljs-comment"># PMBOK 6th 页码：P104 章节：4.4.3.1 经验教训登记册.</span><span class="hljs-comment"># 在项目早期创建. 在整个项目期间，它可以作为很多过程的输入，</span><span class="hljs-comment"># 也可以作为输出而不断更新. 在项目或阶段结束时，</span><span class="hljs-comment"># 把相关信息归入经验教训知识库，成为组织过程资产的一部分.</span><span class="hljs-comment"># D - 不存在知识管理计划.</span><span class="hljs-comment"># E - 配置管理计划不存档项目知识.</span></code></pre><pre><code class="hljs bash">在准备项目的第四份状态报告时, 项目经理了解到客户正在迁移到新系统.客户通知为了保持一致性，以及为了简化项目报告的审查,所有未来的报告均应使用新系统提交.由于原始系统被定义为在进度报告期间使用的软件,因此项目经理将该问题记录为经验教训. 将该问题作为经验教训报告的价值是什么?A. 它可以作为防止法律诉讼的依据B. 它可被识别为一个可能发生的问题C. 它可以作为建议合同团队保持灵活性的依据D. 它将有助于防止未来合同中软件规范的遗漏<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK Gth 页码：P104 章节：4.4.3.1经验教训登记册.</span><span class="hljs-comment"># 经验教训登记册可以记录遇到 的挑战、问题、意识到的风险和机会，或其他适用的内容.</span><span class="hljs-comment"># 经验教训登记册在早期创建，在整个项目期间，它可以作为很多过程的输入，</span><span class="hljs-comment"># 也可以作为输出而不断更新. 经验教训改善未来绩效，因此参考经验教训，一般不会犯过去的错误.</span></code></pre><pre><code class="hljs bash">在一个为期12个月的项目中, 供应商通知项目经理所需的项目设备将被延迟，经过进一步调查后, 项目经理得知该供应商在业绩表现方面口碑不佳.若要避免这个问题,项目经理应该事先做什么?A. 检查更新后的风险登记册和问题日志B. 在供应商名单中添加备份供应商C. 在进度计划基准中包含应急缓冲D. 查看其它项目的经验教训文档<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P484 章节：12.2.1.2 经验教训登记册.</span><span class="hljs-comment"># 在项目早期获取的与实施采购有关的经验教训，可用于项目后期阶段，</span><span class="hljs-comment"># 以提高本过程的效率. 实施采购之前，先看这家供应商之前的口碑，以避免问题.</span></code></pre><h4 id="59-风险登记册"><a href="#59-风险登记册" class="headerlink" title="59.风险登记册"></a>59.风险登记册</h4><p>风险登记册 : 识别出来的风险要首先按记录到风险登记册, 然后对风险进行分析评估, 制定应对策略.<br>风险登记册会随着风险管理的流程不断更新. 有时项目文件就是指<u><strong>风险登记册</strong></u>.</p><p>成本偏差(CV): 10%以内的偏差是正常的, 但是有一个国家大于了10%, 因此推断是当时这个国家的汇率或通货膨胀率有问题,<br>因此应该把这个风险登记在<u><strong>风险登记册</strong></u>中.</p><p>监督风险 : “新风险”直接未识别出, 要首先更新到风险登记册, 然后针对风险进行评估, 根据评估的结果制定风险应对计划.<br>监督风险 - 变更请求:<br>执行监督风险过程后, 可能会就成本基准和进度基准,  或项目管理计划的其他组件提出<strong>变更请求</strong>, 应该通过实施整体变更控制过程对变更请求进行审查和处理. </p><p>公司希望重新安排一名重要资源, 需要<u><strong>先分析是否存在风险</strong></u>, 若存在风险需要更新风险登记册, 将评估结果更新到风险登记册.</p><p>识别风险: <u>已识别的风险要添加到风险登记册</u>。另外注意，<u><strong>客户数据不可用不是一个变更请求</strong></u>.</p><p>应急计划:<br>遇风险, 先查册<br>针对<strong>已知 - 未知风险</strong>, 采用应急计划<br>针对<strong>未知 - 未知风险</strong>, 采用权变措施</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/013.png" alt="013" style="zoom:67%;"><p>监督风险 - 输出 - 项目文件更新 - 风险登记册 : “审核期间, 识别的风险已通过审核”表明风险应对<u>已实施, 可以关闭</u>, 并将结果更新到风险登记册上.<br>风险关闭而释放的<u>应急储备应该释放给组织</u>, 而不是在项目内继续使用.<br><u>风险重新评估</u>作为<u>监督风险</u>过程的一部分进行. 此类项目风险重新评估应定期进行, 并可能导致过期风险的关闭.</p><p>流程: </p><p>过程顺序: 识别 -&gt; 定性 -&gt; 定量</p><p>更新文件: 先更新风险登记册</p><p>新风险: 已发生先应对, 未发生先定性</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/011.png" alt="011"></p><pre><code class="hljs bash">项目经理所在的大型公司正在启动一个与之前项目截然不同的新项目. 项目经理根据该公司的经验识别了一个高概率风险.项目经理向外部专家征求意见, 这些专家发现了其他风险. 项目经理应该做什么?A. 为专家识别的新风险指派一名风险责任人B. 登记专家识别的的风险C. 登记旨在控制新识别风险的行动D. 为专家识别的新风险编制风险管理计划<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">一位经验丰富的项目团队成员通知项目经理, 一个新风险未在风险登记册中列出. 项目经理首先应该做什么?A. 与整个团队开会, 讨论项目可能遇到的其他潜在风险B. 更新风险登记册C. 告诉成员继续进行项目工作, 因为风险可能不会对项目产生重要影响D. 分析风险<span class="hljs-comment"># B</span><span class="hljs-comment"># 风险 -&gt; 监督风险</span><span class="hljs-comment"># &quot;新风险&quot;直接被识别出，要首先更新到风险登记册.</span><span class="hljs-comment"># 然后针对风险进行评估，根据评估的结果制定风险应对计划.</span><span class="hljs-comment"># D - 在B选项之后.</span><span class="hljs-comment"># A - 风险已经被识别.</span><span class="hljs-comment"># C - 未经评估即下定论，过于草率.</span></code></pre><pre><code class="hljs bash">项目技术团队审核期间, 先前识别的一个风险现已通过审核. 根据这些信息, 项目经理应采取哪些措施?A. 在风险登记册中关闭该风险, 但要将相关的应急储备作为未来风险的缓冲B. 继续监督该风险, 直到项目完成, 因为未来还可能会发生该风险C. 利用相关的风险储备分配额外资源, 从而加速项目的推进D. 在风险登记册中将该风险标记为已关闭, 并减少相关的应急储备<span class="hljs-comment"># D</span><span class="hljs-comment"># 风险 -&gt; 风险登记册.</span><span class="hljs-comment"># 关键词“审核期间，识别的风险已通过审核”表明风险应对已实施，可以关闭，并将结果更新到风险登记册上.</span><span class="hljs-comment"># B  - 该题容易误导的选项是B，确实应该继续监督该风险直到项目完成.</span><span class="hljs-comment"># 但不是因为该风险还会发生，而是因为需要监督风险是否发生变化而导致之前实施的应对不再起作用了.</span><span class="hljs-comment"># AC - 由于风险关闭而释放的应急储备应该释放给组织，而不是在项目内继续使用，排除AC.</span><span class="hljs-comment"># 已关闭的风险不用再继续监督。若有新风险或此生风险应该再记录在登记册中.</span></code></pre><pre><code class="hljs bash">在项目进行时, 一位项目经理意识到团队的技能专长是有限的, 这给项目带来风险.在项目进行到一半时, 项目经理认为这不再是一种风险, 并认为它过期了.作为哪一个过程的一部分, 他会进行风险重新评估?A. 执行风险评估B. 实施定量风险分析C. 监督风险D. 实施定性风险分析<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">在评审会议期间, 开发人员识别到存在产品性能的风险. 项目经理应该做什么?A. 使用专家判断进行独立风险评估B. 分配另一名开发人员解决该问题C. 提出变更请求D. 更新项目文件<span class="hljs-comment"># D</span><span class="hljs-comment"># 风险登记册.</span><span class="hljs-comment"># 识别出来的风险要首先按记录到风险登记册, 然后对风险进行分析评估, 制定应对策略.</span><span class="hljs-comment"># 风险登记册会随着风险管理的流程不断更新. 有时项目文件就是指风险登记册.</span></code></pre><pre><code class="hljs bash">项目经理正在执行一个历时数年的大型跨国项目, 除了一个地区外, 项目经理确定所在地区的成本偏差(CV)均低于10%. 若要避免这个问题, 项目经理应该事先做什么?A. 考虑所有地区的汇率和通货膨胀率B. 将汇率和通货膨胀率记录在风险登记册中C. 为该地区包含应急费用D. 请求额外的资源<span class="hljs-comment"># B</span><span class="hljs-comment"># 成本偏差(CV): 10%以内的偏差是正常的, </span><span class="hljs-comment"># 但是有一个国家大于了10%, 因此推断是当时这个国家的汇率或通货膨胀率有问题, </span><span class="hljs-comment"># 因此应该把这个风险登记在风险登记册中.</span></code></pre><pre><code class="hljs bash">识别风险之后, 项目团队对项目结果的影响意见不一致, 项目经理首先应该怎么做?A. 定量风险分析B. SWOT分析C. 头脑风暴D. 定性风险分析<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">在项目执行过程中, 职能经理识别到有关外包团队的新内部风险,职能经理向项目经理寻求一个不会对项目产生负面影响的快速解决方案. 项目经理应该怎么做?A. 创建风险分解结构(RBS)B. 按照严重级别记录风险C. 执行风险策略D. 使用变更管理计划<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目经理被任命一个处于执行阶段的项目. 项目经理识别到几个导致团队担心的风险, 为了规避这个风险. 项目经理应该怎么做?A. 更新风险登记册和制定风险应对计划B. 审查风险管理计划C. 与所有团队成员分享更新的风险登记册D. 审查项目管理计划<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">在项目即将进入收尾阶段时, 项目经理发现了一项原来没有考虑到的新风险.该风险一旦发生, 可能给最终的可交付成果带来重要影响,甚至可能使其不能被客户接受. 项目经理应该怎么做?A. 把该风险的影响通知管理层和客户B. 进行定性风险分析C. 制定风险缓解措施D. 增加应急储备<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">在高科技产品开发中，为了保证产品成功，在产品最终定型之前，通常要进行大量的测试工作.这种做法被认为是高科技产品开发项目风险管理的有效方法，尽管增加测试会增加项目成本。这属于哪种风险应对策略?A. 风险接受B. 风险转移C. 风险规避D. 风险缓解<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P443 章节：11.5.2.4.</span><span class="hljs-comment"># 减轻采用较简单的流程进行更多次测试选用更可靠的卖方原型开发在一个系统中加入冗余部件</span><span class="hljs-comment"># 进行更多的测试属于减轻.</span></code></pre><pre><code class="hljs bash">在执行一个高技术项目期间, 高层管理人员在不通知项目经理的情况下重新分配核心团队.整合新团队成员将增加项目进度延迟的可能性. 若要确定适当的响应措施,项目经理应参考哪份文件?A. 经验教训储存库B. 工作分解结构(WBS)字典C. 团队技能矩阵D. 风险登记册<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">在项目执行过程中, 指定供应商的仓库发生火灾, 导致无法按计划为项目提供所需产品.为了不影响项目顺利执行, 项目经理决定从原定备用供应商那里, 采购所需产品.项目经理的做法属于?A. 执行权变措施B. 执行弹回计划C. 执行应急计划D. 执行风险转移<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">项目经理正在管理一个软件开发项目的执行工作. 在执行过程中, 发生了一个风险应对计划中没有包括的风险. 项目经理应该怎么做?A. 使用应急储备来解决风险的后果B. 把风险的实际情况报告给管理层C. 召开团队会议讨论权变措施D. 不理会这个风险, 既然计划中没有包括<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">在项目的最后一个星期, 一场风暴造成损害并影响项目的交付日期, 项目经理应该怎么做?A. 提交变更请求B. 将其报告给项目发起人C. 使用储备分析技术D. 更新风险登记册<span class="hljs-comment"># A</span><span class="hljs-comment"># B - 是否报告发起人, 要看风险应急计划中规划的应对策略.</span><span class="hljs-comment"># C - 储备分析技术用以判断风险敞口和储备之间的关系.</span><span class="hljs-comment"># D - 风险应急计划的执行结果更新到风险登记册, 在选项A之后.</span></code></pre><pre><code class="hljs bash">项目经理正在为一个复杂的电子商务应用程序工作. 客户同意在项目开始时向应用程序测试团队提供数据.但是，在用户验收测试(UAT)之前，客户数据将不可用. 项目经理首先应该怎么做？A. 将该问题升级上报给客户B. 让团队创建用于测试的虚拟数据C. 评估影响, 并将其提交给变更控制委员会(CCB)D. 将该情况记录在风险登记册中<span class="hljs-comment"># D</span><span class="hljs-comment"># AB - 做出什么样的应对计划, 需要根据风险评估的结果.</span><span class="hljs-comment"># C - 考察的是风险管理过程, 不选.</span></code></pre><pre><code class="hljs bash">在项目执行中途, 公司希望重新安排一名重要资源, 项目经理应该怎么做?A. 分析该请求的潜在影响和风险B. 更新风险登记册C. 要求和相关方定义风险应对策略D. 对该风险进行优先级排序<span class="hljs-comment"># A</span><span class="hljs-comment"># 先A -&gt; B</span><span class="hljs-comment"># CD: 依赖于风险分析评估的结果.</span></code></pre><pre><code class="hljs bash">某软件开发项目的项目发起人对于整体负面项目风险可能会导致项目目标无法实现一事表示忧虑.项目经理可以采取以下哪种策略来调整整体项目风险的级别并优化实现项目目标的可能性？A. 举行风险评估研讨会，以便最大程度地降低风险影响估算B. 将高收益要素增加到项目范围之中C. 将风险转移给第三方D. 更改项目的范围和界限<span class="hljs-comment"># D</span><span class="hljs-comment"># 风险 -&gt; 整体项目风险应对策略</span><span class="hljs-comment"># 取消项目范围中的高风险工作，是一种整个项目层面的规避措施.</span><span class="hljs-comment"># A - 掩耳盗铃，降低估算，并不意味着风险不会发生.</span><span class="hljs-comment"># B - 情景中没有提到高收益因素.</span><span class="hljs-comment"># C - 注意情景中关注的是”调整整体项目风险的级别”，转移后风险仍然存在，只是损失由第三方承担.</span></code></pre><pre><code class="hljs bash">在审查项目报告时，项目经理识别到一个新的不稳定事件.可能延迟项目进度计划，为制定减少该事件的计划，项目经理首先应该做什么？A. 更新风险登记册B. 修订进度计划C. 评估对项目的整体影响D. 执行根本原因分析<span class="hljs-comment"># A</span><span class="hljs-comment"># 风险 -&gt; 识别风险</span><span class="hljs-comment"># “可能影响项目进度计划”，属于风险，要将其添加至风险登记册.</span><span class="hljs-comment"># 接下来对风险进行评估，根据评估的结果制定风险应对计划.</span><span class="hljs-comment"># 选项BCD在A选项之后.</span></code></pre><pre><code class="hljs bash">某项目开始时，项目团队全面地识别并记录了相关风险.但仍可能会发生某些风险，客户对此情况颇为不满. 项目经理该做什么？A. 在项目的整个生命周期内继续监控风险B. 向客户提供详细的风险应对计划C. 将目前的项目风险状况告知所有项目相关方D. 对项目进行影响分析<span class="hljs-comment"># A</span><span class="hljs-comment"># 风险 -&gt; 监督风险</span><span class="hljs-comment"># “客户对此情况颇为不满”，并不是针对具体风险的不满.</span><span class="hljs-comment"># 而是认为风险管理存在缺失，所以要强化在项目实施期间的风险管理，选A.</span><span class="hljs-comment"># B - 针对单个风险的应对计划过于具体，不适合汇报，提供风险报告较为合适.</span><span class="hljs-comment"># C - 向哪些相关方提供信息，要依据沟通管理计划进行.</span><span class="hljs-comment"># D - 影响分析属于风险管理的一环，包含在了选项A当中.</span></code></pre><pre><code class="hljs bash">一家公司的仓储设施受到风暴影响, 这对项目的完成日期和里程碑产生不利影响.项目经理应查阅哪一份文件来找到将解决这种情况的人员角色和职责?A. 相关方管理计划B. 风险管理计划C. 资源管理计划D. 沟通管理计划<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">你刚被指派负责某项目，该项目正处于项目计划阶段，风险管理团队负责人向你报告已完成风险识别工作，该负责人对项目存在很多风险表示很担心，为了有效地管理项目风险，项目经理下一步的工作将如何开展?A. 通过风险分析确定哪些风险最值得管理B. 为已识别的风险编制有效的应对计划C. 开展风险分析工作，进一步了解风险D. 为各项风险指定责任人<span class="hljs-comment"># C</span><span class="hljs-comment"># P419章节：11.3实</span><span class="hljs-comment"># 施定性风险分析是通过评估单个项目风险发生的概率和影响以及其他特征，</span><span class="hljs-comment"># 对风险进行优先级排序，从而为后续分析或行动提供基础的过程.</span><span class="hljs-comment"># 识别完风险后要定性分析.</span></code></pre><pre><code class="hljs bash">项目经理了解到主题专家(SME)正在考虑离开公司，该专家资源在其主题领域拥有深厚知识，很难被替代，为确保主题专家能在整个项目期问留在项目中，项目经理与主题专家的经理讨论可能的措施，这些措施应记录在哪些文件中？A. 人力资源计划B. 风险登记册C. 风险管理计划D. 组织分解结构<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P448 章节：11.5.3.3风险登记册：</span><span class="hljs-comment"># 商定的应对策略；实施所选应对策略所需要的具体行动；</span><span class="hljs-comment"># 风险发生的触发条件、征兆和预警信号；</span><span class="hljs-comment"># 实施所选应对策略所需要的预算和进度活动.</span><span class="hljs-comment"># 商定完应对策略后，记录到风险登记册中.</span></code></pre><pre><code class="hljs bash">项目经理正在为一个沟通项目制定一份进度计划.可用的项目信息很模糊，若要解決这个问题，项目经理应该怎么做？A. 增加所有活动的总浮动时间B. 使用三点估算确定活动持续时间C. 为不确定的活动分配应急储备D. 与项目团队一起开会，估算活动持续时间<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P437-11.5规划风险应对.</span><span class="hljs-comment"># 项目的可用信息很模糊，要解决这个问题，对风险评估，</span><span class="hljs-comment"># 根据的评估的结果制定应急计划，并分配应急储备.</span><span class="hljs-comment"># 对风险的评估并不局限于估算活动的持续时间.</span><span class="hljs-comment"># A  - 没有对风险进行评估就做出决策是草率的.</span><span class="hljs-comment"># BD - 只估算了活动的持续时间，却忽视了信息模糊做为潜在风险带来的影响.</span></code></pre><pre><code class="hljs bash">公司聘用一名项目经理来协调一个期限紧迫的敏捷项目，项目经理和敏捷团队都由一位项目组合经理管理，该项目组合经理倾向于根据需要将开发人员重新分配给其他紧急事项，当项目经理与其接洽时，项目组合经理坚持认为他有权根据需要调动资源，项目经理应该怎么做？A. 将此问题提升为问题日志中B. 更新风险登记册C. 将此问题升级上报给项目组合经理的主管D. 请求额外的资源<span class="hljs-comment"># B</span><span class="hljs-comment"># 解析：PMBOK(6)P453-11.7监督风险.</span><span class="hljs-comment"># 项目组合经理的坚持可能会对项目影响，属于可能遇到的风险，此时需要查阅/更新风险登记册.</span><span class="hljs-comment"># A  - 因为没有最终确定项目组合经理可以动用，所以不建议将其记录为一个问题.</span><span class="hljs-comment"># CD - 可能出现在应急计划中的方案.</span></code></pre><pre><code class="hljs bash">供应商不断延迟向项目管理团队提交状态报告.项目经理应该怎么做？A. 向该供应商发送一封警告信，并暂停向他们付款B. 修改检查和采购管理计划C. 提交请求以变更供应商的范围D. 制定风险应对计划<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P453-11.7监督风险.</span><span class="hljs-comment"># 供应商不断延迟提交状态报告这个问题，</span><span class="hljs-comment"># 可能对项目造成影响，将其识别为一项风险进行规划风险应对.</span><span class="hljs-comment"># A  - 根据合同的约定向供应商发送违约函是正确的，但是暂停付款是不对的.</span><span class="hljs-comment"># BC - 是在对这个风险评估后可能做出的调整. 注意前后流程顺序.</span></code></pre><pre><code class="hljs bash">项目经理正在领导一个全球虚拟团队一次每周项目状态会议上，项目经理意识到来自不同地方的两名团队成员正在执行同一个任务,而不是按计划分别执行独立的任务.项目经理下一步应该怎么做？A. 依照人员分配工具重新培训整个团队并更新项目进度计划B. 修订风险登记册以显示这对项目管理计划的影响C. 通知项目相关方，这将影响项目进度D. 通知项目发起人并更新资源管理计划<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P453-11.7监督风险.</span><span class="hljs-comment"># 风险发生, 查阅风险登记册，看是否已记录，如果属于新风险，</span><span class="hljs-comment"># 进行评估，根据结果制定应急计划.</span><span class="hljs-comment"># ACD - 依赖风险评估的结果，在选项B之后.</span></code></pre><pre><code class="hljs bash">项目分包商的一位关键资源需求是一个制造过程的技术专家.在项目的早期阶段，很明显分包商的员工缺乏足够的专业知识来满足质量标准.项目经理应该怎么做？A. 更新风险登记册B. 为项目团队指定一名主题专家(SME)C. 对分包商执行质量审计D. 审查合同中的任何相关罚款条款<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P409-11.2识别风险.</span><span class="hljs-comment"># &quot;缺乏足够的专业知识来满足质量标准&quot;属于识别出来的风险，需要更新到风险登记册.</span><span class="hljs-comment"># B - 属于对风险进行评估后可能制定的应急计划，在先选个A之后.</span><span class="hljs-comment"># C - 对供应商进行的是采购绩效审查，而不是质量审计.</span><span class="hljs-comment"># D - 情景中还末明确供应商违约.</span></code></pre><pre><code class="hljs bash">在规划中，项目团队识别到一个质量不合格风险，并为这个风险准备了一份行动计划. 若要避免项目执行过程中的不合格，项目经理应进行下列哪一项？A. 风险评估B. 风险减轻C. 进行风险优先排序D. 风险转移<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P453-11.7监督风险.</span><span class="hljs-comment"># 质量不合格的风险需要持续的跟踪和评估.</span><span class="hljs-comment"># B - 11.5规划风险应对.</span><span class="hljs-comment"># C - 11.3风险定性分析.</span><span class="hljs-comment"># D - 11.5规划风险应对.</span></code></pre><pre><code class="hljs bash">项目经理在产品开发的第三次迭代中意识到，用于项目管理计划的模板没有显示更新.项目经理应该采取什么行动？A. 指派一名团队成员更新项目管理计划模板并记录任何风险B. 根据即将到来的迭代的商业价值而对更新模板的需求进行排序C. 避免通过独立修复问题而增加团队的分心D. 将问题记录为新的项目风险并提出解决方案<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P458 章节：11.7.3.4 风险登记册.</span><span class="hljs-comment"># 更新风险登记册，记录在监督风险过程中产生的关于单个项目风险的信息，</span><span class="hljs-comment"># 可能包括添加新风险、更新已过时风险或已发生风险，以及更新风险应对措施，等等.</span><span class="hljs-comment"># 先记录下来，后续采取相关措施.</span><span class="hljs-comment"># A - 直接指派不合适.</span><span class="hljs-comment"># B - 排序是PO的事情.</span><span class="hljs-comment"># C - 问题要透明.</span></code></pre><pre><code class="hljs bash">在酒店建设项目的执行过程中，负责实施特定风险应对策略的人已经离开了执行组织，项目经理已经确定了一个新相关方来承担这些责任.更新相关方登记册后，项目经理接下来应该做什么？A. 更新风险管理计划B. 修订风险登记册C. 向PMO通知新的相关方D. 执行实施定性风险分析过程<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P427 章节：11.3.3.1 风险登记册.</span><span class="hljs-comment"># 每项单个项目风险的概率和影响评估优先级别或风险分值指定风险责任人</span><span class="hljs-comment"># 风险紧迫性信息或风险类别低优先级风险的观察清单</span><span class="hljs-comment"># 风险登记册中记录了风险责任人.</span></code></pre><pre><code class="hljs bash">项目经理正在为一个复杂的电子商务应用程序工作.客户同意在项目开始时向应用程序测试团队提供数据.但是，在用户验收测试(UAT)之前，客户数据将不可用.项目经理首先应该怎么做？A. 将该问题升级上报给客户B. 让团队创建用于测试的虚拟数据C. 评估影响，并将其提交给变更控制委员会(CCB)D. 将该情況记录在风险登记册中<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P409-11.2识别风险.</span><span class="hljs-comment"># 已识别的风险要添加到风险登记册.</span><span class="hljs-comment"># 另外注意，客户数据不可用不是一个变更请求，</span><span class="hljs-comment"># C  - 这道题目考察的是风险管理过程，排除C.</span><span class="hljs-comment"># AB - 做出什么样的应对计划，需要根据风险评估的结果.</span></code></pre><pre><code class="hljs bash">为了开发可交付成果，项目管理计划规定，分析师应在每次迭代开始时向项目國队提供数据集.在每日站会，开发人员报告说没有可用的数据集，因为分析师离开了公司井且没有新人上岗.采取以下哪种措施是适当的？(选择两项)A. 提交变更请求以更新成本和进度基准B. 检查风险登记册，看是否有足够的应对C. 与负责人一起将问题记录在风险登记册中D. 终止项目，因为现在没有前进计划<span class="hljs-comment"># BC</span><span class="hljs-comment"># PMBOK Gth 页码：P455 章节：11.7.1.2风险登记册.</span><span class="hljs-comment"># 已识别单个项目风险, 风险责任人</span><span class="hljs-comment"># 商定的风险应对策略.</span><span class="hljs-comment"># 以及具体的应对措施. 遇风险，先查册.</span></code></pre><h4 id="60-实施风险应对"><a href="#60-实施风险应对" class="headerlink" title="60.实施风险应对"></a>60.实施风险应对</h4><p>实施风险应对 : “风险已经成为问题”, 风险被触发, 查阅风险登记册, 实施预设的风险应对计划.<br>如何减轻风险, 减轻就是一种<u><strong>风险应对措施</strong></u>. 把规划好的风险应对措施更新到风险登记册中.</p><p>实施风险应对 - 输出 - 项目团队派工单 : 风险已被识别, 应当规划并实施应对, 其中实施应对的一个关键措施就是<strong>分配资源以应对风险</strong>.</p><p>项目风险管理 : 已识别的风险 -&gt; 定性分析 -&gt; 定量分析 -&gt; 规划应对.<br>定量分析是在定性分析的基础上, 对优先级较高的风险进行<u>定量分析</u>. 对于小型的项目, 风险的类型和数量可能没有大型项目那么多,<br>因此从成本的角度考虑,有可能会取消<u>定量分析</u>这个过程.</p><p><strong><u>定性分析</u></strong> : 检查风险登记册中的风险, 并分析每个风险发生的概率, 以及如果确实发生风险, 对项目可交付成果的影响.<br>它通过评估其发生概率和影响来<u><strong>排名未来行动或分析的风险</strong></u>. </p><p>划分风险的高, 中, 低等级属于<u><strong>风险定性分析</strong></u>, <strong>概率和影响矩阵</strong>属于定性分析中使用的工具.<br>风险定量分析的工具: </p><ol><li>敏感性分析</li><li>决策树</li><li>蒙特卡洛模拟</li></ol><p>风险分解结构(RBS) : 是按风险类别和子类别排列的已识别项目风险的分层组织描述.<br>这可能基于以前编写的分类框架. RBS用于<u><strong>提醒参与风险识别的参与者</strong></u>, 以识别项目风险可能产生的不同来源.<br>风险分解结构(RBS)就是对风险进行<u><strong>分类</strong></u>的.</p><p>假设分析:<br>假设分析是逐个逐级确认或排除各种<strong>假设情形</strong>, 并评估其对项目的影响.</p><p><strong>定量风险分析</strong>: 通过<u><strong>量化</strong></u>整体项目风险敞口，评估项目可能要面临的财务损失.</p><pre><code class="hljs bash">一个之前识别到的项目风险已成为一个问题, 有可能导致所有项目工作立即停止,且停止时长未知. 项目经理应该做什么?A. 使用实施风险应对流程B. 暂停项目, 并解散所有项目团队成员, 直到另行通知C. 召开一次紧急指导委员会会议, 征求如何最好地解决问题的指导D. 请求质量管理团队帮助解决该问题<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">在某项目执行阶段, 项目经理获悉, 某项目需求可能会发生变更, 这可能会对该项目的成本和进度产生重大影响. 在这种情况下, 项目经理应该做什么?A. 将对该需求的潜在变更增加到项目章程中, 然后立即调整项目成本和进度计划文件B. 对风险登记册不作修改, 但就对项目成本和进度计划的影响征得项目发起人批准C. 分配必要人员应对该潜在变更, 尽管该应对措施未在风险应对计划中获批D. 提出针对潜在变更的变更请求, 并征得变更控制委员会(CCB)批准<span class="hljs-comment"># C</span><span class="hljs-comment"># 风险 -&gt; 实施风险应对 </span><span class="hljs-comment"># 关键词“执行阶段，PM获悉，可能变更，重大影响”表明这是一个风险，且已被识别.</span><span class="hljs-comment"># 应当规划并实施应对，其中实施应对的一个关键措施就是分配资源以应对风险.</span><span class="hljs-comment"># A - 项目章程变更意味着项目的重新授权，排除.</span><span class="hljs-comment"># B - 从题目中很明显发现了新的风险，需要更新风险登记册，排除.</span><span class="hljs-comment"># D - 变更还没有发生就直接申请潜在变更不正确，排除.</span></code></pre><pre><code class="hljs bash">项目经理刚刚完成风险管理计划, 其中包括已识别的风险, 项目经理下一步应该做什么?A. 执行优势, 劣势, 机会和威胁(SWOT)分析B. 执行定性风险分析C. 实施风险应对D. 更新假设日志<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">你已被分配一个新项目来部署新的员工考勤管理系统. 你的初始项目计划已被指导委员会拒绝, 并且要求你进一步消减项目成本. 为了降低成本, 可以取消此项目的以下哪些流程?A. 实施定量风险分析B. 规划风险管理C. 实施定性风险分析D. 识别风险<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">你正在管理一个涉及许多不确定性和风险的建筑翻新项目. 这要求你特别注意风险管理流程. 作为风险分析的一部分, 大多数风险都可以在高层次分析中被识别, 而一些关键风险需要更详细地分析.哪种风险类型是基于评估它们发生和影响的概率的结果来确定未来行动优先级和对风险排名?A. 假设分析B. 风险分解结构(RBS)C. 定性分析D. 定量分析<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">项目经理正在负责一个新能源技术项目, 发起人听说政府将要出台新的产业政策, 新政策如何制定, 将直接决定项目的价值, 甚至导致项目被迫中止. 发起人让项目经理评估新政策对项目的影响,项目经理应该使用下列哪项技术?A. 假设分析B. 挣值分析C. 趋势分析D. SWOT分析<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">你是项目的项目经理, 几天后将进行风险识别工作. 你希望事先提醒练习的参与者项目中可能出现的各种风险来源.你能用什么来帮助你做到这一点?A. 风险分解结构(RBS)B. 影响矩阵C. 风险登记册D. 风险模拟结构<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">随着项目进展, 项目经理预测到即将开展的活动中存在一些风险. 项目经理应该使用哪一份文件进行风险分类?A. 风险分解结构(RBS)B. 风险管理计划C. 风险登记册D. 风险绩效报告<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P316- 11.1.3.1 风险分解结构.</span><span class="hljs-comment"># 风险分解结构就是对风险进行分类的.</span></code></pre><pre><code class="hljs bash">一家公司计划推出一个新的数字银行解决方案. 在项目启动时, 识别到一个关键依赖关系, 需要在产品推出前获得监管部门的批准.这被添加到风险登记册, 并由项目经理积极监控. 目前, 仍未得到监管部门的批准, 这可能会导致产品推出延期. 项目经理如何能够减轻该风险?A. 准备风险应对措施B. 在风险登记册中更新并跟踪该风险C. 调整项目进度计划, 包含应急应对措施D. 评估被监管拒绝的可能性<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">项目经理组织团队识别出200多个项目风险, 项目经理应该使用哪种方法或工具来划分风险的高, 中, 低等级?A. 敏感性分析B. 概率与影响矩阵C. 决策树D. 蒙特卡洛模拟<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目团队发现新监管法律可能对项目产生重大影响的风险. 发起人要求项目经理进行进一步分析，以确定可能因此而发生的财务损失. 项目经理应执行哪一项？A. 成本效益分析B. 定性分析C. 根本原因分析D. 定量分析<span class="hljs-comment"># D</span><span class="hljs-comment"># 实施定量风险分析. 通过量化整体项目风险敞口，评估项目可能要面临的财务损失.</span><span class="hljs-comment"># A - 用以评估投入与产出效果, 例如在质量管理领域测算投入资源和质量水平提升之间的关系.</span><span class="hljs-comment"># B - 对风险进行排序, 估算风险发生的概率和影响. 但具体的财务损失需要通过定量分析获取.</span><span class="hljs-comment"># C - 用以分析问题发生的原因.</span></code></pre><pre><code class="hljs bash">一位项目经理被分配到一个大型银行公司的敏捷软件开发项目.在项目刚刚开始的时候，项目经理已经了解了一些新的黑客战术，这些战术对项目的法规合规性构成了潜在的威胁.项目经理接下来应该做什么？A. 审查项目回顾期间的风险B. 分析不合规的后果C. 提交变更请求以更新风险管理计划D. 制定累积流程图<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK Gth 页码：P419 章节：11.3实施定性风险分析.</span><span class="hljs-comment"># 是通过评估单个项目风险发生的概率和影响以及其他特征，</span><span class="hljs-comment"># 对风险进行优先级排序，从而为后续分析或行动提供基础的过程.</span><span class="hljs-comment"># 看到潜在的、可能的、假设的，要想到风险.</span><span class="hljs-comment"># 识别完风险后要定性分析.</span></code></pre><pre><code class="hljs bash">在项目规划期间，项目经理识别到多个风险.为减轻这些风险的影响，项目经理应该怎么做?A. 将风险规避视为风险应对策略B. 遵循先前项目的风险管理计划C. 执行储备分析D. 执行决策树分析并让相关方参与应对措施选择过程<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK (6) P428-11.4风险定量分析.</span><span class="hljs-comment"># 通过量化整体项目风险敞口，评估项目可能要面临的影响.</span><span class="hljs-comment"># 根据评估结果制定应对策略.</span><span class="hljs-comment"># A - 是否采取规避的策略要根据风险评估的结果.</span><span class="hljs-comment"># B - 风险管理计划是定量分析的输入</span><span class="hljs-comment">#     但在这个过程最重要的任务是要对风险进行分析并进行决策，</span><span class="hljs-comment">#     所以选D而不选B.</span><span class="hljs-comment"># C - 用于监督风险.</span></code></pre><pre><code class="hljs bash">项目经理要求风险经理开展每月的定量风险分析.风险经理应该提交什么？A. 蒙特卡洛累积图B. 风险重新评估C. 概率和影响矩阵D. 根据概率和影响等级来识别风险<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P433 章节：11.4.2.5 模拟.</span><span class="hljs-comment"># 在定量风险分析中，使用模型来模拟单个项目风险和其他不确定性来源的综合影响，</span><span class="hljs-comment"># 以评估它们对项目目标的潜在影响.</span><span class="hljs-comment"># 模拟通常采用蒙特卡洛分析. 蒙特卡洛分析是其他定量分析工具的基础.</span></code></pre><pre><code class="hljs bash">项目经理刚刚从组织辞职的另一位项目经理那里接管一个正在进行的项目.在审查项目管理计划时，项目经理意识到成本偏差和进度偏差主要是负面的.项目尚未解决，还未向供应商支付已完成的工作，并且减轻次生风险正迅速耗尽预算.本应该采取哪种三项措施来避免这种情况？（选择三项）A. 在项目章程中实施明确的假设B. 在项目章程中增加应急预算C. 确定项目交接程序D. 确保项目治理控制措施得到批准和实施E. 在项目规划阶段确定高风险和对策<span class="hljs-comment"># ADE</span><span class="hljs-comment"># PMBOK 6th 页码：P395 章节：11 </span><span class="hljs-comment"># 项目风险管理的目标在于提高正面风险的概率和（或）影响，</span><span class="hljs-comment"># 降低负面风险的概率和（或）影响，从而提高项目成功的可能性.</span><span class="hljs-comment"># 进度和成本同时有问题都是风险没有管理好.</span><span class="hljs-comment"># B - 章程里没风险.</span><span class="hljs-comment"># C - 交接不管用.</span></code></pre><pre><code class="hljs bash">项目经理领导一支经验丰富的团队，该团队由职能员工和顾问组成，在一次特色全国性活动上为一项成功产品推出促销版本，该产品版本必须及时推出。制定风险管理计划时，项目经理应该怎么做?A. 采用风险共存方法来处理项目风险，因为这种产品版本将是短暂性的B. 执行预期货币价值(EMV)分析，确定成功概率C. 使用初始产品发布中的风险核对单D. 与团队一起头脑风暴识别风险<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P401-11.1规划风险管理.</span><span class="hljs-comment"># 制定风险管理计划时要借鉴组织过程资产，</span><span class="hljs-comment"># 初始产品发布中的风险核对单是曾经出现过的问题，是可以借鉴的.</span><span class="hljs-comment"># A - 还没有进行风险评估，就选择接受风险，太过随意.</span><span class="hljs-comment"># B - 是风险定量分析.</span><span class="hljs-comment"># D - 是识别风险过程.</span></code></pre><pre><code class="hljs bash">一家组织正在完成一个佳宅物业施工过程的一个很重要里程碑，该项目由政府全力赞助. 在这个关键项目阶段完成前十天，受影响的社区成员开始为期四天的抗议活动，导致项目被搁置.项目经理应该怎么做？A. 减轻风险B. 为项目付出更多努力C. 审查时间表D. 将该问题升级上报给项目发起人<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P442-11.5.2.4威胁应对策略-上报.</span><span class="hljs-comment"># &quot;很重要里程碑&quot;、&quot;在这个关键项目阶段完成前十天，项目被搁置&quot;.</span><span class="hljs-comment"># 项目延期的影响大于项目经理的权力范围，此时采取上报策略.</span><span class="hljs-comment"># A - 项目延期的影响大于项目经理的权力范围，</span><span class="hljs-comment">#     此时采取上报策略优于项目经理尝试去减轻风险.</span><span class="hljs-comment"># B - 这句话的范围太广.</span><span class="hljs-comment"># C - 评估风险时要评估风险对基线的影响，但这道题目考察的是风险应对策略，所以不选C.</span></code></pre><pre><code class="hljs bash">项目经理正在执行一个价值200，000美元项目的风险管理计划，该计划中提出的其中一个风险已经出现，项目经理按照风险管理计划执行，但是，他们担心尚末考虑到某些结果。项目经理应该怎么做？A. 将该问题升级上报给相关方以做出决定B. 使用专家判断来获得其他观点C. 应用头脑风暴技术来选择解决方案D. 执行敏感性分析以了解风险应对的结果<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(G)P451-11.6.2.1专家判断.</span><span class="hljs-comment"># 在确认或修改(如必要)风险应对措施，</span><span class="hljs-comment"># 以及決定如何以最有效率和最有效果的方式加以实施时，</span><span class="hljs-comment"># 应征求具备相应专业知识的个人或小组的意见.</span><span class="hljs-comment"># ACD - &quot;按照风险管理计划执行&quot;，分析的过程在此之前.</span></code></pre><pre><code class="hljs bash">工作分解结构建立后，项目经理通过头脑风暴发启动了识别风险过程.该过程指出了一些潜在风险.项目经理应该怎么做？A. 更改项目范围以回避风险B. 接受风险并将其预期值纳入项目预算C. 确定潜在响应D. 实施变通方案以回避风险<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK 6th 页码：P417 章节：11.2.3.1 风险登记册.</span><span class="hljs-comment"># 当完成识别风险过程时，风险登记册的内容可能包括(但不限于):</span><span class="hljs-comment"># 1) 已识别风险的清单.</span><span class="hljs-comment"># 2) 潜在风险责任人.</span><span class="hljs-comment"># 3) 潜在风险应对措施清单.</span><span class="hljs-comment"># 识别完风险后，登记潜在的应对措施.</span></code></pre><h4 id="61-质量审计"><a href="#61-质量审计" class="headerlink" title="61.质量审计"></a>61.质量审计</h4><p>质量审计 : “似乎存在同样的缺陷”, 属于<u>大面积出现的共性问题</u>, 此时要从流程上和标准上去分析导致质量问题发生的根源.<br>若针对的是<u>孤立的个案</u>, 宜采用根本原因分析.</p><p>质量管理过程合规是项目团队必须满足的要求, <u><strong>优先级比控制预算高</strong></u>.<br>所以必须保证过程合规, 如果有必要的话, 可能通过变更修改预算.</p><p>就是客户需要产品的说明 (guideline)，且这个新需求经过了变更批准. 结果发现说明书与产品对不上，有可能是当时的变更过程有问题，<br>通过<u>审计</u>来审计当时的变更过程.</p><pre><code class="hljs bash">在某项目中, 需要为某连锁药店生产一系列健康补充品,客户向项目经理报告称某些产品未达到质量要求,他们似乎存在同样的缺陷. 项目经理该做什么?A. 加强检查B. 进行根本原因分析C. 审视各个过程D. 增加统计抽样<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">质量审计报告显示, 某些质量控制过程严重不合规. 相关职能经理提出, 项目预算无法支持质量控制标准的实施. 项目经理应该怎么做?A. 按照预算支持的标准修改质量管理计划B. 要求发起人增加预算, 以实施质量控制标准C. 将质量合规风险更新到风险登记册D. 审查质量管理计划, 并在必要时对预算做出变更<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">客户需要批准的产品指南，以便在新的站点实施已完成的项目解决方案. 但是，客户却无法实施解決方案，因为可交付成果不能按照已批准需求的规范执行.若要避免这个问题，项目经理应该事先做什么？A. 完成统计抽样分析B. 应用质量检查C. 执行质量审计D. 核实变更<span class="hljs-comment"># C</span><span class="hljs-comment"># 解析：PMBOK(6)P294- 8.2.2.5 质量审计.</span><span class="hljs-comment"># 把题目翻译一下，就是客户需要产品的说明（guideline)，且这个新需求经过了变更批准.</span><span class="hljs-comment"># 结果发现说明书与产品对不上. 有可能是当时的变更过程有问题，通过审计来审计当时的变更过程.</span><span class="hljs-comment"># A - 一个可交付成果不需要抽样.</span><span class="hljs-comment"># B - 过程有问题, 检查不出来, 检查是针对可交付成果的.</span><span class="hljs-comment"># D - 事后核实变更, 事先安排审计.</span></code></pre><pre><code class="hljs bash">在项目执行过程中，项目经理评估客户添加的更多质量检查的请求，由于在初步测试中发现一些缺陷，产品经理对此表示赞同，然而，项目团队却不认为这将有助于实现项目目标，为确保质量，项目经理应该怎么做？A. 修订过程改进计划B. 分析工作绩效信息C. 使用七种基本质量工具D. 更新质量管理计划<span class="hljs-comment"># D</span><span class="hljs-comment"># P286章节：8.1.3.1</span><span class="hljs-comment"># 质量管理计划包括(但不限于)以下组成部分：</span><span class="hljs-comment"># 1) 项目采用的质量标准；</span><span class="hljs-comment"># 2) 项目的质量目标；</span><span class="hljs-comment"># 3) 质量角色与职责；</span><span class="hljs-comment"># 4) 需要质量审查的项目可交付成果和过程；</span><span class="hljs-comment"># 5) 质量检查请求的活动在质量管理计划里.</span></code></pre><pre><code class="hljs bash">一个主要可交付成果即将被发送给客户.团队成员对作为质量保证过程一部分而需要执行的任务量和时间有所抱怨,项目经理需要尽快将可交付成果准备就绪,以获得第一次项目付款.项目经理应该做什么去确保按时获得可交付成果?A. 执行因果分析B. 对使用的过程和方法进行项目审计C. 让团队成员查阅项目管理计划D. 确定客户需求和相关方的期望<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P294-8.2.2.5审计</span><span class="hljs-comment"># 质量保证任务繁重，可以通过质量审计，审计不增值的过程，以提高效率，加快进度.</span><span class="hljs-comment"># A  - 因为明确是质量保证过程的问题，因此使用审计更合适.</span><span class="hljs-comment">#      审计识别出来问题以后再进行原因分析；</span><span class="hljs-comment"># CD - 与质量过程无关.</span></code></pre><pre><code class="hljs bash">一家组织的管理委员会希望看到偏离进度计划的任何关键里程碑，项目经理应该在项目状态报告中包含的最关键工作是什么？A. 进度基准B. 偏差分析C. 工作绩效信息D. 挣值分析(EVA)<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P109-4.5.1.3工作绩效信息.</span><span class="hljs-comment"># 在工作执行过程中收集工作绩效数据，再交由控制过程做进步分析.</span><span class="hljs-comment"># 将工作绩效数据与项目管理计划组件、项目文件和其他项目变量比较之后生成工作绩效信息.</span><span class="hljs-comment"># 通过这种比较可以了解项目的执行情况. 工作绩效信息相对挣值分析和偏差分析更适宜于汇报.</span><span class="hljs-comment"># A  - 是用于测量项目执行状态的基线之一.</span><span class="hljs-comment"># BD - 挣值分析用于评估当前执行状态，偏差分析用于预测项目未来执行状况.</span><span class="hljs-comment">#  挣值分析和偏差分析的结果要汇总到工作绩效信息，用以汇报.</span></code></pre><pre><code class="hljs bash">一个项目反复出现缺陷，可能导致无法满足客户期望.项目经理首先应该使用什么来解决这个问题？A. 开展统计抽样B. 准备石川图C. 创建一份亲和图D. 执行质量审计<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P294 章节：8.2.2.5 审计.</span><span class="hljs-comment"># 是用于确定项目活动是否遵循了组织和项目的政策、过程与程序的一种结构化且独立的过程.</span><span class="hljs-comment"># 质量审计通常由项目外部的团队开展，如组织内部审计部门、项目管理办公室 (PMO) 或组织外部的审计师.</span><span class="hljs-comment"># 质量审计目标可能包括: </span><span class="hljs-comment"># 1) 识别全部正在实施的良好及最佳实践;</span><span class="hljs-comment"># 2) 识别所有违规做法、差距及不足;</span><span class="hljs-comment"># 3) 分享所在组织和/或行业中类似项目的良好实践;</span><span class="hljs-comment"># 4) 积极、主动地提供协助，以改进过程的执行，从而帮助团队提高生产效率;</span><span class="hljs-comment"># 5) 强调每次审计都应对组织经验教训知识库的积累做出贡献.</span><span class="hljs-comment"># 项目反复出缺陷，不是具体的可交付成果有缺陷，说明过程有问题，审计合适一些.</span></code></pre><pre><code class="hljs bash">一项可交付成果的最新质量报告显示了质量标准方面的重大不合规问题，在团队会议期间, 职能经理指出预算将不支持这些标准的实施,并称这些问题在项目的这个阶段并不重要. 项目经理应该做什么?A. 接受职能经理的专家判断,并修改质量管理计划B. 要求项目发起人增加预算以实施质量标准C. 更新项目管理计划，以包括与质量合规相关的新风险D. 审查质量管理计划并对预算采取适当的纠正措施<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P300-8.3.1.1 质量管理计划.</span><span class="hljs-comment"># 问题发生了，要先看计划，然后分析原因，再采取适当的纠正措施.</span><span class="hljs-comment"># ABC - 都直接采取了措施.</span></code></pre><pre><code class="hljs bash">一个大型项目包含将由分包商执行的许多阶段.团队成员各自负责一个阶段.项目经理应该使用什么来执行质量管理计划？A. 质量测量指标B. 质量审计C. 根本原因分析D. 因果分析<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P294-8.2.2.5审计.</span><span class="hljs-comment"># 审计是用于确定项目活动是否遵循了组织和项目的政策、过程与程序的一种结构化且独立的过程.</span><span class="hljs-comment"># A  - 质量测量指标定义了如何衡量质量水平.</span><span class="hljs-comment"># CD - 通常用于针对具体问题的分析.</span></code></pre><h4 id="62-资源直方图"><a href="#62-资源直方图" class="headerlink" title="62.资源直方图"></a>62.资源直方图</h4><p>资源直方图 : 是绘制人力资源图的工具. 说明了在项目过程中, 个人, 部门或整个项目团队每周或每月需要的小时数.<br>图表可以表示来自特定资源的最大小时数的水平线. 这可用于资源优化策略.</p><pre><code class="hljs bash">一家新的电信网络运营商正计划在你所在的地区推进其服务. 你的组织已赢得建设其网络的合同, 并且已指定你为此项目的项目经理.在项目执行初期, 一些关键工作人员抱怨项目任务分配过多. 为了对此进行调查, 以下哪些工具可以帮助你识别过度分配的资源?A. 资源分配矩阵B. 网络图C. 资源直方图D. 资源分解结构(RBS)<span class="hljs-comment"># C</span></code></pre><h4 id="63-资源日历"><a href="#63-资源日历" class="headerlink" title="63.资源日历"></a>63.资源日历</h4><p>资源日历 : 识别了每种具体资源可用时的工作日, 班次, 正常上下班时间, 周末和公共假期.<br>在规划活动期间, 潜在的可用资源信息(如团队资源, 设备和材料)用于估算资源可用性.<br>资源日历<u><strong>通常不包含成本信息</strong></u>, 资源的可用性, 人力资源技能和人力资源能力是资源日历的有效内容.<br>如果团队成员因为<u>分配过度</u>而无法为此类活动找到时间, 则可能是<u>日历计划不周</u>.</p><pre><code class="hljs bash">作为你与客户的合同协议的一部分, 你必须在项目启动后30天内向客户端提交符合项目资源日历.你刚刚创建了资源日历的初稿, 但不确定是否包含某些内容. 以下哪一项不太可能成为资源日历的一部分?A. 资源的可用性B. 人力资源技能C. 资源成本D. 人力资源能力<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">项目团队成员的土气非常低落. 团队成员觉得由于对项目任务的分配过度, 他们没有得到参与组织团队开发活动的机会, 因此, 他们错失了发展的机会. 以下哪一项是造成这种情况的最可能原因?A. 在项目中使用零和奖励B. 定义不清的资源日历C. 高级团队成员太多D. 团队人际交往能力差<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目经理A认识到需要额外资源来按时完成项目，并请求项目经理B提供资源方面的协助.如果项目经理B同意，应审查哪一份文件？A. 项目人员配备B. 资源日历C. 项目组织图D. 团队绩效评估<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P323-9.2.1.2项目文件-资源日历.</span><span class="hljs-comment"># 资源日历识别了每种具体资源可用时的工作日、班次、正常营业的上下班时间、周末和公共假期.</span><span class="hljs-comment"># A - 人员配备管理，指的人员如何获取、培训、管理以及如何遺散，</span><span class="hljs-comment">#     目前资源是否能够加入还没有明确，所以排除.</span><span class="hljs-comment"># C - 项目组织图以图形方式展示项目团队成员及其报告关系.</span><span class="hljs-comment"># D - 指团队实现预定目标的实际结果.</span></code></pre><pre><code class="hljs bash">项目经理前往另一个国家执行最终可交付成果的上线过程，到达后，项目经理得知，由于任务计划在当地假日期间完成，关键资源将不可用，而延迟上线将使最终项目的交付处于危险之中.若要避免这个问题，项目经理应该在项目开始时完成哪一项工作？A. 创建一份团队日历并围绕该信息创建项目进度计划B. 要求所有团队，无论在哪个国家，均遵循总部的日历C. 制定加班预算以补偿在假期工作的资源D. 记录风险登记册中包含各个国家日历的影响<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P323 章节：9.2.1.2 资源日历.</span><span class="hljs-comment"># 资源日历识别了每种具体资源 可用时的工作日、班次、正常营业的上下班时间、周末和公共假期.</span><span class="hljs-comment"># 在规划活动期间，潜在的可用资源信息（如团队资源、设备和材料）用于估算资源可用性.</span><span class="hljs-comment"># 资源日历还规定了在项目期间确定的团队和实物资源何时可用、可用多久. 何时可用、 可用多久.</span></code></pre><h4 id="64-资源管理计划"><a href="#64-资源管理计划" class="headerlink" title="64.资源管理计划"></a>64.资源管理计划</h4><p>资源管理计划 : 提供了关于如何分类, 分配, 管理和释放项目资源的指南.<br>资源管理计划可以根据项目的具体情况分为<u>团队管理计划</u>和<u>实物资源管理计划</u>.<br><u><strong>团队的角色与职责</strong></u>在资源管理计划里.</p><ul><li>识别资源</li><li>获取资源</li><li>角色与职责<ul><li>角色 : 在项目中, 某人承担的职务或分配给某人的职务.</li><li>职权 : 使用项目资源, 做出决策, 签字批准, <u>验收可交付成果</u>并影响他人开展项目工作的权力.</li></ul></li></ul><p>资源管理计划 - 项目团队资源管理 : 关于如何定义, 配备, 管理和最终遣散项目团队资源的指南都包含在资源管理计划里.<br>关键团队成员决定离开, 需要替换该资源, 项目经理先应查看资源管理计划, 并按照计划来进行资源的遣散及配备.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/037.png" alt="037" style="zoom:67%;margin-left: 0;"><p>资源管理计划 - 项目组织图:<br>项目组织图以图形方式展示<u><strong>项目团队成员及其报告关系</strong></u>.<br>层级资源图 - 不存在.</p><p>责任分配矩阵 - 只确认了角色与职责的关系.<br>责任分配矩阵展示项目资源在各个工作包中的<strong>任务分配</strong>.<br>高层次的RAM 可定义项目团队、小组或部门负责 WBS 中的哪部分工作，<br>而低层次的 RAM 则可在各小组内为具体活动分配角色、职责和职权.<br>RAM的一个例子是RACI (执行、负责、咨询和知情）矩阵. 如果团队是由内部和外部人员组成，<u>RACI 矩阵对明确划分角色和职责特别有用</u>.</p><p>资源管理计划虽然包括了项目组织图,但是项目组织图更加准确.</p><p><strong>获取资源</strong>: 因为集体劳资协议、分包商人员使用、矩阵型项目环境、内外部报告关系或其他原因，项目管理团队可能或可能不对资源选择有直接控制权.<br>内部资源由<u><strong>职能经理或资源经理</strong></u>负责获取或分配.<br>获取资源时遇到问题时，首先与<u><strong>职能经理协商</strong></u>.</p><p>数据表现:<br>数据表现有多种格式来记录和阐明团队成员的角色与职责. 无论使用什么方法来记录团队成员的角色，目的都是要确保每个工作包都有明确的责任人，<br>确保全体团队成员都清楚地理解其角色和职责. 明确职能能够减少冲突.</p><p>管理团队:<br>项目经理应该向团队成员分配富有挑战性的任务，对优秀绩效进行表彰. 项目经理应留意团队成员是否有意愿和能力完成工作，<br>然后相应地调整管理和领导力方式. 相对那些已展现出能力和有经验的团队成员,  技术能力较低的团队成员更需要强化监督.</p><pre><code class="hljs bash">在编制资源管理计划时, 项目经理指定了团队中一名高级程序员来确定可交付成果的质量是否符合项目记录的标准.这涉及资源管理计划的以下哪些方面?A. 能力B. 责任C. 职权D. 角色<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">在项目期间, 一名关键团队成员决定离开团队. 由于需要替换该资源, 项目经理应该怎么做?A. 立即发布职位空缺B. 查看项目资源管理计划C. 通知项目发起人D. 更新风险登记册<span class="hljs-comment"># B</span><span class="hljs-comment"># C 没有必要通知发起人</span><span class="hljs-comment"># D 要替换该资源, 项目经理应该怎么用, 考察的是资源管理的问题, 不是风险</span></code></pre><pre><code class="hljs bash">一名新成员加入团队, 该团队的报告结构发生多次变更. 若要快速使这位新团队成员适应, 项目经理应该查阅哪一份文件?A. 项目组织图B. 层级资源图C. 责任分配矩阵D. 资源管理计划<span class="hljs-comment"># A</span><span class="hljs-comment"># D &gt; A. 选择范围明确的.</span></code></pre><pre><code class="hljs bash">项目经理接管一个执行阶段的项目，在对项目进度进行初步审查期间，项目经理注意到与特定关键路径活动有关的信息不完整，有些活动还存在风险.项目经理如何才能确定每项活动的责任？A. 工作分解结构B. 责任分配矩阵C. 组织分解结构D. 风险登记册<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P317童节：9,1.22责任分配矩阵.</span><span class="hljs-comment"># 责任分配矩阵展示项目资源在各个工作包中的任务分配.</span><span class="hljs-comment"># 矩阵图能反映与每个人相关的所有活动.</span><span class="hljs-comment"># 以及与每项活动相关的所有人员、 它也可确保任何一项任务都只有一个人负责,</span><span class="hljs-comment"># 从而避免职权不清. 如果团队是由内部和外部人员组成，RACI矩阵对明确划分角色和职责特别有用.</span><span class="hljs-comment"># 角色(人)跟职责(活)之间的关系，找责任分配矩阵.</span></code></pre><pre><code class="hljs bash">在公司重组之后，一位团队成员现在向不同的职能经理报告.项目经理应该更新哪份文件以反映这种新的报告结构？A.相关方参与计划B.资源日历C.项目团队任务分配D.资源管理计划<span class="hljs-comment"># D</span><span class="hljs-comment"># 解析：PMBOK(6)P319-9.1.3.1 资源管理计划-项目组织图.</span><span class="hljs-comment"># “报告结构〞即汇报关系，是项目组织圈的主要作用，项目组织图是资源管理计划的一部分.</span><span class="hljs-comment"># 其他选项：因为题干重点问题了报告结构.</span><span class="hljs-comment"># A  - 因此非A相关方参与计划的问题.</span><span class="hljs-comment"># BC - 也非报告结构的问题，而是项目团队资源本身的问题.</span></code></pre><pre><code class="hljs bash">首席执行官（CEO）发布说明，为了改进各项目之间的资源分配.明年将对当前的职能型组织结构作出调整，转而采用一种矩阵结构.当项目经理就该决定对当前项目的影响询问人力资源经理时，人力资源经理说现有项目的资源分配不会有变. 根据这一回答，项目经理仍应审查以下哪项？A. 风险管理计划B. 责任分配矩阵(RAM)C. 资源分解结构D. 相关方参与计划<span class="hljs-comment"># B</span><span class="hljs-comment"># 资源 -&gt; 责任分配矩阵</span><span class="hljs-comment"># 题干关键词“组织结构”、“资源分配不会有变”.</span><span class="hljs-comment"># 组织结构发生变化，项目经理关心的是工作包、</span><span class="hljs-comment"># 活动与团队成员之间的关系是否发生了变化，因此要去审查RAM，选B.</span><span class="hljs-comment"># AD - 属于知识领域定位错误.</span><span class="hljs-comment"># C  - 是按资源类别和类型进行展现的层级列表，不能说明人与工作包之间的关系.</span></code></pre><pre><code class="hljs bash">一个软件开发项目的项目章程已获批准,项目经理召集会议准备项目管理计划,项目经理得知开发团队成员对他们的角色和职责感到困惑. 若要避免这个问题,项目经理应该事先做什么?A. 审查沟通管理计划B. 制定项目资源管理计划C. 创建一份相关方登记册D. 分享工作分解结构<span class="hljs-comment"># B</span><span class="hljs-comment"># A - 沟通管理计划是关于项目沟通的信息.</span><span class="hljs-comment"># C - 相关方登记册记录了相关方的基本信息.</span><span class="hljs-comment"># D - WBS为范围基准的一部分.</span></code></pre><pre><code class="hljs bash">在一个系统开发项目的执行阶段，一位关键开发人员由于个人原因，需要延长并进行计划外休假. 项目经理知道，如果没有替代资源，项目进度计划就会面临风险.项目经理应该立即采取哪些措施来确保进度计划不会受到不利影响？A. 与所有开发人员开会, 以确定重新分配开发任务的方案B. 请求职能经理提供另一位技能熟练的开发人员C. 请求项目发起人提供有关处理资源问题的建议D. 审查项目范围以减少开发任务, 并相应的重新调整进度计划<span class="hljs-comment"># B</span><span class="hljs-comment"># A - 现有团队中缺乏必要的技能</span><span class="hljs-comment"># C - 如果职能部门经理支持力度够, 再将问题提交给发起人</span><span class="hljs-comment"># D - 如果人员技能短板的问题无法解决, 再对问题的影响评估, </span><span class="hljs-comment">#     必要时提交变更请求, 在选项B之后.</span></code></pre><pre><code class="hljs bash">团队成员都在执行他们熟悉的任务，而避开他们不喜欢的任务，这造成团队成员之间的冲突. 项目经理应该怎么做？A. 分配明确的角色和职责B. 与团队成员的直线经理谈话C. 与团队成员协商D. 获得项目发起人的澄清<span class="hljs-comment"># A</span><span class="hljs-comment"># 角色与职责划分清楚, 有利于减少冲突, 排除BD</span><span class="hljs-comment"># C的目的是为了划分职责, A更合适</span></code></pre><pre><code class="hljs bash">项目经理得知，因为未得到足够的支持, 一位团队成员无法满足指定的截止日期. 原计划由另一个部门的职能经理直接管理的一位人员能支持该团队成员，但因其超负荷无法完成，组织内没有其他资源可用. 项目经理应该怎么做？A. 联系该超负荷人员的职能经理，并审查该资源日程计划B. 要求该团队成员与该超负荷人员联系，以解决该问题C. 要求该超负荷人员的职能经理解决该问题D. 与团队开会，以解决该问题<span class="hljs-comment"># A</span><span class="hljs-comment"># 获取资源困难, 先和职能经理谈判, 协商</span></code></pre><pre><code class="hljs bash">项目经理注意到一位团队成员在团队会议期问似乎越来越不满. 该团队成员没有在关键的工作包上取得进展，这种进展的缺乏现在正在影响关键路径. 团队成员认为他们在项目团队中没有扮演正确的角色. 项目经理应该做什么？A. 让团队成员相信他们的能力，提醒他们被选中是有原因的B. 与团队成员会面，基于他们的优势而讨论他们可以如何做出贡献C. 让团队成员接受有针对性的培训，以获得他们所指定角色所需的技能D. 安排与团队成员的每周触点，以讨论可能影响他们工作的障碍<span class="hljs-comment"># B</span><span class="hljs-comment"># A - 提醒的意义不大.</span><span class="hljs-comment"># B - 帮助其找到角色.</span><span class="hljs-comment"># C - 非技能问题.</span><span class="hljs-comment"># D - 非障碍问题.</span></code></pre><pre><code class="hljs bash">在某典型的矩阵型组织中，项目经理收到一位工程师资源的辞职信.项目经理该做什么来确保项目不会受到影响？A. 与职能经理协商安排替代资源B. 请求人力资源经理填补该空缺C. 延迟接受辞职时间，直至替代资源完全入职D. 修改资源管理计划，应对未来的辞职问题<span class="hljs-comment"># A</span><span class="hljs-comment"># 资源 -&gt; 人际关系与团队技能 -&gt; 谈判</span><span class="hljs-comment"># “典型矩阵型组织”，资源由职能部门经理提供，</span><span class="hljs-comment"># 所以要去职能部门经理协商获取替代资源，而不是人力资源经理.</span><span class="hljs-comment"># C - 错误，有违公平.</span><span class="hljs-comment"># D - 解决现有问题后，可能对资源管理计划进行更新，在选项A之后.</span></code></pre><pre><code class="hljs bash">项目团队积极性不高，其工作效率也在下降，这将导致项目进度计划面临风险.项目经理该做什么来鼓励团队？A. 了解团队成员的个人需要，并通过满足他们的需要鼓励其提高绩效B. 运用服务型领导法并计划团队建设活动，以帮助鼓励团队成员提高绩效C. 审查团队章程，并使用与团队成员的个人需要相关的行动更新团队章程D. 请求项目发起人提供可为团队建设活动分配的额外预算<span class="hljs-comment"># A</span><span class="hljs-comment"># 资源  -&gt; 认可与奖励</span><span class="hljs-comment"># 情景中没有提到团队成员之间的配合出现问题，所以不宜开展团队建设活动.</span><span class="hljs-comment"># 此时宜结合组织理论，对团队成员进行激励，提升其积极性，排除BD选项.</span><span class="hljs-comment"># C - 团队章程是团队运行的基本规则.</span></code></pre><pre><code class="hljs bash">项目团队成员对他们应该如何工作才能满足项目目标感到不确定.为了让团队成员更好的了解他们在项目当中的角色，项目经理应该向团队成员提供哪份文件？A. 项目沟通计划B. 资源计划C. 项目章程D. 项目管理计划<span class="hljs-comment"># B</span><span class="hljs-comment"># 9.1.3.1</span><span class="hljs-comment"># 资源管理计划 </span><span class="hljs-comment"># • 角色</span><span class="hljs-comment"># • 职权</span><span class="hljs-comment"># • 职责</span><span class="hljs-comment"># • 能力</span><span class="hljs-comment"># 角色与职责在资源管理计划里，角色与职责的关系在责任分配矩阵里.</span></code></pre><pre><code class="hljs bash">在一个职能型组织中，一位关键的项目资源在咨询项目经理之前直接与客户进行沟通.这位资源之前经常发生这种问题，该资源已同意所有客户沟通必须先得到项目经理的批准.项目经理应该怎么做？A. 与该资源的职能经理开会，讨论该资源的行为B. 召开团队会议以识别并纠正该资源的错误C. 与项目发起人召开会议，以讨论该资源的行为D. 与客户开会以确认所有沟通都应该通过项目经理<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P47章节：2.4.4.2 职能型：</span><span class="hljs-comment"># 项目经理 - 联络员，无权限；</span><span class="hljs-comment"># 矩阵型：项目经理，一定权限；</span><span class="hljs-comment"># 项目型：项目经理，所有权限 </span><span class="hljs-comment"># 职能型组织中，团队的行为只能找职能经理沟通.</span></code></pre><pre><code class="hljs bash">采购部门通知项目经理项目管理软件已更新.团队成员没有使用此更新过的软件经验，但需要此项技能来完成项目.项目经理应该怎么做？A：请求额外的时间来培训资源B：更新资源管理计划C：聘请熟悉这项更新的外部资源来完成工作D：要求供应商提供主题专家(SME)来培训团队<span class="hljs-comment"># B</span><span class="hljs-comment"># 解析：解析：PMBOK（6）P318-9.1.3.1资源管理计划.</span><span class="hljs-comment"># 资源管理计划中阐述了针对项目团队成员的培训策略.</span><span class="hljs-comment"># A - 具体得培训策略需依据资源管理计划进行.</span><span class="hljs-comment"># D - 培训资源的来源不局限于供应商，故排除.</span><span class="hljs-comment"># C - 是否采用外部资源来解决问题，取决于培训后是否能够弥补能力差距，排除C.</span></code></pre><pre><code class="hljs bash">项目经理了解到，两名团队成员晋升并将离开项目.为了向新团队成员说明项目角色，项目经理应该准备或更新什么文件？A.人员配备管理计划B.组织图C.项目章程D.责任分配矩阵<span class="hljs-comment"># D</span><span class="hljs-comment"># 解析：《PMBOK》 第6版317页，9.1.2.2：数据表现-RAC矩阵.</span><span class="hljs-comment"># 责任分配矩阵显示了分配给每个工作包的项目资源，</span><span class="hljs-comment"># 用于说明工作包或活动与项目团队成员之间的关系. 新人来了，需要明确他的角色与职责.</span><span class="hljs-comment"># A - 人员配备管理计划：PMBOK第5版，人员配备管理计划是人力资源管理计划的组成部分，</span><span class="hljs-comment">#     说明将在何时、以何种方式获得项目团队成员，以及他们需要在项目中工作多久.</span><span class="hljs-comment">#     它描述了如何满足项目对人力资源的需求.</span><span class="hljs-comment">#     提前定义好的人员配备、遣散的计划，新人来了，应该先确认职责.</span><span class="hljs-comment"># B - 组织图：PMBOK第6版，项目组织图以图形方式展示项目团队成员及其报告关系. 可以后续提供.</span></code></pre><pre><code class="hljs bash">项目执行阶段，发现一个子团队没有为约定的项目目标工作.项目经理应该查阅哪份文件？A. 项目管理计划B. 资源分解结构(RBS)C. 项目章程D. 资源管理计划<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P318 章节：9.1.3.1资源管理计划一角色与职责： </span><span class="hljs-comment"># • 角色</span><span class="hljs-comment"># • 职权</span><span class="hljs-comment"># • 职责</span><span class="hljs-comment"># • 能力</span><span class="hljs-comment"># 子团队的工作职责不清，需要看资源管理计划.</span></code></pre><pre><code class="hljs bash">项目经理发现没有关于需要哪些部门资源的信息，应该在哪一份文件中更新该信息？A. 项目章程B. 组织结构图C. 项目管理计划D. 风险管理计划<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK（6）P318-9.1.3.1资源管理计划.</span><span class="hljs-comment"># 资源管理计划提供了关于如何分类、分配、管理和释放项目资源的指南.</span><span class="hljs-comment"># 因此要更新资源的信息，需要更新在资源管理计划，项目管理计划包含资源管理计划.</span><span class="hljs-comment"># A - 项目章程中记录的是动用资源的权力，详细的资源信息要查阅资源管理计划.</span><span class="hljs-comment"># B - 组织结构图展现的是职位和相互关系.</span><span class="hljs-comment"># D - 风险管理计划中记录的是在风险管理过程中可以动用的资源，例如资金.</span></code></pre><pre><code class="hljs bash">项目经理希望确保相关方能充分参与项目的整个生命周期，项目经理应该在相关方参与计划中包含下列哪一项？A. 相关方的权力/利益方格B. 由相关方提出的变更请求C. 期望的当前相关方参与水平D. 相关方对项目运作的反馈<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P521-13.2.2.5数据表现.</span><span class="hljs-comment"># 要想确保一个相关方参与，则需要对比他现在的参与水平和期望的参与水平，</span><span class="hljs-comment"># 这个对比的工具就是相关方参与度评估矩阵.</span><span class="hljs-comment"># A  - 在相关方登记册里，不在参与计划里.</span><span class="hljs-comment"># BD - 都不在参与计划里.</span></code></pre><pre><code class="hljs bash">在项目执行过程中，一名相关方希望知道谁有权分配项目资源,为了解决这个问题，项目经理应该怎么做？A. 与该相关方一起审查项目章程B. 与该相关方一起检查沟通管理计划C. 与该相关方一起审查资源管理计划D. 获得相关方的一致同意，并更新相关方登记册<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK 6th 页码：P318 章节：9.1.3.1 资源管理计划.</span><span class="hljs-comment"># 角色与职责·角色.在项目中，某人承担的职务或分配给某人的职务·职权.</span><span class="hljs-comment"># 使用项目资源、做出决策、签字批准、验收可交付成果并影响他人开展项目工作的权力.</span><span class="hljs-comment"># 1) 职责. 为完成项目活动，项目团队成员必须履行的职责和工作.</span><span class="hljs-comment"># 2) 能力. 为完成项目活动，项目团队成员需具备的技能和才干.</span><span class="hljs-comment"># 资源管理计划中规定了谁有权力分配资源. 项目章程只确定了项目经理的分配资源的权力.</span></code></pre><pre><code class="hljs bash">自项目开始以来，一些关键相关方因各种原因被替换，而又没有与项目团队适当地沟通这种情况，导致了项目团队产生挫败感，并将很快影响到项目结果. 若要改善这种情况，项目经理应该怎么做？A. 统一相关方的期望B. 向团队成员提供一份组织结构图C. 提升项目团队的兴趣D. 增加相关方对项目的承诺<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P318-9.1.3.1资源管理计划.</span><span class="hljs-comment"># 遇到团队情绪低落的题目，往往会下意识的去选择团队建设活动.</span><span class="hljs-comment"># 但是要注意的，情景里面己经给出了导致问题产生的根源原因&quot;关键相关方被替换而未及时沟通&quot;.</span><span class="hljs-comment"># 现在要先解决这个问题，所以提供组织结构图，</span><span class="hljs-comment"># 针对性分发组织结构图，能够让成员对项目组织关系清晰即可, 排除ACD.</span></code></pre><h4 id="65-控制进度"><a href="#65-控制进度" class="headerlink" title="65.控制进度"></a>65.控制进度</h4><p>“无法轻松报告进度绩效指数”, 问题出在对数据的定义和测量上,<br>特别是第一个阶段的成本计入了第二个阶段, 需要对绩效测量指标进行明确.</p><p>控制进度: 进度受到影响, 应当<u><strong>控制进度</strong></u>，使用假设情景分析对风险的输出进行评估，以满足基准.</p><pre><code class="hljs bash">项目团队正在执行一个分两阶段开展的项目. 该项目目前处于第一阶段, 第一阶段不涉及任何成本, 因为成本均计入下一阶段. 某位团队成员在此阶段无法轻松报告进度绩效指数(SPI). 项目经理应该做什么?A. 审查项目管理计划, 以便将成本分配到两个阶段, 并计算挣值(EV)B. 使用挣值和计划值(PV)指标监控进度计划C. 将该阶段无法报告进度绩效指数这一情况报告给项目管理办公室(PMO)D. 将项目分成多个部分并选择替代指标<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">负责跟踪项目文件的团队成员被指派到另一个项目, 项目经理现在正在寻求项目文件, 以便帮助制定进度计划.项目经理应使用哪些项目文件?A. 经验教训登记册, 里程碑列表, 项目团队任务分配表B. 里程碑列表, 资源需求和项目章程C. 范围基准, 里程碑列表和活动清单D. 活动清单, 假设日志和进度基准<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">在将项目投入生产之前，一名新项目经理加入团队，项目经理了解到运营问题妨碍任务按时完成.项目经理应该审查哪个过程？A. 控制风险B. 控制范围C. 控制质量D. 控制进度<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P228-6.6控制进度.</span><span class="hljs-comment"># 进度受到影响，应当控制进度，使用假设情景分析对风险的输出进行评估，以满足基准.</span><span class="hljs-comment"># A  - 风险只能监督，最终还是要回归到进度控制上来.</span><span class="hljs-comment"># BC - 与进度无关.</span></code></pre><pre><code class="hljs bash">新聘用的项目经理加入一个正在进行的项目，而该项目已经落后于进度，在规划阶段未考虑到几个时间制约因素，并且批准的基准进度计划具有不灵活的完工期限，项目经理首先应该怎么做？A. 制定进度计划B. 控制进度计划C. 为项目活动排序D. 快速跟进进度计划<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P222-6.6控制进度.</span><span class="hljs-comment"># 规划已经完成，已经批准. 接下来该执行监控了，遇到问题届时提出变更即可.</span><span class="hljs-comment"># AC - 还在规划中.</span><span class="hljs-comment"># D  - 出现问题再处理，先跟进.</span></code></pre><h4 id="66-外部依赖关系"><a href="#66-外部依赖关系" class="headerlink" title="66.外部依赖关系"></a>66.外部依赖关系</h4><p>确定和整合依赖关系-外部依赖关系 : 外部依赖关系是项目活动与非项目活动之间的依赖关系,<br>这些依赖关系往往不在项目团队的控制范围内.</p><pre><code class="hljs bash">项目经理负责管理一个涉及与多个外部供应商合作的客户项目. 该项目的最终结果是由某家印刷供应商印刷信件以履行项目.在集成测试期间, 项目经理得知该印刷供应商尚未准备好进行印刷, 这影响到项目的签字批准. 在规划期间需要明确定义什么?A. 信件模板任务需要在规划期间确定B. 履行项目的印刷商需要在规划期间识别C. 需要与印刷供应商分享项目和交付计划D. 在此阶段准备的进度计划应包括外部依赖关系<span class="hljs-comment"># D</span></code></pre><h4 id="67-管理沟通"><a href="#67-管理沟通" class="headerlink" title="67.管理沟通"></a>67.管理沟通</h4><p>管理沟通 : 确保项目信息及时且恰当地收集, 生成, 发布, 存储, 检索, 管理和最终处置的过程.<br>主要作用是促成项目团队与相关方之间的有效信息流动. 本过程需要在整个项目期间展开.<br>不局限于发布相关信息, 它还设法确保信息以适当的格式正确**<u>生成和送达</u>**目标受众.</p><p>管理沟通过程会涉及与开展<strong>有效沟通</strong>有关的所有方面, 包括使用适当的技术, 方法和技巧.</p><p>监督沟通 : 确保满足项目及其相关方的信息需求的过程.<br>主要作用是按沟通管理计划和相关方参与计划的要求优化信息传递过程. 本过程需要在整个项目期间展开.<br><u><strong>变更请求</strong></u>是监督沟通的输出. 监督沟通过程将生成变更请求, 实施整体变更控制过程将得到批准, 然后规划沟通管理过程将进行必要的更新.</p><pre><code class="hljs bash">以下哪个过程不局限于分发相关信息, 还力求确保向项目相关方传达的信息得到适当生成以及接收和理解?A. 管理沟通B. 监督沟通C. 管理相关方参与D. 监督相关方参与<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">詹姆斯正在管理一个购物中心建设项目. 在项目执行过程中, 他了解到项目沟通管理计划无效, 需要进行重大更新. 以下哪个过程将发出所需更新的变更请求?A. 规划沟通管理B. 管理沟通C. 实施整体变更控制D. 监督沟通<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">项目进入三个月后, 项目发起人通过电子邮件了解到该项目落后于进度并超过预算. 若要避免这个问题, 项目经理应该事先做什么?A. 经常举行质量审计B. 经常向项目发起人发送项目更新电子邮件C. 与项目团队共享状态报告模板D. 定期与关键相关方召开项目指导委员会会议<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P339-10.2管理沟通.</span><span class="hljs-comment"># 管理沟通过程会涉及与开展有效沟通有关的所有方面，包括使用适当的技术、方法和技巧.</span><span class="hljs-comment"># A - 现有问题集中在沟通管理领域.</span><span class="hljs-comment"># B - 使用何种沟通方式要根据相关方的需求，另外只向项目发起人发送有缺失.</span><span class="hljs-comment"># C - 共享不恰当，信息获取存在权限上的差异.</span></code></pre><pre><code class="hljs bash">你刚刚被分配到一个处于实施阶段中期的项目任项目经理，你正在确定你将如何控制这个项目, 控制这个项目的最佳方法是?A. 使用综合的沟通方法B. 召开项目进度会议C. 每周参照甘特图D. 定期与管理层开会<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P364 章节：10.</span><span class="hljs-comment"># 制定项目相关方沟通策略时，通常应考虑所有可用技术，并从中作出选择;</span><span class="hljs-comment"># 同时也应尊重因文化、实践和个人背景而产生的对沟通语言、媒介、内容和方式的偏好.</span><span class="hljs-comment"># 可以根据需要采用社交媒体和其他先进的电脑技术.</span><span class="hljs-comment"># 多面性方法能够提高与不同年代和文化背景的相关方沟通的效果.</span><span class="hljs-comment"># 多面性方法能提高与相关方的沟通效果.</span><span class="hljs-comment"># 定位到考沟通.</span><span class="hljs-comment"># 沟通是项目成功的一大要素.</span></code></pre><pre><code class="hljs bash">项目经理得知一次定期项目团队会议上的沟通渠道中断.项目经理应该做什么来确保所有项目团队成员都同样了解项目情況?A. 重新计划一次具有适当沟通渠道的项目团队会议B. 在问题日志中添加该信息C. 向所有团队成员发送会议记录D. 询问会议参与者的意见<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P386-10.2.2.7管理沟通 - 会议.</span><span class="hljs-comment"># 题干中问道要所有成员“同样了解”情况，再开一次是最好的.</span><span class="hljs-comment"># B - 问题日志是一种记录和跟进所有问题的项目文件，在问题日志添加对解决题目的问题意义不大，</span><span class="hljs-comment"># C - 发送会议记录无法确保大家理解一致.</span><span class="hljs-comment"># D - 沟通渠道中断，原本会议就不完整再询问会上意见也没用.</span></code></pre><pre><code class="hljs bash">一个虚拟团队正在为一个全球客户开发个项目.由于组织重组，团队将从70人减少到58人，项目经理应该怎么做？A. 将剩余的团队成员集中在一起办公，以提高他们作为团队执行工作的能力B. 获得额外资金以改善沟通技术，以便在团队成员之间建立更好的共识C. 通过使用新的可用信息更新项目管理计划来采取预防措施D. 更新工作分解结构(WBS)并确保所有活动按时完成<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P339-10.2管理沟通.</span><span class="hljs-comment"># 在虚拟团队的环境中，沟通规划非常重要.</span><span class="hljs-comment"># A - 这道题目适合采用排除法，虛拟团队, A集中办公排除.</span><span class="hljs-comment"># C - 情景中没有描述不确定性事件，预防措施很牵强，排除C.</span><span class="hljs-comment"># D - 没有描述范围做了缩减，所以无需更新WBS，排除D.</span></code></pre><pre><code class="hljs bash">一个项目跨越不同国家，且时间紧迫，公司末来的成功取决于是否满足最后期限.项目经理应该使用什么工具或技术来提高团队执行能力?A. 基本规则B. 集中办公C. 虛拟团队D. 培训<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P340-9.4.2.2虚拟团队.</span><span class="hljs-comment"># B  - 跨越不同国家，集中办公可能性较小.</span><span class="hljs-comment"># AD - 虚拟团队可以拉近双方的距离. </span><span class="hljs-comment">#      因为情景中没有强调团队关系和个人技能.</span></code></pre><pre><code class="hljs bash">在项目执行阶段，项目经理意识到项目相关方一直延迟答复敏感性电子邮件.项目经理应该怎么做？A. 将其作为一个沟通问题记录在风险登记册中B. 参阅监督沟通过程，获得替代沟通方式C. 修订沟通管理计划中使用的沟通渠道D. 请求项目发起人解决该项目相关方的问题<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P389 章节：10.3 监督沟通.</span><span class="hljs-comment"># 项目沟通的影响和结果应该接受认真的评估和监督，</span><span class="hljs-comment"># 以确保在正确的时间，通过正确的渠道，</span><span class="hljs-comment"># 将正确的内容（发送方和接收方对其理解一致）传递给正确的受众.</span><span class="hljs-comment"># 相关方延迟回复敏感邮件，说明邮件不是对敏感信息更好的沟通方式. 先B再C.</span></code></pre><h4 id="68-项目管理信息系统"><a href="#68-项目管理信息系统" class="headerlink" title="68.项目管理信息系统"></a>68.项目管理信息系统</h4><p>项目管理信息系统 : 能够确保相关方及时便利地获取所需信息.<br>用来管理和分发项目信息的工具很多, 包括电子项目管理工具. <u><strong>在线数据库</strong></u>是项目管理信息系统的一个示例.</p><ul><li>电子项目管理工具<br>项目管理软件, 会议, 虚拟办公支持软件, 网络界面, 专门的项目门户网站和状态仪表盘, 以及协同工作管理工具.(<u>在线数据库</u>)</li><li>电子沟通管理<br>电子邮件, 传真和语音邮件, 音频, 视频和网络会议, 以及网站和网络发布.</li><li>社交媒体管理<br>网站和网络发布, 以及促进相关方参与和形成在线社区而建立博客和应用程序.</li></ul><p><strong>配置管理计划</strong> : 主要管理产品功能组件, 过程资料文档, 知识经验教训等.<br><u>资源的单价和数量属于成本管理</u>的范畴, 不应纳入配置管理计划中.</p><p><strong>配置管理计划：</strong><br>它是项目管理计划的组件之一，<br>它描述了<strong>如何记录和更新项目的特定信息</strong>，以及<strong>应该记录和更新哪些信息</strong>，以<strong>保持产品、服务或成果的一致性和（或）有效性</strong>.</p><p><strong>配置管理系统：</strong>配置管理系统是<strong>项目管理信息系统的子系统. 该系统识别可交付成果状态、指导记录变更</strong>.</p><p><u>配置管理系统与变更管理系统的区别与联系</u></p><p>配置管理系统包含了变更管理系统，那既然是包含关系，为什么还会把它单独出来呢？<br>主要是在项目中变更无处不在，对于变更的管理非常重要，需要单独出来重点强调.</p><p><u>那它们的区别是什么呢？他们的区别主要在于关注的对象不同：</u></p><p>配置管理系统的对象主要是<u><strong>可交付成果或者各个过程的技术规范</strong></u>。其中，配置管理重点<u><strong>关注技术规范</strong></u>.<br>而变更控制系统的对象则主要是<u><strong>项目及基准（变更）</strong></u>，比如范围基准，进度基准，成本基准等. 它重点<u><strong>关注基准的变更</strong></u>.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/026.png" alt="026" style="zoom:80%;margin-left:0;"><pre><code class="hljs bash">你是项目经理, 负责购物中心的发展. 与任何建筑项目一样, 蓝图和工程图纸将进行多次迭代. 因此, 你已决定创建一个在线数据库, 可用于按名称, 类型, 日期等查询文档.这是什么类型的沟通工具的示例?A. 项目管理信息系统B. 经验教训C. 项目记录D. 配置管理系统<span class="hljs-comment"># A</span><span class="hljs-comment"># 在线数据库是项目管理信息系统的一个示例.</span></code></pre><pre><code class="hljs bash">以下内容应该纳入配置管理系统, 除了: A. 变更控制程序与变更日志B. 产品的版本与功能C. 资源的单价与数量D. 项目计划和项目文件<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">包括提交建议的更改、审查和批准建议的更改、定义授权更改的审批级别以及提供验证已批准更改的方法的系统包括：A. 批准的计划B. 工作授权系统C. 变更控制委员会D. 配置管理系统<span class="hljs-comment"># D</span><span class="hljs-comment"># 配置管理系统包括提交建议的更改、审查和批准建议的更改、</span><span class="hljs-comment"># 定义授权更改的批准级别以及提供验证已批准更改的方法的过程.</span><span class="hljs-comment"># 在大多数应用领域，配置管理系统包括变更控制系统.</span></code></pre><pre><code class="hljs bash">下列哪一项配置管理活动属于执行整体变更控制过程的组成部分？A. 将实际项目绩效与项目管理计划对比B. 更新范围管理计划C. 确定并记录项目产品的功能和物理特性D. 核实可交付成果的完成程度<span class="hljs-comment"># B</span><span class="hljs-comment"># 变更被批准的范围管理计划需要执行整体变更控制过程，</span><span class="hljs-comment"># 计划本身也是配置管理的对象，通过配置管理保证计划的版本正确. 答案B正确.</span></code></pre><h4 id="69-拉式沟通"><a href="#69-拉式沟通" class="headerlink" title="69.拉式沟通"></a>69.拉式沟通</h4><p>拉式沟通 : 它用于<u><strong>大量信息或大量访问群体</strong></u>, 并要求相关方自行决定访问沟通内容.</p><ul><li>门户网站; 企业内网; 电子在线课程; 经验教训数据库或知识库</li></ul><p>推式沟通 : 向需要接收信息的特定接收方发送或发布信息. 这种方法可以确保信息的发送, 但不能确保信息送达目标受众或被目标受众理解.</p><ul><li>信件; 备忘录; 报告; 电子邮件; 传真; 语音邮件; 博客; 新闻稿</li></ul><p>互动沟通 : 在两方或多方之间进行的<u><strong>实时多向信息交换</strong></u>.<br>确认需求是非常重要的, 需要逐一反复探讨确认. 因此, 交互式沟通是非常必要的, 如果条件允许的话, <strong>面对面的交互式沟通</strong>更好.</p><ul><li>会议; 电话; 即时信息; 社交媒体和视频会议</li></ul><pre><code class="hljs bash">Sheila是一位项目经理, 负责管理一个全球项目. 她在全球各地拥有相关方. 由于项目的性质, 她还需要与收件人分享大量信息.为此, 她应该选择哪种沟通方式?A. 交互式沟通B. 基于请求的沟通C. 推式沟通D. 拉式沟通<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">项目经理需要分别与多位关键相关方确认项目需求, 最适合采用哪种沟通方式?A. 推式沟通B. 拉式沟通C. 交互式沟通D. 虚拟式沟通<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">一个成本控制敏感项目团队分布在三个位置 - 存在时区、语言、沟通问题.若要解决这些问题，项目经理应该怎么做？A. 召开定期的视频会议B. 使用电子邮件让沟通可跟踪C. 使用拉式沟通方法D. 确保关键任务分配给处于单独位置的团队<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK Gth 页码：P374 章节：10.1.2.5</span><span class="hljs-comment"># 互动沟通，诸如会议、电话、即时信息、社交媒体 和视频会议等沟通工件.</span><span class="hljs-comment"># 推式沟通，信件、备忘录、报告电子邮件、传真、语音邮件、博客、新闻稿.</span><span class="hljs-comment"># 拉式沟通，门户网站、企业内网、电子在线课程、经验教训数据库或知识库.</span><span class="hljs-comment"># 时区、语言、沟通都存在问题，同时成本敏感，电子邮件会适合一些.</span></code></pre><pre><code class="hljs bash">项目经理正在规划一个新的多公司参与项目，每家公司都有多名项目相关方.项目经理应该使用什么沟通方法?A. 交互式沟通B. 推式沟通C. 拉式沟通D. 选择性沟通<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK (6) P374-10.1.2.5沟通方法.</span><span class="hljs-comment"># 拉式沟通适用于大量复杂信息或大量信息受众的情况（多公司多名相关方）</span><span class="hljs-comment"># 它要求接收方在遵守有关安全规定的前提之下自行访问相关内容.</span><span class="hljs-comment"># 这种方法包括门户网站、企业内网、电子在线课程、经验教训数据库或知识库.</span><span class="hljs-comment"># A - 交互式沟通适用于实时的、多向的信息交换，沟通成本较高.</span><span class="hljs-comment"># B - 推式沟通，这种方式可以确保信息的发送，但是不能确保信息送达目标和被目标受众理解.</span><span class="hljs-comment"># D - 没有此沟通方法.</span></code></pre><pre><code class="hljs bash">一位项目经理正在与一个多元化的团队合作一个备受瞩目公共工程项目.项目相关方的公共部门非常担心，因为这个项目直接影响到他们的社区.项目经理应使用什么来与这个项目相关方团体沟通？A. 推式沟通B. 交互式沟通C. 项目相关方沟通D. 项目报告<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK (6) P374-10.1.2.5沟通方法.</span><span class="hljs-comment"># 在两方或多方之间进行的实时多向信息交换，适合采用交互式沟通（互动沟通）</span><span class="hljs-comment"># A - 推式沟通的特点是可以确保发送，但是不能确保信息的接受效果，</span><span class="hljs-comment">#     所以不利于向社区解答他们的困惑，这种沟通方式容易“火上浇油”.</span><span class="hljs-comment"># C - 范围太广.</span><span class="hljs-comment"># D - 项目报告用来说明的项目执行状态，不适用于向公众进行说明.</span></code></pre><pre><code class="hljs bash">一个项目的团队成员位于不同国家.由于团队必须审查大量信息，应该采用什么方法进行沟通？A. 内部网站、知识库和经验教训数据库B. 即时通讯和会议C. 视频会议和电话会议D. 电子邮件、信件和备忘录<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P374-10.1.2.5沟通方法.</span><span class="hljs-comment"># 拉式沟通适用于大量复杂信息或大量信息受众的情况(多公司多名相关方).</span><span class="hljs-comment"># D - 推式沟通能够保发送，但是不能确保接收的效果.</span></code></pre><pre><code class="hljs bash">项目经理加入位于两个国家的矩阵项目团队中，而这两个国家具有重大的文化差异.项目经理应该做些什么来启动项目？A. 安排一次虚拟的项目启动会议，以介绍团队成员并确定项目范围和目标B. 举行一次在同一地点参加的启动会议，以培养关系并建立期望C. 向团队成员发送电子邮件启动项目，并确定一个在同一地点举行会议的日期，以便进行需求澄清D. 通过分发团队章程和举行虛拟启动会议来培养动力<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P374-10.1.2.5沟通方法.</span><span class="hljs-comment"># 两个不同的国家，存在着不同的文化差异，所以在同一地点举行启动会议有难度, 排除选项BC.</span><span class="hljs-comment"># 可以采用虚拟会议的方式增加互动，也有助于团队成员了解项目目标和范围.</span><span class="hljs-comment"># 由于项目经理是中途加入的团队. 团队资源已到位，</span><span class="hljs-comment"># 所以此时应该介绍项目范围和目标．而不是获得关键相关方的承诺、故不选D.</span></code></pre><pre><code class="hljs bash">一家全球性公司推出一个新项目，由各分支机构共同交付一个质量体系.关键项目相关方担心位于公司总部外面的人员参与程度.若要解决这个问题，项目经理应该怎么做？A. 为位于公司总部的人员举行面对面会议，并向所有团队成员发送电子邮件会议纪要B. 与所有团队成员分享主要成就，并根据需要安排后续追踪电话C. 使用电子邮件向所有团队成员发送项目相关主题D. 安排运行所有参与者参加的虚拟会议，并向所有团队成员发送电子邮件会议纪要<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P392 章节：10.3.2.5会议.</span><span class="hljs-comment"># 面对面或虛拟会议适用于制定决策，回应相关方请求，</span><span class="hljs-comment"># 与提供方、供应方及其他项目相关方讨论.</span><span class="hljs-comment"># 针对公司外面的人员，监督沟通，最好采用虚拟会议的方式.</span></code></pre><h4 id="70-应对策略"><a href="#70-应对策略" class="headerlink" title="70.应对策略"></a>70.应对策略</h4><p>针对威胁, 有五种备选策略:</p><ul><li><p>上报 : 威胁不在项目范围内, 超出了项目经理的权限.</p></li><li><p>规避 : 项目团队采取行动来<u><strong>消除威胁</strong></u>, 或保护项目<u><strong>免受威胁的影响</strong></u>.它可能适用于发生概率较高, 且具有严重负面影响的高优先级威胁.<br>风险规避涉及变更项目管理计划以消除风险. 虽然情况极端, 但<u>关闭项目是一种激进但合法的回避策略</u>.<br>把优先级低但不确定性高的功能<strong>删除</strong>, 即通过<u><strong>主动改变计划来避免遭遇风险</strong></u>, 这属于<u>风险规避</u>策略.</p></li><li><p>转移 : 对威胁的责任<u><strong>转移给第三方</strong></u>, 让第三方管理风险并承担威胁发生的影响.</p><ul><li>购买保险; 使用履约保函; 使用担保书; 使用保证书; 签订协议; <u>绩效债券</u>; <u>担保</u>; <u>固定价格合同</u>.</li></ul></li><li><p>减轻 : 采取措施来<u><strong>降低</strong></u>威胁发生的概率和影响.</p><ul><li>采用较简单的流程, 进行更多次的测试, 或者选用更可靠的卖方(供应商); <strong>原型开发</strong>;<br>选择<strong>更可靠的的卖方</strong> -&gt; 属于减轻.</li></ul></li><li><p>接受 : 承认威胁的存在, 但不主动采取措施, 用于低优先级威胁.</p><ul><li><p>建立应急储备(主动); 定期对威胁进行审查(被动).</p><p>项目计划不修改, 但建立应急措施, 是<u><strong>主动接受</strong></u>.<br>项目计划不修改, 且不建立应急措施, 是<u><strong>被动接受</strong></u>. 项目计划修改, 是<u>规避</u>.</p><p>威胁应对策略 - 接受. 若风险不可避免, 不可控制, 无法转移, 说明不能规避, 不能减轻, 不能转移和上报, 只剩下<strong>接受</strong>了.</p></li></ul></li></ul><p><strong>机会应对策略</strong>:<br>分享 - 分享涉及到将应对机会的责任转移给第三方,使其<strong>享有机会所带来的部分收益</strong>.</p><p>变计划:<br>规划应对后, 意味着<strong>项目管理计划变化</strong>.</p><p>入基准:<br>规划成本进度基准时要考虑纳入<u><strong>应急储备</strong></u>.</p><p>建储备:<br>针对已接受的风险要建立应急储备.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/012.png" alt="012" style="zoom:67%;"><pre><code class="hljs bash">在项目早期就发生了许多之前识别到的风险. 这导致了大多数项目目标都陷入了危险之中.项目经理决定向管理层提出关闭该项目的建议. 这是哪种风险应对策略的示例?A. 风险接受B. 风险减轻C. 风险规避D. 风险转移<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">作为处理负风险策略的一部分, 项目经理决定采用不太复杂的过程, 进行更多的测试, 并选择一个更稳定的供应商.这将归类为什么策略?A. 接受B. 转移C. 减轻D. 避免<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">你的项目已经被识别出很多风险. 项目团队决定不修改项目计划, 而通过建立应急储备来应对这些可能发生的风险.这是哪种风险应对策略的实例?A. 规避B. 被动接受C. 主动接受D. 应急应对策略<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">你正在分析与最近确定的一些即将进行的项目采购相关的几个项目风险.组织的风险承受能力较低, 风险管理的首选方法是转移风险.该组织在市场上享有良好声誉, 以公平透明著称. 以下哪项不是风险转移的有效实例?A. 履约保证金B. 使用成本补偿合同C. 固定总价合同D. 担保<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">为公共活动提供IT基础设施设备的某公司已被选中为一个国家的国庆活动提供设备. 该公司只能在截止日期前提供50%的设备.项目经理找到可以提供剩余设备的另一个供应商. 项目经理应使用什么风险策略?A. 减轻B. 分享C. 回避D. 转移<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P442-11.5.2.4威胁应对策略.</span><span class="hljs-comment"># 选择更可靠的卖方，属于减轻.</span></code></pre><pre><code class="hljs bash">项目经理正在监督一个无法避免, 无法控制, 也无法转移的严重风险, 应对这个风险需要额外的资金.项目经理应该怎么做?A. 减轻风险B. 使用应急储备C. 执行定性分析D. 上报给高级管理层<span class="hljs-comment"># D</span><span class="hljs-comment"># 威胁的应对策略(规避, 转移, 减轻, 接受, 上报)</span></code></pre><pre><code class="hljs bash">一项目经理刚刚为一387,000美元的工程项目编制完风险应对计划. 他下一步很可能怎么做?A. 确定项目总体的风险级别B. 开始分析项目图纸上出现的问题C. 在项目的工作分解结构中增加工作包D. 重估项目风险<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">应急储备应: A. 隐蔽, 以防止管理层不批准该项资金B. 加到每项任务上, 以防止客户知道该储备金的存在C. 由管理层掌握, 用来填补成本超支D. 加到项目的基本成本上, 用来解决风险问题<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">公司市场部门已经对外公布了新产品发布的具体时间, 但开发工作还在紧张地进行中. 公司高层一再强调发布时间不可更改.项目经理建议把一项优先级低但开发不确定性很高的功能从这个版本中删除. 项目经理采取的风险应对策略是什么?A. 风险减轻B. 风险转移C. 风险规避D. 风险上报<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">一家保安公司正在免费为当地的避难所实施门禁控制. 营销团队计划通过善意的宣传活动，确保整体覆盖-包括广播和电视广告，并让避难所及其发起人参与.这描述的是哪一项风险应对策略?A. 风险分析B. 风险增强C. 风险接受D. 风险分摊<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">项目经理正在监督一个不可避免、不可控制、也无法转移的严重风险, 由于这个风险需要额外的资金,项目经理应该做什么?A. 执行定性风险分析B. 将该风险升级上报给一个外部方C. 减轻风险D. 使用应急储备<span class="hljs-comment"># D</span><span class="hljs-comment"># A 已经分析完成了.</span></code></pre><pre><code class="hljs bash">用于在开发过程中进行产品测试的一个供应商技术正在被逐步淘汰，如果需要，项目委员会同意提供额外的时间和资金进行测试. 项目经理应该如何处理这个风险？A. 通过从范围中删除测试来规避风险B. 通过将测试活动外包给合格供应商来转移风险C. 使用另一种测试技术来减轻风险D. 通过使用淘汰的技术进行测试来接受风险<span class="hljs-comment"># C</span><span class="hljs-comment"># 风险已经出现，规避已经不可能了，先尝试减轻风险的影响. </span><span class="hljs-comment"># 情景中没有提到有可用的第三方, 排除B</span><span class="hljs-comment"># A - 已经同意提供额外的时间和资金进行测试, 所以规避风险不适当.</span><span class="hljs-comment"># D - 淘汰的技术, 面临的风险更大.</span></code></pre><pre><code class="hljs bash">项目经理在天气条件不稳定的区域启动个项目，这可能会导致项目进度延迟，项目发起人要求项目经理消除所有可能的威胁，以避免延迟处罚，若要满足该发起人的请求，项目经理应该怎么做？A. 执行一份协议以将该威胁的所有权和责任转移给第三方B. 聘用额外的检查员以确保遵守所有标准C. 确保所有资源都了解可能的项目威胁D. 通过确认威胁并制定单独的应急预算来接受风险<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P442-11.5.2.4威胁应对策略-转移.</span><span class="hljs-comment"># 由于项目发起人对风险的态度极其“厌恶”，所以风险出去，由第三方来处理相对较好.</span><span class="hljs-comment"># B - 属于减轻策略.</span><span class="hljs-comment"># C - 与题目无关.</span><span class="hljs-comment"># D - 属于接受策略.</span></code></pre><pre><code class="hljs bash">在一个为期五年的项目执行一年后，项目经理得知，团队人员流动率高的原因在于团队没有收到与正在从事同一个项目的其他团队相同的财务津贴.项目经理预测，因为较高的人员流动率，该项目将遭受两年半的延期.支付额外补偿的金额未包含在合同中，项目发起人不愿意谈判.项目经理应该怎么做？A. 向项目发起人提出一个减少范围的变更请求B. 使用预算储备支付补偿C. 将该问题升上报给组织的项目集成或项目组合管理办公室D. 请求延长工期<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P442-11.5.2.4威胁应对策略 - 上报.</span><span class="hljs-comment"># 如果项目团队或项目发起人认为某威胁不在项目范围内，</span><span class="hljs-comment"># 或建议的应对措施超出了项目经理的权限，就应该采用上报策略.</span><span class="hljs-comment"># 被上报的风险将在项目集层面、项目组合层面或组织的其他相关部门加以管理.</span><span class="hljs-comment"># 支付额外补偿的金额为包含在合同中，发起人不愿意谈判.</span><span class="hljs-comment"># 说明超出了项目经理的权限范围，需要上报更上层的项目层面去处理.</span><span class="hljs-comment"># ABD - 属于后续可能做出的决策.</span></code></pre><pre><code class="hljs bash">项目经理正在开展一个内部项目，需要个新的销售点(POS)交易系统，项目经理发现这个系统有个问题，不仅可能延迟这个项目，而且还会影响到依赖于这个系统的其他一些项目.这个问题未包含在风险登记册中，因为之前的试验认为该系统没有缺陷.项目经理应该联系谁来解决这个问题？ A. IT部门B. 受影响的发起人C. 受影响的项目经理D. 运营团队<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P442-11.5.2.4威胁应对策略.</span><span class="hljs-comment"># IT系统的控制权力归属IT部门，暴露出来的问题已经超出了项目经理的控制范围，需要上报.</span><span class="hljs-comment"># 上报的相关方取决于权力范围，所以在上报过程中，首选直接归属部门，</span><span class="hljs-comment"># 而不是选择受影响的相关方，不是寻求“同病相必，心有戚戚焉”.</span></code></pre><h4 id="71-技术绩效分析"><a href="#71-技术绩效分析" class="headerlink" title="71.技术绩效分析"></a>71.技术绩效分析</h4><p>技术绩效分析 : 监督风险流程的工具和技术, 用于比较计划内和实际的技术成果, 进度和其他绩效标准.</p><pre><code class="hljs bash">你知道成本和进度风险在你的项目中很普遍. 你希望将项目期间的技术成就与技术成果进度表进行比较, 并确定偏差.你应该执行什么来提供此信息?A. 风险评估B. 技术绩效分析C. 风险审计D. 储备分析<span class="hljs-comment"># B</span></code></pre><h4 id="72-采购谈判"><a href="#72-采购谈判" class="headerlink" title="72.采购谈判"></a>72.采购谈判</h4><p>采购谈判 : 有助于澄清采购的结构, 要求和其他条款, 以便买方和卖方在签订合同之前达成相互协议. </p><p>投标人会议在此阶段之前举行, 这些会议助于确保所有潜在卖方对采购要求有明确和共同的理解. 广告和独立估算跟题目内容无关.</p><pre><code class="hljs bash">以下哪种技术有助于澄清采购的结构, 要求和其他条款, 以便买方和卖方在签订合同之前达成相互协议?A. 独立估算B. 广告C. 投标人会议D. 采购谈判<span class="hljs-comment"># D</span></code></pre><h4 id="73-相关方参与计划"><a href="#73-相关方参与计划" class="headerlink" title="73.相关方参与计划"></a>73.相关方参与计划</h4><p>相关方参与计划 : 包含相关方的识别, 分类和评估信息, 也记录<u><strong>相关方参与战略</strong></u>.<br>相关方参与计划是项目管理计划的组成部分. 它确定用于促进相关方有效参与决策和执行的策略和行动. 基于项目的需要和相关方的期望, 相关方参与计划可以是正式或非正式的, 非常详细或高度概括的.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/040.png" alt="040" style="zoom:67%; margin-left: 0;"><p>项目管理计划 - 相关方参与计划:<br>哪些环境因素影响了项目信息, 说明是规划沟通的输入, <u><strong>规划沟通的输入是相关方参与计划</strong></u>.</p><p>相关方登记册 : 登记相关方, <u>不记录相关方参与战略</u>.<br>变更申请表 : 用于启动项目基准中的变更.</p><p>制定相关方参与计划是在**<u>规划相关方</u>**参与过程中进行的.<br>相关方参与计划可能会在管理相关方参与流程期间出现, 不过更多的是更新而不是制定.</p><p>相关方参与评估矩阵:<br>识别到一个新的相关方, 需要更新他的基础信息, 包括相关方登记册与相关方参与计划中的所有内容.<br>新项目经理支持较少, 项目经理将当前参与水平与期望参与水平比较一下, 看看新项目经理的支持程度.</p><p>相关方参与计划相关方的担心，就要解决他的担心，相关的<u><strong>应对措施在相关方参与计划</strong></u>里.</p><pre><code class="hljs bash">James目前正在管理一个软件升级项目. 他最近确定并分析了他的关键项目相关方.他现在正在搜索他的组织过程资产, 寻找一个模板, 利用该模版更新此分析的结果以及有效与相关方互动所需的计划策略.他应该搜索以下哪一项?A. 风险管理计划B. 变更申请表C. 相关方登记册D. 相关方参与计划<span class="hljs-comment"># D [PMBOK®指南第6版，第522页].</span><span class="hljs-comment"># A - 风险管理计划没有记录相关方参与战略.</span><span class="hljs-comment"># B - 变更申请表用于启动项目基准中的变更.</span><span class="hljs-comment"># C - 虽然相关方登记册包含相关方的识别、分类和评估信息，但它没有记录相关方的参与战略.</span><span class="hljs-comment"># James 应搜索一个相关方参与计划模板，其中可以更新所有这些信息.</span></code></pre><pre><code class="hljs bash">安德鲁正在管理一个建筑项目. 他利用自己的沟通, 人际交往和管理技能, 让关键项目相关方参与到项目中来. 以下哪些活动与管理相关方参与流程无关?A. 与相关方谈判和沟通B. 处理和解决问题C. 制定相关方参与计划D. 确认相关方的持续承诺<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">一个关键的项目决策需要所有相关方的支持. 项目经理现在得知之前未识别到一名关键相关方.项目经理应该做什么来防止这个问题成为项目进展和成功的障碍?A. 审查相关方登记册B. 与项目发起人会面C. 更新相关方参与评估矩阵D. 定期及时审查沟通策略<span class="hljs-comment"># C</span><span class="hljs-comment"># A 应该是更新而不是审查相关方登记册.</span></code></pre><pre><code class="hljs bash">一名新的项目经理加入一个正在执行中项目. 该项目经理不清楚哪些环境因素可能影响向相关方进行有效的信息报告.项目经理应该查阅下列哪份文件来了解这些影响?A. 沟通管理计划B. 相关方参与计划C. 采购管理计划D. 风险管理计划<span class="hljs-comment"># B</span><span class="hljs-comment"># A - 看题干描述重点不是沟通, 而是沟通的影响因素.</span></code></pre><pre><code class="hljs bash">一位经验丰富的项目经理加入了一个已经执行六个月的项目. 在与相关方的第一次会议期间，项目经理了解到客户担心他们的期望没有得到满足. 项目经理应该查阅哪一份文件来解决这个问题?A. 项目章程B. 假设日志C. 范围管理计划D. 相关方参与计划<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">一家组织在一个发展中国家启动一个大型项目. 项目经理同时也是当地的一位相关方, 非常支持这个项目.在项目执行期间, 该项目经理调到另一个国家工作, 新项目经理对该项目的支持较少.因为该项目使用了许多专注于其他日常职责的当地资源. 项目经理应该审查哪份文件?A. 组织过程资产B. 相关方参与评估矩阵C. 项目管理计划D. 相关方参与计划<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P521-13.2.2.5数据表现-相关方参与度评估矩阵.</span><span class="hljs-comment"># 新项目经理支持较少，项目经理将当前参与水平与期望参与水平比较一下，</span><span class="hljs-comment"># 看看新项目经理的支持程度.</span><span class="hljs-comment"># AC - 与相关方关系不大.</span><span class="hljs-comment"># D  - 因为项目经理已经调走, 查看相关方参与计划意义不大, </span><span class="hljs-comment"># 项目经理作为相关方, 审查一下新项目经理的参与程度.</span></code></pre><pre><code class="hljs bash">一位之前未被识别到的相关方报告说，他们的职能领域受到很大影响，但没有持续通知他们关键项目的状态. 项目经理首先应该做什么?A. 审查项目的沟通方法B. 检查并更新相关方登记册C. 立即和该相关方开会确认D. 审查并更新沟通管理计划<span class="hljs-comment"># B</span><span class="hljs-comment"># 更新相关方登记册的三个时间点:</span><span class="hljs-comment"># 1) 项目进入其生命周期的不同阶段.</span><span class="hljs-comment"># 2) 当前相关方不再与项目工作有关, 或者在项目的相关方社区中出现了新的相关方成员.</span><span class="hljs-comment"># 3) 组织内部或更大区域的相关方社区发生重大变化.</span></code></pre><pre><code class="hljs bash">下一次会议之前，一名关键项目发起人需要知道项目的高层级风险和主要需求.该项目发起人希望让项目相关方参与，确保他们的参与程度并根据当前环境识别主要制约因素.项目经理首先应该为发起人准备哪一项？A. 相关方登记册B. 风险分解结构C. 风险管理计划D. 相关方参与度评估矩阵<span class="hljs-comment"># D</span><span class="hljs-comment"># P521章节：13.2.2.5</span><span class="hljs-comment"># 相关方参与度评估矩阵：</span><span class="hljs-comment"># 1) 不了解型</span><span class="hljs-comment"># 2) 抵制型</span><span class="hljs-comment"># 3) 中立型</span><span class="hljs-comment"># 4) 支持型</span><span class="hljs-comment"># 5) 领导型</span><span class="hljs-comment"># 先了解相关方当前的参与程度，再评估期望的参与度.</span></code></pre><pre><code class="hljs bash">Engulf Enterprises的项目经理Mark正在验证相关方参与计划，以改善相关方的参与.以下哪个项目文件将对正在执行的项目管理过程产生最大的影响？（选择三项）A. 风险登记册B. 资源跟踪矩阵C. 相关方登记册D. 相关方参与度评估矩阵E. 问题日志<span class="hljs-comment"># ACE</span><span class="hljs-comment"># P518章节：13.2.1.2</span><span class="hljs-comment"># 项目文件：</span><span class="hljs-comment"># 问题日志(E) </span><span class="hljs-comment"># 风险登记册(A) </span><span class="hljs-comment"># 相关方登记册(C)</span><span class="hljs-comment"># ITTO题.</span></code></pre><pre><code class="hljs bash">一名新项目经理加入一个正在执行中的项目.该项目经理不清楚哪些环境因素可能影响向关键相关方进行有效的信息报告.项目经理应该查阅下列哪份文件来了解这些影响？A. 沟通管理计划B. 相关方参与计划C. 采购管理计划D. 风险管理计划<span class="hljs-comment"># B</span><span class="hljs-comment"># 《PMBOK》 第6版368页，10.1.1.2：项目管理计划-相关方参与计划，</span><span class="hljs-comment"># 注意题干的描述是了解能够影响到相关方的因素, 而不是强调的信息.</span></code></pre><pre><code class="hljs bash">在项目开工会议期间,一个相关方公开反对该项目在组织内的必要性和优先级.项目经理下一步应该做什么?A. 在相关方登记册中记录该相关方的评估B. 将该相关方的问题升级上报给项目发起人C. 了解该相关方的立场,并更新风险登记册D. 考虑该相关方的立场,并制定相关方参与计划<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P522 章节：13.2.3.1相关方参与计划：</span><span class="hljs-comment"># 是项目管理计划的组成部分.</span><span class="hljs-comment"># 它确定用于促进相关方有效参与决策和执行的策略和行动.</span><span class="hljs-comment"># 相关方参与计划可包括(但不限于)调动个人或相关方参与的特定策路或方法.</span><span class="hljs-comment"># 遇抵制，找相关方参与计划.</span></code></pre><pre><code class="hljs bash">新任命的项目经理得知，因为有太多相关方意见不一致，项目可能会失败. 项目经理应该怎么做？A. 与所有相关方开会，尝试调整他们的差异B. 与每位相关方分别开会，尝试理解他们各自的观点C. 制定相关方参与计划并解决相关方的顾虑D. 更新相关方参与计划，并将其发送给所有相关方<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)13.2 规划相关方参与.</span><span class="hljs-comment"># 规划相关方参与是根据相关方的需求、期望、利益和对项目的潜在影响，</span><span class="hljs-comment"># 制定项目相关方参与项目的方法的过程.</span><span class="hljs-comment"># AB - 不一定是最合适的，具体的相关方还是要分别制定对策.</span><span class="hljs-comment"># C  - 说法最专业.</span><span class="hljs-comment"># D  - 错误，相关方的参与计划对相关方来说比较敏感保密，不能发给他们.</span></code></pre><pre><code class="hljs bash">项目经理正在为一个项目工作，该项目的相关方分布在多个国家，为确保有效沟通井获得相关方批准项目管理计划，项目经理应该怎么做？A. 提供有关该项目的详细信息，包括风险、升级上报途径、进度计划、成本和所有可交付成果B. 请求项目发起人协助C. 准备相关方参与计划和相关方登记册D. 沟通PMO（项目管理办公室)的项目知识和期望，已取得相关方的支持<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)13.1.3.1-相关方登记册&amp;13.2.3.1 相关方参与计划.</span><span class="hljs-comment"># 识别完相关方以后，要完成相关方参与计划，从而更好的管理相关方.</span><span class="hljs-comment"># AD - 都是具体措施，被纳入到C相关方参与计划里.</span><span class="hljs-comment"># B  - 不正确.</span></code></pre><h4 id="74-规划相关方参与"><a href="#74-规划相关方参与" class="headerlink" title="74.规划相关方参与"></a>74.规划相关方参与</h4><p>规划相关方参与 : 根据相关方的需求, 期望, 利益和对项目的潜在影响, 制定项目相关方参与项目的方法的过程.<br>本过程的主要作用是, 提供与相关方进行有效互动的可行计划. 本过程应根据需要在整个项目期间定期开展.</p><ul><li>专家判断</li><li>数据收集 : 标杆对照</li><li>数据分析<ul><li>假设条件和制约因素</li><li>根本原因分析 : 识别什么根本原因导致了相关方对项目的某种支持水平, 以便选择适当策略来改进其参与水平.</li></ul></li><li>决策 : 优先级排序或分级</li><li>数据表现<ul><li>思维导图</li><li>相关方参与度评估矩阵<ul><li>不了解型</li><li>抵制型 : 把抵制型 -&gt; 支持型项目相关方, 做<u><strong>相关方分析</strong></u>, 找到可能改变或影响他想法的方案.</li><li>中立型</li><li>支持型</li><li>领导型</li></ul></li></ul></li><li>会议</li></ul><p><u>规划相关方参与</u>的输入</p><ul><li>项目章程</li><li>项目管理计划: <ul><li>资源管理计划</li><li>沟通管理计划</li><li>风险管理计划</li></ul></li><li>项目文件<ul><li>假设日志</li><li>变更日志</li><li>问题日志</li><li>项目进度计划</li><li>风险登记册</li><li>相关方登记册</li></ul></li><li>协议</li><li>事业环境因素</li><li>组织过程资产<ul><li>企业的社交媒体, 道德和安全政策及程序.</li><li>企业的问题, 风险, 变更和数据管理政策及程序.</li><li>组织对沟通的要求 : 寻找项目沟通的**<u>组织政策</u>**, 这是存储在组织过程资产中的企业知识库中.</li><li>制作, 交换, 储存和检索信息的标准化指南.</li><li>经验教训知识库, 包括与相关方偏好, 行动和参与有关的信息.</li><li>支持有效相关方参与所需的软件工具.</li></ul></li></ul><pre><code class="hljs bash">詹妮弗最近被要求管理一个办公室翻新项目. 她发现公司的首席财务官正在抵制这个项目.首席财务官是关键的项目相关方. 詹妮弗必须先做什么?A. 寻求项目发起人的专家判断B. 寻求项目发起人的支持, 以推动项目决策C. 召开团队会议讨论此问题D. 分析可能改变或影响首席财务官想法的方案<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">对于你当前为最负盛名的客户端之一执行的项目, 客户端的组织分配了专门的项目协调员.与客户端的所有项目沟通都需要通过此协调员. 项目团队发现协调员似乎不太关心项目, 对项目的成功也不关心. 你需要先做什么?A. 与协调员会面, 讨论团队提出的问题B. 与团队会面, 了解团队为何认为协调员已脱离项目C. 请团队针对协调员的情况准备书面案例D. 根据合同条款和条件上报问题<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">Mary目前正在为她的新网站开发项目起草相关方参与计划. 她的组织有严格的沟通准则.Mary希望确保她的相关方参与战略与组织沟通准则保持一致. 她在哪里可以找到这些准则?A. 经验教训库B. 企业知识库C. 相关方登记册D. 项目合同<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">在项目执行的中途，一个关键的相关方离开了公司. 一个新的相关方填补了空缺的角色. 项目经理理解应该更新相关方参与计划，以反映新相关方参与项目所需的战略和行动.项目经理与新的相关方进行会面. 以下哪个问题对项目经理更新计划最有帮助？(选择四个)A. 你以前管理过项目吗？B. 为了获得预期的收益，你愿意承担多大的风险？C. 你在以前的公司担任什么职务?D. 你的沟通偏好是什么？E. 从以前的项目中，你有什么经验可以分享吗?F. 你认为进行这个项目是正确的吗？<span class="hljs-comment"># BDEF</span><span class="hljs-comment"># 13.2.1规划相关方参与 </span><span class="hljs-comment"># B - 《风险管理计划》 风险临界值与风险态度</span><span class="hljs-comment"># D - 《沟通管理计划》相关方的沟通偏好</span><span class="hljs-comment"># E - 《组织过程资产》经验教训</span><span class="hljs-comment"># F - 《相关方登记册》相关方的态度</span><span class="hljs-comment"># AC - 公司之前的职务与项目管理经验与相关方规划无关.</span></code></pre><pre><code class="hljs bash">一个在实施中的项目对公司的成功至关重要，项目总监不相信该项目将按时交付，项目经理应该怎么做？A. 审查相关方参与评估矩阵，并更新风险登记册B. 与项目总监开会，提供基准数据并解决问题C. 制定相关方参与计划，定期提供项目更新并鼓励反馈D. 修改风险登记册，以应对未能达到项目总监期望的风险<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P516-13.2 规划相关方参与.</span><span class="hljs-comment"># 规划相关方参与是根据相关方的需求、期望、利益和对项目的潜在影响，</span><span class="hljs-comment"># 制定项目相关方参与项目的方法的过程.</span><span class="hljs-comment"># 识别完相关方，还很重要，需要制定相关方参与计划，并明确策略.</span><span class="hljs-comment"># A - 没有C全面，还是要制定相关方参与策略.</span><span class="hljs-comment"># B - 只是策略的一种.</span><span class="hljs-comment"># D - 未明确是不是风险问题.</span></code></pre><h4 id="75-识别相关方"><a href="#75-识别相关方" class="headerlink" title="75.识别相关方"></a>75.识别相关方</h4><p>识别相关方的工具与技术</p><ul><li>专家判断</li><li>数据收集: 问卷和调查; 头脑风暴</li><li>数据分析: 相关方分析; 文件分析</li><li>数据表现: <strong><u>相关方映射分析/表现</u></strong>, 相关方映射分析和表现是一种利用不同方法对相关方进行**<u>分类</u>**的方法. 对相关方进行分类有助于团队与已识别的项目相关方建立关系.<ul><li>权力利益方格; 权力影响方格; 或作用影响方格</li><li>相关方立方体</li><li>凸显模型</li><li>影响方向</li><li>优先级排序</li><li>会议</li></ul></li></ul><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/039.png" alt="039" style="zoom:67%;margin-left: 0;"><p>相关方登记册 :<br>新相关方出现的三个条件: 1) 进入不同阶段 2) 换人加人 3) 组织重组.<br>满足三个条件之一, 首先识别相关方并**<u>更新登记册</u>**.<br>相关方在项目中的**<u>角色</u>**, 也记录在相关方登记册中.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/021.png" alt="021"></p><p>相关方登记册 - 身份信息.<br>相关方在项目中的角色, 项目经理应该<u>与相关方当面沟通</u>, 同时记录到<u>相关方登记册</u>中.</p><pre><code class="hljs bash">在任何时候与所有相关方保持同等程度的密切联系是不切实际的, 通常也是没有必要的.项目经理必须根据相关方是谁, 他们对项目的影响程度以及他们的兴趣程度来优先考虑他们. 以下哪些技术有助于确定相关方的优先级?A. 相关方参与矩阵B. 资源直方图C. 相关方映射分析D. 相关方登记册<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">在一个系统升级项目的早期阶段, 两位关键相关方由新加入公司的人员所取代, 导致项目延期.项目经理首先应该怎么做?A. 更新相关方登记册B. 与新相关方分享项目进度计划C. 与新相关方审查项目章程D. 为新相关方提供系统相关培训<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">项目经理向指导委员会展示项目章程, 指导委员会非常担心预先分配的资源, 因为相关方不了解他们在项目中的参与情况.若要避免这个问题, 项目经理应该事先做什么?A. 获得相关方的期望B. 管理相关方参与程度C. 完成相关方登记册D. 定义每个相关方的角色与职责<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P514-13.1.3.1相关方登记册.</span><span class="hljs-comment"># 相关方在项目中的角色，记录在相关方登记册中.</span><span class="hljs-comment"># &quot;相关方不了解他们在项目中的参与情况&quot;, </span><span class="hljs-comment"># 因此在出现这种情况之前，项目经理应该先完成相关方登记册，明确相关方在项目中扮演的角色.</span><span class="hljs-comment"># A - 如果要确定相关方在项目扮演的角色，仅仅是期望是不够的，还要考虑权重等其他因素；</span><span class="hljs-comment"># B - 管理相关方参与是执行阶段做的事，现在还没有到执行阶段；</span><span class="hljs-comment"># D - 相关方的职责说法不对.</span></code></pre><pre><code class="hljs bash">由于升职, 一位新相关方加入到一个项目中. 该相关方对其新角色的操作责任有良好的认识, 但未接受过与该项目角色相关的培训. 项目经理应该怎么做?A. 与新相关方开会, 审查相关项目文件并收集背景信息, 然后更新相关方登记册B. 请新相关方书面确认他们对新角色的理解, 然后更新项目章程C. 更新项目治理计划以添加这位新相关方, 并包含相关责任的描述以反映这项变更D. 修订工作分解结构(WBS), 以包含这位新相关方的相关可交付成果<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P514- 13.1.3.1 相关方登记册-身份信息.</span><span class="hljs-comment"># 相关方在项目中的角色，项目经理应该与相关方当面沟通，</span><span class="hljs-comment"># 同时记录到相关方登记册中.</span><span class="hljs-comment"># B - 更新项目章程不对;</span><span class="hljs-comment"># C - 无须大动干戈进行项目治理;</span><span class="hljs-comment"># D - 操作过于具体.</span></code></pre><pre><code class="hljs bash">在项目实施期间发生组织重组，一名关键相关方被替换.新的相关方对项目成功存在很高的兴趣并拥有足够的影响力，对项目结果产生重大影响.在执行相关方分析之后，项目经理该如何处理该新项目相关方？A. 监测相关方期望发生的任何变化B. 保持向相关方通知项目进度/状态C. 确保相关方满意项目进度/状态D. 密切管理相关方的期望<span class="hljs-comment"># D</span><span class="hljs-comment"># 解析重要相关方，且对项目有重大利益影响，根据权力利益方格，应采取重点关注的管理方法.</span></code></pre><pre><code class="hljs bash">项目经理加入一个备受瞩目的项目，该项目将为公司带来重大效益，项目发起人告诉项目经理，一些关键相关方不赞同项目的效益，并且可能抵制该项目的工作。项目经理该怎么做？A. 制定责任分配矩阵 (RAM)B. 要求发起人获得相关方的支持C. 与相关方开会展示该项目D. 更新相关方登记册，添加这项信息<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK (6) P530-13.4监督相关方参与</span><span class="hljs-comment"># 首先识别这些关键项目相关方，将其更新到相关方登记册中，</span><span class="hljs-comment"># 接下来展开相关方分析，根据分析的结果来制定相关方管理策略.</span><span class="hljs-comment"># A - 资源管理领域，相关方是否参与项目，在情景中没有交代.</span><span class="hljs-comment"># B - 相关方管理是项目经理的责任.</span><span class="hljs-comment"># C - 会议是识别相关方的工具. 以什么样的方式对相关方管理，要根据相关方分析的结果.</span></code></pre><pre><code class="hljs bash">在项目执行期间，项目经理意识到对项目成功至关重要的几个关键相关方不包含在相关方参与计划中.项目经理应该如何让这些相关方参与并管理这些相关方?A. 了解新识别相关方的影响力和职权级别,并准备一份状态报告以向他们提供更新信息B. 向新识别的相关方通知他们的项目职责C. 与所有相关方开会，介绍新识别的相关方D. 将新识别的相关方添加至执行、负责、咨询和知情图,并向他们发送信息<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P512 章节：13.1.2.3相关方分析：</span><span class="hljs-comment"># 相关方分析会产生相关方清单和关于相关方的各种信息.</span><span class="hljs-comment"># 例如，在组织内的位置、在项目中的角色、</span><span class="hljs-comment"># 与项目的利害关系、期望、态度(对项目的支持程度），</span><span class="hljs-comment"># 以及对项目信息的兴趣. 再分析相关方，再引导相关方的参与.</span></code></pre><pre><code class="hljs bash">Julia正在管理一个复杂的工业过程重新设计项目.她已确定所有关键项目相关方，并同他们进行了单独面谈，以确定其他项目相关方.但是Julia仍然不满意她的项目相关方名单.她认为，列表中可能缺少更多关键的外部相关方.在这种情况下，朱莉娅应该怎么做？A.使用组织过程资产的相关方登记册模板B.与主要相关方举行更多会议C.克服她的恐惧，最终完成项目相关方登记D.寻求主题专家的专家判断<span class="hljs-comment"># D [PMBOK®指南第6版，第511页]</span><span class="hljs-comment"># Julia目前在进行识别相关方的过程，专家判断是该过程的工具技术，</span><span class="hljs-comment"># 如果 Julia 对列表不满意，她需要确定更多的相关方，</span><span class="hljs-comment"># 可以征求专家的意见，已判断关键相关方是否有遗漏.</span><span class="hljs-comment"># 相关方登记册模板不包含相关方信息，它只为项目经理生成项目的相关方登记册提供模板.</span><span class="hljs-comment"># 再次与已确定的关键相关方面谈可能无法解决问题.</span></code></pre><pre><code class="hljs bash">项目经理必须制定相关方参与计划,以避免相关方之间发生利益冲突.项目经理应该使用什么来执行相关方分析？A. 执行、负责、咨询和知情(RACI)矩阵B. 计划-实施-检查-行动(PDCA)循环C. 数据收集技术D. 优势、劣势,机会与威胁(SWOT)分析<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P511， 13.1.2.2- 数据收集</span><span class="hljs-comment"># 分析相关方的工具有：专家判断、数据收集、收据分析、数据表现.</span><span class="hljs-comment"># A - RACI矩阵通常用于资源管理领域.</span><span class="hljs-comment"># B - PDCA通常用于质量管理领域.</span><span class="hljs-comment"># D - SWOT分析通常用于识别风险.</span></code></pre><pre><code class="hljs bash">项目经理已经完成识别相关方的工作之前，由于没有对项目经理和相关方的影响力或职权方面规定区别，项目经理在管理相关方方面有困难，在相关方登记册中需要包含哪一些信息？A. 更新相关方的变更请求B. 相关方效益管理计划C. 相关方参与计划D. 相关方分类<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P514-13.1.3.1相关方登记册.</span><span class="hljs-comment"># 相关方登记册中记录关于已识别相关方的信息，</span><span class="hljs-comment"># 包括身份信息、评估信息和相关方分类等.</span><span class="hljs-comment"># ABC - 不记录在相关方登记册中.</span></code></pre><pre><code class="hljs bash">在Scrum团队中工作意味着你需要与你的客户、发起者、供应商密切合作，因此，你需要创建一个完善且可靠的利益相关方登记册.然后，你应该对利益相关方进行分析. 最有可能将收集到的信息保存在哪里?A. 利益相关方登记册B. 障碍待办事项列表C. 信息发射源D. 待办事项列表<span class="hljs-comment"># A</span><span class="hljs-comment"># 利益相关方分析是个有益的工作.</span><span class="hljs-comment"># 在分析利益相关方时，通过识别利益相关方，我们可以了解他们在该项目的利益需求.</span><span class="hljs-comment"># 所有这些信息都记录在利益相关方登记册中，这项工作非常简单.</span></code></pre><pre><code class="hljs bash">由于国际文化差异，一个跨国项目的相关方未能批准项目管理计划，为减轻这个问题应该事先做什么？A. 审查问题更新日志，以反映项目管理计划可能不会获得批准B. 要求相关方提前反馈C. 更新相关方登记册并了解相关方需求D. 用一种通用的沟通语言培训团队<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK 6th 页码：P504 章节：13.</span><span class="hljs-comment"># 项目经理和团队正确识别并合理引导所有相关方参与的能力,</span><span class="hljs-comment"># 能决定着项目的成败. 正确识别并引导参与决定项目成败.</span></code></pre><pre><code class="hljs bash">一名新项目经理必须了解项目相关方在项目中的利益、关系、期望和影响.项目经理需要根据这些关系建立联系.下列哪一项将帮助项目经理完成这项工作？A. 相关方分析B. 人际关系技巧C. 分析技术D. 相关方参与度评估矩阵<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P512 章节：13.1.2.3.</span><span class="hljs-comment"># 相关方分析会产生相关方清单和关于相关方的各种信息.</span><span class="hljs-comment"># 例如，在组织内的位置、在项目中的角色、与项目的利害关系、</span><span class="hljs-comment"># 期望、态度（对项目的支持程度），以及对项目信息的兴趣. 利益、关系、期望、影响.</span></code></pre><pre><code class="hljs bash">项目经理与多位高管相关方一起参与一个生命周期替换项目，其中一位相关方强烈反对该项目. 若要获得该相关方的支持，项目经理应该怎么做？A. 制定权力/影响力方格，以确定该相关方影响项目的能力并确认其支持B. 创建相关方参与计划，以确定该相关方的项目支持水平C. 将该问题升级上报给项目推动者，并请求替换一个支持该项目的相关方D. 执行相关方分析，以确定缺乏项目支持的原因并对这些原因进行优先级排序<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK Gth 页码：P512 章节：13.1.2.3相关方分析.</span><span class="hljs-comment"># 相关方分析会产生相关方清单和关于相关方的各种信息.</span><span class="hljs-comment"># 例如，在组织内的位置、在项目中的角色、</span><span class="hljs-comment"># 与项目的利害关系、期望、态度（对项目的支持程度），</span><span class="hljs-comment"># 以及对项目信息的兴趣。先进行相关方分析，再更新参与计划.</span><span class="hljs-comment"># B - 在D后面.</span><span class="hljs-comment"># A - 确认其支持不对.</span></code></pre><pre><code class="hljs bash">项目经理为一个具有按时完成盈利项目历史记录的组织工作.然而, 由于缺乏相关方的支持以及他们未能提供信息,这些项目都经历过问题.若要避免这些问题,项目经理在新项目开始时应该做些什么？A. 管理所有相关方的期望,并为每个人提供解决方案B. 准备一份包含所有相关方的沟通管理计划C. 在启动阶段识别关键相关方并进行优先级排序D. 复制之前项目的工作,因为这些项目结束时都很好<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK 6th 页码：P504 章节：13相关方的观点.</span><span class="hljs-comment"># 项目经理和团队正确识别并合理引导所有相关方参与的能力，能决定着项目的成败.</span><span class="hljs-comment"># 要尽早地识别关键的相关方，因此识别相关方在启动阶段开始.</span></code></pre><pre><code class="hljs bash">项目经理为一个具有按时完成盈利项目历史记录的组织工作.然而，由于缺之相关方的支持以及他们末能提供信息, 这些项目都经历过问题.若要避免这些回题,项目经理在新项目开始时应该做些什么？A. 管理所有相关方的期望，并为每个人提供解决方案B. 准备一份包含所有相关方的沟通管理计划C. 在启动阶段识别关键相关方并进行优先级排序D. 复制之前项目的工作,因为这些项目结束时都很好<span class="hljs-comment"># C</span></code></pre><h4 id="76-发布计划"><a href="#76-发布计划" class="headerlink" title="76.发布计划"></a>76.发布计划</h4><p>发布计划 : 有更高的优先级, 任务列表过于详细, 不适合目前的计划阶段.<br>迭代计划 :  从发布计划中提取其优先级.<br>路线图和愿景文件先于发布计划.</p><pre><code class="hljs bash">你正在与产品负责人一起确定可行的产品迭代计划. 当你讨论各种特性并确定它们的优先级时, 你们都在努力理解哪些特性应该具有更高的优先级. 项目经理和产品负责人应该查询什么工具?A. 任务列表. 任务列表将帮助产品经理和产品负责人理解创建一个特性所需要的元素B. 迭代计划. 迭代计划将摆脱所需的各种特性C. 发布计划. 发布计划将摆脱项目的迭代D. Scrum待办事项列表<span class="hljs-comment"># C</span><span class="hljs-comment"># 发布计划有更高的优先级.</span><span class="hljs-comment"># A - 任务列表过于详细，不适合目前的计划阶段.</span><span class="hljs-comment"># B - 迭代计划从发布计划中提取其优先级.</span><span class="hljs-comment"># D - 路线图和愿景文件先于发布计划.</span></code></pre><pre><code class="hljs bash">在一次会议上，产品负责人重申了产品愿景，描述了目标用户组，业务目标，以及敏捷项目即将发布的主要功能。随后，为了直观地描述这些功能，产品负责人创建了产品路线图. 以下哪项最能描述会议目的?A. 在项目相关方之间建立共享的项目愿景B. 为每个即将发布的版本创建产品待办事项列表C. 在项目相关方之间建立共享发布愿景D. 确定项目范围、进度、成本、质量和资源<span class="hljs-comment"># A</span><span class="hljs-comment"># 敏捷实践指南 页码：P49 章节：5.1敏捷项目章程.</span><span class="hljs-comment"># 我们为什么要做这个项目？这是项目愿景.</span><span class="hljs-comment"># (1) 谁会从中受益？如何受益？这可能是项目愿景和/或项目目标的一部分.</span><span class="hljs-comment"># (2) 对此项目而言，达到哪些条件才意味着项目完成？这些是项目的发布标准.</span><span class="hljs-comment"># (3) 我们将怎样合作？这说明预期的工作流. 这题注意项目愿景的作用.</span></code></pre><h4 id="77-任务板"><a href="#77-任务板" class="headerlink" title="77.任务板"></a>77.任务板</h4><p>任务板 : 一种图表工具, 基本功能是帮助团队整理和分析他们的工作进度. 在任务板中, 冲刺中的任务分为3个主要类别: </p><ul><li>即将开始的任务</li><li>进行中的任务</li><li>已完成的任务</li></ul><p>每个人都可以通过任务板轻松查看<u>团队当前正在处理的任务并选择下一批任务</u>.</p><p>任务板 : 显示<u><strong>在制品的最佳工具</strong></u>是任务板.<br>要严格限制看板中的在制品的数量. 否则会带来:</p><ul><li>质量反馈时间变长</li><li>平均周期时间变长</li><li>业务响应速度变慢</li></ul><p>用户故事待办事项列表 : 显示了项目上还有哪些工作要做.</p><p>在敏捷方法中，用户故事<u><strong>未通过</strong></u>，要重新梳理相关方的期望，并<strong>重新编写用户故事</strong>.</p><p>用户故事描述应该符合 <u><strong>DEEP</strong> 原则</u> : </p><ul><li>D : 详略适当的</li><li>E : 经过估算的</li><li>E : 涌现的(即在列表中可以增加的, 删除和动态调整优先级)</li><li>P : 按优先级排序</li></ul><p>该原则<strong>没有要求颗粒度必须小到一个人独立完成</strong>.</p><p>产品路线图 : 显示了计划何时完成工作.</p><p>工作分解结构 : 主要用于传统(瀑布)项目.</p><p><strong>信息发射源</strong>:</p><p>它是一种可见的实物展示其向组织内其他成员提供信息. 在不干扰团队的情况下即时实现知识共享.<br>信息发射源一般包括看板、燃尽图、燃起图、障碍日志等在敏捷项目中，使用可见的实物展示信息更透明化。</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/029.png" alt="029" style="zoom:80%;margin-left: 0;"><pre><code class="hljs bash">你是一名敏捷教练, 希望确认开发团队有一种简单的方法来整理工作并将迭代中的剩余工作可视化.以下哪项是你可用来实现这个目的的最好方法?A. 使用信息发射源B. 使用燃尽图C. 使用燃起图D. 使用任务板说明<span class="hljs-comment"># D</span><span class="hljs-comment"># “使用任务板说明”.</span><span class="hljs-comment"># 任务板是一种图表工具，基本功能是帮助团队整理和分析他们的工作进度.</span><span class="hljs-comment"># 在任务板中，冲刺中的任务分为3个主要类别：</span><span class="hljs-comment"># 1.即将开始的任务.</span><span class="hljs-comment"># 2.进行中的任务.</span><span class="hljs-comment"># 3.已完成的任务.</span><span class="hljs-comment"># 每个人都可以通过任务版轻松查看团队当前正在处理的任务并选择下一批任务.</span></code></pre><pre><code class="hljs bash">你正在规划你的敏捷项目. 你拥有一支有多年敏捷项目经验的高技能人员组成的团队.你让他们凭经验来决定将在项目中使用哪些工具. 他们正在讨论如何展示正在进行的工作.在以下选项中, 他们最有可能选择哪个工具?A. 任务板B. 用户故事待办事项列表C. 产品路线图D. 工作分解结构<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">一个团队刚刚开始使用敏捷方法. 产品负责人希望待办事项列表中的用户故事能够被团队准确理解. 以下是他应该做到的, 除了: A. 用户故事应该被充分定义, 越是排在列表顶层的应该越具体B. 用户故事的颗粒度必须足够小, 能够由一名团队成员独立完成C. 用户故事应该是动态的, 根据项目进展不断添加, 删除和重新排序D. 用户故事的工作量应该是经过估算的, 其优先级应该被持续维护<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">敏捷教练反复提醒团队应该严格限制看板中的在制品数量, 否则会带来以下问题, 除了:A. 质量反馈时间变长B. 平均周期时间变长C. 业务响应速度变慢D. 同时开展的工作减少<span class="hljs-comment"># D</span><span class="hljs-comment"># 同时开展的工作增多</span></code></pre><pre><code class="hljs bash">敏捷团队正在根据商业分析师团队提供的用户故事开发产品. 在第四次冲刺之后，相关方举行了一次演示，其中三个已完成的故事获得通过, 其余两个故事末能满足相关方的期望，项目经理应该怎么做？A. 要求商业分析师开发新的用户故事B. 审查用户故事并签发变更请求C. 确认相关方的期望, 然后更新并重新编写用户故事D. 启动一个新项目, 将修订后的用户故事纳入工作范围<span class="hljs-comment"># C</span><span class="hljs-comment"># A - 商业分析师负责收集需求, 排除A.</span><span class="hljs-comment"># B - 用户故事没有满足相关方的需求, 需要重新开发, 排除B.</span><span class="hljs-comment"># D - 没有进入到收尾阶段, 排除D.</span></code></pre><pre><code class="hljs bash">在迭代期间，项目团队会遇到可能导致任务完成延迟的问题. 同一项目中的另一个团队需要按时完成任务，以满足他们的计划. 项目经理如何解决这个问题？A. 坚持让项目团队稍微努力一点以便按时完成，以免耽误其他团队的工作B. 与产品负责人合作，重新确定迭代待办事项列表的优先级，以免耽误其他团队的工作C. 增加迭代的长度，并向项目团队添加额外的资源，这样他们就可以在适当的最后期限前完成任务D. 要求团队成员在迭代过程中尽其所能，并在迭代完成后进行回顾<span class="hljs-comment"># B</span><span class="hljs-comment"># 产品负责人Product Owner：</span><span class="hljs-comment"># • 创建待办列表并排序 </span><span class="hljs-comment"># • 确认工作优先顺序</span><span class="hljs-comment"># • 提供反馈</span><span class="hljs-comment"># • 指导开发方向</span><span class="hljs-comment"># 目前来看有问题，最好的方法是重新排序待办列表，以规避问题.</span></code></pre><pre><code class="hljs bash">敏捷项目团队的成员都在一个开放的办公空间中工作. 一天中有许多谈话同时发生. 下列哪一项是项目经理的最佳选择?A. 安排频繁的团队检查点并以透明的方式发布项目工件B. 要求团队成员将谈话推迟到正式会议时间C. 记录对话并发布在共享知识库中D. 将下午指定为安静的工作时间<span class="hljs-comment"># A</span><span class="hljs-comment"># 精益和看板方法.</span><span class="hljs-comment"># 敏捷、精益和看板方法共同的重点在于交付价值、尊重人、</span><span class="hljs-comment"># 减少浪费、透明化、适应变更以及持续改善等方面.</span><span class="hljs-comment"># 敏捷团队使用信息发射源来确保工作的透明化.</span></code></pre><pre><code class="hljs bash">随着项目进行，项目经理会收到相关方的抱怨，他们声称项目状态会议和电子邮件报告太少，无法让相关方了解项目的最新状态。项目经理审查沟通管理计划，并提交变更请求以修改报告状态的方式. 项目经理最好在变更请求中包含以下哪项?A. 结合使用信息发射源B. 终止分发电子邮件报告C. 在每日站会汇报项目状况D. 将项目状态发送给更少的相关方<span class="hljs-comment"># A</span><span class="hljs-comment"># 信息发射源一般包括看板、燃尽图、燃起图、障碍日志等在敏捷项目中，使用可见的实物展示信息更透明化.</span><span class="hljs-comment"># C - 每日站会不报告项目状态.</span></code></pre><pre><code class="hljs bash">一位scrum master正在领导一个敏捷项目，在该项目中，开发团队在过去的三次迭代中都未能实现冲刺的目标. 在冲刺回顾中，团队决定实现几个变更来提高速度. scrum master如何验证绩效改进？A. 计算项目CPIB. 创建燃尽图C. 审查燃起图D. 研究甘特图<span class="hljs-comment"># C</span><span class="hljs-comment"># 5.2.1回顾总结会</span><span class="hljs-comment"># 回顾是最重要的一个实践，原因是它能让团队学习、改进和调整其过程.</span><span class="hljs-comment"># 通过审查之前的绩效来进行绩效改进.</span><span class="hljs-comment"># B - 错在应该审查而非创建.</span></code></pre><pre><code class="hljs bash">项目集经理要求定期更新计划下项目的进展情况.除了一个项目外，所有项目都使用传统方法进行管理.项目集经理指出在整个规划中有太多的范围变更，并希望看到这些变更是如何影响各种项目的总体进度的.对于领导敏捷项目的Scrum主管来说，要满足项目经理的要求，最好的行动方案是什么？A. 邀请项目集经理参加迭代审查会议B. 建议项目集经理参加每日站会C. 让项目集经理审查迭代燃尽图D. 定期将发布燃起图发送给项目集经理<span class="hljs-comment"># D</span><span class="hljs-comment"># 敏捷实践指南 页码：P152 章节：术语表 - 信息发射源：</span><span class="hljs-comment"># 它是一种可见的实物展示其向组织内其他成员提供信息,</span><span class="hljs-comment"># 在不干扰团队的情况下即时实现知识共享.</span><span class="hljs-comment"># 信息发射源一般包括看板、燃尽图、燃起图、障碍日志等.</span><span class="hljs-comment"># 信息发射源可以实现信息共享。</span><span class="hljs-comment"># C - 不应该是审查，而是定期发送.</span></code></pre><pre><code class="hljs bash">敏捷团队在墙壁上仅有非常有限的空间展示项目状态和进度.团队成员在纠结，是应该使用公司拥有永久许可的软件工具来展示进度.还是使用写有他们当前工作进度的便条和素引卡在墙面上展示.建议敏捷团队使用以下哪种方法？A. 素引卡和张贴在墙上的笔记，因为这将为利益相关方提供项目状态的实时更新B. 使用软件，因为该公司有永久使用许可，不存在成本问题C. 遵循其他敏捷团队使用的方法来展示公司的项目状态或进度D. 使用信息发射源，因为发射源比高科技解决方案更好<span class="hljs-comment"># A</span><span class="hljs-comment"># 使用索引卡和贴在墙上的笔记，因为它将为利益相关方提供有关项目状态的实时更新.</span><span class="hljs-comment"># 敏捷团队应该使用整个空间来张贴素引卡或便利贴，来展示项目任务的当前状态.</span></code></pre><pre><code class="hljs bash">你正在使用敏捷方法管理软件开发项目.你刚刚完成了一个版本，你应该为下一个版本做哪些准备?A. 确认范围基准是最新的B. 检查待办事项列表C. 确认范围说明书仍然有效D. 查看以前版本的WBS<span class="hljs-comment"># B</span><span class="hljs-comment"># 敏捷实践指南 第52页.</span><span class="hljs-comment"># 敏捷项目中，待办事项列表是所有工作的有序列表，</span><span class="hljs-comment"># 它以故事形式呈现给团队，团队根据自身能力，从待办事项列表中提取若干功能开始工作.</span><span class="hljs-comment"># 完成一次迭代后，团队将下一张卡片从待办事项列表中拿出来讨论.</span><span class="hljs-comment"># 题干中&quot;刚刚完成了一个版本&quot;后续要先检查待办事项列表，以明确需求，确定下一步的工作, 选项B正确.</span><span class="hljs-comment"># A - &quot;确认范围基线是最新的&quot;和选项C&quot;确认范围说明书仍然有效&quot;都是预测型生命周期中的管理过程.</span><span class="hljs-comment"># D - &quot;查看以前版本的WBS&quot;对于下一个版本的准备没有作用.</span></code></pre><pre><code class="hljs bash">你的敏捷顾问建议你开始在卡片上编写用户故事,每个故事代表一个工作.每张卡片都是状态信号，指示何时可以提取新的工作，这种方法有助你看见工作流程。顾问建议使用的工具是什么?A. Scrum板B. 看板C. 任务板D. 用户故事板<span class="hljs-comment"># B</span><span class="hljs-comment"># &quot;看板&quot;是一种可视化工具，通过将瓶颈和工作量可视化，改进工作流程.</span></code></pre><pre><code class="hljs bash">一位新的高级经理被授予监督多个项目的职责.经理要求敏捷项目领导提交月度报告，总结项目目前状态和预测完成的日期.以下哪项是项目负责人回应经理要求的最佳方式？A. 建议高级经理参加每日站会B. 与经理分享项目燃尽图C. 要求高级经理使用EVM监控项目进度D. 按照高级经理的要求提供项目状态的详细报告<span class="hljs-comment"># B</span><span class="hljs-comment"># 燃尽图是一个信息发射源，用于项目进度的可视化演示.</span><span class="hljs-comment"># 每次迭代后都会更新冲刺燃尽图.</span><span class="hljs-comment"># 燃尽图显示了不同时间要完成的工作的估计量和实际量, 有助于跟踪和监控团队的进度,</span><span class="hljs-comment"># 了解团队是符合计划进度还是落后于计划进度.</span><span class="hljs-comment"># 燃尽图一般放在显眼的地方，让大家很容易看到项目的当前状态和进度.</span></code></pre><pre><code class="hljs bash">产品待办列表优先级是敏捷软件开发中最重要的特性之一.如果团队有效地且始终如一地优先考虑产品需求(用户故事），项目就会成功.因此需要对待办事项进行优先级排序，确定产品待办事项的开发和部署顺序.在管理敏捷软件团队时，对待办事项进行优先排序是为了：A. 降低技术风险B. 吸收利益相关方重视的内容C. 供应商管理D. 利益相关方故事地图<span class="hljs-comment"># B</span><span class="hljs-comment"># 我们对待办事项进行优先排序，是为了更好地理解和吸收利益相关方重视的内容.</span><span class="hljs-comment"># 尽管该行为可能会降低技术风险、影响供应商管理或影响利益相关方故事地图，</span><span class="hljs-comment"># 但这些影响并不是我们开展业务的主要原因.</span></code></pre><pre><code class="hljs bash">你的项目团队刚刚完成了搜索功能的冲刺计划，汇总了故事点，并创建了接下来 4 周的迭代燃尽图.以下关于迭代燃尽图的说法中错误的是：A. 它跟踪迭代中剩余的工作B. 它描述了迭代中计划的工作C. 它描述了迭代中预计剩余工作D. 它跟踪当前版本中剩余的工作<span class="hljs-comment"># D</span><span class="hljs-comment"># 迭代燃尽图并不跟踪当前版本中的工作.</span><span class="hljs-comment"># 虽然一个迭代是一个版本的一部分，但在一个版本中可能有几个迭代计划.</span></code></pre><pre><code class="hljs bash">作为估算活动持续时间过程的一部分，项目经理促成了与产品负责人和Scrum团队的冲刺计划会议.项目经理将用户故事分解为较小的任务项，以小时为单位估算所需时间，并根据团队的能力确定冲刺待办事项列表.尽管计划周密，冲刺还是失败了. 项目经理当初可采取什么样的不同做法？A. 在确定冲刺待办事项列表之前，要求团队为产品待办事项列表设优先级B. 将确定的低级任务分配给项目进度计划中的特定人员C. 授权团队确定他们在冲刺期间可以完成多少用户故事D. 在估算用户故事和任务的大小时，使用故事点而不是小时<span class="hljs-comment"># C</span><span class="hljs-comment"># 敏捷实践指南 页码：P153 章节：术语表.</span><span class="hljs-comment"># 自组织团队：它是一种跨职能团队，</span><span class="hljs-comment"># 其中为实现团队目标团队成员根据需要轮换着发挥领导作用.</span><span class="hljs-comment"># 自组织团队的核心就是做什么事情，团队成员说了算.</span></code></pre><pre><code class="hljs bash">你负责的一个大型项目是在你的城市安装5G互联网中心.尽管大多数项目变量都是清晰的，并且可以使用瀑布方法进行管理，但是技术方面并没有完全定义，并且将随着项目的进展进行详细阐述.发起人要求更频繁和更快地交流项目信息.为了满足发起人的要求，你不会使用以下哪个方法？A. 保持频繁的团队检查点B. 进行有规律的相关方审查C. 实现信息发射源D. 每周传达项目状态<span class="hljs-comment"># D</span><span class="hljs-comment"># 敏捷实践指南 页码：P152 章节：术语表.</span><span class="hljs-comment"># 信息发射源： 它是一种可见的实物展示其向组织内其他成员</span><span class="hljs-comment"># 提供信息在不干扰团队的情况下即时实现知识共享.</span><span class="hljs-comment"># 信息发射源一般包括看板、燃尽图、燃起图、障碍日志等 四个选项中，只有D不够敏捷.</span></code></pre><h4 id="78-文件分析"><a href="#78-文件分析" class="headerlink" title="78.文件分析"></a>78.文件分析</h4><p>文件分析 : 评估<u><strong>现有文件</strong></u>有助于总结经验教训和分享知识, 以改进<u><strong>未来项目</strong></u>和组织资产.<br>新的项目经理针对之前的项目采用文件分析就好了.<br>偏差分析; 回归分析; 趋势分析也都是收尾的工具, 用于总结经验教训. 体现在<strong>之前项目经理</strong>的收尾文件中.</p><pre><code class="hljs bash">一家组织中标获得一个大型施工项目，项目经理得知该组织之前成功完成了一个类似的项目, 希望利用该项目的经验教训.项目经理应该使用哪一种数据分析技术?A. 文件分析B. 偏差分析C. 回归分析D. 趋势分析<span class="hljs-comment"># A</span></code></pre><h4 id="79-风险要素"><a href="#79-风险要素" class="headerlink" title="79.风险要素"></a>79.风险要素</h4><p>概率, 后果和时间表</p><p>单个项目风险的定义, 是一旦发生, 会对一个或多个项目目标产生正面或负面影响的不确定事件或条件.<br>因此, 可以看出来风险是**<u>有概率的</u>**(没概率的是问题), 正面(有威胁)与负面(机会)影响(<strong><u>后果</u></strong>)的同时, 风险是还未发生的(<strong><u>将来的时间表</u></strong>),问题是已发生的(过去的时间表).</p><pre><code class="hljs bash">在项目的下一阶段, 一个建筑师将休三个月的产假, 若要确定这是风险, 问题还是机会的话, 项目经理应该评估下列哪一项?A. 概率和优先级B. 概率, 后果和时间表C. 优先级, 时间表和概率D. 后果和风险状况<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P397-风险的核心概念。</span><span class="hljs-comment"># 单个项目风险的定义：是一旦发生，会对一个或多个项目目标产生正面或负面影响的不确定事件或条件.</span><span class="hljs-comment"># 因此，可以看出来风险是有概率的（没概率的是问题)，正面(威胁)与负面(机会）影响(后果）的同时，</span><span class="hljs-comment"># 风险是还未发生的(将来的时间表），问题是已发生的(过去的时间表). 因此，B最合适.</span></code></pre><pre><code class="hljs bash">一个施工项目位于热带地区，该项目的风险登记册包括雨季洪水的风险，现在雨季已经结束，项目即将完成. 应使用哪一项工具或技术来管理这个风险？A. 风险审查会B. 风险转移C. 风险规避D. 风险审计<span class="hljs-comment"># A</span></code></pre><h4 id="80-整体变更控制"><a href="#80-整体变更控制" class="headerlink" title="80.整体变更控制"></a>80.整体变更控制</h4><p>相关方提出变更后, 如发出邮件”要求变更”. 项目经理和团队和分析变更造成的影响.<br>变更流程 : 先分析影响 -&gt; 获得批准后执行.<br>“在可交付成果的初始版本中需要新功能” -&gt; 提出变更请求.</p><p>供应商无法按时交付成果, 这意味着项目执行和计划将出现偏差, 必须经过<u><strong>变更控制程序</strong></u>来解决.<br>分包商没有收到变更通知, 项目经理需要审查的是<strong>变更管理计划</strong>, 而不是沟通管理计划.<br>因为在整体变更控制程序中有明确的<u><strong>通知相关方</strong></u>的步骤, 需要检查整体变更控制程序是否被严格执行.</p><p>keyword:</p><ul><li>凡变更, 必流程</li><li>动基准, 先变更</li><li>遇蔓延, 找变更</li><li>有变更, 要沟通</li><li>有变更, 要花钱</li><li>有权变, 找变更</li></ul><p>整体变更控制程序 :<br>当变更被批准后, 在新计划实施前, 团队务必要<strong>通知</strong>所有可能受这个变更影响的<u><strong>相关方</strong></u>, 并获得他们的确认.<br>实施整体变更控制, 通过<u><strong>变更</strong></u>的方式对缺陷进行补救.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/010.png" alt="010"></p><p>我们结合历次试题分析，穷尽总结所有变更场景，汇总了以下几类场景和答题技巧：</p><p><u><strong>题干出现这些不选：</strong></u></p><ol><li><strong>拒绝变更：</strong>比如给出ABC理由说不能变，因为按照变更流程所有变更的批准与否必须要经过变更控制委员会（CCB）来决策.</li><li><strong>忽略变更：</strong>比如面对变更继续执行当前范围或计划，理由同上.</li><li><strong>下次再说：</strong>例如强调下次开会处理，下一阶段处理等，理由同上.</li><li><strong>直接实施变更：</strong>比如让团队成员直接执行该变更，理由同上.</li><li><strong>直接更新计划或范围：</strong>比如按变更请求修改计划、范围，按照变更流程，批准的变更才能更新计划或范围.</li></ol><p>变更题目中一般<u><strong>正确的选项</strong></u></p><ol><li>实施整体变更控制：例如团队成员提了个更好的技术方法，可以缩短工期等，此时项目经理该怎么办？</li><li>开始变更请求过程；</li><li>遵循变更管理计划/变更控制程序；</li><li>签发/提交一项变更请求；</li></ol><p><u><strong>变更批准后要选</strong></u>的正确选项:</p><ol><li>更新变更日志/项目管理计划；</li><li>通知相关干系人；</li><li>实施批准过的变更；</li><li>记录经验教训；</li></ol><p><u><strong>变更TIPS:</strong></u></p><p>1、变更无处不在，所以对变更的控制贯穿项目始终，而项目经理对所有变更应对负最终责任；<br>2、所有变更请求，不论大小，不论批准与否，都应书面记录；<br>3、PMP考试里<u><strong>默认所有的变化都要走变更流程</strong></u>，而不仅仅是基准的变更（大数据统计分析的结果）；<br>4、只要项目收尾没有完成，任何人都可以提出变更请求，且变更请求都需要处理；<br>5、如果是<u><strong>项目章程的变更</strong></u>，或者是项目收尾后提出的变更，需要当成<u><strong>一个新项目去处理</strong></u>，而不是简单的走变更流程.</p><pre><code class="hljs bash">在一个项目即将完成时, 一位相关方被替换, 项目团队正在忙着完成剩余几项需求的开发, 项目经理与新相关方的第一次会议安排在下周, 但该相关方已经发送了几封邮件, 要求变更已经实施的要求, 项目经理下一步应该怎么做?A. 通知该新相关方, 在项目后期变更需求将导致成本和进度超支B. 与团队讨论所请求的变更, 并确定将其纳入最终可交付成果的影响C. 要求管理层一起参加与该新相关方的会议, 以讨论该问题D. 通知该新相关方无法实施所请求的变更, 因为它们未包含在已批准的范围内<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)4.6 实施整体变更控制.</span><span class="hljs-comment"># 相关方发出邮件&quot;要求变更”，相关方提出变更后，项目经理和团队和分析变更造成的影响.</span><span class="hljs-comment"># ACD - 都不是正确的变更流程方式，是典型的错误.</span></code></pre><pre><code class="hljs bash">项目经理正在准备一份定期状态报告, 这时营销高管告知他们竞争对手推出了令人兴奋的新功能.该高管表示, 营销部门在项目可交付成果的初始版本中需要这一新功能.项目经理应该怎么做?A. 要求对新功能进行执行审查, 并确保审查项目范围和批准B. 向团队提交此新功能并在状态报告中记录范围变更C. 在状态报告中包含此信息, 并指出包含新功能将需要范围变更D. 通知营销部门, 项目团队将考虑该请求并在之后做出决定<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)4.6 实施整体变更控制.</span><span class="hljs-comment"># &quot;在可交付成果的初始版本中需要新功能&quot;，表示是在提出变更请求，</span><span class="hljs-comment"># 需要走变更流程，先分析影响，获得批准后执行.选择A.</span><span class="hljs-comment"># B - 直接实施不对.</span><span class="hljs-comment"># C - 仅在状态报告更新意义不大.</span><span class="hljs-comment"># D - 涉及到可交付成果的变更需要提交CCB审批，项目团队不能做决定.</span></code></pre><pre><code class="hljs bash">项目经理得知一位职能经理要求一名团队成员提供一个新功能. 项目经理应该怎么做?A. 向变更控制委员会(CCB)提交一份变更请求B. 询问职能经理为什么应该添加该功能C. 确定是否有可用的新资源来添加该功能D. 要求他们提供是否可以在不影响时间表的情况下实施的意见<span class="hljs-comment"># B</span><span class="hljs-comment"># A 缺少了评估环节</span><span class="hljs-comment"># C 属于评估的环节, 在B之后</span><span class="hljs-comment"># D 备选方案分析同样属于评估环节, 在B之后</span></code></pre><pre><code class="hljs bash">一家供应商告知项目经理, 他们所负责的可交付成果将延迟两周交付. 项目经理应该怎么做?A. 执行挣值分析B. 实施整体变更控制程序C. 审查采购合同中的违约条款D. 实施进度压缩技术<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">在项目执行阶段, 批准了一项监管法律, 责令立即遵守, 这项法律将影响项目的范围, 进度和成本, 项目经理首先应该做什么?A. 减轻风险B. 更新项目管理计划C. 将问题升级上报给高级管理层D. 开始变更请求过程<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">在项目的最后一个星期, 一场飓风导致影响项目的交付日期, 项目经理应该怎么做?A. 使用储备分析技术B. 更新风险登记册C. 提交变更请求D. 将其报告给项目发起人<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">一名工程师在没有提交变更请求的情况下, 完成一名项目相关方的可交付成果变更要求. 项目经理应该怎么做?A. 获得为何进行变更的相关信息B. 审查变更的影响, 并提交变更请求C. 更新问题日志D. 指示该工程师撤销变更<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">项目经理准备收尾一个项目的第四阶段, 但是一位相关方拒绝向前推进项目, 除非增加一个范围之外的功能, 项目经理下一步应该怎么做?A. 开始变更请求过程B. 增加该功能C. 审查相关方登记册D. 与项目相关方会面<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P166 章节：5.5.3.3 变更请求.</span><span class="hljs-comment"># 对已经完成但未通过正式验收的可交付成果及其未通过验收的原因，应该记录在案.</span><span class="hljs-comment"># 可能需要针对这些可交付成果提出变更请求，开展缺陷补救.</span><span class="hljs-comment"># 客户不验收，只能推迟实施，再提交变更.</span></code></pre><pre><code class="hljs bash">项目经理与客户开会, 以协调一个大型项目. 在会议期间, 客户要求变更范围.项目经理首先应该做什么?A. 建议客户提交一份正式的变更请求B. 启动范围变更, 以维持良好的客户关系C. 分析并评估这些变更的影响D. 拒绝这些变更, 因为它们不包含在项目范围说明中<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">项目受到一个未预料的风险的影响, 迫使项目经理执行一个权变措施, 但是权变措施作用有限, 这种情况将影响到需求的达成, 项目经理应该怎么做?A. 将影响归档为质量偏差B. 将该案例团队专家判断C. 提出变更请求D. 进行敏感性分析<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">变更控制委员会(CCB)已经批准了对关键技术方案的调整. 在实施新的计划前, 团队应该做什么?A. 更新变更日志B. 更新经验教训登记册C. 更新项目基准D. 通知相关方做出相应调整<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">项目的分包商因为没有及时收到变更通知而按原计划实施项目. 结果不得不返工. 这种情况不止出现一次, 而且涉及多家分包商. 项目经理应该怎么办?A. 审查沟通管理计划, 确保沟通方式得当B. 审查相关方参与计划, 确保分包商适当的参与C. 审查风险管理计划, 确保相关的风险得到管理D. 审查变更管理计划, 确保变更流程正确且被严格遵守<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">项目经理发现, 项目计划更新后, 新版本的计划也已正式发布, 其中一些分包商仍然在参照旧的项目计划工作.这种情况已经不止一次出现, 项目经理应该怎么做?A. 审查沟通管理计划B. 对这些分包商进行项目绩效审查C. 审查整体变更控制程序D. 审查相关方参与计划<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">突然增加的需求导致团队超负荷工作, 士气下降, 而且冲突不断爆发.项目经理意识到再这样下去, 项目将无法按期交付. 如果要避免这种局面发生, 项目经理事先应该做什么?A. 通过需求评审, 确保增加的需求都是必要的B. 任何范围变更都应严格遵循整体变更控制程序C. 确保项目预留了足够的应急储备D. 确保这类风险已被提前识别并规划了应对措施<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">一家供应商提出, 可以将设备免费升级为性能更好的新型号, 项目经理应该怎么做?A. 拒绝供应商的好意, 请供应商按合同规定的老型号供货B. 接受供应商的建议, 并更新设备的验收标准C. 执行成本效益分析, 评估新型号给项目带来的效益D. 发起一项变更, 并遵循整体变更控制程序<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">一个营销团队负责一家组织的所有外部沟通, 该团队很快将向客户沟通新产品的发布日期, 同时, 技术团队在没有通知营销团队的情况下对发布活动进行变更.若要确保有效沟通, 项目经理应该怎么做?A. 提醒团队所有变更都必须遵循沟通管理计划B. 通知技术主管遵循变更管理程序C. 鼓励两个团队在项目团队会议期间讨论沟通问题D. 为两个团队组织沟通培训<span class="hljs-comment"># B</span><span class="hljs-comment"># 情景的核心问题出现在没有遵循整体变更控制程序, 而不是没有通知, </span><span class="hljs-comment"># 所以要提醒技术主管遵循变更管理程序, 而不是强化沟通管理.</span></code></pre><pre><code class="hljs bash">项目第一阶段符合进度计划，且接近完成. 第二阶段取决于第一阶段的完成. 技术团队发现一个缺陷，且项目经理确定必须修补这个缺陷才能继续项目.项目经理首先应该怎么做？A. 变更项目管理计划, 在不影响进度计划的情况下包含缺陷修补工作B. 向变更控制委员会(CCB)提交变更请求, 供其审查和批准C. 与项目团队开会, 审查发现结果, 并确定所需的下一步行动D. 将修补工作添加进风险登记册, 并重新计算成功概率<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P113-4.6实施整体变更控制.</span><span class="hljs-comment"># 通过变更的方式对缺陷进行补救.</span><span class="hljs-comment"># AC - 需要通过变更管理来处理缺陷.</span><span class="hljs-comment"># D  - 先解决暴露出来的问题，如果仍然遗留再次出现的可能，</span><span class="hljs-comment">#      要将其列入风险登记册进行跟踪.</span></code></pre><pre><code class="hljs bash">下列哪一项配置管理活动属于执行整体变更控制过程的组成部分?A. 将实际项目绩效与项目管理计划进行对比B. 更新项目范围说明书C. 确定并记录项目产品的功能和物理特性D. 核实可交付成果的完成程度<span class="hljs-comment"># B</span><span class="hljs-comment"># 变更被批准后需要更新计划和项目文件, 计划本身也是配置管理的对象.</span><span class="hljs-comment"># 通过配置管理, 保证计划的版本的正确性和有效性.</span></code></pre><pre><code class="hljs bash">项目执行期间, 项目经理发现其中一家供应商提供的设备无法满足项目的需求经过评估, 必须更换另外一家供应商, 那么项目经理应该先做什么?A. 准备一份变更请求, 以获得对更换供应商的批准B. 与新的供应商谈判并签署采购合同C. 将此信息更新到风险登记册和问题日志中D. 与原供应商谈判, 对变更补偿达成一致<span class="hljs-comment"># A</span><span class="hljs-comment"># 更换供应商属于典型的变更, 可能影响工期, 质量, 成本等诸多要素.</span><span class="hljs-comment"># 所以必须走整体变更控制程序</span></code></pre><pre><code class="hljs bash">在一个项目的最终阶段，一位关键相关方提出对主要可交付成果的新改进意见团队不同意进行改进。项目经理应该怎么做？A. 将该情况记录在风险登记册中B. 提交变更请求C. 审查沟通管理计划D. 审查变更管理计划<span class="hljs-comment"># B</span><span class="hljs-comment"># 对可交付成果的改进通常会影响到范围基准。所以此时无论团队同意与否，都要提交给CCB进行审批.</span><span class="hljs-comment"># A - 在面对是先解决当前问题还是先做为风险识别的时候，要先解决已经出现的问题，再去对不确定性进行管理.</span><span class="hljs-comment"># C - 虽然在变更管理的过程中存在着信息的传递，但是变更管理的重点在于流程和审批权限.</span><span class="hljs-comment"># D - 变更管理没有出现问题，所以问题的焦点不在于变更管理计划是否合理上.</span></code></pre><pre><code class="hljs bash">一家公司中的某个政府机构的合同. 原来的计划是针对一个具有固定范围的小项目.之后，在项目执行期间，其他政府机构开始提出变更请求，导致需求冲突.但是，这些变更请求中有一部分是遵守新法律的必要条件。项目经理应该怎么做？A. 将该问题升级上报给变更控制委员会(CCB), 并召集所有相关方以确定需求清单的优先顺序B. 更新相关方参与计划，以包含其他政府机构并更新变更日志C. 按原始范围完成项目，并要求管理层启动其他项目来处理这些变更请求D. 要求变更控制委员会批准优先级排序并将强制性变更纳入范围<span class="hljs-comment"># A</span><span class="hljs-comment"># 由法律法规所产生的变更需求是必须执行的，排除选项C.</span><span class="hljs-comment"># 另外与之前的需求产生冲突，所以必须上报给CCB.</span><span class="hljs-comment"># 有同学会比较纠结选项A为什么要召集所有的相关方来确定清单的优先顺序，这处说法是存在着瑕疵的.</span><span class="hljs-comment"># 但总体上仍然要比其它几个选项更为精准，这就是PMP考试的风格，要能够适应.</span><span class="hljs-comment"># B - 首先问题的焦点在于怎么处理变更请求，另外变更尚未审批，就更新变更日志是不对的.</span><span class="hljs-comment"># D - 变更请求提交后，按照流程进行审批，不能由项目经理来决策.</span></code></pre><pre><code class="hljs bash">一名严苛的项目相关方坚持要增加项目需求. 项目经理希望满足该请求.但是许多需求超出预算并与商业需求不一致. 项目经理应该怎么做？A. 仅批准符合预算并与商业需求一致的请求B. 将请求提交给变更控制委员会(CCB)C. 与项目发起人开会，根据项目范围说明书评审请求D. 拒绝请求，并通知项目相关方<span class="hljs-comment"># B</span><span class="hljs-comment"># 变更请求已经影响到了成本基准，所以需要由CCB做出决策.</span><span class="hljs-comment"># AD - 项目经理无权决策.</span><span class="hljs-comment"># C  - 评估的内容局限在了对范围基准的影响，变更请求对项目的影响往往是连锁反应.</span><span class="hljs-comment">#      影响了范围基准，也可能会影响到进度基准，何况题目中已经提到的&quot;超出预算&quot;.</span></code></pre><pre><code class="hljs bash">两家公司之间的并购项目正处于启动阶段，显然这个项目对这两个组织产生影响. 若要确保项目成功，发起人应关注下列哪一项？A. 明确定义项目目标，优先事项和战略B. 预算C. 沟通管理计划D. 变更管理计划<span class="hljs-comment"># A</span><span class="hljs-comment"># 整合 -&gt; 制定项目章程.</span><span class="hljs-comment"># &quot;启动阶段&quot;、&quot;若要确保项目成功&quot;，需要根据组织战略明确项目的目标.</span><span class="hljs-comment"># 分析项目的高层次需求、高层次风险和制约因素. </span><span class="hljs-comment"># BCD - 在规划阶段输出.</span></code></pre><pre><code class="hljs bash">一个项目已经进行了六个月，这时有人意识到由于最近批准的所需准确度方面的变更.成本管理计划不再有效，项目经理应该怎么做？A. 要求团队审查并修订成本管理计划B. 促成一次团队会议，以审查工作分解结构(WBS)分析每个工作包并更新成本C. 召开一次团队会议，以讨论变更并带领团队更新成本管理计划D. 与团队一起审查此变更对预算的影响，并确定是否有必要对成本管理计划进行变更<span class="hljs-comment"># D</span><span class="hljs-comment"># 由于受到前一个变更请求的影响，成本管理计划不再有效，那么该如何处理.</span><span class="hljs-comment"># 首先要对问题进行评估，如果有必要对成本管理计划进行更新的话，提交变更请求.</span><span class="hljs-comment"># AC - 对成本管理计划的更新要通过变更的方式来实施.</span><span class="hljs-comment"># B  - 情景中提到的是成本管理计划不再有效，不是成本基准不再有效.</span></code></pre><pre><code class="hljs bash">一个项目正在执行当中，这时一些变更引起团队的注意.这些变更是必要的，但每个人对于他们认为正确的事情都有不同意见, 项目经理应该怎么做？A. 确保整个团队和相关方理解并遵循变更管理计划B. 与项目发起人和董事会开会解决这个问题C. 与团队成员来开会审查这个问题，并在需要时请求变更D. 对项目实施所有请求的变更，并与团队沟通<span class="hljs-comment"># A</span><span class="hljs-comment"># 情景中项目团队成员比较困惑的是如何处理这些变更，所以有必要强调变更管理计划，</span><span class="hljs-comment"># 也就是处理变更请求的流程和审批权限.</span><span class="hljs-comment"># B - 有流程的时候要首先遵循流程，如果流程失效，再对问题问题进行分析解决，</span><span class="hljs-comment">#     另外要注意参与问题分析的相关方.</span><span class="hljs-comment"># C - 变更请求是必要的，所以&quot;需要时请求变更&quot;产生了矛盾.</span><span class="hljs-comment"># D - 不经批准就实施是错误的.</span></code></pre><pre><code class="hljs bash">项目经理确定项目已超出预算，并将需要管理储备来完成项目.为完成项目，项目经理应该怎么做？A. 获得项目发起人批准使用管理储备B. 修改成本基准并使用管理储备C. 获得项目发起人的批准，包含额外资金D. 执行实施整体变更控制过程，并修改成本基准<span class="hljs-comment"># D</span><span class="hljs-comment"># 首先要了解成本基准中包括了应急储备而没有包括管理储备，</span><span class="hljs-comment"># 所以一旦动用管理储备，则成本基准发生变化.</span><span class="hljs-comment"># 动用管理储备是一项变更请求，需要通过整体变更控制流程来实施.</span><span class="hljs-comment"># AC - 涉及基准的变更由CCB进行审批.</span><span class="hljs-comment"># B  - 未经变更控制流程就修改成本基准是错误的.</span></code></pre><pre><code class="hljs bash">项目落后于进度. 项目团队发现，通过应用一个替代方法，他们可以加快关键路径上的一个项目可交付成果.然而，这将增加项目成本. 项目经理应该怎么做?A. 增加额外的项目资源B. 对所有方法开展预期货币价值分析(EMV)C. 获得替代方法的批准D. 将增加的成本更新到项目预算中<span class="hljs-comment"># C</span><span class="hljs-comment"># 变更流程：变更提出后，先分析影响，再提交含解决措施的变更请求给CCB. </span><span class="hljs-comment"># 审批前，三步骤：提出变更-分析影响-提交审批.</span></code></pre><pre><code class="hljs bash">一名指导委员会成员提交了一项新请求，这项请求似乎没有得到充分考虑. 可能会对项目产生负面影响.项目经理下一步应该怎么做？A. 评估该请求的影响B. 记录该请求，并将其提交给变更控制委员会(CCB)C. 要求支持的成员说服该指导委员会成员撤回请求D. 拒绝该请求，并告知该指导委员会成员拒绝的原因<span class="hljs-comment"># A</span><span class="hljs-comment"># 变更请求已经提交，接下来要对变更请求进行评估.</span><span class="hljs-comment"># &quot;似乎没有充分考虑&quot;、&quot;可能产生负面影响&quot;并不是评估结果，</span><span class="hljs-comment"># 而是某位项目团队成员的主观认识，所以直接拒绝该变更请求是错误的，排除CD.</span><span class="hljs-comment"># B - 要根据对变更请求的结果来判断是否提交给CCB进行决策，在选项A之后.</span></code></pre><pre><code class="hljs bash">相关方审核并批准了项目管理计划.在测试和确认阶段，其中一位关键相关方对某项需求提出顾虑.辩称需要进行一项变更，但该变更与项目范围不符.项目经理应该做什么？A. 提出变更请求B. 审查变更管理问题日志C. 从紧急情况预算中划拨资金D. 将该变更告知指导委员<span class="hljs-comment"># A</span><span class="hljs-comment"># P113-4.6实施整体变更控制.</span><span class="hljs-comment"># 虽然&quot;该变更与项目范围不符&quot;.</span><span class="hljs-comment"># 这也是一项变更请求，需要通过整体变更控制流程进行分析评估.</span><span class="hljs-comment"># B - 变更日志和问题日志合并成了一个臆造词汇.</span><span class="hljs-comment"># C - 属于通过评估后可能做出的决策.</span><span class="hljs-comment"># D - 如果该变更请求确有必要且影响到了基准，那么需要由CCB做出审批.</span></code></pre><pre><code class="hljs bash">在项目执行过程中，一位相关方要求一名团队成员执行与项目无关的紧急任务，团队成员执行了该请求，导致其项目相关活动延后，项目经理在一次状态报告会上得知这一情况，项目经理应该怎么做？A. 要求该团队成员加班去弥补损失的时间B. 通知相关方预期交付期限无法满足C. 强调遵循沟通管理计划的重要性D. 建议重新规划项目活动<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK 6th 页码：P229 章节：6.6.3.3 变更请求.</span><span class="hljs-comment"># 通过分析进度偏差，审查进展报告、绩效测量结果和项目范围或进度调整情况，</span><span class="hljs-comment"># 可能会对进度基准、范围基准和/或项目管理计划的其他组成部分提出变更请求.</span><span class="hljs-comment"># 应该通过实施整体变更控制过程（见 4.6 节）对变更请求进行审查和处理.</span><span class="hljs-comment"># 预防措施可包括推荐的变更，以消除或降低不利进度偏差的发生概率. </span><span class="hljs-comment"># 进度已经延迟，需要提出变更请求，重新规划活动.</span></code></pre><pre><code class="hljs bash">在定义活动过程中，一团队成员开始讨论一个项目经理从来没有听过的活动.此时项目经理应该怎么做?A. 确保团队成员理解并将这些活动包含在活动清单里了B. 询问团队成员需要完成这些活动的原因C. 确认所有团队成员都认同这些活动D. 评估变更的影响<span class="hljs-comment"># B</span><span class="hljs-comment"># 6.2.3.4-变更请求</span><span class="hljs-comment"># 渐进明细的过程中，会有新的活动进来，先了解分析，必要时变更.</span></code></pre><pre><code class="hljs bash">在桥梁建设项目中，项目经理正在监督和控制项目构件的各种变化.下列哪一项最可能需要经过批准的变更请求才能进行变更?(选择四个)A. 有人建议将预测式开发方法改为混合开发方法B. 项目的运行超出了预算，需要修改成本基线以反映实际情况C. 项目发起人想要向配置管理计划添加一个文档D. 几项任务的修订状态需要反映在项目进度表中E. 一名高级主管建议更新项目生命周期描述，以增加一个阶段F. 刚刚确定了一个新的利益相关者，需要将其添加到利益相关者登记册中<span class="hljs-comment"># ABCE</span><span class="hljs-comment"># 4.6-实施整体变更控制</span><span class="hljs-comment"># 在基准确定之前，变更无需正式受控于实施整体变更控制过程.</span><span class="hljs-comment"># 不涉及基准一般不用审批.</span><span class="hljs-comment"># D - 任务状态不需要审批.</span><span class="hljs-comment"># F - 相关方登记册一般不给相关方审批.</span></code></pre><pre><code class="hljs bash">在规划阶段审查项目管理计划时, 发起人表示他们希望通过删除一些需求来减少预算，项目经理应该做什么?A. 与相关方讨论,以确定此范围变更是否可行B. 签发变更请求，以减少项目范围C. 更新计划，仅包含新的需求集D. 执行成本效益分析,以确定实际可以删除哪些需求<span class="hljs-comment"># A</span><span class="hljs-comment"># P113章节：4.6 </span><span class="hljs-comment"># 在基准确定之前，变更无需正式受控于实施整体变更控制过程.</span><span class="hljs-comment"># 先讨论，然后再做出决策.</span></code></pre><pre><code class="hljs bash">在生产了一些项目可交付成果之后，项目集经理将其中两个项目团队成员转移到优先级更高的项目中，并为你提供替换选项. 新的团队成员缺乏担任角色的经验，而你意识到不再可以达到绩效测量基准.你必须采取以下哪些操作？(选择两项)A. 提交变更请求以修改项目基准B. 修订项目团队的分配以适应人员变动C. 更新汲取的经验教训知识库以反映任何新的最佳实践D. 调整WBS和WBS词典以反映新的任务<span class="hljs-comment"># AB</span><span class="hljs-comment"># P112章节：4.5.3.2</span><span class="hljs-comment"># 变更请求：通过比较实际情况与计划要求，可能需要提出变更请求，</span><span class="hljs-comment"># 来扩大、调整或缩小项目范围与产品范围或者提高、调整或降低质量要求和进度或成本基准</span><span class="hljs-comment"># 提交变更，修定基准，和资源管理计划.</span></code></pre><pre><code class="hljs bash">一个优化项目的项目经理认为范围管理计划已完成．他已经制定并准备最终确定工作分解结构(WBS).一位关键相关方识别到一项他认为被忽视并且应纳入范围的新需求.如果不解决这个问题，项目将失败. 项目经理应该做什么？A. 咨询变更控制委员会(CCB)B. 将需求纳入项目中C. 将该问题升级上报给项目发起人决策D. 评估有关时间,成本以及预算的需求<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK 6th 页码：P115 章节：4.6 </span><span class="hljs-comment"># 在基准确定之前，变更无需正式受控于实施整体变更控制过程.</span><span class="hljs-comment"># 基准还没确定，重要的需求可以直接考虑纳入.</span></code></pre><pre><code class="hljs bash">一家公司已与一家水电站签订了软件开发合同.项目管理计划指定Scrum作为开发方法.在项目的几次沖刺阶段，监管机构通知执行机构，由于新的环境法，原本不包括在范围基准中的安全功能将需要被内置到软件中.项目经理的最佳行动方案是什么？A. 发出变更请求以更新项目管理计划，一旦获得批准，确保范围基准得到更新B. 与产品负责人进行根本原因分析，以确定为安全功能最初未包含在范围中的原因C. 使用MoSCoW优先级模型来梳理范围基准，并将新的安全功能分类为<span class="hljs-string">&quot;应具有&quot;</span>D. 在冲刺计划期间与团队讨论新功能，如果团队同意请他们在下次冲刺中实现功能<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P113 章节：4.6变更流程:</span><span class="hljs-comment"># 变更提出后，先分析影响，再提交含解决措施的变更请求给 CCB.</span><span class="hljs-comment"># 存在范围基准，说明使用了混合方法改变了范围基准，需要提交变更请求.</span></code></pre><pre><code class="hljs bash">一家公司正在几个国家部署一个新的解决方案,已包含安全审计作为每次部署的质量检查组成部分.第一次部署后进行的安全审计结果发现了违反安全的行为以及不合规问题.项目经理应该做什么？A. 组织团队研讨会以执行根本原因分析并定义纠正措施计划B. 审查质量管理计划，以确认是否包含安全要求C. 与安全审计员协商降低已发现问题的重要性D. 验证质量要求与解决方案是否一致，并更新质量管理计划<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P296 章节：8.2.3.3变更请求：</span><span class="hljs-comment"># 如果管理质量过程期间出现了可能影响项目管理计划任何组成部分、</span><span class="hljs-comment"># 项目文件或项目/产品管理过程的变更，</span><span class="hljs-comment"># 项目经理应提交变更请求并遵循 4.6 节定义的实施整体变更控制过程.</span><span class="hljs-comment"># 安全问题与不合规问题必须纠正，否则项目不会成功.</span></code></pre><pre><code class="hljs bash">准备验收文件时，项目经理意识到未能包含两个功能.开发人员表示，虽然这些功能不完整，但客户不会注意到.公司需要为该开发项目开具发票并收取付款，以支付未来六个月的工资.项目经理应该怎么做？A. 根据开发人员的意见准备验收文件B. 在准备验收文件之前包含这些功能C. 审查需求管理计划D. 提交变更请求<span class="hljs-comment"># D</span><span class="hljs-comment"># 控制范围.</span><span class="hljs-comment"># 验收时发现范围没完成，需要提交变更来完成，这是职业道德问题.</span><span class="hljs-comment"># A - 道德有问题.</span><span class="hljs-comment"># B - D后面</span><span class="hljs-comment"># C - 不用审查</span></code></pre><pre><code class="hljs bash">一个数据项目中心项目发起人识别到一个通过升级设备技术降低运营成本的机会，这项升级将使项目成本增加12%. 该发起人提交了变更请求并遵循变更管理计划，而且变更控制委员会批准了该变更. 但是在更新记录计划时，公司首席财务官(CFO)要求项目经理放弃这项变更. 项目经理下一步应该怎么做？A. 分配该变更进行实施，并遵循规划沟通管理过程B. 放弃该变更，并与相关方沟通，不会采取任何行动C. 拒绝该变更，并要求首席财务官与变更控制委员会沟通此事D. 说服首席财务官，可以在不增加预算的情况下实施该变更<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)4.6实施整体变更控制.</span><span class="hljs-comment"># 该变更&quot;变更控制委员会(CCB)批准了&quot;, 后面就是通知相关方，并开始执行变更,</span><span class="hljs-comment"># 而通知相关方需要按照沟通管理计划进行，A最合适.</span><span class="hljs-comment"># BC - 都听了CFO的，不正确.</span><span class="hljs-comment"># D  - 题目已经明确说明了该变更将会增加成本，以不增加预算的理由说服CFO不切实际.</span></code></pre><pre><code class="hljs bash">一个设施改善项目即将完成. 客户提供了批准，但注意到一些小缺陷并激活保修程序客户现在对已移交的设备要求额外批准的范围.项目经理即将开始额外范围的工作. 由于保修程序已生效，项目经理应查阅哪一份计划？A. 质量管理计划B. 变更管理计划C. 采购管理计划D. 需求管理计划<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P113-4.6实施整体变更控制.</span><span class="hljs-comment"># 额外批准的范围，要遵循整体变更控制流程.</span><span class="hljs-comment"># A - 描述述如何实施适用的政策、程序和指南以实现质量目标.</span><span class="hljs-comment"># C - 采购管理计划包含要在采购过程中开展的各种活动.</span><span class="hljs-comment"># D - 描述将如何分析、记录和管理项目和产品需求.</span></code></pre><pre><code class="hljs bash">项目经理负责管理一个项目，该项目旨在推出一项新服务，项目经理得知，技术部门对于使用已提供的培训来操作这项服务感到不自信.项目经理首先应该怎么做？A. 完成一项变更控制要求并将该问题纳入经验教训中B. 建议团队与指定的相关方一起审查验收标准C. 将可交付成果转移给对操作这项服务更有信心的另一团队D. 停止项目以确认操作员对接受的培训感到满意<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P120，4.6.3.3-项目文件更新.</span><span class="hljs-comment"># &quot;新服务&quot;是项变更请求，要通过整体变更控制来对范围进行变更，</span><span class="hljs-comment"># 技术部门不自信的问题可以做为经验教训进行记录.</span><span class="hljs-comment"># B - 尚未进入验收环节，另外验收标准是以范围基准为基础生成的，尚未变更，审查验收标准没有意义.</span><span class="hljs-comment"># C - 对于不自信的问题可以通过调整培训的方式来解决.</span><span class="hljs-comment"># D - 停止项目过于极端.</span></code></pre><pre><code class="hljs bash">在项目测试阶段检测到一个故障. 在未通知项目经理的情况下，测试人员分析该故障并与开发团队一起合作解决该故障.由于缺乏沟通，项目经理继续遵循初始定义的测试时限.项目经理现在应该怎么做？A. 更新问题日志，并确定纠正措施B. 忽略该故障，因为已经解决了C. 签发变更请求，并遵循变更过程D. 打印更新后收尾测试计划，并确定纠正措施<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P113-4.6实施整体变更控制.</span><span class="hljs-comment"># 需要对问题进行分析，如有必要，补走变更控制流程.</span><span class="hljs-comment"># 针对故障的变更类型一般为“缺陷补救”.</span><span class="hljs-comment"># AD - &quot;纠正措施&quot;通常针对的是项目绩效表现不佳.</span><span class="hljs-comment"># B  - 对故障的解决要遵循整体变更控制流程, 否则会造成信息不同步的一系列问题.</span></code></pre><pre><code class="hljs bash">在项目的规划阶段,一位关键相关方通知项目经理在制定项目章程过程中未考虑一项需求.这一新需求极大地改变关键可交付成果. 项目经理应该做什么?A. 收集有关该需求的更多详细信息,并启动一个新项目来解决该需求B. 该相关方保证将考虑他们的意见,并保证他们参与项目C. 告知该相关方该需求超出范围D. 通知发起人并添加该需求<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P113，4.6-实施整体变更控制.</span><span class="hljs-comment"># 将新需求添加到范围基准，需要遵循整体变更控制流程.</span><span class="hljs-comment"># B  - 当前问题的焦点不是相关方对于项目的影响.</span><span class="hljs-comment"># CD - 未经对变更请求的评估，直接实施还是直接拒绝变更请求都是错误的.</span><span class="hljs-comment"># A  - 直接启动一个新项目并不是很恰当，但至少经过了评估这一关键环节，</span><span class="hljs-comment">#      在4个选项中属于最优解. 在4个选项中选择最优解是PMP考试的风格，要能够灵活掌握.</span></code></pre><pre><code class="hljs bash">项目执行六周后，一位关键相关方请求一项变更.相关方指出这一请求应作为高度优先请求对待.项目经理下一步应该怎么做？A. 指示团队实施B. 检查范围说明书以确定变更是否符合范围C. 寻求专家建议，以更好地了解和评估该变更的重要性D. 向变更控制委员会(CCB)签发一份变更请求，并沟通其优先级<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK(6)P113，4.6-实施整体变更控制.</span><span class="hljs-comment"># 对变更的管理要遵循整体变更控制流程，由于相关方要求&quot;高度优先请求对待&quot;，</span><span class="hljs-comment"># 所以可以沟通变更请求的优先级.</span><span class="hljs-comment"># A - 未经批准即实施错误.</span><span class="hljs-comment"># B - 只评估了变更请求对范围的影响，存在缺失.</span><span class="hljs-comment"># C - 包含在了D选项当中.</span></code></pre><pre><code class="hljs bash">一个软件升级项目的首席开发人员提出一些增强功能建议，认为这些增强功能会改进项目整体实施和最终用户体验.项目经理应该怎么做？A. 提交变更请求B. 确定对进度计划和成本的影响，评估该变更的可行性C. 与项目相关方开会，确定是否应该包含这些增强功能D. 批准建议的增强功能<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)4.6 实施整体变更控制</span><span class="hljs-comment"># &quot;开发人员”是内部人员，团队内部提出变更(发现问题)，</span><span class="hljs-comment"># 现分析影响，然后再提交变更.</span><span class="hljs-comment"># 其他选项: 先B再A，然后考虑C，D.</span></code></pre><pre><code class="hljs bash">一个组织正在严格的时间限制下进行重大的技术升级，项目团队由内部和外部相关方、职能经理、顾问和供应商组成，其中一位关键职能经理提出多项项目变更。项目经理应该怎么做？A. 将建议的变更纳入项目中B. 询问顾问如何实施这些变更C. 向相关方咨询建议的变更D. 要求供应商对这些变更报价<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)4.6 实施整体变更控制.</span><span class="hljs-comment"># &quot;提出多项项目变更&quot;，明显的变更题，走变更流程，变更提出以后，要先分析影响.</span><span class="hljs-comment"># C - 可以理解为实施整体变更控制的工具-专家判断.</span><span class="hljs-comment"># A - 蔓延了，B也是直接问如何实施是不对的.</span><span class="hljs-comment"># D - 也都直接实施了，排除法选C更合适.</span></code></pre><pre><code class="hljs bash">项目进展顺利, 关键绩效指标(KPI)为正数,这时出现了新的市场需求, 需要在范围中添加额外的功能.项目经理应该做什么?A. 拒绝额外的功能,以保持项目正常进行B. 创建一个单独的项目,以解决市场需求C. 与变更控制委员会(CCB)一起审查市场需求D. 在范围中包含额外的功能<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK 6th 页码：P113 章节：4.6 变更流程.</span><span class="hljs-comment"># 变更提出后，先分析影响，再提交含解决措施的变更请求给CCB.</span><span class="hljs-comment"># 审批前，三步骤提出变更-分析影响-提交审批.</span></code></pre><h4 id="81-监督相关方参与"><a href="#81-监督相关方参与" class="headerlink" title="81.监督相关方参与"></a>81.监督相关方参与</h4><p>监督相关方参与是监督项目相关方关系, 并通过修订参与策略和计划来引导相关方合理参与项目的过程.<br>本过程的主要作用: 随着项目进展和环境变化, 维持或提升相关方参与活动的效率和效果.</p><pre><code class="hljs bash">在一个项目中途, 项目团队意识到他们低估了交付一部分产品的工作.因此该项目将推迟两个月. 项目经理下一步应该怎么做?A. 与项目发起人沟通该推迟情况, 并请求批准新的交付日期B. 修改相关方参与计划以反映该变更, 并请求相关方的批准C. 通知相关方并管理他们的期望D. 修改风险管理计划以反映该变更, 并请求相关方的批准<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P530-13.4 监督相关方参与.</span><span class="hljs-comment"># 项目已经延迟可能会引起相关方的不满，因此要管理相关方的期望.</span><span class="hljs-comment"># A - 只与发起人沟通不妥.</span><span class="hljs-comment"># B - 在C后面.</span><span class="hljs-comment"># D - 风险管理计划没必要.</span></code></pre><pre><code class="hljs bash">由于缺乏相关方的支持, 虽然项目和预算均已获得批准, 但项目经理无法获得资源. 项目经理应该做什么?A. 将问题升级上报给上级管理层B. 执行相关方分析,并举行开工会议,让相关方参与其中C. 在下一次项目状态会议上要求相关方提供更好的支持D. 将问题和减轻计划添加到风险日志中,并通知发起人<span class="hljs-comment"># B</span><span class="hljs-comment"># P504 13 引导相关方参与.</span><span class="hljs-comment"># 为提高成功的可能性，应该在项目章程被批准、项目经理被委任，</span><span class="hljs-comment"># 以及团队开始组建之后，尽早开始识别相关方并引导相关方参与.</span><span class="hljs-comment"># 尽早地识别，并引导相关方参与，可以提高项目成功的可能性.</span></code></pre><pre><code class="hljs bash">为限制项目变更的数量，项目经理制定了严格的变更管理计划，只允许批准减轻重大潜在或风险的变更，一位团队成员提出了一个范围变更，该变更将消除对一个落后于进度计划的依赖关系. 项目经理应该怎么做？A. 与发起人和外部项目经理讨论提议的变更B. 拒绝该变更，因为根据变更管理计划应避免所有变更C. 接受该变更，因为这是一项预防措施D. 同意该变更，因为这是一项纠正措施<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P113-4.6实施整体变更控制.</span><span class="hljs-comment"># 要对变更请求进行评估，但是和“发起人和外部项目经理讨论并不是很严谨，</span><span class="hljs-comment"># 没有交代是否发起人和外部项目经理是否是CCB的成员. </span><span class="hljs-comment"># 对于这道题目重点掌握整体变更控制流程，忽略瑕疵.</span><span class="hljs-comment"># B  - 变更管理计划是对变更加以控制，而不是拒绝变更.</span><span class="hljs-comment"># CD - 根据选项A评估的结果，才能做出接受/同意/拒绝的决策.</span></code></pre><pre><code class="hljs bash">一个合并跨国公司计费系统项目即将开始，项目经理识别到有三位经理对这项变化感到不舒服，项目经理下一步应该怎么做？A. 将他们关注的问题升级上报给项目发起人B. 定期开始项目变更请求以满足他们的期望C. 运用人际关系技能，管理他们关注的问题D. 通过管理相关方的需求来控制相关方参与<span class="hljs-comment"># D</span><span class="hljs-comment"># PMBOK：P530-13.4监督相关方参与.</span><span class="hljs-comment"># 监督项目相关方关系，通过修订参与策略和计划来引导相关方合理参与项目.</span></code></pre><pre><code class="hljs bash">一家公司计划扩大其公司网站的服务范围.项目经理开始根据批准的项目章程收集详细的需求.项目经理应该怎么做才能就项目的可交付成果达成一致意见？A. 与相关方和主题专家(SMEs)一起召开焦点小组会议B. 与关键相关方一起使用引导技术C. 与相关方一起进行头脑风暴D. 访谈关键相关方和发起人，以获取有关需求的更多信息<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK(6)P145-5.2.2.6人际关系与团队技能-引导.</span><span class="hljs-comment"># 研讨会可用于快速定义跨职能需求并协调相关方的需求差异.</span><span class="hljs-comment"># 有效引导的研讨会有助于参与者之间建立信任、改进关系、改善沟通,</span><span class="hljs-comment"># 从而有利于相关方达成一致意见，题干问的是达成一致意见, 使用引导式研讨会.</span><span class="hljs-comment"># ACD - 头脑风暴和访谈获得的需求.</span></code></pre><pre><code class="hljs bash">按照既定的变更管理程序，一项变更请求获得批准，在实施该变更过程中一位高级管理人员对其未参与批准变更表示很惊讶，因为该变更的规模和成本都很大. 若要避免这个问题，项目经理应该事先做什么？A. 制定变更管理流程，要求根据成本估算需要不同的审批级别B. 确保项目团队接受培训，以识别该高级管理人员应该参与变更管理流程的情况C. 在项目的规划阶段，让该高级管理人员参与变更管理流程的设计D. 在提交变更请求之前先咨询该高级管理人员的意见<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(⑥)P530-13.4 监督相关方参与.</span><span class="hljs-comment"># 本身已经按照流程走了，CCB也批准了，因此并非现有变更流程执行的问题.</span><span class="hljs-comment"># 这个相关方没有参与批准，属于后面跳出来的相关方，因此属于变更流程设计的问题.</span><span class="hljs-comment"># A - 有流程.</span><span class="hljs-comment"># B - 项目团队的培训没有必要.</span><span class="hljs-comment"># D - 流程中没规定，就没必要咨询他.</span></code></pre><pre><code class="hljs bash">一位关键相关方没有空批准项目定义.项目经理下一步应该怎么做?A. 跟进该相关方以获得批准B. 审查相关方参与计划C. 暂停所有项目活动D. 更新批准过程以删除此相关方的要求<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P530-13.4 监督相关方参与.</span><span class="hljs-comment"># 相关方没空批准，并非抵制项目，因此持续跟进批准就好了.</span><span class="hljs-comment"># B  - 因为不是相关方抵制批准，所以审查相关方参与计划意义不大.</span><span class="hljs-comment"># CD - 都明显不对.</span></code></pre><pre><code class="hljs bash">一位相关方要求更频繁、更详细地更新项目状态.该相关方也表示有兴趣协助该项目。项目经理下一步该怎么做？A. 尽快发送详细的状态报告并更新相关方登记册B. 将该相关方包含在所有详细的项目状态沟通中,并将该相关方的参与度更新为支持C. 与团队开会以审查相关方登记册并重新评估角色和报告要求D. 更新具有同样参与程度的所有相关方的详细状态报告<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK（6）P530-13.4监督相关方参与.</span><span class="hljs-comment"># 监督项目相关方关系，并通过修订参与策略和计划来引导相关方合理参与项目的过程.</span><span class="hljs-comment"># ABD - 对项目沟通策略进行更新要根据对相关方分析的结果.</span></code></pre><pre><code class="hljs bash">某停车场能容纳1000辆车。停车场业主刚刚启动一个改造项目，以便升级车辆进出管理系统和停车引导系统.为了确保项目成功实施，必须记录详细的需求.作为项目经理应该怎么做?A. 鼓励项目相关方尽早参与进来B. 根据需求确定项目目标C. 对需求变化进行实时监控D. 定期召开项目状态评审会议<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P504 章节：13引导相关方参与.</span><span class="hljs-comment"># 为提高成功的可能性，应该在项目章程被批准、项目经理被委任，</span><span class="hljs-comment"># 以及团队开始组建之后，尽早开始识别相关方并引1导相关方参与.</span><span class="hljs-comment"># 尽早地识别，并引导相关方参与，可以提高项目成功的可能性.</span></code></pre><h4 id="82-管理项目知识"><a href="#82-管理项目知识" class="headerlink" title="82.管理项目知识"></a>82.管理项目知识</h4><p>“经验教训活动” -&gt; 表示是在做知识管理期间, 团队成员之间有敌意, 需要激励团队分享知识, 如果<u>不激励成员</u>分享知识或关注他人的知识,<br>即便最好的知识管理工具和技术也无法发挥作用.</p><pre><code class="hljs bash">项目团队收到了新的未经测试的指令, 以完成发布活动, 这导致了项目的重大延迟. 在解决该问题之后, 以及在经验教训活动期间, 项目经理感知到多个团队成员之间的敌意. 若要确保经验教训活动取得成功, 项目经理应该怎么做?A. 为所有参与者创建一个无偏见的环境B. 与每个人单独交谈以获得他们的反馈C. 仅与资源经理一起起草经验教训活动D. 将经验教训活动推迟到以后的日期<span class="hljs-comment"># A</span><span class="hljs-comment"># B 单独交谈不妥当</span><span class="hljs-comment"># C 仅与资源经理起草不妥当</span><span class="hljs-comment"># D 推迟也不妥当</span></code></pre><pre><code class="hljs bash">你正在领导井执行项目管理计划中所概述的工作. 作为这个过程的一部分，你已经通过服务型领导成功地鼓舞和激励了scrum团队，以快速的速度生成项目可交付成果. 因此，项目趋向于满足并超过绩效测量基准. 作为这个过程的一部分，你可能需要执行哪些活动？（选择两个)A. 为项目章程寻求批准B. 实施已批准的变更请求C. 确定项目相关方的全面列表D. 协助日常的站立会议E. 制定风险应对策略以应对已识别的风险<span class="hljs-comment"># BD</span><span class="hljs-comment"># PMBOK 6th 页码：P9O章节：4.3 </span><span class="hljs-comment"># 指导与管理项目工作是为实现项目目标而领导和执行项目管理计划中所确定的工作，</span><span class="hljs-comment"># 并实施已批准变更的过程 从题干描述来看，属于执行过程组，因此选B和D.</span></code></pre><pre><code class="hljs bash">鲍勃是一名Scrum主管. 他和敏捷团队与产品负责人一起为他们将要开发的新应用程序编写用户故事.为了进一步分析故事，鲍勃建议使用MOSCoW技术. MoSCoW代表什么？A. 必须有，应该有，可以有，不会有B. 必须有，应该有，可以有，将会有C. 可能有，应该有，本来可以有，不会有D. 可能有，应该有，本来可以有，不会有<span class="hljs-comment"># A</span><span class="hljs-comment"># MoSCoW方法是一种用于管理、业务分析、项目管理和软件开发的优先级技术，</span><span class="hljs-comment"># 旨在与利益相关方就交付每个要求的优先顺序达成共识，其含义是必须有，应该有，可能有，不会有.</span><span class="hljs-comment"># 执行储备分析.</span></code></pre><pre><code class="hljs bash">项目经理已准备好开始执行多个项目，但可用资源不足.项目经理应该怎么做？A. 按项目优先级获取团队资源，并更新项目进度计划B. 安排团队建设活动以提高员工的工作效率C. 减少所有项目的范围，使工作量与资源保持一致D. 将一个事项添加到每个项目的经验教训储存库中<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P543 第二部分 1.2 项目组合管理.</span><span class="hljs-comment"># &quot;执行多个项目&quot;暗示为项目组合管理，</span><span class="hljs-comment"># 但是&quot;资源不足&quot;需要派优先级，优化资源分配.</span><span class="hljs-comment"># BCD - 注意是项目组合管理，BCD都是单个项目的管理.</span></code></pre><pre><code class="hljs bash">每次你与你的项目发起人会面，她都要强调对于你的新的电子商务项目的成本控制的必要性.她经常询问你成本业绩方面的问题，诸如哪一个预算达到了哪一个没有达到.为了回答她的问题，你应该提供什么？A. 绩效测量基准B. 业绩衡量图表C. 资源生产力分析D. 趋势分析统计<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK 6th 页码：P224 章节：6.6.1.1 绩效测量基准.</span><span class="hljs-comment"># 使用挣值分析时，将绩效测量基准与实际结果比较，</span><span class="hljs-comment"># 以决定是否有必要进行变更、采取纠正措施或预防措施.</span><span class="hljs-comment"># 向发起人提供绩效测量基准，将绩效比较结果告之.</span></code></pre><h4 id="83-服务型领导"><a href="#83-服务型领导" class="headerlink" title="83.服务型领导"></a>83.服务型领导</h4><p>服务型领导 : 从幕后领导团队, 支持团队并相信他们会发挥最佳表现.</p><pre><code class="hljs bash">你被聘为新型火电站的创新开发项目的项目经理. 你在该领域拥有丰富的经验, 并有机会组建的团队. 你有一个很棒的团队并且完全信任他们, 他们也知道你完全信任他们, 你还希望他们在项目期间在个人和专业方面都得到发展. 团队成员相信项目将取得成功.你采用的是什么领导方式?A. 交易型领导B. 魅力型领导C. 服务型领导D. 自由放任型领导<span class="hljs-comment"># C</span><span class="hljs-comment"># 这是服务型领导，因为你从幕后领导团队，支持团队并相信他们会发挥最佳表现.</span></code></pre><pre><code class="hljs bash">项目团队采用混合型框架进行项目交付.在执行某项目时，团队获悉客户提出一项新的合规需求，必须先于任何其他需求交付，项目经理该如何应对这种情况？A. 与合规团队成员开展协作，审查并优先交付该需求B. 将合规负责人纳入相关方名单，并等待举行下一次状态会议C. 将该新的合规需求增至待办事项列表，因为技术团队无法腾出人手开展相关工作D. 让该团队将该合规需求纳入当前冲刺并交付该需求<span class="hljs-comment"># A</span><span class="hljs-comment"># 解析：《敏捷实践指南》35页，4.2.1.2-仆人式领导消除组织障碍.</span><span class="hljs-comment"># 同学们需要首先理解什么是合规，这个词汇在我们平常的讲解中频繁被提到，</span><span class="hljs-comment"># 通过对流程和程序的约束来减少问题发生的几率，也就是审计.</span><span class="hljs-comment"># 在预测型声明周期的管理框架下，如何展开审计，我们已经掌握的比较清楚了，</span><span class="hljs-comment"># 但是在混合型生命周期和敏捷实践中该如何进行合规性管理呢？</span><span class="hljs-comment"># 在敏捷实践中，合规团队需要和实施团队紧密协作，甚至可能会派出人员加入其中，</span><span class="hljs-comment"># 进而在冲刺中落实合规性要求，带来质量的提升，选项A正确.</span><span class="hljs-comment"># B - 将合规团队视为相关方管理已经违背了敏捷实践&quot;快速反馈&quot;的初衷，</span><span class="hljs-comment">#     状态会议更是无法将合规性要求纳入到产品待办事项列表.</span><span class="hljs-comment"># C - 纳入待办事项列表是正确的，但是后半句的描述有误，不情不愿.</span><span class="hljs-comment"># D - 是否将合规性要求调整为最高优先级，需要由PO来决策.</span></code></pre><h4 id="84-项目组合经理"><a href="#84-项目组合经理" class="headerlink" title="84.项目组合经理"></a>84.项目组合经理</h4><p><strong>项目组合经理</strong> : 为了同一个战略目标, 各个分公司的业务可能也不一样, 相互之间也不一定有关联, 但是在大战略下相同类型的项目所具有的很多共性问题, 其处理经验也可以被共享.</p><p><strong>项目集经理</strong> : 管理的是相互关联, 可以实现 “1 + 1 &gt; 2” 效果的多个项目.</p><p>PMO负责人 : 通常支持和服务一个公司或一个事业部的所有项目.</p><p>整合式风险管理 :<br>如果风险不仅会影响单个项目, 而且会影响项目集或项目组合甚至公司战略, 就应该将该<u><strong>风险及时上报</strong></u>, 让更有能力, 更有资源的高层管理者去统一处理.</p><pre><code class="hljs bash">根据总公司的数字化转型战略, 各分公司结合自己的业务都启动了数字化转型项目.因为此类项目有别于平时的业务, 项目团队对这种项目普遍缺乏经验, 对项目目标的理解也千差万别, 所以总公司最需要以下哪个角色来统筹管理这类项目?A. 项目组合经理B. 项目集经理C. 项目管理办公室(PMO)负责人D. 变更控制委员会(CCB)<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">项目经理正在负责一个型号的新车开发项目. 团队成员提出, 前悬架在寒冷天气下可能出现断裂的风险.如果这个风险真的存在, 不仅会影响这个型号的新车, 同时也会影响采用相同悬架的所有车型. 项目经理应该怎么办?A. 按照整合式风险管理原则, 将该风险上报给高级管理层B. 悬架质量不属于新车开发项目的范围, 不用担心C. 对这个风险进行定性和定量分析D. 暂停项目实施, 并更换悬架供应商<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">项目团队包括来自不同国家, 不同公司的多个专业小组. 有的团队成员问项目经理: 应该用什么语言处理工作邮件?用哪个流程进行评审等一系列问题? 项目经理在回答这些问题时应该参照以下哪一项?A. 项目章程B. 项目沟通管理计划C. 组织治理框架D. 项目治理框架<span class="hljs-comment"># D</span><span class="hljs-comment"># 项目治理框架为项目相关方提供了管理项目的结构, 过程, 角色, 职责, 终责和决策模型.</span></code></pre><pre><code class="hljs bash">一个组织建立了一个控制型项目管理办公室(PMO).PMO的首要任务是更新组织中的项目合规性准则.PMO可以强制执行以下哪一项？（选择三个)A. 特定项目管理方法的使用B. 采用特定的模板、表单和工具C. 遵守当地卫生法规D. 与治理框架保持一致E. 项目管理办公室指派的项目经理F. 发放管理储备<span class="hljs-comment"># ABD</span><span class="hljs-comment"># PMBOK 6th 页码：P48 章节：2.4.4.3 项目管理办公室.</span><span class="hljs-comment"># 控制型PMO不仅提供支持，而且通过各种手段要求项目服从.</span><span class="hljs-comment"># (1) 采用项目管理框架或方法论.</span><span class="hljs-comment"># (2) 使用特定的模板、格式、工具.</span><span class="hljs-comment"># (3) 服从治理.</span></code></pre><h4 id="85-项目启动会"><a href="#85-项目启动会" class="headerlink" title="85.项目启动会"></a>85.项目启动会</h4><p><strong>项目启动会</strong> : 通常是由发起人召集和主持并宣布项目启动. 此时还没有项目计划, 甚至还没有任命项目经理, 所以还没有项目范围说明书, 更不存在<strong>变更</strong>.<br>此时, 相关方的需求和建议应由会议<u>主持人(项目发起人)主持讨论并决策</u>, 或者等项目启动后, 在收集需求时再做记录.</p><p>项目启动会是讨论并发布项目章程的会议, 章程未发布, 意味着项目还没启动, 更不会有计划和基准.<br>这个阶段有任何新需求都可以提出, 因为此时还没有变更管理计划, 所以不需要经过变更控制程序.<br>项目启动会由发起人主持, 新需求是否纳入项目<strong>由发起人组织讨论</strong>或<strong>由发起人直接进行决策</strong>.</p><pre><code class="hljs bash">在项目启动会上, 一位相关方抱怨自己提的需求没有被采纳, 项目经理应该怎么办?A. 请项目发起人主持讨论并形成决议B. 不用理会, 因为这位相关方不能代表大多数相关方的意见C. 将这位相关方的需求补充到项目范围说明书中D. 发起一项变更请求, 获得对补充需求的批准<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">在项目启动会上, 销售总监提出新的需求, 如果要满足这些新需求, 预计要增加成本并延长工期. 项目经理应该怎么做?A. 劝说销售总监收回这些需求B. 为新需求配置资源并纳入项目计划C. 实施整体变更控制程序D. 等待项目发起人对这些新需求进行正式确认<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">在规划阶段审查项目管理计划时, 发起人表示他们希望通过删除一些需求来减少预算. 项目经理应该做什么?A. 与相关方讨论, 以确定此范围变更是否可行B. 签发变更请求, 以减少项目范围C. 更新计划, 仅包含新的需求集D. 执行成本效益分析, 以确定实际可以删除哪些需求<span class="hljs-comment"># A</span><span class="hljs-comment"># &quot;在规划阶段&quot;, 在讨论并编制计划时, 因为计划还没有确定, </span><span class="hljs-comment"># 所以不需要走变更控制程序, 发起人的建议可以经过讨论并直接用于计划的生成.</span><span class="hljs-comment"># 在基准确定之前，变更无需正式受控于实施整体变更控制过程. 先讨论，然后再做出决策.</span></code></pre><pre><code class="hljs bash">已经批准了项目章程，并且项目经理已经完成了识别相关方过程.在项目计划开始之前，项目经理应该做什么？A. 进行相关方分析B. 召开项目启动会议C. 向主要相关方通知已批准项目章程D. 执行规划相关方参与过程<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK 6th 页码：P80 章节：4.1.2.4 会议.</span><span class="hljs-comment"># 会议：在本过程中，与关键相关方举行会议的目的是识别项目目标、成功标准、</span><span class="hljs-comment"># 主要可交付成果、高层级需求、总体里程碑和其他概述信息.</span><span class="hljs-comment"># 排除法：</span><span class="hljs-comment"># A - 相关分析己经完成 </span><span class="hljs-comment"># B - 在规划后开工会议</span><span class="hljs-comment"># D - 规划的第一步不是这个过程.</span></code></pre><h4 id="86-监控过程组"><a href="#86-监控过程组" class="headerlink" title="86.监控过程组"></a>86.监控过程组</h4><p>监控过程组 : 只要有”偏差”, “绩效衡量”这样的关键词, 就可以确定项目是在监控过程组.</p><pre><code class="hljs bash">项目经理刚得到团队成员的通报, 项目系统的速度和最初计划的速度有偏差. 项目经理很惊讶, 因为这个绩效衡量没有在规划中被识别.如果项目经理稍后评估是否需要对这个偏差做出反应, 那么项目经理是在哪个管理过程中?A. 规划B. 执行C. 监控D. 收尾<span class="hljs-comment"># C</span></code></pre><h4 id="87-敏捷专家"><a href="#87-敏捷专家" class="headerlink" title="87.敏捷专家"></a>87.敏捷专家</h4><p>敏捷开发中一般不接受在当前冲刺中添加新任务, 但是如果遇到特殊情况, 如紧急, 重要且<u>优先级非常高的任务是可以接受</u>的, 这是敏捷的优势.<br>敏捷开发中<strong>是否添加新功能不是由敏捷专家(SM)批准</strong>, 而是由团队讨论决定, 必要时采取<strong>投票</strong>方式.<br>通常不鼓励在冲刺内增加新工作, 除非特别必要.<br>只要增加新工作, 就要重新评估优先级, 用<u>优先级更高的新工作替换掉原来优先级相对低的工作</u>. 以保证冲刺计划的合理性.</p><p>产品负责人:<br>坚定进行<strong>优先级排序</strong>. 的确, 一切都很重要, 但有些任务必须先完成, 有些任务最后完成.<br>必须有人做出艰难的排序决定. 这是<u><strong>产品负责人</strong></u>的职责.<br>产品负责人负责与<u>客户, 利益相关方和团队打交道</u>, 以决定产品方向. 产品负责人在业务领域具有丰富的知识, 并负责做出与业务相关的决策.</p><p>敏捷实践: 使用产品列表, 产品增量来将<u><strong>工作划分为多个版本</strong></u>.</p><pre><code class="hljs bash">在与产品负责人交谈后, 一位项目团队开发人员为当前冲刺添加了一项关键功能, 以确保获得一笔新业务. 团队已经开始开发该功能.敏捷专家下一步应该怎么做?A. 指示团队停止开发该功能, 直到遵循完变更控制程序B. 建议开发人员主动添加该功能, 并告知产品负责人该功能在当前冲刺后可用C. 如果不影响当前正在进行的任何其他功能的交付, 就可以指导团队完成该功能的开发D. 将该问题上报给人力资源部门, 以确保产品负责人将来不会绕过命令链<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">你是Scrum团队中的Scrum主管. 你已经在这个岗位上工作了八年多, 参与过不同的项目. 你正处于迭代过程中, 遇到了一个问题, 产品负责人不想对产品待办列表中的项目进行优先级排序, 他说一切都很重要,很关键. 你的最佳应对方式是什么?A. 让Scrum团队不考虑事项优先级, 继续工作. 因为无论如何, 你们都必须交付所有特性. 优先级不是一个严重的问题B. 坚定不移, 坚持要按优先级排序C. 你自己来考虑产品待办事项的优先顺序D. 让团队决定哪些特性最重要<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">你是从事敏捷项目的Scrum主管. 在进行第三个冲刺时, 项目利益相关方要求你报告为什么从冲刺中删除了一些特性,以及在下一个冲刺中会看到哪些预期特性? 作为Scrum主管, 你将如何处理这种情况?A. 请项目利益相关方从产品负责人那里获取信息B. 请项目利益相关方检查项目分解图C. 请项目得益相关方从团队成员那里获取信息D. 在下一次迭代评审会议上提交报告<span class="hljs-comment"># A</span><span class="hljs-comment"># 在敏捷中，明确定义了角色和职责.</span><span class="hljs-comment"># 产品负责人负责与客户、利益相关方和团队打交道，以决定产品方向.</span><span class="hljs-comment"># 产品负责人在业务领域具有丰富的知识，并负责做出与业务相关的决策.</span></code></pre><pre><code class="hljs bash">新的冲刺刚刚开始, 产品负责人提出在这个冲刺中增加一项新功能, 否则将错过一次千载难逢的市场机会. 开发团队应该怎么做?A. 要求产品负责人遵循整体变更控制程序, 直到获得CCB的批准B. 立即添加新功能, 并承诺该功能在这个冲刺结束时可用C. 与产品负责人讨论增加这项新功能, 并置换掉本冲刺中工作量相当但优先级低的任务D. 告诉产品负责人, 该功能将在下一个冲刺中开发, 因为本冲刺的计划已经开始实施了<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">一个制作新产品的大型敏捷项目已经启动几个团队正在同时开展新功能和增强功能方面的工作.项目经理面临严重的扩展挑战, 以确保不同功能的创建与协作, 若要解决这种情况, 项目经理应该做什么?A. 通过大量协作工作进行交付B. 使用相同的团队进行开发, 集成和测试C. 将工作划分为多个版本D. 执行充分的前期规划以管理依赖关系<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">在当前冲刺期间，产品负责人的可用性受到了其他承诺的限制.在每日站会上，团队成员抱怨他们不能从产品负责人那里得到答案，结果，产品增量的开发被延迟.对于scrum master来说最好的行动方案是什么？A. 让高级开发人员做出产品决策B. 代表团队成员联系产品负责人C. 在冲刺审查期间提及可用性问题D. 在冲刺回顾中讨论可用性问题<span class="hljs-comment"># B</span><span class="hljs-comment"># PO - 创建待办列表并排序, 确认工作优先顺序, </span><span class="hljs-comment"># 提供反馈, 指导开发方向, PO的角色必不可少</span><span class="hljs-comment"># 因此需要与PO讨论让他参与项目.</span></code></pre><pre><code class="hljs bash">项目经理通知敏捷团队成员, 由于意外的个人问题, 产品负责人将不能参加即将到来的冲刺审查.这种情况下最可能的结果是什么?A. 不清楚团队在冲刺期间开发的产品增量是否被接受B. 团队无法确定他们用于开发产品的过程是否需要改进C. 不会产生任何严重后果, 因为产品负责人缺席了一次冲刺审查会议D. 无法确定项目团队在最新冲刺期间增加了多少价值<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">发起人担心敏捷项目进展不够快, 因为没有发送项目状态报告.发起人向Scrum主管表达他们的担忧. Scrum主管向发起人保证项目正在按计划进行, 并邀请发起人参加会议, 亲眼看看项目进展. 下面哪个会议Scrum主管最有可能邀请发起人?A. 冲刺计划会议B. 每日站会C. 冲刺审查会议D. 冲刺回顾会议<span class="hljs-comment"># C</span></code></pre><pre><code class="hljs bash">敏捷教练不应该参与以下哪项活动？A. 监督敏捷团队的开发，以确保交付给客户的是最大价值的产品B. 确保团队整体表现出色，且不断进步C. 像催化剂一样推动公司成长D. 衡量团队成员的个人表现<span class="hljs-comment"># D</span><span class="hljs-comment"># 作为导师，敏捷教练负责指导团队应用敏捷方法，为员工提供反馈和改进方法，</span><span class="hljs-comment"># 促进公司成长，并回答有关问题. 他的重点是实现最大价值和建立强大的敏捷团队.</span><span class="hljs-comment"># 他注重推动团队整体合作，不监控个人表现，</span><span class="hljs-comment"># 因为敏捷团队的成功在于团队精神，成员之间互相不断促进提升.</span></code></pre><pre><code class="hljs bash">作为新团队的敏捷教练，你正在解释不同的角色及其对应的职责.你正在谈论自己当前的角色，并告诉他们，别人期望你这个角色做什么工作，哪项工作不包括在内？A. 确保团队理解产品和项目的愿景B. 为团队成员提供培训和资源C. 消除团队前进路上的障碍和干扰D. 在冲突开始时处理冲突<span class="hljs-comment"># D</span><span class="hljs-comment"># 这个问题需要一些批判性思维.</span><span class="hljs-comment"># 除了最后一个选项的一个小关键词外，所有的选项都是敏捷教练的职责.</span><span class="hljs-comment"># 你可以处理冲突，但不能一发生就处理.</span><span class="hljs-comment"># 首先，你应始终让团队成员以友好、合作的方式讨论和解决他们的分歧，</span><span class="hljs-comment"># 只有当冲突已经到了死胡同的地步，且你看到成员开始直呼对方全名或采取破坏性行动时，</span><span class="hljs-comment"># 你才介入为他们解决冲突. 作为一名敏捷教练，你将引导双方认真倾听对方的意见，</span><span class="hljs-comment"># 进行协作和协商，自行找到解决方案.</span></code></pre><pre><code class="hljs bash">为了使新确定的相关方尽早参与项目，scrum master建议邀请他们参加即将举行的冲刺审查会议，以向相关方证明团队正在朝着正确的方向发展，并从相关方那里获得有关团队工作完成情况的反馈.以下哪个是邀请相关方参加本次会议的另一个原因？A. 反思团队绩效B. 为下次冲刺确定高风险用户故事的优先级C. 重新确定发布待办事项列表优先级D. 讨论下次冲刺的高级别计划<span class="hljs-comment"># D</span><span class="hljs-comment"># 敏捷实践指南 页码：P55 章节：5.2.5 展示/评审.</span><span class="hljs-comment"># 当团队以用户故事的形式完成特定功能时，团队会定期展示工作产品.</span><span class="hljs-comment"># 看过展示后，产品负责人接受或拒绝故事.</span><span class="hljs-comment"># 冲刺评审会议的结果是一份修订的产品待办列表，确定很可能进入下个冲刺的产品代办列表.</span></code></pre><h4 id="88-专家权力"><a href="#88-专家权力" class="headerlink" title="88.专家权力"></a>88.专家权力</h4><p>项目经理是依靠自己的专业能力赢得了团队成员的尊重和信任. 所以项目经理使用的是<u><strong>专家权力</strong></u>, 属于项目经理自身拥有的, 而不是组织授予的权力.</p><p>技术能力不满足要求的成员应由<u><strong>职能部门经理</strong></u>负责提供有针对性的技术培训.<br>项目经理负责的是<u><strong>项目管理知识和能力的培训</strong></u>.</p><pre><code class="hljs bash">项目经理中途接手一个绩效很差的项目. 项目经理观察到团队士气低落, 团队成员对完成项目普遍没有信心, 而且该项目已经先后换过三任项目经理, 团队成员并不相信新的项目经理能够带来实质性改变. 项目经理帮助团队成员找到绩效不佳的根本原因, 并和团队成员一起优化进度, 成本和资源, 凭借严谨的态度和科学的方法赢得了团队的尊重和信任. 项目经理主要使用的是下列哪种权力?A. 专家权力B. 参照权力C. 情境权力D. 正式权力<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">下面哪一项不属于项目经理的职责?A. 为技术能力不满足项目要求的团队成员提供有针对性的技术培训B. 在实践中积累经验, 持续改进项目管理过程C. 组织编制项目进度计划, 预算并控制项目的各项指标, 以满足绩效要求D. 负责交付符合验收标准的项目成果, 并力争让相关方满意<span class="hljs-comment"># A</span></code></pre><h4 id="89-每日站会"><a href="#89-每日站会" class="headerlink" title="89.每日站会"></a>89.每日站会</h4><p>每日站会, 可以让团队成员先处理自己的工作, 理清今天的工作目标, 找到工作中的障碍.<br>每日站会要保持每天在同一时间, 同一地点召开, 需要营造仪式感并体现规范性.<br>每日站会要求<strong>团队成员</strong>都要参加, <u><strong>时长不超过15分钟</strong></u>.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/030.png" alt="030" style="zoom:80%;margin-left: 0;"><pre><code class="hljs bash">每日站会应该遵循以下原则, 除了:A. 把每日站会作为一天的开始B. 控制在15分钟之内C. 确保所有团队成员都参加D. 保持每天在同一时间, 同一地点召开<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">敏捷项目团队与产品负责人、项目经理和其他关键项目相关方会面，讨论项目必须经过的多层计划. 参与者承认在发布和迭代级别上需要计划.项目经理指出，每天都需要规划。项目经理指的是以下哪项?A. 在项目中尽早实施体系结构刺探以降低技术风险B. 同步和协调导致完成任务的个别活动C. 获取项目团队成员，并根据资源管理计划分配任务D. 与组织中从事同一项目的其他团队协调团队活动<span class="hljs-comment"># B</span><span class="hljs-comment"># 5.2.4-每日站会</span><span class="hljs-comment"># 每日站会让团队自我组织，</span><span class="hljs-comment"># 并让团队成员为完成之前和整个迭代中承诺完成的工作承担彼此的责任.</span></code></pre><pre><code class="hljs bash">你领导着两个独立的团队在同一个项目上工作，可交付成果的性质要求一个团队采用预测法而另一个团队使用Scrum.由于团队之间的依赖性和Scrum团队输出的可变性质，预测性团队需要用尽可能短的反馈循环来确认他们对Scrum团队活动的理解.你的最佳行动方案是什么？A. 将项目回顾纳入项目进度计划B. 要求Scrum团队使用信息发射源C. 结合定期的客户反馈循环的使用D. 让预测团队参加每日Scrum会议<span class="hljs-comment"># D</span><span class="hljs-comment"># 敏捷实践指南 页码：P54 章节：5.2.4</span><span class="hljs-comment"># 为每日站会规定时间盒，不超出 15 分钟. </span><span class="hljs-comment"># 团队以某种方式 &quot;过一下&quot; 看板或任务板，而团队中的任何人都可以主持站会.</span><span class="hljs-comment"># 每天15分钟的站会能以最短的时间获得一手信息，比信息发射源更及时.</span></code></pre><pre><code class="hljs bash">一个在地理位置上分散的团队正在从事一个IT项目，他们发现自己会改写彼此的代码，有时还会处理相同的功能，Scrum主管正在评估他们如何能够促进团队成员之间更加一致的沟通，从而避免这些问题，Scrum主管应该怎么做？A. 举行冲刺评审B. 召开回顾总结会议C. 安排每日站会D. 开发一个任务分配系统<span class="hljs-comment"># C</span><span class="hljs-comment"># PMBOK(6)P374-10.1.2.5沟通方法.</span><span class="hljs-comment"># 情景中描述的问题需要通过高频次接近于实时的信息交换，所以每日站会的方式相对较好.</span><span class="hljs-comment"># A - 用于项目交付成果进行检查.</span><span class="hljs-comment"># B - 用于阶段总结, 收集经验.</span><span class="hljs-comment"># D - 是对任务的分配，不解决信息传递遇到的瓶颈.</span></code></pre><h4 id="90-人员遣散计划"><a href="#90-人员遣散计划" class="headerlink" title="90.人员遣散计划"></a>90.人员遣散计划</h4><p>人员遣散计划 : 是由项目经理编制的团队成员完成项目任务后可以离开团队的时间计划, 有利于资源经理及时安排资源到其他项目任务上.</p><p>资源日历 : 是团队成员向项目经理提供的, 用于查阅该成员已经被占用的时间, 据此, 项目经理才能根据资源日历评估分配给该成员的任务需要多长时间完成.</p><pre><code class="hljs bash">职能经理需要知道分配给某个项目的某些资源何时可以分配到其他任务上. 项目经理应该向职能经理提供什么文件?A. 人员遣散计划B. 资源日历C. 责任分配矩阵D. 预分派计划<span class="hljs-comment"># A</span></code></pre><h4 id="91-收尾流程"><a href="#91-收尾流程" class="headerlink" title="91.收尾流程"></a>91.收尾流程</h4><p>最终验收 -&gt; 关闭合同 -&gt; 财务收尾 -&gt; 相关方满意 -&gt; 经验教训 -&gt; 归档工作 -&gt; 庆祝会 -&gt; 解散团队</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/023.png" alt="023"></p><p>有收尾, 找验收</p><p>遇中止, 查原因做经验教训总结</p><p><u><strong>项目收尾</strong></u>过程的内容:</p><ul><li>可交付成果的确认流程和验收标准</li><li>项目终期审计要求</li><li>知识转移的流程和标准</li></ul><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/015.png" alt="012" style="zoom:67%;"><p><u>收尾流程的验收与确认范围的验收的区别</u></p><p>1.区别：<br>验收的对象不同：收尾阶段验收的是最终的产品、服务和成果，它是整体的验收；<br>而确认范围验收的是单个的可交付成果，它是局部的验收.</p><p>2.联系：<br>验收的可交付成果是确认范围的输出，是收尾阶段（结束项目或阶段）的输入.<br>项目经理通过<strong>确认范围过程来确认每个可交付成果</strong>，来提高收尾阶段的最终产品、服务或成果获得验收的可能性.</p><pre><code class="hljs bash">在一个项目组织中经验丰富的项目经理接近项目的收尾阶段. 项目经理接下来怎么做?A. 核对一个为期多年新项目的项目分配B. 将实际项目绩效与原计划对比 C. 通知客户项目将会收尾D. 获得客户的验收<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">项目在完工前终止, 项目发起人说明终止的原因是由于缺乏资金. 项目经理下一步应该采取下列哪一项?A. 请求项目发起人寻找其它的项目融资方式, 并提出建议, 例如向金融机构寻求贷款B. 请求另一个项目的项目经理启动向其它项目注资的步骤C. 与项目团队一起集思广益, 寻找出项目融资的来源D. 将经验教训和历史信息存入到经验教训知识库, 以备未来项目使用<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs bash">项目经理获得了一份&lt;&lt;项目收尾指南&gt;&gt;, 从这份文件中, 项目经理可以获得如下信息, 除了:A. 可交付成果的确认流程和验收标准B. 项目计划模版和经验教训登记册C. 项目终期审计要求D. 知识转移的流程和标准<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">在将所有项目可交付成果移交给客户后, 项目经理举行内部庆祝会议.但是,在检查可交付成果后, 用户的质量检查员主张存在一些不可接受的缺陷。项目经理应该做什么?A. 查阅可交付成果的质量保证文件,以获得缺陷证明B. 由于客户已批准了交付文件,因此拒绝这项主张C. 审查质量检查员的主张,并估算成本影响D. 要求项目主管进行额外检查<span class="hljs-comment"># C</span><span class="hljs-comment"># 可交付成果虽然移交，但是后续的运营、售后，做为项目团队成员仍然也提供支持.</span><span class="hljs-comment"># B - 所以虽然完成了移交，还是要尽量的补救缺陷，排除B选项.</span><span class="hljs-comment"># A - 缺陷是在移交后发现的，所以质量保证文件中没有关于缺陷的证明.</span><span class="hljs-comment"># D - 额外的检查包括在了选项C当中.</span></code></pre><pre><code class="hljs bash">项目经理应使用哪三个文档来确保最近委托的项目组件已签署并所有权已转移？(选择三项)A. 最终报告B. 项目文件更新C. 采购协议D. 相关方参与计划E. 组织过程资产更新<span class="hljs-comment"># ABE</span><span class="hljs-comment"># 127章节：4.7.3</span><span class="hljs-comment"># 结束项目或阶段:</span><span class="hljs-comment"># 1) 输出最终报告(A)</span><span class="hljs-comment"># 2) 项目文件更新(B)</span><span class="hljs-comment"># 3) 组织过程资产更新(E) </span><span class="hljs-comment"># 收尾的三个输出文件.</span></code></pre><pre><code class="hljs bash">项目经理正在帮助公司推出一件新产品，该产品与将于未来几年推出的一系列新产品很相似.在关闭当前项目时，项目经理应该做什么来帮助未来的项目?A. 向新项目经理提供项目绩效报告B. 记录项目相关方提供的经验教训C. 与项目相关方一起审查最后更新的问题日志D. 确保风险登记册处于最新状态, 并让项目相关方参与进来<span class="hljs-comment"># B</span><span class="hljs-comment"># PMBOK（6）121-4.7结束项目或阶段.</span><span class="hljs-comment"># &quot;帮助未来的项目&quot;，有类似的关键词时，要考虑到经验教训登记册和组织过程资产.</span><span class="hljs-comment"># 又提到了&quot;在关闭当前项目时&quot;，在收尾过程中对经验教训的总结非常重要，也是常出的考点.</span></code></pre><pre><code class="hljs bash">涉及一家全球公司10家分公司的项目即将完成，项目经理正在安排召开一次经验教训总结会议，项目经理应该邀请谁来参加会议？A. 所有相关方B. 项目经理的业务部门主管C. 项目团队的所有成员D. 高级管理层<span class="hljs-comment"># A</span><span class="hljs-comment"># PMBOK(6)P128-4.7.3.4组织过程资产更新.</span><span class="hljs-comment"># 尽可能多的相关方参与到经验教训总结中，有助于今后的项目少走弯路.</span><span class="hljs-comment"># BCD - 都有可能参加经验教训总结会议，在选项A的范围之内.</span></code></pre><h4 id="92-工作绩效报告"><a href="#92-工作绩效报告" class="headerlink" title="92.工作绩效报告"></a>92.工作绩效报告</h4><p>给公司管理层提供<u>决策</u>支持的是<u><strong>工作绩效报告</strong></u>. 在工作绩效报告中, 不仅有问题陈述, 还有原因分析, 以及改进方案.</p><p>工作绩效数据:<br>工作绩效数据是在执行项目活动的过程中, 从每个正在执行的活动中收集到的原始的观察结果和测量值.</p><pre><code class="hljs bash">项目进度出现明显的延误, 公司管理层希望了解所有受到影响的项目里程碑. 项目经理应该提供什么?A. 偏差分析报告B. 挣值分析报告C. 趋势分析报告D. 工作绩效报告<span class="hljs-comment"># D</span></code></pre><pre><code class="hljs mipsasm">在指导和管理项目的过程中, 对于已完成的活动, 项目经理应该审查什么?A. 工作绩效数据<span class="hljs-keyword">B. </span>风险登记册C. 变更日志D. 问题日志<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">一个项目处于危险之中，该项目落后于进度计划，并且资源有限,项目经理是在项目执行阶段刚刚任命的. 项目经理首先应该采取什么措施？A. 召开项目团队会议B. 要求管理层提供额外资源C. 修订项目管理计划D. 审查工作绩效报告<span class="hljs-comment"># D</span><span class="hljs-comment"># 4.5监控项目工作. &quot;落后于进度计划&quot;、&quot;资源有限&quot;.</span><span class="hljs-comment"># 首先要对问题进行评估，根据评估结果进行决策. 选项ABC在D选项之后.</span></code></pre><h4 id="93-敏捷实践"><a href="#93-敏捷实践" class="headerlink" title="93.敏捷实践"></a>93.敏捷实践</h4><p>消除组织障碍：<br>仆人式领导还应该关注其他冗长的过程，这些过程往往造成瓶颈问题，阻碍团队或组织的敏捷性.<br>可能需要处理的过程或部门的例子包括，财务部门变更控制委员会或审计部门.<br><u><strong>合规性一般都会成为敏捷项目的障碍</strong></u>，因此要消除这些障碍, <strong>只做必要的工作</strong>.</p><pre><code class="hljs bash">你刚刚被分配到一个即将到来的敏捷项目中. 作为项目前期工作的一部分，你要审查组织关于合规性的所有政策和程序. 你意识到其中只有一些可能适用于你的项目. 首先你应该做什么？A. 将项目管理方法从敏捷切换到传统B. 将所有合规政策和程序纳入实施战略C. 确保合规活动包含在项目进度基准中D. 对合规性分类进行分类以确定项目资源的支出<span class="hljs-comment"># D</span><span class="hljs-comment"># 合规性一般都会成为敏捷项目的障碍，因此要消除这些障碍, 只做必要的工作.</span></code></pre><pre><code class="hljs bash">你正在为一个将使用敏捷方法进行产品开发的项目制定项目管理计划.你希望确保关键的相关方在项目的整个过程中都能了解交付的业务价值.你的最佳行动方案是什么?(选择三个)A. 等到项目结束时，向相关方展示项目可交付成果B. 邀请相关方参加定期的迭代评审会议C. 根据项目待办事项列表中每个项的业务值分配故事点D. 利用信息发射器，如看板和燃烧图表E. 确保沟通管理计划指定定期向相关方报告项目状态<span class="hljs-comment"># BDE</span><span class="hljs-comment"># 5.2.5-展示/评审</span><span class="hljs-comment"># 当团队以用户故事的形式完成特定功能时，团队会定期展示工作产品.</span><span class="hljs-comment"># 看过展示后，产品负责人接受或拒绝故事.</span><span class="hljs-comment"># A - 是传统项目.</span><span class="hljs-comment"># C - 是PO做的.</span></code></pre><pre><code class="hljs bash">你被指派领导一个敏捷项目. 然而，当你第一次与你的团队见面时，你意识到由于公司强加的各种各样的限制,大多数的团队成员不可能100%致力于项目. 你的最佳行动方案是什么?A. 将开发方法从敏捷切换到ScrumB. 将迭代时间从两周增加到四周C. 向加班的团队成员提供奖励D. 根据个人能力调整任务<span class="hljs-comment"># D</span><span class="hljs-comment"># 专职小组成员. 任务切换时，人员工作效率的损失在 20% 到 40% 之间.</span><span class="hljs-comment"># 随着任务数量的增加，效率损失会呈指数级增长.</span><span class="hljs-comment"># 团队通过使用协作工具来跟踪和监督他们的工作进度，并根据个人的能力来调整工作分配. </span><span class="hljs-comment"># 敏捷倡导专职，若实在无法专职，则需要根据团队能力自行安排调整任务.</span></code></pre><pre><code class="hljs bash">为了利用早期的收入, 一个项目团队正在逐步地生产可交付成果.该项目趋向于满足所有的基准. 然而, 项目经理已经确定团队的速度在相同的时间段内,在SPI为0.83的前5次冲刺中, 速度每次都是50个故事点.项目经理应该如何回应团队的表现?A. 提交变更请求以修订项目进度基准B. 建议团队在冲刺计划中设定更现实的目标C. 打破时间表, 让生产力回到正轨D. 为每次冲刺分配60个故事点<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">一家公司已与一家水电站签订了软件开发合同. 项目管理计划指定Scrum作为开发方法. 在项目的几次冲刺阶段, 监管机构通知执行机构, 由于新的环境法, 原本不包括在范围基准中安全功能将需要被内置到软件中.项目经理的最佳行动方案是什么?A. 发出变更请求以更新项目管理计划, 一旦获得批准, 确保范围基准得到更新B. 与产品负责人进行根本原因分析, 以确定为安全功能最初未包含范围中的原因C. 使用MoSCow优先级模型来梳理范围基准, 并将新的安全功能分类为应具有D. 在冲刺计划期间与团队讨论新功能, 如果团队同意, 请他们在下次冲刺中实现功能<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">已经决定使用瀑布管理项目. 然而, 由于需求不明确, 软件将在短时间内使用Scrum进行开发. 在从组织内部获得团队之后, 项目经理意识到组织在几个关键领域缺乏技术专长,将需要从供应商获得外部资源. 然而, 本组织希望保留其对所进行工作的战略酌处权.对于项目经理来说, 为了最大限度地与供应商协作, 最好的承包技术是什么?A. 团队扩充B. 提前取消选项C. 固定价格增量D. 时间和材料限制<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">你是敏捷项目的经理. 你发现有一个关键相关方是团队的主要干扰人.他频繁地从团队中获取项目状况信息, 提供建议, 并有时也会变更需求.对此, 你应该做什么?A. 升级问题并禁止他进入团队中来B. 邀请利益相关者参与适当的规划或审查会议, 要求他提供自己的观点C. 倾听利益相关者的陈述, 但忽略他的建议D. 直接告诉利益相关者在迭代周期中不要打扰团队<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">一家制造公司包办了一个项目，开发公司生产线自动化所需的硬件和软件. 可交付成果将使用敏捷框架生成. 什么样的策略可能适合获得产品范围的正式接受？（选择两个)A. 每当开发出足够的特征以形成一个连贯的集合时就进行演示B. 一旦整个项目范围按照范围管理计划完成，就要执行确认范围过程C. 团队是否在每次迭代结束时向产品负责人演示完成的用户故事D. 要求产品负责人参加每个冲刺的回顾，以审查和批准完成的产品增量E. 确保在初始项目计划期间，产品范围完全分解到工作包级别<span class="hljs-comment"># AC</span><span class="hljs-comment"># 敏捷实践指南 页码：P55章节：5.2.5展示/评审：</span><span class="hljs-comment"># 当团队以用户故事的形式完成特定功能时，团队会定期展示工作产品.</span><span class="hljs-comment"># 看过展示后，产品负责人接受或拒绝故事.</span><span class="hljs-comment"># 评审会议，找PO演示，PO来决定接受或拒绝故事.</span></code></pre><pre><code class="hljs bash">产品负责人与敏捷团队负责人接触时，会担心团队在最后几次冲刺中进展缓慢.产品负责人怀疑，从最近的站会上团队成员疲惫的外表和无精打采的状态来看，他们可能是筋疲力尽了。在这种情况下，团队领导采取的最佳行动方案是什么?A. 要求产品负责人解决问题B. 把这个问题提出来与团队讨论C. 带领团队度过愉快的一天，让他们充电D. 与HR经理讨论问题<span class="hljs-comment"># B</span><span class="hljs-comment"># 仆人式领导要善于激励项目人员, 为他们提供所需的环境和支持.</span><span class="hljs-comment"># 信任他们能够完成工作. 把问题提出来, 让团队自己解决.</span></code></pre><pre><code class="hljs bash">一位新的开发人员在项目执行过程中加入了一个敏捷团队.在参观工作区域的过程中，Scrum主管简要概述了团队使用的敏捷实践，并将新开发人员介绍给团队成员. 在这种情况下，Scrum主管下一步最合逻辑的步骤是什么？A. 召开项目启动会议来介绍新开发人员B. 让团队成员向新开发人员介绍项目C. 为新开发人员分配一个易于完成的用户故事D. 让新开发人员阅读团队基本规则和过程<span class="hljs-comment"># B</span><span class="hljs-comment"># 敏捷实践指南 页码：P153 章节：术语表</span><span class="hljs-comment"># 它是一种跨职能团队，其中为实现团队目标团队成员根据需要轮换着发挥领导作用.</span><span class="hljs-comment"># 自组织团队，让团队成员去讲解.</span><span class="hljs-comment"># D - 基本规则最好非正式会议和他讲.</span></code></pre><pre><code class="hljs bash">一个组织决定逐渐从传统方法过渡到混合方法，然后是敏捷方法.一家咨询公司被聘请来领导这一过程并为管理层提供建议.为了开始这个过程，顾问强调，随着这个转变，项目领导者的角色必须从命令和控制自顶向下的方法变更为敏捷服务型领导.这种转变对项目负责人的日常工作意味着什么?A. 将任务分配给团队、监督和控制项目工作B. 管理产品待办事项列表中指定的用户故事和任务C. 为团队设定方向，提供指导，促进工作D. 不需要变更，因为领导者的角色保持不变<span class="hljs-comment"># C</span><span class="hljs-comment"># 敏捷实践指南 页码：P35 章节：4.2.1.1</span><span class="hljs-comment"># 仆人式领导的促进作用促进者将帮助每个人各尽所能地思考和工作.</span><span class="hljs-comment"># 促进者鼓励团队参与、理解，并对团队输出共同承担责任. </span><span class="hljs-comment"># 促进者帮助团队创建可接受的解决方案.</span><span class="hljs-comment"># 在敏捷题目里，看到鼓励、促进、协作，一般都是正确的关键字.</span></code></pre><pre><code class="hljs bash">一家公司正在为外部客户运行一个敏捷项目，团队在冲刺审查会议上演示了网络用户界面的新功能后，一个相关方找到产品负责人，并建议对其中一个屏幕进行改进.相关方坚持认为，这种改进将使用户更容易在界面中导航. 产品负责人的最佳行动方案是什么？A. 在下次冲刺中实施相关方的请求，因为它将增强客户体验B. 与客户讨论相关方的要求，并决定是否以及何时实施C. 为相关方的请求创建用户故事，并放在产品待办事项列表的底部D. 在每日站会上讨论相关方的要求，并让团队决定如何继续<span class="hljs-comment"># B</span><span class="hljs-comment"># 敏捷实践指南 页码：P41章节：4.3.2产品负责人Product Owner：</span><span class="hljs-comment"># 创建待办列表并排序、确认工作优先顺序、提供反馈、指导开发方向.</span><span class="hljs-comment"># PO对接客户，以确定是否变更以及何时变更.</span></code></pre><pre><code class="hljs bash">相关方经常打电话和发邮件给开发团队以获取项目的状态，从而对团队的进展产生负面影响. 敏捷教练应该如何处理这种情况？A. 将该问题升级上报给项目发起人B. 指导相关方进行适当的敏捷实践C. 将相关方引荐给产品负责人D. 让团队决定如何处理此问题<span class="hljs-comment"># B</span><span class="hljs-comment"># 敏捷实践指南 页码：P73 章节：6.1.2变革就绪情况：</span><span class="hljs-comment"># (1) 积极明确的管理层支持；</span><span class="hljs-comment"># (2) 变革管理实践，包括沟通和引导；</span><span class="hljs-comment"># (3) 逐个项目应用敏捷实践向团队增量地引入敏捷实践;</span><span class="hljs-comment"># (4) 以及通过采取适用的敏捷技术和实践示范引导.</span><span class="hljs-comment"># 组织的变革，需要管理层的支持以及敏捷教练的不断实践.</span><span class="hljs-comment"># D，团队不解决对外沟通的问题.</span></code></pre><pre><code class="hljs bash">传统管理的项目使用Scrum来开发项目可交付成果.敏捷发布规划要求将最近完成的MVP部署到生产中.然而，质量保证(QA)部门拒绝了MVP，声称部门的政策和程序没有处理中期可交付成果的实施将问题记录在障碍板上后，项目经理接下来应该做什么？A. 提交变更请求以更新质量控制测量结果B. 请求项目发起人帮助获得必要的批准C. 无视QA部门的意见，并按计划发布MVPD. 使项目团队在部署前交付功能完整的产品<span class="hljs-comment"># B</span><span class="hljs-comment"># 敏捷实践指南 页码：P74 章节：6.1.2 变革就绪情况.</span><span class="hljs-comment"># (1) 积极明确的管理层支持;</span><span class="hljs-comment"># (2) 变革管理实践，包括沟通和引导;</span><span class="hljs-comment"># (3) 逐个项目应用敏捷实践向团队增量地引入敏捷实践;</span><span class="hljs-comment"># (4) 以及通过采取适用的敏捷技术和实践示范引导.</span><span class="hljs-comment"># 需要领导明确支持敏捷实践的变革.</span></code></pre><pre><code class="hljs bash">一家公司开始了它的第一个混合型项目. 项目进度计划是根据基准来衡量的，并且产品是使用Scrum开发的. 公司已经为团队进行了敏捷培训.项目的完成日期到了，团队提交他们到目前为止能够完成的内容.客户检查产品并指出一个重要的功能没有交付.造成这种情况最可能的原因是什么？A. 项目团队拒绝在晚上和周末工作以完成整个产品待办事项列表B. 产品负责人未包括在敏捷培训中，甚至没有分配到项目中C. 项目团队没有与客户协商如何确定产品待办事项列表的优先级D. 进度基准太短，无法开发产品待办事项列表中的所有项目<span class="hljs-comment"># B</span><span class="hljs-comment"># 敏捷实践指南 页码：41章节：4.3.2产品负责人 Product Owner：</span><span class="hljs-comment"># 创建待办列表并排序、确认工作优先顺序、提供反馈、指导开发方向.</span><span class="hljs-comment"># PO对接客户以确定是否变更以及何时变更.</span></code></pre><pre><code class="hljs bash">一个没有敏捷方法经验的组织雇佣了一个敏捷教练来领导一个项目.该项目将使用看板开发项目可交付成果.下列哪项培训活动对项目的成功至关重要?(选择三个)A. 与整个项目团队一起举办关于敏捷思维和原则的敏捷研讨会B. 教授开发团队如何根据业务价值对项目待办事项排序C. 向开发团队解释工作将如何通过看板，以及如何遵守在制品限制D. 确保产品负责人清楚地了解如何培养待定项E. 对产品负责人进行日常scrum会议的最佳实践培训F. 指导项目团队如何确保严格的变更控制过程的实施<span class="hljs-comment"># ACD</span><span class="hljs-comment"># 《敏捷实践指南》82页，6.6.3-敏捷</span><span class="hljs-comment"># PMO为多学科型，通过培训和指导发展人才.</span><span class="hljs-comment"># B - 应该PO来做.</span><span class="hljs-comment"># E - 是整个团队而非单纯PO.</span><span class="hljs-comment"># F - 错误.</span></code></pre><pre><code class="hljs bash">敏捷项目的第一次迭代即将开始. 发起人召集团队、Scrum主管、产品负责人和其他项目相关方参加启动会议.发起人强调需要在项目尽可能早的时候以最小的成本识别和应对项目风险.与会者实现发起人要求的最佳方式是什么？A. 团队和相关方应该经常审查产品增量B. 项目相关方应该在每次冲刺中执行基于风险的刺探C. 产品负责人和发起人应该对高风险的用户故事进行优先级排序D. 团队应该与Scrum主管一起实现结对编程<span class="hljs-comment"># A</span><span class="hljs-comment"># 敏捷实践指南 页码：P56 章节：5.2.7持续集成：</span><span class="hljs-comment"># 在不同层面测试、验收测试驱动开发 (ATDD)测试驱动开发和行为驱动开发、刺探.</span><span class="hljs-comment"># B - 刺探应由团队做.</span><span class="hljs-comment"># C - PO与团队和相关方共同确认优先级.</span><span class="hljs-comment"># D - 结对编程应由团队来做.</span></code></pre><pre><code class="hljs bash">项目经理制定了一个全面的项目管理计划，包括完全详细的WBS和详细的项目进度计划.尽管做了这些努力，但项目仍然落后于计划，因为变更控制委员会无法处理大量变更，即使其中大部分已经被产品负责人批准了. 项目经理的最佳行动方案是什么？A. 要求终止现有的项目，并寻求批准来启动一个将使用敏捷方法的新项目B. 提交变更请求来更新项目进度计划，以反映CCB的长过程时间所造成的延迟C. 寻求批准绕过变更控制过程，让项目团队直接与产品负责人合作D. 告诉产品负责人项目正在使用预测模型，这意味着大多数变更都应该被拒绝<span class="hljs-comment"># C</span><span class="hljs-comment"># 敏捷实践指南 页码：41章节：4.3.2产品负责人 Product Owner：</span><span class="hljs-comment"># 创建待办列表并排序、确认工作优先顺序、提供反馈、指导开发方向.</span><span class="hljs-comment"># 设立了PO，还要经过CCB，那设立PO就没有意义.</span></code></pre><pre><code class="hljs bash">一个敏捷团队举行了一次发布回顾.讨论的重点是在软件发布之前的几周内发生的一些破坏性风险事件.这些风险很难解决，并威胁到发行日期. 风险在发布计划的早期就已经确定了，但是与对客户来说价值相对较低的用户故事相关联.为了避免这些风险在离预定发布日期这么近的时候发生，我们应该做什么呢？A. 应该批准加班，并在发布前几周增加资源，以减轻高风险用户故事的影响B. 产品负责人应该更勤奋地在待办事项列表中编写用户故事，以便将风险降到最低或完全消除C. 真的没有什么可以避免所描述的问题，因为风险事件总是发生在预定的发布日期之前D. 产品负责人可以在产品待办事项列表中提前而不是推迟完成高风险用户故事<span class="hljs-comment"># D</span><span class="hljs-comment"># 敏捷实践指南 页码：P42 章节：4.3.3风险价值矩阵：</span><span class="hljs-comment"># 产品负责人的工作是确保团队从事最高价值的工作.</span><span class="hljs-comment"># 首先要做高风险高价值的事情.</span></code></pre><pre><code class="hljs bash">在敏捷项目部署期间，客户对可交付成果不满意并要求进行变更.敏捷项目经理下一步应该怎么做？A. 将这些变更添加进问题日志B. 在交付期间整合实施变更C. 在下次评审会议期间纳入这些变更D. 尽可能地限制变更<span class="hljs-comment"># A</span><span class="hljs-comment"># 敏捷实践</span><span class="hljs-comment"># 敏捷是多次交付，变更驱动的项目管理模式，因此要拥抱变更.</span><span class="hljs-comment"># 因此将问题加入问题日志，</span><span class="hljs-comment"># 然后在下个冲刺开始的时候制定冲刺计划的时候来确定是否变更和排定优先级.</span><span class="hljs-comment"># 其他选项：BCD都不是敏捷实践.</span></code></pre><pre><code class="hljs bash">在一个敏捷项目的演示期间，项目经理缺席，在审查已完成的工作之后，产品负责人要求进行一项变更，然后获得会议中每个人的一致同意，开发团队立即开始实施这项变更，当项目经理回来工作后，这项变更已经完成，项目经理下一步应该怎么做?A. 将该不一致性问题通知相关方B. 将已完成的变更更新到工作范围中C. 与项目团队开会，讨论变更控制过程D. 向变更控制委员会(CCB)登记这项变更并请求批准<span class="hljs-comment"># B</span><span class="hljs-comment"># 敏捷实践 题目提到&quot;敏捷项目&quot;.</span><span class="hljs-comment"># 敏捷项目环境，就是拥抱变更的. 且是有&quot;产品负责人&quot;提出要变更，</span><span class="hljs-comment"># 因此项目经理不是按照传统流程走CCB，而是直接更新到项目的待办列表即可.</span><span class="hljs-comment"># 其他选项：ACD都是传统项目的做法.</span></code></pre><pre><code class="hljs bash">你的团队未能在最后几次迭代上履行迭代的承诺，且与团队讨论后，看起来团队也无法履行发布承诺。你将做什么？A. 安排与发起人和产品负责人的电话会议，解释情况B. 准备一份详细的报告以及情况的根本原因分析(RCA)并分享.C. 向产品负责人发送电子邮件，告知他情况并听取他的指导D. 安排与产品负责人和团队的面对面讨论，并规划下一步<span class="hljs-comment"># D</span><span class="hljs-comment"># 参见《敏捷实践指南》敏捷12原则：</span><span class="hljs-comment"># 6、无论是对开发团队还是团队内部，信息传达最有效的方法都是面对面的交谈.</span><span class="hljs-comment"># PO最终确定工作是否能完成，所以出现无法履行发布承诺的时候，最好的解决办法就是和PO面对面商量对策.</span><span class="hljs-comment"># A - 应该先和PO商量对策，再决定是否要找发起人.</span><span class="hljs-comment"># B - 比起分享报告，面对面沟通更有效</span><span class="hljs-comment"># C - 发邮件属于沟通方法中的推式沟通，可以确保信息的发送，但不能确保信息送达目标受众或被目标受众理解.</span></code></pre><pre><code class="hljs bash">在举行每日站会时，Scrum主管的重点应该是什么？A. 重点应该是从所有人那里获取进度更新B. 重点应是了解与项目计划差多少C. 重点应是了解是否出现无法赶上时间表的进度落后现象D. 重点应该是与团队一起制定每日计划，并协助他们更积极地完成工作<span class="hljs-comment"># D</span><span class="hljs-comment"># Scrum主管是服务型领导者。</span><span class="hljs-comment"># 他们推进每日站会，让整个团队可以共同制定自己的计划.</span><span class="hljs-comment"># 另外，如果团队需要任何资源或面临任何阻碍，Scrum主管的职责是确保团队运行顺利，让大家更积极向上.</span></code></pre><pre><code class="hljs bash">你是健康信息管理界面的测试员. 你正处于重要发布之前的第三个冲刺阶段,你的团队在测试期间使用的服务器出现不稳定(测试是完成定义的一部分).团队本身无法控制这些服务，这是运营副总裁的职责.你认为处理这种情况的最佳方法是什么？A. Scrum主管应该与运营副总裁以及其他可以解决服务器稳定性的人员合作，牵头提高服务器的稳定性B. 测试团队应该与运营副总裁和其他人一起解决这个问题，接受自我组织的敏捷价值观C. 产品负责人必须帮忙更换故障服务器，因为这是他所负责的产品的一部分D. 职能团队经理必须将整个问题上报给CEO<span class="hljs-comment"># A</span><span class="hljs-comment"># Scrum主管还负责消除阻碍团队生产力的障碍.</span></code></pre><pre><code class="hljs bash">一个敏捷团队成员在开发她为当前冲刺选择的用户故事时遇到了一个技术问题.在多次尝试解决这个问题失败后，团队成员向scrum master寻求建议.对于scrum master来说，最好的行动方案是什么？A. 请求其他团队成员一起充实用户故事并解决问题B. 将团队成员替换为另一名更有经验的团队成员C. 要求撰写用户故事的产品负责人解决问题D. 建议团队成员尝试其他替代解决方案<span class="hljs-comment"># A</span><span class="hljs-comment"># 敏捷实践指南 页码：P38章节：4.2.3仆人式领导.</span><span class="hljs-comment"># 在敏捷环境中，项目经理充当仆人式领导，其工作重点转变为引导需要帮助的人，</span><span class="hljs-comment"># 促进团队的合作，保持与相关方的需要一致.</span><span class="hljs-comment"># 自组织团队，若遇到问题，原则上应该让团队自己处理问题.</span></code></pre><pre><code class="hljs bash">对于产品负责人来说，新数据库的要求非常模糊.在与客户进行了长时间的讨论后，你发现你对产品或构建产品的过程没有足够的了解，难以继续推进.作为敏捷实践者，接下来应该怎么做？A. 开始创建你的第一个用户故事，要求最终会发展清晰B. 由于项目中的技术不确定性，开始刺探以理清当前的风险C. 继续细化待办事项列表，并将情况告知高级利益相关方D. 从零开始冲刺，你可以在其中完成项目设置、基础设施配置、项目文档存储库的设置、工具标准化和团队建设<span class="hljs-comment"># B</span><span class="hljs-comment"># 刺探是项目中的一个短时间暂停，通常有固定时长，</span><span class="hljs-comment"># 在此期间，团队开展研究或对解决方案的某个方面进行原型设计.</span><span class="hljs-comment"># 以证明方案的可行性.</span></code></pre><pre><code class="hljs bash">当一个敏捷团队进行第七次迭代时，一个新相关方加入了该项目.相关方经常联系团队成员以请求信息并质疑他们的方法.Scrum主管注意到团队的生产力下降了.对于Scrum主管来说，最好的行动方案是什么？A. 清除妨碍团队进展的障碍和阻碍B. 鼓励团队与相关方互动，并满足他们的需求C. 将团队从相关方和任何其他外部影响中隔离出来D. 为团队提供他们需要的任何东西，以提高他们的积极性和生产力<span class="hljs-comment"># A</span><span class="hljs-comment"># 敏捷实践指南 页码：P34 章节：4.2.1 仆人式领导的职责.</span><span class="hljs-comment"># 仆人式领导通过管理关系，在团队内和组织中建立沟通与协作.</span><span class="hljs-comment"># 这些关系可以帮助领导在组织中得心应手地为团队提供支持.</span><span class="hljs-comment"># 这种支持有助于消除障碍，促进团队理顺过程.</span><span class="hljs-comment"># 在敏捷实践中，项目经理重要的核心工作就是消除障碍.</span></code></pre><pre><code class="hljs bash">一家公司总是在项目管理上使用预测法，但是现在项目管理办公室想要结合一些敏捷的最佳实践来产生更早的收益实现.项目经理即将开始为新项目做计划，她担心项目团队不具备在混合环境中工作的能力.项目经理的最佳行动方案是什么？A. 授权团队自我组织和学习敏捷最佳实践B. 向项目管理办公室（PMO）申请培训C. 将团队敏捷技能不足的风险添加到风险登记册D. 审查敏捷最佳实践的经验教训知识库<span class="hljs-comment"># B</span><span class="hljs-comment"># 敏捷实践指南 页码：P82 章节：6.6.3 敏捷PMO的服务.</span><span class="hljs-comment"># 通过培训和指导发展人才过渡期间应该安排专业的敏捷培训.</span></code></pre><pre><code class="hljs bash">你是一名敏捷教练，被分配到公司的一个新团队，目的是向他们介绍并教他们使用看板. 你已要求团队在会议室集合，就在看板开始工作的问题进行初步讨论. 团队应该做的首要工作是什么？A. 请直线经理绘制当前工作流程图并进行分析，并请他介绍新流程B. 由于是你来负责确保团队正确使用看板方法，所以你聘请了专业培训师和分析师为团队提供正式培训C. 与团队合作，指导他们绘制现有工作流程，以便他们能够自己识别流程可改进的地方D. 与直线经理一起绘制当前工作流程图，估算每个阶段的限量，并要求团队成员开始使用新流程<span class="hljs-comment"># C</span><span class="hljs-comment"># 敏捷教练应推进团队会议．帮助他们绘制现有工作流程图.</span><span class="hljs-comment"># 并支持他们不断改进流程，敏捷教练需要确保在首次确定流程时，</span><span class="hljs-comment"># 整个团队都参与进来，如果仅由一个人制定流程，</span><span class="hljs-comment"># 特别是如果这个人来自团队外部，例如顾问. 团队很难认同该流程.</span></code></pre><pre><code class="hljs bash">你是一位scrum master，领导着一个敏捷项目团队，一直在满足每次迭代设定的目标.产品负责人对团队的进展感到满意，并且绩效测量基准没有显示出任何偏差.然而，你会觉得团队中有一个成员的效率比其他成员低.在这种情况下，你最合适的反馈方法是什么？A. 允许项目团队成员在认为有必要时解决问题B. 指导表现不佳的团队成员多工作一小时，以缩小差距C. 在即将到来的迭代回顾中找出团队成员的低生产率D. 从下次迭代起为团队成员分配最简单的用户故事<span class="hljs-comment"># A</span><span class="hljs-comment"># 敏捷实践指南 页码：P35 章节：4.2.1.1 仆人式领导的促进作用.</span><span class="hljs-comment"># 促进者将帮助每个人各尽所能地恩考和工作.</span><span class="hljs-comment"># 促进者鼓励团队参与、理解，并对团队输出共同承担责任.</span><span class="hljs-comment"># 促进者帮助团队创建可接受的解决方案。让团队自己解決可以促进他们的技术能力和协作能力.</span></code></pre><pre><code class="hljs bash">你当前的项目刚刚完成了使用预测性项目管理方法的阶段.下一阶段的性质要求项目团队使用敏捷. 你希望授权团队进行这种转换，并确保团队成员理解他们的角色和职责将如何变更。首先你应该做什么?A. 与团队合作，确定目标，以便他们可以国绕阶段的目标进行参与和共同努力B. 使用网络实施解决方案，为项目团队消除障碍、阻碍和破坏性C. 确定所有项目相关方的沟通方法、渠道、频率和详细级别D. 根据外部业务环境的变更评估和确定对项目待办事项列表的影响的优先级<span class="hljs-comment"># A</span><span class="hljs-comment"># 敏捷实践指南 页码：P49章节：5.1 敏捷项目章程.</span><span class="hljs-comment"># 我们为什么要做这个项目？这是项目愿景。谁会从中受益？如何受益？</span><span class="hljs-comment"># 这可能是项目愿景和/或项目目标的一部分.</span><span class="hljs-comment"># 对此项目而言，达到哪些条件才意味着项目完成？这些是项目的发布标准.</span><span class="hljs-comment"># 我们将怎样合作？这说明预期的工作流. 新阶段的敏捷项目，需要项目章程先启动.</span></code></pre><h4 id="94-回顾总结会"><a href="#94-回顾总结会" class="headerlink" title="94.回顾总结会"></a>94.回顾总结会</h4><p>回顾总结会:<br>回顾是最重要的一个实践, 原因是它能让团队学习, 改进和调整其过程.</p><pre><code class="hljs bash">新项目中的所有团队成员都希望通过尽快交付价值来获得客户的信任.项目经理了解到一个资源已经在其他项目中与发起人一起工作. 某资源似乎在使用个人影响力，从而与项目发起人合作以增加项目的利益实现. 在项目的哪个阶段，项目经理应该解决这个问题以优化成本效益？A. 在团队的执行阶段开始时B. 紧接在第一次效益实现后C. 在下次回顾仪式期间D. 在下一次资源绩效审查期间<span class="hljs-comment"># C</span><span class="hljs-comment"># P50 章节：5.2.1 回顾总结会.</span><span class="hljs-comment"># 回顾是最重要的一个实践，原因是它能让团队学习、改进和调整其过程.</span></code></pre><pre><code class="hljs bash">项目具有较短的迭代计划和执行周期, 其中需求是逐步细化的. 关键相关方不断地参与进来, 并提供频繁的反馈, 从而使团队能够更快地应对变更.在这种类型的项目环境中, 项目经理管理质量的最佳方法是什么?A. 通过定期进行质量审计B. 通过使用确认范围过程C. 通过安排定期回顾D. 通过使用质量控制矩阵<span class="hljs-comment"># C</span><span class="hljs-comment"># 一个敏捷方法, 只有C回顾会属于敏捷的方法.</span></code></pre><pre><code class="hljs bash">项目负责人反复抱怨，称开发团队开发的功能似乎与原始设计不一致.什么做法有助于解决这个问题?A. 让产品负责人参加下一次迭代审查会议，以了解产品的开发状态B. 要求质量保证团队识别与初始设计相比较的任何功能不匹配C. 要求开发团队重写功能，使其与项目范围相匹配D. 在下一次回顾会议中安排时间讨论所有的纠正措施，并要求项目负责人参加会议<span class="hljs-comment"># D</span><span class="hljs-comment"># 敏捷实践指南 页码：P50 章节：5.2.1 回顾总结会.</span><span class="hljs-comment"># 回顾是最重要的一个实践，原因是它能让团队学习、改进和调整其过程.</span><span class="hljs-comment"># 回顾会用于识别改进.</span><span class="hljs-comment"># A - PO本来就全程参与.</span><span class="hljs-comment"># B - 功能问题非质量问题.</span><span class="hljs-comment"># C - 需要与整个团队确认.</span></code></pre><pre><code class="hljs bash">Mia正准备参加冲刺回顾会议时被发起者拦住了.他问Mia会议的内容，有谁参加会议. Mia告诉他，参加冲刺回顾会议的人包括：A. Scrum主管，团队B. 产品负责人，Scrum主管，团队，客户C. 产品负责人，PMO，团队D. 产品负责人，Scrum主管，团队<span class="hljs-comment"># D</span><span class="hljs-comment"># 冲刺回顾会议</span><span class="hljs-comment"># 考点：冲刺回顾会的参与人员.</span><span class="hljs-comment"># 在敏捷里面会有鸡和猪的角色，</span><span class="hljs-comment"># 猪是敏捷团队成员，包括PO，SM，DevTeam;</span><span class="hljs-comment"># 鸡是团队外的人，利益相关方，领导等等，也就是可能会对项目有直接影响的人.</span><span class="hljs-comment"># 冲刺回顾会由 Scrum 团队的所有成员即猪的角色参加.</span><span class="hljs-comment"># A - 选项少了PO；</span><span class="hljs-comment"># B - 多了客户；</span><span class="hljs-comment"># C - 多了PMO. 少了Scrum Master.</span></code></pre><pre><code class="hljs bash">在六次迭代之后，项目范围和进度发生了重大变化.其原因在于客户的定期审查的技术法规和安全政策.项目经理希望为下一次迭代提出一种新的方法以避免可能的延迟.项目经理首先应该做什么？A. 对每个改进项目的重要性进行排序，然后实施上次回顾中确定的行动B. 进行成本效益分析，以帮助预测下一阶段通过使用新技术可能实现的利润C. 研究在类似项目中取得成功的新技术趋势和管理工具D. 使用待办事项列表的细化会议，并将客户的变更请求包括在讨论中<span class="hljs-comment"># A</span><span class="hljs-comment"># 敏捷实践指南 页码：P51 章节：5.2.1回顾.</span><span class="hljs-comment"># 来自团队的一位促进者引导团队通过一个活动对所有改进事项的重要性进行排序.</span><span class="hljs-comment"># 完成对改进事项的排序后，团队为下一次迭代选择合适的数量.</span></code></pre><h4 id="95-阶段关口"><a href="#95-阶段关口" class="headerlink" title="95.阶段关口"></a>95.阶段关口</h4><p>在不同的组织、行业或工作类型中，阶段关口可能被称为阶段审查、阶段门、 关键决策点和阶段入口 或 阶段出口.<br>为做出进入下个阶段、进行整改或结束项目集或项目的决定，做的阶段末审查.<br>审查一个阶段末的问题，做<u><strong>成本效益分析</strong></u>，以决定下个阶段的项目.</p><pre><code class="hljs bash">在新目标国家推出产品前不久，公司意识到该产品并不完全符合当地的数据隐私法。由于预算限制，公司管理层要求项目团队将可能的罚款成本与返工成本进行比较。返工的一部分包括向产品待办事项列表中添加新需求.在这种情况下，下面哪个选项最有可能帮助到你?A. 重构B. 用户画像C. 阶段关口D. 快速跟进<span class="hljs-comment"># C</span></code></pre><h4 id="96-项目生命周期"><a href="#96-项目生命周期" class="headerlink" title="96.项目生命周期"></a>96.项目生命周期</h4><p>变更过多，说明<u><strong>需求是动态的，不建议使用瀑布型</strong></u>.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/032.png" alt="032" style="zoom:80%;margin-left: 0;"><pre><code class="hljs bash">随着项目的进展，偏差分析表明与绩效测量基准相比，实际的项目绩效会恶化.因此，对成本、进度和范围的估算不再有效.团队确定大量的新功能、变更请求和缺陷修复是差异背后的主要原因.项目经理要确保在实际进展的基础上对项目的剩余工作进行进一步的估算，最好的行动方案是什么?A. 将产品开发方法转换为通过短迭代来适应和度量进度B. 限制项目中允许的新功能、变更请求和缺陷修复的数量C. 请使用自下而上估算成本和进度计划估算技术以及三点估算范围D. 基于单个的基准而不是单一的综合基准来衡量进度<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">你正在为一个为当地电力公司安装智能无线电表的多阶段项目开发基准.第一阶段将准备基础设施，第二阶段将安装仪表，第三阶段将上传软件.然而，由于反无线技术组织的反对，尚不清楚该项目是否会在整个规划区域全部完工.在项目过早关闭的情况下，为了增加交付价值的机会，你的最佳行动方案是什么?A. 要求当地政府为项目团队成员提供必要的安全措施，以保护他们免受与反无线技术团体的潜在对抗B. 获得发起人的批准，向那些同意额外工作以尽快完成工作的人提供奖金，即使这涉及到在夜晚和周末轮班工作C. 建议将项目从多阶段切换到一阶段方法，并完成基础设施准备、仪表安装和软件上传，迭代一次一个邻域D. 建议项目终止，因为在方案中描述的情况下，无法按时、按时完成项目、范围和预算，并为客户提供任何价值<span class="hljs-comment"># C</span><span class="hljs-comment"># 2.2-敏捷十二原则.</span><span class="hljs-comment"># 价值交付是敏捷原则的第一条.</span></code></pre><pre><code class="hljs bash">项目经理开始对一个新项目进行最初的计划.在审查了项目章程并与项目发起人和关键相关方交谈之后，项目经理选择了一个可预测的项目生命周期.这种生命周期的选择将如何影响项目的实施方式?(选择三个)A. 成本和时间将是固定的，项目范围将允许变化B. 需求将在项目开始前确定C. 业务价值将经常交付给客户，而不仅仅是在项目结束时D. 一个单一的最终产品将在项目结束时交付E. 变化将受到尽可能大的限制F. 任何更改都将在整个项目中受到欢迎，并为客户的利益而加以利用<span class="hljs-comment"># BDE</span><span class="hljs-comment"># 敏捷实践指南 页码：P20 章节：3.1.1 预测型生命周期的特征.</span><span class="hljs-comment"># B - 高确定性的明确的需求.</span><span class="hljs-comment"># E - 项目活动通常以顺序方式执行团队需要详细的计划尽可能减少预测型项目的变更.</span><span class="hljs-comment"># D - 通常不会在项目结束前交付商业价值</span><span class="hljs-comment"># A - 错误.</span><span class="hljs-comment"># CF - 是敏捷项目的特征.</span></code></pre><pre><code class="hljs bash">你是一名项目经理，被分配到一个更换防火墙的项目.在该项目中，这个非专业的跨职能团队将在两到四周时间内设计、构建和配置完成防火墙的安全特性. 你认为该项目的最佳交付方式是什么?A. Scrum;产品可以在 1个月或更短的时间盒内交付，并具有一致的持续时间，其中产生了潜在的可发布的产品增量B. 看板；我们只与一个团队合作，我们需要限制在制品 (WIP）以优化工作流程并缩短前置时间C. 瀑布；考虑到解决方案的敏感性，我们需要一个专门的团队来支持这个产品，还需要一个更连续的工艺流程D. 以上都不对<span class="hljs-comment"># A</span><span class="hljs-comment"># 冲刺描述了 Scrum 中的有时间盒限制的迭代，其中产生了潜在的可发布的产品增量.</span></code></pre><pre><code class="hljs bash">项目经理正在制定进度管理计划.由于客户表示需要尽早频繁地交付商业价值，因此项目经理选择将迭代计划与待办事项列表合并.该项目的进度管理计划中需要解決以下哪项？（选择三项）A. 在资源可用时使用看板面板来从待办事项列表拉动工作B. 使用基于适应型生命周期的滚动式规划C. 以用户故事的形式记录需求D. 在初始项目计划期间将工作包分解为活动清单E. 在项目待办事项中确定并优化用户故事的优先级<span class="hljs-comment"># BCE</span><span class="hljs-comment"># PMBOK 6th 页码：P177 章节：6, 项目进度管理的发展趋势和新兴实践.</span><span class="hljs-comment"># 具有未完项的迭代型进度计划. </span><span class="hljs-comment"># 这是一种基于适应型生命周期的滚动式规划 （B），</span><span class="hljs-comment"># 例如敏捷的产品开发方法。这种方法将需求记录在用户故事中(C)，</span><span class="hljs-comment"># 然后在建造之前按先级排序(E）并优化用户故事，最后在规定的时间盒内开发产品功能.</span><span class="hljs-comment"># 具有未完成项的迭代型进度计划，而非按需进度计划，因此不选A.</span></code></pre><h4 id="97-迭代待办列表"><a href="#97-迭代待办列表" class="headerlink" title="97.迭代待办列表"></a>97.迭代待办列表</h4><p>迭代待办列表:</p><ul><li>产品待办列表的子集, 只记录当前迭代的工作</li><li>将用户故事拆分成任务, <strong>团队成员主动领取</strong></li><li>团队成员有共同的迭代目标</li><li>团队成员可以添加, 删减或更改迭代中的任务</li><li>迭代列表中的任务进行了估算, 剩余工作量的估计每天需要更新</li></ul><pre><code class="hljs bash">产品经理需要找出一个在某项任务中工作的人. 他需要给出一些与该任务相关的重要信息.问产品经理如何能得到这些信息?A. 参加每日站立会议B. 在迭代待办事项中得到C. 在产品代办项中得到D. 在团队的工作记录中<span class="hljs-comment"># B</span></code></pre><pre><code class="hljs bash">为什么团队一直在追求增量式交付?A. 增量交付给客户提供早期价值, 降低交付客户不想要的东西的风险B. 增量交付允许你把捆绑产品特征, 使客户觉得交付的价值可观C. 增量交付消除要求变化的可能性D. 增量交付简化了整个团队的工作<span class="hljs-comment"># A</span></code></pre><pre><code class="hljs bash">你的发起人希望你在项目上使用混合型方法，并在项目执行阶段使用敏捷方法.你将这些迭代划分为为期2-3周的周期。这个选代可以被称为什么？A. 滚动式规划B. 史诗C. 用户故事D. 冲刺<span class="hljs-comment"># D</span><span class="hljs-comment"># 《项目管理知识体系指南(第六版)》 第216页.</span><span class="hljs-comment"># 在敏捷发布计划中，你将迭代划分为为期2-3周的冲刺.</span></code></pre><h4 id="98-ITTO"><a href="#98-ITTO" class="headerlink" title="98.ITTO"></a>98.ITTO</h4><p>项目管理过程组与知识领域:</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pmp-keywords-starts/035.png" alt="035" style="zoom:80%;margin-left: 0;"><pre><code class="hljs bash">一个大型建设项目正处于实施阶段.根据项目进度表，今天项目经理有三个项目新相关方的单独指导会议.当指导这些相关方时，项目经理可能执行下列哪一个项目管理过程？（选择两个)A. 制定项目章程B. 制定沟通管理计划C. 识别相关方D. 管理沟通E. 建设团队<span class="hljs-comment"># DE</span><span class="hljs-comment"># PMBOK 6th 页码：P379章节：10.2管理沟通：</span><span class="hljs-comment"># 管理沟通是确保项目信息及时旦怡当地收集生成、</span><span class="hljs-comment"># 发布、存储、检素、管理、监督和最终处置的过程.</span><span class="hljs-comment"># 项目经理按计划做事，说明是在执行阶段，只有DE是执行.</span></code></pre><pre><code class="hljs bash">随着项目的进展和可交付成果的产生，项目经理重新审查相关方参与计划，以确定可以对计划进行哪些改进，以提高相关方的参与.在这些项目文件中，哪些文件对正在执行的项目管理过程影响最大？（选择三个)A. 相关方登记册B. 风险登记 C. 资源管理计划D. 相关方参与评估矩阵E. 问题日志<span class="hljs-comment"># ABE</span><span class="hljs-comment"># PMBOK 6th 页码：P519章节：13.2.1.3项目文件：</span><span class="hljs-comment"># E - 问题日志</span><span class="hljs-comment"># B - 风险登记册</span><span class="hljs-comment"># A - 相关方登记册</span><span class="hljs-comment"># ITTO题.</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>pmp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pmp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aws-amplify部署应用程序</title>
    <link href="/2021/12/31/aws-amplify-started/"/>
    <url>/2021/12/31/aws-amplify-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="aws-amplify部署应用程序"><a href="#aws-amplify部署应用程序" class="headerlink" title="aws-amplify部署应用程序"></a>aws-amplify部署应用程序</h3><p>我们将引导您使用 AWS Amplify 部署 Web 应用程序. Amplify 是包含一组工具和服务的框架，可帮助您构建由 AWS 服务提供支持的可扩展、全堆栈应用程序.</p><p>AWS Amplify 是一组既可组合使用也可单独使用的<strong>工具和服务</strong>，能够帮助前端 Web 和移动开发人员构建可扩展的<strong>全栈式应用程序</strong>，由 AWS 提供支持.<br>借助 Amplify，您可以在几分钟内配置应用程序后端并连接应用程序，单击几下即可部署静态 Web 应用程序，并在 AWS 控制台外轻松管理应用程序内容.</p><ul><li>创建第一个 Amplify 项目.</li><li>使用 Amplify CLI 向您的应用程序添加身份验证、数据库和自定义域.</li><li>使用 AWS Amplify 部署 Web 应用程序.</li></ul><p>前提 : </p><ul><li>一个 AWS 账户：如果您还没有遵循<a href="https://aws.amazon.com/cn/getting-started/guides/setup-environment/"><strong>设置环境</strong></a>入门指南中的说明获取快速概览.</li><li>熟悉 git 和 <a href="https://github.com/">Github</a> 账户.</li></ul><h4 id="1-新建-Amplify-项目"><a href="#1-新建-Amplify-项目" class="headerlink" title="1.新建 Amplify 项目"></a>1.新建 Amplify 项目</h4><p>在本模块中，您将使用 <a href="https://reactjs.org/">React</a> (用于构建用户界面的 JavaScript 库) 新建一个 Web 应用程序，同时了解如何为第一个项目配置 AWS Amplify.</p><ul><li>新建 Web 应用程序.</li><li>在您的项目上设置 Amplify.</li></ul><h5 id="检查环境"><a href="#检查环境" class="headerlink" title="检查环境"></a>检查环境</h5><pre><code class="hljs bash">% node -vv16.3.0% npm -v7.15.1</code></pre><p>Amplify 命令行界面 (CLI) 是一个统一的工具链，可用于为您的应用程序创建 AWS 云服务. 让我们继续安装 Amplify CLI.</p><pre><code class="hljs bash">% sudo npm install -g @aws-amplify/cli</code></pre><p>安装完成后，通过运行以下命令配置 Amplify</p><pre><code class="hljs bash">% amplify configure</code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amplify-started/005-amplify-configure.png" alt="005-amplify-configure"></p><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><pre><code class="hljs bash">% amplify init</code></pre><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amplify-started/006-amplify-init.png" alt="006-amplify-init" style="zoom:67%;margin-left: 0;"><p><strong>您刚刚创建了什么？</strong></p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amplify-started/007-amplify-app.png" alt="007-amplify-app" style="zoom:80%; margin-left: 0;"><p>运行 <strong>amplify init</strong> 以初始化一个新项目时，Amplify 将：</p><ul><li>分析您的项目并确认上述的项目设置，包括将使用哪个 AWS 配置文件来配置应用程序所需的云资源.</li><li>在项目目录中创建名为 <strong>amplify</strong> 的文件夹. 此文件夹包含应用程序的后端配置.</li><li>在项目目录中创建名为 <strong>src/aws-exports.js</strong> 的文件. 此文件包含 Amplify 在您向应用程序添加更多功能时所预置服务的配置.</li><li>在 <a href="https://console.aws.amazon.com/amplify"><strong>AWS Amplify 控制台</strong></a>中为您的应用程序创建一个云项目，您可以在其中查看和管理自己的 Amplify 项目.</li></ul><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amplify-started/008-amplify-console.png" alt="008-amplify-console" style="zoom:80%;margin-left: 0;"><h4 id="2-构建前端并连接-API"><a href="#2-构建前端并连接-API" class="headerlink" title="2.构建前端并连接 API"></a>2.构建前端并连接 API</h4><p>在本模块中，您将为自己的 Web 应用程序构建前端并使用 <strong><a href="https://graphql.org/">GraphQL</a></strong> API 连接到 API (应用程序编程接口).<br>GraphQL 是一种 API 查询语言，可帮助您检索和更新应用程序上的数据.</p><ul><li>创建基本的 React 前端应用程序.</li><li>从您的应用程序调用 GraphQL API.</li><li>从应用程序的前端调用 API.</li></ul><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>您需要安装 Amplify React 库 <strong>@aws-amplify/ui-react</strong> (包含 React UI 组件).</p><pre><code class="hljs bash">% npm install @aws-amplify/ui-react</code></pre><p>修改<code>src/App.js</code> 文件 : </p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; withAuthenticator, AmplifySignOut &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@aws-amplify/ui-react&#x27;</span>;<span class="hljs-keyword">import</span> Amplify <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;aws-amplify&#x27;</span>;<span class="hljs-keyword">import</span> awsExports <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./aws-exports&#x27;</span>;Amplify.configure(awsExports);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">App</span>(<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-keyword">return</span> (    &lt;div&gt;      &lt;h1&gt;Notes App&lt;/h1&gt;      &lt;AmplifySignOut /&gt;    &lt;/div&gt;  );&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> withAuthenticator(App);</code></pre><h5 id="测试应用程序"><a href="#测试应用程序" class="headerlink" title="测试应用程序"></a>测试应用程序</h5><pre><code class="hljs bash">% npm start</code></pre><p>错误: </p><pre><code class="hljs bash"><span class="hljs-built_in">export</span> <span class="hljs-string">&#x27;AmplifySignOut&#x27;</span> (imported as <span class="hljs-string">&#x27;AmplifySignOut&#x27;</span>) was not found <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;@aws-amplify/ui-react&#x27;</span></code></pre><p>排查 : </p><p>查看安装包版本 : </p><pre><code class="hljs bash">% npm list --depth=0amplify-app@0.1.0 /Users/xxxxxx/Documents/aws/cdk/amplify/amplify-app├── @aws-amplify/ui-react@2.1.5├── @testing-library/jest-dom@5.16.1├── @testing-library/react@12.1.2├── @testing-library/user-event@13.5.0├── react-dom@17.0.2├── react-scripts@5.0.0├── react@17.0.2└── web-vitals@2.1.2</code></pre><p>删除不合版本的包 :</p><pre><code class="hljs bash">% npm remove @aws-amplify/ui-react</code></pre><p>安装指定版本的包 : </p><pre><code class="hljs angelscript">% npm install @aws-amplify/ui-<span class="hljs-symbol">react@</span><span class="hljs-number">1.2</span><span class="hljs-number">.25</span></code></pre><p>执行 : </p><pre><code class="hljs bash">% npm start</code></pre><p>这将在 <strong><a href="http://localhost:3000/">http://localhost:3000</a></strong> 上启动开发服务器并在浏览器中打开页面.<br>在可以使用该服务之前，系统会提示您注册 - 此数据存储在您项目的 Congnito 数据库中，只有您有权访问它.<br>登录后，该应用程序将仅显示带有 <strong>Notes App</strong> 的标题和<strong>登录</strong>按钮，这是因为您尚未向其中添加任何内容.<br>接下来，您将向应用程序添加 API. 您可以使用 <strong>ctrl + c</strong> 再次停止服务器.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amplify-started/009-login.png" alt="009-login" style="zoom:50%;margin-left: 0;"><p>错误 : </p><pre><code class="hljs bash">Error: Amplify has not been configured correctly.</code></pre><p>执行查新</p><pre><code class="hljs bash">% amplify add auth% amplify push% npm start</code></pre><p>这将在 <strong><a href="http://localhost:3000/">http://localhost:3000</a></strong> 上启动开发服务器并在浏览器中打开页面.<br>在可以使用该服务之前，系统会提示您注册 - 此数据存储在您项目的 Congnito 数据库中，只有您有权访问它.<br>登录后，该应用程序将仅显示带有 <strong>Notes App</strong> 的标题和<strong>登录</strong>按钮，这是因为您尚未向其中添加任何内容.<br>接下来，您将向应用程序添加 API. 您可以使用 <strong>ctrl + c</strong> 再次停止服务器.</p><h5 id="使用-Amplify-添加-GraphQL-API"><a href="#使用-Amplify-添加-GraphQL-API" class="headerlink" title="使用 Amplify 添加 GraphQL API"></a>使用 Amplify 添加 GraphQL API</h5><p>您现在将向应用程序添加 API。Amplify 使用 <a href="https://aws.amazon.com/appsync/"><strong>AWS AppSync</strong></a> 和 <a href="https://aws.amazon.com/dynamodb/"><strong>Amazon DynamoDB</strong></a> 来支持 GraphQL API.<br>AppSync 是托管的 GraphQL 服务，它将负责处理我们的 AP；而 Amazon DynamoDB 是 NoSQL 数据库，它存储我们的 API 将使用的数据.</p><p>要添加 API，请运行 <strong>amplify add api</strong>，然后为问题选择以下选项 (行以 &gt; 符号开头) - 在此步骤中，它将询问有关授权提供商的问题，此信息将在以后的指南中使用</p><pre><code class="hljs bash">% amplify add api(base) username@MacBook-Pro amplify-app % amplify add api? Select from one of the below mentioned services: GraphQL? Here is the GraphQL API that we will create. Select a setting to edit or <span class="hljs-built_in">continue</span> Authorization modes: API key (default, expiration time: 7 days from now)? Choose the default authorization <span class="hljs-built_in">type</span> <span class="hljs-keyword">for</span> the API Amazon Cognito User PoolUse a Cognito user pool configured as a part of this project.? Configure additional auth types? No? Here is the GraphQL API that we will create. Select a setting to edit or <span class="hljs-built_in">continue</span> Continue? Choose a schema template: Single object with fields (e.g., “Todo” with ID, name, description)⚠️  WARNING: Some types <span class="hljs-keyword">do</span> not have authorization rules configured. That means all create, <span class="hljs-built_in">read</span>, update, and delete operations are denied on these types: - TodoLearn more about <span class="hljs-string">&quot;@auth&quot;</span> authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rulesGraphQL schema compiled successfully.Edit your schema at /Users/xxxxxx/Documents/aws/cdk/amplify/amplify-app/amplify/backend/api/amplifyapp/schema.graphql or place .graphql files <span class="hljs-keyword">in</span> a directory at /Users/xxxxx/Documents/aws/cdk/amplify/amplify-app/amplify/backend/api/amplifyapp/schema✔ Do you want to edit the schema now? (Y/n) · yes✅ Successfully added resource amplifyapp locally✅ Some next steps:<span class="hljs-string">&quot;amplify push&quot;</span> will build all your <span class="hljs-built_in">local</span> backend resources and provision it <span class="hljs-keyword">in</span> the cloud<span class="hljs-string">&quot;amplify publish&quot;</span> will build all your <span class="hljs-built_in">local</span> backend and frontend resources (<span class="hljs-keyword">if</span> you have hosting category added) and provision it <span class="hljs-keyword">in</span> the cloud</code></pre><h5 id="创建-GraphQL-架构"><a href="#创建-GraphQL-架构" class="headerlink" title="创建 GraphQL 架构"></a>创建 GraphQL 架构</h5><pre><code class="hljs bash">% vi amplify/backend/api/amplifyapp/schema.graphql</code></pre><p>替换文件内容:</p><pre><code class="hljs sql">type Note @model @auth(rules: [&#123; allow: owner &#125;]) &#123;  id: ID!  text: String!&#125;</code></pre><p>此架构定义了一个以 id 和文本作为必填字段的备注类型。它还包含若干指令，这些指令属于 Amplify 的 GraphQL 转换库：</p><p><strong>@model</strong>：以 <strong>@model</strong> 注释的类型存储在 DynamoDB 中，系统自动为其创建 CRUDL (创建、读取、更新、删除、列表) 操作.</p><p><strong>@auth</strong>：以 <strong>@auth</strong> 注释的类型受一组授权规则的保护. 在这里，我们使用拥有者授权来确保只有备注的拥有者才能访问和修改.</p><h5 id="部署应用程序"><a href="#部署应用程序" class="headerlink" title="部署应用程序"></a>部署应用程序</h5><p>您现在准备好通过运行 <strong>amplify push</strong> 来部署自己的 Amplify Web 应用程序.<br>这会将您的应用程序上传到自己的 AWS 账户，而 Amplify 将向您显示正在部署的更改，并要求确认部署.</p><p>确认后，根据提示选择后续问题的原定设置值:</p><pre><code class="hljs bash">% amplify push? Are you sure you want to <span class="hljs-built_in">continue</span>? Yes? Do you want to generate code <span class="hljs-keyword">for</span> your newly created GraphQL API Yes? Choose the code generation language target javascript? Enter the file name pattern of graphql queries, mutations and subscriptions src/graphql/**/*.js? Do you want to generate/update all possible GraphQL operations - queries, mutations and subscriptions Yes? Enter maximum statement depth [increase from default <span class="hljs-keyword">if</span> your schema is deeply nested] 2</code></pre><p>这将需要几分钟的时间来完成部署，期间将看到正在创建的资源列表。Amplify 执行以下操作：</p><ul><li>创建一个由 AWS AppSync 提供支持的 GraphQL API，其中包含所有三种类型的 GraphQL 操作 (查询、突变和订阅).</li><li>使用创建、检索和更新<strong>备注</strong>所需的 GraphQL 操作在 <strong>src/graphql/</strong> 文件夹中生成代码.</li><li>创建 DynamoDB 表来存储使用应用程序创建的任何<strong>备注</strong>.</li></ul><p>替换<code>src/App.js</code></p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; Component &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<span class="hljs-keyword">import</span> Amplify, &#123; API, graphqlOperation &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;aws-amplify&#x27;</span>;<span class="hljs-keyword">import</span> &#123; createNote, deleteNote &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./graphql/mutations&#x27;</span>;<span class="hljs-keyword">import</span> &#123; listNotes &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./graphql/queries&#x27;</span>;<span class="hljs-keyword">import</span> &#123; withAuthenticator, AmplifySignOut &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@aws-amplify/ui-react&#x27;</span>;<span class="hljs-keyword">import</span> awsExports <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./aws-exports&#x27;</span>;Amplify.configure(awsExports);<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AddNote</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;    <span class="hljs-built_in">super</span>(props);    <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;&#x27;</span> &#125;;  &#125;  handleChange = <span class="hljs-function">(<span class="hljs-params">event</span>) =&gt;</span> &#123;    <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">text</span>: event.target.value &#125;);  &#125;  handleClick = <span class="hljs-function">() =&gt;</span> &#123;    <span class="hljs-built_in">this</span>.props.addNote(<span class="hljs-built_in">this</span>.state);    <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;&#x27;</span> &#125;);  &#125;  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;    <span class="hljs-keyword">return</span> (      &lt;div style=&#123;styles.form&#125;&gt;        &lt;input          value=&#123;<span class="hljs-built_in">this</span>.state.text&#125;          onChange=&#123;<span class="hljs-built_in">this</span>.handleChange&#125;          placeholder=<span class="hljs-string">&quot;New Note&quot;</span>          style=&#123;styles.input&#125;        /&gt;        &lt;button onClick=&#123;<span class="hljs-built_in">this</span>.handleClick&#125; style=&#123;styles.addButton&#125;&gt;Add Note&lt;/button&gt;      &lt;/div&gt;    );  &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NotesList</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;    <span class="hljs-keyword">return</span> (      &lt;div&gt;        &#123;<span class="hljs-built_in">this</span>.props.notes.map(<span class="hljs-function"><span class="hljs-params">note</span> =&gt;</span>          &lt;div key=&#123;note.id&#125; style=&#123;styles.note&#125;&gt;            &lt;p&gt;&#123;note.text&#125;&lt;/p&gt;            &lt;button onClick=&#123;<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-built_in">this</span>.props.deleteNote(note) &#125;&#125; style=&#123;styles.deleteButton&#125;&gt;x&lt;/button&gt;          &lt;/div&gt;        )&#125;      &lt;/div&gt;    );  &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Component</span> </span>&#123;  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;    <span class="hljs-built_in">super</span>(props);    <span class="hljs-built_in">this</span>.state = &#123; <span class="hljs-attr">notes</span>: [] &#125;;  &#125;  <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span> &#123;    <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">await</span> API.graphql(graphqlOperation(listNotes));    <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">notes</span>: result.data.listNotes.items &#125;);  &#125;  deleteNote = <span class="hljs-keyword">async</span> (note) =&gt; &#123;    <span class="hljs-keyword">const</span> id = &#123;      id: note.id    &#125;;    <span class="hljs-keyword">await</span> API.graphql(graphqlOperation(deleteNote, &#123; <span class="hljs-attr">input</span>: id &#125;));    <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">notes</span>: <span class="hljs-built_in">this</span>.state.notes.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.id !== note.id) &#125;);  &#125;  addNote = <span class="hljs-keyword">async</span> (note) =&gt; &#123;    <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">await</span> API.graphql(graphqlOperation(createNote, &#123; <span class="hljs-attr">input</span>: note &#125;));    <span class="hljs-built_in">this</span>.state.notes.push(result.data.createNote);    <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">notes</span>: <span class="hljs-built_in">this</span>.state.notes &#125;);  &#125;  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;    <span class="hljs-keyword">return</span> (      &lt;div style=&#123;styles.container&#125;&gt;        &lt;h1&gt;Notes App&lt;/h1&gt;        &lt;AddNote addNote=&#123;<span class="hljs-built_in">this</span>.addNote&#125; /&gt;        &lt;NotesList notes=&#123;<span class="hljs-built_in">this</span>.state.notes&#125; deleteNote=&#123;<span class="hljs-built_in">this</span>.deleteNote&#125; /&gt;        &lt;AmplifySignOut /&gt;      &lt;/div&gt;    );  &#125;&#125;<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> withAuthenticator(App);<span class="hljs-keyword">const</span> styles = &#123;  container: &#123; <span class="hljs-attr">width</span>: <span class="hljs-number">480</span>, <span class="hljs-attr">margin</span>: <span class="hljs-string">&#x27;0 auto&#x27;</span>, <span class="hljs-attr">padding</span>: <span class="hljs-number">20</span> &#125;,  form: &#123; <span class="hljs-attr">display</span>: <span class="hljs-string">&#x27;flex&#x27;</span>, <span class="hljs-attr">marginBottom</span>: <span class="hljs-number">15</span> &#125;,  input: &#123; <span class="hljs-attr">flexGrow</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">border</span>: <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;#ddd&#x27;</span>, <span class="hljs-attr">padding</span>: <span class="hljs-number">12</span>, <span class="hljs-attr">fontSize</span>: <span class="hljs-number">18</span> &#125;,  addButton: &#123; <span class="hljs-attr">backgroundColor</span>: <span class="hljs-string">&#x27;black&#x27;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;white&#x27;</span>, <span class="hljs-attr">outline</span>: <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-attr">padding</span>: <span class="hljs-number">12</span>, <span class="hljs-attr">fontSize</span>: <span class="hljs-number">18</span> &#125;,  note: &#123; <span class="hljs-attr">display</span>: <span class="hljs-string">&#x27;flex&#x27;</span>, <span class="hljs-attr">justifyContent</span>: <span class="hljs-string">&#x27;space-between&#x27;</span>, <span class="hljs-attr">alignItems</span>: <span class="hljs-string">&#x27;center&#x27;</span>, <span class="hljs-attr">fontSize</span>: <span class="hljs-number">22</span>, <span class="hljs-attr">marginBottom</span>: <span class="hljs-number">15</span> &#125;,  deleteButton: &#123; <span class="hljs-attr">fontSize</span>: <span class="hljs-number">18</span>, <span class="hljs-attr">fontWeight</span>: <span class="hljs-string">&#x27;bold&#x27;</span> &#125;&#125;</code></pre><p>重新运行</p><pre><code class="hljs bash">% npm start</code></pre><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amplify-started/010-app-input.png" alt="010-app-input" style="zoom:67%;margin-left: 0;"><p>添加到DynamoDB中的数据.可以在控制台查看</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amplify-started/011-dynamodb.png" alt="011-dynamodb"></p><h4 id="3-自动化部署"><a href="#3-自动化部署" class="headerlink" title="3.自动化部署"></a>3.自动化部署</h4><p>您将应用程序存储在 GitHub 存储库 (简称存储库) 上，然后使用 Amplify 控制台设置持续部署.</p><ul><li>将 Github 存储库连接到 Amplify.</li><li>使用 Amplify 设置持续部署.</li></ul><h5 id="在-Github-上存储项目"><a href="#在-Github-上存储项目" class="headerlink" title="在 Github 上存储项目"></a>在 Github 上存储项目</h5><p>在设置项目以自动部署更新之前，您需要将项目托管在某个位置.<br>本指南假设您熟悉 GitHub、拥有相应的账户并知悉如何创建新的私有存储库. 请创建一个私有存储库，并且将迄今为止创建的代码推送到该存储库.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amplify-started/012-github.png" alt="012-github"></p><h5 id="设置持续部署"><a href="#设置持续部署" class="headerlink" title="设置持续部署"></a>设置持续部署</h5><p>要配置 Amplify 以部署您的代码，您需要将其与自己的 GitHub 账户连接.<br>通过 AWS 控制台完成此连接，因为它需要生成一个 GitHub 令牌来访问您的私有存储库，并将其存储在您的 AWS 账户中.<br>为此，请从 <strong>amplify-app</strong> 目录运行 <strong>amplify add hosting</strong>. Amplify 将显示有关托管的问题列表，请选择如下所示的选项：</p><pre><code class="hljs bash">% amplify add hosting</code></pre><p>这将在您的浏览器中开启新窗口，并打开 Amplify 控制台，以便您在项目上配置托管.<br>在 Amplify 控制台上的应用程序页面上，单击<strong>前端环境</strong>选项卡，选择 <strong>GitHub</strong> 并单击<strong>连接分支</strong>按钮.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amplify-started/013-github-setting.png" alt="013-github-setting"></p><p>下一步是为您的应用程序配置构建设置。您将需要一个 IAM 服务角色，该角色可让 Amplify 访问您账户内的 AWS 资源以自动部署.<br>在“配置构建设置”页面上，单击蓝色框内的<strong>新建角色</strong>按钮.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amplify-started/014-create-amplify-role.png" alt="014-create-amplify-role"></p><p>这将在新选项卡上打开 IAM 控制台并将填充所需的值，在其中单击<strong>创建角色</strong>：</p><ul><li>受信任实体的类型：AWS 服务</li><li>服务：Amplify</li><li>使用案例：Amplify - 后端部署</li><li>权限策略：AdministratorAccess-Amplify</li></ul><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amplify-started/015-amplify-role.png" alt="015-amplify-role" style="zoom:67%; margin-left: 0;"><p>完成创建之后，您可以在浏览器中关闭此选项卡，然后返回“配置构建设置”页面，单击“刷新现有角色”，接下来从下拉菜单中选择刚刚创建的角色.<br>然后，从“环境”下拉菜单中选择 <strong>dev</strong> - 这是您在运行 <strong>amplify init</strong> 后于项目上配置 Amplify 时创建的环境.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amplify-started/016-select-role.png" alt="016-select-role" style="zoom:67%;"><p>审查配置的值，然后单击<strong>保存和部署</strong>. Amplify 现在将开始在源存储库更改时自动部署您的 React 应用程序.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amplify-started/017-deploy.png" alt="017-deploy"></p><p>部署完成后，它将在打印显示的 URL 中提供，任何人都可以通过此 URL 访问您的应用程序.</p><p>在本模块中，您学习了如何将私有 GitHub 存储库与 Web 应用程序的代码连接起来，以使用 Amplify 设置自动部署.<br>在下一个模块中，您将学习如何删除刚刚部署的应用程序以及为其创建的所有 AWS 资源.</p><h4 id="4-清理资源"><a href="#4-清理资源" class="headerlink" title="4.清理资源"></a>4.清理资源</h4><p>您现在已完成本指南，但仍需要清理在本指南中创建的资源. 如果您的账户仍在使用免费套餐，则不会产生任何月度费用.<br>在免费套餐范围之外，如果不进行 API 调用，则不会产生任何费用，仅当使用该应用程序时才会产生费用. 请参阅 <a href="https://aws.amazon.com/appsync/pricing/">AWS AppSync 定价页面</a>以获取详细信息.<br>您现在将删除应用程序以及在 AWS 上为其创建的所有资源.</p><pre><code class="hljs bash">% amplify delete</code></pre><p>看到项目在云中被删除时，即表示您的所有资源都已得到删除.</p><p><u><strong>PS: 本文为记录, 仅供学习与参考!</strong></u></p>]]></content>
    
    
    <categories>
      
      <category>aws</category>
      
      <category>amplify</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aws</tag>
      
      <tag>amplify</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aws-cdk-学习一</title>
    <link href="/2021/12/31/aws-cdk-started/"/>
    <url>/2021/12/31/aws-cdk-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="aws-cdk-学习一"><a href="#aws-cdk-学习一" class="headerlink" title="aws-cdk-学习一"></a>aws-cdk-学习一</h3><h4 id="1-安装cdk"><a href="#1-安装cdk" class="headerlink" title="1.安装cdk"></a>1.安装cdk</h4><pre><code class="hljs bash">% npm install -g aws-cdk</code></pre><p>验证 : </p><pre><code class="hljs bash">% cdk --version!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!                                                                                                          !!!!  Node v14.4.0 is not supported. Early releases a node major often lack essential features of that line.  !!!!  You may to encounter runtime issues, and should switch to a supported release.                          !!!!                                                                                                          !!!!  As of the current release, supported versions of node are:                                              !!!!  - ^12.7.0                                                                                               !!!!  - ^14.5.0                                                                                               !!!!  - ^16.3.0                                                                                               !!!!                                                                                                          !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</code></pre><p>解决<u>版本差异</u>, 升级到指定版本: 16.3.0</p><pre><code class="hljs bash">% npm cache% npm cache clean -f% sudo npm install -g n% sudo n 16.3.0% node -vv16.3.0% cdk --version2.3.0 (build beaa5b2)</code></pre><h4 id="2-引导启动AWS账户"><a href="#2-引导启动AWS账户" class="headerlink" title="2.引导启动AWS账户"></a>2.引导启动AWS账户</h4><p>您将要部署的许多 AWS CDK 堆栈会包括资产以及与堆栈一起部署的外部文件，例如 AWS Lambda 函数或 Docker 镜像.<br>CDK 将这些资产上传到 Amazon S3 存储桶或其他容器，以便它们在部署期间可供 AWS CloudFormation 使用.<br>部署工作要求 AWS 账户和所要部署到的区域中已经存在这些容器. 创建这些容器的过程称为引导启动。要引导启动您的 AWS 账户 (和给定<a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions"><strong>区域</strong></a>).</p><pre><code class="hljs bash">% aws sts get-caller-identity</code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-cdk-started/001-aws-get-caller.png" alt="001-aws-get-caller"></p><pre><code class="hljs bash">% cdk bootstrap aws://ACCOUNT-NUMBER/REGION</code></pre><pre><code class="hljs bash">ap-northeast-1</code></pre><h4 id="3-创建第一个CDK项目"><a href="#3-创建第一个CDK项目" class="headerlink" title="3.创建第一个CDK项目"></a>3.创建第一个CDK项目</h4><ul><li>使用 TypeScript 新建 CDK 项目.</li><li>在 CDK (VPC) 中编写一个简单的资源.</li><li>将您的 CDK 代码合成为 CloudFormation 模板.</li><li>将基础设施部署到您的 AWS 账户中.</li></ul><h5 id="初始项目"><a href="#初始项目" class="headerlink" title="初始项目"></a>初始项目</h5><p>要新建 CDK 项目，我们将使用 CDK CLI.<br>首先，在您的系统上创建一个空目录并更改到该目录位置。现在我们将使用 <strong>cdk init</strong> 新建一个 TypeScript CDK 项目.</p><pre><code class="hljs bash">cdk % <span class="hljs-built_in">cd</span> cdk-democdk-demo % lscdk-demo % cdk init --language typescriptApplying project template app <span class="hljs-keyword">for</span> typescript<span class="hljs-comment"># Welcome to your CDK TypeScript project!</span>This is a blank project <span class="hljs-keyword">for</span> TypeScript development with CDK.The `cdk.json` file tells the CDK Toolkit how to execute your app.<span class="hljs-comment">## Useful commands</span> * `npm run build`   compile typescript to js * `npm run watch`   watch <span class="hljs-keyword">for</span> changes and compile * `npm run <span class="hljs-built_in">test</span>`    perform the jest unit tests * `cdk deploy`      deploy this stack to your default AWS account/region * `cdk diff`        compare deployed stack with current state * `cdk synth`       emits the synthesized CloudFormation templateInitializing a new git repository...Executing npm install...npm WARN deprecated urix@0.1.0: Please see https://github.com/lydell/urix<span class="hljs-comment">#deprecated</span>npm WARN deprecated resolve-url@0.2.1: https://github.com/lydell/resolve-url<span class="hljs-comment">#deprecated</span>npm WARN deprecated sane@4.1.0: some dependency vulnerabilities fixed, support <span class="hljs-keyword">for</span> node &lt; 10 dropped, and newer ECMAScript syntax/features added✅ All <span class="hljs-keyword">done</span>!</code></pre><p>要开始构建项目，常见的起点是创建一个所定义的逻辑隔离虚拟网络，称为 <a href="https://aws.amazon.com/vpc"><strong>Amazon Virtual Private Cloud</strong></a> (VPC).<br>在创建第一个 VPC 之前，我们需要了解 <strong>cdk init</strong> 命令创建的文件.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-cdk-started/002-cdk-file.png" alt="002-cdk-file"></p><p>以下是一些重要文件及其用途：</p><ul><li><strong>bin/cdk-project.ts</strong> - 这是 CDK 应用程序的入口点. 这将加载/创建我们在 <strong>lib/*</strong> 下定义的所有堆栈.</li><li><strong>lib/cdk-project-stack.ts</strong> - 在此文件中定义主要的 CDK 应用程序堆栈. 您的资源及其属性可以放在此文件中.</li><li><strong>package.json</strong> - 在此文件中定义项目依赖项以及一些附加信息和构建脚本 (<strong>npm build</strong>、<strong>npm test</strong>、<strong>npm watch</strong>).</li><li><strong>cdk.json</strong> - 此文件告诉工具包如何运行您的应用程序以及一些与 CDK 和项目相关的附加设置和参数.</li></ul><p>对于本指南，我们将重点关注 <strong>lib/cdk-demo.ts</strong> 和 <strong>bin/cdk-demo.ts</strong> 文件来创建我们的基础设施. 接下来添加一些代码.</p><h5 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h5><p>在主堆栈中定义我们的 VPC 之前，我们需要确保部署到正确的账户和区域.<br>虽然 CDK 将从您的本地 <strong>aws cli</strong> 配置中提取此信息，但最好在 CDK 代码中手动配置，以避免在该配置更改时出现错误值.<br>对于本指南，由于我们将在 VPC 中定义一些设置，因此这是必需的信息.<br>如果您不指定此信息，堆栈将与环境无关，但某些功能和上下文查找将不起作用。有关更多信息，请参阅文档中的<a href="https://docs.aws.amazon.com/cdk/latest/guide/environments.html"><strong>环境</strong></a>.</p><p>修改您的 <strong>bin/cdk-demo.ts</strong> 堆栈，使其看起来类似于如下.<br>务必使用正确的编号替换您的 AWS 账户 ID，同时选择正确的区域。我们建议为本指南选择 <strong>us-east-1</strong> 或 <strong>eu-west-1</strong></p><pre><code class="hljs typescript"><span class="hljs-meta">#!/usr/bin/env node</span><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;source-map-support/register&#x27;</span>;<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> cdk <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@aws-cdk/core&#x27;</span>;<span class="hljs-keyword">import</span> &#123; CdkDemoStack &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../lib/cdk-demo-stack&#x27;</span>;<span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> cdk.App();<span class="hljs-keyword">new</span> CdkDemoStack(app, <span class="hljs-string">&#x27;CdkDemoStack&#x27;</span>, &#123;  <span class="hljs-comment">// env: &#123; account: &#x27;123456789012&#x27;, region: &#x27;eu-west-1&#x27; &#125;,</span>  env: &#123; <span class="hljs-attr">account</span>: <span class="hljs-string">&#x27;096897338309&#x27;</span>, <span class="hljs-attr">region</span>: <span class="hljs-string">&#x27;ap-northeast-1&#x27;</span> &#125;,&#125;);</code></pre><h5 id="配置vpc"><a href="#配置vpc" class="headerlink" title="配置vpc"></a>配置vpc</h5><p>我们将创建一个 VPC，它带有两个面向公众的子网，分布在两个可用区中.<br>在深入探讨代码的编写之前，我们需要解释和安装<a href="https://docs.aws.amazon.com/cdk/api/latest/docs/aws-construct-library.html"><strong>构造库**</strong>模块**</a>.<br>将不同的服务打包到各个模块中，这样就可仅添加正在预置的基础设施所需的依赖项.<br>模块可以用于单个服务，例如 <a href="https://docs.aws.amazon.com/cdk/api/latest/docs/aws-amplify-readme.html"><strong>AWS Amplify</strong></a>；也可用于多个服务，例如 <a href="https://docs.aws.amazon.com/cdk/api/latest/docs/aws-ec2-readme.html"><strong>Amazon EC2</strong></a>.<br>对于本指南，我们将需要 Amazon EC2 模块，该模块中还包括对 AWS VPC 的支持.</p><pre><code class="hljs bash">% npm install @aws-cdk/aws-ec2</code></pre><p>这将安装我们使用的所有必要模块. 如果查看您的 <strong>package.json</strong>，就会看到该文件也添加到此处.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-cdk-started/003-cdk-package.png" alt="003-cdk-package" style="zoom:67%;margin-left: 0;"></p><p>现在，我们已准备好创建自己的 VPC. 打开 <strong>lib/cdk-demo.ts</strong> 中的堆栈定义.</p><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> cdk <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@aws-cdk/core&#x27;</span>;<span class="hljs-keyword">import</span> &#123; Vpc, SubnetType &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@aws-cdk/aws-ec2&#x27;</span>;<span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CdkDemoStack</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">cdk</span>.<span class="hljs-title">Stack</span> </span>&#123;  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">scope: cdk.Construct, id: string, props?: cdk.StackProps</span>)</span> &#123;    <span class="hljs-built_in">super</span>(scope, id, props);    <span class="hljs-comment">// The code that defines your stack goes here</span>    <span class="hljs-comment">// CHANGE: We have created the vpc object from the Vpc class.</span>    <span class="hljs-keyword">const</span> vpc = <span class="hljs-keyword">new</span> Vpc(<span class="hljs-built_in">this</span>, <span class="hljs-string">&#x27;MainVpc&#x27;</span>,&#123;    <span class="hljs-comment">// CHANGE: this is where we define how many AZs to use</span>    maxAzs: <span class="hljs-number">2</span>,   <span class="hljs-comment">// CHANGE: We define a single subnet configuration per AZ.</span>      subnetConfiguration:  [        &#123;          <span class="hljs-comment">// CHANGE: this is it&#x27;s CIDR mask so 255.255.255.0</span>          cidrMask: <span class="hljs-number">24</span>,          <span class="hljs-comment">// CHANGE: a name for each of these subnets</span>          name: <span class="hljs-string">&#x27;public-subnet&#x27;</span>,          <span class="hljs-comment">// CHANGE: and the subnet type to be used - here we will have</span>          <span class="hljs-comment">// a public subnet. There are other options available here.</span>          subnetType: SubnetType.PUBLIC        &#125;,      ]    &#125;);  &#125;&#125;</code></pre><h5 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h5><pre><code class="hljs bash">% npm run build</code></pre><h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><pre><code class="hljs bash">% cdk deployCdkDemoStack: deploying...CdkDemoStack: creating CloudFormation changeset... ✅  CdkDemoStackStack ARN:arn:aws:cloudformation:ap-northeast-1:xxxxx:stack/CdkDemoStack/cba08ea0-6a39-11ec-a484-064a0xxxxxx</code></pre><p>控制台查看 : </p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-cdk-started/004-vpc.png" alt="004-vpc"></p><h5 id="清理资源"><a href="#清理资源" class="headerlink" title="清理资源"></a>清理资源</h5><pre><code class="hljs bash">% cdk destroyAre you sure you want to delete: CdkDemoStack (y/n)? yCdkDemoStack: destroying... ✅  CdkDemoStack: destroyed</code></pre><p><u><strong>PS: 本文为记录, 仅供学习与参考!</strong></u></p>]]></content>
    
    
    <categories>
      
      <category>aws</category>
      
      <category>cdk</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aws</tag>
      
      <tag>cdk</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开源项目记录一</title>
    <link href="/2021/12/31/mit-projects-started/"/>
    <url>/2021/12/31/mit-projects-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="开源项目记录一"><a href="#开源项目记录一" class="headerlink" title="开源项目记录一"></a>开源项目记录一</h3><h4 id="1-D2admin"><a href="#1-D2admin" class="headerlink" title="1.D2admin"></a>1.D2admin</h4><pre><code class="hljs bash">https://github.com/d2-projects/d2-admin</code></pre><h4 id="2-vue-element-admin"><a href="#2-vue-element-admin" class="headerlink" title="2.vue-element-admin"></a>2.vue-element-admin</h4><pre><code class="hljs bash">https://github.com/PanJiaChen/vue-element-admin</code></pre><h4 id="3-JEECG-BOOT"><a href="#3-JEECG-BOOT" class="headerlink" title="3.JEECG-BOOT"></a>3.JEECG-BOOT</h4><pre><code class="hljs bash">https://github.com/zhangdaiscott/jeecg-boot</code></pre><h4 id="4-GIN-VUE-ADMIN"><a href="#4-GIN-VUE-ADMIN" class="headerlink" title="4.GIN-VUE-ADMIN"></a>4.GIN-VUE-ADMIN</h4><pre><code class="hljs bash">https://github.com/flipped-aurora/gin-vue-admin</code></pre><h4 id="5-vue-admin-beautiful"><a href="#5-vue-admin-beautiful" class="headerlink" title="5.vue-admin-beautiful"></a>5.vue-admin-beautiful</h4><pre><code class="hljs bash">https://github.com/chuzhixin/vue-admin-beautiful</code></pre><h4 id="6-Dcat-admin"><a href="#6-Dcat-admin" class="headerlink" title="6.Dcat-admin"></a>6.Dcat-admin</h4><pre><code class="hljs bash">https://github.com/jqhph/dcat-admin</code></pre><h4 id="7-RuoYi"><a href="#7-RuoYi" class="headerlink" title="7.RuoYi"></a>7.RuoYi</h4><pre><code class="hljs bash">https://gitee.com/y_project/RuoYi</code></pre><h4 id="8-renren-fast-vue"><a href="#8-renren-fast-vue" class="headerlink" title="8.renren-fast-vue"></a>8.renren-fast-vue</h4><pre><code class="hljs bash">https://gitee.com/renrenio/renren-fast-vue</code></pre><h4 id="9-ant-design-pro"><a href="#9-ant-design-pro" class="headerlink" title="9.ant-design-pro"></a>9.ant-design-pro</h4><pre><code class="hljs bash">https://github.com/ant-design/ant-design-pro</code></pre><h4 id="10-iview-admin"><a href="#10-iview-admin" class="headerlink" title="10.iview-admin"></a>10.iview-admin</h4><pre><code class="hljs bash">https://github.com/iview/iview-admin</code></pre><h4 id="11-material-dashboard"><a href="#11-material-dashboard" class="headerlink" title="11.material-dashboard"></a>11.material-dashboard</h4><pre><code class="hljs bash">https://github.com/creativetimofficial/material-dashboard<span class="hljs-comment">#demo</span></code></pre><h4 id="12-EAdmin"><a href="#12-EAdmin" class="headerlink" title="12.EAdmin"></a>12.EAdmin</h4><pre><code class="hljs bash">https://github.com/suruibuas/eadmin</code></pre><p><u><strong>PS: 本文摘录于公众号, 仅供学习与参考!</strong></u></p>]]></content>
    
    
    <categories>
      
      <category>mit</category>
      
      <category>project</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mit</tag>
      
      <tag>project</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Aws-dynamoDB-python-sdk-学习一</title>
    <link href="/2021/12/28/aws-dynamoDB-sdk-started/"/>
    <url>/2021/12/28/aws-dynamoDB-sdk-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Aws-dynamoDB-python-sdk-学习一"><a href="#Aws-dynamoDB-python-sdk-学习一" class="headerlink" title="Aws-dynamoDB-python-sdk-学习一"></a>Aws-dynamoDB-python-sdk-学习一</h3><h4 id="1-工作流程"><a href="#1-工作流程" class="headerlink" title="1.工作流程"></a>1.工作流程</h4><p>高度概述了使用 AWS SDK 编程 Amazon DynamoDB 应用程序.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-dynamoDB-sdk-started/001-sdk-dynamodb.png" alt="001-sdk-dynamodb" style="zoom:67%; margin-left: 0;"><ol><li>使用适用于您的编程语言的 AWS SDK 编写一个应用程序.</li><li>每个 AWS 开发工具包提供一个或多个编程接口，用于使用 DynamoDB. 可用的具体接口取决于您使用的编程语言和 AWS SDK.</li><li>AWS SDK 构造 HTTP(S) 请求，以便与低级 DynamoDB API 一起使用.</li><li>AWS SDK 将请求发送到 DynamoDB 终端节点.</li><li>DynamoDB 运行请求. 如果请求成功，则 DynamoDB 将返回 HTTP 200 响应代码（确定）.<br>如果请求不成功，DynamoDB 将返回 HTTP 错误代码和错误消息.</li><li>AWS SDK 处理响应并将其传播回您的应用程序.</li></ol><p>每个 AWS SDK 为您的应用程序提供重要服务，包括以下内容：</p><ul><li>设置 HTTP(S) 请求格式和序列化请求参数.</li><li>为每个请求生成加密签名.</li><li>将请求转发到 DynamoDB 端点并接收来自 DynamoDB 的响应.</li><li>从这些响应中提取结果.</li><li>在出现错误时实现基本重试逻辑.</li></ul><h4 id="2-安装AWS-Toolkit-for-JetBrains"><a href="#2-安装AWS-Toolkit-for-JetBrains" class="headerlink" title="2.安装AWS Toolkit for JetBrains"></a>2.安装AWS Toolkit for JetBrains</h4><p><strong>安装和配置适用于 JetBrains 的 AWS 工具包</strong></p><ol><li>确保<a href="https://docs.aws.amazon.com/zh_cn/toolkit-for-jetbrains/latest/userguide/welcome.html#supported-ides">AWS 工具包支持的 JetBrains IDE</a>已安装并正在运行.</li><li>打开 <strong>Settings (设置)</strong>/<strong>Preferences (首选项)</strong>.</li><li>选择 <strong>Plugins (插件)</strong>.</li><li>在存储库的<strong>Marketplace</strong>选项卡，在<strong>在商城中搜索插件</strong>，开始输入<em>AWS Toolkit</em>.  <strong>Amazon Web Services</strong>，然后选择它.</li></ol><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-dynamoDB-sdk-started/002-ide-plugin.png" alt="002-ide-plugin" style="zoom:67%;"><h5 id="访问凭证文件"><a href="#访问凭证文件" class="headerlink" title="访问凭证文件"></a>访问凭证文件</h5><p>AWS 安全凭证 — 创建了<a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html">访问密钥</a>（其中包含<em>访问密钥 ID</em>值和<em>私有访问密钥</em>值），或 AWS 账户根用户（我们强烈建议这样做）.<br>如果您没有 IAM 中用户的访问密钥，请<a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey">创建一个</a>.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-dynamoDB-sdk-started/003-ide-access-key.png" alt="003-ide-access-key" style="zoom:80%; margin-left: 0;"><h4 id="3-适用于-Python-的-AWS-开发工具包-Boto3"><a href="#3-适用于-Python-的-AWS-开发工具包-Boto3" class="headerlink" title="3.适用于 Python 的 AWS 开发工具包 (Boto3)"></a>3.适用于 Python 的 AWS 开发工具包 (Boto3)</h4><h5 id="安装Boto3"><a href="#安装Boto3" class="headerlink" title="安装Boto3"></a>安装Boto3</h5><pre><code class="hljs bash">pip install boto3</code></pre><h5 id="操作s3"><a href="#操作s3" class="headerlink" title="操作s3"></a>操作<code>s3</code></h5><pre><code class="hljs python"><span class="hljs-keyword">import</span> boto3s3 = boto3.resource(<span class="hljs-string">&#x27;s3&#x27;</span>)<span class="hljs-keyword">for</span> bucket <span class="hljs-keyword">in</span> s3.buckets.<span class="hljs-built_in">all</span>():    print(bucket.name)</code></pre><p>运行结果 : </p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-dynamoDB-sdk-started/005-run-s3.png" alt="005-run-s3"></p><p>查看<code>s3</code>的控制台, 查看结果是否正确: </p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-dynamoDB-sdk-started/004-py-s3.png" alt="004-py-s3" style="zoom:67%;"><p>上传图片 : </p><pre><code class="hljs python"><span class="hljs-comment"># 上传图片.</span>data = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;../data/001_test.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>)s3.Bucket(<span class="hljs-string">&#x27;awscodepipeline-iplume-demobucket-example-date&#x27;</span>).put_object(Key=<span class="hljs-string">&#x27;001_test.png&#x27;</span>, Body=data)</code></pre><p>查看结果 : </p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-dynamoDB-sdk-started/006-s3-upload-img.png" alt="006-s3-upload-img"></p><h4 id="4-操作DynamoDB"><a href="#4-操作DynamoDB" class="headerlink" title="4.操作DynamoDB"></a>4.操作DynamoDB</h4><h5 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h5><pre><code class="hljs python"><span class="hljs-comment">#! /usr/bin/python3</span><span class="hljs-comment"># -*- coding:utf-8 -*-</span><span class="hljs-comment"># @Prescription:</span><span class="hljs-comment"># 通过遵循本指南，您将学习如何使用DynamoDB.</span><span class="hljs-comment"># ServiceResource和DynamoDB. 表资源，以便创建表、将项写入表、修改现有项、检索项以及查询/筛选表中的项.</span><span class="hljs-keyword">import</span> boto3<span class="hljs-comment"># 获取DynamoDB服务.</span>dynamodb = boto3.resource(<span class="hljs-string">&#x27;dynamodb&#x27;</span>)<span class="hljs-comment"># 创建DynamoDB表.</span>table = dynamodb.create_table(    TableName=<span class="hljs-string">&#x27;users&#x27;</span>,    KeySchema=[        &#123;            <span class="hljs-string">&#x27;AttributeName&#x27;</span>: <span class="hljs-string">&#x27;username&#x27;</span>,            <span class="hljs-string">&#x27;KeyType&#x27;</span>: <span class="hljs-string">&#x27;HASH&#x27;</span>        &#125;,        &#123;            <span class="hljs-string">&#x27;AttributeName&#x27;</span>: <span class="hljs-string">&#x27;last_name&#x27;</span>,            <span class="hljs-string">&#x27;KeyType&#x27;</span>: <span class="hljs-string">&#x27;RANGE&#x27;</span>        &#125;    ],    AttributeDefinitions=[        &#123;            <span class="hljs-string">&#x27;AttributeName&#x27;</span>: <span class="hljs-string">&#x27;username&#x27;</span>,            <span class="hljs-string">&#x27;AttributeType&#x27;</span>: <span class="hljs-string">&#x27;S&#x27;</span>        &#125;,        &#123;            <span class="hljs-string">&#x27;AttributeName&#x27;</span>: <span class="hljs-string">&#x27;last_name&#x27;</span>,            <span class="hljs-string">&#x27;AttributeType&#x27;</span>: <span class="hljs-string">&#x27;S&#x27;</span>        &#125;    ],    ProvisionedThroughput=&#123;        <span class="hljs-string">&#x27;ReadCapacityUnits&#x27;</span>: <span class="hljs-number">5</span>,        <span class="hljs-string">&#x27;WriteCapacityUnits&#x27;</span>: <span class="hljs-number">5</span>    &#125;)<span class="hljs-comment"># 等待直到table存在.</span>table.meta.client.get_waiter(<span class="hljs-string">&#x27;table_exists&#x27;</span>).wait(TableName=<span class="hljs-string">&#x27;users&#x27;</span>)<span class="hljs-comment"># 查看表中的数据.</span>print(table.item_count)<span class="hljs-comment"># 这将创建一个名为users的表，该表分别具有哈希主键username和range主键last_name.</span><span class="hljs-comment"># 此方法将返回DynamoDB. 表资源来调用所创建表上的其他方法.</span></code></pre><p>出错 : </p><pre><code class="hljs bash">Read timeout on endpoint URL: <span class="hljs-string">&quot;https://dynamodb.ap-northeast-1.amazonaws.com/&quot;</span></code></pre><p>可以是自己网络访问不了国外站点.</p><p>运行结果 : </p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-dynamoDB-sdk-started/007-run-dynamodb.png" alt="007-run-dynamodb"></p><p>在控制台查看结果 : </p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-dynamoDB-sdk-started/008-console-dynamodb.png" alt="008-console-dynamodb"></p><h5 id="插入表项目"><a href="#插入表项目" class="headerlink" title="插入表项目"></a>插入表项目</h5><pre><code class="hljs python"><span class="hljs-comment">#! /usr/bin/python3</span><span class="hljs-comment"># -*- coding:utf-8 -*-</span><span class="hljs-comment"># @Prescription:</span><span class="hljs-keyword">import</span> boto3<span class="hljs-comment"># 获取dynamodb资源.</span>dynamodb = boto3.resource(<span class="hljs-string">&#x27;dynamodb&#x27;</span>)<span class="hljs-comment"># 获取表名.</span>table = dynamodb.Table(<span class="hljs-string">&#x27;users&#x27;</span>)<span class="hljs-comment"># 打印创建时间.</span>print(table.creation_date_time)<span class="hljs-comment"># 创建一个项目.</span>table.put_item(    Item=&#123;        <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;janedoe&#x27;</span>,        <span class="hljs-string">&#x27;first_name&#x27;</span>: <span class="hljs-string">&#x27;Jane&#x27;</span>,        <span class="hljs-string">&#x27;last_name&#x27;</span>: <span class="hljs-string">&#x27;Doe&#x27;</span>,        <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">25</span>,        <span class="hljs-string">&#x27;account_type&#x27;</span>: <span class="hljs-string">&#x27;standard_user&#x27;</span>    &#125;)</code></pre><p>运行结果 : </p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-dynamoDB-sdk-started/010-runtime-put-item.png" alt="010-runtime-put-item"></p><p>控制台查看结果 : </p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-dynamoDB-sdk-started/009-put-item.png" alt="009-put-item"></p><h5 id="获取表项目"><a href="#获取表项目" class="headerlink" title="获取表项目"></a>获取表项目</h5><pre><code class="hljs python"><span class="hljs-comment">#! /usr/bin/python3</span><span class="hljs-comment"># -*- coding:utf-8 -*-</span><span class="hljs-comment"># @Prescription:</span><span class="hljs-keyword">import</span> boto3dynamodb = boto3.resource(<span class="hljs-string">&#x27;dynamodb&#x27;</span>)table = dynamodb.Table(<span class="hljs-string">&#x27;users&#x27;</span>)response = table.get_item(    Key=&#123;        <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;janedoe&#x27;</span>,        <span class="hljs-string">&#x27;last_name&#x27;</span>: <span class="hljs-string">&#x27;Doe&#x27;</span>    &#125;)item = response[<span class="hljs-string">&#x27;Item&#x27;</span>]print(item)</code></pre><p>运行结果 : </p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-dynamoDB-sdk-started/011-runtime-get-item.png" alt="011-runtime-get-item"></p><p><u><strong>PS: 本文为学习记录, 仅供学习与参与!</strong></u></p>]]></content>
    
    
    <categories>
      
      <category>aws</category>
      
      <category>sdk</category>
      
      <category>dynamoDB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aws</tag>
      
      <tag>sdk</tag>
      
      <tag>dynamoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aws-amazon-dynamoDB-学习一</title>
    <link href="/2021/12/27/aws-amazon-dynamoDB-started/"/>
    <url>/2021/12/27/aws-amazon-dynamoDB-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="aws-amazon-dynamoDB-学习一"><a href="#aws-amazon-dynamoDB-学习一" class="headerlink" title="aws-amazon-dynamoDB-学习一"></a>aws-amazon-dynamoDB-学习一</h3><h4 id="一-什么是-Amazon-DynamoDB"><a href="#一-什么是-Amazon-DynamoDB" class="headerlink" title="一. 什么是 Amazon DynamoDB"></a>一. 什么是 Amazon DynamoDB</h4><p>Amazon DynamoDB 是一种完全托管的 NoSQL 数据库服务，提供快速而可预测的性能，能够实现无缝扩展.<br>DynamoDB 可以免除操作和扩展分布式数据库的管理工作负担，因而无需担心硬件预置、设置和配置、复制、软件修补或集群扩展等问题.<br>此外，DynamoDB 提供了加密静态，这可以消除在保护敏感数据时涉及的操作负担和复杂性.</p><p>您可以使用 DynamoDB 创建一个数据库表来存储和检索任意量级的数据，并支持任何级别的请求流量.<br>您可以在不停机或性能下降的情况下扩展或缩小表的吞吐容量. 可以使用 AWS Management Console 监控资源利用率和性能指标.</p><p>DynamoDB 提供了按需备份功能. 它允许您创建表的完整备份以进行长期保留和存档，从而满足监管合规性需求.<br>DynamoDB 允许您自动从表中删除过期项目，以帮助您减少存储使用量和存储不再相关数据的成本.</p><h4 id="二-核心组件"><a href="#二-核心组件" class="headerlink" title="二. 核心组件"></a>二. 核心组件</h4><h5 id="表-项目-属性"><a href="#表-项目-属性" class="headerlink" title="表, 项目, 属性"></a>表, 项目, 属性</h5><p>在 DynamoDB 中，表、项目和属性是您使用的核心组件. <u><strong>表是项目的集合</strong></u>，而每个<u><strong>项目是属性的集合</strong></u>.<br>DynamoDB 使用主键来唯一标识表中的每个项目，并使用二级索引来提供更具灵活性的查询.<br>您可以使用 DynamoDB Streams 捕获 DynamoDB 表中的数据修改事件.</p><ul><li><strong>表</strong> – 类似于其他数据库系统，DynamoDB 将数据存储在表中. 表是数据的集合.<br>例如，请参阅名为 <em>People</em> 的示例表，该表可用于存储有关好友、家人或关注的任何其他人的个人联系信息.<br>您也可以建立一个 <em>Cars</em> 表，存储有关人们所驾驶的车辆的信息.</li><li><strong>项目</strong> – 每个表包含零个或更多个项目. 项目是一组属性，具有不同于所有其他项目的唯一标识.<br>在 <em>People</em> 表中，每个项目表示一位人员. 在 <em>Cars</em> 表中，每个项目代表一种车.<br>DynamoDB 中的项目在很多方面都类似于其他数据库系统中的行、记录或元组. 在 DynamoDB 中，对表中可存储的项目数没有限制.</li><li><strong>属性</strong> – 每个项目包含一个或多个属性. 属性是基础的数据元素，无需进一步分解.<br>例如，<em>People</em> 表中的一个项目包含名为 <em>PersonID</em>、<em>LastName</em>、<em>FirstName</em> 等的属性.<br>对于 <em>Department</em> 表，项目可能包含 <em>DepartmentID</em>、<em>Name</em>、<em>Manager</em> 等属性. DynamoDB 中的属性在很多方面都类似于其他数据库系统中的字段或列.</li></ul><p>下图是一个名为 <em>People</em> 的表，其中显示了一些示例项目和属性: </p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amazon-dynamoDB-started/001_people_table.png" alt="001_people_table" style="zoom:67%; margin-left: 0;"><ul><li>表中的每个项目都有一个唯一的标识符或主键，用于将项目与表中的所有其他内容区分开来. 在 <em>People</em> 表中，主键包含一个属性 (<em>PersonID</em>).</li><li>与主键不同，<em>People</em> 表是无架构的，这表示属性及其数据类型都不需要预先定义. 每个项目都能拥有其自己的独特属性.</li><li>大多数属性是<u><strong>标量</strong></u>类型的，这表示它们只能具有一个值. 字符串和数字是标量的常见示例.</li><li>某些项目具有嵌套属性 (<em>Address</em>). DynamoDB 支持高达 32 级深度的嵌套属性.</li></ul><h5 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h5><p>创建表时，除表名称外，您还必须指定表的主键. 主键唯一标识表中的每个项目，因此，任意两个项目的主键都不相同.</p><p><strong>分区键</strong> – 由一个称为<em>分区键</em>的属性构成的简单主键.</p><p><strong>分区键和排序键</strong> – 称为复合主键，此类型的键由两个属性组成。第一个属性是分区键，第二个属性是排序键.</p><p>在查询数据时，复合主键可让您获得额外的灵活性.</p><h5 id="二级索引"><a href="#二级索引" class="headerlink" title="二级索引"></a>二级索引</h5><p>您可以在一个表上创建一个或多个二级索引. 利用二级索引，除了可对主键进行查询外，还可使用替代键查询表中的数据.<br>DynamoDB 不需要使用索引，为应用程序提供数据查询方面的更大的灵活性. 在表中创建二级索引后，您可以从索引中读取数据，方法与从表中读取数据大体相同.</p><ul><li>全局二级索引 – 分区键和排序键可与基表中的这些键不同的索引.</li><li>本地二级索引 – 分区键与基表相同但排序键不同的索引.</li></ul><p>DynamoDB 中的每个表具有 20 个全局二级索引（默认配额）和 5 个本地二级索引的配额.</p><h5 id="DynamoDB-Streams"><a href="#DynamoDB-Streams" class="headerlink" title="DynamoDB Streams"></a>DynamoDB Streams</h5><p>DynamoDB Streams 是一项可选功能，用于捕获 DynamoDB 表中的数据修改事件. 有关这些事件的数据将以事件发生的顺序近乎实时地出现在流中.<br>每个事件由一条<u>流记录</u>表示。如果您对表启用流，则每当以下事件之一发生时，DynamoDB Streams 都会写入一条流记录：</p><ul><li>向表中添加了新项目：流将捕获整个项目的映像，包括其所有属性.</li><li>更新了项目：流将捕获项目中已修改的任何属性的“之前”和“之后”映像.</li><li>从表中删除了项目：流将在整个项目被删除前捕获其映像.</li></ul><p>每条流记录还包含表的名称、事件时间戳和其他元数据. 流记录具有 24 个小时的生命周期；在此时间过后，它们将从流中自动删除.</p><h4 id="三-DynamoDB-API"><a href="#三-DynamoDB-API" class="headerlink" title="三. DynamoDB API"></a>三. DynamoDB API</h4><h5 id="控制层面"><a href="#控制层面" class="headerlink" title="控制层面"></a>控制层面</h5><p>控制层面 操作可让您可以创建和管理 DynamoDB 表.它们还可让您使用依赖于表的索引、流和其他对象.</p><ul><li><code>CreateTable</code> – 创建新表. 或者，您也可以创建一个或多个二级索引并为表启用 DynamoDB Streams.</li><li><code>DescribeTable</code>– 返回有关表的信息，例如，表的主键架构、吞吐量设置和索引信息.</li><li><code>ListTables</code> – 返回列表中您的所有表的名称.</li><li><code>UpdateTable</code> – 修改表或其索引的设置、创建或删除表上的新索引或修改表的 DynamoDB Streams 设置.</li><li><code>DeleteTable</code> – 从 DynamoDB 中删除表及其所有依赖对象.</li></ul><h5 id="数据层面"><a href="#数据层面" class="headerlink" title="数据层面"></a>数据层面</h5><p>数据层面 操作可让您对表中的数据执行创建、读取、更新和删除（也称为 <em>CRUD</em>）操作. 某些数据层面操作还可从二级索引读取数据.<br>您可以使用<a href="https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/ql-reference.html">PartiQL - 用于 Amazon DynamoDB 的 SQL 兼容语言</a>来执行这些 CRUD 操作，<br>也可以使用 DynamoDB 的经典 CRUD API，将每个操作分离为不同的 API 调用.</p><h4 id="四-命名规则和数据类型"><a href="#四-命名规则和数据类型" class="headerlink" title="四. 命名规则和数据类型"></a>四. 命名规则和数据类型</h4><h5 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h5><p>DynamoDB 中的表、属性和其他对象必须具有名称. 名称应该简明扼要，例如，<em>Products</em>、<em>Books</em> 和 <em>Authors</em> 之类的名称是都是不言而喻的.</p><p>下面是 DynamoDB 的命名规则：</p><ul><li><p>所有名称都必须使用 UTF-8 进行编码，并且区分大小写.</p></li><li><p>表名称和索引名称的长度必须介于 3 到 255 个字符之间，而且只能包含以下字符：</p><ul><li><code>a-z</code></li><li><code>A-Z</code></li><li><code>0-9</code></li><li><code>_</code> (下划线)</li><li><code>-</code> (短划线)</li><li><code>.</code> (圆点)</li></ul></li><li><p>属性名称的长度必须至少为 1 个字符，但不得超过 64 KB.</p><p>存在以下例外。这些属性名称的长度不得超过 255 个字符：</p><ul><li>二级索引分区键名称.</li><li>二级索引排序键名称.</li><li>任意用户指定的投影属性的名称（仅适用于本地二级索引）.</li></ul></li></ul><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><p>DynamoDB 对表中的属性支持很多不同的数据类型. 可按以下方式为属性分类：</p><ul><li><strong>标量类型</strong> - 标量类型可准确地表示一个值. 标量类型包括数字、字符串、二进制、布尔值和 null.</li><li><strong>文档类型</strong> - 文档类型可表示具有嵌套属性的复杂结构，例如您将在 JSON 文档中找到的结构。文档类型包括列表和映射.</li><li><strong>集类型</strong> - 集类型可表示多个标量值. 集类型包括字符串集、数字集和二进制集.</li></ul><p>当您创建表或二级索引时，您必须指定每个主键属性（分区键和排序键）的名称和数据类型. 此外，每个主键属性必须定义为字符串、数字或二进制类型.<br>DynamoDB 是 <u><strong>NoSQL 数据库并且无架构</strong></u>. 这意味着，与主键属性不同，您无需在创建表时定义任何属性或数据类型.<br>与此相对，关系数据库要求您在创建表时定义每个列的名称和数据类型.</p><h4 id="五-从-SQL-到-NoSQL"><a href="#五-从-SQL-到-NoSQL" class="headerlink" title="五.从 SQL 到 NoSQL"></a>五.从 SQL 到 NoSQL</h4><p>如果您是应用程序开发人员，则可能在使用关系数据库管理系统 (RDBMS) 和结构化查询语言 (SQL) 方面有一些经验.<br>在您开始使用 Amazon DynamoDB 时，您既会遇到许多相似之处，也会遇到许多不同之处.<br>本节介绍常见数据库任务，并将 SQL 语句与其等效 DynamoDB 操作进行比较和对比.</p><p><em>NoSQL</em> 是一个术语，用于描述高度<strong>可用的、可扩展的并且已针对高性能进行优化的非关系数据库系统</strong>.<br>有别于关系模型，NoSQL 数据库（如 DynamoDB）使用替代模型进行数据管理，例如键-值对或文档存储.</p><h5 id="关系-SQL-还是-NoSQL"><a href="#关系-SQL-还是-NoSQL" class="headerlink" title="关系 (SQL) 还是 NoSQL"></a>关系 (SQL) 还是 NoSQL</h5><p>如今，应用程序的要求比以往更严苛.<br>例如，在线游戏一开始时只有几个用户和极少数据. 但是，如果游戏获得成功，则可以轻松超过基础数据库管理系统的资源.<br>基于 Web 的应用程序拥有数百、数千或数百万并发用户，并且每天生成数 TB 或更多新数据，这并不少见.<br>此类应用程序的数据库必须每秒处理数万或数十万次读取和写入.</p><p>Amazon DynamoDB 非常适合这些类型的工作负载.<br>作为开发人员，您首先可以使用较低的使用率，然后随着应用程序变得越来越受欢迎而逐渐增加使用率. DynamoDB 无缝扩展以处理大量数据和大量用户.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amazon-dynamoDB-started/002_rds_dynamodb.png" alt="002_rds_dynamodb"></p><h5 id="数据库的特点"><a href="#数据库的特点" class="headerlink" title="数据库的特点"></a>数据库的特点</h5><p>要让您的应用程序能够访问数据库，其必须经过<em>身份验证</em>，以确保该应用程序能够使用数据库.<br>此外，您的应用程序还必须获得<em>授权</em>，以使该应用程序只能执行它有权执行的操作.</p><p>下图说明客户端与关系数据库和 Amazon DynamoDB 之间的交互 : </p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amazon-dynamoDB-started/003_dynamodb_interactive.png" alt="003_dynamodb_interactive" style="zoom:67%; margin-left: 0;"><p>下表包含有关客户端交互任务的更多详细信息 : </p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amazon-dynamoDB-started/004_dynamodb_tbls.png" alt="004_dynamodb_tbls" style="zoom:67%;"><h4 id="六-本地部署"><a href="#六-本地部署" class="headerlink" title="六. 本地部署"></a>六. 本地部署</h4><h5 id="Docker版本"><a href="#Docker版本" class="headerlink" title="Docker版本"></a>Docker版本</h5><p>下载并安装 <a href="https://www.docker.com/products/docker-desktop">Docker Desktop</a><br>将以下代码复制到文件中并将其保存为 <code>docker-compose.yml</code></p><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.8&#x27;</span><span class="hljs-attr">services:</span>  <span class="hljs-attr">dynamodb-local:</span>    <span class="hljs-attr">command:</span> <span class="hljs-string">&quot;-jar DynamoDBLocal.jar -sharedDb -dbPath ./data&quot;</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;amazon/dynamodb-local:latest&quot;</span>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">dynamodb-local</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8000:8000&quot;</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./docker/dynamodb:/home/dynamodblocal/data&quot;</span>    <span class="hljs-attr">working_dir:</span> <span class="hljs-string">/home/dynamodblocal</span></code></pre><p>运行命令 : </p><pre><code class="hljs bash">docker-compose up</code></pre><h5 id="设置本地终端节点"><a href="#设置本地终端节点" class="headerlink" title="设置本地终端节点"></a>设置本地终端节点</h5><p>默认情况下，AWS SDK 和工具使用 Amazon DynamoDB Web 服务的终端节点。要将 SDK 和工具用于 DynamoDB 下载版本，您必须指定本地终端节点：</p><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>localhost:<span class="hljs-number">8000</span></code></pre><h5 id="AWS-Command-Line-Interface"><a href="#AWS-Command-Line-Interface" class="headerlink" title="AWS Command Line Interface"></a>AWS Command Line Interface</h5><p>您可使用 AWS Command Line Interface (AWS CLI) 与可下载的 DynamoDB 交互.<br>例如，您可以使用它执行<a href="https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/SampleData.html">为 DynamoDB 中的代码示例创建表和加载数据</a>中的所有步骤.</p><p>要访问本地运行的 DynamoDB，请使用 <code>--endpoint-url</code> 参数。以下是使用 AWS CLI 列出计算机上的 DynamoDB 中的表的示例.</p><pre><code class="hljs dsconfig"><span class="hljs-string">aws </span><span class="hljs-string">dynamodb </span><span class="hljs-built_in">list-tables</span> <span class="hljs-built_in">--endpoint-url</span> <span class="hljs-string">http:</span>//<span class="hljs-string">localhost:8000</span></code></pre><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amazon-dynamoDB-started/005_docker_dynamodb.png" alt="005_docker_dynamodb"></p><h5 id="使用-Amazon-DynamoDB-Web-服务"><a href="#使用-Amazon-DynamoDB-Web-服务" class="headerlink" title="使用 Amazon DynamoDB Web 服务"></a>使用 Amazon DynamoDB Web 服务</h5><ol><li><a href="https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/SettingUp.DynamoWebService.html#SettingUp.DynamoWebService.SignUpForAWS">注册AWS</a></li><li><a href="https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/SettingUp.DynamoWebService.html#SettingUp.DynamoWebService.GetCredentials">获取 AWS 访问密钥</a>（用于以编程方式访问 DynamoDB）</li><li><a href="https://docs.aws.amazon.com/zh_cn/amazondynamodb/latest/developerguide/SettingUp.DynamoWebService.html#SettingUp.DynamoWebService.ConfigureCredentials">配置您的凭证</a>（用于以编程方式访问 DynamoDB）</li></ol><h4 id="七-访问DynamoDB"><a href="#七-访问DynamoDB" class="headerlink" title="七. 访问DynamoDB"></a>七. 访问DynamoDB</h4><h5 id="使用控制台"><a href="#使用控制台" class="headerlink" title="使用控制台"></a>使用控制台</h5><p>您可以访问 AWS Management Console 了解 Amazon DynamoDB，地址 <a href="https://console.aws.amazon.com/dynamodb/home">https://console.aws.amazon.com/dynamodb/home</a></p><h5 id="使用-AWS-CLI"><a href="#使用-AWS-CLI" class="headerlink" title="使用 AWS CLI"></a>使用 AWS CLI</h5><p>您可以使用 AWS Command Line Interface (AWS CLI) 从命令行管理多个 AWS 服务并通过脚本自动执行这些服务.<br>您可以使用 AWS CLI 进行临时操作，如创建表. 您还可以使用它在实用工具脚本中嵌入 Amazon DynamoDB 操作.<br>您必须先获取<u>访问密钥 ID</u> 和<u>秘密访问密钥</u>，然后才能将 AWS CLI 与 DynamoDB 结合使用.</p><h5 id="将-AWS-CLI-与-DynamoDB-结合使用"><a href="#将-AWS-CLI-与-DynamoDB-结合使用" class="headerlink" title="将 AWS CLI 与 DynamoDB 结合使用"></a>将 AWS CLI 与 DynamoDB 结合使用</h5><p>命令行格式包含 DynamoDB 操作名称，后跟该操作的参数. AWS CLI 支持参数值的速记语法以及 JSON.</p><p>例如，以下命令可创建一个名为 <em>Music</em> 的表。分区键为 <em>Artist</em>，排序键为 <em>SongTitle</em>。（为便于阅读，本部分中的长命令分行显示。）</p><pre><code class="hljs bash">aws dynamodb create-table \    --table-name Music \    --attribute-definitions \        AttributeName=Artist,AttributeType=S \        AttributeName=SongTitle,AttributeType=S \    --key-schema AttributeName=Artist,KeyType=HASH AttributeName=SongTitle,KeyType=RANGE \    --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \    --endpoint-url http://localhost:8000</code></pre><p>以下命令可将新项目添加到表。这些示例使用速记语法和 JSON 的组合.</p><pre><code class="hljs bash">aws dynamodb put-item \    --table-name Music \    --item \        <span class="hljs-string">&#x27;&#123;&quot;Artist&quot;: &#123;&quot;S&quot;: &quot;No One You Know&quot;&#125;, &quot;SongTitle&quot;: &#123;&quot;S&quot;: &quot;Call Me Today&quot;&#125;, &quot;AlbumTitle&quot;: &#123;&quot;S&quot;: &quot;Somewhat Famous&quot;&#125;&#125;&#x27;</span> \    --return-consumed-capacity TOTAL \    --endpoint-url http://localhost:8000</code></pre><pre><code class="hljs bash">aws dynamodb put-item \    --table-name Music \    --item \        <span class="hljs-string">&#x27;&#123;&quot;Artist&quot;: &#123;&quot;S&quot;: &quot;Acme Band&quot;&#125;, &quot;SongTitle&quot;: &#123;&quot;S&quot;: &quot;Happy Day&quot;&#125;, &quot;AlbumTitle&quot;: &#123;&quot;S&quot;: &quot;Songs About Life&quot;&#125;&#125;&#x27;</span> \    --return-consumed-capacity TOTAL \    --endpoint-url http://localhost:8000</code></pre><p>在命令行上，难以编写有效的 JSON。然而，AWS CLI 可以读取 JSON 文件.<br>例如，请考虑以下 JSON 代码段，它存储在一个名为 <em>key-conditions.json</em> 的文件中.</p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;Artist&quot;</span>: &#123;        <span class="hljs-attr">&quot;AttributeValueList&quot;</span>: [            &#123;                   <span class="hljs-attr">&quot;S&quot;</span>: <span class="hljs-string">&quot;No One You Know&quot;</span>            &#125;           ],          <span class="hljs-attr">&quot;ComparisonOperator&quot;</span>: <span class="hljs-string">&quot;EQ&quot;</span>    &#125;,      <span class="hljs-attr">&quot;SongTitle&quot;</span>: &#123;        <span class="hljs-attr">&quot;AttributeValueList&quot;</span>: [            &#123;                   <span class="hljs-attr">&quot;S&quot;</span>: <span class="hljs-string">&quot;Call Me Today&quot;</span>            &#125;           ],          <span class="hljs-attr">&quot;ComparisonOperator&quot;</span>: <span class="hljs-string">&quot;EQ&quot;</span>    &#125;&#125;</code></pre><p>可以使用 AWS CLI 发出 <code>Query</code> 请求。在该示例中，<em>key-conditions.json</em> 文件的内容用于 <code>--key-conditions</code> 参数</p><pre><code class="hljs bash">aws dynamodb query --table-name Music --key-conditions file://key-conditions.json --endpoint-url http://localhost:8000</code></pre><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amazon-dynamoDB-started/006_select_key.png" alt="006_select_key" style="zoom:67%;"><h5 id="将-AWS-CLI-与可下载的-DynamoDB-结合使用"><a href="#将-AWS-CLI-与可下载的-DynamoDB-结合使用" class="headerlink" title="将 AWS CLI 与可下载的 DynamoDB 结合使用"></a>将 AWS CLI 与可下载的 DynamoDB 结合使用</h5><p>AWS CLI 也可与在您的计算机上运行的 DynamoDB（可下载版本）交互。要启用此功能，请向每个命令添加以下参数：</p><pre><code class="hljs bash">--endpoint-url http://localhost:8000</code></pre><p>下面的示例使用 AWS CLI 列出本地数据库中的表</p><pre><code class="hljs bash">aws dynamodb list-tables --endpoint-url http://localhost:8000</code></pre><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amazon-dynamoDB-started/007_list_tables.png" alt="007_list_tables" style="zoom:67%;"><h5 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h5><pre><code class="hljs bash">aws dynamodb delete-table --table-name Music --endpoint-url http://localhost:8000</code></pre><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-amazon-dynamoDB-started/008_delete_table.png" alt="008_delete_table" style="zoom:67%;"><p>说明 : AWS CLI 无法将可下载版本的 DynamoDB 作为默认端点。因此，您<u><strong>必须对每个命令指定</strong></u> <code>--endpoint-url</code>.</p><h4 id="八-IP-地址范围"><a href="#八-IP-地址范围" class="headerlink" title="八. IP 地址范围"></a>八. IP 地址范围</h4><p>Amazon Web Services (AWS) 以 JSON 格式发布其当前 IP 地址范围。要查看当前范围，请下载 <a href="https://ip-ranges.amazonaws.com/ip-ranges.json">ip-ranges.json</a>.<br>有关更多信息，请参阅 AWS 一般参考中的 <a href="https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html">AWS IP地址范围</a>.</p><p>要查找可用于<a href="https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_Operations_Amazon_DynamoDB.html">访问 DynamoDB 表和索引</a>的 IP 地址范围，请在 ip-ranges.json 文件中搜索以下字符串：<code>&quot;service&quot;: &quot;DYNAMODB&quot;</code>.</p><p><u><strong>PS: 本文为学习记录, 仅供学习与参考!</strong></u></p>]]></content>
    
    
    <categories>
      
      <category>aws</category>
      
      <category>dynamodb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aws</tag>
      
      <tag>dynamodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chrome-vimium插件</title>
    <link href="/2021/12/25/chrome-vimium-started/"/>
    <url>/2021/12/25/chrome-vimium-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="chrome-vimium插件"><a href="#chrome-vimium插件" class="headerlink" title="chrome-vimium插件"></a>chrome-vimium插件</h3><h4 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1.安装插件"></a>1.安装插件</h4><p>在插件小屋中下载chrome的vimium插件</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/chrome-vimium-started/001-vimium.png" alt="001-vimium" style="zoom:80%;margin-left: 0;"><p>Vimium是一款 Chrome 插件，它继承了 Vim 中的常用操作，让我们在使用 Chrome 的过程中，<br>无论是浏览网页、切换标签、搜索以至于任何其它操作，全都可以只通过键盘完成.</p><h4 id="2-快捷键"><a href="#2-快捷键" class="headerlink" title="2.快捷键"></a>2.快捷键</h4><h5 id="1-当前页导航"><a href="#1-当前页导航" class="headerlink" title="1) 当前页导航"></a>1) 当前页导航</h5><pre><code class="hljs bash">h:向左滚动j:向下滚动k:向上滚动l:向右滚动gg:滚动到页面顶部G:滚动到页面底部d:向下滚动半屏u:向上滚动半屏f:在当前标签页打开一个链接F:在新的标签页打开一个链接r:重载当前标签页gs : 查看当前标签页的代码页i : 进入插入模式-所有的命令都无效-按Esc键退出yy : 拷贝当前标签页url到剪切板yf : 拷贝一个链接到剪切板(可选择是哪一个链接)gf : 聚焦到下一个framegF : 聚焦到主/顶部的frame</code></pre><h5 id="2-导航到新页面"><a href="#2-导航到新页面" class="headerlink" title="2) 导航到新页面"></a>2) 导航到新页面</h5><pre><code class="hljs bash">o:在当前标签页中打开一个链接, 书签或者历史链接记录O:在新的标签页中打开一个链接, 书签或者历史链接记录b : 打开一个书签B : 在新标签页中打开一个书签</code></pre><h5 id="3-搜索"><a href="#3-搜索" class="headerlink" title="3) 搜索"></a>3) 搜索</h5><pre><code class="hljs bash">/:进入查找模式    输入要查找的key,按Enter进行搜索, 或者按Esc退出n:向前查找匹配N:向后查找匹配</code></pre><h5 id="4-历史记录"><a href="#4-历史记录" class="headerlink" title="4) 历史记录"></a>4) 历史记录</h5><pre><code class="hljs bash">H : 退回到上一个历史记录L : 前进到下一个历史记录</code></pre><h5 id="5-管理标签"><a href="#5-管理标签" class="headerlink" title="5) 管理标签"></a>5) 管理标签</h5><pre><code class="hljs bash">J, gT : 切换到左边的标签页K, gt : 切换到右边的标签页g0 : 切换到第一个标签页g$ : 切换到最后一个标签页^ : 切换到前一个标签页t : 创建一个新的空的标签页yt : 复制当前标签页到新的标签页x : 关闭当前的标签页X : 重载已经关闭的标签页T : 搜索所有打开的标签页W : 复制当前标签页到新的窗口</code></pre><h5 id="6-链接编辑"><a href="#6-链接编辑" class="headerlink" title="6) 链接编辑"></a>6) 链接编辑</h5><pre><code class="hljs bash">ge : 编辑当前标签页的链接gE : 编辑当前标签页的链接并在新的标签页打开v : 进入可视化模式, 可以p/P来复制</code></pre><p><strong><u>PS : 本文仅为记录, 仅供学习与参考!</u></strong></p>]]></content>
    
    
    <categories>
      
      <category>chrome</category>
      
      <category>vim</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
      <tag>chrome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aws-管道-CodeCommit 存储库</title>
    <link href="/2021/12/19/aws-codepipeline-codecommit/"/>
    <url>/2021/12/19/aws-codepipeline-codecommit/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="aws-管道-CodeCommit-存储库"><a href="#aws-管道-CodeCommit-存储库" class="headerlink" title="aws-管道-CodeCommit 存储库"></a>aws-管道-CodeCommit 存储库</h3><h4 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h4><p>使用 CodeCommit 存储库中维护的代码部署到单个 Amazon EC2 实例. 将更改推送到 CodeCommit 存储库时会触发管道.<br>管道使用 CodeDeploy 作为部署服务，将您的更改部署到 Amazon EC2 实例.</p><p>管道具有两个阶段：</p><ul><li>源阶段 (<strong>源</strong>）为您的 CodeCommit 源操作.</li><li>部署阶段 (<strong>部署</strong>），用于您的 CodeDeploy 部署操作.</li></ul><h4 id="2-权限"><a href="#2-权限" class="headerlink" title="2.权限"></a>2.权限</h4><p>在IAM中设置权限</p><ol><li><p>登录 AWS Management Console，打开 IAM 控制台 <a href="https://console.aws.amazon.com/iam/%E3%80%82">https://console.aws.amazon.com/iam/。</a></p></li><li><p>在 IAM 控制台的导航窗格中，选择<strong>用户</strong>，然后选择要配置为 CodeCommit 访问的 IAM 用户。</p></li><li><p>在 <strong>Permissions</strong> 选项卡上，选择 <strong>Add Permissions</strong>。</p></li><li><p>在 <strong>Grant permissions (授予权限)</strong> 中，选择 **Attach existing policies directly (直接附加现有策略)**。</p></li><li><p>从策略列表中，选择<strong>AWSCodeCommitPowerUser</strong>或另一个用于 CodeCommit 访问的托管策略。有关更多信息，请参阅<a href="https://docs.aws.amazon.com/zh_cn/codecommit/latest/userguide/security-iam-awsmanpol.html">AWSCodeCommit 的托管策略</a>。</p><p>选择要附加的策略后，选择<strong>后续：审核</strong>以审核要附加到 IAM 用户的策略列表。如果列表正确，选择 <strong>Add permissions</strong>。</p></li></ol><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-codecommit/01_aws_code_permission.png" alt="01_aws_code_permission" style="zoom:67%;"><p>运行此命令以验证用于的 CodeCommit 命令AWS CLI已安装。</p><pre><code class="hljs bash">aws codecommit <span class="hljs-built_in">help</span></code></pre><h4 id="3-操作"><a href="#3-操作" class="headerlink" title="3.操作"></a>3.操作</h4><h5 id="第-1-步：创建-CodeCommit-存储库"><a href="#第-1-步：创建-CodeCommit-存储库" class="headerlink" title="第 1 步：创建 CodeCommit 存储库"></a>第 1 步：创建 CodeCommit 存储库</h5><p>首先，在 CodeCommit 中创建存储库. 您的管道在运行时将从该存储库获取源代码.<br>您还应创建一个本地存储库，您可以先在该存储库中维护和更新代码，然后再将其推送到 CodeCommit 存储库.</p><p><strong>创建 CodeCommit 存储库</strong></p><ol><li>从打开 CodeCommit 控制台<a href="https://console.aws.amazon.com/codecommit/">https://console.aws.amazon.com/codecommit/</a>.</li><li>在区域选择器中，选择要创建存储库和管道的 AWS 区域. 有关更多信息，请参阅 。<a href="https://docs.aws.amazon.com/general/latest/gr/rande.html">AWS 区域和终端节点</a>.</li><li>在<strong>存储库</strong>页面上，选择<strong>创建存储库</strong>. </li><li>在 <strong>Create repository (创建存储库)</strong> 页面上的 **Repository name (存储库名称)**中，输入存储库的名称（例如，<code>MyDemoRepo</code>）.</li><li>选择<strong>创建</strong>.</li></ol><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-codecommit/02_create_repo.png" alt="02_create_repo" style="zoom:67%;"><p><strong>设置本地存储库</strong></p><p>在此步骤中，设置一个本地存储库，连接到您的远程 CodeCommit 存储库.</p><ol><li>在控制台中打开您的新存储库，选择页面右上角的 <strong>Clone URL (克隆 URL)**，然后选择 **Clone SSH (克隆 SSH)</strong>.<br>用于克隆 Git 存储库的地址复制到您的剪贴板.</li><li>在您的终端窗口或命令行中，导航到您要用来存储本地存储库的本地目录. 在本教程中，我们使用 <code>/tmp</code>.</li><li>运行以下命令以克隆存储库，使用您在上一步中复制的地址替换 SSH 地址. 此命令创建一个名为 <code>MyDemoRepo</code> 的目录. 您将示例应用程序复制到此目录.</li></ol><p>在克隆之前, 先生成针对 AWS CodeCommit 的 HTTPS Git 凭证.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-codecommit/04_git_credential.png" alt="04_git_credential" style="zoom:67%;"><p>克隆储存库:</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-codecommit/03_git_clone.png" alt="03_git_clone"></p><p>生成本地文件:</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-codecommit/05_local_repo.png" alt="05_local_repo" style="zoom:67%; margin-left: 0;"><h5 id="第-2-步：向-CodeCommit-存储库添加示例代码"><a href="#第-2-步：向-CodeCommit-存储库添加示例代码" class="headerlink" title="第 2 步：向 CodeCommit 存储库添加示例代码"></a>第 2 步：向 CodeCommit 存储库添加示例代码</h5><p>在此步骤中，您下载为 CodeDeploy 示例演练创建的示例应用程序的代码，并将其添加到您的 CodeCommit 存储库.</p><ol><li><p>下载以下文件：<a href="https://docs.aws.amazon.com/zh_cn/codepipeline/latest/userguide/samples/SampleApp_Linux.zip">SampleApp_Linux.zip</a></p></li><li><p>将 <a href="https://docs.aws.amazon.com/zh_cn/codepipeline/latest/userguide/samples/SampleApp_Linux.zip">SampleApp_Linux.zip</a> 中的文件解压缩到您之前创建的本地目录中（例如，<code>/tmp/MyDemoRepo</code> 或 <code>c:\temp\MyDemoRepo</code>）。</p><p>务必将文件直接放到本地存储库中。不要包括 <code>SampleApp_Linux</code> 文件夹.<br>例如，在您的本地 Linux、macOS 或 Unix 计算机上，您的目录和文件层次结构应如下所示：</p></li></ol><pre><code class="hljs bash">/repo   └-- MyDemoRepo       │-- appspec.yml       │-- index.html       │-- LICENSE.txt       └-- scripts           │-- install_dependencies           │-- start_server           └-- stop_server</code></pre><p>使用 git 命令上传文件：</p><pre><code class="hljs bash">% git add -A% git commit -m <span class="hljs-string">&quot;Add sample application files&quot;</span>[master (root-commit) d35b3a1] Add sample application files 6 files changed, 266 insertions(+) create mode 100644 LICENSE.txt create mode 100644 appspec.yml create mode 100644 index.html create mode 100644 scripts/install_dependencies create mode 100644 scripts/start_server create mode 100644 scripts/stop_server% git pushgit: <span class="hljs-string">&#x27;credential-manager&#x27;</span> is not a git <span class="hljs-built_in">command</span>. See <span class="hljs-string">&#x27;git --help&#x27;</span>.Counting objects: 9, <span class="hljs-keyword">done</span>.Delta compression using up to 8 threads.Compressing objects: 100% (7/7), <span class="hljs-keyword">done</span>.Writing objects: 100% (9/9), 5.02 KiB | 5.02 MiB/s, <span class="hljs-keyword">done</span>.Total 9 (delta 0), reused 0 (delta 0)To https://xxxxxx.com/v1/repos/MyDemoRepo * [new branch]      master -&gt; master</code></pre><h5 id="第-3-步：创建-EC2-Linux-实例并安装-CodeDeploy-代理"><a href="#第-3-步：创建-EC2-Linux-实例并安装-CodeDeploy-代理" class="headerlink" title="第 3 步：创建 EC2 Linux 实例并安装 CodeDeploy 代理"></a>第 3 步：创建 EC2 Linux 实例并安装 CodeDeploy 代理</h5><p>在此步骤中，您将创建要在其中部署示例应用程序的 EC2 实例.<br>在此过程中，您在 EC2 实例上安装 CodeDeploy 代理.<br>CodeDeploy 代理是一个支持在 CodeDeploy 部署中使用实例的软件包. 您还将 IAM 角色附加到实例（称为<em>实例角色</em>），以允许它提取 CodeDeploy 代理用来部署应用程序的文件.</p><p><strong>创建实例角色</strong></p><ol><li><p>使用打开 IAM 控制台<a href="https://console.aws.amazon.com/iam/">https://console.aws.amazon.com/iam/</a>).</p></li><li><p>在控制台控制面板中，选择 <strong>Roles (角色)</strong>.</p></li><li><p>选择 <strong>Create role</strong>（创建角色）.</p></li><li><p>UDER<strong>选择受信任实体的类型</strong>中，选择<strong>AWS 服务</strong>. UDER<strong>选择使用案例</strong>中，选择<strong>EC2</strong>. UDER<strong>选择您的使用案例</strong>中，选择<strong>EC2</strong>. C软管<strong>后续：Permissions (下一步：权限)</strong>.</p></li><li><p>搜索并选择名为<strong>AmazonEC2RoleforAWSCodeDeploy</strong>，然后选择<strong>后续：标签</strong>.</p></li><li><p>选择 <strong>Next:**。</strong>审核**。输入角色的名称（例如 <code>EC2InstanceRole</code>）.</p><p><strong>注意</strong></p><p>记下您的角色名称以便在下一步中使用。在创建实例时选择此角色.</p><p>选择 <strong>Create role</strong>（创建角色）.</p></li></ol><p><strong>启动实例</strong></p><ol><li>通过以下网址打开 Amazon EC2 控制台：<a href="https://console.aws.amazon.com/ec2/%E3%80%82">https://console.aws.amazon.com/ec2/。</a></li><li>在控制台的控制面板中，选择 **Launch instance (启动实例)**，然后从弹出的选项中选择 **Launch instance (启动实例)**。</li><li>在 上<strong>第 1 步：选择一个Amazon 系统映像(AMI)**，找到</strong>亚马逊 Linux 2 AMI (HVM)，SSD Volume Type<strong>，然后选择</strong>Select**. （此 AMI 被标记为“Free tier eligible (符合条件的免费套餐)”，可在列表顶部找到。）</li><li>在存储库的<strong>步骤 2: 选择一个实例类型</strong>页面上，选择符合条件的免费套餐<code>t2.micro</code>类型作为实例的硬件配置，然后选择<strong>后续：配置实例详细信息</strong>.</li><li>在存储库的<strong>步骤 3: 配置实例详细信息</strong>页面中，执行以下操作：<ul><li>在 <strong>Number of instances</strong> 中，输入 <code>1</code>。</li><li>在 <strong>Auto-assign Public IP</strong> 中，选择 <strong>Enable</strong>。</li><li>在 <strong>IAM role (IAM 角色)</strong> 中，选择您在上一个过程中创建的 IAM 角色（例如 <code>EC2InstanceRole</code>）。</li><li>展开 <strong>Advanced Details (高级详细信息)**，然后在 **User data (用户数据)</strong> 字段中输入以下内容：</li></ul></li></ol><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span>yum -y updateyum install -y rubyyum install -y aws-cli<span class="hljs-built_in">cd</span> /home/ec2-userwget https://aws-codedeploy-ap-northeast-1.s3.ap-northeast-1.amazonaws.com/latest/installchmod +x ./install./install auto</code></pre><p>​             此代码在创建实例时在实例上安装 CodeDeploy 代理. 将其他项目保留在<strong>步骤 3:</strong> <strong>配置实例详细信息</strong>页面将保持不变。选择 <strong>Next:**。</strong>添加存储**.</p><ol start="6"><li><p>L弯曲<strong>步骤 4: 添加存储</strong>页面将保持不变，然后选择<strong>后续：添加标签</strong>.</p></li><li><p>选择 <strong>Add Tag</strong>. 在 <strong>Key (键)</strong> 中输入 <code>Name</code>，在 <strong>Value (值)</strong> 中输入 <code>MyCodePipelineDemo</code>. 选择 <strong>Next:**。</strong>配置安全组**. 稍后，您将创建一个 CodeDeploy 应用程序，它将示例应用程序部署到此实例. CodeDeploy 基于附加到实例的标签来选择要部署的实例.</p></li><li><p>在存储库的<strong>步骤 6：配置安全组</strong>页面中，执行以下操作：</p><ul><li>在 <strong>Assign a security group (分配安全组)</strong> 旁边，选择 <strong>Create a new security group (创建新安全组)</strong>.</li><li>在 <strong>SSH</strong> 对应的行中，于 <strong>Source (源)</strong> 下，选择 <strong>My IP (我的 IP)</strong>.</li><li>选择 <strong>Add Rule (添加规则)**，选择 **HTTP</strong>，然后在 <strong>Source (源)</strong> 下选择 <strong>My IP (我的 IP)</strong>.</li></ul></li><li><p>选择 <strong>Review and Launch</strong>.</p></li><li><p>在 <strong>Review Instance Launch</strong> 页面上，选择 <strong>Launch</strong>. 当系统提示您输入 key pair 时，请选择<strong>在没有 key pair 的情况下继续</strong>(也可以生成新的key).</p></li><li><p>准备就绪后，选择确认复选框，然后选择<strong>启动实例</strong>.</p></li><li><p>选择 <strong>View Instances</strong> 以关闭确认页面并返回控制台.</p></li><li><p>您可以在 <strong>Instances</strong> 页面上查看启动的状态。启动实例时，其初始状态为 <code>pending</code>.<br>实例启动后，其状态变为 <code>running</code>，并且会收到一个公有 DNS 名称. (如果 <strong>Public DNS</strong> 列不显示，请选择 <strong>Show/Hide</strong> 图标，然后选择 <strong>Public DNS</strong>。)</p><p>可能需要花几分钟时间，实例才能准备好让您连接到它. 查看 <strong>Status Checks (状态检查)</strong> 列中的信息，以便了解您的实例是否通过了状态检查.</p></li></ol><h5 id="第-4-步：在-CodeDeploy-中创建应用程序"><a href="#第-4-步：在-CodeDeploy-中创建应用程序" class="headerlink" title="第 4 步：在 CodeDeploy 中创建应用程序"></a>第 4 步：在 CodeDeploy 中创建应用程序</h5><p>在 CodeDeploy 中，<a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/applications.html"><em>应用程序</em></a>是包含要部署的软件应用程序的资源.<br>稍后，您将将使用此应用程序与 CodePipeline，以便将示例应用程序自动部署到您的 Amazon EC2 实例.</p><p>首先，您需要创建一个角色来允许 CodeDeploy 执行部署. 然后，您创建一个 CodeDeploy 应用程序.</p><p><strong>创建 CodeDeploy 服务角色</strong></p><ol><li>使用打开 IAM 控制台<a href="https://console.aws.amazon.com/iam/)%E3%80%82">https://console.aws.amazon.com/iam/)。</a></li><li>在控制台控制面板中，选择 **Roles (角色)**。</li><li>选择 <strong>Create role</strong>（创建角色）。</li><li>UDER<strong>选择受信任实体的类型</strong>中，选择<strong>AWS 服务</strong>. 在 <strong>Choose a use case (选择使用案例)</strong> 下，选择 <strong>CodeDeploy</strong>. UDER<strong>选择您的使用案例</strong>中，选择<strong>CodeDeploy</strong>. C软管<strong>后续：**</strong>Permissions (下一步：权限)**。<code>AWSCodeDeployRole</code> 托管策略已附加到角色.</li><li>选择 <strong>Next:**。</strong>标签**, 和<strong>后续：**</strong>审核**.</li><li>输入角色的名称（例如 <code>CodeDeployRole</code>），然后选择 <strong>Create role (创建角色)</strong>.</li></ol><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-codecommit/06_codecommit_role.png" alt="06_codecommit_role"></p><p><strong>在 CodeDeploy 中创建应用程序</strong></p><ol><li>从打开 CodeDeploy 控制台<a href="https://console.aws.amazon.com/codedeploy">https://console.aws.amazon.com/codedeploy</a>.</li><li>如果<strong>应用程序</strong>页面不显示，请在AWSCodeDeploy 菜单中，选择<strong>应用程序</strong>.</li><li>选择 <strong>Create application</strong>。</li><li>In<strong>应用程序名称</strong>，输入<code>MyDemoApplication</code>.</li><li>在 <strong>Compute Platform (计算平台)</strong> 中，选择 **EC2/On-premises (EC2/本地)**。</li><li>选择 <strong>Create application</strong>。</li></ol><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-codecommit/07_create_app.png" alt="07_create_app"></p><p><strong>在 CodeDeploy 中创建部署组</strong></p><p><a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/deployment-groups.html"><em>部署组</em></a>是定义了部署相关设置（例如，要部署到哪些实例以及部署它们的速度有多快）的资源.</p><ol><li>在显示应用程序的页面上，选择 <strong>Create deployment group (创建部署组)</strong>.</li><li>在 <strong>Deployment group name (部署组名称)</strong> 中，输入 <code>MyDemoDeploymentGroup</code>.</li><li>在 <strong>Service Role (服务角色)</strong> 中，选择您之前创建的服务角色（例如，<code>CodeDeployRole</code>）.</li><li>在 <strong>Deployment type (部署类型)</strong> 下，选择 <strong>In-place (就地)</strong>.</li><li>在 <strong>Environment configuration (环境配置)</strong> 下，选择 <strong>Amazon EC2 Instances (Amazon EC2 实例)**。在</strong>密钥<strong>字段中，输入<code>Name</code>. 在</strong>值**字段中，输入您用于标记实例的名称（例如，<code>MyCodePipelineDemo</code>).</li><li>在 <strong>Deployment configuration (部署配置)</strong> 中，选择 <code>CodeDeployDefault.OneAtaTime</code>.</li><li>UDER<strong>负载均衡器</strong>，请确保<strong>启用负载均衡</strong>未选中。您无需为此示例设置负载均衡器或选择目标组.</li><li>展开 <strong>Advanced (高级)</strong> 部分。在<strong>警报</strong>下，如果列出了任何警报，请选择<strong>忽略警报配置</strong>.</li><li>选择 <strong>Create deployment group (创建部署组)</strong>.</li></ol><h5 id="第-5-步：在-CodePipeline-中创建您的第一个管道"><a href="#第-5-步：在-CodePipeline-中创建您的第一个管道" class="headerlink" title="第 5 步：在 CodePipeline 中创建您的第一个管道"></a>第 5 步：在 CodePipeline 中创建您的第一个管道</h5><p>现在您已经可以创建并运行您的第一个管道. 在此步骤中，您将创建一个在代码推送到 CodeCommit 存储库时自动运行的管道.</p><p><strong>创建 CodePipeline 道</strong></p><ol><li><p>登录到AWS Management Console，然后打开 CodePipeline 控制台<a href="https://console.aws.amazon.com/codesuite/codepipeline/home">http://console.aws.amazon.com/codesuite/codepipeline/home</a>.</p><p>从打开 CodePipeline 控制台<a href="https://console.aws.amazon.com/codepipeline/">https://console.aws.amazon.com/codepipeline/</a>.</p></li><li><p>选择 **Create pipeline (创建管道)**。</p></li><li><p>In<strong>第 1 步：选择管道设置</strong>, 在**Pipeline name (管道名称)**，输入<code>MyFirstPipeline</code>.</p></li><li><p>In<strong>服务角色</strong>中，选择<strong>新服务角色</strong>以允许 CodePipeline 在 IAM 中创建服务角色.</p></li><li><p>将 <strong>Advanced settings (高级设置)</strong> 中的各项设置保留为默认值，然后选择 <strong>Next (下一步)</strong>.</p></li><li><p>In<strong>步骤 2: 添加源阶段</strong>, 在<strong>源提供商</strong>中，选择<strong>AWS CodeCommit</strong>. In<strong>存储库名称</strong>中，选择 CodeCommit 存储库的名称<a href="https://docs.aws.amazon.com/zh_cn/codepipeline/latest/userguide/tutorials-simple-codecommit.html#codecommit-create-repository">第 1 步：创建 CodeCommit 存储库</a>. 在 <strong>Branch name (分支名称)</strong> 中，选择 <code>main</code>，然后选择 <strong>Next step (下一步)</strong>.</p></li></ol><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-codecommit/08_source.png" alt="08_source"></p><p>​    在选择存储库名称和分支后，将出现一条消息，其中显示为该管道创建的 Amazon CloudWatch Events 规则.<br>​    在<strong>更改检测选项</strong>下面，保留默认值。这样，就 CodePipeline 使用 Amazon CloudWatch Events 检测源存储库中的更改.<br>​    选择 <strong>Next (下一步)</strong>.</p><ol start="7"><li><p>In<strong>步骤 3: 添加构建阶段</strong>中，选择<strong>跳过构建阶段</strong>，然后通过从选择<strong>跳过</strong>。选择 <strong>Next (下一步)</strong>.</p></li><li><p>In<strong>步骤 4: 添加部署阶段</strong>, 在<strong>部署提供程序</strong>中，选择<strong>AWS CodeDeploy</strong>. 在 <strong>Application name (应用程序名称)</strong> 中，输入 <code>MyDemoApplication</code>.<br>在 <strong>Deployment group (部署组)</strong> 中，选择 <code>MyDemoDeploymentGroup</code>，然后选择 <strong>Next step (下一步)</strong>.</p></li></ol><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-codecommit/09_deploy.png" alt="09_deploy"></p><ol start="9"><li>In<strong>第 5 步：审核</strong>，检查信息，然后选择<strong>创建管道</strong>.</li><li>创建管道后它会开始运行. 它从您的 CodeCommit 存储库下载代码，并在 EC2 实例中创建一个 CodeDeploy 部署.<br>在 CodePipeline 示例将网页部署至 CodeDeploy 部署中的 Amazon EC2 实例时，您可以查看进度以及成功和失败消息.</li></ol><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-codecommit/10_pipeline.png" alt="10_pipeline" style="zoom:67%; margin-left: 0;"><h4 id="4-验证"><a href="#4-验证" class="headerlink" title="4.验证"></a>4.验证</h4><p>恭喜您！您刚在 CodePipeline 中创建了一个简单的管道。</p><p>接下来，您将验证结果.</p><p><strong>验证您的管道是否成功运行</strong></p><ol><li><p>查看管道的初始进度。每个阶段的状态将从<strong>还没有任何执行</strong>变为<strong>正在进行</strong>，然后变为 <strong>成功</strong>或<strong>失败</strong>。管道将在几分钟内完成首次运行。</p></li><li><p>晚于<strong>Succeeded</strong>将显示管道状态，在管道状态 (状态)<strong>部署</strong>阶段，选择<strong>AWS CodeDeploy</strong>. 此操作将打开 CodeDeploy 控制台。如果未显示 **Succeeded (成功)**，请参阅 <a href="https://docs.aws.amazon.com/zh_cn/codepipeline/latest/userguide/troubleshooting.html">排除 CodePipeline</a>.</p></li><li><p>在存储库的<strong>部署s</strong>选项卡，选择部署 ID。在部署的页面上，UDER<strong>部署生命周期事件</strong>下，选择实例 ID。此操作将打开 EC2 控制台.</p></li><li><p>在 <strong>Description (描述)</strong> 选项卡上的 <strong>Public DNS (公有 DNS)</strong> 中，复制地址（例如，<code>ec2-192-0-2-1.us-west-2.compute.amazonaws.com</code>），然后将其粘贴到 Web 浏览器的地址栏中.</p><p>这是您下载并推送到 CodeCommit 存储库的示例应用程序.</p></li></ol><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-codecommit/11_web.png" alt="11_web"></p><h5 id="修改-CodeCommit-存储库中的代码"><a href="#修改-CodeCommit-存储库中的代码" class="headerlink" title="修改 CodeCommit 存储库中的代码"></a>修改 CodeCommit 存储库中的代码</h5><p>您的管道配置为每次对 CodeCommit 存储库中的代码进行更改时运行.<br>在此步骤中，您将更改作为 CodeCommit 存储库中的示例 CodeDeploy 应用程序的一部分的 HTML 文件。当您推送这些更改时，您的管道会再次运行，并且您作出的更改将在您之前访问的网址中显示.</p><ol><li>修订 <code>index.html</code> 文件的内容，以更改网页的背景颜色和一些文本，然后保存该文件.</li></ol><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Updated Sample Deployment<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span>    body &#123;<span class="css">      <span class="hljs-selector-tag">color</span>: <span class="hljs-selector-id">#000000</span>;</span><span class="css">      <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#CCFFCC</span>;</span>      font-family: Arial, sans-serif;  <span class="css">      <span class="hljs-selector-tag">font-size</span><span class="hljs-selector-pseudo">:14px</span>;</span>    &#125;            h1 &#123;      font-size: 250%;      font-weight: normal;      margin-bottom: 0;    &#125;        h2 &#123;      font-size: 175%;      font-weight: normal;      margin-bottom: 0;    &#125;  <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Updated Sample Deployment<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>This application was updated using CodePipeline, CodeCommit, and CodeDeploy.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Learn more:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://docs.aws.amazon.com/codepipeline/latest/userguide/&quot;</span>&gt;</span>CodePipeline User Guide<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://docs.aws.amazon.com/codecommit/latest/userguide/&quot;</span>&gt;</span>CodeCommit User Guide<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://docs.aws.amazon.com/codedeploy/latest/userguide/&quot;</span>&gt;</span>CodeDeploy User Guide<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><ol start="2"><li>通过一次运行以下一条命令的方式，将您的更改提交并推送到您的 CodeCommit 存储库中。</li></ol><pre><code class="hljs bash">% git commit -am <span class="hljs-string">&quot;Updated sample application files&quot;</span>% git push</code></pre><p><strong>验证您的管道是否已成功运行</strong></p><ol><li>查看管道的初始进度。每个阶段的状态将从<strong>还没有任何执行</strong>变为<strong>正在进行</strong>，然后变为 <strong>成功</strong>或<strong>失败</strong>. 管道应在几分钟内完成运行.</li></ol><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-codecommit/12_reload_deploy.png" alt="12_reload_deploy" style="zoom:67%; margin-left: 0;"><ol start="2"><li>操作状态显示 <strong>Succeeded (成功)</strong> 之后，请刷新您之前在浏览器中访问的演示页面.<br>此时将显示更新后的网页：</li></ol><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-codecommit/13_reload_web.png" alt="13_reload_web"></p><p><strong><u>PS: 本文仅为学习记录, 仅供学习与参考!</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>pipeline</tag>
      
      <tag>aws</tag>
      
      <tag>codecommit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>aws-codepipeline学习一</title>
    <link href="/2021/12/14/aws-codepipeline-started/"/>
    <url>/2021/12/14/aws-codepipeline-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="aws-codepipeline学习一"><a href="#aws-codepipeline学习一" class="headerlink" title="aws-codepipeline学习一"></a>aws-codepipeline学习一</h3><h4 id="1-什么是AWS-CodePipeline"><a href="#1-什么是AWS-CodePipeline" class="headerlink" title="1.什么是AWS CodePipeline"></a>1.什么是AWS CodePipeline</h4><p>AWS CodePipeline 是一种持续交付服务，可用于建模、可视化和自动执行发布软件所需的步骤. 您可以快速对软件发布过程的不同阶段进行建模和配置。CodePipeline 会自动执行持续发布软件更改所需的步骤.<br>说明: AWS CodePipeline 包含在 <a href="https://aws.amazon.com/cn/free/">AWS 免费套餐</a>内，每月为新老客户提供一个免费的活动管道. 所有区域中的免费使用量每个月计算一次，并自动计入到账单中；免费使用量不能累计。</p><p><a href="http://aws.amazon.com/devops/continuous-delivery/">持续交付</a>是实现发布流程自动化的软件开发方法. 每个软件更改都将自动生成、测试并部署到生产环境中. 在最终推送到生产环境之前，可由人员、自动化测试或业务规则决定最后的推送何时发生. 虽然每次成功的软件更改都可以通过持续交付立即发布到生产环境中，但并非所有更改都需要立即发布.</p><p><a href="http://aws.amazon.com/devops/continuous-integration/">持续集成</a>是一种软件开发实践，其中团队成员使用版本控制系统，并将其工作频繁地集成到同一位置，如主分支. 每项更改都经过生成和验证，以尽可能快地检测到集成错误. <em>持续交付</em>会自动执行整个软件发布过程，一直到最后的生产部署，而持续集成重点关注自动生成和测试代码.</p><p>可以使用 CodePipeline 控制台、AWS Command Line Interface(AWS CLI)、AWS开发工具包或这些工具包的任意组合来创建和管理管道.</p><h4 id="2-执行操作"><a href="#2-执行操作" class="headerlink" title="2.执行操作"></a>2.执行操作</h4><ul><li><strong>自动化您的发布流程</strong>：从源存储库开始，一直到生成、测试和部署，CodePipeline 可端到端地完全自动执行您的发布过程. 您可以通过在 Source 阶段之外的任何阶段中包括手动审批操作，来防止更改在管道中继续处理。您可以在需要的时间、按需要的方式在所选系统上跨一个实例或多个实例发布.</li><li><strong>建立一致的发布流程</strong>：为每次代码更改定义一组一致的步骤. CodePipeline 根据您的标准运行发布的每个阶段.</li><li><strong>加快交付速度，同时提高质量</strong>：您可以自动执行发布过程，以允许开发人员逐步测试和发布代码，并加快向客户发布新功能的速度.</li><li><strong>使用您喜爱的工具</strong>：您可以将现有源代码、生成和部署工具纳入管道中. 有关 CodePipeline 目前支持的 AWS 服务和第三方工具的完整列表，请参阅<a href="https://docs.aws.amazon.com/zh_cn/zh_cn/codepipeline/latest/userguide/integrations.html">与 CodePipeline 集成产品和服务</a>.</li><li><strong>查看进度概览</strong>：您可以查看管道的实时状态，检查任何警报的详细信息，重试失败的操作，查看每个阶段的最新管道执行中使用的源修订的详细信息，以及手动重新运行任意管道.</li><li><strong>查看管线历史详细信息</strong>：您可以查看有关管道执行的详细信息，包括开始时间和结束时间、运行持续时间和执行 ID.</li></ul><p>发布过程: </p><p>在此示例中，当开发人员将更改提交到源存储库时，CodePipeline 将自动检测更改. 系统将生成这些更改，如果配置了任何测试，则会运行这些测试.<br>测试完成后，将生成的代码部署到暂存服务器进行测试. CodePipeline 会从暂存服务器运行更多测试，例如集成或负载测试.<br>在成功完成这些测试，并且添加到管道中的手动审批操作获得批准后，CodePipeline 将经过测试并获得批准的代码部署到生产实例中.</p><p>CodePipeline 可以使用 CodeDeploy、AWS Elastic Beanstalk，或者AWS OpsWorks Stacks. CodePipeline 还可以使用 Amazon ECS 将基于容器的应用程序部署到服务中. 开发人员还可以使用 CodePipeline 提供的集成点来插入其他工具或服务，包括生成服务、测试提供程序或其他部署目标或系统.<br>管道可以很简单，也可以很复杂，具体由您的发布过程决定.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/01_aws_codepipeline.png" alt="01_aws_codepipeline"></p><h4 id="3-如何开始使用"><a href="#3-如何开始使用" class="headerlink" title="3.如何开始使用"></a>3.如何开始使用</h4><ol><li>学习CodePipeline 的工作原理是如何通过阅读<a href="https://docs.aws.amazon.com/zh_cn/zh_cn/codepipeline/latest/userguide/concepts.html">CodePipeline 概念</a>部分.</li><li>准备使用 CodePipeline，方法是按照<a href="https://docs.aws.amazon.com/zh_cn/zh_cn/codepipeline/latest/userguide/getting-started-codepipeline.html">CodePipeline</a>.</li><li>试验CodePipeline 是按照<a href="https://docs.aws.amazon.com/zh_cn/zh_cn/codepipeline/latest/userguide/tutorials.html">CodePipeline 教程</a>教程.</li><li>使用的 CodePipeline，方法是按照<a href="https://docs.aws.amazon.com/zh_cn/zh_cn/codepipeline/latest/userguide/pipelines-create.html">在 CodePipeline 中创建管道</a>.</li></ol><h4 id="4-管道术语"><a href="#4-管道术语" class="headerlink" title="4.管道术语"></a>4.管道术语</h4><ul><li>Pipelines</li><li>Stages</li><li>Actions : 有效的 CodePipeline 操作类型为<code>source</code>、<code>build</code>、<code>test</code>、<code>deploy</code>、<code>approval</code>, 和<code>invoke</code>.</li><li>管道执行: 虽然管道可以同时处理多个执行，但一个管道阶段一次只处理一个执行. 管道执行按顺序遍历管道阶段. 管道的有效状态为：<code>InProgress</code>、<code>Stopping</code>、<code>Stopped</code>、<code>Succeeded</code>、<code>Superseded</code>, 和<code>Failed</code>.</li><li>停止的执行 :  1) 停止并等待  2) 停止并放弃</li><li>失败的执行</li><li>已取代的执行</li><li>阶段执行 : 阶段的有效状态为<code>InProgress</code>、<code>Stopping</code>、<code>Stopped</code>、<code>Succeeded</code>, 和<code>Failed</code>.</li><li>操作执行: 操作的有效状态为：<code>InProgress</code>、<code>Abandoned</code>、<code>Succeeded</code>，或者<code>Failed</code>.</li><li>操作类型</li><li>Transitions</li></ul><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/02_transitions.png" alt="02_transitions" style="zoom:50%;margin-left: 100px;"><ul><li>Artifacts</li><li>源修订</li></ul><p>管道示例: </p><p>作为开发运营管道的示例，两阶段管道可以具有名为 <strong>Source</strong> 的源阶段和名为 <strong>Prod</strong> 的第二阶段.<br>在此示例中，管道使用最新更改来更新应用程序，并持续部署最新结果. 在部署最新的应用程序之前，管道会构建并测试 Web 应用程序.<br>在此示例中，一组开发人员在名为 MyRepository 的 GitHub 存储库中，为 Web 应用程序设置了基础设施模板和源代码.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/03_pipeline-sample.png" alt="03_pipeline-sample" style="zoom:50%;margin-left: 100px"><ol><li>在配置作为管道中 GitHub 源操作的存储库中维护应用程序源代码. 当开发人员将提交推送到存储库时，CodePipeline 检测推送的更改，管道执行从<strong>源阶段</strong>。</li><li>GitHub 源操作成功完成（即，最新的更改已下载并存储到对该执行唯一的构件存储桶中）. GitHub 源操作生成的<em>输出构件</em>（即来自存储库的应用程序文件）随后用作<em>输入</em> 构件，由下一阶段的操作处理.</li><li>管道执行从<strong>源阶段</strong>转换到<strong>生产阶段</strong>的第一个操作<strong>Prod 阶段</strong>运行在 CodeBuild 中创建的构件项目，并在管道中配置作为构建操作. 构建任务提取构建环境映像，然后在虚拟容器中构建 Web 应用程序.</li><li>下一个操作<strong>Prod 阶段</strong>是在 CodeBuild 中创建的单元测试项目，并在管道中配置测试操作.</li><li>单元测试的代码接下来由<strong>生产阶段</strong>中的部署操作处理，该操作将应用程序部署到生产环境. 部署操作成功完成后，阶段中的最终操作是在 CodeBuild 中创建的集成测试项目，并在管道中配置为测试操作. 测试操作调用在 Web 应用程序上安装和运行测试工具（如链接检查器）的 shell 脚本. 成功完成后，输出是一个构建 Web 应用程序和一组测试结果.</li></ol><p>开发人员可以向管道添加操作，以便在构建并针对每个更改测试应用程序后，对其进行部署或进一步测试.</p><h4 id="5-使用前提"><a href="#5-使用前提" class="headerlink" title="5.使用前提"></a>5.使用前提</h4><ul><li><a href="https://docs.aws.amazon.com/zh_cn/zh_cn/codepipeline/latest/userguide/getting-started-codepipeline.html#create-aws-account">第 1 步：创建 AWS 账户</a></li><li><a href="https://docs.aws.amazon.com/zh_cn/zh_cn/codepipeline/latest/userguide/getting-started-codepipeline.html#create-iam-user">第 2 步：创建或使用 IAM 用户</a></li><li><a href="https://docs.aws.amazon.com/zh_cn/zh_cn/codepipeline/latest/userguide/getting-started-codepipeline.html#assign-permissions">第 3 步：使用 IAM 托管策略将 CodePipeline 权限分配给 IAM 用户</a></li><li><a href="https://docs.aws.amazon.com/zh_cn/zh_cn/codepipeline/latest/userguide/getting-started-codepipeline.html#install-cli">第 4 步：安装 AWS CLI</a></li><li><a href="https://docs.aws.amazon.com/zh_cn/zh_cn/codepipeline/latest/userguide/getting-started-codepipeline.html#open-codepipeline-console">第 5 步：打开代码 Piline 的控制台</a></li><li><a href="https://docs.aws.amazon.com/zh_cn/zh_cn/codepipeline/latest/userguide/getting-started-codepipeline.html#next-steps">后续步骤</a></li></ul><p>第 2 步：创建或使用 IAM 用户<br>创建 IAM 用户或使用您的现有的 IAM 用户AWSaccount. 请确保您有一个AWS访问密钥 ID 和AWS与该 IAM 用户关联的私有访问密钥.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/04_iam_key.png" alt="04_iam_key"></p><p>第 3 步：使用 IAM 托管策略将 CodePipeline 权限分配给 IAM 用户</p><p>您必须向 IAM 用户授予与代码 Piline 交互的权限。执行此操作的最快方法是将<code>AWSCodePipeline_FullAccess</code>托管策略添加到 IAM 用户.</p><p><strong>要使用向 IAM 用户授予权限AWS Management Console</strong></p><ol><li>登录到 AWS Management Console，然后通过以下网址打开 IAM 控制台：<a href="https://console.aws.amazon.com/iam/">https://console.aws.amazon.com/iam/</a>.</li><li>在 IAM 控制台的导航窗格中，选择<strong>策略</strong>，然后选择<code>AWSCodePipeline_FullAccess</code>托管策略.</li><li>在存储库的<strong>摘要</strong>页面上，选择<strong>策略使用</strong>选项卡，然后选择<strong>Attach</strong>.</li><li>在存储库的<strong>附加策略</strong>页面上，选中 IAM 用户或组旁边的复选框，然后选择<strong>附加策略</strong>.</li></ol><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/04_iam_user_role.png" alt="04_iam_user_role"></p><p>第 4 步：安装 AWS CLI</p><p>CodePipeline 从AWSCLI，则必须在本地开发计算机上安装AWSCLI。如果您打算仅使用本指南中的 CodePipeline 控制台步骤，则此步骤是可选的.</p><p><strong>安装和配置 AWS CLI</strong></p><ol><li>在本地计算机上，下载并安装 AWS CLI. 这将允许您从命令行与代码 Piline 交互。有关更多信息，请参阅<a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-set-up.html">使用 AWS 命令行界面进行设置</a>.</li></ol><pre><code class="hljs bash">aws configure<span class="hljs-comment"># 输入IAM中的key和密钥</span><span class="hljs-comment"># 区域: ap-northeast-1</span><span class="hljs-comment"># Asia Pacific (Tokyo)ap-northeast-1codepipeline.ap-northeast-1.amazonaws.comHTTPS</span><span class="hljs-comment"># format: json</span></code></pre><p>第 5 步：打开代码 Piline 的控制台</p><p>登录到AWS Management Console，然后打开 CodePipeline 控制台<a href="https://console.aws.amazon.com/codesuite/codepipeline/home">http://console.aws.amazon.com/codesuite/codepipeline/home</a>。</p><h4 id="6-创建一个简单的管道（S3-存储桶）"><a href="#6-创建一个简单的管道（S3-存储桶）" class="headerlink" title="6.创建一个简单的管道（S3 存储桶）"></a>6.创建一个简单的管道（S3 存储桶）</h4><p>创建管道的最简单方法是使用 <strong>控制台中的</strong>创建管道AWS CodePipeline向导.<br>在本教程中，您将创建一个两阶段管道，该管道使用受版本控制的 S3 存储桶和 CodeDeploy 来发布示例应用程序.</p><h5 id="第-1-步：为您的应用程序创建-S3-存储桶"><a href="#第-1-步：为您的应用程序创建-S3-存储桶" class="headerlink" title="第 1 步：为您的应用程序创建 S3 存储桶"></a>第 1 步：为您的应用程序创建 S3 存储桶</h5><p>您可以将源文件或应用程序存储在任何受版本控制的位置.<br>在本教程中，您将为示例应用程序创建一个 S3 存储桶，并对该存储桶启用版本控制. 启用版本控制后，您可将示例应用程序复制到该存储桶.</p><ol><li>登录到 AWS Management Console，然后通过以下网址打开 Amazon S3 控制台：<a href="https://console.aws.amazon.com/s3/%E3%80%82">https://console.aws.amazon.com/s3/。</a></li><li>选择 **Create bucket (创建存储桶)**。</li><li>对于 **Bucket Name (存储桶名称)**，输入您的存储桶的名称 (例如 <code>awscodepipeline-demobucket-example-date</code>).</li></ol><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/05_s3_bucket.png" alt="05_s3_bucket"></p><p>若提示名称重复, 则重命名, 如: awscodepipeline-iplume-demobucket-example-date</p><ol><li><p>创建存储桶后，系统会显示成功横幅。选择 <strong>Go to bucket details (转到存储桶详细信息)</strong>.</p></li><li><p>在 <strong>Properties (属性)</strong> 选项卡上，选择 <strong>Versioning (版本控制)**。选择 **Enable versioning (启用版本控制)**，然后选择 **Save (保存)</strong>.</p><p>启用版本控制后，Amazon S3 会在存储桶中存储每个对象的每个版本.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/06_s3_version.png" alt="06_s3_version"></p></li><li><p>在 <strong>Permissions (权限)</strong> 选项卡上，保留默认设置. 有关 S3 存储桶和对象权限的更多信息，请参阅<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">在策略中指定权限</a>.</p></li><li><p>接下来，下载示例并将其保存到本地计算机上的文件夹或目录中.</p><ol><li><p>选择以下选项之一. 选择<code>SampleApp_Windows.zip</code>如果要对 Windows Server 实例执行本教程中的步骤，请执行.</p><ul><li>如果您想使用 CodeDeploy 部署到 Amazon Linux 实例，请在此处下载示例应用程序：<a href="https://docs.aws.amazon.com/zh_cn/zh_cn/codepipeline/latest/userguide/samples/SampleApp_Linux.zip">SampleApp_Linux.zip</a>.</li><li>如果您想使用 CodeDeploy 部署到 Windows Server 实例，请在此处下载示例应用程序：<a href="https://docs.aws.amazon.com/zh_cn/zh_cn/codepipeline/latest/userguide/samples/SampleApp_Windows.zip">SampleApp_Windows.zip</a>.</li></ul><p>若下载失败, 则使用: dotnet-asp-v1.zip示例程序. —-<strong><u>说明应用程序不能修改, 不然部署不成功. 请先下载: SampleApp_Windows.zip</u></strong></p></li><li><p>下载压缩 (zipped) 文件。不要解压缩该文件.</p></li></ol></li><li><p>在 Amazon S3 控制台中，对于您的存储桶，上传文件：</p><ol><li>选择 <strong>Upload</strong>.</li><li>拖放文件或选择 <strong>Add files (添加文件)</strong> 并通过浏览找到该文件.</li><li>选择 <strong>Upload</strong>.</li></ol></li></ol><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/07_s3_upload.png" alt="07_s3_upload"></p><h5 id="第-2-步：创建-Amazon-EC2-Windows-Windows-实例并安装代码"><a href="#第-2-步：创建-Amazon-EC2-Windows-Windows-实例并安装代码" class="headerlink" title="第 2 步：创建 Amazon EC2 Windows Windows 实例并安装代码"></a>第 2 步：创建 Amazon EC2 Windows Windows 实例并安装代码</h5><p><strong>创建实例角色</strong></p><ol><li><p>使用打开 IAM 控制台<a href="https://console.aws.amazon.com/iam/)%E3%80%82">https://console.aws.amazon.com/iam/)。</a></p></li><li><p>在控制台控制面板中，选择 **Roles (角色)**。</p></li><li><p>选择 <strong>Create role</strong>（创建角色）。</p></li><li><p>在<strong>SELECT 受信任实体的类型</strong>，选择<strong>AWS 服务</strong>. 在<strong>选择使用案例</strong>，选择<strong>EC2</strong>，然后选择**后续：Permissions (下一步：权限)**。</p></li><li><p>搜索并选择名为<strong>AmazonEC2RoleforAWSCodeDeploy</strong>，然后选择<strong>后续：标签</strong>。</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/08_attach_role.png" alt="08_attach_role"></p></li><li><p>选择 <strong>Next:**。</strong>审核**。输入角色的名称（例如 <code>EC2InstanceRole</code>）</p></li></ol><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/09_role_name.png" alt="09_role_name"></p><p><strong>启动实例</strong></p><ol><li><p>通过以下网址打开 Amazon EC2 控制台：<a href="https://console.aws.amazon.com/ec2/%E3%80%82">https://console.aws.amazon.com/ec2/。</a></p></li><li><p>在控制台的控制面板中，选择 **Launch instance (启动实例)**，然后从弹出的选项中选择 **Launch instance (启动实例)**。</p></li><li><p>在存储库的<strong>第 1 步：选择一个Amazon 系统映像(AMI)**页面上，找到</strong>Microsoft Windows Server 2019 Base<strong>选项，然后选择</strong>Select**. （此 AMI 被标记为“Free tier eligible (符合条件的免费套餐)”，可在列表顶部找到。）<br><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/10_ec2_ami.png" alt="10_ec2_ami"></p></li><li><p>在存储库的<strong>步骤 2: 选择一个实例类型</strong>页面上，选择符合条件的免费套餐<code>t2.micro</code>类型作为您的实例的硬件配置，然后选择<strong>后续：配置实例详细信息</strong>.</p></li><li><p>在存储库的<strong>步骤 3: 配置实例详细信息</strong>页面中，执行以下操作：</p><ul><li><p>在 <strong>Number of instances</strong> 中，输入 <code>2</code>。</p></li><li><p>在 <strong>Auto-assign Public IP</strong> 中，选择 <strong>Enable</strong>。</p></li><li><p>In<strong>IAM 角色</strong>、选择您在上一个过程中创建的 IAM 角色（例如<code>EC2InstanceRole</code>)。</p> <img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/11_ec2_settings.png" alt="11_ec2_settings" style="zoom:67%;"></li><li><p>Expand<strong>高级详细信息</strong>，并在<strong>用户数据</strong>, 与<strong>作为文本</strong>，输入以下内容：</p></li></ul><pre><code class="hljs shell">&lt;powershell&gt;  New-Item -Path c:\temp -ItemType &quot;directory&quot; -Forcepowershell.exe -Command Read-S3Object -BucketName aws-codedeploy-ap-northeast-1/latest -Key codedeploy-agent.msi -File c:\temp\codedeploy-agent.msiStart-Process -Wait -FilePath c:\temp\codedeploy-agent.msi -WindowStyle Hidden&lt;/powershell&gt;</code></pre><p>将剩余的项目保留在<strong>步骤 3:</strong> <strong>配置实例详细信息</strong>页面将保持不变。选择 <strong>Next:**。</strong>添加存储**.</p><ol start="6"><li>将<strong>步骤 4: 添加存储</strong>页面未更改，然后选择<strong>后续：添加标签</strong>.</li><li>在 <strong>Add Tags (添加标签)</strong> 页面上，选择 <strong>Add Tag (添加标签)</strong>. Enter<strong>名称</strong>中的<strong>密钥</strong>字段中，输入<code>MyCodePipelineDemo</code>中的<strong>值</strong>字段，然后选择<strong>后续：配置安全组</strong>.</li></ol><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/12_tags.png" alt="12_tags"></p></li><li><p>在 <strong>Configure Security Group (配置安全组)</strong> 页面上，允许端口 80 通信，以便您可以访问公有实例终端节点.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/13_security.png" alt="13_security"></p></li><li><p>选择 <strong>Review and Launch</strong>.</p></li><li><p>在 <strong>Review Instance Launch</strong> 页面上，选择 <strong>Launch</strong>。W母鸡提示输入 key pair中，选择<strong>在没有 key pair 的情况下继续</strong>.</p></li><li><p>选择 <strong>View Instances</strong> 以关闭确认页面并返回控制台.</p></li><li><p>您可以在 <strong>Instances</strong> 页面上查看启动的状态。启动实例时，其初始状态为 <code>pending</code>。实例启动后，其状态变为 <code>running</code>，并且会收到一个公有 DNS 名称.(如果 <strong>Public DNS</strong> 列不显示，请选择 <strong>Show/Hide</strong> 图标，然后选择 <strong>Public DNS</strong>。)</p></li><li><p>可能需要花几分钟时间，实例才能准备好让您连接到它. 检查您的实例是否通过了状态检查. 您可以在 <strong>Status Checks (状态检查)</strong> 列中查看此信息.</p></li></ol><h5 id="第-3-步：在-CodeDeploy-中创建应用程序"><a href="#第-3-步：在-CodeDeploy-中创建应用程序" class="headerlink" title="第 3 步：在 CodeDeploy 中创建应用程序"></a>第 3 步：在 CodeDeploy 中创建应用程序</h5><p>在 CodeDeploy 中，<em>应用程序</em>是要部署的代码的标识符（以名称形式）.<br>CodeDeploy 使用此名称以确保修订、部署和部署组的正确组合，并确保在部署期间引用部署组.<br>在本教程后面创建管道时，您应选择在此步骤中创建的 CodeDeploy 应用程序的名称.</p><p><strong>在 CodeDeploy 中创建应用程序</strong></p><ol><li>从打开 CodeDeploy 控制台<a href="https://console.aws.amazon.com/codedeploy">https://console.aws.amazon.com/codedeploy</a>.</li><li>如果<strong>应用程序</strong>页面不显示，在AWSCodeDeploy 菜单中，选择<strong>应用程序</strong>.</li><li>选择 <strong>Create application</strong>。</li><li>In<strong>应用程序名称</strong>，输入<code>MyDemoApplication</code>.</li><li>在 <strong>Compute Platform (计算平台)</strong> 中，选择 <strong>EC2/On-premises (EC2/本地)</strong>.</li><li>选择 <strong>Create application</strong>.</li></ol><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/14_create_app.png" alt="14_create_app"></p><p><strong>在 CodeDeploy 中创建部署组</strong></p><ol><li>在显示应用程序的页面上，选择 <strong>Create deployment group (创建部署组)</strong>.</li><li>在 <strong>Deployment group name (部署组名称)</strong> 中，输入 <code>MyDemoDeploymentGroup</code>.</li><li>In<strong>服务角色</strong>下，选择信任的服务角色AWSCodeDeploy，至少使用中描述的信任和权限<a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/getting-started-create-service-role.html">为 CodeDeploy 创建服务角色</a>. 要获得服务角色 ARN，请参阅<a href="https://docs.aws.amazon.com/codedeploy/latest/userguide/how-to-create-service-role.html#getting-started-get-service-role-console">获得服务角色 ARN（控制台）</a>.<br><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/15_arn.png" alt="15_arn"></li><li>在 <strong>Deployment type (部署类型)</strong> 下，选择 <strong>In-place (就地)</strong>.</li><li>在 <strong>Environment configuration (环境配置)</strong> 下，选择 <strong>Amazon EC2 Instances (Amazon EC2 实例)**。选择</strong>名称<strong>中的</strong>密钥<strong>字段中，并在</strong>值**字段中，输入<code>MyCodePipelineDemo</code>.<img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/16_create_settings.png" alt="16_create_settings" style="zoom:67%;"></li><li>在<strong>部署设置</strong>中，选择<code>CodeDeployDefault.OneAtaTime</code>.</li><li>在<strong>负载均衡器</strong>，请确保<strong>启用负载均衡</strong>框未选中。您无需为此示例设置负载均衡器或选择目标组。取消选中该复选框后，不会显示负载均衡器选项.</li><li>在 <strong>Advanced</strong>部分，将默认值保留.</li><li>选择 <strong>Create deployment group (创建部署组)</strong>.</li></ol><h5 id="第-4-步：在-CodePipeline-中创建您的第一个管道"><a href="#第-4-步：在-CodePipeline-中创建您的第一个管道" class="headerlink" title="第 4 步：在 CodePipeline 中创建您的第一个管道"></a>第 4 步：在 CodePipeline 中创建您的第一个管道</h5><p>在这部分的教程中，您将创建管道。示例将自动通过管道运行.</p><p><strong>创建 CodePipeline 自动发布流程</strong></p><ol><li><p>登录到AWS Management Console，然后打开 CodePipeline 控制台<a href="https://console.aws.amazon.com/codesuite/codepipeline/home">http://console.aws.amazon.com/codesuite/codepipeline/home</a>.</p></li><li><p>在 <strong>Welcome (欢迎)</strong> 页面、<strong>Getting started (入门)</strong> 页面或 <strong>Pipelines (管道)</strong> 页面上，选择 **Create pipeline (创建管道)**。</p></li><li><p>In<strong>第 1 步：选择管道设置</strong>, 在**Pipeline name (管道名称)**，输入<code>MyFirstPipeline</code>.</p></li><li><p>在 <strong>Service role (服务角色)</strong> 中，执行下列操作之一：</p><ul><li>选择<strong>新服务角色</strong>以允许 CodePipeline 在 IAM 中创建新的服务角色。</li><li>选择 <strong>Existing service role (现有服务角色)</strong> 以使用已在 IAM 中创建的服务角色。在<strong>Role name (角色名称)</strong> 中，从列表中选择您的服务角色。</li></ul></li><li><p>将 <strong>Advanced settings (高级设置)</strong> 中的各项设置保留为默认值，然后选择 **Next (下一步)**。</p></li><li><p>In<strong>步骤 2: 添加源阶段</strong>, 在<strong>源提供商</strong>中，选择<strong>Amazon S3</strong>. 在 <strong>Bucket (存储桶)</strong> 中，输入您在<a href="https://docs.aws.amazon.com/zh_cn/codepipeline/latest/userguide/tutorials-simple-s3.html#s3-create-s3-bucket">第 1 步：为您的应用程序创建 S3 存储桶</a>中创建的 S3 存储桶的名称。在 <strong>S3 object key (S3 对象键)</strong> 中，输入带或不带文件路径的对象键。请记住加上文件的扩展名。例如，对于 来说为<code>SampleApp_Windows.zip</code>中，输入示例文件名，如本例中所示：</p><pre><code class="hljs bash"><span class="hljs-comment"># s3桶中文件名.</span><span class="hljs-comment"># S3对象键中输入SampleApp_Windows.zip</span>SampleApp_Windows.zip</code></pre><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/17_pipeline.png" alt="17_pipeline" style="zoom:67%;"></li></ol><p>在<strong>更改检测选项</strong>下面，保留默认值。这样，CodePipeline 就可以使用 Amazon CloudWatch Events 检测源存储桶中的更改.<br>选择 <strong>Next (下一步)</strong></p><ol start="7"><li><p>In<strong>步骤 3: 添加构建阶段</strong>中，选择<strong>跳过构建阶段</strong>，然后接受警告消息，方法是选择<strong>Skipeline</strong>。选择 <strong>Next (下一步)</strong>.</p></li><li><p>In<strong>步骤 4: 添加部署阶段</strong>, 在<strong>部署提供程序</strong>中，选择<strong>AWS CodeDeploy</strong>. 这些区域有：<strong>区域</strong>字段默认为与您的管道相同的 AWS 区域.<br>在 <strong>Application name (应用程序名称)</strong> 中，输入 <code>MyDemoApplication</code>，或选择 <strong>Refresh (刷新)</strong> 按钮，然后从列表中选择应用程序名称.<br>在 <strong>Deployment group (部署组)</strong> 中，输入 <code>MyDemoDeploymentGroup</code> 或者从列表中选择它，然后选择 <strong>Next (下一步)</strong>.</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/18_deploy.png" alt="18_deploy" style="zoom:67%;"></li><li><p>In<strong>第 5 步：审核</strong>，检查信息，然后选择<strong>创建管道</strong>.</p></li><li><p>管道开始运行。在 Codeepipeline 示例为 CodeDeploy 部署中的每个 Amazon EC2 实例部署网页时，您可以查看进度以及成功和失败消息.</p></li></ol><h4 id="7-s3管道实验结果验证"><a href="#7-s3管道实验结果验证" class="headerlink" title="7.s3管道实验结果验证"></a>7.s3管道实验结果验证</h4><p>恭喜您！您刚刚在 CodePipeline 中创建了一个简单的管道。管道具有两个阶段：</p><ul><li>一个名为 <strong>Source</strong> 的源阶段，此阶段会检测存储在 S3 存储桶中的受版本控制的示例应用程序中的更改，并将这些更改提取到管道中.</li><li><strong>部署</strong>阶段，该阶段使用 CodeDeploy 将这些更改部署到 EC2 实例.</li></ul><p>现在，验证结果.</p><p><strong>验证您的管道是否已成功运行</strong></p><ol><li><p>查看管道的初始进度。每个阶段的状态将从<strong>还没有任何执行</strong>变为<strong>正在进行</strong>，然后变为 <strong>成功</strong>或<strong>失败</strong>。管道将在几分钟内完成首次运行。</p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/19_%20myFirstPipeline.png" alt="19_ myFirstPipeline" style="zoom:67%;"></li><li><p>操作状态显示 <strong>Succeeded (成功)</strong> 之后，在 <strong>Deploy (部署)</strong> 阶段的状态区域中，选择 **Details (详细信息)**。此操作将打开 AWS CodeDeploy 控制台.</p></li><li><p>在<strong>部署组</strong>选项卡，在<strong>部署生命周期事件</strong>中，选择一个返回实例 ID。此操作将打开 EC2 控制台.<br><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/20_ec2_console.png" alt="20_ec2_console"></p></li><li><p>在 <strong>Description (描述)</strong> 选项卡上的 <strong>Public DNS (公有 DNS)</strong> 中，复制地址，然后将其粘贴到 Web 浏览器的地址栏中。查看上传到 S3 存储桶的示例应用程序的索引页面.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/21_ec2_public_dns.png" alt="21_ec2_public_dns"></p><p>以下页面是您上传到 S3 存储桶的示例应用程序.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/aws-codepipeline-started/22_codedeploy_status.png" alt="22_codedeploy_status"></p></li></ol><p><strong><u>PS: 本文仅为学习记录, 仅供学习与参与.</u></strong></p>]]></content>
    
    
    <categories>
      
      <category>aws</category>
      
      <category>codepipeline</category>
      
    </categories>
    
    
    <tags>
      
      <tag>aws</tag>
      
      <tag>codepipeline</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pantone年度流行色</title>
    <link href="/2021/12/13/pantone-colors/"/>
    <url>/2021/12/13/pantone-colors/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Pantone年度流行色"><a href="#Pantone年度流行色" class="headerlink" title="Pantone年度流行色"></a>Pantone年度流行色</h3><h4 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h4><p>国际色彩权威机构（潘通）Pantone公司发布了2021年年度双代表色：「极致灰」（Ultimate Gray）与「亮丽黄」（ Illuminating）</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pantone-colors/01_gray_llluminating.png" alt="01_gray_llluminating" style="zoom: 50%;"></p><pre><code class="hljs bash">PANTONE 17-5104 Ultimate GraysRGB: 147, 149, 151HEX/HTML: <span class="hljs-comment">#939597</span>L*a*b*₁: 62, 0, -1CMYK：40, 30, 32, 9PANTONE 13-0647 IlluminatingsRGB: 245, 223, 77HEX/HTML: <span class="hljs-comment">#F5DF4D</span>L*a*b*: 89, -3, 70CMYK：3, 1, 78, 0</code></pre><h4 id="2020"><a href="#2020" class="headerlink" title="2020"></a>2020</h4><p>潘通2020年度代表色：19-4052 Classic Blue（经典蓝）</p><p>「在一天结束时的美丽颜色」，在选择经典蓝时，该机构表示他们先研究了世界上正在发生的事情.</p><pre><code class="hljs bash">19-4052 Classic BlueCMYK:100,76,25,0sRGB: 15,76,129HEX/HTML: <span class="hljs-comment">#0F4C81</span></code></pre><h4 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h4><p>潘通2019年度代表色：16-1546 Living Coral （活珊瑚橘）</p><p>珊瑚橘代表着现代生活的多方融合，是在周遭自然环境中出现的滋养颜色，同时也是社交媒体里生动呈现的颜色.</p><pre><code class="hljs bash">16-1546 Living CoralCMYK:0,65,54,0sRGB: 225,111,97HEX/HTML: <span class="hljs-comment">#FF6F61</span></code></pre><h4 id="2018"><a href="#2018" class="headerlink" title="2018"></a>2018</h4><p>潘通2018年度代表色：18-3838 Ultra Violet（紫外光）</p><p>极具创造力和想象力！紫外光照亮了通往未来的道路！一个强烈挑动思绪与深思的紫色调! PANTONE 18-3838 紫外光传达独创性、创造力和前瞻性的思维，为我们指向未来.</p><pre><code class="hljs bash">19-4052 Classic BlueCMYK:71,73,7,8sRGB: 95,75,139HEX/HTML: <span class="hljs-comment">#5F4B8B</span></code></pre><h4 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h4><p>潘通2017年度代表色：15-0343 Greenery （草木绿）</p><p>清新活力之色，草木绿是新生的象征。一个代表初春时节万物复苏、欣欣向荣的颜色，清新而充满活力，如同身处于繁茂的绿植之中，让人情不自禁地开始深呼吸，感受新鲜空气，振作精神.</p><pre><code class="hljs bash">18-3838 ULTRA VIOLETCMYK:51,9,88,0sRGB:136,176,75HEX/HTML: <span class="hljs-comment">#88B04B</span></code></pre><h4 id="2016"><a href="#2016" class="headerlink" title="2016"></a>2016</h4><p>潘通2016年度代表色：13-1520 Rose Quartz （水晶粉）与 15-3919 Serenity （宁静蓝）</p><p>偏向柔和的色彩手法：Pantone公司首度选择两种色彩的组合作为代表色—2016年的年度代表色是宁静蓝与水晶粉.</p><pre><code class="hljs bash">13-1520 Rose QuartzCMYK:0,24,15,0sRGB:247,202,201HEX/HTML: <span class="hljs-comment">#F7CAC9</span>15-3919 SerenityCMYK:42,24,3,0sRGB:146,168,209HEX/HTML: <span class="hljs-comment">#92A8D1</span></code></pre><h4 id="2015"><a href="#2015" class="headerlink" title="2015"></a>2015</h4><p>潘通2015年度代表色：18-1438 Marsala （玛萨拉酒红）</p><p>一种自然有劲与质朴的酒红色，玛萨拉酒红丰富我们的精神、肉体与灵魂. 玛萨拉酒红有力、饱满的特质，让它不论是单独使用或是配搭许多其他的颜色作为吸睛重点，都是具有特色的优雅色彩.</p><pre><code class="hljs bash">18-1438 MarsalaCMYK:25,77,64,11sRGB:150,79,76HEX/HTML: <span class="hljs-comment">#955251</span></code></pre><h4 id="2014"><a href="#2014" class="headerlink" title="2014"></a>2014</h4><p>潘通2014年度代表色：18-3224 Radiant Orchid （璀璨紫兰花）</p><p>璀璨紫兰花绽放出自信与温暖，它能吸引目光，激发想象. 这是一个让人著迷的紫色，以诱人的魅力吸引您靠近。璀璨紫兰花是以紫红、紫及粉红为底色融合出的迷人颜色，唤起自信，散发出极大的喜悦、爱与健康.</p><pre><code class="hljs bash">18-3224 Radiant OrchidCMYK:33,72,0,0sRGB:177,99,163HEX/HTML: <span class="hljs-comment">#B565A7</span></code></pre><h4 id="2013"><a href="#2013" class="headerlink" title="2013"></a>2013</h4><p>潘通2013年度代表色：17-5641 Emerald （翡翠绿）</p><p>生动、灿烂、华丽、一种典雅与优美的色彩提升我们的幸福感，平衡与和谐. 翡翠绿最常让人联想到璀璨珍贵的宝石，给人精緻奢华的感觉.</p><pre><code class="hljs bash">17-5641 EmeraldCMYK:86,8,57,0sRGB:0,152,116HEX/HTML: <span class="hljs-comment">#009B77</span></code></pre><h4 id="2012"><a href="#2012" class="headerlink" title="2012"></a>2012</h4><p>潘通2012年度代表色：17-1463 Tangerine Tango （探戈橘）</p><p>探戈橘让人联想起光辉灿烂的夕阳，融合了红色的活力、兴奋与黄色的温暖、友善，形成一个高能见度、具有磁性的颜色，散发出热力与能量.</p><pre><code class="hljs bash">17-1463 Tangerine TangoCMYK:0,82,80,0sRGB:226,73,47HEX/HTML: <span class="hljs-comment">#E2492F</span></code></pre><h4 id="2011"><a href="#2011" class="headerlink" title="2011"></a>2011</h4><p>潘通2011年度代表色：18-2120 Honeysuckle （忍冬红）</p><p>勇敢、自信、重要，一个勇敢的新颜色， 一个勇敢的新世界. 让忍冬红大胆精神注入你， 带你渡过这一年.</p><pre><code class="hljs bash">18-2120 HoneysuckleCMYK:4,75,24,0sRGB:203,101,134HEX/HTML: <span class="hljs-comment">#CB6586</span></code></pre><h4 id="2010"><a href="#2010" class="headerlink" title="2010"></a>2010</h4><p>潘通2010年度代表色：15-5519 Turquoise （松石绿）</p><p>结合蓝色的宁静和绿色的振兴方面，松石绿启发了舒缓的思想，热带水域和安慰逃离世界的日常烦恼，同时恢复我们的幸福感.</p><pre><code class="hljs bash">15-5519 TurquoiseHEX/HTML: <span class="hljs-comment">#45B5AA</span></code></pre><h4 id="2009"><a href="#2009" class="headerlink" title="2009"></a>2009</h4><p>潘通2009年度代表色：14-0848 Mimosa（含羞草黄）</p><p>黄色象征着太阳的温暖和滋养的品质，我们作为人类的属性自然被吸引来保证. 含羞草也谈到了启蒙，因为它是一种激发想象力和创新的色调.</p><pre><code class="hljs bash">14-0848 MimosaHEX/HTML: <span class="hljs-comment">#F0C05A</span></code></pre><h4 id="2008"><a href="#2008" class="headerlink" title="2008"></a>2008</h4><p>潘通2008年度代表色：18-3943 Blue Iris （鸢尾蓝）</p><p>一个美丽的平衡蓝紫色，作为2008的潘通年度代表色. 鸢尾蓝与紫色的神秘和灵性特质相结合的稳定和平静的一面，满足了在一个复杂的世界，同时增加了一个神秘和兴奋的暗示的需要.</p><pre><code class="hljs bash">8-3943 Blue IrisHEX/HTML: <span class="hljs-comment">#5A5B9F</span></code></pre><h4 id="2007"><a href="#2007" class="headerlink" title="2007"></a>2007</h4><p>潘通2007年度代表色：19-1557 Chili Pepper （辣椒红）</p><p>这种迷人的、共振的色调在时尚和个人表达上有很高的反响，因为它的大胆是精致和诱人的.  在这个时代，从手机到社交网站上的网页都体现出了个性，辣椒意味着一种外向、自信、设计精神的态度.</p><pre><code class="hljs bash">19-1557 Chili PepperHEX/HTML: <span class="hljs-comment">#9B1B30</span></code></pre><h4 id="2006-2000"><a href="#2006-2000" class="headerlink" title="2006-2000"></a>2006-2000</h4><pre><code class="hljs bash">SAND DOLLAR 13-1106(2006)HEX/HTML: <span class="hljs-comment">#DECDBE</span>BLUE TURQUOISE 15-5217(2005)HEX/HTML: <span class="hljs-comment">#53B0AE</span>TIGERLILY 17-1456(2004)HEX/HTML: <span class="hljs-comment">#E2583E</span>AQUA SKY 14-4811(2003)HEX/HTML: <span class="hljs-comment">#7BC4C4</span>TRUE RED 19-1664(2002)HEX/HTML: <span class="hljs-comment">#BF1932</span>FUCHSIA ROSE 17-2031(2001)HEX/HTML: <span class="hljs-comment">#C74375</span>CERULEAN BLUE 15-4020(2000)HEX/HTML: <span class="hljs-comment">#98B2D1</span></code></pre><p>可以在Notability中设置自己喜欢的颜色</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/pantone-colors/02_notability_colors.png" alt="02_notability_colors"></p><p><strong><u>PS: 本文仅为互联网摘录, 仅供学习与参与!</u></strong></p>]]></content>
    
    
    <categories>
      
      <category>pantone</category>
      
      <category>colors</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pantone</tag>
      
      <tag>colors</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pandas-qa数据表统计</title>
    <link href="/2021/12/11/py-pandas-qa-sum/"/>
    <url>/2021/12/11/py-pandas-qa-sum/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="pandas-qa数据表统计"><a href="#pandas-qa数据表统计" class="headerlink" title="pandas-qa数据表统计"></a>pandas-qa数据表统计</h3><h4 id="1-实现目标"><a href="#1-实现目标" class="headerlink" title="1.实现目标"></a>1.实现目标</h4><ul><li>qa之excel文件上传,数据解析</li><li>统计数据图表显示</li><li>统计数据下载, 生成excel文件</li></ul><h4 id="2-pandas简介"><a href="#2-pandas简介" class="headerlink" title="2.pandas简介"></a>2.pandas简介</h4><p>Pandas是一个开源库，建立在NumPy库之上。它是一个Python包，提供各种数据结构和操作，用于处理数字数据和时间序列.<br>它主要用于更轻松地导入和分析数据. Pandas速度快，为用户提供高性能和高生产率.</p><p>DataFrame: 具有标记轴（行和列）的二维大小可变、潜在异构的表格数据结构。数据帧是一种二维数据结构，即数据以表格的方式在行和列中对齐.<br>Pandas DataFrame由三个主要组件组成：数据、行和列.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/py-pandas-qa-sum/001_dataframe.jpg" alt="001_dataframe"></p><p>Series: 一个一维标记数组，能够保存任何类型的数据（整数、字符串、浮点、python对象等）.<br>轴标签统称为索引. series 只不过是excel工作表中的一列.<br>标签不必是唯一的，但必须是可哈希类型. 该对象支持基于整数和标签的索引，并提供了大量方法来执行涉及索引的操作.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/py-pandas-qa-sum/002_series.jpg" alt="002_series"></p><h4 id="3-后台数据解析"><a href="#3-后台数据解析" class="headerlink" title="3.后台数据解析"></a>3.后台数据解析</h4><pre><code class="hljs python"><span class="hljs-comment">#! /usr/bin/python3</span><span class="hljs-comment"># -*- coding:utf-8 -*-</span><span class="hljs-comment"># @Time: 2021/12/2</span><span class="hljs-comment"># @Author: Lingchen</span><span class="hljs-comment"># @Prescription:</span><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<span class="hljs-comment"># 列项目名.</span><span class="hljs-comment"># 項番 QA対象 QA種別 起票フェーズ</span><span class="hljs-comment"># 起票日 起票者 ｻﾌﾞｼｽﾃﾑ</span><span class="hljs-comment"># 機能大分類 重要度 緊急度</span><span class="hljs-comment"># 質問内容 希望解決期限 解決に向けての対応状況・内容</span><span class="hljs-comment"># 解決日 解決者 対応状態</span><span class="hljs-comment"># 確認状態 最終確認日 確認者</span><span class="hljs-comment"># QAによる影響（実績）  備考 CD確認 CL確認</span>columns_name = [<span class="hljs-string">&#x27;no&#x27;</span>, <span class="hljs-string">&#x27;qa_object&#x27;</span>, <span class="hljs-string">&#x27;qa_category&#x27;</span>, <span class="hljs-string">&#x27;qa_phase&#x27;</span>,                <span class="hljs-string">&#x27;start_date&#x27;</span>, <span class="hljs-string">&#x27;issuer&#x27;</span>, <span class="hljs-string">&#x27;sub_system&#x27;</span>,                <span class="hljs-string">&#x27;function_id&#x27;</span>, <span class="hljs-string">&#x27;importance&#x27;</span>, <span class="hljs-string">&#x27;urgency&#x27;</span>,                <span class="hljs-string">&#x27;qa_content&#x27;</span>, <span class="hljs-string">&#x27;deadline&#x27;</span>, <span class="hljs-string">&#x27;status_content&#x27;</span>,                <span class="hljs-string">&#x27;settle_date&#x27;</span>, <span class="hljs-string">&#x27;resolver&#x27;</span>, <span class="hljs-string">&#x27;status&#x27;</span>,                <span class="hljs-string">&#x27;confirm_status&#x27;</span>, <span class="hljs-string">&#x27;final_confirm_date&#x27;</span>, <span class="hljs-string">&#x27;confirmer&#x27;</span>]<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">handle_qa</span>(<span class="hljs-params">file</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    处理qa上传文件.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-comment"># 读入qa文件(列：項番 ～ 確認者).</span>    df = pd.read_excel(file, sheet_name=<span class="hljs-string">&#x27;QA管理一覧表&#x27;</span>, header=<span class="hljs-number">13</span>, usecols=<span class="hljs-string">&#x27;B:T&#x27;</span>)    <span class="hljs-comment"># 重定义列名.</span>    df.set_axis(columns_name, axis=<span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)    <span class="hljs-comment"># 回答日数計算.</span>    df[<span class="hljs-string">&#x27;answer_days&#x27;</span>] = pd.DataFrame(        (pd.to_datetime(df[<span class="hljs-string">&#x27;settle_date&#x27;</span>]) - pd.to_datetime(df[<span class="hljs-string">&#x27;start_date&#x27;</span>])).values / np.timedelta64(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;D&#x27;</span>))    <span class="hljs-comment"># １日内</span>    answer_days1 = (df[<span class="hljs-string">&#x27;answer_days&#x27;</span>] &lt;= <span class="hljs-number">1.0</span>).<span class="hljs-built_in">sum</span>()    <span class="hljs-comment"># １～３日</span>    answer_day13 = ((df[<span class="hljs-string">&#x27;answer_days&#x27;</span>] &gt; <span class="hljs-number">1.0</span>) &amp; (df[<span class="hljs-string">&#x27;answer_days&#x27;</span>] &lt;= <span class="hljs-number">3.0</span>)).<span class="hljs-built_in">sum</span>()    <span class="hljs-comment"># ３日以上</span>    answer_day3 = (df[<span class="hljs-string">&#x27;answer_days&#x27;</span>] &gt; <span class="hljs-number">3.0</span>).<span class="hljs-built_in">sum</span>()    <span class="hljs-comment"># qa的总件数.</span>    total = df[<span class="hljs-string">&#x27;function_id&#x27;</span>].count()    <span class="hljs-comment"># 未解决的qa数</span>    answer_last = total - answer_days1 - answer_day13 - answer_day3    <span class="hljs-comment"># 回答日数的统计.</span>    print(<span class="hljs-string">&#x27;回答日数的统计: &#x27;</span>)    qa_date_sum = [        &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;１日内&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>: answer_days1&#125;,        &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;１～３日&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>: answer_day13&#125;,        &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;３日以上&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>: answer_day3&#125;,        &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;未回答&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>: answer_last&#125;,    ]    print(qa_date_sum)    <span class="hljs-comment"># 分類のパーセント（設計、製造、テスト、結合テスト）.</span>    qa_phase_group = df.groupby([<span class="hljs-string">&#x27;qa_phase&#x27;</span>])    df_qa_phase = qa_phase_group[<span class="hljs-string">&#x27;qa_phase&#x27;</span>].count()    qa_group = []    print(<span class="hljs-string">&#x27;\n分類のパーセント: &#x27;</span>)    <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> df_qa_phase.iteritems():        print(key, value)        qa_group.append(&#123;            <span class="hljs-string">&#x27;name&#x27;</span>: key,            <span class="hljs-string">&#x27;value&#x27;</span>: value        &#125;)    <span class="hljs-comment"># 機能別件数.</span>    print(<span class="hljs-string">&#x27;\n機能別件数: &#x27;</span>)    df_function_id = df.groupby([<span class="hljs-string">&#x27;function_id&#x27;</span>])[<span class="hljs-string">&#x27;function_id&#x27;</span>].count()    <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> df_function_id.iteritems():        print(key, value)    result = &#123;        <span class="hljs-string">&#x27;qa_date&#x27;</span>: qa_date_sum,        <span class="hljs-string">&#x27;qa_group&#x27;</span>: qa_group,        <span class="hljs-string">&#x27;qa_fun&#x27;</span>: &#123;<span class="hljs-string">&#x27;fun_id&#x27;</span>: <span class="hljs-built_in">list</span>(df_function_id.index),                   <span class="hljs-string">&#x27;fun_num&#x27;</span>: <span class="hljs-built_in">list</span>(df_function_id.values)                   &#125;    &#125;    <span class="hljs-keyword">return</span> result<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">handle_qa_download</span>(<span class="hljs-params">data</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    下载Excel数据.</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-comment"># print(data[&#x27;pie_data&#x27;])</span>    <span class="hljs-comment"># print(data[&#x27;texture_data&#x27;])</span>    <span class="hljs-comment"># print(data[&#x27;fun_id&#x27;])</span>    <span class="hljs-comment"># print(data[&#x27;fun_data&#x27;])</span>    x_io = BytesIO()    <span class="hljs-comment"># QA回答天数分布.</span>    df = pd.DataFrame(data[<span class="hljs-string">&#x27;pie_data&#x27;</span>])    qa_data_cols = [<span class="hljs-string">&#x27;回答天数&#x27;</span>, <span class="hljs-string">&#x27;累计个数&#x27;</span>]    <span class="hljs-comment"># 重定义列名.</span>    df.set_axis(qa_data_cols, axis=<span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)    <span class="hljs-comment"># QA分类.</span>    df_cate = pd.DataFrame(data[<span class="hljs-string">&#x27;texture_data&#x27;</span>])    qa_category_cols = [<span class="hljs-string">&#x27;QA分类&#x27;</span>, <span class="hljs-string">&#x27;累计个数&#x27;</span>]    df_cate.set_axis(qa_category_cols, axis=<span class="hljs-number">1</span>, inplace=<span class="hljs-literal">True</span>)    <span class="hljs-comment"># QA机能分类.</span>    qa_fun = &#123;        <span class="hljs-string">&#x27;机能名&#x27;</span>: data[<span class="hljs-string">&#x27;fun_id&#x27;</span>],        <span class="hljs-string">&#x27;累积个数&#x27;</span>: data[<span class="hljs-string">&#x27;fun_data&#x27;</span>]    &#125;    df_fun = pd.DataFrame(qa_fun)    <span class="hljs-comment"># options = &#123;&#125;</span>    <span class="hljs-comment"># options[&#x27;strings_to_formulas&#x27;] = False</span>    <span class="hljs-comment"># options[&#x27;strings_to_urls&#x27;] = False</span>    <span class="hljs-comment"># with pd.ExcelWriter(x_io, engine=&#x27;xlsxwriter&#x27;, options=options) as writer:</span>    <span class="hljs-comment"># 写入多个sheet页.</span>    <span class="hljs-keyword">with</span> pd.ExcelWriter(x_io) <span class="hljs-keyword">as</span> writer:        df.to_excel(writer, sheet_name=<span class="hljs-string">&#x27;回答日数统计&#x27;</span>, index=<span class="hljs-literal">False</span>)        df_cate.to_excel(writer, sheet_name=<span class="hljs-string">&#x27;QA分类&#x27;</span>, index=<span class="hljs-literal">False</span>)        df_fun.to_excel(writer, sheet_name=<span class="hljs-string">&#x27;QA机能&#x27;</span>, index=<span class="hljs-literal">False</span>)    writer.save()    writer.close()    excel_name = <span class="hljs-string">&#x27;temp&#x27;</span> + <span class="hljs-string">&#x27;.xlsx&#x27;</span>    response = HttpResponse()    response[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/octet-stream&#x27;</span>    response[<span class="hljs-string">&#x27;Content-Disposition&#x27;</span>] = <span class="hljs-string">&#x27;attachment;filename=&quot;%s&quot;&#x27;</span> % excel_name    response.write(x_io.getvalue())    <span class="hljs-keyword">return</span> response</code></pre><p>4.前台数据显示</p><pre><code class="hljs vue">&lt;template&gt;  &lt;main&gt;    &lt;div class&#x3D;&quot;container py-4&quot;&gt;      &lt;header class&#x3D;&quot;pb-3 mb-4 border-bottom&quot;&gt;        &lt;a href&#x3D;&quot;&#x2F;&quot; class&#x3D;&quot;d-flex align-items-center text-dark text-decoration-none&quot;&gt;          &lt;svg xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; width&#x3D;&quot;40&quot; height&#x3D;&quot;32&quot; class&#x3D;&quot;me-2&quot; viewBox&#x3D;&quot;0 0 118 94&quot; role&#x3D;&quot;img&quot;&gt;&lt;title&gt;Bootstrap&lt;&#x2F;title&gt;&lt;path fill-rule&#x3D;&quot;evenodd&quot; clip-rule&#x3D;&quot;evenodd&quot; d&#x3D;&quot;M24.509 0c-6.733 0-11.715 5.893-11.492 12.284.214 6.14-.064 14.092-2.066 20.577C8.943 39.365 5.547 43.485 0 44.014v5.972c5.547.529 8.943 4.649 10.951 11.153 2.002 6.485 2.28 14.437 2.066 20.577C12.794 88.106 17.776 94 24.51 94H93.5c6.733 0 11.714-5.893 11.491-12.284-.214-6.14.064-14.092 2.066-20.577 2.009-6.504 5.396-10.624 10.943-11.153v-5.972c-5.547-.529-8.934-4.649-10.943-11.153-2.002-6.484-2.28-14.437-2.066-20.577C105.214 5.894 100.233 0 93.5 0H24.508zM80 57.863C80 66.663 73.436 72 62.543 72H44a2 2 0 01-2-2V24a2 2 0 012-2h18.437c9.083 0 15.044 4.92 15.044 12.474 0 5.302-4.01 10.049-9.119 10.88v.277C75.317 46.394 80 51.21 80 57.863zM60.521 28.34H49.948v14.934h8.905c6.884 0 10.68-2.772 10.68-7.727 0-4.643-3.264-7.207-9.012-7.207zM49.948 49.2v16.458H60.91c7.167 0 10.964-2.876 10.964-8.281 0-5.406-3.903-8.178-11.425-8.178H49.948z&quot; fill&#x3D;&quot;currentColor&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;svg&gt;          &lt;span class&#x3D;&quot;fs-4&quot;&gt;Qa Dashboard&lt;&#x2F;span&gt;        &lt;&#x2F;a&gt;      &lt;&#x2F;header&gt;      &lt;div class&#x3D;&quot;p-2 mb-4 bg-light rounded-3 text-start&quot;&gt;        &lt;div class&#x3D;&quot;container-fluid py-2&quot;&gt;          &lt;h1 class&#x3D;&quot;display-6 fw-bold&quot;&gt;Agmate Qaの説明&lt;&#x2F;h1&gt;          &lt;div class&#x3D;&quot;text-muted fw-normal&quot;&gt;            &lt;ul class&#x3D;&quot;list-unstyled ps-4&quot;&gt;              &lt;li&gt;１、Qaのシート名は「QA管理一覧表」です&lt;&#x2F;li&gt;              &lt;li&gt;２、Qaの日付型の列：「起票日、解決日」などは、タイプ「YYYY&#x2F;MM&#x2F;DD」でなければなりません。&lt;&#x2F;li&gt;              &lt;li&gt;３、Qaのシート「QA管理一覧表」の有効開始行：項番♯13以降、有効列は「B:T」です。&lt;&#x2F;li&gt;            &lt;&#x2F;ul&gt;          &lt;&#x2F;div&gt;          &lt;el-upload            ref&#x3D;&quot;upload&quot;            :limit&#x3D;&quot;1&quot;            accept&#x3D;&quot;.xlsx, .xlsm&quot;            :on-error&#x3D;&quot;handleUploadError&quot;            :on-exceed&#x3D;&quot;handleExceed&quot;            :on-success&#x3D;&quot;handleFileSuccess&quot;            :on-progress&#x3D;&quot;handleFileUploadProgress&quot;            :disabled&#x3D;&quot;isUploading&quot;            :action&#x3D;&quot;uploadQaUrl&quot;            :headers&#x3D;&quot;headers&quot;            class&#x3D;&quot;ps-4&quot;            drag          &gt;            &lt;i class&#x3D;&quot;el-icon-upload&quot;&gt;&lt;&#x2F;i&gt;            &lt;div class&#x3D;&quot;el-upload__text&quot;&gt;将文件拖到此处,或&lt;em&gt;点击上传&lt;&#x2F;em&gt;&lt;&#x2F;div&gt;            &lt;template #tip&gt;              &lt;div class&#x3D;&quot;el-upload__tip text-danger&quot;&gt;                TIPS：インポートできるファイル形式は：xlsx、xlsm              &lt;&#x2F;div&gt;            &lt;&#x2F;template&gt;          &lt;&#x2F;el-upload&gt;        &lt;&#x2F;div&gt;      &lt;&#x2F;div&gt;      &lt;div id&#x3D;&quot;qa-dashboard-div&quot; class&#x3D;&quot;text-start ps-4&quot; v-show&#x3D;&quot;isDashboardShow&quot;&gt;        &lt;h2 class&#x3D;&quot;pb-2&quot;&gt;Qa dashboard&lt;&#x2F;h2&gt;        &lt;el-button type&#x3D;&quot;primary&quot; class&#x3D;&quot;mb-2&quot; @click&#x3D;&quot;handleDownload&quot;&gt;          下载          &lt;el-icon class&#x3D;&quot;el-icon-arrow-down&quot;&gt;            &lt;Upload &#x2F;&gt;          &lt;&#x2F;el-icon&gt;        &lt;&#x2F;el-button&gt;        &lt;el-collapse v-model&#x3D;&quot;activeNames&quot; accordion&gt;          &lt;el-collapse-item title&#x3D;&quot;Pie&quot; name&#x3D;&quot;qa-pie&quot;&gt;            &lt;div id&#x3D;&quot;qa-pie&quot; style&#x3D;&quot;height: 400px; width: 900px&quot;&#x2F;&gt;          &lt;&#x2F;el-collapse-item&gt;          &lt;el-collapse-item title&#x3D;&quot;Texture Pie&quot; name&#x3D;&quot;qa-texture-pie&quot;&gt;            &lt;div id&#x3D;&quot;qa-texture-pie&quot; style&#x3D;&quot;height: 400px; width: 900px&quot;&#x2F;&gt;          &lt;&#x2F;el-collapse-item&gt;          &lt;el-collapse-item title&#x3D;&quot;Bar&quot; name&#x3D;&quot;qa-bar&quot;&gt;            &lt;div id&#x3D;&quot;qa-bar&quot; style&#x3D;&quot;height: 1000px; width: 900px&quot;&#x2F;&gt;          &lt;&#x2F;el-collapse-item&gt;        &lt;&#x2F;el-collapse&gt;      &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;  &lt;&#x2F;main&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123; Upload &#125; from &#39;@element-plus&#x2F;icons&#39;import &#123; getCsrfToken &#125; from &#39;@&#x2F;utils&#x2F;auth&#39;import &#123; qaDownload &#125; from &#39;@&#x2F;api&#x2F;api&#39;import $ from &#39;jquery&#39;export default &#123;  name: &#39;index&#39;,  data() &#123;    return &#123;      &#x2F;&#x2F; 上传的API的datasets的服务器地址.      uploadQaUrl: process.env.VUE_APP_BASE_API + &quot;&#x2F;apis&#x2F;qa&#x2F;upload&quot;,      isUploading: false,      headers: &#123;        &#39;X-CSRFToken&#39;: getCsrfToken()      &#125;,      &#x2F;&#x2F; qa上传结果显示Flg.      isDashboardShow: false,      &#x2F;&#x2F; isDashboardShow: true,      &#x2F;&#x2F; qa数量饼图.      pieOption: &#123;&#125;,      &#x2F;&#x2F; qa饼图数据.      pieData: [],      &#x2F;&#x2F; qa分类背景饼图.      texturePieOption: &#123;&#125;,      texturePieData: [],      &#x2F;&#x2F; 柱状图.      barOption: &#123;&#125;,      &#x2F;&#x2F; 柱状图y轴FunctionId.      barFunctionIdData: [],      &#x2F;&#x2F; 柱状图x轴件数.      barFunctionSumData: [],      activeNames: [&#39;qa-pie&#39;]    &#125;  &#125;,  mounted() &#123;    &#x2F;&#x2F; 显示饼图.    &#x2F;&#x2F; this.showPie();  &#125;,  methods: &#123;    &#x2F;&#x2F; 文件上传中处理.    handleFileUploadProgress(event, file, fileList) &#123;      this.isUploading &#x3D; true      this.clearTagContents()    &#125;,    &#x2F;&#x2F; 文件上传成功处理    handleFileSuccess(response, file, fileList) &#123;      this.isUploading &#x3D; false      this.$refs.upload.clearFiles()      &#x2F;&#x2F; 显示饼图.      this.showPie(response.qa_contents.qa_date)      &#x2F;&#x2F; 显示背景饼图.      this.showTexturePie(response.qa_contents.qa_group)      &#x2F;&#x2F; 显示柱状图.      this.showFunctionBar(response.qa_contents.qa_fun)      this.isDashboardShow &#x3D; true    &#125;,    &#x2F;&#x2F; 文件个数超出.    handleExceed() &#123;      this.isUploading &#x3D; false      this.clearTagContents()      this.$message.error(&#96;只允许上传单个文件&#96;)    &#125;,    &#x2F;&#x2F; 上传失败    handleUploadError(err) &#123;      this.isUploading &#x3D; false      this.clearTagContents()      this.$message.error(&quot;上传失败, 请重试&quot;)    &#125;,    &#x2F;&#x2F; 清除API上传结果.    clearTagContents() &#123;      this.pieOption &#x3D; &#123;&#125;      this.texturePieOption &#x3D; &#123;&#125;      this.barFunctionIdData &#x3D; []      this.barFunctionSumData &#x3D; []      this.isDashboardShow &#x3D; false    &#125;,    &#x2F;&#x2F; 饼图显示处理.    showPie(data) &#123;      console.log(data)      this.pieData &#x3D; data      this.pieOption &#x3D; &#123;        title: &#123;          text: &#39;Date distribution of Qa&#39;,          left: &#39;center&#39;        &#125;,        tooltip: &#123;          trigger: &#39;item&#39;        &#125;,        legend: &#123;          top: &#39;bottom&#39;        &#125;,        toolbox: &#123;          show: true,          feature: &#123;            mark: &#123; show: true &#125;,            dataView: &#123; show: true, readOnly: false &#125;,            restore: &#123; show: true &#125;,            saveAsImage: &#123; show: true &#125;          &#125;        &#125;,        series: [          &#123;            name: &#39;Qa Chart&#39;,            type: &#39;pie&#39;,            radius: &#39;70%&#39;,            data: data,          &#125;        ],        emphasis: &#123;          itemStyle: &#123;            shadowBlur: 10,            shadowOffsetX: 0,            shadowColor: &#39;rgba(0, 0, 0, 0.5)&#39;          &#125;        &#125;      &#125;;      let myPie &#x3D; this.$echarts.init(document.getElementById(&#39;qa-pie&#39;))      &#x2F;&#x2F; this.$nextTick(() &#x3D;&gt; &#123;      &#x2F;&#x2F;   myPie.resize()      &#x2F;&#x2F; &#125;)      myPie.setOption(this.pieOption)      &#x2F;&#x2F; window.addEventListener(&quot;resize&quot;, function() &#123;      &#x2F;&#x2F;   myPie.resize()      &#x2F;&#x2F; &#125;)    &#125;,    showTexturePie(data) &#123;      console.log(data)      this.texturePieData &#x3D; data      &#x2F;&#x2F; 背景色.      const piePatternSrc &#x3D;        &#39;data:image&#x2F;jpeg;base64,xxxxxx&#39;;      const bgPatternSrc &#x3D;        &#39;data:image&#x2F;png;charset&#x3D;utf-8;base64,xxxxxx&#39;;      const piePatternImg &#x3D; new Image();      piePatternImg.src &#x3D; piePatternSrc;      const bgPatternImg &#x3D; new Image();      bgPatternImg.src &#x3D; bgPatternSrc;      &#x2F;&#x2F; 设置背景饼图处理.      this.texturePieOption &#x3D; &#123;        backgroundColor: &#123;          image: bgPatternImg,          repeat: &#39;repeat&#39;        &#125;,        title: &#123;          text: &#39;Qa classification statistics&#39;,          textStyle: &#123;            color: &#39;#235894&#39;          &#125;        &#125;,        tooltip: &#123;&#125;,        series: [          &#123;            name: &#39;pie&#39;,            type: &#39;pie&#39;,            selectedMode: &#39;single&#39;,            selectedOffset: 30,            clockwise: true,            label: &#123;              fontSize: 18,              color: &#39;#235894&#39;            &#125;,            labelLine: &#123;              lineStyle: &#123;                color: &#39;#235894&#39;              &#125;            &#125;,            data: data,            itemStyle: &#123;              opacity: 0.7,              color: &#123;                image: piePatternImg,                repeat: &#39;repeat&#39;              &#125;,              borderWidth: 3,              borderColor: &#39;#235894&#39;            &#125;          &#125;        ]      &#125;      let myTexturePie &#x3D; this.$echarts.init(document.getElementById(&#39;qa-texture-pie&#39;))      myTexturePie.setOption(this.texturePieOption)    &#125;,    &#x2F;&#x2F; 柱状图显示处理.    showFunctionBar(data) &#123;      console.log(data)      this.barFunctionIdData &#x3D; data.fun_id      this.barFunctionSumData &#x3D; data.fun_num      this.barOption &#x3D; &#123;        title: &#123;          text: &#39;Function ID statistics&#39;        &#125;,        tooltip: &#123;          trigger: &#39;axis&#39;,          axisPointer: &#123;            type: &#39;shadow&#39;          &#125;        &#125;,        legend: &#123;&#125;,        grid: &#123;          left: &#39;3%&#39;,          right: &#39;4%&#39;,          bottom: &#39;3%&#39;,          containLabel: true        &#125;,        xAxis: &#123;          type: &#39;value&#39;,          boundaryGap: [0, 0.01]        &#125;,        yAxis: &#123;          type: &#39;category&#39;,          data: this.barFunctionIdData,        &#125;,        series: [          &#123;            type: &#39;bar&#39;,            data: this.barFunctionSumData          &#125;,        ]      &#125;      let myBar &#x3D; this.$echarts.init(document.getElementById(&#39;qa-bar&#39;))      myBar.setOption(this.barOption)    &#125;,    &#x2F;&#x2F; 下载Excel处理.    handleDownload() &#123;      &#x2F;&#x2F; 组装数据.      const data &#x3D; &#123;        &#39;pie_data&#39;: this.pieData,        &#39;texture_data&#39;: this.texturePieData,        &#39;fun_id&#39;: this.barFunctionIdData,        &#39;fun_data&#39;: this.barFunctionSumData      &#125;      let fileName &#x3D; &#39;qa-sum.xlsx&#39;      qaDownload(data).then((res) &#x3D;&gt; &#123;        const a &#x3D; document.createElement(&#39;a&#39;)        const blob &#x3D; new Blob([res.data], &#123; type: &#39;application&#x2F;vnd.ms-excel&#39; &#125;)        const url &#x3D; URL.createObjectURL(blob)        a.setAttribute(&#39;href&#39;, url)        a.setAttribute(&#39;download&#39;, fileName)        a.click()      &#125;)    &#125;  &#125;&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;</code></pre><h4 id="4-效果显示"><a href="#4-效果显示" class="headerlink" title="4.效果显示"></a>4.效果显示</h4><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/py-pandas-qa-sum/003_qa.jpg" alt="003_qa"></p><p>点击下载按钮, 生成统计excel文件.</p><p><img src="https://iplume-hexo.oss-cn-beijing.aliyuncs.com/py-pandas-qa-sum/004_excel.jpg" alt="004_excel"></p><p><strong><u>ps: 本文为学习记录, 仅供学习与参与</u></strong></p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
      <category>pandas</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>vue</tag>
      
      <tag>pandas</tag>
      
      <tag>echarts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ECS知识记录</title>
    <link href="/2021/11/15/ecs-started/"/>
    <url>/2021/11/15/ecs-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="ECS记录"><a href="#ECS记录" class="headerlink" title="ECS记录"></a>ECS记录</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>Amazon Elastic Container Service (Amazon ECS)是一项高度可扩展且快速的容器管理服务，可轻松运行、停止和管理集群上的容器.<br>借助 Amazon ECS，您可以轻松部署、管理和扩展运行应用程序、服务和批处理流程的 Docker 容器.</p><p>Web 应用程序 : 可以构建可自动向上和向下扩展的 Web 应用程序，并在多个可用区之间在高可用性配置中运行该应用程序.<br>通过在 Amazon ECS 上运行，您的 Web 应用程序将受益于 AWS 的性能、规模、可靠性和可用性.<br>此外，默认情况下，您的服务还与多个 AWS 网络和安全服务集成，包括用于 Web 应用程序负载分配的 Application Load Balancer 和用于联网的 VPC.</p><p>Amazon ECS是一项区域服务，可在区域内的多个可用区中以高度可用的方式简化容器的运行.<br>您可以在新的或现有的 VPC 中创建 Amazon ECS 集群.<br>在群集启动并运行后，您可以创建用于定义在群集中运行的容器映像的任务定义.<br>您的任务定义用于运行任务或创建服务。容器映像将在容器注册表中存储和提取，例如，<a href="https://docs.aws.amazon.com/ecr">Amazon Elastic Container Registry</a>.</p><p>下图演示了Amazon ECS环境运行于AWS Fargate</p><img src="/2021/11/15/ecs-started/001.png" alt="ecs-001" style="zoom:50%;margin-left: 0;"><h4 id="2-容器和映像"><a href="#2-容器和映像" class="headerlink" title="2.容器和映像"></a>2.容器和映像</h4><p>容器 : 一种软件开发的标准化单位，包含您的软件应用程序需要运行的一切，包括相关代码、运行时、系统工具和系统库.<br>从称为<em>映像</em> 的只读模板中创建容器.</p><p>映像 : 映像通常由 Dockerfile 构建，后者是一个明文文件，指定了容器中包含的所有组件.<br>构建后，这些映像将存储在<em>注册表</em>在那里可以下载它们并在您的群集中运行.</p><img src="/2021/11/15/ecs-started/002.png" alt="ecs-002" style="zoom:50%;margin-left: 0;"><h4 id="3-任务定义"><a href="#3-任务定义" class="headerlink" title="3.任务定义"></a>3.任务定义</h4><p>为了准备要在上运行的应用程序Amazon ECS，您必须<u>创建<em>任务定义</em></u>.<br>任务定义是一个文本文件（JSON 格式），描述了构成应用程序的一个或多个容器（最多为 10 个）.<br>任务定义可以被视为**<u>应用程序的蓝图</u>**. 它为您的应用程序指定各种参数.<br>例如，这些参数可用于指示应使用哪些容器，应为应用程序打开哪些端口，应与任务中的容器一起使用哪些数据卷。可用于任务定义的特定参数取决于您的特定应用程序的需求.</p><p>以下是指定使用 Fargate 启动运行 NGINX Web 服务器的单个容器的任务定义的示例 (Fargate) : </p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;family&quot;</span>: <span class="hljs-string">&quot;webserver&quot;</span>,    <span class="hljs-attr">&quot;containerDefinitions&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;web&quot;</span>,            <span class="hljs-attr">&quot;image&quot;</span>: <span class="hljs-string">&quot;nginx&quot;</span>,            <span class="hljs-attr">&quot;memory&quot;</span>: <span class="hljs-string">&quot;100&quot;</span>,            <span class="hljs-attr">&quot;cpu&quot;</span>: <span class="hljs-string">&quot;99&quot;</span>        &#125;,    ],    <span class="hljs-attr">&quot;requiresCompatibilities&quot;</span>: [        <span class="hljs-string">&quot;FARGATE&quot;</span>    ],    <span class="hljs-attr">&quot;networkMode&quot;</span>: <span class="hljs-string">&quot;awsvpc&quot;</span>,    <span class="hljs-attr">&quot;memory&quot;</span>: <span class="hljs-string">&quot;512&quot;</span>,    <span class="hljs-attr">&quot;cpu&quot;</span>: <span class="hljs-string">&quot;256&quot;</span>,&#125;</code></pre><h4 id="4-任务和计划"><a href="#4-任务和计划" class="headerlink" title="4.任务和计划"></a>4.任务和计划</h4><p><em>任务</em> 是集群内的任务定义的实例化.<br>在为您的应用程序创建任务定义Amazon ECS，您可以指定要在您的群集上运行的任务数量.</p><p>Amazon ECS 任务计划程序负责将任务放置到您的集群中. 有多种不同的计划选项可供选择.</p><img src="/2021/11/15/ecs-started/003.png" alt="ecs-003" style="zoom:50%;margin-left: 0;"><h4 id="5-集群-Clusters"><a href="#5-集群-Clusters" class="headerlink" title="5.集群(Clusters)"></a>5.集群(Clusters)</h4><p>Amazon ECS <em>集群</em> 是任务或服务的逻辑分组.<br>您可以注册一个或多个Amazon EC2实例（也称为<em>容器实例</em>），以便在其上运行任务.或者，您可以使用Fargate提供运行任务.</p><p>当您第一次使用Amazon ECS，则会为您创建一个默认集群. 您可以在账户中创建其他集群以保持您的资源独立.</p><h4 id="6-容器代理"><a href="#6-容器代理" class="headerlink" title="6.容器代理"></a>6.容器代理</h4><p>这些区域有：<em>容器代理</em>在每个容器实例上运行Amazon ECS集群.<br>代理向发送有关资源的当前正在运行的任务和资源使用率的信息Amazon ECS. 它会启动和停止任务，只要它收到来自Amazon ECS.</p><img src="/2021/11/15/ecs-started/004.png" alt="ecs-004" style="zoom:50%;margin-left: 0;"><h4 id="7-相关服务"><a href="#7-相关服务" class="headerlink" title="7.相关服务"></a>7.相关服务</h4><ul><li>IAM(<strong>AWS Identity and Access Management</strong>) : 一项访问管理服务，可帮助您安全地控制对AWS资源的费用. 您可以使用 IAM 控制对哪个用户进行身份验证 (登录) 和授权 (具有权限) 以查看或执行对资源的特定操作.</li><li><strong>Amazon EC2 Auto Scaling</strong> : Auto Scaling是一项服务，可用于根据用户定义的策略、运行状况检查和时间表自动扩展或扩展任务.<br>您可以对服务内的 Fargate 任务使用 Auto Scaling，从而根据多个指标进行扩展，或对 EC2 任务使用来扩展集群中的容器实例.</li><li><strong>Elastic Load Balancing</strong> : Elastic Load Balancing服务在您的任务间自动分配应用程序的传入流量Amazon ECS服务.<br>它可以让您实现更高水平的应用程序<u>容错性能</u>，同时无缝提供分配应用程序流量所需的<u>负载均衡容量</u>。您可以使用 Elastic Load Balancing 创建一个使集群中的服务流量达到均衡的终端节点.</li><li><strong>Amazon Elastic Container Registry</strong> : Amazon ECR 是一项托管 AWS Docker 注册表服务，安全、可扩展且可靠.<br>通过使用 IAM，Amazon ECR 支持具有基于资源的权限的私有 Docker 存储库，以便特定用户或任务可以访问存储库和映像.</li><li><strong>AWS CloudFormation</strong> : AWS CloudFormation为开发人员和系统管理员提供了一种创建和管理相关AWS资源的费用.<br>更具体地说，它使资源的配置和更新更加有序和可预测. 您可以在 AWS CloudFormation 脚本中将集群、任务定义和服务定义为实体.</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>aws</tag>
      
      <tag>ecs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>.net-on-aws-started</title>
    <link href="/2021/11/08/net-on-aws-started/"/>
    <url>/2021/11/08/net-on-aws-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="net-on-aws-started"><a href="#net-on-aws-started" class="headerlink" title=".net-on-aws-started"></a>.net-on-aws-started</h3><p><a href="https://explore.skillbuilder.aws/learn/course/8913/play/29096/getting-started-with-net-on-aws-japanese">课程名称: Getting Started with .NET on AWS (Japanese)</a></p><h4 id="1-AWS服务"><a href="#1-AWS服务" class="headerlink" title="1.AWS服务"></a>1.AWS服务</h4><p>如果使用无服务器计算选项，则可集中在核心应用程序上的时间变长。没有必要担心基础设施的管理和运用.</p><img src="/2021/11/08/net-on-aws-started/001_1.png" alt="net-001_1" style="zoom:50%;margin-left: 0;"><p>使用AWS的话，可以使用对应.NET应用程序的所有需求，广泛用途专用的存储和数据库解决方案.<br>强烈推荐根据应用程序所需的数据类型、访问模型、可扩展性类型选择合适的数据库.</p><img src="/2021/11/08/net-on-aws-started/001_2.png" alt="net-001_2" style="zoom:50%;margin-left: 0;"><p>使用身份服务的话，对于AWS云环境内的.NET应用，可以在适当的时机安全地给予适当的用户适当的访问.<br>使用监控和审计服务，可以获取应用程序和基础设施状态的细节，并评估定义的商业指标的性能.</p><img src="/2021/11/08/net-on-aws-started/001_3.png" alt="net-001_3" style="zoom:50%;margin-left: 0;"><h4 id="2-工具"><a href="#2-工具" class="headerlink" title="2.工具"></a>2.工具</h4><p>AWS的口号之一是“大楼的场所”「ビルダーのための場所」.<br>用户最熟悉的.NET开发工具提供扩展和整合.<br>这些工具是免费的，会定期更新。如果您有与AWS账户相关的认证信息，您可以使用这些工具.</p><img src="/2021/11/08/net-on-aws-started/001.png" alt="net-001" style="zoom:50%;margin-left: 0;"><ul><li><p>AWS SDK for .NET : AWS服务的呼叫变得和调用对象的方法一样简单</p></li><li><p><strong><u>AWS Toolkit for Visual Studio</u></strong> : 提供若干AWS服务和一些易用向导的资源管理视图</p><p>​    AWS Toolkit for Visual Studio是微软Visual Studio的扩展功能。这样一来，就可以使用AWS开发.NET应用程序，方便调试、部署.</p></li><li><p>AWS CDK for .NET : 允许云基础设施定义为代码</p></li><li><p>AWS Tools for PowerShell : 从命令行控制AWS服务</p></li></ul><h4 id="3-实践"><a href="#3-实践" class="headerlink" title="3.实践"></a>3.实践</h4><p>使用AWS Toolkit for Visual Studio，将NET Web应用的样品抽取到AWS云端.</p><p>架构图</p><img src="/2021/11/08/net-on-aws-started/0002.png" alt="net-0002" style="zoom:50%;margin-left: 0;"><h5 id="1-设置AWS"><a href="#1-设置AWS" class="headerlink" title="1.设置AWS"></a>1.设置AWS</h5><p>​        a) AWS用户, 权限, 凭证</p><p>​        b)  制作Visual Studio配置文件的话，可以在Visual Studio上注册IAM用户，知道认证的方法</p><img src="/2021/11/08/net-on-aws-started/002.png" alt="net-002" style="zoom:50%;margin-left: 0;"><img src="/2021/11/08/net-on-aws-started/003.png" alt="net-003" style="zoom:50%;margin-left: 0;"><img src="/2021/11/08/net-on-aws-started/004.png" alt="net-004" style="zoom:50%;margin-left: 0;"><h5 id="2-设置微软VS的代码环境"><a href="#2-设置微软VS的代码环境" class="headerlink" title="2.设置微软VS的代码环境"></a>2.设置微软VS的代码环境</h5><p>​        我们提供了一种可以在这个活动中使用的名叫UrlRedirector的样品ASP.NET Core网络应用.<br>​        示例是ASP.NET Core应用程序，用于创建短URL，将用户重定向到原来的长URL.</p><p>​        下载样本UrlRedirector.NET应用程序解冻，并在Visual Studio中打开</p><p>​    2.创建Amazon RDS数据库实例</p><p>​    <img src="/2021/11/08/net-on-aws-started/005.png" alt="net-005" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/007.png" alt="net-006" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/008.png" alt="net-008" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/009.png" alt="net-009" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/010.png" alt="net-010" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/011.png" alt="net-011" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/012.png" alt="net-012" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/013.png" alt="net-013" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/014.png" alt="net-014" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/015.png" alt="net-015" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/016.png" alt="net-016" style="zoom:50%;">    </p><p>​    <img src="/2021/11/08/net-on-aws-started/017.png" alt="net-017" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/018.png" alt="net-018" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/019.png" alt="net-019" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/020.png" alt="net-020" style="zoom:50%;"></p><p>​    强烈推荐根据NET应用程序所需的数据类型、访问模型、可扩展性类型选择合适的数据库.<br>​    在AWS中，可以简单地更改数据库引擎。例如，可以使用以下代替活动中使用的微软SQL Server</p><pre><code class="hljs bash">Amazon AuroraAurora具有高端商务数据库的处理速度和可靠性，以及开放源数据库的简单性和成本效益.Amazon DynamoDBAmazon DynamoDB是非关系或NoSQL数据库选项，对于总是需要低延时数据访问的应用来说是理想的.在这个样本应用程序中，DynamoDB最适合保存URL重定向。您也可以使用全局辅助索引来保存关于每个URL重定向所有者的信息.</code></pre><h4 id="3-将NET应用程序部署到AWS"><a href="#3-将NET应用程序部署到AWS" class="headerlink" title="3.将NET应用程序部署到AWS"></a>3.将NET应用程序部署到AWS</h4><p>​    <img src="/2021/11/08/net-on-aws-started/021.png" alt="net-021" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/022.png" alt="net-022" style="zoom:50%"></p><p>​    <img src="/2021/11/08/net-on-aws-started/023.png" alt="net-023" style="zoom:50%"></p><p>​    <img src="/2021/11/08/net-on-aws-started/024.png" alt="net-024" style="zoom:50%"></p><p>​    <img src="/2021/11/08/net-on-aws-started/025.png" alt="net-025" style="zoom:50%">    </p><p>​    <img src="/2021/11/08/net-on-aws-started/026.png" alt="net-026" style="zoom:50%"></p><p>​    <img src="/2021/11/08/net-on-aws-started/027.png" alt="net-027" style="zoom:50%"></p><p>​    <img src="/2021/11/08/net-on-aws-started/028.png" alt="net-028" style="zoom:50%"></p><p>​    <img src="/2021/11/08/net-on-aws-started/029.png" alt="net-029" style="zoom:50%"></p><p>​    <img src="/2021/11/08/net-on-aws-started/030.png" alt="net-030" style="zoom:50%"></p><p>4.清理资源</p><p>​    清理和删除所有资源，以避免进一步产生成本.<br>​    删除Amazon RDS数据库实例.<br>​    在Visual Studio的AWS资源管理器中，打开Amazon RDS节点，访问该实例.<br>​    右键单击实例，选择“Delete Instance”（删除实例）。这样，Amazon RDS数据库实例将从AWS云中删除.</p><p>​    <img src="/2021/11/08/net-on-aws-started/031.png" alt="net-031" style="zoom:50%"></p><p>​    删除AWS Elastic Beanstalk应用程序.<br>​    在Visual Studio的AWS资源管理器中，打开AWS Elastic Beanstalk节点访问实例.<br>​    右键单击实例，选择[Delete]（删除）。因此，Elastic Beanstalk的环境及其相关的所有资源将从AWS云中删除.</p><p>​    <img src="/2021/11/08/net-on-aws-started/032.png" alt="net-032" style="zoom:50%">    </p>]]></content>
    
    
    
    <tags>
      
      <tag>net</tag>
      
      <tag>aws</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Aws中的Elastic-Beanstalk记录</title>
    <link href="/2021/11/07/aws-elastic-beanstalk/"/>
    <url>/2021/11/07/aws-elastic-beanstalk/</url>
    
    <content type="html"><![CDATA[<h3 id="Aws中的Elastic-Beanstalk记录"><a href="#Aws中的Elastic-Beanstalk记录" class="headerlink" title="Aws中的Elastic-Beanstalk记录"></a>Aws中的Elastic-Beanstalk记录</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>借助 Elastic Beanstalk，您可以在AWS云中快速部署和管理应用程序，而不必了解运行这些应用程序的基础设施.<br>Elastic Beanstalk 可降低管理的复杂性，但不会影响选择或控制。<br>您只需上传应用程序，Elastic Beanstalk 将自动处理有关容量预配置、负载均衡、扩展和应用程序运行状况监控的部署细节.</p><p>Elastic Beanstalk 支持在 Go、Java、.NET、Node.js、PHP、Python 和 Ruby 中开发的应用程序.<br>在部署应用程序时，Elastic Beanstalk 会构建选定的受支持的平台版本，并预配置一个或多个AWS资源（如 Amazon EC2 实例）来运行应用程序.</p><p>工具 : </p><ul><li>Elastic Beanstalk 控制台</li><li>AWS Command Line Interface (AWS CLI) </li><li><strong>eb</strong>（专为 Elastic Beanstalk 设计的高级 CLI）</li></ul><p>工作流程 : </p><img src="/2021/11/07/aws-elastic-beanstalk/001.png" alt="eb-001" style="zoom:50%;margin-left: 0;"><h4 id="2-开始使用-Elastic-Beanstalk"><a href="#2-开始使用-Elastic-Beanstalk" class="headerlink" title="2.开始使用 Elastic Beanstalk"></a>2.开始使用 Elastic Beanstalk</h4><p>创建示例程序时，Elastic Beanstalk 创建以下AWS资源 : </p><ul><li><p><strong>EC2 实例</strong> - 配置来在您选择的平台上运行 Web 应用程序的 Amazon EC2 虚拟机。</p><p>各平台运行一组不同的软件、配置文件和脚本以支持特定的语言版本、框架、Web 容器或其组合。大多数平台使用 Apache 或 nginx 作为在 Web 应用程序前处理 Web 流量的反向代理，向其转发请求、提供静态资产以及生成访问和错误日志。</p></li><li><p><strong>实例安全组</strong> - 配置为<u>允许端口 80 上的传入流量的 Amazon EC2 安全组</u>。<br>通过此资源，HTTP 流量可以从负载均衡器到达运行您的 Web 应用程序的 EC2 实例。<br><u>默认情况下，其他端口不允许流量进入。</u></p></li><li><p><strong>Amazon S3 存储桶</strong> - 使用 Elastic Beanstalk 时创建的源代码、日志和其他构件的存储位置。</p></li><li><p><strong>Amazon CloudWatch 警报</strong> - 用于监控环境中的实例负载的两个 CloudWatch 警报，它们将在负载过高或过低时触发。警报触发后，您的 Auto Scaling 组会扩展或收缩以进行响应。</p></li><li><p><strong>AWS CloudFormation 堆栈</strong> – Elastic Beanstalk 使用 AWS CloudFormation 启动您环境中的资源并传播配置更改。这些资源在您可通过 <a href="https://console.aws.amazon.com/cloudformation">AWS CloudFormation 控制台</a>查看的模板中定义。</p></li><li><p><strong>域名</strong> - 一个域名，它以下面的形式路由到您的 Web 应用程序：*<code>subdomain</code>.<code>region</code>.elasticbeanstalk.com*。</p></li></ul><img src="/2021/11/07/aws-elastic-beanstalk/002.png" alt="eb-002" style="zoom:50%;"><p>环境概述窗格显示有关您的环境的顶级信息.<br>这包括其名称、URL、当前运行状况、当前部署的应用程序版本的名称以及运行应用程序的平台版本.<br>在概述窗格的下方，您会看到最新的五个环境事件.</p><ul><li><strong>Configuration (配置)</strong> - 显示为此环境预配置的资源，如托管应用程序的 Amazon Elastic Compute Cloud (Amazon EC2) 实例。您可以在此页面上配置某些已预配置的资源。</li><li><strong>Health (运行状况)</strong> - 显示有关运行应用程序的 Amazon EC2 实例的状态和详细运行状况信息。</li><li><strong>Monitoring (监控)</strong> - 显示环境的统计数据（如平均延迟和 CPU 使用率）。可以使用此页面为所监控的指标创建警报。</li><li><strong>Events (事件)</strong> - 显示来自 Elastic Beanstalk 服务以及此环境使用其资源的其他服务的信息或错误消息。</li><li><strong>Tags (标签)</strong> - 显示环境标签，并允许您对其进行管理。标签是应用于您的环境的密钥值对。</li></ul><h4 id="3-上传新版本"><a href="#3-上传新版本" class="headerlink" title="3.上传新版本"></a>3.上传新版本</h4><ol><li>打开 <a href="https://console.aws.amazon.com/elasticbeanstalk">Elastic Beanstalk 控制台</a>，然后在 **Regions (区域)**列表中选择您的AWS区域。</li><li>在导航窗格中，选择 **Environments (环境)**，然后从列表中选择环境的名称。</li><li>在环境概述页面上，选择 **Upload and deploy (上传和部署)**。</li></ol><img src="/2021/11/07/aws-elastic-beanstalk/003.png" alt="eb-003" style="zoom:50%; margin-left: 0;"><p>当 Elastic Beanstalk 将文件部署到 Amazon EC2 实例时，您可以在环境概述中查看部署状态.<br>应用程序版本更新时，<strong>Environment Health (环境运行状况)</strong> 状态为灰色.<br>部署完成时，Elastic Beanstalk 会执行应用程序运行状况检查.<br>当应用程序对运行状况检查进行响应时，它被视为运行状况良好，状态会变回<u><strong>绿色</strong></u>.<br>环境概述显示新的 <strong>Running Version (运行版本)</strong> - 您作为 <strong>Version label (版本标签)</strong> 提供的名称.</p><p>Elastic Beanstalk 也会上传您的新应用程序版本并将其添加到应用程序版本表.<br>要查看此表，请选择导航窗格上的 <strong>getting-started-app</strong> 下的 **Application versions (应用程序版本)**。</p><h4 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4.修改配置"></a>4.修改配置</h4><ol><li><p>在导航窗格中，选择 **Configuration (配置)**。</p></li><li><p>在 <strong>Capacity (容量)</strong> 配置类别中，选择 **Edit (编辑)**。</p></li><li><p>在 <strong>Auto Scaling group (Auto Scaling 组)</strong> 部分中，将 <strong>Environment type (环境类型)</strong> 更改为 **Load balanced (负载均衡)**。</p></li><li><p>在<strong>实例</strong>行上，将<strong>最大</strong>更改为 <code>4</code>，然后将<strong>最小</strong>更改为 **<u><code>2</code></u>**。</p></li><li><p>选择 <strong>Apply</strong>。</p></li><li><p>将显示警告信息，告诉您此更新将替换您当前的所有实例。选择 <strong>Confirm</strong>。</p></li><li><p>在导航窗格中，选择 <strong>Events</strong>。</p><p>环境更新可能需要几分钟的时间。要确定它已完成，请在事件列表中查找事件 **Successfully deployed new configuration to environment (已成功将新配置部署到环境)**。这确认了 Auto Scaling 实例的最少数目已经设置为 2。Elastic Beanstalk 将自动启动第二个实例</p></li></ol><p><img src="/2021/11/07/aws-elastic-beanstalk/004.png" alt="eb-004"></p><h4 id="5-验证配置更改"><a href="#5-验证配置更改" class="headerlink" title="5.验证配置更改"></a>5.验证配置更改</h4><p>启用增强型运行状况报告 : </p><ol><li>在导航窗格中，选择 <strong>Configuration (配置)</strong>.</li><li>在 <strong>Monitoring (监控)</strong> 配置类别中，选择 <strong>Edit (编辑)</strong>.</li><li>在<strong>运行状况报告</strong>下，为<strong>系统</strong>选择<strong>增强型</strong>.</li></ol><img src="/2021/11/07/aws-elastic-beanstalk/005.png" alt="eb-004" style="zoom:50%;margin-left: 0;"><img src="/2021/11/07/aws-elastic-beanstalk/006.png" alt="eb-006" style="zoom:50%;"><p>查看结果 : </p><img src="/2021/11/07/aws-elastic-beanstalk/007.png" alt="eb-007" style="zoom:50%;"><h4 id="6-清除资源"><a href="#6-清除资源" class="headerlink" title="6.清除资源"></a>6.清除资源</h4><p>已成功地将示例应用程序部署到AWS云、上传了新版本并修改了配置以添加第二个 Auto Scaling 实例.<br>为确保您不用为未使用的任何服务付费，请删除所有应用程序版本并终止环境.<br>这也会删除环境为您创建的AWS资源.</p><img src="/2021/11/07/aws-elastic-beanstalk/008.png" alt="eb-008" style="zoom:50%;"><img src="/2021/11/07/aws-elastic-beanstalk/009.png" alt="eb-009" style="zoom:50%; margin-left: 0;"><h4 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h4><ul><li><a href="https://docs.aws.amazon.com/zh_cn/elasticbeanstalk/latest/dg/eb-cli3-install.html">EB CLI</a></li><li><a href="https://docs.aws.amazon.com/zh_cn/elasticbeanstalk/latest/dg/GettingStarted.Next.html"><strong>WS Toolkit for Visual Studio</strong></a></li><li><a href="https://docs.aws.amazon.com/zh_cn/elasticbeanstalk/latest/dg/create_deploy_NET.html"><strong>AWS Toolkit for Visual Studio</strong></a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>aws</tag>
      
      <tag>eb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Final-cut-x-noting学习记录一</title>
    <link href="/2021/06/13/final-cut-x-noting/"/>
    <url>/2021/06/13/final-cut-x-noting/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h3 id="Final-cut-x-noting学习记录一"><a href="#Final-cut-x-noting学习记录一" class="headerlink" title="Final-cut-x-noting学习记录一"></a>Final-cut-x-noting学习记录一</h3><h4 id="1-拍摄的角度"><a href="#1-拍摄的角度" class="headerlink" title="1.拍摄的角度"></a>1.拍摄的角度</h4><p>从拍摄者的角度来看:</p><ul><li><p>平拍: 眼睛的正常视角</p><p>客观,真实,有秩序感,但也显得呆板,乏味,无趣</p></li><li><p>抑拍: 呈现出比较宏大遥远的视角</p><p>将事物的大小,形状,位置打乱,从而延长或放大某些元素的视觉效果</p></li><li><p>俯拍: 对微观进行拍摄的视角</p><p>可以拍摄出居高临下或开启微观世界的效果,从而传递某些特殊的情绪</p></li></ul><h4 id="2-特写"><a href="#2-特写" class="headerlink" title="2.特写"></a>2.特写</h4><p>主要目的为了增强画面丰富性,展现层第关系,改变单一的镜头效果</p><p>画面元素的远近关系</p><ul><li><p>不能单纯拍摄主体目标</p><p>而是要展现多维度的视角,使环境和主体人物的互动关系更为明朗<br>在画面中借助多种元素,突出远近关系,可以增强透视效果,极大地提升画面的丰富性</p></li></ul><h4 id="3-跟随和牵引拍摄"><a href="#3-跟随和牵引拍摄" class="headerlink" title="3.跟随和牵引拍摄"></a>3.跟随和牵引拍摄</h4><p>配合良好的构图元素,可以将主体和环境更好地融合在一起<br>呈现出具有律动性的画面,建立情绪或情感上的连接关系</p><h4 id="4-旋转拍摄"><a href="#4-旋转拍摄" class="headerlink" title="4.旋转拍摄"></a>4.旋转拍摄</h4><p>通过快速的旋转</p><p>来调动环境中的所有元素,全方位地展现主体人物当前的处境或感情<br>是一种主动和主体人物进行沟通的拍摄方式,可以表达悠远,深邃,离别,沉默等复杂情绪</p><h4 id="5-空镜头和固定镜头"><a href="#5-空镜头和固定镜头" class="headerlink" title="5.空镜头和固定镜头"></a>5.空镜头和固定镜头</h4><p>采用静止或悬停的方式</p><p>拍摄没有实际意义,或者没有运动或运动迹象的镜头<br>在特殊的场景中可以制造出寂静,轻悠,停滞,顿悟等特殊的效果</p><h4 id="6-留白的艺术"><a href="#6-留白的艺术" class="headerlink" title="6.留白的艺术"></a>6.留白的艺术</h4><p>采用大量留白的方式</p><p>弱化主体在画面中的地位,只给主体留下很少的生存空间<br>制造出一种空灵,悠扬,宁静的环境感受</p><p>留白考验着一个人的创作能力<br>需要去想像,体会,感受画面和要表达的情绪情感之间微妙的关联</p><h4 id="7-构图技巧-黄金分割比例"><a href="#7-构图技巧-黄金分割比例" class="headerlink" title="7.构图技巧-黄金分割比例"></a>7.构图技巧-黄金分割比例</h4><p>黄金分割比例-0.618</p><p>每个画面的左右上下,其附近都有黄金分割线<br>为了便于拍摄,可以粗略地理解为黄金分割线位于画面五分之三的位置</p><h4 id="8-构图技巧"><a href="#8-构图技巧" class="headerlink" title="8.构图技巧"></a>8.构图技巧</h4><ul><li>线条关系</li></ul><p>所谓线条,是指在画面中那些具有延长性质的元素<br>如弯曲的山路,凹凸的海湾,笔直的桥梁,横切的山脉等</p><p>线条包含曲线和直线</p><p>除了明显的线条元素之外,还有隐藏的线条元素<br>如栅栏,桅杆,墙檐,墙体等</p><p>运用线条元素,可以使画面变得丰富,趣味,多变</p><ul><li>边框,层级和遮挡</li></ul><p>使主体目标处于一个”画中画”的场景<br>使人物处于半忽略的状态,约束观看者的目光视线,从而进一步强化人物的情绪和状态<br>一般都会采用诸如窗户,孔洞,树丛,枝叶,栏杆等具有空间形状的元素</p><p>P15</p>]]></content>
    
    
    
    <tags>
      
      <tag>fcxp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Final-cut-pro-x-学习记录_01</title>
    <link href="/2021/06/11/final-cut-pro-x-started/"/>
    <url>/2021/06/11/final-cut-pro-x-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Final-cut-pro-x-学习记录-01"><a href="#Final-cut-pro-x-学习记录-01" class="headerlink" title="Final-cut-pro-x-学习记录_01"></a>Final-cut-pro-x-学习记录_01</h3><h4 id="1-导入素材"><a href="#1-导入素材" class="headerlink" title="1.导入素材"></a>1.导入素材</h4><p>导入素材时,要将素材拷贝到资源库里,防止素材被删除后,资源库不能使用.</p><pre><code class="hljs bash">l: 播放素材k: 暂停j: 往后播放空格: 播放/暂停左/右键: 选中不同的素材(黄色边框线)</code></pre><h4 id="2-粗剪素材"><a href="#2-粗剪素材" class="headerlink" title="2.粗剪素材"></a>2.粗剪素材</h4><pre><code class="hljs bash">l: 播放i: 视频入点k: 暂停o: 视频出点f: 加入收藏(视频上方出现绿色横条)u: 撤销收藏backspace: 删除素材(素材上出现黄线横线)u: 撤销删除素材(黄线消失)q: 连接 -&gt; 将所选素材片段放置到当前时间轴所处的位置,不抢占任何片段的位置w: 插入 -&gt; 将所选素材片段插入到当前时间轴所处的位置,原有的片段会被自动切割开来e: 附加 -&gt; 将所选素材片段附加到当前时间轴最末尾的位置,不抢占任何片段的位置d: 覆盖 -&gt; 将所选素材片段覆盖到当前时间轴所处的位置,原有片段的位置不变,但内容会被裁切并覆盖^ + f/ctrl + f: 素材只显示收藏过的素材片段^ + c/ctrl + c: 素材显示所有的素材片段</code></pre><h4 id="3-精剪和磁性时间线"><a href="#3-精剪和磁性时间线" class="headerlink" title="3.精剪和磁性时间线"></a>3.精剪和磁性时间线</h4><pre><code class="hljs bash">b: 切割 -&gt; 对任何素材片段进行切割,方便对片段进行分割调整a: 选择 -&gt; 分割完成后,按a键回到正常的<span class="hljs-string">&quot;选择工具&quot;</span>模式Option/Alt + g: 将几个片段同时选定,然后右键<span class="hljs-string">&quot;新建复合片段&quot;</span>,可以几段片段变成一个普通片段Command(cmd) + Option(Alt): 按住键,并拖动音频可以改变音频与视频的连接点p + Option(Alt) + w: 按p键切换到[位置]选择时,按Option(Alt) + w, 就会在所选位置上插入一个占位的空白的素材,方便以后在此插入新的视频素材</code></pre><h4 id="4-多轨道剪辑"><a href="#4-多轨道剪辑" class="headerlink" title="4.多轨道剪辑"></a>4.多轨道剪辑</h4><p>将多个片段重叠在一起进行剪辑</p><p>主序列上的片段是所有片段的核心<br>其它轨道上的片段都依靠着主序列片段<br>每一条片段都和主序列片段之间都有一条连接线,表示存在着连接与对应关系<br>在移动和删除主序列时片段时,要注意其它片段可能出现的移动和删除情况</p><pre><code class="hljs bash">Command(cmd) + Option(Alt) + 上: 将所选素材片段移动上主故事线上方Command(cmd) + g: 将主故事线上方的素材转换成次故事线Command(cmd) + Option(Alt) + 下: 将次故事线上的素材移到到主故事线上方转场: 将主故事线上方的两个素材中间添加一个转场效果后,会将这两个素材转换成一个次故事线</code></pre><h4 id="5-关键帧和渐进运动"><a href="#5-关键帧和渐进运动" class="headerlink" title="5.关键帧和渐进运动"></a>5.关键帧和渐进运动</h4><p>关键帧, 可以理解为片段中”做下标记”的那一帧<br>两个以上的关键帧才能互相配合使用,实现某种运动或变化<br>关键帧的作用就是记录片段属性,每个关键帧都记录一种属性</p><h4 id="6-卡点视频"><a href="#6-卡点视频" class="headerlink" title="6.卡点视频"></a>6.卡点视频</h4><p>将音乐收藏素材插入时间线</p><pre><code class="hljs bash"><span class="hljs-built_in">shift</span> + z: 扩展片段至合适的时间线m: 音乐打点(双击可以删除mark点)t: 可以在时间片段中左右拖动视频慢速: 可以调节视频片段的播放速度防抖动: 全选视频片段,可以去除视频的抖动</code></pre><p>音频</p><pre><code class="hljs bash">Option(Alt): 在音频片段时,按Option(Alt),点击两个间隔的点,再将音频向下拉,可以做一个音频逐渐降低的效果.</code></pre><h4 id="7-调色"><a href="#7-调色" class="headerlink" title="7.调色"></a>7.调色</h4><p>颜色版</p><ul><li>颜色</li><li>饱和度</li><li>曝光</li></ul><p>可以拖动圆点,可以修改视频片段的显示效果</p><h4 id="8-聚焦-抠像-遮罩"><a href="#8-聚焦-抠像-遮罩" class="headerlink" title="8.聚焦/抠像/遮罩"></a>8.聚焦/抠像/遮罩</h4><pre><code class="hljs bash">聚焦: 可以制造出一个整体模糊而局部清晰的效果     从而实现某种程度的伪<span class="hljs-string">&quot;景深&quot;</span>效果,弥补在画面拍摄中留下的遗憾与不足     聚焦效果本身可以极大地提升画面的通透感,凸显画面主体,营造艺术性氛围抠像: 一种抠像器,一种是高度抠像器     抠像的本质是从画面中抠选出一部分,而将其它部分从画面中抹去遮罩: 将一段视频遮罩一部分,凸显在下部的视频当中</code></pre><h4 id="8-转场-特效-文件输出"><a href="#8-转场-特效-文件输出" class="headerlink" title="8.转场/特效/文件输出"></a>8.转场/特效/文件输出</h4><p>转场:<br>两段没有编辑过的视频素材中间添加[转场]时,会出现[片段边缘之外没有足够的额外媒体可用来创建转场]的弹框.<br>添加转场后,整个视频的时长会改变.<br>这是因为转场要替换掉一定的左右边素材的时长.编辑过的素材中间添加转场后,则不会出现些弹框.</p><p>双击转场效果中间的按钮: 可以查看精确度编辑器,可以方便的查看转场所占用的左右素材时长</p><pre><code class="hljs bash">光流: 视频效果 -&gt; 光流(慢速视频可以设置)分离音频: 选中视频片段 -&gt; 分离音频(可以删除视频中声音,拍摄时可以有噪音)转场: 可以在视频的开始与结尾添加合适的转场,可以让片段平滑地过渡,减少观看者的视觉不适感添加字幕: 可以视频开始时添加合适的字幕(可以在字幕中添加转场)输出: 可以输出为Apple设备720p或者Apple设备1080p(设备标签页中:H.264编码)</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>hotkey</tag>
      
      <tag>fcpx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql_Binlog命令记录</title>
    <link href="/2021/05/15/mysql-binlog-started/"/>
    <url>/2021/05/15/mysql-binlog-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>Mysql_Binlog命令记录</p><h3 id="1-Binlog的相关变量"><a href="#1-Binlog的相关变量" class="headerlink" title="1.Binlog的相关变量"></a>1.Binlog的相关变量</h3><p><code>log_bin</code> -&gt; Binlog开关.<br><code>binlog-format</code> -&gt; Binlog日志的格式.</p><pre><code class="hljs mysql">mysql&gt; show variables like &#39;log_bin&#39;;+---------------+-------+| Variable_name | Value |+---------------+-------+| log_bin       | ON    |+---------------+-------+1 row in set (0.04 sec)mysql&gt; show variables like &#39;binlog-format&#39;;Empty set (0.01 sec)</code></pre><h3 id="2-管理Binlog相关的SQL语句"><a href="#2-管理Binlog相关的SQL语句" class="headerlink" title="2.管理Binlog相关的SQL语句"></a>2.管理Binlog相关的SQL语句</h3><p><code>show master logs</code>  :  查看所有Binlog的日志列表.<br><code>show master status</code>  :  查看最后一个Binlog日志的编号名称,及最后一个事件结束的位置(pos).<br><strong><code>flush logs</code></strong>  :  刷新Binlog,此刻开始产生一个新编号的Binlog日志文件. -&gt; 慎用<br>**<code>reset master</code>**  :  清空所有的Binlog日志. -&gt; 慎用.</p><pre><code class="hljs mysql">mysql&gt; show master logs;+---------------+-----------+| Log_name      | File_size |+---------------+-----------+| binlog.000036 |       155 || binlog.000037 |       155 || binlog.000038 |       155 || binlog.000039 |       155 || binlog.000040 |      6231 || binlog.000041 |       155 || binlog.000042 |       155 |+---------------+-----------+7 rows in set (0.00 sec)mysql&gt; show master status;+---------------+----------+--------------+------------------+-------------------+| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+---------------+----------+--------------+------------------+-------------------+| binlog.000042 |      155 |              |                  |                   |+---------------+----------+--------------+------------------+-------------------+1 row in set (0.00 sec)</code></pre><p><code>show binlog events</code>  :  查看第一个Binlog日志.<br><code>show binlog events in &#39;binlog.000036&#39;</code>  :  查看指定的Binlog日志.</p><img src="/2021/05/15/mysql-binlog-started/001.png" alt="binlog_events" style="zoom:50%;"><pre><code class="hljs mysql">mysql&gt; show binlog events;+---------------+-----+----------------+-----------+-------------+-----------------------------------+| Log_name      | Pos | Event_type     | Server_id | End_log_pos | Info                              |+---------------+-----+----------------+-----------+-------------+-----------------------------------+| binlog.000036 |   4 | Format_desc    |         1 |         124 | Server ver: 8.0.13, Binlog ver: 4 || binlog.000036 | 124 | Previous_gtids |         1 |         155 |                                   |+---------------+-----+----------------+-----------+-------------+-----------------------------------+2 rows in set (0.00 sec)mysql&gt; show binlog events in &#39;binlog.000036&#39;;+---------------+-----+----------------+-----------+-------------+-----------------------------------+| Log_name      | Pos | Event_type     | Server_id | End_log_pos | Info                              |+---------------+-----+----------------+-----------+-------------+-----------------------------------+| binlog.000036 |   4 | Format_desc    |         1 |         124 | Server ver: 8.0.13, Binlog ver: 4 || binlog.000036 | 124 | Previous_gtids |         1 |         155 |                                   |+---------------+-----+----------------+-----------+-------------+-----------------------------------+2 rows in set (0.00 sec)</code></pre><p><strong>Binlog中的Event_type:</strong></p><img src="/2021/05/15/mysql-binlog-started/002.png" alt="event_type" style="zoom:50%;"><h3 id="3-Binlog监听"><a href="#3-Binlog监听" class="headerlink" title="3.Binlog监听"></a>3.Binlog监听</h3><p>pom.xml</p><pre><code class="hljs xml">   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mysqlbinlog.version</span>&gt;</span>0.13.0<span class="hljs-tag">&lt;/<span class="hljs-name">mysqlbinlog.version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><span class="hljs-comment">&lt;!-- binlog 监听与解析: https://github.com/shyiko/mysql-binlog-connector-java. --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.shyiko<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-binlog-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mysqlbinlog.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>java测试类.</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.ad.service;<span class="hljs-keyword">import</span> com.github.shyiko.mysql.binlog.BinaryLogClient;<span class="hljs-keyword">import</span> com.github.shyiko.mysql.binlog.event.DeleteRowsEventData;<span class="hljs-keyword">import</span> com.github.shyiko.mysql.binlog.event.EventData;<span class="hljs-keyword">import</span> com.github.shyiko.mysql.binlog.event.UpdateRowsEventData;<span class="hljs-keyword">import</span> com.github.shyiko.mysql.binlog.event.WriteRowsEventData;<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * BinLog使用的测试类.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/5/15</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Slf4j</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinlogServiceTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// BinLog客户端创建.</span>        BinaryLogClient client = <span class="hljs-keyword">new</span> BinaryLogClient(                <span class="hljs-string">&quot;127.0.0.1&quot;</span>,                <span class="hljs-number">3306</span>,                <span class="hljs-string">&quot;root&quot;</span>,                <span class="hljs-string">&quot;xxxxxxx&quot;</span>        );        <span class="hljs-comment">// 设置binlog文件.</span>        <span class="hljs-comment">// client.setBinlogFilename(&quot;&quot;);</span>        <span class="hljs-comment">// 设置binlog位置.</span>        <span class="hljs-comment">// client.setBinlogPosition();</span>        client.registerEventListener(event -&gt; &#123;            EventData data = event.getData();            <span class="hljs-comment">// 更新,添加,删除Event.</span>            <span class="hljs-keyword">if</span> (data <span class="hljs-keyword">instanceof</span> UpdateRowsEventData) &#123;                log.info(<span class="hljs-string">&quot;Update---------------------&quot;</span>);                log.info(data.toString());            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data <span class="hljs-keyword">instanceof</span> WriteRowsEventData) &#123;                log.info(<span class="hljs-string">&quot;Add---------------------&quot;</span>);                log.info(data.toString());            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data <span class="hljs-keyword">instanceof</span> DeleteRowsEventData) &#123;                log.info(<span class="hljs-string">&quot;Delete---------------------&quot;</span>);                log.info(data.toString());            &#125;        &#125;);        <span class="hljs-comment">// 创建连接.</span>        client.connect();    &#125;&#125;</code></pre><p>启动监听:</p><pre><code class="hljs bash">五月 15, 2021 11:42:17 上午 com.github.shyiko.mysql.binlog.BinaryLogClient connect</code></pre><p>在mysql命令窗口执行数据的增,删,改,查操作.</p><pre><code class="hljs mysql">mysql&gt; desc ad_unit_keyword;+---------+-------------+------+-----+---------+----------------+| Field   | Type        | Null | Key | Default | Extra          |+---------+-------------+------+-----+---------+----------------+| id      | int(11)     | NO   | PRI | NULL    | auto_increment || unit_id | int(11)     | NO   |     | NULL    |                || keyword | varchar(30) | NO   |     | NULL    |                |+---------+-------------+------+-----+---------+----------------+3 rows in set (0.00 sec)mysql&gt; select * from ad_unit_keyword;Empty set (0.01 sec)mysql&gt; insert into &#96;ad_unit_keyword&#96; (&#96;unit_id&#96;, &#96;keyword&#96;) values (10, &#39;奥迪&#39;);Query OK, 1 row affected (0.08 sec)mysql&gt; select * from ad_unit_keyword;+----+---------+---------+| id | unit_id | keyword |+----+---------+---------+| 10 |      10 | 奥迪    |+----+---------+---------+1 row in set (0.00 sec)mysql&gt; update &#96;ad_unit_keyword&#96; set &#96;keyword&#96; &#x3D; &#39;奔驰&#39; where &#96;keyword&#96; &#x3D; &#39;奥迪&#39;;Query OK, 1 row affected (0.03 sec)Rows matched: 1  Changed: 1  Warnings: 0mysql&gt; delete from &#96;ad_unit_keyword&#96; where &#96;keyword&#96; &#x3D; &#39;奔驰&#39;;Query OK, 1 row affected (0.03 sec)</code></pre><p>控制台查看日志:</p><pre><code class="hljs bash">信息: Connected to 127.0.0.1:3306 at binlog.000042/155 (sid:65535, cid:11)11:44:25.216 [main] INFO com.iplume.ad.service.BinlogServiceTest - Add---------------------11:44:25.221 [main] INFO com.iplume.ad.service.BinlogServiceTest - WriteRowsEventData&#123;tableId=72, includedColumns=&#123;0, 1, 2&#125;, rows=[    [10, 10, 奥迪]]&#125;11:46:20.808 [main] INFO com.iplume.ad.service.BinlogServiceTest - Update---------------------11:46:20.809 [main] INFO com.iplume.ad.service.BinlogServiceTest - UpdateRowsEventData&#123;tableId=72, includedColumnsBeforeUpdate=&#123;0, 1, 2&#125;, includedColumns=&#123;0, 1, 2&#125;, rows=[    &#123;before=[10, 10, 奥迪], after=[10, 10, 奔驰]&#125;]&#125;11:48:26.920 [main] INFO com.iplume.ad.service.BinlogServiceTest - Delete---------------------11:48:26.920 [main] INFO com.iplume.ad.service.BinlogServiceTest - DeleteRowsEventData&#123;tableId=72, includedColumns=&#123;0, 1, 2&#125;, rows=[    [10, 10, 奔驰]]&#125;</code></pre><p>此时查看Binlog的Event的信息.</p><pre><code class="hljs mysql">mysql&gt; show binlog events in &#39;binlog.000042&#39;;+---------------+------+----------------+-----------+-------------+------------------------------------------+| Log_name      | Pos  | Event_type     | Server_id | End_log_pos | Info                                     |+---------------+------+----------------+-----------+-------------+------------------------------------------+| binlog.000042 |    4 | Format_desc    |         1 |         124 | Server ver: 8.0.13, Binlog ver: 4        || binlog.000042 |  124 | Previous_gtids |         1 |         155 |                                          || binlog.000042 |  155 | Anonymous_Gtid |         1 |         230 | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;     || binlog.000042 |  230 | Query          |         1 |         312 | BEGIN                                    || binlog.000042 |  312 | Table_map      |         1 |         385 | table_id: 72 (iplume_ad.ad_unit_keyword) || binlog.000042 |  385 | Write_rows     |         1 |         436 | table_id: 72 flags: STMT_END_F           || binlog.000042 |  436 | Xid            |         1 |         467 | COMMIT &#x2F;* xid&#x3D;35 *&#x2F;                      || binlog.000042 |  467 | Anonymous_Gtid |         1 |         542 | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;     || binlog.000042 |  542 | Query          |         1 |         633 | BEGIN                                    || binlog.000042 |  633 | Table_map      |         1 |         706 | table_id: 72 (iplume_ad.ad_unit_keyword) || binlog.000042 |  706 | Update_rows    |         1 |         774 | table_id: 72 flags: STMT_END_F           || binlog.000042 |  774 | Xid            |         1 |         805 | COMMIT &#x2F;* xid&#x3D;37 *&#x2F;                      || binlog.000042 |  805 | Anonymous_Gtid |         1 |         880 | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;     || binlog.000042 |  880 | Query          |         1 |         962 | BEGIN                                    || binlog.000042 |  962 | Table_map      |         1 |        1035 | table_id: 72 (iplume_ad.ad_unit_keyword) || binlog.000042 | 1035 | Delete_rows    |         1 |        1086 | table_id: 72 flags: STMT_END_F           || binlog.000042 | 1086 | Xid            |         1 |        1117 | COMMIT &#x2F;* xid&#x3D;40 *&#x2F;                      |+---------------+------+----------------+-----------+-------------+------------------------------------------+17 rows in set (0.00 sec)</code></pre><h3 id="4-表字段索引与字段位置映射"><a href="#4-表字段索引与字段位置映射" class="headerlink" title="4.表字段索引与字段位置映射"></a>4.表字段索引与字段位置映射</h3><pre><code class="hljs mysql">mysql&gt; select table_schema, table_name, column_name, ordinal_position from information_schema.columns where table_schema &#x3D; &#39;iplume_ad&#39; and table_name &#x3D; &#39;ad_unit_keyword&#39;;+--------------+-----------------+-------------+------------------+| TABLE_SCHEMA | TABLE_NAME      | COLUMN_NAME | ORDINAL_POSITION |+--------------+-----------------+-------------+------------------+| iplume_ad    | ad_unit_keyword | id          |                1 || iplume_ad    | ad_unit_keyword | keyword     |                3 || iplume_ad    | ad_unit_keyword | unit_id     |                2 |+--------------+-----------------+-------------+------------------+3 rows in set (0.00 sec)</code></pre><p><strong><u>PS: 本文仅为学习记录,仅供参考与学习.</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>springcloud</tag>
      
      <tag>binlog</tag>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>photoshop学习快捷键记录</title>
    <link href="/2021/03/29/photoshop-started/"/>
    <url>/2021/03/29/photoshop-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="photoshop学习快捷键记录"><a href="#photoshop学习快捷键记录" class="headerlink" title="photoshop学习快捷键记录"></a>photoshop学习快捷键记录</h3><h4 id="1-图层"><a href="#1-图层" class="headerlink" title="1.图层"></a>1.图层</h4><p>a) 文件 -&gt; 打开 -&gt; 背景图片<br>b) 文件 -&gt; 置入嵌入对象 -&gt; 对勾 -&gt; 设置图层的混合模式</p><pre><code class="hljs bash"><span class="hljs-comment"># 设置图层的混合模式</span>Shift + +/-</code></pre><p><img src="/2021/03/29/photoshop-started/001.jpg" alt="图层的混合模式"></p><h4 id="2-笔刷"><a href="#2-笔刷" class="headerlink" title="2.笔刷"></a>2.笔刷</h4><p>a) 文件 -&gt; 打开 -&gt; 背景图片<br>b) 文件 -&gt; 置入嵌入对象 -&gt; 对勾<br>c) 图层 -&gt; 栅格化 -&gt; 图层<br>d) 图层 -&gt; 蒙板 -&gt; 笔刷 -&gt; 黑色(hidden)/白色(visible)</p><pre><code class="hljs bash"><span class="hljs-comment"># 设置笔刷大小</span>Shift + &#125;/&#123;</code></pre><p><img src="/2021/03/29/photoshop-started/002.jpg" alt="layer-mask"></p>]]></content>
    
    
    
    <tags>
      
      <tag>hotkey</tag>
      
      <tag>photoshop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Emmet快捷记录</title>
    <link href="/2021/03/12/emmet-html-css-started/"/>
    <url>/2021/03/12/emmet-html-css-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Emmet快捷记录"><a href="#Emmet快捷记录" class="headerlink" title="Emmet快捷记录"></a>Emmet快捷记录</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>Emmet (前身为 Zen Coding) 是一个能大幅度提高前端开发效率的工具，能够实现 HTML、CSS 的快速编写.<br>通常大多数的文本编辑器都会允许我们存储和重用一些代码块，我们称之为“片段”.虽然片段能很好地推动我们的生产力，但大多数的实现都有这样一个缺点：我们必须先定义代码片段，并且不能再运行时进行拓展.<br>而 <strong>Emmet</strong> 把片段这个概念提高到了一个新的层次：我们可以设置 <strong>CSS</strong> 形式的能够动态被解析的表达式，然后根据输入的缩写来得到相应的内容。<br><strong>Emmet</strong> 很成熟的并且非常适用于编写 <strong>HTML</strong>/<strong>XML</strong> 和 <strong>CSS</strong> 代码的前端开发人员，但也可以用于编程语言.</p><h4 id="2-简写"><a href="#2-简写" class="headerlink" title="2.简写"></a>2.简写</h4><p>书写简写标签,加Tab键.自动补全代码.</p><h5 id="2-1-类名"><a href="#2-1-类名" class="headerlink" title="2.1.类名"></a>2.1<code>.类名</code></h5><pre><code class="hljs bash"><span class="hljs-comment"># .类名</span>div.jumbotron-&gt;&lt;div class=<span class="hljs-string">&quot;jumbotron&quot;</span>&gt;&lt;/div&gt;<span class="hljs-comment"># 多个类名.</span>div.panel.panel-default-&gt;&lt;div class=<span class="hljs-string">&quot;panel panel-default&quot;</span>&gt;&lt;/div&gt;</code></pre><h5 id="2-2a"><a href="#2-2a" class="headerlink" title="2.2a"></a>2.2<code>a</code></h5><pre><code class="hljs bash"><span class="hljs-comment"># 链接.</span>a-&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;&lt;/a&gt;<span class="hljs-comment"># 链接加内容.</span>a&#123;Register an account&#125;-&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;Register an account&lt;/a&gt;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>emmet</tag>
      
      <tag>html</tag>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式学习记录</title>
    <link href="/2021/02/16/regex-started/"/>
    <url>/2021/02/16/regex-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="正则表达式学习记录"><a href="#正则表达式学习记录" class="headerlink" title="正则表达式学习记录"></a>正则表达式学习记录</h3><h4 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h4><pre><code class="hljs bash"><span class="hljs-comment"># 匹配一个换行符。等价于 \x0a 和 \cJ.</span>\n<span class="hljs-comment"># 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符.</span>\s<span class="hljs-comment"># 匹配任何非空白字符。等价于 [^ \f\n\r\t\v].</span>\S<span class="hljs-comment"># 匹配一个制表符。等价于 \x09 和 \cI.</span>\t<span class="hljs-comment"># 匹配一个垂直制表符。等价于 \x0b 和 \cK.</span>\v</code></pre><h4 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h4><p>所谓特殊字符，就是一些有特殊含义的字符.</p><pre><code class="hljs bash"><span class="hljs-comment"># 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 &#x27;\n&#x27; 或 &#x27;\r&#x27;。要匹配 $ 字符本身，请使用 \$.</span>$<span class="hljs-comment"># 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \).</span>( )<span class="hljs-comment"># 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*.</span>*<span class="hljs-comment"># 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+.</span>+<span class="hljs-comment"># 匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \.</span>.<span class="hljs-comment"># 标记一个中括号表达式的开始。要匹配 [，请使用 \[.</span>[<span class="hljs-comment"># 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?.</span>?<span class="hljs-comment"># 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。</span><span class="hljs-comment"># 例如， &#x27;n&#x27; 匹配字符 &#x27;n&#x27;。&#x27;\n&#x27; 匹配换行符。序列 &#x27;\\&#x27; 匹配 &quot;\&quot;，而 &#x27;\(&#x27; 则匹配 &quot;(&quot;.</span>\<span class="hljs-comment"># 匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。</span><span class="hljs-comment"># 要匹配 ^ 字符本身，请使用 \^.</span>^<span class="hljs-comment"># 标记限定符表达式的开始。要匹配 &#123;，请使用 \&#123;.</span>&#123;<span class="hljs-comment"># 指明两项之间的一个选择。要匹配 |，请使用 \|.</span>|</code></pre><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 *<strong>** 或 **+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种.</p><pre><code class="hljs bash"><span class="hljs-comment"># 匹配前面的子表达式零次或多次.例如，zo* 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。* 等价于&#123;0,&#125;.</span>*<span class="hljs-comment"># 匹配前面的子表达式一次或多次.例如，&#x27;zo+&#x27; 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;。+ 等价于 &#123;1,&#125;.</span>+<span class="hljs-comment"># 匹配前面的子表达式零次或一次.例如，&quot;do(es)?&quot; 可以匹配 &quot;do&quot; 、 &quot;does&quot; 中的 &quot;does&quot; 、 &quot;doxy&quot; 中的 &quot;do&quot; 。? 等价于 &#123;0,1&#125;.</span>?<span class="hljs-comment"># n 是一个非负整数。匹配确定的 n 次.例如，&#x27;o&#123;2&#125;&#x27; 不能匹配 &quot;Bob&quot; 中的 &#x27;o&#x27;，但是能匹配 &quot;food&quot; 中的两个 o.</span>&#123;n&#125;<span class="hljs-comment"># n 是一个非负整数。至少匹配n 次.</span><span class="hljs-comment"># 例如，&#x27;o&#123;2,&#125;&#x27; 不能匹配 &quot;Bob&quot; 中的 &#x27;o&#x27;，但能匹配 &quot;foooood&quot; 中的所有 o。&#x27;o&#123;1,&#125;&#x27; 等价于 &#x27;o+&#x27;。&#x27;o&#123;0,&#125;&#x27; 则等价于 &#x27;o*&#x27;.</span>&#123;n,&#125;<span class="hljs-comment"># m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次.</span><span class="hljs-comment"># 例如，&quot;o&#123;1,3&#125;&quot; 将匹配 &quot;fooooood&quot; 中的前三个 o。&#x27;o&#123;0,1&#125;&#x27; 等价于 &#x27;o?&#x27;。请注意在逗号和两个数之间不能有空格。</span>&#123;n,m&#125;</code></pre><h4 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h4><p>定位符使您能够将正则表达式固定到行首或行尾.<br>它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾.</p><pre><code class="hljs bash"><span class="hljs-comment"># 匹配输入字符串开始的位置.如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配.</span>^<span class="hljs-comment"># 匹配输入字符串结尾的位置.如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配.</span>$<span class="hljs-comment"># 匹配一个单词边界，即字与空格间的位置.</span>\b<span class="hljs-comment"># 非单词边界匹配.</span>\B</code></pre><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>用圆括号 <strong>()</strong> 将所有选择项括起来，相邻的选择项之间用 <strong>|</strong> 分隔.<br><strong>()</strong> 表示捕获分组，**()** 会把每个分组里的匹配的值保存起来，多个匹配值可以通过数字 n 来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容).</p><p>但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用 <strong>?:</strong> 放在第一个选项前来消除这种副作用.<br>其中 <strong>?:</strong> 是非捕获元之一，还有两个非捕获元是 <strong>?=</strong> 和 **?!**，这两个还有更多的含义，<br>前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，<br>后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串.</p><pre><code class="hljs bash"><span class="hljs-comment"># 查找 exp2 前面的 exp1.</span>exp1(?=exp2)<span class="hljs-comment"># 查找 exp2 后面的 exp1.</span>(?&lt;=exp2)exp1<span class="hljs-comment"># 查找后面不是 exp2 的 exp1.</span>exp1(?!exp2)<span class="hljs-comment"># 查找前面不是 exp2 的 exp1.</span>(?&lt;!exp2)exp1</code></pre><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="1-数字带有”千位分隔符”"><a href="#1-数字带有”千位分隔符”" class="headerlink" title="1.数字带有”千位分隔符”"></a>1.数字带有”千位分隔符”</h5><pre><code class="hljs bash"><span class="hljs-comment"># 1234567 -&gt; 1,234,567</span>\B(?=(\d&#123;3&#125;)+$),</code></pre><h5 id="2-数字验证"><a href="#2-数字验证" class="headerlink" title="2.数字验证"></a>2.数字验证</h5><pre><code class="hljs javascript"><span class="hljs-comment">// 正则校验.</span>(^-?[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+\.&#123;<span class="hljs-number">1</span>&#125;\d+$)|(^-?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]*$)|(^-?<span class="hljs-number">0</span>&#123;<span class="hljs-number">1</span>&#125;$)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValueNumber</span>(<span class="hljs-params">value</span>) </span>&#123;  <span class="hljs-keyword">return</span> (<span class="hljs-regexp">/(^-?[0-9]+\.&#123;1&#125;\d+$)|(^-?[1-9][0-9]*$)|(^-?0&#123;1&#125;$)/</span>).test(value + <span class="hljs-string">&#x27;&#x27;</span>)&#125;</code></pre><h5 id="3-将空格替换成-t"><a href="#3-将空格替换成-t" class="headerlink" title="3.将空格替换成\t"></a>3.将空格替换成\t</h5><p><code>\ +</code><br>-&gt;<br><code>\t</code></p><pre><code class="hljs bash">Name  Age    Stream  PercentageAnkit   18      Math          95Rahul   19   Science          90Shaurya   20  Commerce          85Aishwarya   18      Math          80Priyanka   19   Science          75-&gt;NameAgeStreamPercentageAnkit18Math95Rahul19Science90Shaurya20Commerce85Aishwarya18Math80Priyanka19Science75</code></pre><h5 id="4-删除开始行的数字与空格"><a href="#4-删除开始行的数字与空格" class="headerlink" title="4.删除开始行的数字与空格"></a>4.删除开始行的数字与空格</h5><p><code>^\d\ +</code><br>-&gt;<br><code>空</code></p><pre><code class="hljs bash">Name  Age    Stream  Percentage0     Priya   18      Math          951  shivangi   19   Science          902      Jeet   20  Commerce          853    Ananya   18      Math          804   Swapnil   19   Science          75-&gt;Name  Age    Stream  PercentagePriya   18      Math          95shivangi   19   Science          90Jeet   20  Commerce          85Ananya   18      Math          80Swapnil   19   Science          75</code></pre><p><strong><u>PS:本文仅为学习记录,仅供参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>regex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flink整合Redis</title>
    <link href="/2021/01/24/flink-redis-started/"/>
    <url>/2021/01/24/flink-redis-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Flink整合Redis"><a href="#Flink整合Redis" class="headerlink" title="Flink整合Redis"></a>Flink整合Redis</h3><h4 id="1-安装Redis"><a href="#1-安装Redis" class="headerlink" title="1.安装Redis"></a>1.安装Redis</h4><pre><code class="hljs sh"><span class="hljs-comment"># docker环境安装redis.</span><span class="hljs-comment"># docker run -d -p 6379:6379 redis:6.0.9</span><span class="hljs-comment"># 查看已经存在的images</span>% docker imagesREPOSITORY                                          TAG                 IMAGE ID            CREATED             SIZEredis                                               6.0.9               62f1d3402b78        2 months ago        104MB......% docker ps -a | grep redis558f08da4eda        redis:6.0.9                                                <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   2 months ago        Exited (0) 4 weeks ago                            priceless_brattain<span class="hljs-comment"># 启动redis.</span>% docker start 558558% docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES558f08da4eda        redis:6.0.9         <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   2 months ago        Up 3 seconds        0.0.0.0:6379-&gt;6379/tcp   priceless_brattain</code></pre><h4 id="2-pom依赖"><a href="#2-pom依赖" class="headerlink" title="2.pom依赖"></a>2.pom依赖</h4><p><code>flink-connector-redis_2.11</code></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lc-flink-started<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">flink.version</span>&gt;</span>1.10.1<span class="hljs-tag">&lt;/<span class="hljs-name">flink.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">flink.redis.version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">flink.redis.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--flink-java config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--flink streaming java config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-streaming-java_2.12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--flink kafka config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-connector-kafka_2.12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--flink redis config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.bahir<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-connector-redis_2.11<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.redis.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>java程序:</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.api.sink;<span class="hljs-keyword">import</span> com.lc.api.beans.SensorReading;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.redis.RedisSink;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.redis.common.config.FlinkJedisPoolConfig;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.redis.common.mapper.RedisCommand;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.redis.common.mapper.RedisCommandDescription;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.redis.common.mapper.RedisMapper;<span class="hljs-comment">/**</span><span class="hljs-comment"> * sink与reids连接.</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/1/23</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sink2_Redis</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 执行环境.</span>        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();        <span class="hljs-comment">// 并行度.</span>        env.setParallelism(<span class="hljs-number">1</span>);        <span class="hljs-comment">// 读入数据.</span>        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="hljs-string">&quot;src/main/resources/sensor.txt&quot;</span>);        <span class="hljs-comment">// 转换成SensorReading类型.</span>        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;            String[] fields = line.split(<span class="hljs-string">&quot;,&quot;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SensorReading(fields[<span class="hljs-number">0</span>], <span class="hljs-keyword">new</span> Long(fields[<span class="hljs-number">1</span>]), <span class="hljs-keyword">new</span> Double(fields[<span class="hljs-number">2</span>]));        &#125;);        <span class="hljs-comment">// jedis连接器.</span>        FlinkJedisPoolConfig jedisConfig = <span class="hljs-keyword">new</span> FlinkJedisPoolConfig.Builder()                .setHost(<span class="hljs-string">&quot;localhost&quot;</span>)                .setPort(<span class="hljs-number">6379</span>)                .build();        <span class="hljs-comment">// redis sink连接.</span>        dataStream.addSink(<span class="hljs-keyword">new</span> RedisSink&lt;&gt;(jedisConfig, <span class="hljs-keyword">new</span> MyRedisMapper()));        <span class="hljs-comment">// 执行.</span>        env.execute();    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 自定义RedisMapper.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRedisMapper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RedisMapper</span>&lt;<span class="hljs-title">SensorReading</span>&gt; </span>&#123;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 定义保存数据到redis的命令,存成Hash表,hset sensor_temp id, temperature.</span><span class="hljs-comment">         * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">         */</span>        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> RedisCommandDescription <span class="hljs-title">getCommandDescription</span><span class="hljs-params">()</span> </span>&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RedisCommandDescription(RedisCommand.HSET, <span class="hljs-string">&quot;sensor_temp&quot;</span>);        &#125;        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getKeyFromData</span><span class="hljs-params">(SensorReading data)</span> </span>&#123;            <span class="hljs-keyword">return</span> data.getId();        &#125;        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getValueFromData</span><span class="hljs-params">(SensorReading data)</span> </span>&#123;            <span class="hljs-keyword">return</span> data.getTemperature().toString();        &#125;    &#125;&#125;</code></pre><p>数据文件: <code>sensor.txt</code></p><pre><code class="hljs bash">sensor_1,1547718199,35.8sensor_2,1547718201,15.4sensor_3,1547718202,6.7sensor_4,1547718205,38.1sensor_1,1547718105,36.3sensor_1,1547717225,35.1sensor_1,1547718195,38.3</code></pre><h4 id="3-测试sink连接"><a href="#3-测试sink连接" class="headerlink" title="3.测试sink连接"></a>3.测试sink连接</h4><p>启动<code>Sink2_Redis</code>程序.<br>通过RDM来查看redis中是否有输出结果.</p><img src="/2021/01/24/flink-redis-started/001.png" alt="flink-redis-output" style="zoom:50%;"><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考!</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>flink</tag>
      
      <tag>redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka安装配置</title>
    <link href="/2021/01/22/kafka-started/"/>
    <url>/2021/01/22/kafka-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Kafka安装配置"><a href="#Kafka安装配置" class="headerlink" title="Kafka安装配置"></a>Kafka安装配置</h3><h4 id="1-前提"><a href="#1-前提" class="headerlink" title="1.前提"></a>1.前提</h4><p>环境准备</p><ul><li>三个虚拟节点(Host名设定, 免密登录)</li><li>与主机网络互通</li><li>Zookeeper版本:zookeeper-3.4.14</li><li>Kafka版本:kafka_2.11-2.1.0</li></ul><h4 id="2-启动zookeeper"><a href="#2-启动zookeeper" class="headerlink" title="2.启动zookeeper"></a>2.启动zookeeper</h4><p>在三个节点上都启动zookeeper.</p><pre><code class="hljs bash">[root@hdss7-71 opt]<span class="hljs-comment"># cd /opt/zookeeper</span>[root@hdss7-71 zookeeper]<span class="hljs-comment"># bin/zkServer.sh start</span><span class="hljs-comment"># 查看启动状态.</span>[root@hdss7-71 zookeeper]<span class="hljs-comment"># bin/zkServer.sh status</span>ZooKeeper JMX enabled by defaultUsing config: /opt/zookeeper/bin/../conf/zoo.cfgMode: follower</code></pre><h4 id="3-解压kafka"><a href="#3-解压kafka" class="headerlink" title="3.解压kafka"></a>3.解压kafka</h4><pre><code class="hljs bash"><span class="hljs-comment"># 解压.</span>[root@hdss7-71 src]<span class="hljs-comment"># tar -zxvf kafka_2.11-2.1.0.tgz -C /opt/</span>[root@hdss7-71 src]<span class="hljs-comment"># cd /opt/</span><span class="hljs-comment"># 建立软链接.</span>[root@hdss7-71 opt]<span class="hljs-comment"># ln -s /opt/kafka_2.11-2.1.0/ /opt/kafka</span>[root@hdss7-71 opt]<span class="hljs-comment"># ll</span>......lrwxrwxrwx  1 root root   22 1月  22 03:51 kafka -&gt; /opt/kafka_2.11-2.1.0/drwxr-xr-x  7 root root  101 1月  22 04:22 kafka_2.11-2.1.0......</code></pre><h4 id="4-配置kafka"><a href="#4-配置kafka" class="headerlink" title="4.配置kafka"></a>4.配置kafka</h4><p><code>broker.id=1</code>在不同的节点设置不同的值.</p><pre><code class="hljs bash">[root@hdss7-71 opt]<span class="hljs-comment"># cd /opt/kafka</span>[root@hdss7-71 kafka]<span class="hljs-comment"># vi config/server.properties</span>broker.id=1host.name=hdss7-71port=9092listeners=PLAINTEXT://hdss7-71:9092advertised.listeners=PLAINTEXT://hdss7-71:9092log.dirs=/opt/datas/kafka/logsnum.partitions=4zookeeper.connect=hdss7-71:2181,hdss7-72:2181,hdss7-73:2181</code></pre><p>配置kafka的zookeeper.</p><pre><code class="hljs bash">[root@hdss7-71 kafka]<span class="hljs-comment"># vi config/zookeeper.properties</span>clientPort=2181<span class="hljs-comment"># disable the per-ip limit on the number of connections since this is a non-production config</span>maxClientCnxns=0dataDir=/opt/datas/zookeeper/data</code></pre><p>创建日志文件</p><pre><code class="hljs bash">[root@hdss7-71 kafka]<span class="hljs-comment"># mkdir -p /opt/datas/kafka/logs</span>[root@hdss7-72 kafka]<span class="hljs-comment"># mkdir -p /opt/datas/kafka/logs</span>[root@hdss7-73 kafka]<span class="hljs-comment"># mkdir -p /opt/datas/kafka/logs</span></code></pre><h4 id="5-分发kafka"><a href="#5-分发kafka" class="headerlink" title="5.分发kafka"></a>5.分发kafka</h4><pre><code class="hljs bash">[root@hdss7-71 opt]<span class="hljs-comment"># rsync -av /opt/kafka_2.11-2.1.0/ hdss7-72:/opt/kafka_2.11-2.1.0/</span>[root@hdss7-71 opt]<span class="hljs-comment"># rsync -av /opt/kafka_2.11-2.1.0/ hdss7-73:/opt/kafka_2.11-2.1.0/</span><span class="hljs-comment"># 建立软链接.</span>[root@hdss7-72 opt]<span class="hljs-comment"># ln -s /opt/kafka_2.11-2.1.0/ /opt/kafka</span>[root@hdss7-73 opt]<span class="hljs-comment"># ln -s /opt/kafka_2.11-2.1.0/ /opt/kafka</span></code></pre><p>修改<code>config/server.properties</code>中的<code>broker.id=2,broker.id=3</code></p><h4 id="6-启动kafka"><a href="#6-启动kafka" class="headerlink" title="6.启动kafka"></a>6.启动kafka</h4><pre><code class="hljs bash"><span class="hljs-comment"># 在三个节点中都启动.</span>[root@hdss7-71 kafka]<span class="hljs-comment"># bin/kafka-server-start.sh config/server.properties</span>[root@hdss7-72 kafka]<span class="hljs-comment"># bin/kafka-server-start.sh config/server.properties</span>[root@hdss7-73 kafka]<span class="hljs-comment"># bin/kafka-server-start.sh config/server.properties</span><span class="hljs-comment"># 或者,在后台启动.</span>[root@hdss7-71 kafka]<span class="hljs-comment"># bin/kafka-server-start.sh -daemon config/server.properties</span>[root@hdss7-71 kafka]<span class="hljs-comment"># jps</span>25522 QuorumPeerMain53337 Kafka116488 Jps</code></pre><p>7.准备Flink程序,从kafka中读取数据.</p><p>启动程序:</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.api.source;<span class="hljs-keyword">import</span> org.apache.flink.api.common.serialization.SimpleStringSchema;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 从Kafka中读取数据.</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/1/21</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Source3_Kafka</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 执行环境.</span>        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();        <span class="hljs-comment">// 设置并行度.</span>        env.setParallelism(<span class="hljs-number">1</span>);        <span class="hljs-comment">// 从Kafka中读取数据.</span>        Properties properties = <span class="hljs-keyword">new</span> Properties();        <span class="hljs-comment">// properties.setProperty(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span>        properties.setProperty(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, <span class="hljs-string">&quot;hdss7-71:9092&quot;</span>);        properties.setProperty(<span class="hljs-string">&quot;group.id&quot;</span>, <span class="hljs-string">&quot;consumer-group&quot;</span>);        properties.setProperty(<span class="hljs-string">&quot;auto.offset.reset&quot;</span>, <span class="hljs-string">&quot;latest&quot;</span>);        DataStream&lt;String&gt; dataStream = env.addSource(<span class="hljs-keyword">new</span> FlinkKafkaConsumer&lt;String&gt;(                <span class="hljs-string">&quot;sensor&quot;</span>, <span class="hljs-keyword">new</span> SimpleStringSchema(), properties));        <span class="hljs-comment">// 打印数据.</span>        dataStream.print();        <span class="hljs-comment">// 执行.</span>        env.execute();    &#125;&#125;</code></pre><p>在kafka中发送信息</p><pre><code class="hljs bash">[root@hdss7-71 kafka]<span class="hljs-comment"># bin/kafka-console-producer.sh --broker-list hdss7-71:9092 --topic sensor</span>&gt;sensor_1,1547718199L,35.8&gt;sensor_2,1547718201L,15.4&gt;sensor_3,1547718202L,6.7&gt;sensor_4,1547718205L,38.1</code></pre><p>在程序输出容器中会打印出信息结果:</p><p><img src="/2021/01/22/kafka-started/001.png" alt="flink-console" style="zoom:50%;"></p><h4 id="7-kafka消息消费"><a href="#7-kafka消息消费" class="headerlink" title="7.kafka消息消费"></a>7.kafka消息消费</h4><p>java程序:</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.api.sink;<span class="hljs-keyword">import</span> com.lc.api.beans.SensorReading;<span class="hljs-keyword">import</span> org.apache.flink.api.common.serialization.SimpleStringSchema;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer;<span class="hljs-comment">/**</span><span class="hljs-comment"> * sink与kafka连接.</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/1/23</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sink1_Kafka</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 执行环境.</span>        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();        env.setParallelism(<span class="hljs-number">4</span>);        <span class="hljs-comment">// 读入数据.</span>        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="hljs-string">&quot;src/main/resources/sensor.txt&quot;</span>);        <span class="hljs-comment">// 转换成SensorReading类型.</span>        DataStream&lt;String&gt; dataStream = inputStream.map(line -&gt; &#123;            String[] fields = line.split(<span class="hljs-string">&quot;,&quot;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SensorReading(fields[<span class="hljs-number">0</span>], <span class="hljs-keyword">new</span> Long(fields[<span class="hljs-number">1</span>]), <span class="hljs-keyword">new</span> Double(fields[<span class="hljs-number">2</span>])).toString();        &#125;);        <span class="hljs-comment">// kafka sink连接.</span>        dataStream.addSink(<span class="hljs-keyword">new</span> FlinkKafkaProducer&lt;String&gt;(                <span class="hljs-string">&quot;hdss7-71:9092&quot;</span>,                <span class="hljs-string">&quot;sink_kafka&quot;</span>,                <span class="hljs-keyword">new</span> SimpleStringSchema()        ));        <span class="hljs-comment">// 执行.</span>        env.execute();    &#125;&#125;</code></pre><p>kafka主题监听:</p><pre><code class="hljs bash"><span class="hljs-comment"># 后台启动kafka(加上参数:-daemon).</span>[root@hdss7-71 kafka]<span class="hljs-comment"># bin/kafka-server-start.sh -daemon config/server.properties </span>[root@hdss7-71 kafka]<span class="hljs-comment"># jps</span>8386 Jps8067 Kafka4644 QuorumPeerMain[root@hdss7-71 kafka]<span class="hljs-comment"># bin/kafka-console-consumer.sh --bootstrap-server hdss7-71:9092 --topic sink_kafka</span></code></pre><p>执行java程序后,在kafka输出中会监听到消息</p><pre><code class="hljs bash">[root@hdss7-71 kafka]<span class="hljs-comment"># bin/kafka-console-consumer.sh --bootstrap-server hdss7-71:9092 --topic sink_kafka</span>[2021-01-23 21:30:11,561] WARN [Consumer clientId=consumer-1, groupId=console-consumer-9131] Error <span class="hljs-keyword">while</span> fetching metadata with correlation id 2 : &#123;sink_kafka=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_3&#x27;</span>, timestamp=1547718202, temperature=6.7&#125;SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_4&#x27;</span>, timestamp=1547718205, temperature=38.1&#125;SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_1&#x27;</span>, timestamp=1547718199, temperature=35.8&#125;SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_2&#x27;</span>, timestamp=1547718201, temperature=15.4&#125;SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_1&#x27;</span>, timestamp=1547718105, temperature=36.3&#125;SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_1&#x27;</span>, timestamp=1547717225, temperature=35.1&#125;SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_1&#x27;</span>, timestamp=1547718195, temperature=38.3&#125;</code></pre><p>修改java程序为,在kafka中输入,并在kafka中输出,相当于kafka做了一个ETL的作用.</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.api.sink;<span class="hljs-keyword">import</span> com.lc.api.beans.SensorReading;<span class="hljs-keyword">import</span> org.apache.flink.api.common.serialization.SimpleStringSchema;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-comment">/**</span><span class="hljs-comment"> * sink与kafka连接, 输入与输出.</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/1/23</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sink1_Kafka_InOut</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 执行环境.</span>        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();        env.setParallelism(<span class="hljs-number">4</span>);        <span class="hljs-comment">// 从Kafka中读取数据.</span>        Properties properties = <span class="hljs-keyword">new</span> Properties();        <span class="hljs-comment">// properties.setProperty(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span>        properties.setProperty(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, <span class="hljs-string">&quot;hdss7-71:9092&quot;</span>);        properties.setProperty(<span class="hljs-string">&quot;group.id&quot;</span>, <span class="hljs-string">&quot;consumer-group&quot;</span>);        properties.setProperty(<span class="hljs-string">&quot;auto.offset.reset&quot;</span>, <span class="hljs-string">&quot;latest&quot;</span>);        DataStream&lt;String&gt; inputStream = env.addSource(<span class="hljs-keyword">new</span> FlinkKafkaConsumer&lt;String&gt;(                <span class="hljs-string">&quot;sensor&quot;</span>, <span class="hljs-keyword">new</span> SimpleStringSchema(), properties));        <span class="hljs-comment">// 转换成SensorReading类型.</span>        DataStream&lt;String&gt; dataStream = inputStream.map(line -&gt; &#123;            String[] fields = line.split(<span class="hljs-string">&quot;,&quot;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SensorReading(fields[<span class="hljs-number">0</span>], <span class="hljs-keyword">new</span> Long(fields[<span class="hljs-number">1</span>]), <span class="hljs-keyword">new</span> Double(fields[<span class="hljs-number">2</span>])).toString();        &#125;);        <span class="hljs-comment">// kafka sink连接.</span>        dataStream.addSink(<span class="hljs-keyword">new</span> FlinkKafkaProducer&lt;String&gt;(                <span class="hljs-string">&quot;hdss7-71:9092&quot;</span>,                <span class="hljs-string">&quot;sink_kafka&quot;</span>,                <span class="hljs-keyword">new</span> SimpleStringSchema()        ));        <span class="hljs-comment">// 执行.</span>        env.execute();    &#125;&#125;</code></pre><p>在kafka中发送消息主题与监听主题:</p><pre><code class="hljs bash"><span class="hljs-comment"># 监听主题.</span>[root@hdss7-71 kafka]<span class="hljs-comment"># bin/kafka-console-consumer.sh --bootstrap-server hdss7-71:9092 --topic sink_kafka</span>[2021-01-23 21:30:11,561] WARN [Consumer clientId=consumer-1, groupId=console-consumer-9131] Error <span class="hljs-keyword">while</span> fetching metadata with correlation id 2 : &#123;sink_kafka=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)<span class="hljs-comment"># 发送消息.</span>[root@hdss7-71 kafka]<span class="hljs-comment"># bin/kafka-console-producer.sh --broker-list hdss7-71:9092 --topic sensor</span>&gt;sensor_1,1547718199,35.8&gt;sensor_4,1547718205,38.1&gt;sensor_3,1547718202,6.7&gt;<span class="hljs-comment"># 在监听窗口中看到结果.</span>SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_1&#x27;</span>, timestamp=1547718199, temperature=35.8&#125;SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_4&#x27;</span>, timestamp=1547718205, temperature=38.1&#125;SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_3&#x27;</span>, timestamp=1547718202, temperature=6.7&#125;</code></pre><h4 id="8-kafka单点使用"><a href="#8-kafka单点使用" class="headerlink" title="8.kafka单点使用"></a>8.kafka单点使用</h4><pre><code class="hljs bash">[root@hdss7-81 ~]<span class="hljs-comment"># cd /opt/src</span><span class="hljs-comment"># 解压.</span>[root@hdss7-81 src]<span class="hljs-comment"># tar -zxvf kafka_2.12-2.1.0.tgz -C /opt/</span><span class="hljs-comment"># 建立软链接.</span>[root@hdss7-81 opt]<span class="hljs-comment"># ln -s /opt/kafka_2.12-2.1.0/ /opt/kafka</span><span class="hljs-comment"># 配置kafka.</span>[root@hdss7-81 opt]<span class="hljs-comment"># cd kafka</span>[root@hdss7-81 kafka]<span class="hljs-comment"># vi config/server.properties </span>broker.id=1log.dirs=/usr/tmp/kafka-logsnum.partitions=1<span class="hljs-comment"># 配置zookeeper.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># vi config/zookeeper.properties </span>dataDir=/opt/datas/kafka/zookeeper<span class="hljs-comment"># 启动kafka自带的zookeeper.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</span>[root@hdss7-81 kafka]<span class="hljs-comment"># jps</span>28818 QuorumPeerMain28899 Jps<span class="hljs-comment"># 启动kafka(命令行方式).</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-server-start.sh config/server.properties </span><span class="hljs-comment"># 后台方式启动(-daemon)</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-server-start.sh -daemon config/server.properties </span><span class="hljs-comment"># 创建消息主题.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic iplume-ad-test-01</span>Created topic <span class="hljs-string">&quot;iplume-ad-test-01&quot;</span>.<span class="hljs-comment"># 查看消息主题.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-topics.sh --list --zookeeper localhost:2181</span>iplume-ad-test-01<span class="hljs-comment"># 发送消息.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-console-producer.sh --broker-list localhost:9092 --topic iplume-ad-test-01 </span>&gt;hello kafka&gt;hello iplume-ad<span class="hljs-comment"># 监听消息</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic iplume-ad-test-01 --from-beginning</span>hello kafkahello iplume-ad<span class="hljs-comment"># 查看进程.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># jps</span>28818 QuorumPeerMain31977 Kafka47321 ConsoleConsumer100972 Jps<span class="hljs-comment"># 关闭zookeeper.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/zookeeper-server-stop.sh</span><span class="hljs-comment"># 关闭kafka.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-server-stop.sh</span>[root@hdss7-81 kafka]<span class="hljs-comment"># jps</span>111428 Jps</code></pre><h4 id="9-kafka的producer"><a href="#9-kafka的producer" class="headerlink" title="9.kafka的producer."></a>9.kafka的producer.</h4><h5 id="1-原生发送消息"><a href="#1-原生发送消息" class="headerlink" title="1) 原生发送消息"></a>1) 原生发送消息</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.kafkastudy;<span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;<span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-comment">/**</span><span class="hljs-comment"> * kafka的消息产生类.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/5/27</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyProducer</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * kafkai消息生产.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> KafkaProducer&lt;String, String&gt; producer;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-comment">// kafka的属性设置.</span>        Properties properties = <span class="hljs-keyword">new</span> Properties();        properties.put(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, <span class="hljs-string">&quot;hdss7-81:9092&quot;</span>);        <span class="hljs-comment">// key和value的键序列化方式(StringSerializer).</span>        properties.put(<span class="hljs-string">&quot;key.serializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);        properties.put(<span class="hljs-string">&quot;value.serializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);        <span class="hljs-comment">// 构建消息生产者.</span>        producer = <span class="hljs-keyword">new</span> KafkaProducer&lt;String, String&gt;(properties);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 发送kafka消息.</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessageForgetResult</span><span class="hljs-params">()</span> </span>&#123;        ProducerRecord&lt;String, String&gt; record = <span class="hljs-keyword">new</span> ProducerRecord&lt;&gt;(                <span class="hljs-string">&quot;iplume-kafka-study&quot;</span>,                <span class="hljs-string">&quot;name&quot;</span>,                <span class="hljs-string">&quot;ForgetResult&quot;</span>        );        producer.send(record);        producer.close();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        sendMessageForgetResult();    &#125;&#125;</code></pre><p>执行上述程序.查看监视窗口.</p><pre><code class="hljs bash">[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic iplume-kafka-study --from-beginning</span>ForgetResult</code></pre><h5 id="2-同步消息"><a href="#2-同步消息" class="headerlink" title="2) 同步消息"></a>2) 同步消息</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">  * 同步发送消息.</span><span class="hljs-comment">  */</span> <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessageSync</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;     ProducerRecord&lt;String, String&gt; record = <span class="hljs-keyword">new</span> ProducerRecord&lt;&gt;(             <span class="hljs-string">&quot;iplume-kafka-study&quot;</span>,             <span class="hljs-string">&quot;name&quot;</span>,             <span class="hljs-string">&quot;Sync&quot;</span>     );     RecordMetadata result = producer.send(record).get();     System.out.println(result.topic());     System.out.println(result.partition());     System.out.println(result.offset());     producer.close(); &#125; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;     <span class="hljs-comment">// sendMessageForgetResult();</span>     sendMessageSync(); &#125;</code></pre><p>查看消费窗口</p><pre><code class="hljs bash">[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic iplume-kafka-study --from-beginning</span>Sync</code></pre><p>运行窗口</p><pre><code class="hljs bash">iplume-kafka-study02</code></pre><h5 id="3-异步消息"><a href="#3-异步消息" class="headerlink" title="3) 异步消息"></a>3) 异步消息</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">   * 异步发送消息.</span><span class="hljs-comment">   */</span>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessageCallback</span><span class="hljs-params">()</span> </span>&#123;      ProducerRecord&lt;String, String&gt; record = <span class="hljs-keyword">new</span> ProducerRecord&lt;&gt;(              <span class="hljs-string">&quot;iplume-kafka-study&quot;</span>,              <span class="hljs-string">&quot;name&quot;</span>,              <span class="hljs-string">&quot;Callback&quot;</span>      );      <span class="hljs-comment">// 发送消息.</span>      producer.send(record, <span class="hljs-keyword">new</span> MyProducerCallback());      producer.close();  &#125;  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 异步发送消息的回调处理类.</span><span class="hljs-comment">   */</span>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyProducerCallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callback</span> </span>&#123;      <span class="hljs-meta">@Override</span>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompletion</span><span class="hljs-params">(RecordMetadata recordMetadata, Exception e)</span> </span>&#123;          <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123;              e.printStackTrace();              <span class="hljs-keyword">return</span>;          &#125;          System.out.println(recordMetadata.topic());          System.out.println(recordMetadata.partition());          System.out.println(recordMetadata.offset());          System.out.println(<span class="hljs-string">&quot;Coming in MyProducerCallback&quot;</span>);      &#125;  &#125;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;      <span class="hljs-comment">// sendMessageForgetResult();</span>      <span class="hljs-comment">// sendMessageSync();</span>      sendMessageCallback();  &#125;</code></pre><p>查看消费窗口</p><pre><code class="hljs bash">[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic iplume-kafka-study --from-beginning</span>ForgetResultForgetResultSyncCallback</code></pre><p>运行窗口</p><pre><code class="hljs bash">iplume-kafka-study03Coming <span class="hljs-keyword">in</span> MyProducerCallback</code></pre><h5 id="4-自定义分区配置"><a href="#4-自定义分区配置" class="headerlink" title="4) 自定义分区配置"></a>4) 自定义分区配置</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.kafkastudy;<span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.Partitioner;<span class="hljs-keyword">import</span> org.apache.kafka.common.Cluster;<span class="hljs-keyword">import</span> org.apache.kafka.common.PartitionInfo;<span class="hljs-keyword">import</span> org.apache.kafka.common.record.InvalidRecordException;<span class="hljs-keyword">import</span> org.apache.kafka.common.utils.Utils;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 自定义分区分配类.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/5/27</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomPartitioner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Partitioner</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String KEY_NAME = <span class="hljs-string">&quot;name&quot;</span>;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(String topic, Object key, <span class="hljs-keyword">byte</span>[] keyBytes, Object value, <span class="hljs-keyword">byte</span>[] valueBytes, Cluster cluster)</span> </span>&#123;        List&lt;PartitionInfo&gt; partitionInfos = cluster.partitionsForTopic(topic);        <span class="hljs-keyword">int</span> partitions = partitionInfos.size();        <span class="hljs-keyword">if</span> (keyBytes == <span class="hljs-keyword">null</span> || !(key <span class="hljs-keyword">instanceof</span> String)) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidRecordException(<span class="hljs-string">&quot;Kafka message must have key.&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (partitions == <span class="hljs-number">1</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">if</span> (KEY_NAME.equals(key)) &#123;            <span class="hljs-keyword">return</span> partitions - <span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">return</span> Math.abs(Utils.murmur2(keyBytes) % (partitions - <span class="hljs-number">1</span>));    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(Map&lt;String, ?&gt; configs)</span> </span>&#123;    &#125;&#125;</code></pre><p>运行类修改:</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">   * 异步发送消息.</span><span class="hljs-comment">   */</span>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessageCallback</span><span class="hljs-params">()</span> </span>&#123;      ProducerRecord&lt;String, String&gt; record = <span class="hljs-keyword">new</span> ProducerRecord&lt;&gt;(              <span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>,              <span class="hljs-string">&quot;name&quot;</span>,              <span class="hljs-string">&quot;Callback&quot;</span>      );      <span class="hljs-comment">// 发送消息.</span>      producer.send(record, <span class="hljs-keyword">new</span> MyProducerCallback());      record = <span class="hljs-keyword">new</span> ProducerRecord&lt;&gt;(              <span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>,              <span class="hljs-string">&quot;name_x&quot;</span>,              <span class="hljs-string">&quot;Callback_x&quot;</span>      );      producer.send(record, <span class="hljs-keyword">new</span> MyProducerCallback());      record = <span class="hljs-keyword">new</span> ProducerRecord&lt;&gt;(              <span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>,              <span class="hljs-string">&quot;name_y&quot;</span>,              <span class="hljs-string">&quot;Callback_y&quot;</span>      );      producer.send(record, <span class="hljs-keyword">new</span> MyProducerCallback());      producer.close();  &#125;  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 异步发送消息的回调处理类.</span><span class="hljs-comment">   */</span>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyProducerCallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callback</span> </span>&#123;      <span class="hljs-meta">@Override</span>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompletion</span><span class="hljs-params">(RecordMetadata recordMetadata, Exception e)</span> </span>&#123;          <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123;              e.printStackTrace();              <span class="hljs-keyword">return</span>;          &#125;          System.out.println(<span class="hljs-string">&quot;Topic: &quot;</span> + recordMetadata.topic());          System.out.println(<span class="hljs-string">&quot;Partition: &quot;</span> + recordMetadata.partition());          System.out.println(<span class="hljs-string">&quot;Offset: &quot;</span> + recordMetadata.offset());          System.out.println(<span class="hljs-string">&quot;Coming in MyProducerCallback&quot;</span>);      &#125;  &#125;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;      sendMessageCallback();  &#125;</code></pre><p>运行程序后,消息监听窗口:</p><pre><code class="hljs bash"><span class="hljs-comment"># 设置topic的分区数为3.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 3 --topic iplume-kafka-study-x</span>Created topic <span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>.[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic iplume-kafka-study-x --from-beginning</span>Callback_xCallback_yCallback</code></pre><p>程序窗口:</p><pre><code class="hljs bash">Topic: iplume-kafka-study-xPartition: 1Offset: 0Coming <span class="hljs-keyword">in</span> MyProducerCallbackTopic: iplume-kafka-study-xPartition: 0Offset: 0Coming <span class="hljs-keyword">in</span> MyProducerCallbackTopic: iplume-kafka-study-xPartition: 2Offset: 0Coming <span class="hljs-keyword">in</span> MyProducerCallback</code></pre><h4 id="10-kafka的Consumer"><a href="#10-kafka的Consumer" class="headerlink" title="10.kafka的Consumer"></a>10.kafka的Consumer</h4><h5 id="1-自动提交位移"><a href="#1-自动提交位移" class="headerlink" title="1) 自动提交位移"></a>1) 自动提交位移</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.kafkastudy;<span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;<span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;<span class="hljs-keyword">import</span> java.util.Collections;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-comment">/**</span><span class="hljs-comment"> * kafka的消费类.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/5/28</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConsumer</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * kafka消费者.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> KafkaConsumer&lt;String, String&gt; consumer;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 属性.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Properties properties;    <span class="hljs-keyword">static</span> &#123;        properties = <span class="hljs-keyword">new</span> Properties();        properties.put(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, <span class="hljs-string">&quot;hdss7-81:9092&quot;</span>);        <span class="hljs-comment">// key 与 value的反序列化.</span>        properties.put(<span class="hljs-string">&quot;key.deserializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);        properties.put(<span class="hljs-string">&quot;value.deserializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);        <span class="hljs-comment">// kafka不同组也可以消费全量的消息.</span>        properties.put(<span class="hljs-string">&quot;group.id&quot;</span>, <span class="hljs-string">&quot;KafkaStudy&quot;</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 消息消费方式: 自动提交位移.</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">generalConsumerMessageAutoCommit</span><span class="hljs-params">()</span> </span>&#123;        properties.put(<span class="hljs-string">&quot;enable.auto.commit&quot;</span>, <span class="hljs-keyword">true</span>);        consumer = <span class="hljs-keyword">new</span> KafkaConsumer&lt;&gt;(properties);        consumer.subscribe(Collections.singleton(<span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>));        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;                <span class="hljs-keyword">boolean</span> flg = <span class="hljs-keyword">true</span>;                <span class="hljs-comment">// 拉取消息.</span>                ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="hljs-number">100</span>);                <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;                    System.out.println(String.format(<span class="hljs-string">&quot;&quot;</span> +                            <span class="hljs-string">&quot;Topic: %s, Partition: %s, Key: %s, Value: %s&quot;</span>,                            record.topic(),                            record.partition(),                            record.key(),                            record.value()));                    <span class="hljs-keyword">if</span> (record.value().equals(<span class="hljs-string">&quot;done&quot;</span>)) &#123;                        flg = <span class="hljs-keyword">false</span>;                    &#125;                &#125;                <span class="hljs-keyword">if</span> (!flg) &#123;                    <span class="hljs-keyword">break</span>;                &#125;            &#125;        &#125; <span class="hljs-keyword">finally</span> &#123;            consumer.close();        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">// 自动提交位移.</span>        generalConsumerMessageAutoCommit();    &#125;&#125;</code></pre><p>运行消费者与生产者.查看运行窗口.</p><pre><code class="hljs bash"><span class="hljs-comment"># MyProducer.</span>Topic: iplume-kafka-study-xPartition: 1Offset: 1Coming <span class="hljs-keyword">in</span> MyProducerCallbackTopic: iplume-kafka-study-xPartition: 0Offset: 1Coming <span class="hljs-keyword">in</span> MyProducerCallbackTopic: iplume-kafka-study-xPartition: 2Offset: 1Coming <span class="hljs-keyword">in</span> MyProducerCallback<span class="hljs-comment"># MyConsumer.</span>Topic: iplume-kafka-study-x, Partition: 1, Key: name_x, Value: Callback_xTopic: iplume-kafka-study-x, Partition: 0, Key: name_y, Value: Callback_yTopic: iplume-kafka-study-x, Partition: 2, Key: name, Value: Callback</code></pre><h5 id="2-同步提交消息"><a href="#2-同步提交消息" class="headerlink" title="2) 同步提交消息"></a>2) 同步提交消息</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">   * 手动提交当前位移(同步提交).</span><span class="hljs-comment">   */</span>  <span class="hljs-meta">@SuppressWarnings(&quot;DuplicatedCode&quot;)</span>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">generalConsumeMessageSyncCommit</span><span class="hljs-params">()</span> </span>&#123;      <span class="hljs-comment">// 设置自动提交为false.</span>      properties.put(<span class="hljs-string">&quot;auto.commit.offset&quot;</span>, <span class="hljs-keyword">false</span>);      <span class="hljs-comment">// 消费者实例化.</span>      consumer = <span class="hljs-keyword">new</span> KafkaConsumer&lt;&gt;(properties);      <span class="hljs-comment">// 订阅消息主题.</span>      consumer.subscribe(Collections.singleton(<span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>));      <span class="hljs-keyword">try</span> &#123;          <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;              <span class="hljs-keyword">boolean</span> flg = <span class="hljs-keyword">true</span>;              ConsumerRecords&lt;String, String&gt; recordss = consumer.poll(<span class="hljs-number">100</span>);              <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : recordss) &#123;                  System.out.println(String.format(<span class="hljs-string">&quot;&quot;</span> +                                  <span class="hljs-string">&quot;Topic: %s, Partition: %s, Key: %s, Value: %s&quot;</span>,                          record.topic(),                          record.partition(),                          record.key(),                          record.value()));                  <span class="hljs-keyword">if</span> (record.value().equals(<span class="hljs-string">&quot;done&quot;</span>)) &#123;                      flg = <span class="hljs-keyword">false</span>;                  &#125;              &#125;              <span class="hljs-keyword">try</span> &#123;                  <span class="hljs-comment">// 同步提交发生消息堵塞.直到消费消息或者是发生异常为止.</span>                  consumer.commitSync();              &#125; <span class="hljs-keyword">catch</span> (CommitFailedException ex) &#123;                  System.out.println(<span class="hljs-string">&quot;Commit fail error: &quot;</span> + ex.getMessage());              &#125;              <span class="hljs-keyword">if</span> (!flg) &#123;                  <span class="hljs-keyword">break</span>;              &#125;          &#125;      &#125; <span class="hljs-keyword">finally</span> &#123;          consumer.close();      &#125;  &#125;</code></pre><h5 id="3-异步提交消息"><a href="#3-异步提交消息" class="headerlink" title="3) 异步提交消息"></a>3) 异步提交消息</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 异步消费消息.</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">generalConsumerMessageAsyncCommit</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">// 设置自动提交为false.</span>    properties.put(<span class="hljs-string">&quot;auto.commit.offset&quot;</span>, <span class="hljs-keyword">false</span>);    <span class="hljs-comment">// 消费者实例化.</span>    consumer = <span class="hljs-keyword">new</span> KafkaConsumer&lt;&gt;(properties);    <span class="hljs-comment">// 订阅消息主题.</span>    consumer.subscribe(Collections.singleton(<span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>));    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;            <span class="hljs-keyword">boolean</span> flg = <span class="hljs-keyword">true</span>;            ConsumerRecords&lt;String, String&gt; recordss = consumer.poll(<span class="hljs-number">100</span>);            <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : recordss) &#123;                System.out.println(String.format(<span class="hljs-string">&quot;&quot;</span> +                                <span class="hljs-string">&quot;Topic: %s, Partition: %s, Key: %s, Value: %s&quot;</span>,                        record.topic(),                        record.partition(),                        record.key(),                        record.value()));                <span class="hljs-keyword">if</span> (record.value().equals(<span class="hljs-string">&quot;done&quot;</span>)) &#123;                    flg = <span class="hljs-keyword">false</span>;                &#125;            &#125;            <span class="hljs-comment">// 异步提交消息不会发行堵塞,但不能保证能正确消费消息.</span>            consumer.commitAsync();            <span class="hljs-keyword">if</span> (!flg) &#123;                <span class="hljs-keyword">break</span>;            &#125;        &#125;    &#125; <span class="hljs-keyword">finally</span> &#123;        consumer.close();    &#125;&#125;</code></pre><h5 id="4-手动异步提交消息带回调"><a href="#4-手动异步提交消息带回调" class="headerlink" title="4) 手动异步提交消息带回调"></a>4) 手动异步提交消息带回调</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 手动异步提交消息带回调.</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SuppressWarnings(&quot;AlibabaRemoveCommentedCode&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">generalConsumeMessageAsyncCommitWithCallback</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">// 设置自动提交为false.</span>    properties.put(<span class="hljs-string">&quot;auto.commit.offset&quot;</span>, <span class="hljs-keyword">false</span>);    <span class="hljs-comment">// 消费者实例化.</span>    consumer = <span class="hljs-keyword">new</span> KafkaConsumer&lt;&gt;(properties);    <span class="hljs-comment">// 订阅消息主题.</span>    consumer.subscribe(Collections.singleton(<span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>));    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;            <span class="hljs-keyword">boolean</span> flg = <span class="hljs-keyword">true</span>;            ConsumerRecords&lt;String, String&gt; recordss = consumer.poll(<span class="hljs-number">100</span>);            <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : recordss) &#123;                System.out.println(String.format(<span class="hljs-string">&quot;&quot;</span> +                                <span class="hljs-string">&quot;Topic: %s, Partition: %s, Key: %s, Value: %s&quot;</span>,                        record.topic(),                        record.partition(),                        record.key(),                        record.value()));                <span class="hljs-keyword">if</span> (record.value().equals(<span class="hljs-string">&quot;done&quot;</span>)) &#123;                    flg = <span class="hljs-keyword">false</span>;                &#125;            &#125;            <span class="hljs-comment">// 正常写法.</span>            <span class="hljs-comment">// consumer.commitAsync(new OffsetCommitCallback() &#123;</span>            <span class="hljs-comment">//     @Override</span>            <span class="hljs-comment">//     public void onComplete(Map&lt;TopicPartition, OffsetAndMetadata&gt; offsets, Exception exception) &#123;</span>            <span class="hljs-comment">//         // 异步提交失败后的回调,查看错误信息.</span>            <span class="hljs-comment">//         if (exception != null) &#123;</span>            <span class="hljs-comment">//             System.out.println(&quot;Commit failed for offsets: &quot; + exception.getMessage());</span>            <span class="hljs-comment">//         &#125;</span>            <span class="hljs-comment">//     &#125;</span>            <span class="hljs-comment">// &#125;);</span>            <span class="hljs-comment">// lambda语法糖.</span>            consumer.commitAsync((offsets, exception) -&gt; &#123;                <span class="hljs-comment">// 异步提交失败后的回调,查看错误信息.</span>                <span class="hljs-keyword">if</span> (exception != <span class="hljs-keyword">null</span>) &#123;                    System.out.println(<span class="hljs-string">&quot;Commit failed for offsets: &quot;</span> + exception.getMessage());                &#125;            &#125;);            <span class="hljs-keyword">if</span> (!flg) &#123;                <span class="hljs-keyword">break</span>;            &#125;        &#125;    &#125; <span class="hljs-keyword">finally</span> &#123;        consumer.close();    &#125;&#125;</code></pre><h5 id="5-混合异步与同步提交位移"><a href="#5-混合异步与同步提交位移" class="headerlink" title="5) 混合异步与同步提交位移"></a>5) 混合异步与同步提交位移</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 混合异步与同步提交位移.</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SuppressWarnings(&quot;DuplicatedCode&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mixAsyncAndSyncCommit</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">// 设置自动提交为false.</span>    properties.put(<span class="hljs-string">&quot;auto.commit.offset&quot;</span>, <span class="hljs-keyword">false</span>);    <span class="hljs-comment">// 消费者实例化.</span>    consumer = <span class="hljs-keyword">new</span> KafkaConsumer&lt;&gt;(properties);    <span class="hljs-comment">// 订阅消息主题.</span>    consumer.subscribe(Collections.singleton(<span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>));    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;            <span class="hljs-keyword">boolean</span> flg = <span class="hljs-keyword">true</span>;            ConsumerRecords&lt;String, String&gt; recordss = consumer.poll(<span class="hljs-number">100</span>);            <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : recordss) &#123;                System.out.println(String.format(<span class="hljs-string">&quot;&quot;</span> +                                <span class="hljs-string">&quot;Topic: %s, Partition: %s, Key: %s, Value: %s&quot;</span>,                        record.topic(),                        record.partition(),                        record.key(),                        record.value()));                <span class="hljs-keyword">if</span> (record.value().equals(<span class="hljs-string">&quot;done&quot;</span>)) &#123;                    flg = <span class="hljs-keyword">false</span>;                &#125;            &#125;            <span class="hljs-comment">// 异步提交.</span>            consumer.commitAsync();            <span class="hljs-keyword">if</span> (!flg) &#123;                <span class="hljs-keyword">break</span>;            &#125;        &#125;    &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;        System.out.println(<span class="hljs-string">&quot;Commit async error: &quot;</span> + ex.getMessage());    &#125; <span class="hljs-keyword">finally</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 同步提交.</span>            consumer.commitSync();        &#125; <span class="hljs-keyword">finally</span> &#123;            consumer.close();        &#125;    &#125;&#125;</code></pre><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考!</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>flink</tag>
      
      <tag>zookeeper</tag>
      
      <tag>kafka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flink的yarn模式</title>
    <link href="/2021/01/19/flink-yarn-started/"/>
    <url>/2021/01/19/flink-yarn-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Flink的yarn模式"><a href="#Flink的yarn模式" class="headerlink" title="Flink的yarn模式"></a>Flink的yarn模式</h3><h4 id="1-前提"><a href="#1-前提" class="headerlink" title="1.前提"></a>1.前提</h4><p>环境准备:</p><ul><li>三个虚拟节点(Host名设定, 免密登录)</li><li>与主机网络互通</li><li>Flink版本:flink-1.10.1-bin-scala_2.12</li><li>Hadoop版本:hadoop-3.2.1</li><li>wordcount的jar包</li><li>flink-shaded-hadoop-2-uber-2.8.3-10.0.jar(路径:/opt/flink/lib)</li></ul><h4 id="2-启动hadoop"><a href="#2-启动hadoop" class="headerlink" title="2.启动hadoop"></a>2.启动hadoop</h4><pre><code class="hljs bash">[root@hdss7-71 hadoop]<span class="hljs-comment"># sbin/start-all.sh </span>Starting namenodes on [hdss7-71]上一次登录：三 1月 20 05:00:03 CST 2021从 10.4.7.1pts/1 上Starting datanodes上一次登录：三 1月 20 05:03:58 CST 2021pts/0 上Starting secondary namenodes [hdss7-72]上一次登录：三 1月 20 05:04:00 CST 2021pts/0 上Starting resourcemanager上一次登录：三 1月 20 05:04:04 CST 2021pts/0 上Starting nodemanagers上一次登录：三 1月 20 05:04:08 CST 2021pts/0 上[root@hdss7-71 hadoop]<span class="hljs-comment"># jps</span>6386 NameNode7240 NodeManager6555 DataNode7676 Jps7054 ResourceManager[root@hdss7-72 ~]<span class="hljs-comment"># jps</span>6552 NodeManager6381 SecondaryNameNode7037 Jps6222 DataNode[root@hdss7-73 ~]<span class="hljs-comment"># jps</span>7088 Jps6132 DataNode6381 NodeManager</code></pre><p>web浏览器访问:</p><p><code>http://hdss7-71:50070/</code></p><img src="/2021/01/19/flink-yarn-started/001.png" alt="hadoop-datanode" style="zoom:50%;"><h4 id="3-Flink的Yarn模式"><a href="#3-Flink的Yarn模式" class="headerlink" title="3.Flink的Yarn模式"></a>3.Flink的Yarn模式</h4><p>Flink 提供了两种在 yarn 上运行的模式，分别为 Session-Cluster 和 Per-Job-Cluster 模式.</p><h5 id="Session-Cluster-模式"><a href="#Session-Cluster-模式" class="headerlink" title="Session-Cluster 模式"></a><strong>Session-Cluster 模式</strong></h5><p>需要先启动集群，然后再提交作业，接着会向 yarn 申请一块空间后，资源永远保持不变。<br>如果资源满了，下一个作业就无法提交，只能等到 yarn 中的其中一个作业执行完成后，释放了资源，下个作业才会正常提交。<br>所有作业共享 Dispatcher 和 ResourceManager,共享资源<br>适合规模小执行时间短的作业。</p><p>在 yarn 中初始化一个 flink 集群，开辟指定的资源，以后提交任务都向这里提 交。这个 flink 集群会常驻在 yarn 集群中，除非手工停止。</p><h6 id="启动yarn-session"><a href="#启动yarn-session" class="headerlink" title="启动yarn-session"></a><strong>启动yarn-session</strong></h6><pre><code class="hljs shell">[root@hdss7-71 flink]# cd /opt/flink[root@hdss7-71 flink]# bin/yarn-session.sh -n 2 -s 2 -jm 1024 -tm 1024 -nm test -d......JobManager Web Interface: http://hdss7-71:40486</code></pre><p>-n(–container):TaskManager 的数量。<br>-s(–slots): 每个 TaskManager 的 slot 数量，默认一个 slot 一个 core，默认每个 taskmanager 的 slot 的个数为 1，有时可以多一些 taskmanager，做冗余。<br>-jm:JobManager 的内存(单位 MB)。<br>-tm:每个 taskmanager 的内存(单位 MB)。 -nm:yarn 的 appName(现在 yarn 的 ui 上的名字)。 -d:后台执行。</p><h6 id="开启sock监听"><a href="#开启sock监听" class="headerlink" title="开启sock监听"></a><strong>开启sock监听</strong></h6><pre><code class="hljs bash">[root@hdss7-71 ~]<span class="hljs-comment"># nc -lk 7777</span></code></pre><h6 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a><strong>执行任务</strong></h6><pre><code class="hljs bash">[root@hdss7-71 flink]<span class="hljs-comment"># bin/flink run -c com.lc.wc.StreamWordCount -p 3 /opt/src/lc-flink-started-1.0-SNAPSHOT.jar --host localhost --port 7777</span>......2021-01-20 05:18:29,533 INFO  org.apache.flink.yarn.YarnClusterDescriptor                   - Found Web Interface hdss7-71:40486 of application <span class="hljs-string">&#x27;application_1611090252419_0001&#x27;</span>.Job has been submitted with JobID 551da29180b940b1e8f633bd5979f04b</code></pre><h6 id="查看任务状态"><a href="#查看任务状态" class="headerlink" title="查看任务状态"></a><strong>查看任务状态</strong></h6><p><code>http://hdss7-71:8088/</code></p><img src="/2021/01/19/flink-yarn-started/002.png" alt="yarn-web-ui" style="zoom:50%;"><p>在sock端输入文字”Hello Flink”</p><pre><code class="hljs bash">[root@hdss7-71 ~]<span class="hljs-comment"># nc -lk 7777</span>Hello FlinkHello SparkHello Flink</code></pre><h6 id="查看统计结果"><a href="#查看统计结果" class="headerlink" title="查看统计结果"></a>查看统计结果</h6><p>在Flink的Task中的输出中可以看到字符统计结果</p><img src="/2021/01/19/flink-yarn-started/003.png" alt="flink-stdout" style="zoom:50%;"><p>在另一个任务的输出中可以看到其余的统计结果</p><img src="/2021/01/19/flink-yarn-started/004.png" alt="task-stdout" style="zoom:50%;"><h6 id="取消yarn-session"><a href="#取消yarn-session" class="headerlink" title="取消yarn-session"></a><strong>取消yarn-session</strong></h6><pre><code class="hljs bash">[root@hdss7-71 ~]<span class="hljs-comment"># cd /opt/hadoop</span>[root@hdss7-71 hadoop]<span class="hljs-comment"># ls</span>bin  etc  include  lib  libexec  LICENSE.txt  logs  NOTICE.txt  README.txt  sbin  share[root@hdss7-71 hadoop]<span class="hljs-comment"># bin/yarn application --kill application_1611090252419_0001</span>2021-01-20 05:31:02,359 INFO client.RMProxy: Connecting to ResourceManager at /0.0.0.0:8032Killing application application_1611090252419_00012021-01-20 05:31:03,003 INFO impl.YarnClientImpl: Killed application application_1611090252419_0001</code></pre><h5 id="Per-Job-Cluster模式"><a href="#Per-Job-Cluster模式" class="headerlink" title="Per Job Cluster模式"></a><strong>Per Job Cluster</strong>模式</h5><p>一个 Job 会对应一个集群，每提交一个作业会根据自身的情况，都会单独向 yarn 申请资源，直到作业执行完成.<br>一个作业的失败与否并不会影响下一个作业的正常 提交和运行。<br>独享 Dispatcher 和 ResourceManager，按需接受资源申请;适合规模大长时间运行的作业。</p><p>每次提交都会创建一个新的 flink 集群，任务之间互相独立，互不影响，方便管理。<br>任务执行完成之后创建的集群也会消失。</p><pre><code class="hljs bash">[root@hdss7-71 hadoop]<span class="hljs-comment"># cd /opt/flink</span>[root@hdss7-71 flink]<span class="hljs-comment"># bin/flink run –m yarn-cluster -c com.lc.wc.StreamWordCount /opt/src/lc-flink-started-1.0-SNAPSHOT.jar --host lcoalhost –port 7777</span></code></pre><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考!</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>yarn</tag>
      
      <tag>Flink</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flink的Standalone模式安装</title>
    <link href="/2021/01/17/Flink-standalone-started/"/>
    <url>/2021/01/17/Flink-standalone-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Flink的Standalone模式安装"><a href="#Flink的Standalone模式安装" class="headerlink" title="Flink的Standalone模式安装"></a>Flink的Standalone模式安装</h3><h4 id="1-前提"><a href="#1-前提" class="headerlink" title="1.前提"></a>1.前提</h4><p>环境准备:</p><ul><li>三个虚拟节点(Host名设定, 免密登录)</li><li>与主机网络互通</li><li>Flink版本:flink-1.10.1-bin-scala_2.12</li></ul><h4 id="2-Flink安装"><a href="#2-Flink安装" class="headerlink" title="2.Flink安装"></a>2.Flink安装</h4><p>解压文件:</p><pre><code class="hljs bash">[root@hdss7-71 src]<span class="hljs-comment"># tar -zxvf flink-1.10.1-bin-scala_2.12.tgz -C /opt/</span>[root@hdss7-71 src]<span class="hljs-comment"># cd /opt/</span>[root@hdss7-71 opt]<span class="hljs-comment"># ln -s /opt/flink-1.10.1/ /opt/flink</span>[root@hdss7-71 opt]<span class="hljs-comment"># ll</span>lrwxrwxrwx  1 root root   18 1月  17 23:44 flink -&gt; /opt/flink-1.10.1/drwxr-xr-x 10 root root  156 5月   7 2020 flink-1.10.1</code></pre><p>修改Flink配置文件:</p><pre><code class="hljs bash">[root@hdss7-71 ~]<span class="hljs-comment"># vi /opt/flink/conf/flink-conf.yaml</span><span class="hljs-comment"># jobmanager.rpc.address: localhost</span>jobmanager.rpc.address: hdss7-71</code></pre><p>修改slaves文件:</p><pre><code class="hljs bash">[root@hdss7-71 ~]<span class="hljs-comment"># vi /opt/flink/conf/slaves</span><span class="hljs-comment"># localhost</span>hdss7-72hdss7-73</code></pre><p>分发Flink文件夹到另外两个节点:</p><pre><code class="hljs bash">[root@hdss7-71 opt]<span class="hljs-comment"># rsync -av /opt/flink-1.10.1/ hdss7-72:/opt/flink-1.10.1/</span>[root@hdss7-71 opt]<span class="hljs-comment"># rsync -av /opt/flink-1.10.1/ hdss7-73:/opt/flink-1.10.1/</span><span class="hljs-comment"># 建立软链接.</span>[root@hdss7-72 opt]<span class="hljs-comment"># ln -s /opt/flink-1.10.1/ /opt/flink</span>[root@hdss7-73 opt]<span class="hljs-comment"># ln -s /opt/flink-1.10.1/ /opt/flink</span></code></pre><h4 id="3-启动Flink"><a href="#3-启动Flink" class="headerlink" title="3.启动Flink"></a>3.启动Flink</h4><pre><code class="hljs bash">[root@hdss7-71 opt]<span class="hljs-comment"># cd flink</span>[root@hdss7-71 flink]<span class="hljs-comment"># bin/start-cluster.sh </span>Starting cluster.Starting standalonesession daemon on host hdss7-71.host.com.Starting taskexecutor daemon on host hdss7-72.host.com.Starting taskexecutor daemon on host hdss7-73.host.com.</code></pre><p>主机浏览器访问</p><pre><code class="hljs bash"><span class="hljs-comment"># 设置host名.</span>% sudo vi /etc/hosts<span class="hljs-comment"># flink.</span>10.4.7.71   hdss7-71 hdss7-71.host.com10.4.7.72   hdss7-72 hdss7-72.host.com10.4.7.73   hdss7-73 hdss7-73.host.com</code></pre><img src="/2021/01/17/Flink-standalone-started/001.png" alt="Flink-web-UI" style="zoom:50%;"><h4 id="4-提交应用"><a href="#4-提交应用" class="headerlink" title="4.提交应用"></a>4.提交应用</h4><p>Flink的java版本的流处理字符统计程序:</p><p>pom.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lc-flink-started<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">flink.version</span>&gt;</span>1.10.1<span class="hljs-tag">&lt;/<span class="hljs-name">flink.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--flink-java config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--flink streaming java config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-streaming-java_2.12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>java程序:</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.wc;<span class="hljs-keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;<span class="hljs-keyword">import</span> org.apache.flink.api.java.utils.ParameterTool;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 流处理字符统计.</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/1/17</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StreamWordCount</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 创建流处理执行环境.</span>        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();        <span class="hljs-comment">// 设置并行度.</span>        <span class="hljs-comment">// env.setParallelism(4);</span>        <span class="hljs-comment">// 从文件中读取数据. -&gt; 有界流.</span>        <span class="hljs-comment">// String inputPath = &quot;src/main/resources/wordcount.txt&quot;;</span>        <span class="hljs-comment">// DataStream&lt;String&gt; inputDataStream = env.readTextFile(inputPath);</span>        <span class="hljs-comment">// 用Parameter Tool来提取host和端口.</span>        <span class="hljs-comment">// 在启动参数中设置: --host localhost --port 7777.</span>        ParameterTool parameterTool = ParameterTool.fromArgs(args);        String host = parameterTool.get(<span class="hljs-string">&quot;host&quot;</span>);        <span class="hljs-keyword">int</span> port = parameterTool.getInt(<span class="hljs-string">&quot;port&quot;</span>);        <span class="hljs-comment">// 从socket文本流读取数据. -&gt; 无界流.</span>        <span class="hljs-comment">// % nc -lk 7777</span>        <span class="hljs-comment">// DataStream&lt;String&gt; inputDataStream = env.socketTextStream(&quot;localhost&quot;, 7777);</span>        DataStream&lt;String&gt; inputDataStream = env.socketTextStream(host, port);        <span class="hljs-comment">// 基于数据流进行转换计算.</span>        DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; resultStream = inputDataStream.flatMap(<span class="hljs-keyword">new</span> WordCount.MyFlatMapper())                .keyBy(<span class="hljs-number">0</span>)                .sum(<span class="hljs-number">1</span>);        <span class="hljs-comment">// 此操作并没有执行任务.</span>        resultStream.print();        <span class="hljs-comment">// 执行任务.</span>        env.execute();    &#125;&#125;</code></pre><p>将程序打包成jar包:lc-flink-started-1.0-SNAPSHOT.jar</p><p>提交应用:</p><pre><code class="hljs bash"><span class="hljs-comment"># 启动入口类.</span>com.lc.wc.StreamWordCount<span class="hljs-comment"># 程序参数:host与端口.</span><span class="hljs-comment"># --host localhost --port 7777</span>--host hdss7-71 --port 7777</code></pre><p>页面提交:</p><img src="/2021/01/17/Flink-standalone-started/002.png" alt="submit-job" style="zoom:50%;"><p>在hdss7-71上设置socket端口监听:</p><pre><code class="hljs bash">[root@hdss7-71 ~]<span class="hljs-comment"># nc -lk 7777</span>Hello FlinkHello Spark</code></pre><p>在TaskManagers中查看log:</p><img src="/2021/01/17/Flink-standalone-started/003.png" alt="Task-log" style="zoom:50%;"><h4 id="5-命令行提交应用"><a href="#5-命令行提交应用" class="headerlink" title="5.命令行提交应用"></a>5.命令行提交应用</h4><pre><code class="hljs bash">[root@hdss7-71 flink]<span class="hljs-comment"># bin/flink run -c com.lc.wc.StreamWordCount -p 3 /opt/src/lc-flink-started-1.0-SNAPSHOT.jar --host hdss7-71 --port 7777</span>Job has been submitted with JobID 1525ec6847925c666bd4a816e521889d</code></pre><p>命令行查看job</p><pre><code class="hljs bash">[root@hdss7-71 ~]<span class="hljs-comment"># cd /opt/flink</span><span class="hljs-comment"># 查看job列表.</span>[root@hdss7-71 flink]<span class="hljs-comment"># bin/flink list</span>Waiting <span class="hljs-keyword">for</span> response...------------------ Running/Restarting Jobs -------------------18.01.2021 00:08:45 : ff65da7c60adf119abac48b9c6e276cf : Flink Streaming Job (RUNNING)18.01.2021 00:33:55 : 1525ec6847925c666bd4a816e521889d : Flink Streaming Job (RUNNING)--------------------------------------------------------------No scheduled <span class="hljs-built_in">jobs</span>.<span class="hljs-comment"># 停止job.</span>[root@hdss7-71 flink]<span class="hljs-comment"># bin/flink cancel ff65da7c60adf119abac48b9c6e276cf</span>Cancelling job ff65da7c60adf119abac48b9c6e276cf.Cancelled job ff65da7c60adf119abac48b9c6e276cf.[root@hdss7-71 flink]<span class="hljs-comment"># bin/flink list</span>Waiting <span class="hljs-keyword">for</span> response...------------------ Running/Restarting Jobs -------------------18.01.2021 00:33:55 : 1525ec6847925c666bd4a816e521889d : Flink Streaming Job (RUNNING)--------------------------------------------------------------No scheduled <span class="hljs-built_in">jobs</span>.</code></pre><p>在hdss7-71上节点上输入:</p><pre><code class="hljs bash">[root@hdss7-71 ~]<span class="hljs-comment"># nc -lk 7777</span>Hello Flink<span class="hljs-comment"># web-ui中log结果:</span>(Hello,1)(Flink,1)</code></pre><h4 id="6-停止Flink"><a href="#6-停止Flink" class="headerlink" title="6.停止Flink"></a>6.停止Flink</h4><pre><code class="hljs bash">[root@hdss7-71 flink]<span class="hljs-comment"># bin/stop-cluster.sh </span>Stopping taskexecutor daemon (pid: 12045) on host hdss7-72.host.com.Stopping taskexecutor daemon (pid: 11921) on host hdss7-73.host.com.Stopping standalonesession daemon (pid: 12230) on host hdss7-71.host.com.</code></pre><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考!</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Flink</tag>
      
      <tag>linux</tag>
      
      <tag>rsync</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spark的yarn模式</title>
    <link href="/2021/01/08/spark-yarn-start/"/>
    <url>/2021/01/08/spark-yarn-start/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Spark的yarn模式"><a href="#Spark的yarn模式" class="headerlink" title="Spark的yarn模式"></a>Spark的yarn模式</h3><h4 id="1-前提"><a href="#1-前提" class="headerlink" title="1.前提"></a>1.前提</h4><p>Spark主要是计算框架,而不是资源调度框架.<br>在Yarn环境下Spark的如何工作的(Yarn使用非常多), 需要的环境如下:</p><ul><li>三个虚拟节点(免密登录)</li><li>hadoop-3.2.1</li><li>zookeeper-3.4.14</li></ul><h4 id="2-安装Spark"><a href="#2-安装Spark" class="headerlink" title="2.安装Spark"></a>2.安装Spark</h4><pre><code class="hljs bash">[root@hdss7-61 src]<span class="hljs-comment"># mkdir /opt/spark-yarn</span>[root@hdss7-61 src]<span class="hljs-comment"># tar -zxvf spark-3.0.0-bin-hadoop3.2.tgz -C /opt/spark-yarn/</span>[root@hdss7-61 spark-yarn]<span class="hljs-comment"># ln -s /opt/spark-yarn/spark-3.0.0-bin-hadoop3.2/ /opt/spark-yarn/spark</span></code></pre><p>修改yarn-site.xml文件:</p><p><code>vi /opt/hadoop/etc/hadoop/yarn-site.xml</code></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!-- Site specific YARN configuration properties --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.application.classpath<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>            /opt/hadoop/etc/hadoop,            /opt/hadoop/share/hadoop/common/*,            /opt/hadoop/share/hadoop/common/lib/*,            /opt/hadoop/share/hadoop/hdfs/*,            /opt/hadoop/share/hadoop/hdfs/lib/*,            /opt/hadoop/share/hadoop/mapreduce/*,            /opt/hadoop/share/hadoop/mapreduce/lib/*,            /opt/hadoop/share/hadoop/yarn/*,            /opt/hadoop/share/hadoop/yarn/lib/*        <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>配置spark文件:</p><pre><code class="hljs sh">$ vi /opt/spark-yarn/spark/conf/$ cp spark-env.sh.template spark-env.sh$ vi spark-env.sh<span class="hljs-comment"># 在文件末尾添加.</span><span class="hljs-built_in">export</span> SPARK_DAEMON_JAVA_OPTS=<span class="hljs-string">&quot;-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=hdss7-61:2181,hdss7-62:2181,hdss7-63:2181 -Dspark.deploy.zookeeper.dir=/spark&quot;</span><span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/soft/jdk1.8.0_221SPARK_CONF_DIR=/opt/hadoop/etc/hadoop[root@hdss7-61 conf]<span class="hljs-comment"># cp slaves.template slaves</span>[root@hdss7-61 conf]<span class="hljs-comment"># vi slaves</span><span class="hljs-comment"># localhost</span>hdss7-61hdss7-62hdss7-63</code></pre><p>分发文件到名节点:</p><pre><code class="hljs bash">[root@hdss7-61 opt]<span class="hljs-comment"># rsync -av /opt/spark-yarn/ hdss7-62:/opt/spark-yarn/</span>[root@hdss7-61 opt]<span class="hljs-comment"># rsync -av /opt/spark-yarn/ hdss7-63:/opt/spark-yarn/</span>[root@hdss7-61 opt]<span class="hljs-comment"># rsync -av /opt/hadoop/etc/hadoop/ hdss7-62:/opt/hadoop/etc/hadoop/</span>[root@hdss7-61 opt]<span class="hljs-comment"># rsync -av /opt/hadoop/etc/hadoop/ hdss7-63:/opt/hadoop/etc/hadoop/</span></code></pre><h4 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h4><p>hdfs与spark的yarn:</p><pre><code class="hljs bash"><span class="hljs-comment"># 启动hadoop.</span>[root@hdss7-63 opt]<span class="hljs-comment"># cd /opt/hadoop</span>[root@hdss7-63 hadoop]<span class="hljs-comment"># sbin/start-yarn.sh</span>[root@hdss7-63 hadoop]<span class="hljs-comment"># sbin/start-dfs.sh</span><span class="hljs-comment"># 启动zookeeper.</span>[root@hdss7-63 zookeeper]<span class="hljs-comment"># bin/zkServer.sh start</span></code></pre><h4 id="4-提交应用"><a href="#4-提交应用" class="headerlink" title="4.提交应用"></a>4.提交应用</h4><pre><code class="hljs bash">[root@hdss7-63 opt]<span class="hljs-comment"># cd /opt/spark-yarn/spark</span>[root@hdss7-63 spark]<span class="hljs-comment"># </span>bin/spark-submit \--class org.apache.spark.examples.SparkPi \--master yarn \./examples/jars/spark-examples_2.12-3.0.0.jar \10......2021-01-09 04:17:47,718 INFO yarn.Client:          client token: N/A         diagnostics: AM container is launched, waiting <span class="hljs-keyword">for</span> AM container to Register with RM         ApplicationMaster host: N/A         ApplicationMaster RPC port: -1         queue: default         start time: 1610137066438         final status: UNDEFINED         tracking URL: http://hdss7-63:8088/proxy/application_1610136712974_0002/         user: root......</code></pre><p>访问网址:</p><pre><code class="hljs bash">http://10.4.7.63:8088/</code></pre><p><img src="/2021/01/08/spark-yarn-start/001.png" alt="hadoop"></p><h4 id="5-配置历史服务器"><a href="#5-配置历史服务器" class="headerlink" title="5.配置历史服务器"></a>5.配置历史服务器</h4><pre><code class="hljs sh">[root@hdss7-63 conf]<span class="hljs-comment"># cd /opt/spark-yarn/spark/conf</span>[root@hdss7-63 conf]<span class="hljs-comment"># vi spark-env.sh</span><span class="hljs-built_in">export</span> SPARK_HISTORY_OPTS=<span class="hljs-string">&quot;-Dspark.history.ui.port=18080 -Dspark.history.fs.logDirectory=hdfs://hdss7-61:9000/directory -Dspark.history.retainedApplications=30&quot;</span><span class="hljs-built_in">export</span> SPARK_DAEMON_JAVA_OPTS=<span class="hljs-string">&quot;-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=hdss7-61:2181,hdss7-62:2181,hdss7-63:2181 -Dspark.deploy.zookeeper.dir=/spark&quot;</span><span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/soft/jdk1.8.0_221SPARK_CONF_DIR=/opt/hadoop/etc/hadoop[root@hdss7-63 conf]<span class="hljs-comment"># vi spark-env.sh</span>spark.yarn.historyServer.address=hdss7-61:18080spark.history.ui.port=18080spark.eventLog.enabled           <span class="hljs-literal">true</span>spark.eventLog.dir               hdfs://hdss7-61:9000/directory[root@hdss7-63 conf]<span class="hljs-comment"># rsync -av /opt/spark-yarn/spark/conf/ hdss7-61:/opt/spark-yarn/spark/conf/</span>[root@hdss7-63 conf]<span class="hljs-comment"># rsync -av /opt/spark-yarn/spark/conf/ hdss7-62:/opt/spark-yarn/spark/conf/</span></code></pre><p>启动历史服务</p><pre><code class="hljs bash">[root@hdss7-63 spark]<span class="hljs-comment"># sbin/start-history-server.sh </span>starting org.apache.spark.deploy.history.HistoryServer, logging to /opt/spark-yarn/spark/logs/spark-root-org.apache.spark.deploy.history.HistoryServer-1-hdss7-63.host.com.out</code></pre><p>提交应用</p><pre><code class="hljs less"># 以客户端的方式来提交,会打印出<span class="hljs-selector-tag">PI</span>结果.<span class="hljs-selector-attr">[root@hdss7-63 spark]</span># <span class="hljs-selector-tag">bin</span>/<span class="hljs-selector-tag">spark-submit</span> \<span class="hljs-selector-tag">--class</span> <span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.spark</span><span class="hljs-selector-class">.examples</span><span class="hljs-selector-class">.SparkPi</span> \<span class="hljs-selector-tag">--master</span> <span class="hljs-selector-tag">yarn</span> \<span class="hljs-selector-tag">--deploy-mode</span> <span class="hljs-selector-tag">client</span> \./<span class="hljs-selector-tag">examples</span>/<span class="hljs-selector-tag">jars</span>/<span class="hljs-selector-tag">spark-examples_2</span><span class="hljs-selector-class">.12-3</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.jar</span> \<span class="hljs-selector-tag">10</span>......<span class="hljs-selector-tag">2021-01-09</span> <span class="hljs-selector-tag">04</span><span class="hljs-selector-pseudo">:45</span><span class="hljs-selector-pseudo">:50</span>,<span class="hljs-selector-tag">783</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">scheduler</span><span class="hljs-selector-class">.DAGScheduler</span>: <span class="hljs-selector-tag">Job</span> <span class="hljs-selector-tag">0</span> <span class="hljs-selector-tag">is</span> <span class="hljs-selector-tag">finished</span>. <span class="hljs-selector-tag">Cancelling</span> <span class="hljs-selector-tag">potential</span> <span class="hljs-selector-tag">speculative</span> <span class="hljs-selector-tag">or</span> <span class="hljs-selector-tag">zombie</span> <span class="hljs-selector-tag">tasks</span> <span class="hljs-selector-tag">for</span> <span class="hljs-selector-tag">this</span> <span class="hljs-selector-tag">job</span><span class="hljs-selector-tag">2021-01-09</span> <span class="hljs-selector-tag">04</span><span class="hljs-selector-pseudo">:45</span><span class="hljs-selector-pseudo">:50</span>,<span class="hljs-selector-tag">792</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">cluster</span><span class="hljs-selector-class">.YarnScheduler</span>: <span class="hljs-selector-tag">Killing</span> <span class="hljs-keyword">all</span> <span class="hljs-selector-tag">running</span> <span class="hljs-selector-tag">tasks</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">stage</span> <span class="hljs-selector-tag">0</span>: <span class="hljs-selector-tag">Stage</span> <span class="hljs-selector-tag">finished</span><span class="hljs-selector-tag">2021-01-09</span> <span class="hljs-selector-tag">04</span><span class="hljs-selector-pseudo">:45</span><span class="hljs-selector-pseudo">:50</span>,<span class="hljs-selector-tag">795</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">scheduler</span><span class="hljs-selector-class">.DAGScheduler</span>: <span class="hljs-selector-tag">Job</span> <span class="hljs-selector-tag">0</span> <span class="hljs-selector-tag">finished</span>: <span class="hljs-selector-tag">reduce</span> <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">SparkPi</span><span class="hljs-selector-class">.scala</span><span class="hljs-selector-pseudo">:38</span>, <span class="hljs-selector-tag">took</span> <span class="hljs-selector-tag">2</span><span class="hljs-selector-class">.217045</span> <span class="hljs-selector-tag">s</span><span class="hljs-selector-tag">Pi</span> <span class="hljs-selector-tag">is</span> <span class="hljs-selector-tag">roughly</span> <span class="hljs-selector-tag">3</span><span class="hljs-selector-class">.1424191424191426</span><span class="hljs-selector-tag">2021-01-09</span> <span class="hljs-selector-tag">04</span><span class="hljs-selector-pseudo">:45</span><span class="hljs-selector-pseudo">:50</span>,<span class="hljs-selector-tag">857</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">server</span><span class="hljs-selector-class">.AbstractConnector</span>: <span class="hljs-selector-tag">Stopped</span> <span class="hljs-selector-tag">Spark</span>@<span class="hljs-selector-tag">615f972</span>&#123;<span class="hljs-selector-tag">HTTP</span>/<span class="hljs-selector-tag">1</span><span class="hljs-selector-class">.1</span>,<span class="hljs-selector-attr">[http/1.1]</span>&#125;&#123;<span class="hljs-selector-tag">0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-pseudo">:4040</span>&#125;<span class="hljs-selector-tag">2021-01-09</span> <span class="hljs-selector-tag">04</span><span class="hljs-selector-pseudo">:45</span><span class="hljs-selector-pseudo">:50</span>,<span class="hljs-selector-tag">869</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">ui</span><span class="hljs-selector-class">.SparkUI</span>: <span class="hljs-selector-tag">Stopped</span> <span class="hljs-selector-tag">Spark</span> <span class="hljs-selector-tag">web</span> <span class="hljs-selector-tag">UI</span> <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//hdss7-63:4040</span>......</code></pre><p>访问网址</p><p><code>http://10.4.7.63:8088/</code></p><p><img src="/2021/01/08/spark-yarn-start/002.png" alt="spark-history" style="zoom:50%;"></p><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>spark</tag>
      
      <tag>yarn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spark高可用配置</title>
    <link href="/2021/01/07/spark-high-availability/"/>
    <url>/2021/01/07/spark-high-availability/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Spark高可用配置"><a href="#Spark高可用配置" class="headerlink" title="Spark高可用配置"></a>Spark高可用配置</h3><h4 id="1-前提"><a href="#1-前提" class="headerlink" title="1.前提"></a>1.前提</h4><p>准备环境</p><ul><li>三个节点虚拟机(免密登录)</li><li>安装hadoop-3.2.1</li><li>安装spark-3.0.0</li><li>安装zookeeper-3.4.14</li></ul><h4 id="2-集群规划"><a href="#2-集群规划" class="headerlink" title="2.集群规划"></a>2.集群规划</h4><img src="/2021/01/07/spark-high-availability/001.png" alt="spark-ha" style="zoom:50%;"><h4 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h4><pre><code class="hljs sh">$ vi /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/conf/spark-env.sh<span class="hljs-built_in">export</span> SPARK_HISTORY_OPTS=<span class="hljs-string">&quot;-Dspark.history.ui.port=18080 -Dspark.history.fs.logDirectory=hdfs://hdss7-61:9000/directory -Dspark.history.retainedApplications=30&quot;</span><span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/soft/jdk1.8.0_221<span class="hljs-comment"># SPARK_MASTER_HOST=hdss7-61</span><span class="hljs-comment"># SPARK_MASTER_PORT=7077</span>SPARK_MASTER_WEBUI_PORT=8989<span class="hljs-built_in">export</span> SPARK_DAEMON_JAVA_OPTS=<span class="hljs-string">&quot;-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=hdss7-61:2181,hdss7-62:2181,hdss7-63:2181 -Dspark.deploy.zookeeper.dir=/spark&quot;</span><span class="hljs-comment"># 分发文件到hdss7-62和hdss7-63节点上.</span>$ rsync -av /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/conf hdss7-62:/opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/$ rsync -av /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/conf hdss7-63:/opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/</code></pre><h4 id="4-启动spark"><a href="#4-启动spark" class="headerlink" title="4.启动spark"></a>4.启动spark</h4><pre><code class="hljs bash">[root@hdss7-61 conf]<span class="hljs-comment"># cd /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/</span>[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># sbin/start-all.sh </span>starting org.apache.spark.deploy.master.Master, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.master.Master-1-hdss7-61.host.com.outhdss7-62: starting org.apache.spark.deploy.worker.Worker, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.worker.Worker-1-hdss7-62.host.com.outhdss7-63: starting org.apache.spark.deploy.worker.Worker, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.worker.Worker-1-hdss7-63.host.com.outhdss7-61: starting org.apache.spark.deploy.worker.Worker, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.worker.Worker-1-hdss7-61.host.com.out[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># </span>[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># sbin/start-history-server.sh </span>starting org.apache.spark.deploy.history.HistoryServer, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.history.HistoryServer-1-hdss7-61.host.com.out[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># </span></code></pre><img src="/2021/01/07/spark-high-availability/002.png" alt="spark-master" style="zoom:50%;"><p>启动备用节点上的master:</p><pre><code class="hljs bash">[root@hdss7-62 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># sbin/start-master.sh </span>starting org.apache.spark.deploy.master.Master, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.master.Master-1-hdss7-62.host.com.out</code></pre><p><img src="/2021/01/07/spark-high-availability/003.png" alt="spark-standby"></p><h4 id="5-提交应用"><a href="#5-提交应用" class="headerlink" title="5.提交应用"></a>5.提交应用</h4><pre><code class="hljs less"><span class="hljs-selector-attr">[root@hdss7-62 spark-3.0.0-bin-hadoop3.2]</span># <span class="hljs-selector-tag">bin</span>/<span class="hljs-selector-tag">spark-submit</span> \<span class="hljs-selector-tag">--class</span> <span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.spark</span><span class="hljs-selector-class">.examples</span><span class="hljs-selector-class">.SparkPi</span> \<span class="hljs-selector-tag">--master</span> <span class="hljs-selector-tag">spark</span>:<span class="hljs-comment">//hdss7-61:7077,hdss7-62:7077 \</span>./<span class="hljs-selector-tag">examples</span>/<span class="hljs-selector-tag">jars</span>/<span class="hljs-selector-tag">spark-examples_2</span><span class="hljs-selector-class">.12-3</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.jar</span> \<span class="hljs-selector-tag">10</span>......<span class="hljs-selector-tag">2021-01-08</span> <span class="hljs-selector-tag">05</span><span class="hljs-selector-pseudo">:16</span><span class="hljs-selector-pseudo">:22</span>,<span class="hljs-selector-tag">025</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">scheduler</span><span class="hljs-selector-class">.DAGScheduler</span>: <span class="hljs-selector-tag">ResultStage</span> <span class="hljs-selector-tag">0</span> (reduce at SparkPi.<span class="hljs-attribute">scala</span>:<span class="hljs-number">38</span>) <span class="hljs-selector-tag">finished</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">2</span><span class="hljs-selector-class">.068</span> <span class="hljs-selector-tag">s</span><span class="hljs-selector-tag">2021-01-08</span> <span class="hljs-selector-tag">05</span><span class="hljs-selector-pseudo">:16</span><span class="hljs-selector-pseudo">:22</span>,<span class="hljs-selector-tag">032</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">scheduler</span><span class="hljs-selector-class">.DAGScheduler</span>: <span class="hljs-selector-tag">Job</span> <span class="hljs-selector-tag">0</span> <span class="hljs-selector-tag">is</span> <span class="hljs-selector-tag">finished</span>. <span class="hljs-selector-tag">Cancelling</span> <span class="hljs-selector-tag">potential</span> <span class="hljs-selector-tag">speculative</span> <span class="hljs-selector-tag">or</span> <span class="hljs-selector-tag">zombie</span> <span class="hljs-selector-tag">tasks</span> <span class="hljs-selector-tag">for</span> <span class="hljs-selector-tag">this</span> <span class="hljs-selector-tag">job</span><span class="hljs-selector-tag">2021-01-08</span> <span class="hljs-selector-tag">05</span><span class="hljs-selector-pseudo">:16</span><span class="hljs-selector-pseudo">:22</span>,<span class="hljs-selector-tag">034</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">scheduler</span><span class="hljs-selector-class">.TaskSchedulerImpl</span>: <span class="hljs-selector-tag">Killing</span> <span class="hljs-keyword">all</span> <span class="hljs-selector-tag">running</span> <span class="hljs-selector-tag">tasks</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">stage</span> <span class="hljs-selector-tag">0</span>: <span class="hljs-selector-tag">Stage</span> <span class="hljs-selector-tag">finished</span><span class="hljs-selector-tag">2021-01-08</span> <span class="hljs-selector-tag">05</span><span class="hljs-selector-pseudo">:16</span><span class="hljs-selector-pseudo">:22</span>,<span class="hljs-selector-tag">054</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">scheduler</span><span class="hljs-selector-class">.DAGScheduler</span>: <span class="hljs-selector-tag">Job</span> <span class="hljs-selector-tag">0</span> <span class="hljs-selector-tag">finished</span>: <span class="hljs-selector-tag">reduce</span> <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">SparkPi</span><span class="hljs-selector-class">.scala</span><span class="hljs-selector-pseudo">:38</span>, <span class="hljs-selector-tag">took</span> <span class="hljs-selector-tag">2</span><span class="hljs-selector-class">.306221</span> <span class="hljs-selector-tag">s</span><span class="hljs-selector-tag">Pi</span> <span class="hljs-selector-tag">is</span> <span class="hljs-selector-tag">roughly</span> <span class="hljs-selector-tag">3</span><span class="hljs-selector-class">.1417591417591417</span><span class="hljs-selector-tag">2021-01-08</span> <span class="hljs-selector-tag">05</span><span class="hljs-selector-pseudo">:16</span><span class="hljs-selector-pseudo">:22</span>,<span class="hljs-selector-tag">094</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">server</span><span class="hljs-selector-class">.AbstractConnector</span>: <span class="hljs-selector-tag">Stopped</span> <span class="hljs-selector-tag">Spark</span>@<span class="hljs-selector-tag">62f87c44</span>&#123;<span class="hljs-selector-tag">HTTP</span>/<span class="hljs-selector-tag">1</span><span class="hljs-selector-class">.1</span>,<span class="hljs-selector-attr">[http/1.1]</span>&#125;&#123;<span class="hljs-selector-tag">0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-pseudo">:4040</span>&#125;<span class="hljs-selector-tag">2021-01-08</span> <span class="hljs-selector-tag">05</span><span class="hljs-selector-pseudo">:16</span><span class="hljs-selector-pseudo">:22</span>,<span class="hljs-selector-tag">110</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">ui</span><span class="hljs-selector-class">.SparkUI</span>: <span class="hljs-selector-tag">Stopped</span> <span class="hljs-selector-tag">Spark</span> <span class="hljs-selector-tag">web</span> <span class="hljs-selector-tag">UI</span> <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//hdss7-62:4040</span><span class="hljs-selector-tag">2021-01-08</span> <span class="hljs-selector-tag">05</span><span class="hljs-selector-pseudo">:16</span><span class="hljs-selector-pseudo">:22</span>,<span class="hljs-selector-tag">130</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">cluster</span><span class="hljs-selector-class">.StandaloneSchedulerBackend</span>: <span class="hljs-selector-tag">Shutting</span> <span class="hljs-selector-tag">down</span> <span class="hljs-keyword">all</span> <span class="hljs-selector-tag">executors</span>......</code></pre><h4 id="6-测试高可用"><a href="#6-测试高可用" class="headerlink" title="6.测试高可用"></a>6.测试高可用</h4><p>停止spark的master节点进程</p><pre><code class="hljs bash">[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># jps</span>28369 NameNode28530 DataNode63187 Jps54037 HistoryServer25318 QuorumPeerMain52902 Master53037 Worker[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># kill -9 52902</span></code></pre><p>访问网站</p><p><code>http://10.4.7.61:8989/</code>, 不能访问</p><p><code>http://10.4.7.62:8989/</code>, 还能访问,从STANDBY -&gt; ALIVE状态.</p><img src="/2021/01/07/spark-high-availability/004.png" alt="spark-ha-test" style="zoom:50%;"><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>spark</tag>
      
      <tag>hadoop</tag>
      
      <tag>zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Zookeeper集群配置</title>
    <link href="/2021/01/07/zookeeper-started/"/>
    <url>/2021/01/07/zookeeper-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Zookeeper集群配置"><a href="#Zookeeper集群配置" class="headerlink" title="Zookeeper集群配置"></a>Zookeeper集群配置</h3><h4 id="1-解压文件"><a href="#1-解压文件" class="headerlink" title="1.解压文件"></a>1.解压文件</h4><pre><code class="hljs bash"><span class="hljs-comment"># 解压.</span>$ tar -zxvf /opt/src/zookeeper-3.4.14.tar.gz -C /opt/$ <span class="hljs-built_in">cd</span> /opt/<span class="hljs-comment"># 建立软链接.</span>$ ln -s /opt/zookeeper-3.4.14/ /opt/zookeeper[root@hdss7-61 opt]<span class="hljs-comment"># ll</span>lrwxrwxrwx  1 root root   22 1月   8 04:18 zookeeper -&gt; /opt/zookeeper-3.4.14/drwxr-xr-x 14 2002 2002 4096 3月   7 2019 zookeeper-3.4.14</code></pre><h4 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h4><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /opt/zookeeper/conf/<span class="hljs-comment"># 拷贝文件.</span>$ cp zoo_sample.cfg zoo.cfg<span class="hljs-comment"># 在zoo.cfg末尾添加.</span>$ vi zoo.cfgdataDir=/opt/datas/zookeeper/datadataLogDir=/opt/datas/zookeeper/<span class="hljs-built_in">log</span>clientPort=2181server.1=hdss7-61:2888:3888server.2=hdss7-62:2888:3888server.3=hdss7-63:2888:3888<span class="hljs-comment"># 建立zookeeper数据与日志文件夹.</span>$ mkdir -p /opt/datas/zookeeper/data$ mkdir -p /opt/datas/zookeeper/<span class="hljs-built_in">log</span><span class="hljs-comment"># 添加myid文件，各个节点中的myid　与上述中的server.x　id一致</span>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;1&quot;</span> &gt; /opt/datas/zookeeper/data/myid$ cat /opt/datas/zookeeper/data/myid1</code></pre><h4 id="3-分发文件"><a href="#3-分发文件" class="headerlink" title="3.分发文件"></a>3.分发文件</h4><pre><code class="hljs bash"><span class="hljs-comment"># 拷贝文件夹.</span>$ rsync -av /opt/zookeeper-3.4.14/ hdss7-62:/opt/zookeeper-3.4.14/$ rsync -av /opt/zookeeper-3.4.14/ hdss7-63:/opt/zookeeper-3.4.14/<span class="hljs-comment"># 在hdss7-62和hdss7-63节点上创建文件夹.</span>$ mkdir -p /opt/datas/zookeeper/data$ mkdir -p /opt/datas/zookeeper/<span class="hljs-built_in">log</span><span class="hljs-comment"># 在hdss7-62和hdss7-63节点上修改配置.</span>[root@hdss7-62 conf]<span class="hljs-comment"># echo &quot;2&quot; &gt; /opt/datas/zookeeper/data/myid</span>[root@hdss7-63 opt]<span class="hljs-comment"># echo &quot;3&quot; &gt; /opt/datas/zookeeper/data/myid</span></code></pre><h4 id="4-启动zookeeper"><a href="#4-启动zookeeper" class="headerlink" title="4.启动zookeeper"></a>4.启动zookeeper</h4><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /opt/zookeeper[root@hdss7-61 zookeeper]<span class="hljs-comment"># bin/zkServer.sh start</span>ZooKeeper JMX enabled by defaultUsing config: /opt/zookeeper/bin/../conf/zoo.cfgStarting zookeeper ... STARTED[root@hdss7-61 zookeeper]<span class="hljs-comment"># jps</span>25318 QuorumPeerMain25414 Jps<span class="hljs-comment"># 在hdss7-62和hdss7-63节点上也运行上述命令,启动zookeeper.</span></code></pre><h4 id="5-停止zookeeper"><a href="#5-停止zookeeper" class="headerlink" title="5.停止zookeeper"></a>5.停止zookeeper</h4><pre><code class="hljs bash">[root@hdss7-61 zookeeper]<span class="hljs-comment"># bin/zkServer.sh stop</span>ZooKeeper JMX enabled by defaultUsing config: /opt/zookeeper/bin/../conf/zoo.cfgStopping zookeeper ... STOPPED[root@hdss7-61 zookeeper]<span class="hljs-comment"># jps</span>73850 Jps</code></pre><h4 id="6-问题记录"><a href="#6-问题记录" class="headerlink" title="6.问题记录"></a>6.问题记录</h4><p>启动错误</p><pre><code class="hljs bash">[root@hdss7-71 zookeeper]<span class="hljs-comment"># bin/zkServer.sh status</span>ZooKeeper JMX enabled by defaultUsing config: /opt/zookeeper/bin/../conf/zoo.cfgError contacting service. It is probably not running<span class="hljs-comment"># 日志:</span>[root@hdss7-71 zookeeper]<span class="hljs-comment"># vi zookeeper.out</span>[WorkerSender[myid=1]:QuorumCnxManager@584] - Cannot open channel to 2 at election address hdss7-72/10.4.7.72:3888java.net.ConnectException: 拒绝连接 (Connection refused)......</code></pre><p>1.查看端口是否被占用</p><pre><code class="hljs bash">netstat -tunlp | grep 2181netstat -tunlp | grep 3888</code></pre><p>2.查看<code>conf/zoo.cfg</code>中是否有重复的配置项.</p><pre><code class="hljs bash"><span class="hljs-comment"># 自己新加入的配置项,原文件中是否在重复.</span>vi conf/zoo.cfgdataDir=/opt/datas/zookeeper/datadataLogDir=/opt/datas/zookeeper/<span class="hljs-built_in">log</span>clientPort=2181server.1=hdss7-71:2888:3888server.2=hdss7-72:2888:3888server.3=hdss7-73:2888:3888</code></pre><p>3.server.1与本机节点myid是否匹配.</p><pre><code class="hljs bash">[root@hdss7-71 zookeeper]<span class="hljs-comment"># cat /opt/datas/zookeeper/data/myid </span>1</code></pre><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>centos</tag>
      
      <tag>zookeeper</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop-3.2.1安装</title>
    <link href="/2021/01/05/hadoop-3-2-1-start/"/>
    <url>/2021/01/05/hadoop-3-2-1-start/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Hadoop-3-2-1安装"><a href="#Hadoop-3-2-1安装" class="headerlink" title="Hadoop-3.2.1安装"></a>Hadoop-3.2.1安装</h3><h4 id="1-前提"><a href="#1-前提" class="headerlink" title="1.前提"></a>1.前提</h4><p>配置前提</p><ul><li>centos7三个虚拟节点</li><li>主机名配置(/etc/hosts)</li><li>节点间免密登录</li><li>jdk环境配置</li></ul><pre><code class="hljs bash">$ vi /etc/hosts10.4.7.61 hdss7-61 hdss7-61.host.com10.4.7.62 hdss7-62 hdss7-62.host.com10.4.7.63 hdss7-63 hdss7-63.host.com<span class="hljs-comment"># 节点间免密登录.</span>$ <span class="hljs-built_in">cd</span> ~/.ssh/ssh-keygenssh-copy-id hdss7-61ssh-copy-id hdss7-62ssh-copy-id hdss7-63<span class="hljs-comment"># jdk环境配置.</span>$ /etc/profile.d/java.sh<span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/soft/jdk1.8.0_221<span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar</code></pre><h4 id="2-hadoop安装"><a href="#2-hadoop安装" class="headerlink" title="2.hadoop安装"></a>2.hadoop安装</h4><p>国内镜像节点:</p><pre><code class="hljs bash">https://mirror.bit.edu.cn/apache/hadoop/common/</code></pre><p>此处选择hadoop-3.2.1版本.</p><pre><code class="hljs bash">tar -zxvf hadoop-3.2.1.tar.gz -C /opt/hadoop-3.2.1<span class="hljs-comment"># 创建软链接.</span>ln -s /opt/hadoop-3.2.1/ /opt/hadoop[root@hdss7-61 opt]<span class="hljs-comment"># ll</span>总用量 0lrwxrwxrwx  1 root root  18 1月   6 03:03 hadoop -&gt; /opt/hadoop-3.2.1/drwxr-xr-x 10 1001 1001 161 1月   6 03:47 hadoop-3.2.1</code></pre><h4 id="3-环境变量配置"><a href="#3-环境变量配置" class="headerlink" title="3.环境变量配置"></a>3.环境变量配置</h4><pre><code class="hljs bash">vi /etc/profile.d/hadoop.sh<span class="hljs-built_in">export</span> HADOOP_HOME=/opt/hadoop<span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HADOOP_HOME</span>/bin:<span class="hljs-variable">$HADOOP_HOME</span>/sbin<span class="hljs-built_in">export</span> HADOOP_COMMON_HOME=<span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-built_in">export</span> HADOOP_HDFS_HOME=<span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-built_in">export</span> HADOOP_MAPRED_HOME=<span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-built_in">export</span> HADOOP_YARN_HOME=<span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-built_in">export</span> HADOOP_INSTALL=<span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="hljs-variable">$HADOOP_HOME</span>/lib/native<span class="hljs-built_in">export</span> HADOOP_CONF_DIR=<span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-built_in">export</span> HADOOP_LIBEXEC_DIR=<span class="hljs-variable">$HADOOP_HOME</span>/libexec<span class="hljs-built_in">export</span> JAVA_LIBRARY_PATH=<span class="hljs-variable">$HADOOP_HOME</span>/lib/native:<span class="hljs-variable">$JAVA_LIBRARY_PATH</span><span class="hljs-built_in">export</span> HADOOP_CONF_DIR=<span class="hljs-variable">$HADOOP_HOME</span>/etc/hadoop<span class="hljs-built_in">export</span> HDFS_DATANODE_USER=root<span class="hljs-comment"># 下方注释掉.</span><span class="hljs-comment"># export HDFS_DATANODE_SECURE_USER=root</span><span class="hljs-built_in">export</span> HDFS_SECONDARYNAMENODE_USER=root<span class="hljs-built_in">export</span> HDFS_NAMENODE_USER=root<span class="hljs-built_in">export</span> YARN_RESOURCEMANAGER_USER=root<span class="hljs-built_in">export</span> YARN_NODEMANAGER_USER=root</code></pre><p>使环境变量生效.</p><pre><code class="hljs bash">$ <span class="hljs-built_in">source</span> /etc/profile</code></pre><p>给hadoop建立文件夹</p><pre><code class="hljs bash">$ mkdir -p /opt/datas/hadoop</code></pre><h4 id="4-hadoop文件配置"><a href="#4-hadoop文件配置" class="headerlink" title="4.hadoop文件配置"></a>4.hadoop文件配置</h4><p><strong>修改<code>$HADOOP_HOME/etc/hadoop/core-site.xml</code>,</strong><br>HADOOP_HOME目录为: <code>/opt/hadoop</code></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><span class="hljs-comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.default.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://hdss7-61:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/datas/hadoop/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p><strong>修改<code>$HADOOP_HOME/etc/hadoop/hdfs-site.xml</code>，</strong><br>配置副本个数以及数据存放的路径</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><span class="hljs-comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/datas/hadoop/hdfs/name<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/datas/hadoop/hdfs/data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdss7-61:50070<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdss7-62:50090<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.permissions<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>注意: <code>/opt/datas/hadoop</code>已经创建好.</p><p><strong>修改<code>$HADOOP_HOME/etc/hadoop/mapred-site.xml</code></strong><br>配置使用yarn框架执行mapreduce处理程序，与之前版本多了后面两步,<br>不配置mapreduce.application.classpath这个参数mapreduce运行时会报错： Error: Could not find or load main class org.apache.hadoop.mapreduce.v2.app.MRAppMaster</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><span class="hljs-meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><span class="hljs-comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.application.classpath<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>            /opt/hadoop/etc/hadoop,            /opt/hadoop/share/hadoop/common/*,            /opt/hadoop/share/hadoop/common/lib/*,            /opt/hadoop/share/hadoop/hdfs/*,            /opt/hadoop/share/hadoop/hdfs/lib/*,            /opt/hadoop/share/hadoop/mapreduce/*,            /opt/hadoop/share/hadoop/mapreduce/lib/*,            /opt/hadoop/share/hadoop/yarn/*,            /opt/hadoop/share/hadoop/yarn/lib/*        <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p><strong>修改<code>$HADOOP_HOME/etc/hadoop/yarn-site.xml</code></strong></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!-- Site specific YARN configuration properties --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.application.classpath<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>            /opt/hadoop/etc/hadoop,            /opt/hadoop/share/hadoop/common/*,            /opt/hadoop/share/hadoop/common/lib/*,            /opt/hadoop/share/hadoop/hdfs/*,            /opt/hadoop/share/hadoop/hdfs/lib/*,            /opt/hadoop/share/hadoop/mapreduce/*,            /opt/hadoop/share/hadoop/mapreduce/lib/*,            /opt/hadoop/share/hadoop/yarn/*,            /opt/hadoop/share/hadoop/yarn/lib/*        <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>注意:上述中的<code>/opt/hadoop/</code>,是因为加了一个软链接.<br><code>ln -s /opt/hadoop-3.2.1/ /opt/hadoop</code></p><p><strong>worker文件里面添加</strong></p><pre><code class="hljs bash">$ vi /opt/hadoop/etc/hadoop/workershdss7-61hdss7-62hdss7-63</code></pre><h4 id="5-分发文件到节点"><a href="#5-分发文件到节点" class="headerlink" title="5.分发文件到节点"></a>5.分发文件到节点</h4><p>把环境变量文件<code>/etc/profile.d/hadoop.sh</code>，<code>/opt/hadoop-3.2.0</code>拷贝到hdss7-62和hdss7-63</p><pre><code class="hljs bash"><span class="hljs-comment"># java脚本.</span>$ rsync -av /etc/profile.d/java.sh hdss7-62:/etc/profile.d/java.sh$ rsync -av /etc/profile.d/java.sh hdss7-63:/etc/profile.d/java.sh<span class="hljs-comment"># hadoop.sh脚本.</span>$ rsync -av /etc/profile.d/hadoop.sh hdss7-62:/etc/profile.d/hadoop.sh$ rsync -av /etc/profile.d/hadoop.sh hdss7-63:/etc/profile.d/hadoop.sh<span class="hljs-comment"># hadoop文件夹.</span>$ rsync -av /opt/hadoop-3.2.1/ hdss7-62:/opt/hadoop-3.2.1/$ rsync -av /opt/hadoop-3.2.1/ hdss7-63:/opt/hadoop-3.2.1/<span class="hljs-comment"># 在hdss7-62和hdss7-63节点上使环境生效.</span>$ <span class="hljs-built_in">source</span> /etc/profile<span class="hljs-comment"># 在hdss7-62和hdss7-63节点上创建hadoop文件夹.</span>$ mkdir -p /opt/datas/hadoop</code></pre><h4 id="6-启动hadoop"><a href="#6-启动hadoop" class="headerlink" title="6.启动hadoop"></a>6.启动hadoop</h4><p>初始化hadoop data</p><pre><code class="hljs bash">$ hdfs namenode -format</code></pre><p>启动和停止命令</p><pre><code class="hljs bash">[root@hdss7-61 opt]<span class="hljs-comment"># cd /opt/hadoop/</span>$ sbin/start-all.sh$ sbin/stop-all.sh</code></pre><p>访问网址查看hadoop:</p><pre><code class="hljs bash">http://10.4.7.61:50070/</code></pre><img src="/2021/01/05/hadoop-3-2-1-start/001.png" alt="Datanode-info" style="zoom:50%;"><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spark的Standalone模式配置</title>
    <link href="/2021/01/04/spark-standalone/"/>
    <url>/2021/01/04/spark-standalone/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Spark的Standalone模式配置"><a href="#Spark的Standalone模式配置" class="headerlink" title="Spark的Standalone模式配置"></a>Spark的Standalone模式配置</h3><h4 id="1-主机环境配置"><a href="#1-主机环境配置" class="headerlink" title="1.主机环境配置"></a>1.主机环境配置</h4><ul><li>Linux环境3个节点</li><li>3个节点网络互通</li><li>3个节点均可连接外网</li></ul><pre><code class="hljs bash">$ vi /etc/hosts10.4.7.61 hdss7-61 hdss7-61.host.com10.4.7.62 hdss7-62 hdss7-62.host.com10.4.7.63 hdss7-63 hdss7-63.host.com</code></pre><h4 id="2-master节点配置"><a href="#2-master节点配置" class="headerlink" title="2.master节点配置"></a>2.master节点配置</h4><pre><code class="hljs bash">[root@hdss7-61 opt]<span class="hljs-comment"># cd /opt/</span><span class="hljs-comment"># 创建spark安装目录.</span>[root@hdss7-61 opt]<span class="hljs-comment"># mkdir spark-standalone</span>[root@hdss7-61 opt]<span class="hljs-comment"># cd src/</span>[root@hdss7-61 src]<span class="hljs-comment"># ls</span>jdk-8u221-linux-x64.tar.gz  spark-3.0.0-bin-hadoop3.2.tgz<span class="hljs-comment"># 解压spark包.</span>[root@hdss7-61 src]<span class="hljs-comment"># tar -zxvf spark-3.0.0-bin-hadoop3.2.tgz -C /opt/spark-standalone/</span>......[root@hdss7-61 src]<span class="hljs-comment"># cd /opt/spark-standalone/</span>[root@hdss7-61 spark-standalone]<span class="hljs-comment"># ls</span>spark-3.0.0-bin-hadoop3.2</code></pre><p>修改配置文件</p><pre><code class="hljs bash">[root@hdss7-61 spark-standalone]<span class="hljs-comment"># cd spark-3.0.0-bin-hadoop3.2/</span>[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># ls</span>bin  conf  data  examples  jars  kubernetes  LICENSE  licenses  NOTICE  python  R  README.md  RELEASE  sbin  yarn[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># cd conf/</span>[root@hdss7-61 conf]<span class="hljs-comment"># ls</span>fairscheduler.xml.template  log4j.properties.template  metrics.properties.template  slaves.template  spark-defaults.conf.template  spark-env.sh.template<span class="hljs-comment"># 将slaves.template文件拷贝一份成 -&gt; slaves</span>[root@hdss7-61 conf]<span class="hljs-comment"># cp slaves.template slaves</span>[root@hdss7-61 conf]<span class="hljs-comment"># ll</span>总用量 40-rw-r--r-- 1 1000 1000 1105 6月   6 2020 fairscheduler.xml.template-rw-r--r-- 1 1000 1000 2023 6月   6 2020 log4j.properties.template-rw-r--r-- 1 1000 1000 9141 6月   6 2020 metrics.properties.template-rw-r--r-- 1 root root  865 1月   5 03:48 slaves-rw-r--r-- 1 1000 1000  865 6月   6 2020 slaves.template-rw-r--r-- 1 1000 1000 1292 6月   6 2020 spark-defaults.conf.template-rwxr-xr-x 1 1000 1000 4344 6月   6 2020 spark-env.sh.template[root@hdss7-61 conf]<span class="hljs-comment"># vi slaves</span><span class="hljs-comment"># A Spark Worker will be started on each of the machines listed below.</span><span class="hljs-comment"># localhost</span>hdss7-61hdss7-62hdss7-63</code></pre><p>配置master节点</p><pre><code class="hljs bash">[root@hdss7-61 conf]<span class="hljs-comment"># cp spark-env.sh.template spark-env.sh</span><span class="hljs-comment"># 在spark-env.sh最的加上如下配置.</span>[root@hdss7-61 conf]<span class="hljs-comment"># vi spark-env.sh</span><span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/soft/jdk1.8.0_221SPARK_MASTER_HOST=hdss7-61SPARK_MASTER_PORT=7077</code></pre><h4 id="3-从节点配置"><a href="#3-从节点配置" class="headerlink" title="3.从节点配置"></a>3.从节点配置</h4><pre><code class="hljs bash"><span class="hljs-comment"># 在3个节点都安装rsync.</span><span class="hljs-comment"># sudo yum install rsync</span><span class="hljs-comment"># 从主节点分发spark文件到从节点.</span><span class="hljs-comment"># rsync -av spark-standalone/ hdss7-62:/opt/spark-standalone/</span><span class="hljs-comment"># rsync -av spark-standalone/ hdss7-63:/opt/spark-standalone/</span></code></pre><h4 id="4-配置免密登录"><a href="#4-配置免密登录" class="headerlink" title="4.配置免密登录"></a>4.配置免密登录</h4><pre><code class="hljs bash">[root@hdss7-61 ~]<span class="hljs-comment"># cd ~/.ssh/</span>[root@hdss7-61 .ssh]<span class="hljs-comment"># ssh-keygen -t rsa</span>[root@hdss7-61 .ssh]<span class="hljs-comment"># ssh-copy-id hdss7-61</span>[root@hdss7-61 .ssh]<span class="hljs-comment"># ssh-copy-id hdss7-62</span>[root@hdss7-61 .ssh]<span class="hljs-comment"># ssh-copy-id hdss7-63</span></code></pre><h4 id="4-启动集群"><a href="#4-启动集群" class="headerlink" title="4.启动集群"></a>4.启动集群</h4><pre><code class="hljs bash">[root@hdss7-61 opt]<span class="hljs-comment"># cd spark-standalone/spark-3.0.0-bin-hadoop3.2/</span><span class="hljs-comment"># 启动命令.</span>[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># sbin/start-all.sh </span>starting org.apache.spark.deploy.master.Master, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.master.Master-1-hdss7-61.host.com.outhdss7-62: starting org.apache.spark.deploy.worker.Worker, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.worker.Worker-1-hdss7-62.host.com.outhdss7-63: starting org.apache.spark.deploy.worker.Worker, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.worker.Worker-1-hdss7-63.host.com.outhdss7-61: starting org.apache.spark.deploy.worker.Worker, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.worker.Worker-1-hdss7-61.host.com.out<span class="hljs-comment"># 查看进程.</span>[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># jps</span>54805 Worker54682 Master55630 Jps</code></pre><p>查看UI控制台</p><pre><code class="hljs bash">http://10.4.7.61:8080/</code></pre><img src="/2021/01/04/spark-standalone/001.png" alt="master-slave-ui" style="zoom:50%;"><h4 id="5-提交应用"><a href="#5-提交应用" class="headerlink" title="5.提交应用"></a>5.提交应用</h4><pre><code class="hljs bash">[root@hdss7-61 ~]<span class="hljs-comment"># cd /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2</span><span class="hljs-comment"># 提交应用命令(注意jar相对路径).</span><span class="hljs-comment"># --class: Spark程序中包含主函数的类.</span><span class="hljs-comment"># --master: Spark程序运行的模式(环境).</span><span class="hljs-comment"># [application-jar]: 打包好的应用jar.</span><span class="hljs-comment"># [application-arguments]: 命令行参数(这里是10).</span>bin/spark-submit \--class org.apache.spark.examples.SparkPi \--master spark://hdss7-61:7077 \./examples/jars/spark-examples_2.12-3.0.0.jar \10......21/01/05 04:36:33 INFO DAGScheduler: ResultStage 0 (reduce at SparkPi.scala:38) finished <span class="hljs-keyword">in</span> 3.819 s21/01/05 04:36:33 INFO DAGScheduler: Job 0 is finished. Cancelling potential speculative or zombie tasks <span class="hljs-keyword">for</span> this job21/01/05 04:36:33 INFO TaskSchedulerImpl: Removed TaskSet 0.0, whose tasks have all completed, from pool 21/01/05 04:36:33 INFO TaskSchedulerImpl: Killing all running tasks <span class="hljs-keyword">in</span> stage 0: Stage finished21/01/05 04:36:33 INFO DAGScheduler: Job 0 finished: reduce at SparkPi.scala:38, took 4.022366 sPi is roughly 3.141883141883141721/01/05 04:36:33 INFO SparkUI: Stopped Spark web UI at http://hdss7-61:404021/01/05 04:36:33 INFO StandaloneSchedulerBackend: Shutting down all executors.......<span class="hljs-comment"># 执行结果:</span>Pi is roughly 3.1418831418831417</code></pre><h4 id="6-配置历史服务"><a href="#6-配置历史服务" class="headerlink" title="6.配置历史服务"></a>6.配置历史服务</h4><p>修改文件<code>spark-defaults.conf</code>:</p><pre><code class="hljs xml">$ vi /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/conf/spark-defaults.confspark.eventLog.enabled           truespark.eventLog.dir               hdfs://hdss7-61:9000/directory</code></pre><p>端口号是<code>$HADOOP_HOME/etc/hadoop/core-site.xml</code>文件中的配置的端口号:</p><pre><code class="hljs xaml">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;?xml-stylesheet type&#x3D;&quot;text&#x2F;xsl&quot; href&#x3D;&quot;configuration.xsl&quot;?&gt;&lt;!-- Put site-specific property overrides in this file. --&gt;&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;fs.default.name&lt;&#x2F;name&gt;        &lt;value&gt;hdfs:&#x2F;&#x2F;hdss7-61:9000&lt;&#x2F;value&gt;    &lt;&#x2F;property&gt;    &lt;property&gt;        &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;        &lt;value&gt;&#x2F;opt&#x2F;datas&#x2F;hadoop&#x2F;tmp&lt;&#x2F;value&gt;    &lt;&#x2F;property&gt;&lt;&#x2F;configuration&gt;</code></pre><p>此时,要启动hadoop集群,在hdfs中创建 <code>directory</code>文件夹.</p><pre><code class="hljs bash">$ sbin/start-all.sh<span class="hljs-comment"># 或者</span>$ sbin/start-dfs.sh$ hadoop fs -mkdir /directory</code></pre><p>修改<code>vi /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/conf/spark-env.sh</code></p><pre><code class="hljs sh"><span class="hljs-built_in">export</span> SPARK_HISTORY_OPTS=<span class="hljs-string">&quot;-Dspark.history.ui.port=18080 -Dspark.history.fs.logDirectory=hdfs://hdss7-61:9000/directory -Dspark.history.retainedApplications=30&quot;</span><span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/soft/jdk1.8.0_221SPARK_MASTER_HOST=hdss7-61SPARK_MASTER_PORT=7077</code></pre><p>分发上述修改文件到节点hdss7-62和hdss7-63上.</p><p>重启启动spark集群和历史服务.</p><pre><code class="hljs bash">$ sbin/start-all.sh$ sbin/start-history-server.sh</code></pre><p>重新执行任务</p><pre><code class="hljs bash">bin/spark-submit \--class org.apache.spark.examples.SparkPi \--master spark://hdss7-61:7077 \./examples/jars/spark-examples_2.12-3.0.0.jar \10</code></pre><p>访问网址</p><pre><code class="hljs bash">http://10.4.7.61:18080/</code></pre><img src="/2021/01/04/spark-standalone/002.png" alt="spark-history" style="zoom:50%;"><h4 id="7-关闭服务"><a href="#7-关闭服务" class="headerlink" title="7.关闭服务"></a>7.关闭服务</h4><pre><code class="hljs bash"><span class="hljs-comment"># 关闭spark.</span>$ <span class="hljs-built_in">cd</span> /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/$ sbin/stop-all.sh$ sbin/stop-history-server.sh<span class="hljs-comment"># 关闭hadoop.</span>$ <span class="hljs-built_in">cd</span> /opt/hadoop$ sbin/stop-all.sh<span class="hljs-comment"># 查看进程.</span>$ jps66601 Jps</code></pre><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>spark</tag>
      
      <tag>standalone</tag>
      
      <tag>master</tag>
      
      <tag>slave</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spark的local环境安装</title>
    <link href="/2021/01/03/spark-centos-started/"/>
    <url>/2021/01/03/spark-centos-started/</url>
    
    <content type="html"><![CDATA[<h3 id="Spark的local环境安装"><a href="#Spark的local环境安装" class="headerlink" title="Spark的local环境安装"></a>Spark的local环境安装</h3><h4 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h4><p>前提</p><ul><li>macOS Big Sur 11.1(主机环境)</li><li>VMware Fusion12以上版本(与macOS Big Sur 11.1兼容)</li><li>centos7虚拟环境</li></ul><h4 id="2-jdk安装"><a href="#2-jdk安装" class="headerlink" title="2.jdk安装"></a>2.jdk安装</h4><pre><code class="hljs bash">$ tar -zxvf /opt/src/jdk-8u221-linux-x64.tar.gz -C /usr/<span class="hljs-built_in">local</span>/soft/</code></pre><p>配置JAVA_HOME环境变量</p><pre><code class="hljs bash">$ vi .bash_profile<span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/soft/jdk1.8.0_221PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HOME</span>/binPATH=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="hljs-variable">$PATH</span><span class="hljs-built_in">export</span> PATH</code></pre><p>使jdk生效</p><pre><code class="hljs bash"><span class="hljs-built_in">source</span> .bash_profile<span class="hljs-comment"># 查看版本.</span>$ java -versionjava version <span class="hljs-string">&quot;1.8.0_221&quot;</span>Java(TM) SE Runtime Environment (build 1.8.0_221-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)</code></pre><h4 id="3-spark安装"><a href="#3-spark安装" class="headerlink" title="3.spark安装"></a>3.spark安装</h4><pre><code class="hljs bash">$ tar -zxvf src/spark-3.0.0-bin-hadoop3.2.tgz -C /opt/<span class="hljs-comment"># 建立软连接.</span>$ ln -s /opt/spark-3.0.0-bin-hadoop3.2/ /opt/spark-local$ ll /opt/总用量 0drwxr-xr-x  2 root root  22 1月   4 06:26 datasdrwxr-xr-x 13 1000 1000 211 6月   6 2020 spark-3.0.0-bin-hadoop3.2lrwxrwxrwx  1 root root  31 1月   4 06:08 spark-local -&gt; /opt/spark-3.0.0-bin-hadoop3.2/drwxr-xr-x  2 root root  77 1月   4 06:18 src<span class="hljs-comment"># 启动spark.</span><span class="hljs-comment"># cd /opt/spark-local/</span>[root@hdss7-61 spark-local]<span class="hljs-comment"># bin/spark-shell </span>21/01/04 06:22:25 WARN NativeCodeLoader: Unable to load native-hadoop library <span class="hljs-keyword">for</span> your platform... using builtin-java classes <span class="hljs-built_in">where</span> applicableUsing Spark<span class="hljs-string">&#x27;s default log4j profile: org/apache/spark/log4j-defaults.properties</span><span class="hljs-string">Setting default log level to &quot;WARN&quot;.</span><span class="hljs-string">To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</span><span class="hljs-string">Spark context Web UI available at http://10.4.7.61:4040</span><span class="hljs-string">Spark context available as &#x27;</span>sc<span class="hljs-string">&#x27; (master = local[*], app id = local-1609712551595).</span><span class="hljs-string">Spark session available as &#x27;</span>spark<span class="hljs-string">&#x27;.</span><span class="hljs-string">Welcome to</span><span class="hljs-string">      ____              __</span><span class="hljs-string">     / __/__  ___ _____/ /__</span><span class="hljs-string">    _\ \/ _ \/ _ `/ __/  &#x27;</span>_/   /___/ .__/\_,_/_/ /_/\_\   version 3.0.0      /_/         Using Scala version 2.12.10 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_221)Type <span class="hljs-keyword">in</span> expressions to have them evaluated.Type :<span class="hljs-built_in">help</span> <span class="hljs-keyword">for</span> more information.</code></pre><h4 id="4-spark程序验证"><a href="#4-spark程序验证" class="headerlink" title="4.spark程序验证"></a>4.spark程序验证</h4><p>建立数据文件</p><pre><code class="hljs bash">$ vi /opt/datas/word.txt Hello sparkHello scalaHello sparkHello scalaHello spark</code></pre><p>在spark的命令行中输入:</p><pre><code class="hljs scala"><span class="hljs-comment">// 测试spark是否可用.</span>scala&gt; <span class="hljs-keyword">var</span> i = <span class="hljs-number">10</span>i: <span class="hljs-type">Int</span> = <span class="hljs-number">10</span><span class="hljs-comment">// 统计word.txt中的单词个数.</span>scala&gt; sc.textFile(<span class="hljs-string">&quot;/opt/datas/word.txt&quot;</span>).flatMap(_.split(<span class="hljs-string">&quot; &quot;</span>)).map((_,<span class="hljs-number">1</span>)).reduceByKey(_+_).collectres0: <span class="hljs-type">Array</span>[(<span class="hljs-type">String</span>, <span class="hljs-type">Int</span>)] = <span class="hljs-type">Array</span>((scala,<span class="hljs-number">2</span>), (<span class="hljs-type">Hello</span>,<span class="hljs-number">5</span>), (spark,<span class="hljs-number">3</span>))</code></pre><h4 id="5-spark-UI"><a href="#5-spark-UI" class="headerlink" title="5.spark UI"></a>5.spark UI</h4><p>访问UI网址:</p><pre><code class="hljs html">http://10.4.7.61:4040/</code></pre><p><img src="/2021/01/03/spark-centos-started/001.png" alt="spark-ui"></p><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>spark</tag>
      
      <tag>centos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Idea中scala配置</title>
    <link href="/2021/01/03/scala-idea-config/"/>
    <url>/2021/01/03/scala-idea-config/</url>
    
    <content type="html"><![CDATA[<h3 id="Idea中scala配置"><a href="#Idea中scala配置" class="headerlink" title="Idea中scala配置"></a>Idea中scala配置</h3><h4 id="1-scala下载"><a href="#1-scala下载" class="headerlink" title="1.scala下载"></a>1.scala下载</h4><p>访问官网下载</p><pre><code class="hljs bash">https://www.scala-lang.org/download/all.html</code></pre><p>以版本:scala-2.12.11为例</p><p>解压到指定文件夹.</p><pre><code class="hljs bash">tar xf scala-2.12.11.tgz -C ~/Documents/software% <span class="hljs-built_in">cd</span> ~/Documents/software% lsscala-2.12.11</code></pre><h4 id="2-idea配置"><a href="#2-idea配置" class="headerlink" title="2.idea配置"></a>2.idea配置</h4><p>idea -&gt; preferences -&gt; Plugins -&gt; scala(搜索) -&gt; 安装scala插件.</p><img src="/2021/01/03/scala-idea-config/001.png" alt="plugins-scala" style="zoom:50%;"><p>Installed -&gt; 重启Idea.</p><h4 id="3-项目配置scala"><a href="#3-项目配置scala" class="headerlink" title="3.项目配置scala"></a>3.项目配置scala</h4><p>File -&gt; Project Structure -&gt; Global Libraries -&gt; + -&gt; scala sdk</p><img src="/2021/01/03/scala-idea-config/002.png" alt="scala-sdk" style="zoom:50%;"><p>也可以工程中进行如下操作进行添加scala sdk.</p><img src="/2021/01/03/scala-idea-config/003.png" alt="project-structure" style="zoom:50%;"><h4 id="4-scala测试"><a href="#4-scala测试" class="headerlink" title="4.scala测试"></a>4.scala测试</h4><p>创建hello spark测试scala</p><p>New -&gt; Scala Class -&gt; 文件名 + Object</p><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atg.bigdata.spark.core<span class="hljs-comment">/**</span><span class="hljs-comment"> * scala测试.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * @description:</span><span class="hljs-comment"> * @author: lingchen</span><span class="hljs-comment"> * @date: 2021/1/3</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Test</span> </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;    print(<span class="hljs-string">&quot;Hello spark!&quot;</span>)  &#125;&#125;</code></pre><p>右击启动Test文件(Ctrl + Shift + R)</p><pre><code class="hljs bash">Hello spark!Process finished with <span class="hljs-built_in">exit</span> code 0</code></pre><h4 id="5-WordCount程序"><a href="#5-WordCount程序" class="headerlink" title="5.WordCount程序"></a>5.WordCount程序</h4><p>依赖pom:</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atg-classes<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lc.bigdata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spark-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">spark.version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">spark.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.spark<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spark-core_2.12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>数据准备</p><pre><code class="hljs bash"><span class="hljs-comment"># datas/1.txt</span>Hello WorldHello Spark<span class="hljs-comment"># datas/2.txt</span>Hello WorldHello Spark</code></pre><p>程序</p><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atg.bigdata.spark.core.wc<span class="hljs-keyword">import</span> org.apache.spark.rdd.<span class="hljs-type">RDD</span><span class="hljs-keyword">import</span> org.apache.spark.&#123;<span class="hljs-type">SparkConf</span>, <span class="hljs-type">SparkContext</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 文字统计.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * @description:</span><span class="hljs-comment"> * @author: lingchen</span><span class="hljs-comment"> * @date: 2021/1/3</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Spark01_WordCount</span> </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;    <span class="hljs-comment">// application.</span>    <span class="hljs-comment">// Spark框架.</span>    <span class="hljs-comment">// TODO 建立和Spark框架的连接.</span>    <span class="hljs-keyword">val</span> sparkConf = <span class="hljs-keyword">new</span> <span class="hljs-type">SparkConf</span>().setMaster(<span class="hljs-string">&quot;local&quot;</span>).setAppName(<span class="hljs-string">&quot;WordCount&quot;</span>)    <span class="hljs-keyword">val</span> sc = <span class="hljs-keyword">new</span> <span class="hljs-type">SparkContext</span>(sparkConf)    <span class="hljs-comment">// TODO 执行业务操作.</span>    <span class="hljs-comment">// 1. 读取数据文件,获取一行一行的数据.</span>    <span class="hljs-keyword">val</span> lines: <span class="hljs-type">RDD</span>[<span class="hljs-type">String</span>] = sc.textFile(<span class="hljs-string">&quot;datas&quot;</span>)    <span class="hljs-comment">// 2. 将一行数据进行拆分,形成一个一个的单词.</span>    <span class="hljs-comment">// 扁平化操作. -&gt; 将整体拆分成个体的操作.</span>    <span class="hljs-keyword">val</span> words: <span class="hljs-type">RDD</span>[<span class="hljs-type">String</span>] = lines.flatMap(_.split(<span class="hljs-string">&quot; &quot;</span>))    <span class="hljs-comment">// 3. 将数据根据单词进行分组,便于统计.</span>    <span class="hljs-keyword">val</span> wordGroup: <span class="hljs-type">RDD</span>[(<span class="hljs-type">String</span>, <span class="hljs-type">Iterable</span>[<span class="hljs-type">String</span>])] = words.groupBy(word =&gt; word)    <span class="hljs-comment">// 4. 对分组后的数据进行转换.</span>    <span class="hljs-keyword">val</span> wordToCount = wordGroup.map &#123;      <span class="hljs-keyword">case</span> (word, list) =&gt; &#123;        (word, list.size)      &#125;    &#125;    <span class="hljs-comment">// 5. 将转换结果采集到控制台打印出来.</span>    <span class="hljs-keyword">val</span> array: <span class="hljs-type">Array</span>[(<span class="hljs-type">String</span>, <span class="hljs-type">Int</span>)] = wordToCount.collect()    <span class="hljs-comment">// (Hello,4)</span>    <span class="hljs-comment">// (World,2)</span>    <span class="hljs-comment">// (Spark,2)</span>    array.foreach(println)    <span class="hljs-comment">// TODO 关闭连接.</span>    sc.stop()  &#125;&#125;</code></pre><p>运行程序</p><pre><code class="hljs bash">(Hello,4)(World,2)(Spark,2)</code></pre><h4 id="6-Idea变量配置"><a href="#6-Idea变量配置" class="headerlink" title="6.Idea变量配置"></a>6.Idea变量配置</h4><p>在 IDEA 编写 Scala 时，使用 <code>cmd</code> + <code>option</code> + <code>v</code> 自动生成变量时，默认并不会补充变量类型</p><p>cmd + option + v -&gt; setting -&gt; local definition -&gt; 勾上.</p><p>在变量语句后,输入.var + enter -&gt; 自动补全变量名(包括变量类型)</p><h4 id="7-WordCount优化"><a href="#7-WordCount优化" class="headerlink" title="7.WordCount优化"></a>7.WordCount优化</h4><p>Spark方法实现</p><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atg.bigdata.spark.core.wc<span class="hljs-keyword">import</span> org.apache.spark.rdd.<span class="hljs-type">RDD</span><span class="hljs-keyword">import</span> org.apache.spark.&#123;<span class="hljs-type">SparkConf</span>, <span class="hljs-type">SparkContext</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 文字统计(Spark优化).</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * @description:</span><span class="hljs-comment"> * @author: lingchen</span><span class="hljs-comment"> * @date: 2021/1/3</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Spark03_WordCount</span> </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;    <span class="hljs-comment">// 建立和Spark框架的连接.</span>    <span class="hljs-keyword">val</span> sparkConf = <span class="hljs-keyword">new</span> <span class="hljs-type">SparkConf</span>().setMaster(<span class="hljs-string">&quot;local&quot;</span>).setAppName(<span class="hljs-string">&quot;WordCount&quot;</span>)    <span class="hljs-keyword">val</span> sc = <span class="hljs-keyword">new</span> <span class="hljs-type">SparkContext</span>(sparkConf)    <span class="hljs-comment">// 执行业务操作.</span>    <span class="hljs-comment">// 1. 读取数据文件,获取一行一行的数据.</span>    <span class="hljs-keyword">val</span> lines: <span class="hljs-type">RDD</span>[<span class="hljs-type">String</span>] = sc.textFile(<span class="hljs-string">&quot;datas&quot;</span>)    <span class="hljs-comment">// 2. 将一行数据进行拆分,形成一个一个的单词.</span>    <span class="hljs-comment">// 扁平化操作. -&gt; 将整体拆分成个体的操作.</span>    <span class="hljs-keyword">val</span> words: <span class="hljs-type">RDD</span>[<span class="hljs-type">String</span>] = lines.flatMap(_.split(<span class="hljs-string">&quot; &quot;</span>))    <span class="hljs-comment">// 3: 将单词次数加入.</span>    <span class="hljs-keyword">val</span> wordToOne = words.map(      word =&gt; (word, <span class="hljs-number">1</span>)    )    <span class="hljs-comment">// spark优化:</span>    <span class="hljs-comment">// 4 Spark框架提供了更多的功能,可以将分组和聚合使用一个方法实现.</span>    <span class="hljs-keyword">val</span> wordToCount: <span class="hljs-type">RDD</span>[(<span class="hljs-type">String</span>, <span class="hljs-type">Int</span>)] = wordToOne.reduceByKey(_ + _)    <span class="hljs-comment">// 5. 将转换结果采集到控制台打印出来.</span>    <span class="hljs-keyword">val</span> array: <span class="hljs-type">Array</span>[(<span class="hljs-type">String</span>, <span class="hljs-type">Int</span>)] = wordToCount.collect()    <span class="hljs-comment">// (Hello,4)</span>    <span class="hljs-comment">// (World,2)</span>    <span class="hljs-comment">// (Spark,2)</span>    array.foreach(println)    <span class="hljs-comment">// 关闭连接.</span>    sc.stop()  &#125;&#125;</code></pre><p>程序运行:</p><pre><code class="hljs bash">(Hello,4)(World,2)(Spark,2)</code></pre><h4 id="8-日志配置"><a href="#8-日志配置" class="headerlink" title="8.日志配置"></a>8.日志配置</h4><p>为了在控制台不显示过多日志<br>配置log4j.properties</p><pre><code class="hljs properties"><span class="hljs-meta">log4j.rootCategory</span>=<span class="hljs-string">ERROR, console</span><span class="hljs-meta">log4j.appender.console</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><span class="hljs-meta">log4j.appender.console.target</span>=<span class="hljs-string">System.err</span><span class="hljs-meta">log4j.appender.console.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><span class="hljs-meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">%d&#123;yy/MM/dd HH:mm:ss&#125; %p %c&#123;1&#125;: %m%n</span><span class="hljs-comment"># Set the default spark-shell log level to ERROR. When running the spark-shell,</span><span class="hljs-comment"># the log level for this class is used to overwrite the root logger&#x27;s log level, so that</span><span class="hljs-comment"># the user can have different defaults for the shell and regular Spark apps.</span><span class="hljs-meta">log4j.logger.org.apache.spark.repl.Main</span>=<span class="hljs-string">ERROR</span><span class="hljs-comment"># Settings to quiet third party logs that are too verbose</span><span class="hljs-meta">log4j.logger.org.spark_project.jetty</span>=<span class="hljs-string">ERROR</span><span class="hljs-meta">log4j.logger.org.spark_project.jetty.util.component.AbstractLifeCycle</span>=<span class="hljs-string">ERROR</span><span class="hljs-meta">log4j.logger.org.apache.spark.repl.SparkIMain$exprTyper</span>=<span class="hljs-string">ERROR</span><span class="hljs-meta">log4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter</span>=<span class="hljs-string">ERROR</span><span class="hljs-meta">log4j.logger.org.apache.parquet</span>=<span class="hljs-string">ERROR</span><span class="hljs-meta">log4j.logger.parquet</span>=<span class="hljs-string">ERROR</span><span class="hljs-comment"># SPARK-9183: Settings to avoid annoying messages when looking up nonexistent UDFs in SparkSQL with Hive support</span><span class="hljs-meta">log4j.logger.org.apache.hadoop.hive.metastore.RetryingHMSHandler</span>=<span class="hljs-string">FATAL</span><span class="hljs-meta">log4j.logger.org.apache.hadoop.hive.ql.exec.FunctionRegistry</span>=<span class="hljs-string">ERROR</span></code></pre><p><strong><u>Ps:本文仅为学习记录,仅供学习与参考.</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>idea</tag>
      
      <tag>scala</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Keycloak安装使用</title>
    <link href="/2020/12/22/keycloak-getting-started/"/>
    <url>/2020/12/22/keycloak-getting-started/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Keycloak安装使用"><a href="#Keycloak安装使用" class="headerlink" title="Keycloak安装使用"></a>Keycloak安装使用</h3><h4 id="1-docker安装"><a href="#1-docker安装" class="headerlink" title="1.docker安装"></a>1.docker安装</h4><pre><code class="hljs bash">% docker run -p 8180:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:12.0.1% docker psCONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS              PORTS                              NAMES20ae5093ed27        quay.io/keycloak/keycloak:12.0.1   <span class="hljs-string">&quot;/opt/jboss/tools/do…&quot;</span>   17 minutes ago      Up 17 minutes       8443/tcp, 0.0.0.0:8180-&gt;8080/tcp   interesting_gates</code></pre><p>访问网址:</p><pre><code class="hljs bash">http://localhost:8180</code></pre><p>用户名:admin<br>密码:admin</p><h4 id="2-创建realm"><a href="#2-创建realm" class="headerlink" title="2.创建realm"></a>2.创建realm</h4><p>Add realm -&gt; 填入名称:lc-myrealm -&gt; Create</p><p><img src="/2020/12/22/keycloak-getting-started/001.png" alt="realm-create"></p><p>Manager -&gt; Users -&gt; Add User</p><p><img src="/2020/12/22/keycloak-getting-started/002.png" alt="add-user"></p><p>输入用户名:</p><p><img src="/2020/12/22/keycloak-getting-started/003.png" alt="user-info"></p><p>设置新建用户lc-myuser的认证信息</p><ul><li>Credentials</li><li>Set Password (Aa123456)</li><li>Click <code>ON</code> next to <code>Temporary</code> to prevent having to update password on first login</li></ul><p><img src="/2020/12/22/keycloak-getting-started/004.png" alt="credentials"></p><p>访问网址:(网址中的lc-myrealm为上述创建的realm名称)</p><pre><code class="hljs bash">http://localhost:8180/auth/realms/lc-myrealm/account</code></pre><p>输入用户名:lc-myuser<br>密码:Aa123456</p><p><img src="/2020/12/22/keycloak-getting-started/005.png" alt="myuser-login"></p><p>在Personal Info中完善信息,输入邮箱:</p><p><img src="/2020/12/22/keycloak-getting-started/006.png" alt="email"></p><h4 id="3-配置第一个app"><a href="#3-配置第一个app" class="headerlink" title="3.配置第一个app"></a>3.配置第一个app</h4><p>访问地址:</p><pre><code class="hljs bash">http://localhost:8180/auth/admin/</code></pre><p>Clients -&gt; Create</p><p><img src="/2020/12/22/keycloak-getting-started/007.png" alt="client-create"></p><ul><li>Client ID: 随意</li><li>Root URL: 一个服务访问地址<br>该相关服务需要接入keycloak服务,此处使用官方提供的服务接口.</li></ul><p><img src="/2020/12/22/keycloak-getting-started/008.png" alt="client-info"></p><p>保存后,访问<code>https://www.keycloak.org/app/</code></p><p>输入URL, Realm和Client,此处均为上述创建的名称.</p><p><img src="/2020/12/22/keycloak-getting-started/009.png" alt="app-access"></p><p>点击 sign in<br>会出现登录成功后信息.</p><p><img src="/2020/12/22/keycloak-getting-started/010.png" alt="login-in"></p><h4 id="4-spring-boot项目集成"><a href="#4-spring-boot项目集成" class="headerlink" title="4.spring-boot项目集成"></a>4.spring-boot项目集成</h4><h5 id="Pom依赖配置"><a href="#Pom依赖配置" class="headerlink" title="Pom依赖配置"></a>Pom依赖配置</h5><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>eureka<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Eureka project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Hoxton.SR8<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">logback-gelf.version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">logback-gelf.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">keycloak.version</span>&gt;</span>12.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">keycloak.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--eureka server config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--logback gelf config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.siegmar<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-gelf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;logback-gelf.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--keycloak config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.keycloak<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>keycloak-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!--keycloak config.--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.keycloak.bom<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>keycloak-adapter-bom<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;keycloak.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h5 id="访问接口"><a href="#访问接口" class="headerlink" title="访问接口"></a>访问接口</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.eureka.controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Keycloak controller.</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/12/23</span><span class="hljs-comment"> */</span><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(&quot;/keycloak&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeycloakController</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * keycloak访问接口.</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@GetMapping(&quot;/index&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">GetKeycloak</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> Arrays.asList(<span class="hljs-string">&quot;Keycloak&quot;</span>,<span class="hljs-string">&quot;lc-myrealm&quot;</span>,<span class="hljs-string">&quot;lc-myuser&quot;</span>);    &#125;&#125;</code></pre><h5 id="application-xml配置"><a href="#application-xml配置" class="headerlink" title="application.xml配置"></a>application.xml配置</h5><pre><code class="hljs xml">server:  port: 8761spring:  application:    name: eurekaeureka:  client:    service-url:      defaultZone: http://localhost:8761/eureka/,http://localhost:8762/eureka/    register-with-eureka: false    fetch-registry: falsekeycloak:  auth-server-url: http://127.0.0.1:8180/auth  realm: lc-myrealm  public-client: true  resource: lc-eureka  security-constraints:    - authRoles:        - lc-myrole      securityCollections:        - patterns:            - /*</code></pre><h5 id="keycloak配置"><a href="#keycloak配置" class="headerlink" title="keycloak配置"></a>keycloak配置</h5><p>Clients: lc-eureka</p><p><img src="/2020/12/22/keycloak-getting-started/011.png" alt="client-lc-eureka"></p><p>role: lc-myrole</p><p><img src="/2020/12/22/keycloak-getting-started/012.png" alt="role-lc-myrole"></p><p>role绑定用户:</p><p><img src="/2020/12/22/keycloak-getting-started/013.png" alt="role-user"></p><p>访问网址</p><p><code>http://localhost:8761/keycloak/index</code></p><p><img src="/2020/12/22/keycloak-getting-started/014.png" alt="user-login" style="zoom:50%;"></p><p>登录后,可以跳转到正确路径(用户名:lc-myuser, 密码:Aa123456)</p><p><img src="/2020/12/22/keycloak-getting-started/015.png" alt="keycloak-index"></p><p><strong><u>PS:本文仅为学习记录,仅供学习与参考!</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>keycloak</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Graylog安装</title>
    <link href="/2020/12/21/graylog-install/"/>
    <url>/2020/12/21/graylog-install/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Graylog安装"><a href="#Graylog安装" class="headerlink" title="Graylog安装"></a>Graylog安装</h3><h4 id="1-使用Docker安装Graylog"><a href="#1-使用Docker安装Graylog" class="headerlink" title="1.使用Docker安装Graylog"></a>1.使用Docker安装Graylog</h4><p>安装mongodb:</p><pre><code class="hljs bash">% docker run --name mongo -d mongo:4.2</code></pre><p>安装elasticsearch:</p><pre><code class="hljs bash">% docker run --name elasticsearch \    -e <span class="hljs-string">&quot;http.host=0.0.0.0&quot;</span> \    -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \    -e <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \    -d docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.0</code></pre><p>安装Graylog:</p><pre><code class="hljs bash">% docker run --name graylog --link mongo --link elasticsearch \    -p 9000:9000 -p 12201:12201 -p 1514:1514 \    -e GRAYLOG_HTTP_EXTERNAL_URI=<span class="hljs-string">&quot;http://127.0.0.1:9000/&quot;</span> \    -d graylog/graylog:4.0</code></pre><p>查看启动结果:</p><pre><code class="hljs bash">% docker psCONTAINER ID        IMAGE                                                      COMMAND                  CREATED             STATUS                    PORTS                                                                      NAMESddf0648f5342        graylog/graylog:4.0                                        <span class="hljs-string">&quot;tini -- /docker-ent…&quot;</span>   14 minutes ago      Up 14 minutes (healthy)   0.0.0.0:1514-&gt;1514/tcp, 0.0.0.0:9000-&gt;9000/tcp, 0.0.0.0:12201-&gt;12201/tcp   graylogf158f7cc60ee        docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.0   <span class="hljs-string">&quot;/tini -- /usr/local…&quot;</span>   20 minutes ago      Up 20 minutes             9200/tcp, 9300/tcp                                                         elasticsearch2c4dfc1947b8        mongo:4.2                                                  <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   31 minutes ago      Up 30 minutes             27017/tcp                                                                  mongo</code></pre><p>访问网址:</p><pre><code class="hljs bash">http://127.0.0.1:9000/<span class="hljs-comment"># 或者:</span>http://127.0.0.1:9000/api/<span class="hljs-comment"># 输入admin,admin进入.</span></code></pre><h4 id="2-使用docker-compose安装"><a href="#2-使用docker-compose安装" class="headerlink" title="2.使用docker-compose安装"></a>2.使用docker-compose安装</h4><pre><code class="hljs bash"><span class="hljs-comment"># 停止所有容器.</span>% docker stop $(docker ps -q)<span class="hljs-comment"># 查看容器.</span>% docker ps<span class="hljs-comment"># 创建目录.</span>% mkdir -p ~/Documents/graylog/conf% <span class="hljs-built_in">cd</span> ~/Documents/graylog/conf</code></pre><p>创建docker-compose.yml文件:</p><p><code>% vi docker-compose.yml</code></p><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2&#x27;</span><span class="hljs-attr">services:</span>  <span class="hljs-comment"># MongoDB: https://hub.docker.com/_/mongo/</span>  <span class="hljs-attr">mongodb:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:4.2</span>  <span class="hljs-comment"># Elasticsearch: https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docker.html</span>  <span class="hljs-attr">elasticsearch:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.0</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">http.host=0.0.0.0</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">transport.host=localhost</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">network.host=0.0.0.0</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span>    <span class="hljs-attr">ulimits:</span>      <span class="hljs-attr">memlock:</span>        <span class="hljs-attr">soft:</span> <span class="hljs-number">-1</span>        <span class="hljs-attr">hard:</span> <span class="hljs-number">-1</span>    <span class="hljs-attr">mem_limit:</span> <span class="hljs-string">1g</span>  <span class="hljs-comment"># Graylog: https://hub.docker.com/r/graylog/graylog/</span>  <span class="hljs-attr">graylog:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">graylog/graylog:4.0</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-comment"># CHANGE ME (must be at least 16 characters)!</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_PASSWORD_SECRET=somepasswordpepper</span>      <span class="hljs-comment"># Password: admin</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:9000/</span>    <span class="hljs-attr">links:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">mongodb:mongo</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch</span>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>    <span class="hljs-attr">depends_on:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">mongodb</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-comment"># Graylog web interface and REST API</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">9000</span><span class="hljs-string">:9000</span>      <span class="hljs-comment"># Syslog TCP</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">1514</span><span class="hljs-string">:1514</span>      <span class="hljs-comment"># Syslog UDP</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">1514</span><span class="hljs-string">:1514/udp</span>      <span class="hljs-comment"># GELF TCP</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">12201</span><span class="hljs-string">:12201</span>      <span class="hljs-comment"># GELF UDP</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">12201</span><span class="hljs-string">:12201/udp</span></code></pre><p>创建并启动容器:</p><pre><code class="hljs bash"><span class="hljs-comment"># 命令窗口打印出启动日志信息.</span>% docker-compose up......graylog_1        | 2020-12-21 13:39:11,784 INFO : org.graylog2.bootstrap.ServerBootstrap - Graylog server up and running.mongodb_1        | 2020-12-21T13:39:11.980+0000 I  SHARDING [conn17] Marking collection graylog.sessions as collection version: &lt;unsharded&gt;</code></pre><p>查看启动容器:</p><pre><code class="hljs bash">% docker-compose ps        Name                      Command                  State                                                                 Ports-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------conf_elasticsearch_1   /tini -- /usr/<span class="hljs-built_in">local</span>/bin/<span class="hljs-keyword">do</span> ...   Up             9200/tcp, 9300/tcpconf_graylog_1         tini -- /docker-entrypoint ...   Up (healthy)   0.0.0.0:12201-&gt;12201/tcp, 0.0.0.0:12201-&gt;12201/udp, 0.0.0.0:1514-&gt;1514/tcp, 0.0.0.0:1514-&gt;1514/udp, 0.0.0.0:9000-&gt;9000/tcpconf_mongodb_1         docker-entrypoint.sh mongod      Up             27017/tcp</code></pre><p>访问Graylog站点:</p><pre><code class="hljs bash">http://127.0.0.1:9000<span class="hljs-comment"># 或者:</span>http://127.0.0.1:9000/api/<span class="hljs-comment"># 输入admin,admin进入.</span></code></pre><h4 id="3-配置Input"><a href="#3-配置Input" class="headerlink" title="3.配置Input"></a>3.配置Input</h4><p>System/Input -&gt; udp -&gt; save</p><p><img src="/2020/12/21/graylog-install/001.png" alt="input-udp"></p><h4 id="4-spring-boot集成Graylog"><a href="#4-spring-boot集成Graylog" class="headerlink" title="4.spring-boot集成Graylog"></a>4.spring-boot集成Graylog</h4><p>配置依赖:logback-gelf</p><pre><code class="hljs bash"><span class="hljs-comment"># github地址:</span>https://github.com/osiegmar/logback-gelf<span class="hljs-comment"># maven地址:</span>https://mvnrepository.com/artifact/de.siegmar/logback-gelf/3.0.0</code></pre><p>添加依赖:</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--logback gelf config.--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.siegmar<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-gelf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>在添加logback.xml文件</p><pre><code class="hljs bash">% <span class="hljs-built_in">cd</span> ~/Documents/fork/springcloud/SpringCloud_Sell/eureka/src/main/resources% vi logback.xml&lt;configuration&gt;    &lt;appender name=<span class="hljs-string">&quot;GELF&quot;</span> class=<span class="hljs-string">&quot;de.siegmar.logbackgelf.GelfUdpAppender&quot;</span>&gt;        &lt;graylogHost&gt;localhost&lt;/graylogHost&gt;        &lt;graylogPort&gt;12201&lt;/graylogPort&gt;    &lt;/appender&gt;    &lt;root level=<span class="hljs-string">&quot;debug&quot;</span>&gt;        &lt;appender-ref ref=<span class="hljs-string">&quot;GELF&quot;</span> /&gt;    &lt;/root&gt;&lt;/configuration&gt;</code></pre><p>启动sample工程.发现控制台日志没有了,但可以在graylog浏览器页面查看.</p><pre><code class="hljs bash">  .   ____          _            __ _ _ /\\ / ___<span class="hljs-string">&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><span class="hljs-string">( ( )\___ | &#x27;</span>_ | <span class="hljs-string">&#x27;_| | &#x27;</span>_ \/ _` | \ \ \ \ \\/  ___)| |_)| | | | | || (_| |  ) ) ) )  <span class="hljs-string">&#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><span class="hljs-string"> =========|_|==============|___/=/_/_/_/</span><span class="hljs-string"> :: Spring Boot ::        (v2.3.5.RELEASE)</span></code></pre><p><img src="/2020/12/21/graylog-install/002.png" alt="graylog-log"></p><h4 id="5-配置spring-boot日志信息"><a href="#5-配置spring-boot日志信息" class="headerlink" title="5.配置spring-boot日志信息"></a>5.配置spring-boot日志信息</h4><p>在logback.xml中配置名称为:consoleLog的appender,并修改日志级别为debug -&gt; info</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;consoleLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>                %d - %msg%n            <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;GELF&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;de.siegmar.logbackgelf.GelfUdpAppender&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">graylogHost</span>&gt;</span>localhost<span class="hljs-tag">&lt;/<span class="hljs-name">graylogHost</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">graylogPort</span>&gt;</span>12201<span class="hljs-tag">&lt;/<span class="hljs-name">graylogPort</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;consoleLog&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GELF&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>重启服务,可以看到控制台打印出启动日志信息.</p><p>如果需要详细的日志信息,则logback.xml配置如下:</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;consoleLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>                %d - %msg%n            <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-comment">&lt;!--simple udp config.--&gt;</span>    <span class="hljs-comment">&lt;!--&lt;appender name=&quot;GELF&quot; class=&quot;de.siegmar.logbackgelf.GelfUdpAppender&quot;&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--    &lt;graylogHost&gt;localhost&lt;/graylogHost&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--    &lt;graylogPort&gt;12201&lt;/graylogPort&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--&lt;/appender&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--advanced udp config.--&gt;</span>    <span class="hljs-comment">&lt;!--https://github.com/osiegmar/logback-gelf/blob/master/examples/advanced_udp.xml--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;GELF&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;de.siegmar.logbackgelf.GelfUdpAppender&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">graylogHost</span>&gt;</span>localhost<span class="hljs-tag">&lt;/<span class="hljs-name">graylogHost</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">graylogPort</span>&gt;</span>12201<span class="hljs-tag">&lt;/<span class="hljs-name">graylogPort</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">maxChunkSize</span>&gt;</span>508<span class="hljs-tag">&lt;/<span class="hljs-name">maxChunkSize</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">useCompression</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">useCompression</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">messageIdSupplier</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;de.siegmar.logbackgelf.MessageIdSupplier&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;de.siegmar.logbackgelf.GelfEncoder&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">originHost</span>&gt;</span>localhost<span class="hljs-tag">&lt;/<span class="hljs-name">originHost</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includeRawMessage</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">includeRawMessage</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includeMarker</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">includeMarker</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includeMdcData</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">includeMdcData</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includeCallerData</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">includeCallerData</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includeRootCauseData</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">includeRootCauseData</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includeLevelName</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">includeLevelName</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">shortPatternLayout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%m%nopex<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">shortPatternLayout</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">fullPatternLayout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">fullPatternLayout</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">numbersAsString</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">numbersAsString</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">staticField</span>&gt;</span>app_name:eureka<span class="hljs-tag">&lt;/<span class="hljs-name">staticField</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">staticField</span>&gt;</span>os_arch:$&#123;os.arch&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">staticField</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">staticField</span>&gt;</span>os_name:$&#123;os.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">staticField</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">staticField</span>&gt;</span>os_version:$&#123;os.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">staticField</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;consoleLog&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GELF&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>在Graylog浏览器中可以使用es语法来查询特定的log日志:</p><pre><code class="hljs bash">message:<span class="hljs-string">&quot;port&quot;</span></code></pre><p><img src="/2020/12/21/graylog-install/003.png" alt="es-log-search"></p><p>也可以使用组合查询:</p><pre><code class="hljs bash">message:<span class="hljs-string">&quot;port&quot;</span> AND <span class="hljs-built_in">source</span>:<span class="hljs-string">&quot;localhost&quot;</span></code></pre><h4 id="6-配置graylog时间"><a href="#6-配置graylog时间" class="headerlink" title="6.配置graylog时间"></a>6.配置graylog时间</h4><p>访问官网配置:</p><pre><code class="hljs html">https://docs.graylog.org/en/4.0/pages/configuration/server.conf.html</code></pre><p>可以搜索timezone</p><pre><code class="hljs html">root_timezone = UTCThe time zone setting of the root user. See this list of valid time zones. Default is UTC.</code></pre><p>配置docker-compose.yml</p><p><code>- GRAYLOG_ROOT_TIMEZONE=Asia/Shanghai</code></p><pre><code class="hljs yaml"><span class="hljs-attr">graylog:</span>  <span class="hljs-attr">image:</span> <span class="hljs-string">graylog/graylog:4.0</span>  <span class="hljs-attr">environment:</span>    <span class="hljs-comment"># CHANGE ME (must be at least 16 characters)!</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_PASSWORD_SECRET=somepasswordpepper</span>    <span class="hljs-comment"># Password: admin</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:9000/</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_ROOT_TIMEZONE=Asia/Shanghai</span></code></pre><p>重启docker-compose</p><pre><code class="hljs bash">% docker-compose up -dStarting conf_mongodb_1       ... <span class="hljs-keyword">done</span>Starting conf_elasticsearch_1 ... <span class="hljs-keyword">done</span>Recreating conf_graylog_1     ... <span class="hljs-keyword">done</span></code></pre><p>注意:要重新登录graylog,使时间生效.</p><pre><code class="hljs bash">% docker-compose ps        Name                      Command                  State                                                                 Ports-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------conf_elasticsearch_1   /tini -- /usr/<span class="hljs-built_in">local</span>/bin/<span class="hljs-keyword">do</span> ...   Up             9200/tcp, 9300/tcpconf_graylog_1         tini -- /docker-entrypoint ...   Up (healthy)   0.0.0.0:12201-&gt;12201/tcp, 0.0.0.0:12201-&gt;12201/udp, 0.0.0.0:1514-&gt;1514/tcp, 0.0.0.0:1514-&gt;1514/udp, 0.0.0.0:9000-&gt;9000/tcpconf_mongodb_1         docker-entrypoint.sh mongod      Up             27017/tcp</code></pre><p>重启微服务,在Graylog中查看log,查看时间是否正常.</p><p><img src="/2020/12/21/graylog-install/004.png" alt="graylog-timezone"></p><p>关闭Graylog容器.</p><pre><code class="hljs bash"><span class="hljs-comment"># 停止.</span>% docker-compose stopStopping conf_graylog_1       ... <span class="hljs-keyword">done</span>Stopping conf_mongodb_1       ... <span class="hljs-keyword">done</span>Stopping conf_elasticsearch_1 ... <span class="hljs-keyword">done</span><span class="hljs-comment"># 查看.</span>% docker-compose ps        Name                      Command                State     Ports------------------------------------------------------------------------conf_elasticsearch_1   /tini -- /usr/<span class="hljs-built_in">local</span>/bin/<span class="hljs-keyword">do</span> ...   Exit 143conf_graylog_1         tini -- /docker-entrypoint ...   Exit 143conf_mongodb_1         docker-entrypoint.sh mongod      Exit 0</code></pre><p><strong><u>ps:本文仅为学习记录,仅供学习与参考.</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>graylog</tag>
      
      <tag>mongodb</tag>
      
      <tag>es</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一个serverless程序</title>
    <link href="/2020/12/18/first-serverless-program/"/>
    <url>/2020/12/18/first-serverless-program/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="第一个serverless程序"><a href="#第一个serverless程序" class="headerlink" title="第一个serverless程序"></a>第一个serverless程序</h3><h4 id="1-注册用户"><a href="#1-注册用户" class="headerlink" title="1.注册用户"></a>1.注册用户</h4><p>进入阿里云云开发平台,登录用户.</p><pre><code class="hljs html">https://workbench.aliyun.com</code></pre><p>创建空白应用,本例以NodeJs和FC计算服务为例.</p><p><img src="/2020/12/18/first-serverless-program/001.png" alt="app-list"></p><p>点击应用卡片上的开发部署按钮,进入云端CloudIDE.</p><p><img src="/2020/12/18/first-serverless-program/002.png" alt="app-windows"></p><h4 id="2-编辑程序"><a href="#2-编辑程序" class="headerlink" title="2.编辑程序"></a>2.编辑程序</h4><p>查看readme.md,查看帮助<br>编辑helloworld.js</p><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports.handler = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event, context, callback</span>) </span>&#123;    <span class="hljs-keyword">var</span> request = <span class="hljs-built_in">JSON</span>.parse(event);<span class="hljs-comment">// 请求内容都会存储在 event 中，JSON编码后可遍历查看具体的内容</span>    <span class="hljs-comment">// do sth</span>    <span class="hljs-keyword">var</span> msg = <span class="hljs-string">&#x27;你好，世界！&#x27;</span>;    <span class="hljs-comment">// 返回值格式</span>    <span class="hljs-keyword">var</span> responseObject = &#123;        isBase64Encoded: <span class="hljs-literal">false</span>,<span class="hljs-comment">//与 body 内容是否进行 base64 编码保持一致</span>        statusCode: <span class="hljs-number">200</span>,<span class="hljs-comment">//状态码，根据返回值自行决定适合的状态码</span>        headers: &#123;        <span class="hljs-string">&quot;Content-type&quot;</span>: <span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span><span class="hljs-comment">//根据返回值设置正确的 Content-type</span>        &#125;,        body: msg<span class="hljs-comment">//返回值</span>    &#125;;    callback(<span class="hljs-literal">null</span>, responseObject);<span class="hljs-comment">//返回结果</span>&#125;</code></pre><h4 id="3-编辑api接口"><a href="#3-编辑api接口" class="headerlink" title="3.编辑api接口"></a>3.编辑api接口</h4><p>   /api文件夹中的文件提供服务接口,如helloworld</p><ul><li>data主体: msg</li><li>headers: “Content-type”: “application/json; charset=utf-8”</li><li>body: msg</li></ul><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports.handler = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event, context, callback</span>) </span>&#123;    <span class="hljs-keyword">var</span> request = <span class="hljs-built_in">JSON</span>.parse(event);<span class="hljs-comment">// 请求内容都会存储在 event 中，JSON编码后可遍历查看具体的内容</span>    <span class="hljs-comment">// do sth</span>    <span class="hljs-keyword">var</span> msg = &#123;      <span class="hljs-string">&quot;to&quot;</span>: <span class="hljs-string">&quot;世界&quot;</span>,      <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-string">&quot;lingchen&quot;</span>,      <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;你好啊!&quot;</span>    &#125;;    <span class="hljs-comment">// 返回值格式</span>    <span class="hljs-keyword">var</span> responseObject = &#123;        isBase64Encoded: <span class="hljs-literal">false</span>,<span class="hljs-comment">//与 body 内容是否进行 base64 编码保持一致</span>        statusCode: <span class="hljs-number">200</span>,<span class="hljs-comment">//状态码，根据返回值自行决定适合的状态码</span>        headers: &#123;        <span class="hljs-string">&quot;Content-type&quot;</span>: <span class="hljs-string">&quot;application/json; charset=utf-8&quot;</span><span class="hljs-comment">//根据返回值设置正确的 Content-type</span>        &#125;,        body: msg<span class="hljs-comment">//返回值</span>    &#125;;    callback(<span class="hljs-literal">null</span>, responseObject);<span class="hljs-comment">//返回结果</span>&#125;</code></pre><h4 id="4-编辑index-html"><a href="#4-编辑index-html" class="headerlink" title="4.编辑index.html"></a>4.编辑index.html</h4><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">em</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;to&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">address</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;from&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript">  fetch(<span class="hljs-string">&#x27;/api/helloworld&#x27;</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) </span>&#123;</span><span class="javascript">    <span class="hljs-keyword">return</span> response.json();</span><span class="javascript">  &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">msg</span>) </span>&#123;</span><span class="javascript">    <span class="hljs-built_in">console</span>.log(msg)</span><span class="javascript">    <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#to&quot;</span>).innerText = <span class="hljs-string">&quot;美丽的: &quot;</span> + msg.to;</span><span class="javascript">    <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#message&quot;</span>).innerText = msg.data;</span><span class="javascript">    <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#from&quot;</span>).innerText = <span class="hljs-string">&quot;热爱着你的: &quot;</span> + msg.from;</span>  &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h4><p>点击 CloudIDE 侧边栏 「WB」插件，打开「测试」标签页，在「用户路径」中输入我们刚刚创建的helloworld.js的访问地址 + /helloworld</p><p><code>https://test1yi9nuhejv6wza3cxh7.workbenchapi.com/helloworld</code></p><pre><code class="hljs html">你好，世界！</code></pre><p>访问地址:每次测试或者发布部署后都不一样.</p><h4 id="6-部署"><a href="#6-部署" class="headerlink" title="6.部署"></a>6.部署</h4><p>部署上线前，请务必配置到 serverless.js 文件的 SAFE 列表进行保护</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> SAFE = [  <span class="hljs-string">&#x27;/api&#x27;</span>,  <span class="hljs-string">&#x27;/helloworld.js&#x27;</span>,  <span class="hljs-string">&#x27;/.workbench&#x27;</span>,  <span class="hljs-string">&#x27;/serverless.js&#x27;</span>];</code></pre><p>打开「WB」插件的「部署」标签页，点击「部署」，会弹出部署信息确认，点击「继续部署」开始构建部署，请耐心等待，直到部署完成.</p><p><code>https://test1yi9nuhejv6wza4nran.workbenchapi.com/</code></p><pre><code class="hljs html">美丽的: 世界你好啊!热爱着你的: lingchen</code></pre><h4 id="7-停止服务"><a href="#7-停止服务" class="headerlink" title="7.停止服务"></a>7.停止服务</h4><p>在应用卡片中,不用应用时,请停止服务,防止流量超过免费限制,产生费用.</p><p><img src="/2020/12/18/first-serverless-program/003.png" alt="stop-app"></p><p><strong><u>PS: 本文仅为学习与记录.仅供参考!</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>aliyun</tag>
      
      <tag>serverless</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker微服务镜像推送至阿里云</title>
    <link href="/2020/12/11/aliyun-docker-micro/"/>
    <url>/2020/12/11/aliyun-docker-micro/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h3 id="Docker微服务镜像推送至阿里云"><a href="#Docker微服务镜像推送至阿里云" class="headerlink" title="Docker微服务镜像推送至阿里云"></a>Docker微服务镜像推送至阿里云</h3><h4 id="1-登录阿里云Docker-Registry"><a href="#1-登录阿里云Docker-Registry" class="headerlink" title="1.登录阿里云Docker Registry"></a>1.登录阿里云Docker Registry</h4><p>前提:</p><ul><li>本机安装docker</li><li>本机安装有maven</li></ul><p>登录阿里云docker镜像</p><pre><code class="hljs bash"><span class="hljs-comment"># 登录.</span>% docker login --username=your_name registry.cn-beijing.aliyuncs.com<span class="hljs-comment"># 输入服务密码.</span></code></pre><h4 id="2-打包微服务"><a href="#2-打包微服务" class="headerlink" title="2.打包微服务"></a>2.打包微服务</h4><pre><code class="hljs bash"><span class="hljs-comment"># 在idea命令窗口.</span>% <span class="hljs-built_in">source</span> ~/.bash_profile % mvn clean package -Dmaven.test.skip=<span class="hljs-literal">true</span>...... % ls target classes                                 eureka-0.0.1-SNAPSHOT.jar.original      maven-archivereureka-0.0.1-SNAPSHOT.jar               generated-sources                       maven-status</code></pre><h4 id="3-编写Dockerfile"><a href="#3-编写Dockerfile" class="headerlink" title="3.编写Dockerfile"></a>3.编写Dockerfile</h4><p>在工程根目录下创建Dockerfile文件:</p><pre><code class="hljs bash"><span class="hljs-comment"># 拉取jdk镜像.</span>FROM openjdk:8-alpine<span class="hljs-comment"># 添加微服务jar,并命名为app.jar.</span>ADD target/*.jar app.jar<span class="hljs-comment"># 暴露端口号.</span>EXPOSE 8761<span class="hljs-comment"># 运行jar.</span>ENTRYPOINT [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/app.jar&quot;</span>]</code></pre><h4 id="4-构建微服务docker镜像"><a href="#4-构建微服务docker镜像" class="headerlink" title="4.构建微服务docker镜像"></a>4.构建微服务docker镜像</h4><pre><code class="hljs bash"><span class="hljs-comment"># 镜像路径:registry.cn-beijing.aliyuncs.com/lcyun/</span><span class="hljs-comment"># 镜像名:eureka</span>% docker build -t registry.cn-beijing.aliyuncs.com/lcyun/eureka .......Successfully tagged registry.cn-beijing.aliyuncs.com/lcyun/eureka:latest<span class="hljs-comment"># 查看该镜像.</span>% docker imagesREPOSITORY                                      TAG                 IMAGE ID            CREATED             SIZEregistry.cn-beijing.aliyuncs.com/lcyun/eureka   latest              7a8fa6abf26e        10 seconds ago      155MB</code></pre><h4 id="5-推送镜像"><a href="#5-推送镜像" class="headerlink" title="5.推送镜像"></a>5.推送镜像</h4><pre><code class="hljs bash">% docker push registry.cn-beijing.aliyuncs.com/lcyun/eureka</code></pre><p>访问阿里云镜像仓库,该镜像已推送.</p><p><img src="/2020/12/11/aliyun-docker-micro/001.png" alt="docker-registry"></p><h4 id="6-编写shell脚本"><a href="#6-编写shell脚本" class="headerlink" title="6.编写shell脚本"></a>6.编写shell脚本</h4><p>在工程根目录下创建build.sh文件:</p><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env bash</span>mvn clean package -Dmaven.test.skip=<span class="hljs-literal">true</span>docker build -t registry.cn-beijing.aliyuncs.com/lcyun/eureka .docker push registry.cn-beijing.aliyuncs.com/lcyun/eureka</code></pre><p>启动脚本,一键打包,上传微服务镜像到阿里云仓库</p><pre><code class="hljs bash">% bash build.sh</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>aliyun</tag>
      
      <tag>docker</tag>
      
      <tag>micro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac-vmware中Centos7网络连接</title>
    <link href="/2020/12/10/vmware-mac-centos7/"/>
    <url>/2020/12/10/vmware-mac-centos7/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h3 id="Mac-vmware中Centos7网络连接"><a href="#Mac-vmware中Centos7网络连接" class="headerlink" title="Mac-vmware中Centos7网络连接"></a>Mac-vmware中Centos7网络连接</h3><h4 id="1-虚拟机安装"><a href="#1-虚拟机安装" class="headerlink" title="1.虚拟机安装"></a>1.虚拟机安装</h4><p>前提</p><ul><li>VMware Fusion安装</li><li>Centos7虚拟镜像</li></ul><p>导入Centos7虚拟镜像,</p><p>右击 -&gt; 网络适配器 -&gt; 连接网络适配器 -&gt; 与我的Mac共享</p><p>启动Centos7</p><pre><code class="hljs bash"><span class="hljs-comment"># 用户名与密码.</span>% rootroot</code></pre><h4 id="2-设置主机名"><a href="#2-设置主机名" class="headerlink" title="2.设置主机名"></a>2.设置主机名</h4><pre><code class="hljs bash">% hostnamectl set-hostname hdss7-11.host.com<span class="hljs-comment"># 退出重新登录.</span>% <span class="hljs-built_in">logout</span>rootroot<span class="hljs-comment"># 主机名已变成hdss7-50.</span>[root@hdss7-50 ~]<span class="hljs-comment"># </span></code></pre><h4 id="3-关闭防火墙"><a href="#3-关闭防火墙" class="headerlink" title="3.关闭防火墙"></a>3.关闭防火墙</h4><pre><code class="hljs bash">% sestatus% vi /etc/selinux/configSELINUX=disabled<span class="hljs-comment"># 重启.</span>% reboot<span class="hljs-comment"># 查看.</span>getenforce<span class="hljs-comment"># 关闭防火墙.</span>systemctl status firewalldsystemctl stop firewalldsystemctl <span class="hljs-built_in">disable</span> firewalld.service</code></pre><h4 id="4-配置IP地址"><a href="#4-配置IP地址" class="headerlink" title="4.配置IP地址"></a>4.配置IP地址</h4><p>查看mac本机的vmnet8的网关地址，这个对应NAT模式的网络连接.</p><pre><code class="hljs bash">% <span class="hljs-built_in">cd</span> /Library/Preferences/VMware Fusion/vmnet8<span class="hljs-comment"># 查看和修改nat.conf</span>% cat nat.conf<span class="hljs-comment"># NAT gateway address</span>ip = 10.4.7.2netmask = 255.255.255.0</code></pre><p>修改虚拟机中的文件: ifcfg-ens33</p><pre><code class="hljs bash">[root@hdss7-50 ~]<span class="hljs-comment"># vi /etc/sysconfig/network-scripts/ifcfg-ens33</span>TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens33UUID=8d71fc45-b8dc-42c4-9f8c-65f17323eb5aDEVICE=ens33ONBOOT=yesIPADDR=10.4.7.50NETMASK=255.255.255.0GATEWAY=10.4.7.2DNS1=10.4.7.2<span class="hljs-comment">#DNS1=114.114.114.114</span><span class="hljs-comment"># 自己设置IP: IPADDR=10.4.7.50</span><span class="hljs-comment"># 修改如下内容:</span><span class="hljs-comment"># BOOTPROTO=static</span><span class="hljs-comment"># NETMASK=255.255.255.0</span><span class="hljs-comment"># GATEWAY=10.4.7.2</span><span class="hljs-comment"># DNS1=10.4.7.2</span></code></pre><p>重启network服务</p><pre><code class="hljs bash">% service network restart<span class="hljs-comment"># 或者</span>% systemctl restart network.service</code></pre><p>查看Mac中的wifi中的dns配置,并配置</p><p>wifi -&gt; 打开网络偏好设置 -&gt; 高级 -&gt; DNS</p><pre><code class="hljs bash"><span class="hljs-comment"># dns可以不设</span>10.4.7.11192.168.0.253192.168.1.1</code></pre><h4 id="5-验证上网"><a href="#5-验证上网" class="headerlink" title="5.验证上网"></a>5.验证上网</h4><pre><code class="hljs bash">[root@hdss7-50 ~]<span class="hljs-comment"># ping baidu.com</span>PING baidu.com (220.181.38.148) 56(84) bytes of data.64 bytes from 220.181.38.148 (220.181.38.148): icmp_seq=1 ttl=128 time=7.13 ms64 bytes from 220.181.38.148 (220.181.38.148): icmp_seq=2 ttl=128 time=130 ms64 bytes from 220.181.38.148 (220.181.38.148): icmp_seq=3 ttl=128 time=10.2 ms</code></pre><h4 id="6-安装必须组件"><a href="#6-安装必须组件" class="headerlink" title="6.安装必须组件"></a>6.安装必须组件</h4><pre><code class="hljs bash">[root@hdss7-50 ~]<span class="hljs-comment"># yum install wget net-tools telnet tree nmap sysstat lrzsz dos2unix bind-utils -y</span><span class="hljs-comment"># 查看ip地址:10.4.7.50</span>[root@hdss7-50 ~]<span class="hljs-comment"># ifconfig</span>ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 10.4.7.50  netmask 255.255.255.0  broadcast 10.4.7.255        inet6 fe80::3194:9427:e40b:b2a0  prefixlen 64  scopeid 0x20&lt;link&gt;......</code></pre><h4 id="7-安装docker"><a href="#7-安装docker" class="headerlink" title="7.安装docker"></a>7.安装docker</h4><pre><code class="hljs bash"><span class="hljs-comment"># 通过阿里镜像来安装</span>[root@hdss7-50 ~]<span class="hljs-comment"># curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span>.....等待即可.<span class="hljs-comment"># 查看docker版本.</span>[root@hdss7-50 ~]<span class="hljs-comment"># systemctl start docker</span>[root@hdss7-50 ~]<span class="hljs-comment"># systemctl enable docker</span>Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.[root@hdss7-50 ~]<span class="hljs-comment"># docker info</span>Client: Context:    default Debug Mode: <span class="hljs-literal">false</span> Plugins:  app: Docker App (Docker Inc., v0.9.1-beta3)....[root@hdss7-50 ~]<span class="hljs-comment"># docker --version</span>Docker version 20.10.0, build 7287ab3<span class="hljs-comment"># 修改docker镜像源.</span>[root@hdss7-50 docker]<span class="hljs-comment"># mkdir -p /data/docker</span>[root@hdss7-50 docker]<span class="hljs-comment"># vi /etc/docker/daemon.json</span>&#123;  <span class="hljs-string">&quot;graph&quot;</span>: <span class="hljs-string">&quot;/data/docker&quot;</span>,  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://aorfq0az.mirror.aliyuncs.com&quot;</span>]&#125;<span class="hljs-comment"># 重启docker.</span>[root@hdss7-50 docker]<span class="hljs-comment"># systemctl daemon-reload</span>[root@hdss7-50 docker]<span class="hljs-comment"># systemctl restart docker</span><span class="hljs-comment"># 验证镜像.</span>[root@hdss7-50 docker]<span class="hljs-comment"># docker info</span>...... Insecure Registries:  127.0.0.0/8 Registry Mirrors:  https://aorfq0az.mirror.aliyuncs.com/ Live Restore Enabled: <span class="hljs-literal">false</span></code></pre><h4 id="8-安装rancher"><a href="#8-安装rancher" class="headerlink" title="8.安装rancher"></a>8.安装rancher</h4><pre><code class="hljs bash">% sudo docker run -d --restart=unless-stopped -p 8080:8080 -p 443:443 -v /data/rancher/:/var/lib/rancher/ rancher/rancher:stable<span class="hljs-comment"># 查看rancher容器.</span>[root@hdss7-50 rancher]<span class="hljs-comment"># docker ps</span>CONTAINER ID   IMAGE                    COMMAND           CREATED          STATUS                          PORTS     NAMES465eb034c7e6   rancher/rancher:stable   <span class="hljs-string">&quot;entrypoint.sh&quot;</span>   43 seconds ago   Restarting (1) 15 seconds ago             sad_pascal[root@hdss7-50 rancher]<span class="hljs-comment"># sudo vi /etc/hosts</span>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain610.4.7.50 hdss7-50 hdss7-50.host.com......</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>vmware</tag>
      
      <tag>centos7</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dockerfile微服务</title>
    <link href="/2020/12/10/micro-docker/"/>
    <url>/2020/12/10/micro-docker/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Dockerfile微服务"><a href="#Dockerfile微服务" class="headerlink" title="Dockerfile微服务"></a>Dockerfile微服务</h3><h4 id="1-微服务打包"><a href="#1-微服务打包" class="headerlink" title="1.微服务打包"></a>1.微服务打包</h4><p><strong><u>前提:电脑上要先安装docker和maven</u></strong><br>进入工程, 这里以微服务: eureka为例.</p><pre><code class="hljs bash"><span class="hljs-comment"># 在idea命令行窗口中使maven命令生效.</span>% <span class="hljs-built_in">source</span> ~/.bash_profile<span class="hljs-comment"># 打包微服务eureka.</span>% mvn clean package -Dmaven.test.skip=<span class="hljs-literal">true</span><span class="hljs-comment"># 查看生成的jar.</span>% ls target classes                                 eureka-0.0.1-SNAPSHOT.jar.original      maven-archivereureka-0.0.1-SNAPSHOT.jar               generated-sources                       maven-status</code></pre><h4 id="2-编写Dockerfile文件"><a href="#2-编写Dockerfile文件" class="headerlink" title="2.编写Dockerfile文件"></a>2.编写Dockerfile文件</h4><p>在工程根目录下,新建一个Dockerfile文件</p><pre><code class="hljs dockerfile"><span class="hljs-comment"># 拉取jdk镜像.</span><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-alpine<span class="hljs-comment"># 添加微服务jar,并命名为app.jar.</span><span class="hljs-keyword">ADD</span><span class="bash"> target/*.jar app.jar</span><span class="hljs-comment"># 暴露端口号.</span><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8761</span><span class="hljs-comment"># 运行jar.</span><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/app.jar&quot;</span>]</span></code></pre><h4 id="3-构建Dockerfile"><a href="#3-构建Dockerfile" class="headerlink" title="3.构建Dockerfile"></a>3.构建Dockerfile</h4><pre><code class="hljs bash">% docker build -t mrlingchen/eureka .Sending build context to Docker daemon  50.55MBStep 1/4 : FROM openjdk:8-alpine8-alpine: Pulling from library/openjdke7c96db7181b: Pull complete f910a506b6cb: Pull complete c2274a1a0e27: Pull complete Digest: sha256:94792824df2df33402f201713f932b58cb9de94a0cd524164a0f2283343547b3Status: Downloaded newer image <span class="hljs-keyword">for</span> openjdk:8-alpine ---&gt; a3562aa0b991Step 2/4 : ADD target/*.jar app.jar ---&gt; 9376081729ebStep 3/4 : EXPOSE 8761 ---&gt; Running <span class="hljs-keyword">in</span> fb3dbeef160fRemoving intermediate container fb3dbeef160f ---&gt; ddba8d484423Step 4/4 : ENTRYPOINT [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/app.jar&quot;</span>] ---&gt; Running <span class="hljs-keyword">in</span> c1496a14651aRemoving intermediate container c1496a14651a ---&gt; 1265e0271c13Successfully built 1265e0271c13Successfully tagged mrlingchen/eureka:latest</code></pre><h4 id="4-启动容器"><a href="#4-启动容器" class="headerlink" title="4.启动容器"></a>4.启动容器</h4><pre><code class="hljs bash">% docker run -p 18761:8761 -d mrlingchen/eureka2585311480facffe71886253baf9deaf92597542a2f9f6a157dbd9a81a9f1ac1<span class="hljs-comment"># 查看docker容器启动情况.</span>% docker psCONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                     NAMES2585311480fa        mrlingchen/eureka               <span class="hljs-string">&quot;java -jar /app.jar&quot;</span>     27 seconds ago      Up 26 seconds       0.0.0.0:18761-&gt;8761/tcp   tender_ardinghelli</code></pre><h4 id="5-访问网页"><a href="#5-访问网页" class="headerlink" title="5.访问网页"></a>5.访问网页</h4><p>访问地址: <code>http://localhost:18761</code><br>端口号是docker run命令中映射的端口: 18761</p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>dockerfile</tag>
      
      <tag>springcloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python_virtualenv_安装虚拟环境</title>
    <link href="/2020/10/05/mac-python-virtualenv/"/>
    <url>/2020/10/05/mac-python-virtualenv/</url>
    
    <content type="html"><![CDATA[<h3 id="Python-virtualenv-安装虚拟环境"><a href="#Python-virtualenv-安装虚拟环境" class="headerlink" title="Python virtualenv 安装虚拟环境"></a>Python virtualenv 安装虚拟环境</h3><h4 id="virtualenv安装"><a href="#virtualenv安装" class="headerlink" title="virtualenv安装"></a>virtualenv安装</h4><p>主要是为了解决在同一个系统中存在多个项目的情况， 采用虚拟的方式，为每个项目创建各自的环境，使各个项目不会相互干扰</p><ul><li>正常情况下，我们 pip 和 python 命令所执行的命令都是在系统环境下执行，修改的也是系统下的 python，导致每次的修改都是全局性的</li><li>当一个系统中存在多个项目时，而每个项目的配置需要又不一样，对全局的 python 环境修改又太麻烦</li><li>同样适用了虚拟环境，可以大胆的做各种 python 的实验、测试、开发等等，不用担心对系统全局环境的影响</li></ul><pre><code class="hljs shell">sudo pip install virtualenvsudo pip install virtualenvwrappe</code></pre><p>安装好之后在 /usr/local/bin 下有两者</p><h4 id="虚拟环境安装"><a href="#虚拟环境安装" class="headerlink" title="虚拟环境安装"></a>虚拟环境安装</h4><p>然后新建一个文件夹用来存放虚拟环境</p><pre><code class="hljs shell">例如： cd Desktop<span class="hljs-meta">#</span><span class="bash"> 新建文件夹 myproject</span>mkdir myproject<span class="hljs-meta">#</span><span class="bash"> 进入到文件夹中</span>cd myproject</code></pre><p>命令virtualenv就可以创建一个独立的Python运行环境，我们还加上了参数–no-site-packages，这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。</p><pre><code class="hljs shell">virtualenv 虚拟环境的名称例如：virtualenv venv<span class="hljs-meta">#</span><span class="bash"> 加上--no-site-packages 将不会拷贝系统Python 环境中已经存在的 python 包</span>virtualenv --no-site-packages venv</code></pre><p>这个时候在 venv 下已经创建了一个新的 python 环境 sit-packages 默认安装了 setuptools, pip, wheel</p><p>新建的Python环境被放到当前目录下的venv目录。有了venv这个Python环境，可以用source进入该环境：</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 注意需要使用 <span class="hljs-built_in">source</span> 命令进入此 venv 环境，否则所有的 pip或python均是在系统Python环境下执行</span>source venv/bin/activate</code></pre><p>注意到命令提示符变了，有个(venv)前缀，表示当前环境是一个名为venv的Python环境。</p><p>下面正常安装各种第三方包，并运行python命令：</p><p>现在可以测试安装一个包测试其安装地址</p><pre><code class="hljs shell">pip install jinja2<span class="hljs-meta">#</span><span class="bash"> 这个时候可以发下在 venv/lib/python2.7/sit-packages 目录下面发现 jinja 库</span></code></pre><p>在venv环境下，用pip安装的包都被安装到venv这个环境下，系统Python环境不受任何影响。也就是说，venv环境是专门针对myproject这个应用创建的。</p><p>退出当前的venv环境，使用deactivate命令： <code>deactivate</code> 此时就回到了正常的环境，现在pip或python均是在系统Python环境下执行</p><hr><p><strong><em>virtualenv是如何创建“独立”的Python运行环境的呢？**<br>**原理很简单，就是把系统Python复制一份到virtualenv的环境，用命令source venv/bin/activate进入一个virtualenv环境时，virtualenv会修改相关环境变量，让命令python和pip均指向当前的virtualenv环境。\</em></strong></p><h4 id="requirements文件"><a href="#requirements文件" class="headerlink" title="requirements文件"></a>requirements文件</h4><p>Python项目中必须包含一个requirements.txt文件，用于记录所有依赖包及其精确的版本号，以便在新环境中进行部署操作。</p><p>在虚拟环境使用以下命令将当前虚拟环境中的依赖包以版本号生成至文件中：</p><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash"> pip freeze &gt; requirements.txt</span><span class="hljs-meta">#</span><span class="bash"> 安装或升级包后，最好更新这个文件以保证虚拟环境中的依赖包</span><span class="hljs-meta">#</span><span class="bash"> requirements.txt</span>click==7.1.2Flask==1.1.2itsdangerous==1.1.0Jinja2==2.11.2MarkupSafe==1.1.1Werkzeug==1.0.1</code></pre><p>当需要创建这个虚拟环境的完全副本，可以创建一个新的虚拟环境，并在其上运行以下命令：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> pip install -r requirements.txt</span></code></pre><p><strong><u>PS：本文摘录于腾讯云文档，仅供学习与参考。</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
      <tag>virtualenv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11_可观测性_你的应用健康</title>
    <link href="/2020/10/04/k8s-app-status/"/>
    <url>/2020/10/04/k8s-app-status/</url>
    
    <content type="html"><![CDATA[<h3 id="11-可观测性-你的应用健康"><a href="#11-可观测性-你的应用健康" class="headerlink" title="11_可观测性_你的应用健康"></a>11_可观测性_你的应用健康</h3><h4 id="一、需求来源"><a href="#一、需求来源" class="headerlink" title="一、需求来源"></a><strong>一、需求来源</strong></h4><p>首先来看一下，整个需求的来源：当把应用迁移到 Kubernetes 之后，要如何去保障应用的健康与稳定呢？其实很简单，可以从两个方面来进行增强： </p><ol><li>首先是提高应用的可观测性。</li><li>提高应用的可恢复能力。</li></ol><p>从可观测性上来讲，可以在三个方面来去做增强：</p><ol><li>首先是应用的健康状态上面，可以实时地进行观测；</li><li>第二个是可以获取应用的资源使用情况；</li><li>第三个是可以拿到应用的实时日志，进行问题的诊断与分析。 </li></ol><p>当出现了问题之后，首先要做的事情是要降低影响的范围，进行问题的调试与诊断。最后当出现问题的时候，理想的状况是：可以通过和 K8s 集成的自愈机制进行完整的恢复。</p><h4 id="二、Liveness-与-Readiness"><a href="#二、Liveness-与-Readiness" class="headerlink" title="二、Liveness 与 Readiness"></a><strong>二、Liveness 与 Readiness</strong></h4><p>本小节为大家介绍 Liveness probe 和 eadiness probe。</p><h5 id="应用健康状态-初识-Liveness-与-Readiness"><a href="#应用健康状态-初识-Liveness-与-Readiness" class="headerlink" title="应用健康状态-初识 Liveness 与 Readiness"></a>应用健康状态-初识 Liveness 与 Readiness</h5><p>Liveness probe 也叫就绪指针，用来判断一个 pod 是否处在就绪状态。<br>当一个 pod 处在就绪状态的时候，它才能够对外提供相应的服务，也就是说接入层的流量才能打到相应的 pod。当这个 pod 不处在就绪状态的时候，接入层会把相应的流量从这个 pod 上面进行摘除。</p><p>来看一下简单的一个例子：<br>如下图其实就是一个 Readiness 就绪的一个例子： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502626536-55fc1ba0-8029-43c3-afaa-e50373ef2fe6.png" alt="image.png"></p><p>当这个 pod 指针判断一直处在失败状态的时候，其实接入层的流量不会打到现在这个 pod 上。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502355185-56dd96d2-9517-4d88-aa4e-b380c053a2c6.png" alt="image.png"></p><p>当这个 pod 的状态从 FAIL 的状态转换成 success 的状态时，它才能够真实地承载这个流量。 </p><p><strong>Liveness 指针也是类似的，它是存活指针，用来判断一个 pod 是否处在存活状态。</strong>当一个 pod 处在不存活状态的时候，会出现什么事情呢？ </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502660561-d1e80682-5919-4704-9b24-dce7dbc62316.png" alt="image.png"></p><p>这个时候会由上层的判断机制来判断这个 pod 是否需要被重新拉起。那如果上层配置的重启策略是 restart always 的话，那么此时这个 pod 会直接被重新拉起。 </p><h5 id="应用健康状态-使用方式"><a href="#应用健康状态-使用方式" class="headerlink" title="应用健康状态-使用方式"></a>应用健康状态-使用方式</h5><p>接下来看一下 Liveness 指针和 Readiness 指针的具体的用法。 </p><h5 id="探测方式"><a href="#探测方式" class="headerlink" title="探测方式"></a>探测方式</h5><p>Liveness 指针和 Readiness 指针支持三种不同的探测方式： </p><ol><li>第一种是 httpGet。它是通过<u>发送 http Get 请求</u>来进行判断的，当返回码是 200-399 之间的状态码时，标识这个应用是健康的；</li><li>第二种探测方式是 Exec。它是通过<u>执行容器中的一个命令</u>来判断当前的服务是否是正常的，当命令行的返回结果是 0，则标识容器是健康的；</li><li>第三种探测方式是 tcpSocket。它是通过<u>探测容器的 IP 和 Port 进行 TCP 健康检查</u>，如果这个 TCP 的链接能够正常被建立，那么标识当前这个容器是健康的。</li></ol><h5 id="探测结果"><a href="#探测结果" class="headerlink" title="探测结果"></a>探测结果</h5><p>从探测结果来讲主要分为三种： </p><ul><li>第一种是 success，当状态是 success 的时候，表示 container 通过了健康检查，也就是 Liveness probe 或 Readiness probe 是正常的一个状态；</li><li>第二种是 Failure，Failure 表示的是这个 container 没有通过健康检查，如果没有通过健康检查的话，那么此时就会进行相应的一个处理，那在 Readiness 处理的一个方式就是通过 service。service 层将没有通过 Readiness 的 pod 进行摘除，而 Liveness 就是将这个 pod 进行重新拉起，或者是删除。</li><li>第三种状态是 Unknown，Unknown 是表示说当前的执行的机制没有进行完整的一个执行，可能是因为类似像超时或者像一些脚本没有及时返回，那么此时 Readiness-probe 或 Liveness-probe 会不做任何的一个操作，会等待下一次的机制来进行检验。</li></ul><p>那在 kubelet 里面有一个叫 <u><strong>ProbeManager 的组件</strong></u>，这个组件里面会包含 Liveness-probe 或 Readiness-probe，这两个 probe 会将相应的 Liveness 诊断和 Readiness 诊断作用在 pod 之上，来实现一个具体的判断。 </p><h5 id="应用健康状态-Pod-Probe-Spec"><a href="#应用健康状态-Pod-Probe-Spec" class="headerlink" title="应用健康状态-Pod Probe Spec"></a>应用健康状态-Pod Probe Spec</h5><p>下面介绍这三种方式不同的检测方式的一个 yaml 文件的使用。</p><p>首先先看一下 exec，exec 的使用其实非常简单。如下图所示，大家可以看到这是一个 Liveness probe，它里面配置了一个 exec 的一个诊断。接下来，它又配置了一个 **<u>command 的字段</u>**，这个 command 字段里面通过 cat 一个具体的文件来判断当前 Liveness probe 的状态，当这个文件里面返回的结果是 0 时，或者说这个命令返回是 0 时，它会认为此时这个 pod 是处在健康的一个状态。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502713702-6b90ff5b-265d-4c2d-a46f-b363ea54c2d7.png" alt="image.png"></p><p>那再来看一下这个 httpGet，**<u>httpGet 里面有一个字段是路径，第二个字段是 port，第三个是 headers</u>**。这个地方有时需要通过类似像 header 头的一个机制做 health 的一个判断时，需要配置这个 header，通常情况下，可能只需要通过 health 和 port 的方式就可以了。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502757691-ece72c57-6446-4796-8e4b-568a1cf6ca74.png" alt="image.png"></p><p>第三种是 tcpSocket，tcpSocket 的使用方式其实也比较简单，你只需要设置一个**<u>检测的端口</u>**，像这个例子里面使用的是 8080 端口，当这个 8080 端口 tcp connect 审核正常被建立的时候，那 tecSocket，Probe 会认为是健康的一个状态。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502777983-dfa814ec-747e-4540-9f6a-46e41912f9bd.png" alt="image.png"></p><p>此外还有如下的五个参数，是 Global 的参数。 </p><ul><li><p>第一个参数叫 initialDelaySeconds，它表示的是说这个 pod 启动延迟多久进行一次检查，比如说现在有一个 Java 的应用，它启动的时间可能会比较长，因为涉及到 jvm 的启动，包括 Java 自身 jar 的加载。所以前期，可能有一段时间是没有办法被检测的，而这个时间又是可预期的，那这时可能要设置一下 initialDelaySeconds；</p></li><li><p>第二个是 periodSeconds，它表示的是检测的时间间隔，正常默认的这个值是 10 秒；</p></li><li><p>第三个字段是 timeoutSeconds，它表示的是检测的超时时间，当超时时间之内没有检测成功，那它会认为是失败的一个状态；</p></li><li><p>第四个是 successThreshold，它表示的是：当这个 pod 从探测失败到再一次判断探测成功，所需要的阈值次数，默认情况下是 1 次，表示原本是失败的，那接下来探测这一次成功了，就会认为这个 pod 是处在一个探针状态正常的一个状态；</p></li><li><p>最后一个参数是 failureThreshold，它表示的是探测失败的重试次数，默认值是 3，表示的是当从一个健康的状态连续探测 3 次失败，那此时会判断当前这个pod的状态处在一个失败的状态。</p></li></ul><h5 id="应用健康状态-Liveness-与-Readiness-总结"><a href="#应用健康状态-Liveness-与-Readiness-总结" class="headerlink" title="应用健康状态-Liveness 与 Readiness 总结"></a>应用健康状态-Liveness 与 Readiness 总结</h5><p>接下来对 Liveness 指针和 Readiness 指针进行一个简单的总结。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502867094-9c716cdd-edd0-4296-98c1-02afab9a5487.png?x-oss-process=image/resize,w_2222" alt="图片1.png"></p><p>介绍</p><p>Liveness 指针是存活指针，它用来判断容器是否存活、判断 pod 是否 running。如果 Liveness 指针判断容器不健康，此时会通过 kubelet 杀掉相应的 pod，并根据重启策略来判断是否重启这个容器。如果默认不配置 Liveness 指针，则默认情况下认为它这个探测默认返回是成功的。 </p><p>Readiness 指针用来判断这个容器是否启动完成，即 pod 的 condition 是否 ready。如果探测的一个结果是不成功，那么此时它会从 pod 上 Endpoint 上移除，也就是说从接入层上面会把前一个 pod 进行摘除，直到下一次判断成功，这个 pod 才会再次挂到相应的 endpoint 之上。 </p><p>检测失败 </p><p>对于检测失败上面来讲 Liveness 指针是直接杀掉这个 pod，而 Readiness 指针是切掉 endpoint 到这个 pod 之间的关联关系，也就是说它把这个流量从这个 pod 上面进行切掉。 </p><p>适用场景 </p><p>Liveness 指针适用场景是支持那些可以重新拉起的应用，而 Readiness 指针主要应对的是启动之后无法立即对外提供服务的这些应用。 </p><p>注意事项 </p><p>在使用 Liveness 指针和 Readiness 指针的时候有一些注意事项。因为不论是 Liveness 指针还是 Readiness 指针都需要配置合适的探测方式，以免被误操作。 </p><ul><li><p>第一个是调大超时的阈值，因为在容器里面执行一个 shell 脚本，它的执行时长是非常长的，平时在一台 ecs 或者在一台 vm 上执行，可能 3 秒钟返回的一个脚本在容器里面需要 30 秒钟。所以这个时间是需要在容器里面事先进行一个判断的，那如果可以调大超时阈值的方式，来防止由于容器压力比较大的时候出现偶发的超时；</p></li><li><p>第二个是调整判断的一个次数，3 次的默认值其实在比较短周期的判断周期之下，不一定是最佳实践，适当调整一下判断的次数也是一个比较好的方式；</p></li><li><p>第三个是 exec，如果是使用 shell 脚本的这个判断，调用时间会比较长，比较建议大家可以使用类似像一些编译性的脚本 Golang 或者一些 C 语言、C++ 编译出来的这个二进制的 binary 进行判断，那这种通常会比 shell 脚本的执行效率高 30% 到 50%；</p></li><li><p>第四个是如果使用 tcpSocket 方式进行判断的时候，如果遇到了 TLS 的服务，那可能会造成后边 TLS 里面有很多这种未健全的 tcp connection，那这个时候需要自己对业务场景上来判断，这种的链接是否会对业务造成影响。</p></li></ul><h4 id="三、问题诊断"><a href="#三、问题诊断" class="headerlink" title="三、问题诊断"></a><strong>三、问题诊断</strong></h4><p>接下来给大家讲解一下在 K8s 中常见的问题诊断。</p><h5 id="应用故障排查-了解状态机制"><a href="#应用故障排查-了解状态机制" class="headerlink" title="应用故障排查-了解状态机制"></a>应用故障排查-了解状态机制</h5><p>首先要了解一下 K8s 中的一个设计理念，就是这个状态机制。因为 **<u>K8s 是整个的一个设计是面向状态机的</u>**，它里面通过 yaml 的方式来定义的是一个期望到达的一个状态，而真正这个 yaml 在执行过程中会由各种各样的 controller来负责整体的状态之间的一个转换。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502911373-048d928b-f606-4503-ac09-ab71505841cf.png" alt="image.png"></p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502921155-cb806fc8-e90d-4c81-bd1f-8636aa59db66.png" alt="image.png"></p><p>比如说上面的图，实际上是一个 Pod 的一个生命周期。刚开始它处在一个 pending 的状态，那接下来可能会转换到类似像 running，也可能转换到 Unknown，甚至可以转换到 failed。然后，当 running 执行了一段时间之后，它可以转换到类似像 successded 或者是 failed，然后当出现在 unknown 这个状态时，可能由于一些状态的恢复，它会重新恢复到 running 或者 successded 或者是 failed。 </p><p>其实 K8s 整体的一个状态就是基于这种类似像状态机的一个机制进行转换的，而不同状态之间的转化都会在相应的 K8s对象上面留下来类似像 Status 或者像 Conditions 的一些字段来进行表示。</p><p>像下面这张图其实表示的就是说在一个 Pod 上面一些状态位的一些展现。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570503040532-79a6ac60-4106-4f37-87b2-9934856626ca.png" alt="image.png"></p><p>比如说在 Pod 上面有一个字段叫 Status，这个 Status 表示的是 Pod 的一个聚合状态，在这个里面，这个聚合状态处在一个 pending 状态。 </p><p>然后再往下看，因为一个 pod 里面有多个 container，每个 container 上面又会有一个字段叫 State，然后 State 的状态表示当前这个 container 的一个聚合状态。那在这个例子里面，这个聚合状态处在的是 waiting 的状态，那具体的原因是因为什么呢？是因为它的镜像没有拉下来，所以处在 waiting 的状态，是在等待这个镜像拉取。然后这个 ready 的部分呢，目前是 false，因为它这个进行目前没有拉取下来，所以这个 pod 不能够正常对外服务，所以此时 ready 的状态是未知的，定义为 false。如果上层的 endpoint 发现底层这个 ready 不是 true 的话，那么此时这个服务是没有办法对外服务的。 </p><p>再往下是 condition，condition 这个机制表示是说：在 K8s 里面有很多这种比较小的这个状态，而这个状态之间的聚合会变成上层的这个 Status。那在这个例子里面有几个状态，第一个是 Initialized，表示是不是已经初始化完成？那在这个例子里面已经是初始化完成的，那它走的是第二个阶段，是在这个 ready 的状态。因为上面几个 container 没有拉取下来相应的镜像，所以 ready 的状态是 false。</p><p>然后再往下可以看到这个 container 是否 ready，这里可以看到是 false，而这个状态是 PodScheduled，表示说当前这个 pod 是否是处在一个已经被调度的状态，它已经 bound 在现在这个 node 之上了，所以这个状态也是 true。</p><p>那可以通过相应的 condition 是 true 还是 false 来判断整体上方的这个状态是否是正常的一个状态。而在 K8s 里面不同的状态之间的这个转换都会发生相应的事件，而**<u>事件分为两种： 一种叫做 normal 的事件，一种是 warning 事件</u>**。大家可以看见在这第一条的事件是有个 normal 事件，然后它相应的 reason 是 scheduler，表示说这个 pod 已经被默认的调度器调度到相应的一个节点之上，然后这个节点是 cn-beijing192.168.3.167 这个节点之上。</p><p>再接下来，又是一个 normal 的事件，表示说当前的这个镜像在 pull 相应的这个 image。然后再往下是一个 warning 事件，这个 warning 事件表示说 pull 这个镜像失败了。 </p><p>以此类推，这个地方表示的一个状态就是说在 K8s 里面这个状态机制之间这个状态转换会产生相应的事件，而这个事件又通过类似像 normal 或者是 warning 的方式进行暴露。开发者可以通过类似像通过这个事件的机制，可以通过上层 condition Status 相应的一系列的这个字段来判断当前这个应用的具体的状态以及进行一系列的诊断。</p><h5 id="应用故障排查-常见应用异常"><a href="#应用故障排查-常见应用异常" class="headerlink" title="应用故障排查-常见应用异常"></a>应用故障排查-常见应用异常</h5><p>本小节介绍一下常见应用的一些异常。首先是 pod 上面，pod 上面可能会停留几个常见的状态。</p><h6 id="Pod-停留在-Pending"><a href="#Pod-停留在-Pending" class="headerlink" title="Pod 停留在 Pending"></a>Pod 停留在 Pending</h6><p>第一个就是 pending 状态，pending 表示调度器没有进行介入。此时可以通过 <strong><u>kubectl describe pod</u></strong> 来查看相应的事件，如果由于资源或者说端口占用，或者是由于 node selector 造成 pod 无法调度的时候，可以在相应的事件里面看到相应的结果，这个结果里面会表示说有多少个不满足的 node，有多少是因为 CPU 不满足，有多少是由于 node 不满足，有多少是由于 tag 打标造成的不满足。</p><h6 id="Pod-停留在-waiting"><a href="#Pod-停留在-waiting" class="headerlink" title="Pod 停留在 waiting"></a>Pod 停留在 waiting</h6><p>那第二个状态就是 pod 可能会停留在 waiting 的状态，pod 的 states 处在 waiting 的时候，<br>通常表示说这个 pod 的镜像没有正常拉取，原因可能是由于这个镜像是私有镜像，但是没有配置 Pod secret；<br>那第二种是说可能由于这个镜像地址是不存在的，造成这个镜像拉取不下来；<br>还有一个是说这个镜像可能是一个公网的镜像，造成镜像的拉取失败。 </p><h6 id="Pod-不断被拉取并且可以看到-crashing"><a href="#Pod-不断被拉取并且可以看到-crashing" class="headerlink" title="Pod 不断被拉取并且可以看到 crashing"></a>Pod 不断被拉取并且可以看到 crashing</h6><p>第三种是 pod 不断被拉起，而且可以看到类似像 backoff。这个通常表示说 pod 已经被调度完成了，但是启动失败，<br>那这个时候通常要关注的应该是这个应用自身的一个状态，并不是说配置是否正确、权限是否正确，此时需要查看的应该是 pod 的具体日志。</p><h6 id="Pod-处在-Runing-但是没有正常工作"><a href="#Pod-处在-Runing-但是没有正常工作" class="headerlink" title="Pod 处在 Runing 但是没有正常工作"></a>Pod 处在 Runing 但是没有正常工作</h6><p>第四种 pod 处在 running 状态，但是没有正常对外服务。<br>那此时比较常见的一个点就可能是由于一些非常细碎的配置，类似像有一些字段可能拼写错误，造成了 yaml 下发下去了，但是有一段没有正常地生效，从而使得这个 pod 处在 running 的状态没有对外服务，那此时可以通过 apply-validate-f pod.yaml 的方式来进行判断当前 yaml 是否是正常的，如果 yaml 没有问题，那么接下来可能要诊断配置的端口是否是正常的，以及 Liveness 或 Readiness 是否已经配置正确。</p><h6 id="Service-无法正常的工作"><a href="#Service-无法正常的工作" class="headerlink" title="Service 无法正常的工作"></a>Service 无法正常的工作</h6><p>最后一种就是 service 无法正常工作的时候，该怎么去判断呢？那比较常见的 service 出现问题的时候，是自己的使用上面出现了问题。<br>因为 service 和底层的 pod 之间的关联关系是**<u>通过 selector 的方式来匹配的，也就是说 pod 上面配置了一些 label</u>**，然后 service 通过 match label 的方式和这个 pod 进行相互关联。如果这个 label 配置的有问题，可能会造成这个 service 无法找到后面的 endpoint，从而造成相应的 service 没有办法对外提供服务，那如果 service 出现异常的时候，第一个要看的是这个 service 后面是不是有一个真正的 endpoint，其次来看这个 endpoint 是否可以对外提供正常的服务。</p><h4 id="四、应用远程调试"><a href="#四、应用远程调试" class="headerlink" title="四、应用远程调试"></a><strong>四、应用远程调试</strong></h4><p>本节讲解的是在 K8s 里面如何进行应用的远程调试，远程调试主要分为 pod 的远程调试以及 service 的远程调试。还有就是针对一些性能优化的远程调试。</p><h5 id="应用远程调试-Pod-远程调试"><a href="#应用远程调试-Pod-远程调试" class="headerlink" title="应用远程调试 - Pod 远程调试"></a>应用远程调试 - Pod 远程调试</h5><p>首先把一个应用部署到集群里面的时候，发现问题的时候，需要进行快速验证，或者说修改的时候，可能需要类似像登陆进这个容器来进行一些诊断。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570503283791-1688c1e8-032d-4e35-9be0-728101b6663d.png?x-oss-process=image/resize,w_2222" alt="图片2.png"></p><p>比如说可以通过 exec 的方式进入一个 pod。像这条命令里面，通过 <strong><u>kubectl exec-it pod-name</u></strong> 后面再填写一个相应的命令，比如说 /bin/bash，表示希望到这个 pod 里面进入一个交互式的一个 bash。然后在 bash 里面可以做一些相应的命令，比如说修改一些配置，通过 supervisor 去重新拉起这个应用，都是可以的。</p><p>那如果指定这一个 pod 里面可能包含着多个 container，这个时候该怎么办呢？怎么通过 pod 来指定 container 呢？其实这个时候有一个参数叫做 -c，如上图下方的命令所示。-c 后面是一个 container-name，可以通过 pod 在指定 -c 到这个 container-name，具体指定要进入哪个 container，后面再跟上相应的具体的命令，通过这种方式来实现一个多容器的命令的一个进入，从而实现多容器的一个远程调试。 </p><h5 id="应用远程调试-Servic-远程调试"><a href="#应用远程调试-Servic-远程调试" class="headerlink" title="应用远程调试 - Servic 远程调试"></a>应用远程调试 - Servic 远程调试</h5><p>那么 service 的远程调试该怎么做呢？service 的远程调试其实分为两个部分： </p><ul><li>第一个部分是说我想将一个服务暴露到远程的一个集群之内，让远程集群内的一些应用来去调用本地的一个服务，这是一条反向的一个链路；</li><li>还有一种方式是我想让这个本地服务能够去调远程的服务，那么这是一条正向的链路。</li></ul><p>在反向列入上面有这样一个开源组件，叫做 **<u>Telepresence</u>**，它可以将本地的应用代理到远程集群中的一个 service 上面，使用它的方式非常简单。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570503307524-cc111087-301f-4db3-9f29-b8f94345699a.png" alt="image.png"></p><p>首先先将 Telepresence 的一个 Proxy 应用部署到远程的 K8s 集群里面。然后将远程单一个 deployment swap 到本地的一个 application，使用的命令就是 **<u>Telepresence-swap-deployment 然后以及远程的 DEPLOYMENT_NAME</u>**。通过这种方式就可以将本地一个 application 代理到远程的 service 之上、可以将应用在远程集群里面进行本地调试，这个有兴趣的同学可以到 GitHub 上面来看一下这个插件的使用的方式。</p><p>第二个是如果本地应用需要调用远程集群的服务时候，可以通过 port-forward 的方式将远程的应用调用到本地的端口之上。比如说现在远程的里面有一个 API server，这个 API server 提供了一些端口，本地在调试 Code 时候，想要直接调用这个 API server，那么这时，比较简单的一个方式就是通过 port-forward 的方式。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570503322949-7064b86b-cdea-4b70-af98-bbf26e22e27d.png" alt="image.png"></p><p>它的使用方式是 kubectl port-forward，然后 service 加上远程的 service name，再加上相应的 namespace，后面还可以加上一些额外的参数，比如说端口的一个映射，通过这种机制就可以把远程的一个应用代理到本地的端口之上，此时通过访问本地端口就可以访问远程的服务。</p><h5 id="开源的调试工具-kubectl-debug"><a href="#开源的调试工具-kubectl-debug" class="headerlink" title="开源的调试工具 - kubectl-debug"></a>开源的调试工具 - kubectl-debug</h5><p>最后再给大家介绍一个开源的调试工具，它也是 kubectl 的一个插件，叫 kubectl-debug。我们知道在 K8s 里面，底层的容器 runtime 比较常见的就是类似像 docker 或者是 containerd，不论是 docker 还是 containerd，它们使用的一个机制都是基于 Linux namespace 的一个方式进行虚拟化和隔离的。</p><p>通常情况下 ，并不会在镜像里面带特别多的调试工具，类似像 netstat telnet 等等这些 ，因为这个会造成应用整体非常冗余。那么如果想要调试的时候该怎么做呢？其实这个时候就可以依赖类似于像 kubectl-debug 这样一个工具。</p><p>kubectl-debug 这个工具是依赖于 Linux namespace 的方式来去做的，它可以 datash 一个 Linux namespace 到一个额外的 container，然后在这个 container 里面执行任何的 debug 动作，其实和直接去 debug 这个 Linux namespace 是一致的。这里有一个简单的操作，给大家来介绍一下：</p><p>这个地方其实已经安装好了 kubectl-debug，它是 kubectl 的一个插件。所以这个时候，你可以直接通过 kubectl-debug 这条命令来去诊断远程的一个 pod。像这个例子里面，当执行 debug 的时候，实际上它首先会先拉取一些镜像，这个镜像里面实际上会默认带一些诊断的工具。当这个镜像启用的时候，它会把这个 debug container 进行启动。与此同时会把这个 container 和相应的你要诊断的这个 container 的 namespace 进行挂靠，也就说此时这个 container 和你是同 namespace 的，类似像网络站，或者是类似像内核的一些参数，其实都可以在这个 debug container 里面实时地进行查看。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570503431005-d0a56ed2-4a7d-4a71-bdee-65ce5635d829.png" alt="image.png"></p><p>像这个例子里面，去查看类似像 hostname、进程、netstat 等等，这些其实都是和这个需要 debug 的 pod 是在同一个环境里面的，所以你之前这三条命令可以看到里面相关的信息。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570503480829-fe86c647-228f-486e-9f24-edb3a0e202d5.png" alt="image.png"></p><p>如果此时进行 logout 的话，相当于会把相应的这个 debug pod 杀掉，然后进行退出，此时对应用实际上是没有任何的影响的。那么通过这种方式可以不介入到容器里面，就可以实现相应的一个诊断。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570503514061-af6ea2ab-4539-41ef-bfd9-530e2ac3a5fd.png" alt="image.png"></p><p> 此外它还支持额外的一些机制，比如说我给设定一些 image，然后类似像这里面安装了的是 htop，然后开发者可以通过这个机制来定义自己需要的这个命令行的工具，并且通过这种 image 的方式设置进来。那么这个时候就可以通过这种机制来调试远程的一个 pod。</p><h4 id="本节总结"><a href="#本节总结" class="headerlink" title="本节总结"></a><strong>本节总结</strong></h4><ul><li><p>关于 Liveness 和 Readiness 的指针。Liveness probe 就是保活指针，它是用来看 pod 是否存活的，而 Readiness probe 是就绪指针，它是判断这个 pod 是否就绪的，如果就绪了，就可以对外提供服务。这个就是 Liveness 和 Readiness 需要记住的部分；</p></li><li><p>应用诊断的三个步骤：</p><p>首先 describe 相应的一个状态；</p><p>然后提供状态来排查具体的一个诊断方向；</p><p>最后来查看相应对象的一个 event 获取更详细的一个信息；</p></li><li><p>提供 pod 一个日志来定位应用的自身的一个状态；</p></li><li><p>远程调试的一个策略，如果想把本地的应用代理到远程集群，此时可以通过 Telepresence 这样的工具来实现，如果想把远程的应用代理到本地，然后在本地进行调用或者是调试，可以用类似像 port-forward 这种机制来实现。</p></li></ul><p><strong><u>PS：本文摘录于阿里云公开课，仅供学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>status</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10_应用存储和持久化数据卷：存储快照与拓扑调度</title>
    <link href="/2020/10/02/k8s-snap-topology/"/>
    <url>/2020/10/02/k8s-snap-topology/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="10-应用存储和持久化数据卷：存储快照与拓扑调度"><a href="#10-应用存储和持久化数据卷：存储快照与拓扑调度" class="headerlink" title="10_应用存储和持久化数据卷：存储快照与拓扑调度"></a>10_应用存储和持久化数据卷：存储快照与拓扑调度</h3><h4 id="一、基本知识"><a href="#一、基本知识" class="headerlink" title="一、基本知识"></a><strong>一、基本知识</strong></h4><h5 id="存储快照产生背景"><a href="#存储快照产生背景" class="headerlink" title="存储快照产生背景"></a><strong>存储快照产生背景</strong></h5><p>在使用存储时，为了提高数据操作的容错性，我们通常有需要对线上数据进行snapshot，以及能快速restore的能力。<br>另外，当需要对线上数据进行快速的复制以及迁移等动作，如进行环境的复制、数据开发等功能时，都可以通过存储快照来满足需求，而 K8s 中通过 CSI Snapshotter controller 来实现存储快照的功能。</p><h5 id="存储快照用户接口-Snapshot"><a href="#存储快照用户接口-Snapshot" class="headerlink" title="存储快照用户接口-Snapshot"></a>存储快照用户接口-Snapshot</h5><p>我们知道，K8s 中通过 pvc 以及 pv 的设计体系来简化用户对存储的使用，而存储快照的设计其实是仿照 pvc &amp; pv 体系的设计思想。<br>当用户需要存储快照的功能时，可以通过 VolumeSnapshot 对象来声明，并指定相应的 VolumeSnapshotClass 对象，之后由集群中的相关组件动态生成存储快照以及存储快照对应的对象 VolumeSnapshotContent。如下对比图所示，动态生成 VolumeSnapshotContent 和动态生成 pv 的流程是非常相似的。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194512-aa6b0073-db0d-4e7a-96a6-7576ceac767c.png" alt="img"></p><h5 id="存储快照用户接口-Restore"><a href="#存储快照用户接口-Restore" class="headerlink" title="存储快照用户接口-Restore"></a>存储快照用户接口-Restore</h5><p>有了存储快照之后，如何将快照数据快速恢复过来呢？如下图所示： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195691-527f012f-8544-48f0-a825-26324596340d.png" alt="img"></p><p>如上所示的流程，可以借助 PVC 对象将其的 dataSource 字段指定为 VolumeSnapshot 对象。这样当 PVC 提交之后，会由集群中的相关组件找到 dataSource 所指向的存储快照数据，然后新创建对应的存储以及 pv 对象，将存储快照数据恢复到新的 pv 中，这样数据就恢复回来了，这就是存储快照的restore用法。</p><h5 id="Topolopy-含义"><a href="#Topolopy-含义" class="headerlink" title="Topolopy-含义"></a>Topolopy-含义</h5><p>首先了解一下拓扑是什么意思：这里所说的拓扑是 <strong>K8s 集群中为管理的 nodes 划分的一种“位置”关系</strong>，意思为：可以通过在 node 的 labels 信息里面填写某一个 node 属于某一个拓扑。 </p><p>常见的有三种，这三种在使用时经常会遇到的： </p><ul><li><p>第一种，在使用云存储服务的时候，经常会遇到 <strong>region</strong>，也就是**<u>地区</u>**的概念，在 K8s 中常通过 label failure-domain.beta.kubernetes.io/region 来标识。这个是为了标识单个 K8s 集群管理的跨 region 的 nodes 到底属于哪个地区； </p></li><li><p>第二种，比较常用的是**<u>可用区</u><strong>，也就是 available **zone</strong>，在 K8s 中常通过 label failure-domain.beta.kubernetes.io/zone 来标识。这个是为了标识单个 K8s 集群管理的跨 zone 的 nodes 到底属于哪个可用区；</p></li><li><p>第三种，是 <strong>hostname，</strong>就是**<u>单机维度</u>**，是拓扑域为 node 范围，在 K8s 中常通过 label kubernetes.io/hostname 来标识，这个在文章的最后讲 local pv 的时候，会再详细描述。</p></li></ul><p>上面讲到的三个拓扑是比较常用的，而拓扑其实是可以自己定义的。**<u>可以定义一个字符串来表示一个拓扑域</u>**，这个 key 所对应的值其实就是拓扑域下不同的拓扑位置。</p><p>举个例子：可以用 <strong>rack，</strong>也就是机房中的机架这个纬度来做一个拓扑域。这样就可以将不同机架 (rack) 上面的机器标记为不同的拓扑位置，也就是说可以将不同机架上机器的位置关系通过 rack 这个纬度来标识。属于 rack1 上的机器，node label 中都添加 rack 的标识，它的 value 就标识成 rack1，即 rack=rack1；另外一组机架上的机器可以标识为 rack=rack2，这样就可以通过机架的纬度就来区分来 K8s 中的 node 所处的位置。</p><p>接下来就一起来看看拓扑在 K8s 存储中的使用。</p><h5 id="存储拓扑调度产生背景"><a href="#存储拓扑调度产生背景" class="headerlink" title="存储拓扑调度产生背景"></a>存储拓扑调度产生背景</h5><p>上一节课我们说过，K8s 中通过 PV 的 PVC 体系将存储资源和计算资源分开管理了。如果创建出来的 PV有”访问位置”的限制，也就是说，它通过 **<u>nodeAffinity 来指定哪些 node 可以访问这个 PV</u>**。为什么会有这个访问位置的限制？</p><p>因为在 K8s 中创建 pod 的流程和创建 PV 的流程，其实可以认为是并行进行的，这样的话，就没有办法来保证 pod 最终运行的 node 是能访问到 有位置限制的 PV 对应的存储，最终导致 pod 没法正常运行。这里来举两个经典的例子：</p><p>首先来看一下 <strong>Local PV 的例子</strong>，Local PV 是将一个 node 上的本地存储封装为 PV，通过使用 PV 的方式来访问本地存储。为什么会有 Local PV 的需求呢？简单来说，<u>刚开始使用 PV 或 PVC 体系的时候，主要是用来针对分布式存储的，分布式存储依赖于网络</u>，如果某些业务对 I/O 的性能要求非常高，可能通过网络访问分布式存储没办法满足它的性能需求。这个时候需要使用本地存储，刨除了网络的 overhead，性能往往会比较高。但是用本地存储也是有坏处的！分布式存储可以通过多副本来保证高可用，但本地存储就需要业务自己用类似 Raft 协议来实现多副本高可用。</p><p>接下来看一下 Local PV 场景可能如果没有对PV做“访问位置”的限制会遇到什么问题？ </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195576-951dd2cc-78ce-4e2c-b52a-0d871609f8cd.png" alt="img"></p><p>当用户在提交完 PVC 的时候，K8s PV controller可能绑定的是 node2 上面的 PV。但是，真正使用这个 PV 的 pod，在被调度的时候，有可能调度在 node1 上，最终导致这个 pod 在起来的时候没办法去使用这块存储，因为 pod 真实情况是要使用 node2 上面的存储。</p><p>第二个(如果不对 PV 做“访问位置”的限制会出问题的)场景：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195664-bfcc77ea-9ad7-4584-86e9-23f8d2b14be5.png" alt="img"></p><p>如果搭建的 K8s 集群管理的 nodes 分布在单个区域多个可用区内。在创建动态存储的时候，创建出来的存储属于可用区 2，但之后在提交使用该存储的 pod，它可能会被调度到可用区 1 了，那就可能没办法使用这块存储。因此像阿里云的云盘，也就是块存储，当前不能跨可用区使用，如果创建的存储其实属于可用区 2，但是 pod 运行在可用区 1，就没办法使用这块存储，这是第二个常见的问题场景。</p><p>接下来我们来看看 K8s 中如何通过存储拓扑调度来解决上面的问题的。</p><h5 id="存储拓扑调度"><a href="#存储拓扑调度" class="headerlink" title="存储拓扑调度"></a>存储拓扑调度</h5><p>首先总结一下之前的两个问题，它们都是 PV 在给 PVC 绑定或者动态生成 PV 的时候，我并不知道后面将使用它的 pod 将调度在哪些 node 上。但 PV 本身的使用，是对 pod 所在的 node 有拓扑位置的限制的，如 Local PV 场景是我要调度在指定的 node 上我才能使用那块 PV，而对第二个问题场景就是说跨可用区的话，必须要在将使用该 PV 的 pod 调度到同一个可用区的 node 上才能使用阿里云云盘服务，那 K8s 中怎样去解决这个问题呢？</p><p>简单来说，在 K8s 中将 PV 和 PVC 的 binding 操作和动态创建 PV 的操作做了 delay，delay 到 pod 调度结果出来之后，再去做这两个操作。这样的话有什么好处？</p><ul><li>首先，如果要是所要使用的 PV 是预分配的，如 Local PV，其实使用这块 PV 的 pod 它对应的 PVC 其实还没有做绑定，就可以通过调度器在调度的过程中，结合 pod 的计算资源需求(如 cpu/mem) 以及 pod 的 PVC 需求，选择的 node 既要满足计算资源的需求又要 pod 使用的 pvc 要能 binding 的 pv 的 nodeaffinity 限制;</li><li>其次对动态生成 PV 的场景其实就相当于是如果知道 pod 运行的 node 之后，就可以根据 node 上记录的拓扑信息来动态的创建这个 PV，也就是保证新创建出来的 PV 的拓扑位置与运行的 node 所在的拓扑位置是一致的，如上面所述的阿里云云盘的例子，既然知道 pod 要运行到可用区 1，那之后创建存储时指定在可用区 1 创建即可。</li></ul><p>为了实现上面所说的延迟绑定和延迟创建 PV，需要在 K8s 中的改动涉及到的相关组件有三个：</p><ul><li>PV Controller 也就是 persistent volume controller，它需要支持延迟 Binding 这个操作。</li><li>另一个是动态生成 PV 的组件，如果 pod 调度结果出来之后，它要根据 pod 的拓扑信息来去动态的创建 PV。</li><li>第三组件，也是最重要的一个改动点就是 kube-scheduler。在为 pod 选择 node 节点的时候，它不仅要考虑 pod 对 CPU/MEM 的计算资源的需求，它还要考虑这个 pod 对存储的需求，也就是根据它的 PVC，它要先去看一下当前要选择的 node，能否满足能和这个 PVC 能匹配的 PV 的 nodeAffinity；或者是动态生成 PV 的过程，它要根据 StorageClass 中指定的拓扑限制来 check 当前的 node 是不是满足这个拓扑限制，这样就能保证调度器最终选择出来的 node 就能满足存储本身对拓扑的限制。 </li></ul><p>这就是存储拓扑调度的相关知识。</p><h4 id="二、用例解读"><a href="#二、用例解读" class="headerlink" title="二、用例解读"></a><strong>二、用例解读</strong></h4><p>接下来通过 yaml 用例来解读一下第一部分的基本知识。</p><h5 id="Volume-Snapshot-Restore示例"><a href="#Volume-Snapshot-Restore示例" class="headerlink" title="Volume Snapshot/Restore示例"></a>Volume Snapshot/Restore示例</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194874-b4683ef0-f4a0-4cc0-b66e-9dea1f31bd99.png" alt="img"></p><p>下面来看一下存储快照如何使用：首先需要集群管理员，在集群中创建 VolumeSnapshotClass 对象，VolumeSnapshotClass 中一个重要字段就是 Snapshot，它是指定真正创建存储快照所使用的卷插件，这个卷插件是需要提前部署的，稍后再说这个卷插件。</p><p>接下来用户他如果要做真正的存储快照，需要声明一个 VolumeSnapshotClass，VolumeSnapshotClass 首先它要指定的是 VolumeSnapshotClassName，接着它要指定的一个非常重要的字段就是 source，这个 source 其实就是指定快照的数据源是啥。这个地方指定 name 为 disk-pvc，也就是说通过这个 pvc 对象来创建存储快照。提交这个 VolumeSnapshot 对象之后，集群中的相关组件它会找到这个 PVC 对应的 PV 存储，对这个 PV 存储做一次快照。</p><p>有了存储快照之后，那接下来怎么去用存储快照恢复数据呢？这个其实也很简单，通过声明一个新的 PVC 对象并在它的 spec 下面的 DataSource 中来声明我的数据源来自于哪个 VolumeSnapshot，这里指定的是 disk-snapshot 对象，当我这个 PVC 提交之后，集群中的相关组件，它会动态生成新的 PV 存储，这个新的 PV 存储中的数据就来源于这个 Snapshot 之前做的存储快照。 </p><h5 id="Local-PV-的示例"><a href="#Local-PV-的示例" class="headerlink" title="Local PV 的示例"></a>Local PV 的示例</h5><p>如下图看一下 Local PV 的 yaml 示例：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195580-5d8a0272-c8d2-480d-b68b-94b9b53ebaa6.png" alt="img"></p><p>Local PV 大部分使用的时候都是通过**<u>静态创建的方式</u>**，也就是要先去声明 PV 对象，既然 Local PV 只能是本地访问，就需要在声明 PV 对象的，在 PV 对象中通过 <u>nodeAffinity 来限制我这个 PV 只能在单 node 上访问，也就是给这个 PV 加上拓扑限制</u>。如上图拓扑的 key 用 kubernetes.io/hostname 来做标记，也就是只能在 node1 访问。如果想用这个 PV，你的 pod 必须要调度到 node1 上。</p><p>既然是静态创建 PV 的方式，这里为什么还需要 storageClassname 呢？<br>前面也说了，在 Local PV 中，如果要想让它正常工作，需要用到<strong>延迟绑定特性</strong>才行，那既然是延迟绑定，当用户在写完 PVC 提交之后，即使集群中有相关的 PV 能跟它匹配，它也暂时不能做匹配，也就是说 PV controller 不能马上去做 binding，这个时候你就要通过一种手段来告诉 PV controller，什么情况下是不能立即做 binding。这里的 storageClass 就是为了起到这个副作用，我们可以看到 storageClass 里面的 provisioner 指定的是 <strong>no-provisioner</strong>，其实就是相当于告诉 K8s 它不会去动态创建 PV，它主要用到 storageclass 的 VolumeBindingMode 字段，叫 <u>WaitForFirstConsumer</u>，可以先简单地认为它是延迟绑定。</p><p>当用户开始提交 PVC 的时候，pv controller 在看到这个 pvc 的时候，它会找到相应的 storageClass，发现这个 BindingMode 是延迟绑定，它就不会做任何事情。</p><p>之后当真正使用这个 pvc 的 pod，在调度的时候，当它恰好调度在符合 pv nodeaffinity 的 node 的上面后，这个 pod 里面所使用的 PVC 才会真正地与 PV 做绑定，这样就保证我 pod 调度到这台 node 上之后，这个 PVC 才与这个 PV 绑定，最终保证的是创建出来的 pod 能访问这块 Local PV，也就是静态 Provisioning 场景下怎么去满足 PV 的拓扑限制。 </p><h5 id="限制-Dynamic-Provisioning-PV-拓扑示例"><a href="#限制-Dynamic-Provisioning-PV-拓扑示例" class="headerlink" title="限制 Dynamic Provisioning PV 拓扑示例"></a>限制 Dynamic Provisioning PV 拓扑示例</h5><p>再看一下动态 Provisioning PV 的时候，怎么去做拓扑限制的？</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194620-720a4fa2-4edb-4f40-9fb3-ef1a55c0f51b.png" alt="img"></p><p>动态就是指动态创建 PV 就有拓扑位置的限制，那怎么去指定？ </p><p>首先在 storageclass 还是需要指定 BindingMode，就是 WaitForFirstConsumer，就是延迟绑定。 </p><p>其次特别重要的一个字段就是 <strong>allowedTopologies</strong>，限制就在这个地方。上图中可以看到拓扑限制是可用区的级别，这里其实有两层意思： </p><ol><li>第一层意思就是说我在动态创建 PV 的时候，创建出来的 PV 必须是在这个可用区可以访问的;</li><li>第二层含义是因为声明的是延迟绑定，那调度器在发现使用它的 PVC 正好对应的是该 storageclass 的时候，调度 pod 就要选择位于该可用区的 nodes。</li></ol><p>总之，就是要从两方面保证，<br>一是动态创建出来的存储时要能被这个可用区访问的，<br>二是我调度器在选择 node 的时候，要落在这个可用区内的，这样的话就保证我的存储和我要使用存储的这个 pod 它所对应的 node，它们之间的拓扑域是在同一个拓扑域，用户在写 PVC 文件的时候，写法是跟以前的写法是一样的，主要是在 storageclass 中要做一些拓扑限制。</p><h4 id="三、操作演示"><a href="#三、操作演示" class="headerlink" title="三、操作演示"></a><strong>三、操作演示</strong></h4><p>本节将在线上环境来演示一下前面讲解的内容。 </p><p>首先来看一下我的阿里云服务器上搭建的 K8s 服务。总共有 3 个 node 节点。一个 master 节点，两个 node。其中 master 节点是不能调度 pod 的。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194849-acd10ee0-b792-4838-a09b-c392b0b94874.png" alt="img"></p><p>再看一下，我已经提前把我需要的插件已经布好了，一个是 snapshot 插件 (csi-external-snapshot*)，一个是动态云盘的插件 (csi-disk*)。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194845-6d83d2dc-c3dc-41c0-b567-5210739e906e.png" alt="img"></p><p>现在开始 snapshot 的演示。首先去动态创建云盘，然后才能做 snapshot。动态创建云盘需要先创建 storageclass，然后去根据 PVC 动态创建 PV，然后再创建一个使用它的 pod 了。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195569-40bb1cca-b35a-41ce-87d5-651c581ff583.png" alt="img"></p><p>有个以上对象，现在就可以做 snapshot 了，首先看一下做 snapshot 需要的第一个配置文件：snapshotclass.yaml。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194835-dbeb8206-5bfa-44b7-83d1-9aab45261251.png" alt="img"></p><p>其实里面就是指定了在做存储快照的时候需要使用的插件，这个插件刚才演示了已经部署好了，就是 csi-external-snapshot-0 这个插件。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195666-f4bbca6b-9613-49de-b8cd-ecc1dcae4252.png" alt="img"></p><p>接下来创建 volume-snapshotclass 文件，创建完之后就开始了 snapshot。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194598-0e4fc921-904d-4ffc-9f41-81c1919c310c.png" alt="img"></p><p>然后看 snapshot.yaml，Volumesnapshot 声明创建存储快照了，这个地方就指定刚才创建的那个 PVC 来做的数据源来做 snapshot，那我们开始创建。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195665-00167b7b-a9a0-4134-8952-dc68af84a4aa.png" alt="img"></p><p>我们看一下 Snapshot 有没有创建好，如下图所示，content 已经在 11 秒之前创建好了。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194555-0c1ea298-ce1f-4db6-bd2f-71f7c14762f5.png" alt="img"></p><p>可以看一下它里面的内容，主要看 volumesnapshotcontent 记录的一些信息，这个是我 snapshot 出来之后，它记录的就是云存储厂商那边返回给我的 snapshot 的 ID。然后是这个 snapshot 数据源，也就是刚才指定的 PVC，可以通过它会找到对应的 PV。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195572-806015e9-fbfd-41e3-adf4-ec5cd3d7f6df.png" alt="img"></p><p>snapshot 的演示大概就是这样，把刚才创建的 snapshot 删掉，还是通过 volumesnapshot 来删掉。然后看一下，动态创建的这个 volumesnapshotcontent 也被删掉。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195577-5f02c4a5-7ba2-4f11-ad04-c3c14b8227ef.png" alt="img"></p><p>接下来看一下动态 PV 创建的过程加上一些拓扑限制，首先将的 storageclass 创建出来，然后再看一下 **<u>storageclass 里面做的限制</u>**，storageclass 首先还是指定它的 BindingMode 为 WaitForFirstConsumer，也就是做延迟绑定，然后是对它的拓扑限制，我这里面在 allowedTopologies 字段中配置了一个可用区级别的限制。  </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195576-5a4485c1-c5f7-4972-99e0-1d4490a309ca.png" alt="img"></p><p>来尝试创建一下的 PVC，PVC 创建出来之后，理论上它应该处在 pending 状态。看一下，它现在因为它要做延迟绑定，由于现在没有使用它的 pod，暂时没办法去做绑定，也没办法去动态创建新的 PV。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194562-57947007-a2bb-471d-87a3-e9c0589bf191.png" alt="img"></p><p>接下来创建使用该 pvc 的 pod 看会有什么效果，看一下 pod，pod 也处在 pending了。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195579-5a101390-ed6f-42f4-83c8-87af76bdcec2.png" alt="img"></p><p>那来看一下 pod 为啥处在 pending 状态，可以看一下是调度失败了，调度失败原因：一个 node 由于 taint 不能调度，这个其实是 master，另外两个 node 也是没有说是可绑定的 PV。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194843-3a326d47-9d36-437c-a760-106eeeb77eea.png" alt="img"></p><p>为什么会有两个 node 出现没有可绑定的 pv 的错误？不是动态创建么？ </p><p>我们来仔细看看 storageclass 中的拓扑限制，通过上面的讲解我们知道，这里限制使用该 storageclass 创建的 PV 存储必须在可用区 cn-hangzhou-d 可访问的，而使用该存储的 pod 也必须调度到 cn-hangzhou-d 的 node 上。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195574-deac570b-5185-4284-aa99-8bb7c5e9ea63.png" alt="img"></p><p>那就来看一下 node 节点上有没有这个拓扑信息，如果它没有当然是不行了。 </p><p>看一下第一个 node 的全量信息吧，主要找它的 <strong>labels 里面的信息</strong>，看 lables 里面的确有一个这样的 key。也就是说有一个这样的拓扑，但是这指定是 cn-hangzhou-b，刚才 storageclass 里面指定的是 cn-hangzhou-d。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194832-08995d91-f4c2-4456-a40f-0a488e389b89.png" alt="img"></p><p>那看一下另外的一个 node 上的这个拓扑信息写的也是 hangzhou-b，但是我们那个 storageclass 里面限制是 d。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195652-2e5b63f0-cb23-4ce6-9ac6-3aa0a321ac65.png" alt="img"></p><p>这就导致最终没办法将 pod 调度在这两个 node 上。现在我们修改一下 storageclass 中的拓扑限制，将 cn-hangzhou-d 改为 cn-hangzhou-b。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195897-0b8dea87-9b32-427b-bebd-b5ad44e0ba9e.png" alt="img"></p><p>改完之后再看一下，其实就是说我动态创建出来的 PV 要能被 hangzhou-b 这个可用区访问的，使用该存储的 pod 要调度到该可用区的 node 上。把之前的 pod 删掉，让它重新被调度看一下有什么结果，好，现在这个已经调度成功了，就是已经在启动容器阶段。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195584-9aeea04e-5b42-4b3e-b554-c8e73d6debf3.png" alt="img"></p><p>说明刚才把 storageclass 它里面的对可用区的限制从 hangzhou-d 改为 hangzhou-b 之后，集群中就有两个 node，它的拓扑关系是和 storageclass 里要求的拓扑关系是相匹配的，这样的话它就能保证它的 pod 是有 node 节点可调度的。上图中最后一点 Pod 已经 Running 了，说明刚才的拓扑限制改动之后可以 work 了。 </p><h4 id="四、处理流程"><a href="#四、处理流程" class="headerlink" title="四、处理流程"></a><strong>四、处理流程</strong></h4><h5 id="kubernetes-对-Volume-Snapshot-Restore-处理流程"><a href="#kubernetes-对-Volume-Snapshot-Restore-处理流程" class="headerlink" title="kubernetes 对 Volume Snapshot/Restore 处理流程"></a>kubernetes 对 Volume Snapshot/Restore 处理流程</h5><p>接下来看一下 K8s 中对存储快照与拓扑调度的具体处理流程。如下图所示：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194841-767c437e-975a-4eca-ba02-2b53de059698.png" alt="img"></p><p>首先来看一下存储快照的处理流程，这里来首先解释一下 csi 部分。K8s 中对存储的扩展功能都是推荐通过 csi out-of-tree 的方式来实现的。</p><p>csi 实现存储扩展主要包含两部分： </p><ul><li>第一部分是由 K8s 社区推动实现的 **<u>csi controller 部分</u>**，也就是这里的 csi-snapshottor controller 以及 csi-provisioner controller，这些主要是通用的 controller 部分;</li><li>另外一部分是由特定的云存储厂商用自身 OpenAPI 实现的不同的 csi-plugin 部分，也叫存储的 driver 部分。</li></ul><p>两部分部件通过 unix domain socket 通信连接到一起。有这两部分，才能形成一个真正的存储扩展功能。</p><p>如上图所示，当用户提交 VolumeSnapshot 对象之后，会被 csi-snapshottor controller watch 到。之后它会通过 GPPC 调用到 csi-plugin，**<u>csi-plugin 通过 OpenAPI 来真正实现存储快照的动作</u>**，等存储快照已经生成之后，会返回到 csi-snapshottor controller 中，csi-snapshottor controller 会将存储快照生成的相关信息放到 VolumeSnapshotContent 对象中并将用户提交的 VolumeSnapshot 做 bound。这个 bound 其实就有点类似 PV 和 PVC 的 bound 一样。</p><p>有了存储快照，如何去使用存储快照恢复之前的数据呢？前面也说过，通过声明一个新的 PVC 对象，并且指定他的 dataSource 为 Snapshot 对象，当提交 PVC 的时候会被 csi-provisioner watch 到，之后会通过 GRPC 去创建存储。这里创建存储跟之前讲解的 csi-provisioner 有一个不太一样的地方，就是它里面还指定了 Snapshot 的 ID，当去云厂商创建存储时，需要多做一步操作，即将之前的快照数据恢复到新创建的存储中。之后流程返回到 csi-provisioner，它会将新创建的存储的相关信息写到一个新的 PV 对象中，新的 PV 对象被 PV controller watch 到它会将用户提交的 PVC 与 PV 做一个 bound，之后 pod 就可以通过 PVC 来使用 Restore 出来的数据了。这是 K8s 中对存储快照的处理流程。 </p><h5 id="kubernetes-对-Volume-Topology-aware-Scheduling-处理流程"><a href="#kubernetes-对-Volume-Topology-aware-Scheduling-处理流程" class="headerlink" title="kubernetes 对 Volume Topology-aware Scheduling 处理流程"></a><strong>kubernetes</strong> 对 Volume Topology-aware Scheduling 处理流程</h5><p>接下来看一下存储拓扑调度的处理流程：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195594-a9b23a64-1fbd-48d2-9638-956aaf2ed4b8.png" alt="img"></p><p><strong>第一个步骤</strong>其实就是要去声明延迟绑定，这个通过 StorageClass 来做的，上面已经阐述过，这里就不做详细描述了。 </p><p>接下来看一下调度器，上图中红色部分就是调度器新加的存储拓扑调度逻辑，我们先来看一下不加红色部分时调度器的为一个 pod 选择 node 时，它的大概流程： </p><ul><li>首先用户提交完 pod 之后，会被调度器 watch 到，它就会去首先做**<u>预选</u>**，预选就是说它会将集群中的所有 node 都来与这个 pod 它需要的资源做匹配；</li><li>如果匹配上，就相当于这个 node 可以使用，当然可能不止一个 node 可以使用，最终会选出来一批 node；</li><li>然后再经过第二个阶段优选，优选就相当于我要对这些 node 做一个打分的过程，通过打分找到最匹配的一个 node；</li><li>之后调度器将调度结果写到 pod 里面的 spec.nodeName 字段里面，然后会被相应的 node 上面的 kubelet watch 到，最后就开始创建 pod 的整个流程。</li></ul><p>那现在看一下加上卷相关的调度的时候，筛选 node(<strong>第二个步骤</strong>)又是怎么做的？ </p><ul><li>先就要找到 pod 中使用的所有 PVC，找到已经 bound 的 PVC，以及需要延迟绑定的这些 PVC；</li><li>对于已经 bound 的 PVC，要 check 一下它对应的 PV 里面的 nodeAffinity 与当前 node 的拓扑是否匹配 。如果不匹配， 就说明这个 node 不能被调度。如果匹配，继续往下走，就要去看一下需要延迟绑定的 PVC；</li><li>对于需要延迟绑定的 PVC。先去获取集群中存量的 PV，满足 PVC 需求的，先把它全部捞出来，然后再将它们一一与当前的 node labels 上的拓扑做匹配，如果它们(存量的 PV)都不匹配，那就说明当前的存量的 PV 不能满足需求，就要进一步去看一下如果要动态创建 PV 当前 node 是否满足拓扑限制，也就是还要进一步去 check StorageClass 中的拓扑限制，如果 StorageClass 中声明的拓扑限制与当前的 node 上面已经有的 labels 里面的拓扑是相匹配的，那其实这个 node 就可以使用，如果不匹配，说明该 node 就不能被调度。</li></ul><p>经过这上面步骤之后，就找到了所有即满足 pod 计算资源需求又满足 pod 存储资源需求的所有 nodes。</p><p>当 node 选出来之后，<strong>第三个步骤</strong>就是调度器内部做的一个优化。这里简单过一下，就是更新经过预选和优选之后，pod 的 node 信息，以及 PV 和 PVC 在 scheduler 中做的一些 cache 信息。</p><p><strong>第四个步骤</strong>也是重要的一步，已经选择出来 node 的 Pod，不管其使用的 PVC 是要 binding 已经存在的 PV，还是要做动态创建 PV，这时就可以开始做。由调度器来触发，调度器它就会去更新 PVC 对象和 PV 对象里面的相关信息，然后去触发 PV controller 去做 binding 操作，或者是由 csi-provisioner 去做动态创建流程。 </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>通过对比 PVC&amp;PV 体系讲解了存储快照的相关 K8s 资源对象以及使用方法；</li><li>通过两个实际场景遇到的问题引出存储拓扑调度功能必要性，以及 K8s 中如何通过拓扑调度来解决这些问题；</li><li>通过剖析 K8s 中存储快照和存储拓扑调度内部运行机制，深入理解该部分功能的工作原理。</li></ol><p><strong><u>PS：本文摘录于阿里云公开课，仅供学习与参考。</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>snap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9_应用存储和持久化数据卷-核心知识</title>
    <link href="/2020/10/01/k8s-pv-pvc/"/>
    <url>/2020/10/01/k8s-pv-pvc/</url>
    
    <content type="html"><![CDATA[<h3 id="9-应用存储和持久化数据卷-核心知识"><a href="#9-应用存储和持久化数据卷-核心知识" class="headerlink" title="9_应用存储和持久化数据卷-核心知识"></a>9_应用存储和持久化数据卷-核心知识</h3><h4 id="一、Volumes-介绍"><a href="#一、Volumes-介绍" class="headerlink" title="一、Volumes 介绍"></a>一、Volumes 介绍</h4><h5 id="Pod-Volumes"><a href="#Pod-Volumes" class="headerlink" title="Pod Volumes"></a>Pod Volumes</h5><p>首先来看一下 Pod Volumes 的使用场景： </p><ul><li>场景一：如果 pod 中的某一个容器在运行时异常退出，被 kubelet 重新拉起之后，如何保证之前容器产生的重要数据没有丢失？</li><li>场景二：如果同一个 pod 中的多个容器想要共享数据，应该如何去做？ </li></ul><p>以上两个场景，其实都可以借助 Volumes 来很好地解决，接下来首先看一下 Pod Volumes 的常见类型： </p><ol><li>本地存储，常用的有 emptydir/hostpath；</li><li>网络存储：网络存储当前的实现方式有两种，一种是 in-tree，它的实现的代码是放在 K8s 代码仓库中的，随着k8s对存储类型支持的增多，这种方式会给k8s本身的维护和发展带来很大的负担；而第二种实现方式是 out-of-tree，它的实现其实是给 K8s 本身解耦的，通过抽象接口将不同存储的driver实现从k8s代码仓库中剥离，因此out-of-tree 是后面社区主推的一种实现网络存储插件的方式；</li><li>Projected Volumes：它其实是将一些配置信息，如 secret/configmap 用卷的形式挂载在容器中，让容器中的程序可以通过POSIX接口来访问配置数据；</li><li>PV 与 PVC 就是今天要重点介绍的内容。 </li></ol><h5 id="Persistent-Volumes"><a href="#Persistent-Volumes" class="headerlink" title="Persistent Volumes"></a>Persistent Volumes</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142680-ff878879-bc0b-4af6-800c-be6a29045595.png" alt="img"></p><p>接下来看一下 PV（Persistent Volumes）。既然已经有了 Pod Volumes，为什么又要引入 PV 呢？我们知道 pod 中声明的 volume 生命周期与 pod 是相同的，以下有几种常见的场景： </p><ul><li>场景一：pod 重建销毁，如用 Deployment 管理的 pod，在做镜像升级的过程中，会产生新的 pod并且删除旧的 pod ，那新旧 pod 之间如何复用数据？</li><li>场景二：宿主机宕机的时候，要把上面的 pod 迁移，这个时候 StatefulSet 管理的 pod，其实已经实现了带卷迁移的语义。这时通过 Pod Volumes 显然是做不到的；</li><li>场景三：多个 pod 之间，如果想要共享数据，应该如何去声明呢？我们知道，同一个 pod 中多个容器想共享数据，可以借助 Pod Volumes 来解决；当多个 pod 想共享数据时，Pod Volumes 就很难去表达这种语义；</li><li>场景四：如果要想对数据卷做一些功能扩展性，如：snapshot、resize 这些功能，又应该如何去做呢？ </li></ul><p>以上场景中，通过 Pod Volumes 很难准确地表达它的复用/共享语义，对它的扩展也比较困难。因此 K8s 中又引入了 <strong>Persistent Volumes</strong> 概念，它可以**<u>将存储和计算分离</u>**，通过不同的组件来管理存储资源和计算资源，然后解耦 pod 和 Volume 之间生命周期的关联。这样，当把 pod 删除之后，它使用的PV仍然存在，还可以被新建的 pod 复用。</p><h5 id="PVC-设计意图"><a href="#PVC-设计意图" class="headerlink" title="PVC 设计意图"></a>PVC 设计意图</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142654-db71605a-3f41-4e3d-a790-15a0548ab69c.png" alt="img"></p><p>了解 PV 后，应该如何使用它呢？ </p><p>用户在使用 PV 时其实是通过 PVC，为什么有了 PV 又设计了 PVC 呢？主要原因是为了**<u>简化K8s用户对存储的使用方式</u>**，做到职责分离。通常用户在使用存储的时候，只用声明所需的存储大小以及访问模式。 </p><p>访问模式是什么？其实就是：我要使用的存储是可以被多个node共享还是只能单node独占访问(注意是node level而不是pod level)？只读还是读写访问？用户只用关心这些东西，与存储相关的实现细节是不需要关心的。</p><p>通过 PVC 和 PV 的概念，将用户需求和实现细节解耦开，用户只用通过 PVC 声明自己的存储需求。PV是有集群管理员和存储相关团队来统一运维和管控，这样的话，就简化了用户使用存储的方式。可以看到，PV 和 PVC 的设计其实有点像面向对象的接口与实现的关系。用户在使用功能时，只需关心用户接口，不需关心它内部复杂的实现细节。</p><p>既然 PV 是由集群管理员统一管控的，接下来就看一下 PV 这个对象是怎么产生的。</p><h5 id="Static-Volume-Provisioning"><a href="#Static-Volume-Provisioning" class="headerlink" title="Static Volume Provisioning"></a>Static Volume Provisioning</h5><p>第一种产生方式：静态产生方式 - 静态 Provisioning。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142697-89ce0f33-57b7-4b02-b4e6-2a860233c87d.png" alt="img"></p><p>静态 Provisioning：由集群管理员事先去规划这个集群中的用户会怎样使用存储，它会先预分配一些存储，也就是预先创建一些 PV；然后用户在提交自己的存储需求（也就是 PVC）的时候，K8s 内部相关组件会帮助它把 PVC 和 PV 做绑定；之后用户再通过 pod 去使用存储的时候，就可以通过 PVC 找到相应的 PV，它就可以使用了。 </p><p>静态产生方式有什么不足呢？可以看到，首先需要集群管理员预分配，预分配其实是很难预测用户真实需求的。举一个最简单的例子：如果用户需要的是 20G，然而集群管理员在分配的时候可能有 80G 、100G 的，但没有 20G 的，这样就很难满足用户的真实需求，也会造成资源浪费。有没有更好的方式呢？ </p><h5 id="Dynamic-Volume-Provisioning"><a href="#Dynamic-Volume-Provisioning" class="headerlink" title="Dynamic Volume Provisioning"></a>Dynamic Volume Provisioning</h5><p>第二种访问方式：动态 Dynamic Provisioning。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142787-97d21240-2e27-4bae-8d7b-116933a7b882.png" alt="img"></p><p>动态供给是什么意思呢？就是说现在集群管理员不预分配 PV，他写了一个模板文件，这个模板文件是用来表示创建某一类型存储（块存储，文件存储等）所需的一些参数，这些参数是用户不关心的，给存储本身实现有关的参数。用户只需要提交自身的存储需求，也就是PVC文件，并在 PVC 中指定使用的存储模板（StorageClass）。 </p><p>K8s 集群中的管控组件，会结合 PVC 和 StorageClass 的信息动态，生成用户所需要的存储（PV），将 PVC 和 PV 进行绑定后，pod 就可以使用 PV 了。通过 StorageClass 配置生成存储所需要的存储模板，再结合用户的需求动态创建 PV 对象，做到按需分配，在没有增加用户使用难度的同时也解放了集群管理员的运维工作。 </p><h4 id="二、用例解读"><a href="#二、用例解读" class="headerlink" title="二、用例解读"></a>二、用例解读</h4><p>接下来看一下 Pod Volumes、PV、PVC 及 StorageClass 具体是如何使用的。 </p><h5 id="Pod-Volumes-的使用"><a href="#Pod-Volumes-的使用" class="headerlink" title="Pod Volumes 的使用"></a>Pod Volumes 的使用</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183143142-6d48cb91-883e-493b-8212-71447b9f8a15.png" alt="img"></p><p>首先来看一下 Pod Volumes 的使用。如上图左侧所示，我们可以在 pod yaml 文件中的 Volumes 字段中，声明我们卷的名字以及卷的类型。声明的两个卷，一个是用的是 emptyDir，另外一个用的是 hostPath，这两种都是本地卷。在容器中应该怎么去使用这个卷呢？它其实可以通过 volumeMounts 这个字段，volumeMounts 字段里面指定的 name 其实就是它使用的哪个卷，mountPath 就是容器中的挂载路径。</p><p>这里还有个 subPath，subPath 是什么？ </p><p>先看一下，这两个容器都指定使用了同一个卷，就是这个 cache-volume。那么，在多个容器共享同一个卷的时候，为了隔离数据，我们可以通过 subPath 来完成这个操作。它会在卷里面建立两个子目录，然后容器 1 往 cache 下面写的数据其实都写在子目录 cache1 了，容器 2 往 cache 写的目录，其数据最终会落在这个卷里子目录下面的 cache2 下。</p><p>还有一个 readOnly 字段，readOnly 的意思其实就是只读挂载，这个挂载你往挂载点下面实际上是没有办法去写数据的。 </p><p>另外emptyDir、hostPath 都是本地存储，它们之间有什么细微的差别呢？<strong>emptyDir 其实是在 pod 创建的过程中会临时创建的一个目录</strong>，这个目录随着 pod 删除也会被删除，里面的数据会被清空掉；hostPath 顾名思义，其实就是宿主机上的一个路径，在 pod 删除之后，这个目录还是存在的，它的数据也不会被丢失。这就是它们两者之间一个细微的差别。 </p><h5 id="静态-PV-使用"><a href="#静态-PV-使用" class="headerlink" title="静态 PV 使用"></a>静态 PV 使用</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142761-292b7d93-794b-4716-a793-5b449f2fdf13.png" alt="img"></p><p>接下来再看一下，PV 和 PVC 是怎么使用的。 </p><p>先看一个静态 PV 创建方式。静态 PV 的话，首先是由管理员来创建的，管理员我们这里以 NAS，就是阿里云文件存储为例。我需要先在阿里云的文件存储控制台上去创建 NAS 存储，然后把 NAS 存储的相关信息要填到 PV 对象中，这个 PV 对象预创建出来后，用户可以通过 PVC 来声明自己的存储需求，然后再去创建 pod。创建 pod 还是通过我们刚才讲解的字段把存储挂载到某一个容器中的某一个挂载点下面。</p><p>那么接下来看一下 yaml 怎么写。集群管理员首先是在云存储厂商那边先去把存储创建出来，然后把相应的信息填写到 PV 对象中。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142686-7af9e7d8-39c9-498f-bc76-309a754cff4f.png" alt="img"></p><p>刚刚创建的阿里云 NAS 文件存储对应的PV，有个比较重要的字段：</p><ul><li>capacity，即创建的这个存储的大小，</li><li>accessModes，创建出来的这个存储它的访问方式，我们后面会讲解总共有几种访问方式。 </li><li>ReclaimPolicy，ReclaimPolicy 的意思就是：这块存储在被使用后，等它的使用方 pod 以及 PVC 被删除之后，这个 PV 是应该被删掉还是被保留呢？其实就是PV的回收策略。</li></ul><p>接下来看看用户怎么去使用该PV对象。用户在使用存储的时候，需要先创建一个 PVC 对象。PVC 对象里面，只需要指定存储需求，不用关心存储本身的具体实现细节。存储需求包括哪些呢？首先是需要的大小，也就是 resources.requests.storage；然后是它的访问方式，即需要这个存储的访问方式，这里声明为ReadWriteMany，也即支持多node读写访问，这也是文件存储的典型特性。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142763-971253d8-0225-4261-bff8-db7b3066e83c.png" alt="img"></p><p>上图中左侧，可以看到这个声明：它的 size 和它的access mode，跟我们刚才静态创建这块 PV 其实是匹配的。这样的话，当用户在提交 PVC 的时候，K8s 集群相关的组件就会把 PV 的 PVC bound 到一起。之后，用户在提交 pod yaml 的时候，可以在卷里面写上 PVC声明，在 PVC声明里面可以通过 claimName 来声明要用哪个 PVC。这时，挂载方式其实跟前面讲的一样，当提交完 yaml 的时候，它可以通过 PVC 找到 bound 着的那个 PV，然后就可以用那块存储了。这是静态 Provisioning到被pod使用的一个过程。 </p><h5 id="动态-PV-使用"><a href="#动态-PV-使用" class="headerlink" title="动态 PV 使用"></a>动态 PV 使用</h5><p>然后再看一下动态 Provisioning。动态 Provisioning 上面提到过，系统管理员不再预分配 PV，而只是创建一个模板文件。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183143140-5f630597-d0c5-4914-942f-b962bb35d0c2.png" alt="img"></p><p>这个模板文件叫 <u><strong>StorageClass</strong></u>，在StorageClass里面，我们需要填的重要信息：第一个是 provisioner，provisioner 是什么？它其实就是说我当时创建 PV 和对应的存储的时候，应该用哪个存储插件来去创建。 </p><p>这些参数是通过k8s创建存储的时候，需要指定的一些细节参数。对于这些参数，用户是不需要关心的，像这里 regionld、zoneld、fsType 和它的类型。ReclaimPolicy跟我们刚才讲解的 PV 里的意思是一样的，就是说动态创建出来的这块 PV,当使用方使用结束、Pod 及 PVC 被删除后，这块 PV 应该怎么处理，我们这个地方写的是 delete，意思就是说当使用方 pod 和 PVC 被删除之后，这个 PV 也会被删除掉。</p><p>接下来看一下，集群管理员提交完 StorageClass，也就是提交创建 PV 的模板之后，用户怎么用，首先还是需要写一个 PVC 的文件。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142742-4e6b6359-5f21-4739-ae56-17e59b50e9a3.png" alt="img"></p><p>PVC 的文件里存储的大小、访问模式是不变的。现在需要新加一个字段，叫 StorageClassName，它的意思是指定动态创建PV的模板文件的名字，这里StorageClassName填的就是上面声明的csi-disk。 </p><p>在提交完 PVC之后，K8s 集群中的相关组件就会根据 PVC 以及对应的 StorageClass 动态生成这块 PV 给这个 PVC 做一个绑定，之后用户在提交自己的 yaml 时，用法和接下来的流程和前面的静态使用方式是一样的，通过 PVC 找到我们动态创建的 PV，然后把它挂载到相应的容器中就可以使用了。 </p><h5 id="PV-Spec-重要字段解析"><a href="#PV-Spec-重要字段解析" class="headerlink" title="PV Spec 重要字段解析"></a>PV Spec 重要字段解析</h5><p>接下来，我们讲解一下 PV 的一些重要字段：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142776-e32f5e5a-183b-4d34-a081-083c6f9d3f7e.png" alt="img"></p><ul><li><p><strong>Capacity</strong>：这个很好理解，就是存储对象的大小；</p></li><li><p><strong>AccessModes：</strong>也是用户需要关心的，就是说我使用这个 PV 的方式。它有三种使用方式。</p></li><li><ul><li>一种是单 node 读写访问；</li><li>第二种是多个 node 只读访问，是常见的一种数据的共享方式；</li><li>第三种是多个 node 上读写访问。</li></ul></li></ul><p>用户在提交 PVC 的时候，最重要的两个字段 —— Capacity 和 AccessModes。在提交 PVC 后，k8s 集群中的相关组件是如何去找到合适的 PV 呢？首先它是通过为 PV 建立的 AccessModes 索引找到所有能够满足用户的 PVC 里面的 AccessModes 要求的 PV list，然后根据PVC的 Capacity，StorageClassName, Label Selector 进一步筛选 PV，如果满足条件的 PV 有多个，选择 PV 的 size 最小的，accessmodes 列表最短的 PV，也即最小适合原则。</p><ul><li><p><strong>ReclaimPolicy</strong>：这个就是刚才提到的，我的用户方 PV 的 PVC 在删除之后，我的 PV 应该做如何处理？常见的有三种方式。</p></li><li><ul><li>第一种方式我们就不说了，现在 K8s 中已经不推荐使用了；</li><li>第二种方式 delete，也就是说 PVC 被删除之后，PV 也会被删除；</li><li>第三种方式 Retain，就是保留，保留之后，后面这个 PV 需要管理员来手动处理。</li></ul></li><li><p><strong>StorageClassName</strong>：StorageClassName 这个我们刚才说了，我们动态 Provisioning 时必须指定的一个字段，就是说我们要指定到底用哪一个模板文件来生成 PV ；</p></li><li><p><strong>NodeAffinity</strong>：就是说我创建出来的 PV，它能被哪些 node 去挂载使用，其实是有限制的。然后通过 NodeAffinity 来声明对node的限制，这样其实对 使用该PV的pod调度也有限制，就是说 pod 必须要调度到这些能访问 PV 的 node 上，才能使用这块 PV，这个字段在我们下一讲讲解存储拓扑调度时在细说。 </p></li></ul><h5 id="PV-状态流转"><a href="#PV-状态流转" class="headerlink" title="PV 状态流转"></a>PV 状态流转</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142771-65951703-fda1-423f-a61c-a1890242e0a5.png" alt="img"></p><p>接下来我们看一下 PV 的状态流转。首先在创建 PV 对象后，它会处在短暂的pending 状态；等真正的 PV 创建好之后，它就处在 available 状态。 </p><p>available 状态意思就是可以使用的状态，用户在提交 PVC 之后，被 K8s 相关组件做完 bound（即：找到相应的 PV），这个时候 PV 和 PVC 就结合到一起了，此时两者都处在 bound 状态。当用户在使用完 PVC，将其删除后，这个 PV 就处在 released 状态，之后它应该被删除还是被保留呢？这个就会依赖我们刚才说的 ReclaimPolicy。 </p><p>这里有一个点需要特别说明一下：当 PV 已经处在 released 状态下，它是没有办法直接回到 available 状态，也就是说接下来无法被一个新的 PVC 去做绑定。如果我们想把已经 released 的 PV 复用，我们这个时候通常应该怎么去做呢？</p><p>第一种方式：我们可以新建一个 PV 对象，然后把之前的 released 的 PV 的相关字段的信息填到新的 PV 对象里面，这样的话，这个 PV 就可以结合新的 PVC 了；<br>第二种是我们在删除 pod 之后，不要去删除 PVC 对象，这样给 PV 绑定的 PVC 还是存在的，下次 pod 使用的时候，就可以直接通过 PVC 去复用。K8s中的 StatefulSet 管理的 Pod 带存储的迁移就是通过这种方式。 </p><h4 id="三、操作演示"><a href="#三、操作演示" class="headerlink" title="三、操作演示"></a>三、操作演示</h4><p>接下来，我会在实际的环境中给大家演示一下，静态 Provisioning 以及动态 Provisioning 具体操作方式。 </p><h5 id="静态-Provisioning-例子"><a href="#静态-Provisioning-例子" class="headerlink" title="静态 Provisioning 例子"></a>静态 Provisioning 例子</h5><p>静态 Provisioning 主要用的是阿里云的 NAS 文件存储；动态 Provisioning 主要用了阿里云的云盘。它们需要相应存储插件，插件我已经提前部署在我的 K8s 集群中了(csi-nasplugin<em>是为了在k8s中使用阿里云NAS所需的插件，csi-disk</em>是为了在k8s中使用阿里云云盘所需要的插件)。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142799-7b1ddb65-7430-4571-a9d9-3e40efad1eca.png" alt="img"></p><p>我们接下来先看一下静态 Provisioning 的 PV 的 yaml 文件。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142922-6098bf94-06c1-4e9a-820e-3acb25e8717a.png" alt="img"></p><p>volumeAttributes是我在阿里云nas控制台预先创建的 NAS 文件系统的相关信息，我们主要需要关心的有 capacity 为5Gi; accessModes 为多node读写访问; reclaimPolicy：Retain，也就是当我使用方的 PVC 被删除之后，我这个 PV 是要保留下来的；以及在使用这个卷的过程中使用的driver。 </p><p>然后我们把对应的 PV 创建出来： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142778-4413c063-dd80-4fa9-b106-b0f8248ed33a.png" alt="img"></p><p>我们看一下上图 PV 的状态，已经处在 Available，也就是说它已经可以被使用了。 </p><p>再创建出来 nas-pvc： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142829-f428ba6b-bdb0-4f09-a897-7aef501c68ae.png" alt="img"></p><p>我们看这个时候 PVC 已经新创建出来了，而且也已经和我们上面创建的PV绑定到一起了。我们看一下 PVC 的 yaml 里面写的什么。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142752-b2e587ba-f211-4476-b674-b46f42b8fc6b.png" alt="img"></p><p>其实很简单 ，就是我需要的大小以及我需要的 accessModes。提交完之后，它就与我们集群中已经存在的 PV 做匹配，匹配成功之后，它就会做 bound。 </p><p>接下来我们去创建使用 nas-fs 的 pod： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142771-8e3b5746-9c5b-42f9-b305-b1f228f7ebe3.png" alt="img"></p><p>上图看到，这两个 Pod 都已经处在 running 状态了。 </p><p>我们先看一下这个 pod yaml： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142775-36251fad-04f0-4308-9f9c-4cc06d60e16e.png" alt="img"></p><p>pod yaml 里面声明了刚才我们创建出来的 PVC 对象，然后把它挂载到 nas-container 容器中的 /data 下面。我们这个 pod 是通过前面课程中讲解 deployment 创建两个副本，通过反亲和性，将两个副本调度在不同的 node 上面。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142793-ef81475d-3a92-450d-adb7-5ad1ac1f736a.png" alt="img"></p><p>上图我们可以看一下，两个Pod所在的宿主机是不一样的。 </p><p>如下图所示：我们登陆到第一个上面，findmnt 看一下它的挂载信息，这个其实就挂载在我声明的 nas-fs 上，那我们再在下面 touch 个 test.test.test 文件，我们也会登陆到另外一个容器看一下，它有没有被共享。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142785-3fa99dab-8a0d-4b24-9f1d-2923f4ec9f37.png" alt="img"></p><p>我们退出再登陆另外一个 pod（刚才登陆的是第一个，现在登陆第二个）。 </p><p>如下图所示：我们也 findmnt 一下，可以看到，这两个 pod 的远程挂载路径一样，也就是说我们用的是同一个 NAS PV，我们再看一下刚才创建出来的那个是否存在。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183143230-195ac117-7898-440c-a4cd-f0473c9b68c4.png" alt="img"></p><p>可以看到，这个也是存在的，就说明这两个运行在不同node上的 pod 共享了同一个 nas 存储。 </p><p>接下来我们看一下把两个 pod 删掉之后的情况。先删Pod，接着再删一下对应的 PVC (K8s 内部对 pvc 对象由保护机制，在删除 pvc 对象时如果发现有 pod 在使用 pvc，pvc 是删除不掉的)，这个可能要稍等一下。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142833-894c08f6-d5ec-47d2-b352-29d4d4bd8d7f.png" alt="img"></p><p>看一下下图对应的 PVC 是不是已经被删掉了。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142924-79551ae3-35d0-41bd-bce9-6290664712b8.png" alt="img"> </p><p>上图显示，它已经被删掉了。再看一下，刚才的 nas PV 还是在的，它的状态是处在 Released 状态，也就是说刚才使用它的 PVC 已经被删掉了，然后它被 released 了。又因为我们 RECLAIN POLICY 是 Retain，所以它这个 PV 是被保留下来的。</p><h5 id="动态-Provisioning-例子"><a href="#动态-Provisioning-例子" class="headerlink" title="动态 Provisioning 例子"></a>动态 Provisioning 例子</h5><p>接下来我们来看第二个例子，动态 Provisioning 的例子。我们先把保留下来的 PV 手动删掉，可以看到集群中没有 PV了。接下来演示一下动态 Provisioning。</p><p>首先，先去创建一个生成 PV 的模板文件，也就是 storageclass。看一下 storageclass 里面的内容，其实很简单。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142849-067f8f3f-362f-4a16-bd96-1b6ce4bf2f98.png" alt="img"></p><p>如上图所示，我事先指定的是我要创建存储的卷插件(阿里云云盘插件，由阿里云团队开发)，这个我们已经提前部署好了；我们可以看到，parameters部分是创建存储所需要的一些参数，但是用户不需要关心这些信息；然后是 reclaimPolicy，也就是说通过这个 storageclass 创建出来的 PV 在给绑定到一起的 PVC 删除之后，它是要保留还是要删除。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183143027-a4adbf5f-8843-46c8-9ef7-de33c7ef8e41.png" alt="img"></p><p>如上图所示：现在这个集群中是没有 PV 的，我们动态提交一个 PVC 文件，先看一下它的 PVC 文件。它的 accessModes-ReadWriteOnce (因为阿里云云盘其实只能是单 node 读写的，所以我们声明这样的方式），它的存储大小需求是 30G，它的 storageClassName 是 csi-disk，就是我们刚才创建的 storageclass，也就是说它指定要通过这个模板去生成 PV。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142941-c8871c9e-533a-494f-9cec-22e1a01e30e6.png" alt="img"></p><p>这个 PVC 此时正处在 pending 状态，这就说明它对应的 PV 还在创建过程中。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142826-e13183e0-37b8-4d49-bf65-7adb2587134b.png" alt="img"></p><p>稍过一会，我们看到已经有一个新的 PV 生成，这个 PV 其实就是根据我们提交的 PVC 以及 PVC 里面指定的storageclass 动态生成的。之后k8s会将生成的 PV 以及我们提交的 PVC，就是这个 disk PVC 做绑定，之后我们就可以通过创建 pod 来使用了。 </p><p>再看一下 pod yaml： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142973-db26a557-8349-4b2e-9129-38523f27b8f2.png" alt="img"></p><p>pod yaml 很简单，也是通过 PVC 声明，表明使用这个 PVC。然后是挂载点，下面我们可以创建看一下。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142865-3b9f7f1d-b8ee-4f69-a945-dac9bdbc1dbb.png" alt="img"></p><p>如下图所示：我们可以大概看一下 Events，首先被调度器调度，调度完之后，接下来会有个 attachdetach controller，它会去做 disk的attach操作，就是把我们对应的 PV 挂载到调度器调度的 node 上，然后Pod对应的容器才能启动，启动容器才能使用对应的盘。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142974-bde37cbb-0098-4d8c-a2f5-553daba2b63f.png" alt="img"></p><p>接下来我会把 PVC 删掉，看一下PV 会不会根据我们的 reclaimPolicy 随之删掉呢？我们先看一下，这个时候 PVC 还是存在的，对应的 PV 也是存在的。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142822-bfdeb6cd-ef50-4e3a-baa4-30e1a4ea392b.png" alt="img"></p><p>然后删一下 PVC，删完之后再看一下：我们的 PV 也被删了，也就是说根据 reclaimPolicy，我们在删除 PVC 的同时，PV 也会被删除掉。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183143032-f934fd52-657c-49c5-881a-570f1eb37af4.png" alt="img"></p><p><strong><u>PS：本文摘录于阿里云公开课，仅供学习与参考。</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>pv</tag>
      
      <tag>pvc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8_应用配置管理</title>
    <link href="/2020/09/30/k8s-config/"/>
    <url>/2020/09/30/k8s-config/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="8-应用配置管理"><a href="#8-应用配置管理" class="headerlink" title="8_应用配置管理"></a>8_应用配置管理</h3><h4 id="一、需求来源"><a href="#一、需求来源" class="headerlink" title="一、需求来源"></a>一、需求来源</h4><h5 id="背景问题"><a href="#背景问题" class="headerlink" title="背景问题"></a>背景问题</h5><p>首先一起来看一下需求来源。大家应该都有过这样的经验，就是用一个容器镜像来启动一个 container。要启动这个容器，其实有很多需要配套的问题待解决： </p><ul><li>第一，比如说一些可变的配置。因为我们不可能把一些可变的配置写到镜像里面，当这个配置需要变化的时候，可能需要我们重新编译一次镜像，这个肯定是不能接受的；</li><li>第二就是一些敏感信息的存储和使用。比如说应用需要使用一些密码，或者用一些 token；</li><li>第三就是我们容器要访问集群自身。比如我要访问 kube-apiserver，那么本身就有一个身份认证的问题；</li><li>第四就是容器在节点上运行之后，它的资源需求；</li><li>第五个就是容器在节点上，它们是共享内核的，那么它的一个安全管控怎么办？</li><li>最后一点我们说一下容器启动之前的一个前置条件检验。比如说，一个容器启动之前，我可能要确认一下 DNS 服务是不是好用？又或者确认一下网络是不是联通的？那么这些其实就是一些前置的校验。</li></ul><h5 id="Pod-的配置管理"><a href="#Pod-的配置管理" class="headerlink" title="Pod 的配置管理"></a>Pod 的配置管理</h5><p>在 Kubernetes 里面，它是怎么做这些配置管理的呢？如下图所示：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099813-497a7a72-37dd-4dac-8470-ab3605842537.png" alt="img"></p><ul><li>可变配置就用 ConfigMap；</li><li>敏感信息是用 Secret；</li><li>身份认证是用 ServiceAccount 这几个独立的资源来实现的；</li><li>资源配置是用 Resources；</li><li>安全管控是用 SecurityContext；</li><li>前置校验是用 InitContainers 这几个在 spec 里面加的字段，来实现的这些配置管理。</li></ul><h4 id="二、ConfigMap"><a href="#二、ConfigMap" class="headerlink" title="二、ConfigMap"></a>二、ConfigMap</h4><h5 id="ConfigMap-介绍"><a href="#ConfigMap-介绍" class="headerlink" title="ConfigMap 介绍"></a>ConfigMap 介绍</h5><p>下面我们来介绍第一个部分，就是 ConfigMap。我们先来介绍 ConfigMap 它是用来做什么的、以及它带来的一个好处。它其实主要是管理一些可变配置信息，比如说我们应用的一些配置文件，或者说它里面的一些环境变量，或者一些命令行参数。</p><p>它的好处在于它可以让一些可变配置和容器镜像进行解耦，这样也保证了容器的可移植性。看一下下图中右边的编排文件截图。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099834-c711cac4-c106-49ab-b1f6-44087a7007b9.png" alt="img"></p><p>这是 ConfigMap 本身的一个定义，它包括两个部分：一个是 ConfigMap 元信息，我们关注 name 和 namespace 这两个信息。接下来这个 data 里面，可以看到它管理了两个配置文件。它的结构其实是这样的：从名字看ConfigMap中包含Map单词，Map 其实就是 key:value，key 是一个文件名，value 是这个文件的内容。 </p><h5 id="ConfigMap-创建"><a href="#ConfigMap-创建" class="headerlink" title="ConfigMap 创建"></a>ConfigMap 创建</h5><p>看过介绍之后，再具体看一下它是怎么创建的。我们推荐用 kubectl 这个命令来创建，它带的参数主要有两个：一个是指定 name，第二个是 DATA。其中 DATA 可以通过指定文件或者指定目录，以及直接指定键值对，下面可以看一下这个例子。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099830-822f173a-a7c0-4224-986f-fe0aa1e85a1f.png" alt="img"></p><p>指定文件的话，文件名就是 Map 中的 key，文件内容就是 Map 中的 value。然后指定键值对就是指定数据键值对，即：key:value 形式，直接映射到 Map 的key:value。 </p><h5 id="ConfigMap-使用"><a href="#ConfigMap-使用" class="headerlink" title="ConfigMap 使用"></a>ConfigMap 使用</h5><p>创建完了之后，应该怎么使用呢？ </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099844-08539daa-9d99-4e00-8c00-dd7204e81f6a.png" alt="img"></p><p>如上图所示，主要是在 pod 里来使用 ConfigMap： </p><ul><li>第一种是环境变量。环境变量的话通过 <u>valueFrom</u>，然后 ConfigMapKeyRef 这个字段，下面的 name 是指定 ConfigMap 名，key 是 ConfigMap.data 里面的 key。这样的话，在 busybox 容器启动后容器中执行 env 将看到一个 SPECIAL_LEVEL_KEY 环境变量；</li><li>第二个是命令行参数。命令行参数其实是第一行的环境变量直接拿到 cmd 这个字段里面来用；</li><li>最后一个是通过 volume 挂载的方式直接挂到容器的某一个目录下面去。上面的例子是把 special-config 这个 ConfigMap 里面的内容挂到容器里面的 /etc/config 目录下，这个也是使用的一种方式。 </li></ul><h5 id="ConfigMap-注意要点"><a href="#ConfigMap-注意要点" class="headerlink" title="ConfigMap 注意要点"></a>ConfigMap 注意要点</h5><p>现在对 ConfigMap 的使用做一个总结，以及它的一些注意点，注意点一共列了以下五条：</p><ol><li>ConfigMap 文件的大小。虽然说 ConfigMap 文件没有大小限制，但是在 ETCD 里面，数据的写入是有大小限制的，现在是限制在 1MB 以内；</li><li>第二个注意点是 pod 引入 ConfigMap 的时候，必须是相同的 Namespace 中的 ConfigMap，前面其实可以看到，ConfigMap.metadata 里面是有 namespace 字段的；</li><li>第三个是 pod 引用的 ConfigMap。假如这个 ConfigMap 不存在，那么这个 pod 是无法创建成功的，其实这也表示在创建 pod 前，必须先把要引用的 ConfigMap 创建好；</li><li>第四点就是使用 envFrom 的方式。把 ConfigMap 里面所有的信息导入成环境变量时，如果 ConfigMap 里有些 key 是无效的，比如 key 的名字里面带有数字，那么这个环境变量其实是不会注入容器的，它会被忽略。但是这个 pod 本身是可以创建的。这个和第三点是不一样的方式，是 ConfigMap 文件存在基础上，整体导入成环境变量的一种形式；</li><li>最后一点是：什么样的 pod 才能使用 ConfigMap？这里只有通过 K8s api 创建的 pod 才能使用 ConfigMap，比如说通过用命令行 kubectl 来创建的 pod，肯定是可以使用 ConfigMap 的，但其他方式创建的 pod，比如说 kubelet 通过 manifest 创建的 static pod，它是不能使用 ConfigMap 的。 </li></ol><h4 id="三、Secret"><a href="#三、Secret" class="headerlink" title="三、Secret"></a>三、Secret</h4><h5 id="Secret-介绍"><a href="#Secret-介绍" class="headerlink" title="Secret 介绍"></a>Secret 介绍</h5><p>现在我们讲一下 Secret，Secret 是一个主要用来存储密码 token 等一些敏感信息的资源对象。其中，敏感信息是采用 base-64 编码保存起来的，我们来看下图中 Secret 数据的定义。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099976-da6d07c3-7621-4267-9f12-bd7941140805.png" alt="img"></p><p>元数据的话，里面主要是 name、namespace 两个字段；接下来是 type，它是非常重要的一个字段，是指 Secret 的一个类型。Secret 类型种类比较多，下面列了常用的四种类型： </p><ul><li>第一种是 Opaque，它是普通的 Secret 文件；</li><li>第二种是 service-account-token，是用于 service-account 身份认证用的 Secret；</li><li>第三种是 dockerconfigjson，这是拉取私有仓库镜像的用的一种 Secret；</li><li>第四种是 bootstrap.token，是用于节点接入集群校验用的 Secret。</li></ul><p>再接下来是 data，是存储的 Secret 的数据，它也是 key-value 的形式存储的。</p><h5 id="Secret-创建"><a href="#Secret-创建" class="headerlink" title="Secret 创建"></a>Secret 创建</h5><p>接下来我们看一下 Secret 的创建。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099877-5f114820-2b5d-4bd6-afd5-5316e0fad572.png" alt="img"></p><p>如上图所示，有两种创建方式： </p><ul><li><p>系统创建：比如 K8s 为每一个 namespace 的默认用户（default ServiceAccount）创建 Secret； </p></li><li><p>用户手动创建：手动创建命令，推荐 kubectl 这个命令行工具，它相对 ConfigMap 会多一个 type 参数。其中 data 也是一样，它也是可以指定文件和键值对的。type 的话，要是你不指定的话，默认是 Opaque 类型。 </p></li></ul><p>上图中两个例子。第一个是通过指定文件，创建了一个拉取私有仓库镜像的 Secret，指定的文件是 /root/.docker/config.json。type 的话指定的是 dockerconfigjson，另外一个我们指定键值对，我们 type 没有指定，默认是 Opaque。键值对是 key:value 的形式，其中对 value 内容进行 base64 加密。创建 Secret 就是这么一个情况。</p><h5 id="Secret-使用"><a href="#Secret-使用" class="headerlink" title="Secret 使用"></a>Secret 使用</h5><p>创建完 Secret 之后，再来看一下如何使用它。它主要是被 pod 来使用，一般是通过 volume 形式挂载到容器里指定的目录，然后容器里的业务进程再到目录下读取 Secret 来进行使用。另外在需要访问私有镜像仓库时，也是通过引用 Secret 来实现。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183100059-4f91fb50-2882-456f-bafc-1ab7a462c101.png" alt="img"></p><p>我们先来看一下挂载到用户指定目录的方式： </p><ul><li>第一种方式：如上图左侧所示，用户直接指定，把 mysecret 挂载到容器 /etc/foo 目录下面；</li><li>第二种方式：如上图右侧所示，系统自动生成，把 serviceaccount-secret 自动挂载到容器 /var/run/secrets/kubernetes.io/serviceaccount 目录下，它会生成两个文件，一个是 ca.crt，一个是 token。这是两个保存了认证信息的证书文件。 </li></ul><h5 id="使用私有镜像库"><a href="#使用私有镜像库" class="headerlink" title="使用私有镜像库"></a>使用私有镜像库</h5><p>下面看一下用 Secret 来使用私有镜像仓库。首先，私有镜像仓库的信息是存储在 Secret 里面的(具体参照上述的Secret创建章节)，然后拉取私有仓库镜像，那么通过下图中两种方法的配置就可以： </p><ul><li>第一种方式：如下图左侧所示，直接在 pod 里面，通过 imagePullSecrets 字段来配置；</li><li>第二种方式是自动注入。用户提前在 pod 会使用的 serviceaccount 里配置 imagePullSecrets，Pod创建时系统自动注入这个 imagePullSecrets。 </li></ul><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183100021-7d849ab8-0db9-4136-ae12-538757e15dcf.png" alt="img"></p><h5 id="Secret-使用注意要点"><a href="#Secret-使用注意要点" class="headerlink" title="Secret 使用注意要点"></a>Secret 使用注意要点</h5><p>最后来看一下 Secret 使用的一些注意点，下面列了三点： </p><ol><li>第一个是 Secret 的文件大小限制。这个跟 ConfigMap 一样，也是 1MB；</li><li>第二个是 Secret 采用了 base-64 编码，但是它跟明文也没有太大区别。所以说，如果有一些机密信息要用 Secret 来存储的话，还是要很慎重考虑。也就是说谁会来访问你这个集群，谁会来用你这个 Secret，还是要慎重考虑，因为它如果能够访问这个集群，就能拿到这个 Secret。</li><li>如果是对 Secret 敏感信息要求很高，对加密这块有很强的需求，推荐可以使用 Kubernetes 和开源的 vault做一个解决方案，来解决敏感信息的加密和权限管理。</li><li>第三个就是 Secret 读取的最佳实践，建议不要用 list/watch，如果用 list/watch 操作的话，会把 namespace 下的所有 Secret 全部拉取下来，这样其实暴露了更多的信息。推荐使用 GET 的方法，这样只获取你自己需要的那个 Secret。 </li></ol><h4 id="四、ServiceAccount"><a href="#四、ServiceAccount" class="headerlink" title="四、ServiceAccount"></a>四、ServiceAccount</h4><h5 id="ServiceAccount-介绍"><a href="#ServiceAccount-介绍" class="headerlink" title="ServiceAccount 介绍"></a>ServiceAccount 介绍</h5><p>接下来，我们讲一下 ServiceAccount。ServiceAccount 首先是用于解决 pod 在集群里面的身份认证问题，身份认证信息是存在于 Secret 里面。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099866-ccdbfee9-2885-4fa0-9c64-dd8f87b13986.png" alt="img"></p><p>先看一下上面的左侧截图，可以看到最下面的红框里，有一个 Secret 字段，它指定 ServiceAccount 用哪一个 Secret，这个是 K8s 自动为 ServiceAccount 加上的。</p><p>然后再来看一下上图中的右侧截图，它对应的 Secret 的 data 里有两块数据，一个是 ca.crt，一个是 token。ca.crt 用于对服务端的校验，token 用于 Pod 的身份认证，它们都是用 base64 编码过的。然后可以看到 metadata 即元信息里，其实是有关联 ServiceAccount 信息的（这个 secret 被哪个 ServiceAccount 使用）。最后我们注意一下 type，这个就是 service-account-token 这种类型。</p><h5 id="举例：Pod-里的应用访问它所属的-K8s-集群"><a href="#举例：Pod-里的应用访问它所属的-K8s-集群" class="headerlink" title="举例：Pod 里的应用访问它所属的 K8s 集群"></a>举例：Pod 里的应用访问它所属的 K8s 集群</h5><p>介绍完 ServiceAccount 以及它对应的 secret 后，我们来看一下，pod 是怎么利用 ServiceAccount 或者说它是怎么利用 secret 来访问所属 K8s 集群的。</p><p>其实 pod 创建的时候，首先它会把这个 secret 挂载到容器固定的目录下，这是 K8s 功能上实现的。它要把这个 ca.crt 和 token 这两个文件挂载到固定目录下面。</p><p>pod 要访问集群的时候，它是怎么来利用这个文件的呢？我们看一下下面的代码截图：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/97598/1568601011965-6c5b33b7-a8ba-417b-898c-55a537837f88.png" alt="image.png"></p><p>我们在 Go 里面实现 Pod 访问 K8s 集群时，一般直接会调一个 InClusterConfig 方法，来生成这个访问服务 Client 的一些信息。然后可以看一下，最后这个 Config 里面有两部分信息： </p><ul><li>一个是 tlsClientConfig，这个主要是用于 ca.crt 校验服务端；</li><li>第二个是 Bearer Token，这个就是 pod 的身份认证。在服务端，会利用 token 对 pod 进行一个身份认证。 </li></ul><p>再次回到上图左侧。认证完之后 pod 的身份信息会有两部分：一个是 Group，一个是 User。身份认证是就是认证这两部分信息。接着可以使用 RBAC 功能，对 pod 进行一个授权管理。 </p><p>假如 RBAC 没有配置的话，默认的 pod 具有资源 GET 权限，就是可以从所属的 K8s 集群里 get 数据。如果是需要更多的权限，那么就需要 自行配置 RBAC 。RBAC 的相关知识，我们在后面的课程里面会详细介绍，大家可以关注一下。 </p><h4 id="五、Resource"><a href="#五、Resource" class="headerlink" title="五、Resource"></a>五、Resource</h4><h5 id="容器资源配合管理"><a href="#容器资源配合管理" class="headerlink" title="容器资源配合管理"></a>容器资源配合管理</h5><p>下面介绍一下 Resource，即：容器的一个资源配置管理。 </p><p>目前内部支持类型有三种：CPU、内存，以及临时存储。当用户觉得这三种不够，有自己的一些资源，比如说 GPU，或者其他资源，也可以自己来定义，但配置时，指定的数量<strong>必须为整数</strong>。目前资源配置主要分成 request 和 limit 两种类型，一个是需要的数量，一个是资源的界限。CPU、内存以及临时存储都是在 container 下的 Resource 字段里进行一个声明。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099875-7b9386c5-d1be-4621-9f39-634da356f902.png" alt="img"></p><p>举个例子，wordpress 容器的资源需求，一个是 request ，一个是 limits，它分别对需要的资源和资源临界进行一个声明。 </p><h5 id="Pod-服务质量-QoS-配置"><a href="#Pod-服务质量-QoS-配置" class="headerlink" title="Pod 服务质量 (QoS) 配置"></a>Pod 服务质量 (QoS) 配置</h5><p>根据 CPU 对容器内存资源的需求，我们对 pod 的服务质量进行一个分类，分别是 Guaranteed、Burstable 和 BestEffort。 </p><ul><li>Guaranteed ：pod 里面每个容器都必须有内存和 CPU 的 request 以及 limit 的一个声明，且 request 和 limit 必须是一样的，这就是 Guaranteed；</li><li>Burstable：Burstable 至少有一个容器存在内存和 CPU 的一个 request；</li><li>BestEffort：只要不是 Guaranteed 和 Burstable，那就是 BestEffort。 </li></ul><p>那么这个服务质量是什么样的呢？资源配置好后，当这个节点上 pod 容器运行，比如说节点上 memory 配额资源不足，kubelet会把一些低优先级的，或者说服务质量要求不高的（如：BestEffort、Burstable）pod 驱逐掉。它们是按照先去除 BestEffort，再去除 Burstable 的一个顺序来驱逐 pod 的。 </p><h4 id="六、SecurityContext"><a href="#六、SecurityContext" class="headerlink" title="六、SecurityContext"></a>六、SecurityContext</h4><h5 id="SecurityContext-介绍"><a href="#SecurityContext-介绍" class="headerlink" title="SecurityContext 介绍"></a>SecurityContext 介绍</h5><p>SecurityContext 主要是用于限制容器的一个行为，它能保证系统和其他容器的安全。这一块的能力不是 Kubernetes 或者容器 runtime 本身的能力，而是 Kubernetes 和 runtime 通过用户的配置，最后下传到内核里，再通过内核的机制让 SecurityContext 来生效。所以这里讲的内容，会比较简单或者说比较抽象一点。 </p><p>SecurityContext 主要分为三个级别：</p><ul><li>第一个是容器级别，仅对容器生效；</li><li>第二个是 pod 级别，对 pod 里所有容器生效；</li><li>第三个是集群级别，就是 PSP，对集群内所有 pod 生效。 </li></ul><p>权限和访问控制设置项，现在一共列有七项（这个数量后续可能会变化）： </p><ol><li>第一个就是通过用户 ID 和组 ID 来控制文件访问权限；</li><li>第二个是 SELinux，它是通过策略配置来控制用户或者进程对文件的访问控制；</li><li>第三个是特权容器；</li><li>第四个是 Capabilities，它也是给特定进程来配置一个 privileged 能力；</li><li>第五个是 AppArmor，它也是通过一些配置文件来控制可执行文件的一个访问控制权限，比如说一些端口的读写；</li><li>第六个是一个对系统调用的控制；</li><li>第七个是对子进程能否获取比父亲更多的权限的一个限制。 </li></ol><p>最后其实都是落到内核来控制它的一些权限。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099889-d71fa9b5-2000-4236-ba4d-25c678553bb2.png" alt="img"></p><p> 上图是对 pod 级别和容器级别配置 SecurityContext 的一个例子，如果大家对这些内容有更多的需求，可以根据这些信息去搜索更深入的资料来学习。</p><h4 id="七、InitContainer"><a href="#七、InitContainer" class="headerlink" title="七、InitContainer"></a>七、InitContainer</h4><h5 id="InitContainer-介绍"><a href="#InitContainer-介绍" class="headerlink" title="InitContainer 介绍"></a>InitContainer 介绍</h5><p>接下来看一下 InitContainer，首先介绍 InitContainer 和普通 container 的区别，有以下三点内容：</p><ol><li>InitContainer 首先会比普通 container 先启动，并且直到所有的 InitContainer 执行成功后，普通 container 才会被启动；</li><li>InitContainer 之间是按定义的次序去启动执行的，执行成功一个之后再执行第二个，而普通的 container 是并发启动的；</li><li>InitContainer 执行成功后就结束退出，而普通容器可能会一直在执行。它可能是一个 longtime 的，或者说失败了会重启，这个也是 InitContainer 和普通 container 不同的地方。</li></ol><p>根据上面三点内容，我们看一下 InitContainer 的一个用途。它其实主要为普通 container 服务，比如说它可以为普通 container 启动之前做一个初始化，或者为它准备一些配置文件， 配置文件可能是一些变化的东西。再比如做一些前置条件的校验，如网络是否联通。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099939-c0f37eaf-d646-4dfe-8e34-49884e24005d.png" alt="img"></p><p>上面的截图是 flannel 组件的 InitContainer 的一个配置，它的 InitContainer 主要是为 kube-flannel 这个普通容器启动之前准备一些网络配置文件。 </p><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><ul><li>ConfigMap 和 Secret: 首先介绍了 ConfigMap 和 Secret 的创建方法和使用场景，然后对 ConfigMap 和 Secret 的常见使用注意点进行了分类和整理。最后介绍了私有仓库镜像的使用和配置；</li><li>Pod 身份认证: 首先介绍了 ServiceAccount 和 Secret 的关联关系，然后从源码角度对 Pod 身份认证流程和实现细节进行剖析，同时引出了 Pod 的权限管理(即 RBAC 的配置管理)；</li><li>容器资源和安全： 首先介绍了容器常见资源类型 (CPU/Memory) 的配置，然后对 Pod 服务质量分类进行详细的介绍。同时对 SecurityContext 有效层级和权限配置项进行简要说明；</li><li>InitContainer: 首先介绍了 InitContainer 和普通 container 的区别以及 InitContainer 的用途。然后基于实际用例对 InitContainer 的用途进行了说明。</li></ul><p><strong><u>PS：本文摘录于阿里公开课，仅为学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>config</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7_应用编排与管理_Job和DaemonSet</title>
    <link href="/2020/09/29/k8s-job/"/>
    <url>/2020/09/29/k8s-job/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="7-应用编排与管理-Job和DaemonSet"><a href="#7-应用编排与管理-Job和DaemonSet" class="headerlink" title="7_应用编排与管理_Job和DaemonSet"></a>7_应用编排与管理_Job和DaemonSet</h3><h3 id="一、Job"><a href="#一、Job" class="headerlink" title="一、Job"></a>一、Job</h3><h4 id="需求来源"><a href="#需求来源" class="headerlink" title="需求来源"></a>需求来源</h4><h5 id="Job-背景问题"><a href="#Job-背景问题" class="headerlink" title="Job 背景问题"></a>Job 背景问题</h5><p>首先我们来看一下 Job 的需求来源。我们知道 K8s 里面，最小的调度单元是 Pod，我们可以直接通过 Pod 来运行任务进程。这样做将会产生以下几种问题：</p><ul><li>我们如何保证 Pod 内进程正确的结束？</li><li>如何保证进程运行失败后重试？</li><li>如何管理多个任务，且任务之间有依赖关系？</li><li>如何并行地运行任务，并管理任务的队列大小？ </li></ul><h5 id="Job：管理任务的控制器"><a href="#Job：管理任务的控制器" class="headerlink" title="Job：管理任务的控制器"></a>Job：管理任务的控制器</h5><p>我们来看一下 Kubernetes 的 Job 为我们提供了什么功能： </p><ul><li>首先 kubernetes 的 Job 是一个管理任务的控制器，它可以创建一个或多个 Pod 来指定 Pod 的数量，并可以监控它是否成功地运行或终止；</li><li>我们可以根据 Pod 的状态来给 Job 设置重置的方式及重试的次数；</li><li>我们还可以根据依赖关系，保证上一个任务运行完成之后再运行下一个任务；</li><li>同时还可以控制任务的并行度，根据并行度来确保 Pod 运行过程中的并行次数和总体完成大小。 </li></ul><h4 id="用例解读"><a href="#用例解读" class="headerlink" title="用例解读"></a>用例解读</h4><p>我们根据一个实例来看一下Job是如何来完成下面的应用的。 </p><h5 id="Job-语法"><a href="#Job-语法" class="headerlink" title="Job 语法"></a>Job 语法</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/jpeg/168324/1566183042825-25aa6849-ed83-44da-a38b-9f58cb6dc910.jpeg" alt="img"></p><p>上图是 Job 最简单的一个 yaml 格式，这里主要新引入了一个 kind 叫 Job，这个 Job 其实就是 job-controller 里面的一种类型。 然后 metadata 里面的 name 来指定这个 Job 的名称，下面 spec.template 里面其实就是 pod 的 spec。 </p><p>这里面的内容都是一样的，唯一多了两个点： </p><ul><li>第一个是 restartPolicy，在 Job 里面我们可以设置 Never、OnFailure、Always 这三种重试策略。在希望 Job 需要重新运行的时候，我们可以用 Never；希望在失败的时候再运行，再重试可以用 OnFailure；或者不论什么情况下都重新运行时 Alway；</li><li>另外，Job 在运行的时候不可能去无限的重试，所以我们需要一个参数来控制重试的次数。这个 backoffLimit 就是来保证一个 Job 到底能重试多少次。 </li></ul><p>所以在 Job 里面，我们主要重点关注的一个是 <strong>restartPolicy 重启策略</strong>和 <strong>backoffLimit 重试次数限制</strong>。 </p><h5 id="Job-状态"><a href="#Job-状态" class="headerlink" title="Job 状态"></a>Job 状态</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042726-79cd8e9d-dfd3-4c17-a76c-042732f8c4bb.png" alt="img"></p><p>Job 创建完成之后，我们就可以通过 kubectl get jobs 这个命令，来查看当前 job 的运行状态。得到的值里面，基本就有 Job 的名称、当前完成了多少个 Pod，进行多长时间。 </p><p><strong>AGE</strong> 的含义是指这个 Pod 从当前时间算起，减去它当时创建的时间。这个时长主要用来告诉你 Pod 的历史、Pod 距今创建了多长时间。<br><strong>DURATION</strong> 主要来看我们 Job 里面的实际业务到底运行了多长时间，当我们的性能调优的时候，这个参数会非常的有用。<br><strong>COMPLETIONS</strong> 主要来看我们任务里面这个 Pod 一共有几个，然后它其中完成了多少个状态，会在这个字段里面做显示。</p><h5 id="查看-Pod"><a href="#查看-Pod" class="headerlink" title="查看 Pod"></a>查看 Pod</h5><p>下面我们来看一下 Pod，其实 Job 最后的执行单元还是 Pod。我们刚才创建的 Job 会创建出来一个叫“pi”的一个 Pod，这个任务就是来计算这个圆周率，Pod 的名称会以“${job-name}-${random-suffix}”，我们可以看一下下面 Pod 的 yaml 格式。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/jpeg/168324/1566183042458-a850a479-a190-434e-95ad-72c40656a9c8.jpeg" alt="img"></p><p>它比普通的 Pod 多了一个叫 <strong>ownerReferences</strong>，这个东西来声明此 pod 是归哪个上一层 controller 来管理。可以看到这里的 ownerReferences 是归 batch/v1，也就是上一个 Job 来管理的。这里就声明了它的 controller 是谁，然后可以通过 pod 返查到它的控制器是谁，同时也能根据 Job 来查一下它下属有哪些 Pod。 </p><h5 id="并行运行-Job"><a href="#并行运行-Job" class="headerlink" title="并行运行 Job"></a>并行运行 Job</h5><p>我们有时候有些需求：希望 Job 运行的时候可以最大化的并行，并行出 n 个 Pod 去快速地执行。同时，由于我们的节点数有限制，可能也不希望同时并行的 Pod 数过多，有那么一个管道的概念，我们可以希望最大的并行度是多少，Job 控制器都可以帮我们来做到。</p><p>这里主要看两个参数：<strong>一个是 completions，一个是 parallelism。</strong></p><ul><li>首先第一个参数是用来指定本 Pod 队列执行次数。可能这个不是很好理解，其实可以把它认为是这个 Job 指定的可以运行的总次数。比如这里设置成 8，即这个任务一共会被执行 8 次；</li><li>第二个参数代表这个并行执行的个数。所谓并行执行的次数，其实就是一个管道或者缓冲器中缓冲队列的大小，把它设置成 2，也就是说这个 Job 一定要执行 8 次，每次并行 2 个 Pod，这样的话，一共会执行 4 个批次。</li></ul><h5 id="查看并行-Job-运行"><a href="#查看并行-Job-运行" class="headerlink" title="查看并行 Job 运行"></a>查看并行 Job 运行</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042723-d78aa107-1593-400d-9ce7-d74dce9f4865.png" alt="img"></p><p>下面来看一下它的实际运行效果，上图就是当这个 Job 整体运行完毕之后可以看到的效果，首先看到 job 的名字，然后看到它一共创建出来了 8 个 pod，执行了 2 分 23 秒，这是创建的时间。 </p><p>接着来看真正的 pods，pods 总共出来了 8 个 pod，每个 pod 的状态都是完成的，然后来看一下它的 AGE，就是时间。从下往上看，可以看到分别有 73s、40s、110s 和 2m26s。每一组都有两个 pod 时间是相同的，即：时间段是 40s 的时候是最后一个创建、 2m26s 是第一个创建的。也就是说，总是两个 pod 同时创建出来，并行完毕、消失，然后再创建、再运行、再完毕。 </p><p>比如说，刚刚我们其实通过第二个参数来控制了当前 Job 并行执行的次数，这里就可以了解到这个缓冲器或者说管道队列大小的作用。 </p><h5 id="Cronjob-语法"><a href="#Cronjob-语法" class="headerlink" title="Cronjob 语法"></a>Cronjob 语法</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042579-f77a53f0-c9ca-46fa-86a7-60c4290cb3d5.png" alt="img"></p><p>下面来介绍另外一个 Job，叫做 CronJob，其实也可以叫定时运行 Job。CronJob 其实和 Job 大体是相似的，唯一的不同点就是它可以设计一个时间。比如说可以定时在几点几分执行，特别适合晚上做一些清理任务，还有可以几分钟执行一次，几小时执行一次等等，这就叫定时任务。 </p><p>定时任务和 Job 相比会多几个不同的字段： </p><ul><li><p><strong>schedule</strong>：schedule 这个字段主要是设置时间格式，它的时间格式和 Linux 的 crontime 是一样的，所以直接根据 Linux 的 crontime 书写格式来书写就可以了。举个例子： */1 指每分钟去执行一下 Job，这个 Job 需要做的事情就是打印出大约时间，然后打印出“Hello from the kubernetes cluster” 这一句话； </p></li><li><p><strong>startingDeadlineSeconds：</strong>即：每次运行 Job 的时候，它最长可以等多长时间，有时这个 Job 可能运行很长时间也不会启动。所以这时，如果超过较长时间的话，CronJob 就会停止这个 Job； </p></li><li><p><strong>concurrencyPolicy</strong>：就是说是否允许并行运行。所谓的并行运行就是，比如说我每分钟执行一次，但是这个 Job 可能运行的时间特别长，假如两分钟才能运行成功，也就是第二个 Job 要到时间需要去运行的时候，上一个 Job 还没完成。如果这个 policy 设置为 true 的话，那么不管你前面的 Job 是否运行完成，每分钟都会去执行；如果是 false，它就会等上一个 Job 运行完成之后才会运行下一个； </p></li><li><p><strong>JobsHistoryLimit：</strong>这个就是每一次 CronJob 运行完之后，它都会遗留上一个 Job 的运行历史、查看时间。当然这个额不能是无限的，所以需要设置一下历史存留数，一般可以设置默认 10 个或 100 个都可以，这主要取决于每个人集群不同，然后根据每个人的集群数来确定这个时间。 </p></li></ul><h4 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h4><h5 id="Job-的编排文件"><a href="#Job-的编排文件" class="headerlink" title="Job 的编排文件"></a>Job 的编排文件</h5><p>下面看一下具体如何使用 Job。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042589-7ac855b5-a0ce-4a0a-98ae-5605ec2be58d.png" alt="img"> </p><h5 id="Job-的创建及运行验证"><a href="#Job-的创建及运行验证" class="headerlink" title="Job 的创建及运行验证"></a>Job 的创建及运行验证</h5><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubectl creat-f job.yaml</span><span class="hljs-meta">$</span><span class="bash"> kubectl get <span class="hljs-built_in">jobs</span></span><span class="hljs-meta">$</span><span class="bash"> kubectl get pods</span><span class="hljs-meta">$</span><span class="bash"> kubectl logs pods pi-zxnmx</span></code></pre><p>首先看一下 job.yaml。这是一个非常简单的计算 pi 的一个任务。使用 kubectl creat-f job.yaml，这样 job 就能提交成功了。来看一下 kubectl.get.jobs，可以看到这个 job 正在运行；get pods 可以看到这个 pod 应该是运行完成了，那么接下来 logs 一下这个 job 以及 pod。可以看到下图里面打印出来了圆周率。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042679-2578b891-b60f-4b71-8bc4-fdf68a1b501a.png" alt="img"></p><h5 id="并行-Job-的编排文件"><a href="#并行-Job-的编排文件" class="headerlink" title="并行 Job 的编排文件"></a>并行 Job 的编排文件</h5><p>下面再来看第二个例子： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183043579-d4b0dde4-423b-4c4b-b5f3-625e89b5b00a.png" alt="img"></p><h5 id="并行-Job-的创建及运行验证"><a href="#并行-Job-的创建及运行验证" class="headerlink" title="并行 Job 的创建及运行验证"></a>并行 Job 的创建及运行验证</h5><p>这个例子就是指刚才的并行运行 Job 创建之后，可以看到有第二个并行的 Job。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042546-cb13960a-ce7d-4002-971a-d6f7b4d8df0e.png" alt="img"></p><p>现在已经有两个 Pod 正在 running，可以看到它大概执行了快到 30s </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/jpeg/168324/1566183042438-0605f7c9-200f-4f2b-8bd8-86ec2cb7e176.jpeg" alt="img"></p><p> 30s 之后它应该会起第二个。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/jpeg/168324/1566183042516-8827a10c-daa2-4e30-a36e-57ede10ec041.jpeg" alt="img"></p><p> 第一批的 pod 已经执行完毕，第二批的 pod 正在 running，每批次分别是两个Pod。也就是说后面每隔 40s 左右，就会有两个 pod 在并行执行，它一共会执行 4 批，共 8 个 pod，等到所有的 pod 执行完毕，就是刚才所说的并行执行的缓冲队列功能。</p><p>过一段时间再看这个 pods，可以发现第二批已经执行结束，接下来开始创建第三批······</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/jpeg/168324/1566183043133-04147f3b-b2ef-40c4-89a4-8c51a922fc6f.jpeg" alt="img"></p><h5 id="Cronjob-的编排文件"><a href="#Cronjob-的编排文件" class="headerlink" title="Cronjob 的编排文件"></a>Cronjob 的编排文件</h5><p>下面来看第三个例子 —— CronJob。 CronJob 是每分钟执行一次，每次一个 job。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042681-bd4c357a-54bf-4551-83a8-51826ab1bbd2.png" alt="img"></p><h5 id="Cronjob-的创建及运行验证"><a href="#Cronjob-的创建及运行验证" class="headerlink" title="Cronjob 的创建及运行验证"></a>Cronjob 的创建及运行验证</h5><p>如下图 CronJob 已经创建了，可以通过 get cronjob 来看到当前有一个 CronJob，这个时候再来看 jobs，由于它是每分钟执行一次，所以得稍微等一下。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042935-effcc286-cdbb-4953-83b4-eda9be40537e.png" alt="img"></p><p> 同时可以看到，上一个 job 还在运行，它的时间是 2m12s 左右，它的完成度是 7/8、6/8，刚刚看到 7/8 到 8/8，也就是说我们上一个任务执行了最后一步，而且每次都是两个两个地去运行。每次两个运行的 job 都会让我们在运行一些大型工作流或者工作任务的时候感到特别的方便。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/jpeg/168324/1566183042512-64012961-7a78-40b9-b762-a085bd618110.jpeg" alt="img"></p><p>上图中可以看到突然出现了一个 job，“hello-xxxx”这个 job 就是刚才所说的 CronJob。它距离刚才 CronJob 提交已经过去 1 分钟了，这样就会自动创建出来一个 job，如果不去干扰它的话，它以后大概每一分钟都会创建出来这么一个 job，除非等我们什么时候指定它不可以再运行的时候它才会停止创建。</p><p>在这里 CronJob 其实主要是用来运作一些清理任务或者说执行一些定时任务。比如说 Jenkins 构建等方面的一些任务，会特别有效。</p><h4 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h4><h5 id="Job-管理模式"><a href="#Job-管理模式" class="headerlink" title="Job 管理模式"></a>Job 管理模式</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042825-583168d6-ae09-4912-b9e9-169e26a16981.png" alt="img"></p><p>我们来看一下 job 的架构设计。Job Controller 其实还是主要去创建相对应的 pod，然后 Job Controller 会去跟踪 Job 的状态，及时地根据我们提交的一些配置重试或者继续创建。同时我们刚刚也提到，每个 pod 会有它对应的 label，来跟踪它所属的 Job Controller，并且还去配置并行的创建， 并行或者串行地去创建 pod。</p><h5 id="Job-控制器"><a href="#Job-控制器" class="headerlink" title="Job 控制器"></a>Job 控制器</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/jpeg/168324/1566183042675-20af4dc0-b870-4761-9f5b-dfa131c1b15a.jpeg" alt="img"></p><p>上图是一个 Job 控制器的主要流程。所有的 job 都是一个 controller，它会 watch 这个 API Server，我们每次提交一个 Job 的 yaml 都会经过 api-server 传到 ETCD 里面去，然后 Job Controller 会注册几个 Handler，每当有添加、更新、删除等操作的时候，它会通过一个内存级的消息队列，发到 controller 里面。 </p><p>通过 Job Controller 检查当前是否有运行的 pod，如果没有的话，通过 Scale up 把这个 pod 创建出来；如果有的话，或者如果大于这个数，对它进行 Scale down，如果这时 pod 发生了变化，需要及时 Update 它的状态。 </p><p>同时要去检查它是否是并行的 job，或者是串行的 job，根据设置的配置并行度、串行度，及时地把 pod 的数量给创建出来。最后，它会把 job 的整个的状态更新到 API Server 里面去，这样我们就能看到呈现出来的最终效果了。 </p><h3 id="二、DaemonSet"><a href="#二、DaemonSet" class="headerlink" title="二、DaemonSet"></a>二、DaemonSet</h3><h4 id="需求来源-1"><a href="#需求来源-1" class="headerlink" title="需求来源"></a>需求来源</h4><h5 id="DaemonSet-背景问题"><a href="#DaemonSet-背景问题" class="headerlink" title="DaemonSet 背景问题"></a>DaemonSet 背景问题</h5><p>下面介绍第二个控制器：<strong>DaemonSet。</strong>同样的问题：如果我们没有 DaemonSet 会怎么样？下面有几个需求： </p><ul><li>首先如果希望每个节点都运行同样一个 pod 怎么办？</li><li>如果新节点加入集群的时候，想要立刻感知到它，然后去部署一个 pod，帮助我们初始化一些东西，这个需求如何做？</li><li>如果有节点退出的时候，希望对应的 pod 会被删除掉，应该怎么操作？</li><li>如果 pod 状态异常的时候，我们需要及时地监控这个节点异常，然后做一些监控或者汇报的一些动作，那么这些东西运用什么控制器来做？</li></ul><h4 id="DaemonSet：守护进程控制器"><a href="#DaemonSet：守护进程控制器" class="headerlink" title="DaemonSet：守护进程控制器"></a>DaemonSet：守护进程控制器</h4><p>DaemonSet 也是 Kubernetes 提供的一个 default controller，它实际是做一个守护进程的控制器，它能帮我们做到以下几件事情：</p><ul><li>首先能保证集群内的每一个节点都运行一组相同的 pod；</li><li>同时还能根据节点的状态保证新加入的节点自动创建对应的 pod；</li><li>在移除节点的时候，能删除对应的 pod；</li><li>而且它会跟踪每个 pod 的状态，当这个 pod 出现异常、Crash 掉了，会及时地去 recovery 这个状态。</li></ul><h4 id="用例解读-1"><a href="#用例解读-1" class="headerlink" title="用例解读"></a>用例解读</h4><h5 id="DaemonSet-语法"><a href="#DaemonSet-语法" class="headerlink" title="DaemonSet 语法"></a>DaemonSet 语法</h5><p>下面举个例子来看一下，DaemonSet.yaml 会稍微长一些。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042532-fc9caf15-6ed8-440a-9d91-7c953fee4964.png" alt="img"></p><p>首先是 kind:DaemonSet。如果前面学过 deployment 后，其实我们再看这个 yaml 会比较简单。例如它会有 matchLabel，通过 matchLabel 去管理对应所属的 pod，这个 pod.label 也要和这个 DaemonSet.controller.label 想匹配，它才能去根据 label.selector 去找到对应的管理 Pod。下面 spec.container 里面的东西都是一致的。</p><p>这里用 fluentd 来做例子。DaemonSet 最常用的点在于以下几点内容：</p><ul><li><p>首先是存储，GlusterFS 或者 Ceph 之类的东西，需要每台节点上都运行一个类似于 Agent 的东西，DaemonSet 就能很好地满足这个诉求；</p></li><li><p>另外，对于日志收集，比如说 logstash 或者 fluentd，这些都是同样的需求，需要每台节点都运行一个 Agent，这样的话，我们可以很容易搜集到它的状态，把各个节点里面的信息及时地汇报到上面；</p></li><li><p>还有一个就是，需要每个节点去运行一些监控的事情，也需要每个节点去运行同样的事情，比如说 Promethues 这些东西，也需要 DaemonSet 的支持。</p></li></ul><h5 id="查看-DaemonSet-状态"><a href="#查看-DaemonSet-状态" class="headerlink" title="查看 DaemonSet 状态"></a>查看 DaemonSet 状态</h5><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubectl get ds</span><span class="hljs-meta">$</span><span class="bash"> kubectl get pods</span></code></pre><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042743-6306ecaa-6148-4e3a-b156-0788b3fe1ce6.png" alt="img"></p><p>创建完 DaemonSet 之后，我们可以使用 kubectl get DaemonSet（DaemonSet 缩写为 ds）。可以看到 DaemonSet 返回值和 deployment 特别像，即它当前一共有正在运行的几个，然后我们需要几个，READY 了几个。当然这里面，READY 都是只有 Pod，所以它最后创建出来所有的都是 pod。 </p><p>这里有几个参数，分别是：需要的 pod 个数、当前已经创建的 pod 个数、就绪的个数，以及所有可用的、通过健康检查的 pod；还有 NODE SELECTOR，因为 NODE SELECTOR 在 DaemonSet 里面非常有用。有时候我们可能希望只有部分节点去运行这个 pod 而不是所有的节点，所以有些节点上被打了标的话，DaemonSet 就只运行在这些节点上。比如，我只希望 master 节点运行某些 pod，或者只希望 Worker 节点运行某些 pod，就可以使用这个 NODE SELECTOR。</p><h5 id="更新-DaemonSet"><a href="#更新-DaemonSet" class="headerlink" title="更新 DaemonSet"></a>更新 DaemonSet</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042821-0e3ca01e-a376-47a0-9b78-ea330a6564a8.png" alt="img"></p><p>其实 DaemonSet 和 deployment 特别像，它也有两种更新策略：一个是 <strong>RollingUpdate</strong>，另一个是 <strong>OnDelete</strong>。 </p><ul><li><p>RollingUpdate 其实比较好理解，就是会一个一个的更新。先更新第一个 pod，然后老的 pod 被移除，通过健康检查之后再去见第二个 pod，这样对于业务上来说会比较平滑地升级，不会中断；</p></li><li><p>OnDelete 其实也是一个很好的更新策略，就是模板更新之后，pod 不会有任何变化，需要我们手动控制。我们去删除某一个节点对应的 pod，它就会重建，不删除的话它就不会重建，这样的话对于一些我们需要手动控制的特殊需求也会有特别好的作用。 </p></li></ul><h4 id="操作演示-1"><a href="#操作演示-1" class="headerlink" title="操作演示"></a>操作演示</h4><h5 id="DaemonSet-的编排"><a href="#DaemonSet-的编排" class="headerlink" title="DaemonSet 的编排"></a>DaemonSet 的编排</h5><p>下面举一个例子。比如说我们去改了些 DaemonSet 的镜像，然后看到了它的状态，它就会去一个一个地更新。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042684-afb3b2d0-62d9-4f18-a4a5-d64f5765b583.png" alt="img"></p><p>上图这个就是刚才 DaemonSet 的 yaml，会比刚才会多一些， 我们做一些资源的限制，这个都不影响。 </p><h5 id="DaemonSet-的创建与运行验证"><a href="#DaemonSet-的创建与运行验证" class="headerlink" title="DaemonSet 的创建与运行验证"></a>DaemonSet 的创建与运行验证</h5><p>下面我们创建一下 DaemonSet ，然后再看一下它的状态。下图就是我们刚才看到的 DaemonSet 在 ready 里打出来的状态。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183043020-5fb55ae3-0072-4fc0-b759-46ae46b45b99.png" alt="img"></p><p>从下图中可以看到，一共有 4 个 pod 被创建出来。为什么是 4 个 pod呢？因为只有 4 个节点，所以每个节点上都会运行一个对应的 pod。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042672-9a942427-2f83-4799-ab73-8d67033a526e.png" alt="img"></p><h5 id="DaemonSet-的更新"><a href="#DaemonSet-的更新" class="headerlink" title="DaemonSet 的更新"></a>DaemonSet 的更新</h5><p>这时，我们来更新 DaemonSet， 执行完了kubectl apply -f 后，它的 DaemonSet 就已经更新了。接下来我们去查看 DaemonSet 的更新状态。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042497-2e922696-1752-4045-ad08-cbbde1cd0c58.png" alt="img"></p><p>上图中可以看到：DaemonSet 默认这个是 RollingUpdate 的，我们看到是 0-4，现在是 1-4，也就是说它在更新第一个，第一个更新完成会去更新第二个，第二个更新完，就更新第三个······这个就是 RollingUpdate。<br>RollingUpdate 可以做到全自动化的更新，不用有人值守，而是一个一个地去自动更新，更新的过程也比较平滑，这样可以有利于我们在现场发布或者做一些其他操作。 </p><p>上图结尾处可以看到，整个的 DaemonSet 已经 RollingUpdate 完毕。 </p><h4 id="架构设计-1"><a href="#架构设计-1" class="headerlink" title="架构设计"></a>架构设计</h4><h5 id="DaemonSet-管理模式"><a href="#DaemonSet-管理模式" class="headerlink" title="DaemonSet 管理模式"></a>DaemonSet 管理模式</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042721-6ee21e8e-2dc7-4568-9fc1-5ded56d718b2.png" alt="img"></p><p>接下来看一下 DaemonSet 架构设计。DaemonSet 还是一个 controller，它最后真正的业务单元也是 Pod，DaemonSet 其实和 Job controller 特别相似，它也是通过 controller 去 watch API Server 的状态，然后及时地添加 pod。<br>唯一不同的是，它会监控节点的状态，节点新加入或者消失的时候会在节点上创建对应的 pod，然后同时根据你配置的一些 affinity 或者 label 去选择对应的节点。</p><h5 id="DaemonSet-控制器"><a href="#DaemonSet-控制器" class="headerlink" title="DaemonSet 控制器"></a>DaemonSet 控制器</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042590-cf9ad525-cdbc-4f22-8cdc-ac909e6ba498.png" alt="img"></p><p>最后我们来看一下 DaemonSet 的控制器，DaemonSet 其实和 Job controller 做的差不多：两者都需要根据 watch 这个 API Server 的状态。现在 DaemonSet 和 Job controller 唯一的不同点在于，DaemonsetSet Controller需要去 <strong>watch node 的状态</strong>，但其实这个 node 的状态还是通过 API Server 传递到 ETCD 上。 </p><p>当有 node 状态节点发生变化时，它会通过一个内存消息队列发进来，然后DaemonSet controller 会去 watch 这个状态，看一下各个节点上是都有对应的 Pod，如果没有的话就去创建。当然它会去做一个对比，如果有的话，它会比较一下版本，然后加上刚才提到的是否去做 RollingUpdate？如果没有的话就会重新创建，Ondelete 删除 pod 的时候也会去做 check 它做一遍检查，是否去更新，或者去创建对应的 pod。 </p><p>当然最后的时候，如果全部更新完了之后，它会把整个 DaemonSet 的状态去更新到 API Server 上，完成最后全部的更新。 </p><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>我们本期的所有的讲解都已经完毕，请大家后面再去看一下课后的习题和实验！ </p><h3 id="本节总结"><a href="#本节总结" class="headerlink" title="本节总结"></a>本节总结</h3><ul><li>Job &amp; CronJobs 基础操作与概念解析：本节详细介绍了 Job 和 CronJob 的概念，并通过两个实际的例子介绍了 Job 和 CronJob 的使用，对于 Job 和 CronJob 内的各种功能便签都进行了详细的演示；</li><li>DaemonSet 基础操作与概念解析：通过类比 Deployment 控制器，我们理解了一下 DaemonSet 控制器的工作流程与方式，并且通过对 DaemonSet 的更新了解了滚动更新的概念和相对应的操作方式。</li></ul><p><strong><u>PS: 本文摘录于阿里云公开课，仅供学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>job</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6_应用编排与管理:Deployment</title>
    <link href="/2020/09/28/6-k8s-deployment/"/>
    <url>/2020/09/28/6-k8s-deployment/</url>
    
    <content type="html"><![CDATA[<h3 id="6-应用编排与管理-Deployment"><a href="#6-应用编排与管理-Deployment" class="headerlink" title="6_应用编排与管理:Deployment"></a>6_应用编排与管理:Deployment</h3><h4 id="一、需求来源"><a href="#一、需求来源" class="headerlink" title="一、需求来源"></a>一、需求来源</h4><h5 id="背景问题"><a href="#背景问题" class="headerlink" title="背景问题"></a>背景问题</h5><p>首先，我们来看一下背景问题。如下图所示：如果我们直接管理集群中所有的 Pod，应用 A、B、C 的 Pod，其实是散乱地分布在集群中。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231799-a515128f-0628-46a2-89e4-f289d1c4629b.png" alt="img"></p><p>现在有以下的问题： </p><ul><li>首先，如何保证集群内可用 Pod 的数量？也就是说我们应用 A 四个 Pod 如果出现了一些宿主机故障，或者一些网络问题，如何能保证它可用的数量？</li><li>如何为所有 Pod 更新镜像版本？我们是否要某一个 Pod 去重建新版本的 Pod？</li><li>然后在更新过程中，如何保证服务的可用性？</li><li>以及更新过程中，如果发现了问题，如何快速回滚到上一个版本？ </li></ul><h5 id="Deployment：管理部署发布的控制器"><a href="#Deployment：管理部署发布的控制器" class="headerlink" title="Deployment：管理部署发布的控制器"></a>Deployment：管理部署发布的控制器</h5><p>这里就引入了我们今天课程的主题：Deployment 管理部署发布的控制器。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231795-7b63e09c-a13b-4dc3-a378-2095ad4314f0.png" alt="img"> </p><p>可以看到我们通过 Deployment 将应用 A、B、C 分别规划到不同的 Deployment 中，每个 Deployment 其实是管理的一组相同的应用 Pod，这组 Pod 我们认为它是相同的一个副本，那么 Deployment 能帮我们做什么事情呢？ </p><ol><li>首先，Deployment 定义了一种 Pod 期望数量，比如说应用 A，我们期望 Pod 数量是四个，那么这样的话，controller 就会持续维持 Pod 数量为期望的数量。当我们与 Pod 出现了网络问题或者宿主机问题的话，controller 能帮我们恢复，也就是新扩出来对应的 Pod，来保证可用的 Pod 数量与期望数量一致；</li><li>配置 Pod 发布方式，也就是说 controller 会按照用户给定的策略来更新 Pod，而且更新过程中，也可以设定不可用 Pod 数量在多少范围内；</li><li>如果更新过程中发生问题的话，即所谓“一键”回滚，也就是说你通过一条命令或者一行修改能够将 Deployment 下面所有 Pod 更新为某一个旧版本 。</li></ol><h4 id="二、用例解读"><a href="#二、用例解读" class="headerlink" title="二、用例解读"></a>二、用例解读</h4><h5 id="Deployment-语法"><a href="#Deployment-语法" class="headerlink" title="Deployment 语法"></a>Deployment 语法</h5><p>下面我们用一个简单的用例来解读一下如何操作 Deployment。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231825-f5bcf887-996e-4e18-923a-3c889bd01e77.png" alt="img"></p><p> 上图可以看到一个最简单的 Deployment 的 yaml 文件。</p><p>“apiVersion：apps/v1”，也就是说 Deployment 当前所属的组是 apps，版本是 v1。“metadata”是我们看到的 Deployment 元信息，也就是往期回顾中的 Labels、Selector、Pod.image，这些都是在往期中提到的知识点。</p><p>Deployment 作为一个 K8s 资源，它有自己的 metadata 元信息，这里我们定义的 Deployment.name 是 nginx.Deployment。Deployment.spec 中首先要有一个核心的字段，即 replicas，这里定义期望的 Pod 数量为三个；selector 其实是 Pod 选择器，那么所有扩容出来的 Pod，它的 Labels 必须匹配 selector 层上的 image.labels，也就是 app.nginx。</p><p>就如上面的 Pod 模板 template 中所述，这个 template 它其实包含了两部分内容：</p><ul><li><p>一部分是我们期望 Pod 的 metadata，其中包含了 labels，即跟 selector.matchLabels 相匹配的一个 Labels；</p></li><li><p>第二部分是 template 包含的一个 Pod.spec。这里 Pod.spec 其实是 Deployment 最终创建出来 Pod 的时候，它所用的 Pod.spec，这里定义了一个 container.nginx，它的镜像版本是 nginx:1.7.9。</p></li></ul><p>下面是遇到的新知识点：</p><ul><li>第一个是 replicas，就是 Deployment 中期望的或者终态数量；</li><li>第二个是 template，也就是 Pod 相关的一个模板。</li></ul><h5 id="查看-Deployment-状态"><a href="#查看-Deployment-状态" class="headerlink" title="查看 Deployment 状态"></a>查看 Deployment 状态</h5><pre><code class="hljs shell">kubectl get deployment</code></pre><p>当我们创建出一个 Deployment 的时候，可以通过 kubectl get deployment，看到 Deployment 总体的一个状态。如下图所示：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231829-230d2b94-e828-481e-bbc1-c078f2989ebb.png" alt="img"></p><p>上图中可以看到：</p><ul><li><strong>DESIRED</strong>：期望的 Pod 数量是 3 个；</li><li><strong>CURRENT</strong>：当前实际 Pod 数量是 3 个；</li><li><strong>UP-TO-DATE</strong>：其实是到达最新的期望版本的 Pod 数量；</li><li><strong>AVAILABLE</strong>：这个其实是运行过程中可用的 Pod 数量。后面会提到，这里 AVAILABLE 并不简单是可用的，也就是 Ready 状态的，它其实包含了一些可用超过一定时间长度的 Pod；</li><li><strong>AGE</strong>：deployment 创建的时长，如上图 Deployment 就是已经创建了 80 分钟。</li></ul><h5 id="查看-Pod"><a href="#查看-Pod" class="headerlink" title="查看 Pod"></a>查看 Pod</h5><pre><code class="hljs shell">kubectl get pod</code></pre><p>最后我们可以查看一下 Pod。如下图所示：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231858-bebfc22d-f60a-408f-a130-4e915e18abe2.png" alt="img"> </p><p>上图中有三个 Pod，Pod 名字格式我们不难看到。</p><p>最前面一段：nginx-deployment，其实是 Pod 所属 Deployment.name；中间一段：template-hash，这里三个 Pod 是一样的，因为这三个 Pod 其实都是同一个 template 中创建出来的。</p><p>最后一段，是一个 random 的字符串，我们通过 get.pod 可以看到，Pod 的 ownerReferences 即 Pod 所属的 controller 资源，并不是 Deployment，而是一个 ReplicaSet。这个 ReplicaSet 的 name，其实是 nginx-deployment 加上 pod.template-hash，后面会提到。所有的 Pod 都是 ReplicaSet 创建出来的，而 ReplicaSet 它对应的某一个具体的 Deployment.template 版本。</p><h5 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h5><p>接下来我们可以看一下，如何对一个给定的 Deployment 更新它所有Pod的镜像版本呢？这里我们可以执行一个 kubectl 命令：</p> <pre><code class="hljs shell">kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.9.1</code></pre><p>首先 kubectl 后面有一个 set image 固定写法，这里指的是设定镜像；其次是一个 deployment.v1.apps，这里也是一个固定写法，写的是我们要操作的资源类型，deployment 是资源名、v1 是资源版本、apps 是资源组，这里也可以简写为 deployment 或者 deployment.apps，比如说写为 deployment 的时候，默认将使用 apps 组 v1 版本。 </p><p>第三部分是要更新的 deployment 的 name，也就是我们的 nginx-deployment；再往后的 nginx 其实指的是 template，也就是 Pod 中的 container.name；这里我们可以注意到：一个 Pod 中，其实可能存在多个 container，而我们指定想要更新的镜像的 container.name，就是 nginx。</p><p>最后，指定我们这个容器期望更新的镜像版本，这里指的是 nginx: 1.9.1。如下图所示：当执行完这条命令之后，可以看到 deployment 中的 template.spec 已经更新为 nginx: 1.9.1。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231820-2c74c5c8-be4e-4dc4-8c77-8edf92f1f792.png" alt="img"></p><h5 id="快速回滚"><a href="#快速回滚" class="headerlink" title="快速回滚"></a>快速回滚</h5><pre><code class="hljs shell">kubectl rollout undo deployment/nginx-deployment</code></pre><p>如果我们在发布过程中遇到了问题，也支持快速回滚。通过 kubectl 执行的话，其实是“kubectl rollout undo”这个命令，可以回滚到 Deployment 上一版本；通过“rollout undo”加上“to-revision”来指定可以回滚到某一个具体的版本。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231866-c2024e6d-1c86-45dd-b668-49174c42611a.png" alt="img"> </p><h5 id="DeploymeStatus"><a href="#DeploymeStatus" class="headerlink" title="DeploymeStatus"></a>DeploymeStatus</h5><p>最后我们来看一下 DeploymeStatus。前面的课程我们学习到，每一个资源都有它的 spec.Status。这里可以看一下，deploymentStatus 中描述的三个其实是它的 conversion 状态，也就是 Processing、Complete 以及 Failed。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231814-939d6edb-61a5-4c2f-baed-16e493984cd1.png" alt="img"></p><p>以 Processing 为例：Processing 指的是 Deployment 正在处于扩容和发布中。比如说 Processing 状态的 deployment，它所有的 replicas 及 Pod 副本全部达到最新版本，而且是 available，这样的话，就可以进入 complete 状态。而 complete 状态如果发生了一些扩缩容的话，也会进入 processing 这个处理工作状态。 </p><p>如果在处理过程中遇到一些问题：比如说拉镜像失败了，或者说 readiness probe 检查失败了，就会进入 failed 状态；如果在运行过程中即 complete 状态，中间运行时发生了一些 pod readiness probe 检查失败，这个时候 deployment 也会进入 failed 状态。进入 failed 状态之后，除非所有点 replicas 均变成 available，而且是 updated 最新版本，deployment 才会重新进入 complete 状态。 </p><h4 id="三、操作演示"><a href="#三、操作演示" class="headerlink" title="三、操作演示"></a>三、操作演示</h4><h5 id="Deployment-创建及状态"><a href="#Deployment-创建及状态" class="headerlink" title="Deployment 创建及状态"></a>Deployment 创建及状态</h5><pre><code class="hljs shell">kubectl get node</code></pre><p>下面我们来进行操作演示：这里连接一个阿里云服务集群。我们可以看到当前集群已经有几个可用的 node。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231861-eb2722bf-0e99-45a3-a7ab-2e0e6fb865ad.png" alt="img"></p><p> 首先创建对应的 deployment。可以看到 deployment 中的 desired、current、up-to-date 以及 available 已经都达到了可用的期望状态。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231818-008962ad-26a3-43a2-af9e-9a88484b78cc.png" alt="img"> </p><h5 id="Deployment-的结构"><a href="#Deployment-的结构" class="headerlink" title="Deployment 的结构"></a>Deployment 的结构</h5><p>这里看到 spec 中的 replicas 是三个，selector 以及 template labels中定义的标签都是 app：nginx，spec 中的 image 是我们期望的 nginx: 1.7.9；status 中的 available.replicas，readReplicas 以及 updatedReplicas 都是 3 个。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231889-a81cdef3-fe77-44e4-9997-c7218f441981.png" alt="img"></p><h5 id="Pod-状态"><a href="#Pod-状态" class="headerlink" title="Pod 状态"></a>Pod 状态</h5><p>我们可以再选择一个 Pod 看一下状态： </p><p>可以看到：Pod 中 ownerReferences 的功能是 ReplicaSet；pod.spec.container 里的镜像是 1.7.9。这个 Pod 已经是 Running 状态，而且它的 conditions.status 是“true”，表示它的服务已经可用了。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231867-d53b54ce-8458-4b72-8eae-82bb9a266ddf.png" alt="img"></p><h5 id="更新升级"><a href="#更新升级" class="headerlink" title="更新升级"></a>更新升级</h5><p>当前只有最新版本的 replicaset，那么现在尝试对 deployment 做一次升级。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231858-54bb1384-9edb-4d22-b6e6-9a55e1c72138.png" alt="img"></p><p>“kubectl set image”这个操作命令，后面接 “deployment”，加 deployment.name，最后指定容器名，以及我们期望升级的镜像版本。</p><pre><code class="hljs shell">kubectl set image deployment nginx-deployment nginx=nginx:1.9.1</code></pre><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231800-62b39855-cf76-4e0c-8b15-e233492c9e56.png" alt="img"></p><p>接下来我们看下 deployment 中的 template 中的 image 已经更新为 1.9.1。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231821-3f15849f-5bdd-4f26-9366-09c4a5ea71ba.png" alt="img"></p><p>这个时候我们再 get pod 看一下状态。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231888-f40b5d61-4996-4fa1-b218-3747f2c7ae57.png" alt="img"></p><p>三个 pod 已经升级为新版本，pod 名字中的 pod-template-hash 也已更新。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231935-fa9c72d8-f771-4bde-94e6-254636bf5076.png" alt="img"></p><p>可以看到：旧版本 replicaset 的 spec 数量以及 pod 数量是都是 0，新版本的 pod 数量是 3 个。 </p><p>假设又做了一次更新，这个时候 get.pod 其实可以看到：当前的 pod 其实是有两个旧版本的处于 running，另一个旧版本是在删除中；而两个新版本的 pod，一个已经进入 running，一个还在 creating 中。 </p><p>这时我们可用的 pod 数量即非删除状态的 pod 数量，其实是 4 个，已经超过了 replica 原先在 deployment 设置的数量 3 个。这个原因是我们在 deployment 中有 maxavailable 和 maxsugar 两个操作，这两个配置可以限制我们在发布过程中的一些策略。在后面架构设计中会讲到这个问题。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231914-96217074-a9cb-42a4-8eb3-b1e05ca8aa00.png" alt="img"></p><h5 id="历史版本保留-revisionHistoryLimit"><a href="#历史版本保留-revisionHistoryLimit" class="headerlink" title="历史版本保留 revisionHistoryLimit"></a>历史版本保留 revisionHistoryLimit</h5><p>上图看到，我们当前最新版本的 replicaset 是 3 个 pod，另外还有两个历史版本的 replicaset，那么会不会存在一种情况：就是随着 deployment 持续的更新，这个旧版本的 replicaset 会越积越多呢？其实 deployment 提供了一个机制来避免这个问题：在 deployment spec 中，有一个 revisionHistoryLimit，它的默认值为 10，它其实保证了保留历史版本的 replicaset 的数量，我们尝试把它改为 1。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231940-fbfaffaf-000a-4c61-88e5-53041eaa851e.png" alt="img"></p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231840-eefb1499-fa04-42d4-9b0d-ee0108004e05.png" alt="img"></p><p>由上面第二张图，可以看到两个 replicaset，也就是说，除了当前版本的 replicaset 之外，旧版本的 replicaset 其实只保留了一个。</p><h5 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h5><p>最后再尝试做一下回滚。首先再来看一下 replicaset，这时发现旧版本的 replicaset 数量从 0 个增到 2 个，而新版本的 replicaset 数量从 3 个削减为 1 个，表示它已经开始在做回滚的操作。然后再观察一下， 旧版本的数量已经是 3 个，即已经回滚成功，而新版本的 pod 数量变为 0 个。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231823-4faf799b-cf35-4b1f-857b-c57288a3c874.png" alt="img"></p><p> 我们最后再 get pod 看一下：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231937-3d87925c-7e00-4f2a-87d6-6f5b6b230573.png" alt="img"></p><p> 这时，3 个 pod.template-hash 已经更新为旧版本的 hash，但其实这 3 个 pod 都是重新创建出来的，而并非我们在前一版本中创建的 3 个 pod。换句话说，也就是我们回滚的时候，其实是创建了 3 个旧版本的 pod，而并非把先前的 3 个 pod 找回来。</p><h4 id="四、架构设计"><a href="#四、架构设计" class="headerlink" title="四、架构设计"></a>四、架构设计</h4><h5 id="管理模式"><a href="#管理模式" class="headerlink" title="管理模式"></a>管理模式</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231851-fade1c70-d09f-4e47-85f7-5ed0f44c6f16.png" alt="img"> </p><p>我们来看一下架构设计。首先简单看一下管理模式：Deployment 只负责管理不同版本的 ReplicaSet，由 ReplicaSet 来管理具体的 Pod 副本数，每个 ReplicaSet 对应 Deployment template 的一个版本。在上文的例子中可以看到，每一次修改 template，都会生成一个新的 ReplicaSet，这个 ReplicaSet 底下的 Pod 其实都是相同的版本。 </p><p>如上图所示：Deployment 创建 ReplicaSet，而 ReplicaSet 创建 Pod。他们的 OwnerRef 其实都对应了其控制器的资源。 </p><h5 id="Deployment-控制器"><a href="#Deployment-控制器" class="headerlink" title="Deployment 控制器"></a>Deployment 控制器</h5><p>我们先简单看一下控制器实现原理。 </p><p>首先，我们所有的控制器都是通过 Informer 中的 Event 做一些 Handler 和 Watch。这个地方 Deployment 控制器，其实是关注 Deployment 和 ReplicaSet 中的 event，收到事件后会加入到队列中。而 Deployment controller 从队列中取出来之后，它的逻辑会判断 Check Paused，这个 Paused 其实是 Deployment 是否需要新的发布，如果 Paused 设置为 true 的话，就表示这个 Deployment 只会做一个数量上的维持，不会做新的发布。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231894-a9f476ac-1f97-4e2b-b976-8c7d9831136c.png" alt="img"></p><p>如上图，可以看到如果 Check paused 为 Yes 也就是 true 的话，那么只会做 Sync replicas。也就是说把 replicas sync 同步到对应的 ReplicaSet 中，最后再 Update Deployment status，那么 controller 这一次的 ReplicaSet 就结束了。</p><p>那么如果 paused 为 false 的话，它就会做 Rollout，也就是通过 Create 或者是 Rolling 的方式来做更新，更新的方式其实也是通过 Create/Update/Delete 这种 ReplicaSet 来做实现的。 </p><h5 id="ReplicaSet-控制器"><a href="#ReplicaSet-控制器" class="headerlink" title="ReplicaSet 控制器"></a>ReplicaSet 控制器</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231827-f235ad37-09c5-4e8c-bdea-6be50738d438.png" alt="img"></p><p>当 Deployment 分配 ReplicaSet 之后，ReplicaSet 控制器本身也是从 Informer 中 watch 一些事件，这些事件包含了 ReplicaSet 和 Pod 的事件。从队列中取出之后，ReplicaSet controller 的逻辑很简单，就只管理副本数。也就是说如果 controller 发现 replicas 比 Pod 数量大的话，就会扩容，而如果发现实际数量超过期望数量的话，就会删除 Pod。 </p><p>上面 Deployment 控制器的图中可以看到，Deployment 控制器其实做了更复杂的事情，包含了版本管理，而它把每一个版本下的数量维持工作交给 ReplicaSet 来做。 </p><h5 id="扩-缩容模拟"><a href="#扩-缩容模拟" class="headerlink" title="扩/缩容模拟"></a>扩/缩容模拟</h5><p>下面来看一些操作模拟，比如说扩容模拟。这里有一个 Deployment，它的副本数是 2，对应的 ReplicaSet 有 Pod1 和 Pod2。这时如果我们修改 Deployment replicas， controller 就会把 replicas 同步到当前版本的 ReplicaSet 中，这个 ReplicaSet 发现当前有 2 个 Pod，不满足当前期望 3 个，就会创建一个新的 Pod3。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231905-7992eb8e-afe5-41c0-a091-ac1e91f68441.png" alt="img"></p><h5 id="发布模拟"><a href="#发布模拟" class="headerlink" title="发布模拟"></a>发布模拟</h5><p>我们再模拟一下发布，发布的情况会稍微复杂一点。这里可以看到 Deployment 当前初始的 template，比如说 template1 这个版本。template1 这个 ReplicaSet 对应的版本下有三个 Pod：Pod1，Pod2，Pod3。</p><p>这时修改 template 中一个容器的 image， Deployment controller 就会新建一个对应 template2 的 ReplicaSet。创建出来之后 ReplicaSet 会逐渐修改两个 ReplicaSet 的数量，比如它会逐渐增加 ReplicaSet2 中 replicas 的期望数量，而逐渐减少 ReplicaSet1 中的 Pod 数量。</p><p>那么最终达到的效果是：新版本的 Pod 为 Pod4、Pod5和Pod6，旧版本的 Pod 已经被删除了，这里就完成了一次发布。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231967-edfb9438-3f9b-417b-8415-7924578ed639.png" alt="img"></p><h5 id="回滚模拟"><a href="#回滚模拟" class="headerlink" title="回滚模拟"></a>回滚模拟</h5><p>来看一下回滚模拟，根据上面的发布模拟可以知道 Pod4、Pod5、Pod6 已经发布完成。这时发现当前的业务版本是有问题的，如果做回滚的话，不管是通过 rollout 命令还是通过回滚修改 template，它其实都是把 template 回滚为旧版本的 template1。</p><p>这个时候 Deployment 会重新修改 ReplicaSet1 中 Pod 的期望数量，把期望数量修改为 3 个，且会逐渐减少新版本也就是 ReplicaSet2 中的 replica 数量，最终的效果就是把 Pod 从旧版本重新创建出来。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231838-2c6928ff-09bb-4d90-8dba-612cf06ab7f9.png" alt="img"></p><p>发布模拟的图中可以看到，其实初始版本中 Pod1、Pod2、Pod3 是旧版本，而回滚之后其实是 Pod7、Pod8、Pod9。就是说它的回滚并不是把之前的 Pod 重新找出来，而是说重新创建出符合旧版本 template 的 Pod。 </p><h5 id="spec-字段解析"><a href="#spec-字段解析" class="headerlink" title="spec 字段解析"></a>spec 字段解析</h5><p>最后再来简单看一些 Deployment 中的字段解析。首先看一下 Deployment 中其他的 spec 字段：</p><ul><li><p>MinReadySeconds：Deployment 会根据 Pod ready 来看 Pod 是否可用，但是如果我们设置了 MinReadySeconds 之后，比如设置为 30 秒，那 Deployment 就一定会等到 Pod ready 超过 30 秒之后才认为 Pod 是 available 的。Pod available 的前提条件是 Pod ready，但是 ready 的 Pod 不一定是 available 的，它一定要超过 MinReadySeconds 之后，才会判断为 available； </p></li><li><p>revisionHistoryLimit：保留历史 revision，即保留历史 ReplicaSet 的数量，默认值为 10 个。这里可以设置为一个或两个，如果回滚可能性比较大的话，可以设置数量超过 10；</p></li><li><p>paused：paused 是标识，Deployment 只做数量维持，不做新的发布，这里在 Debug 场景可能会用到；</p></li><li><p>progressDeadlineSeconds：前面提到当 Deployment 处于扩容或者发布状态时，它的 condition 会处于一个 processing 的状态，processing 可以设置一个超时时间。如果超过超时时间还处于 processing，那么 controller 将认为这个 Pod 会进入 failed 的状态。</p></li></ul><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231895-e105b999-2394-489a-808e-dabd623c4cf9.png" alt="img"></p><h5 id="升级策略字段解析"><a href="#升级策略字段解析" class="headerlink" title="升级策略字段解析"></a>升级策略字段解析</h5><p>最后来看一下升级策略字段解析。 </p><p>Deployment 在 RollingUpdate 中主要提供了两个策略，一个是 MaxUnavailable，另一个是 MaxSurge。这两个字段解析的意思，可以看下图中详细的 comment，或者简单解释一下： </p><ul><li>MaxUnavailable：滚动过程中最多有多少个 Pod 不可用；</li><li>MaxSurge：滚动过程中最多存在多少个 Pod 超过预期 replicas 数量。 </li></ul><p>上文提到，ReplicaSet 为 3 的 Deployment 在发布的时候可能存在一种情况：新版本的 ReplicaSet 和旧版本的 ReplicaSet 都可能有两个 replicas，加在一起就是 4 个，超过了我们期望的数量三个。这是因为我们默认的 MaxUnavailable 和 MaxSurge 都是 25%，默认 Deployment 在发布的过程中，可能有 25% 的 replica 是不可用的，也可能超过 replica 数量 25% 是可用的，最高可以达到 125% 的 replica 数量。 </p><p>这里其实可以根据用户实际场景来做设置。比如当用户的资源足够，且更注重发布过程中的可用性，可设置 MaxUnavailable 较小、MaxSurge 较大。但如果用户的资源比较紧张，可以设置 MaxSurge 较小，甚至设置为 0，这里要注意的是 <strong>MaxSurge 和 MaxUnavailable 不能同时为 0</strong>。 </p><p>理由不难理解，当 MaxSurge 为 0 的时候，必须要删除 Pod，才能扩容 Pod；如果不删除 Pod 是不能新扩 Pod 的，因为新扩出来的话，总共的 Pod 数量就会超过期望数量。而两者同时为 0 的话，MaxSurge 保证不能新扩 Pod，而 MaxUnavailable 不能保证 ReplicaSet 中有 Pod 是 available 的，这样就会产生问题。所以说这两个值不能同时为 0。用户可以根据自己的实际场景来设置对应的、合适的值。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231898-9b7daa8c-a271-4a5b-86d6-2cc5b5d50253.png" alt="img"></p><h4 id="本节总结"><a href="#本节总结" class="headerlink" title="本节总结"></a>本节总结</h4><p>本节课的主要内容就到此为止了，这里为大家简单总结一下。 </p><ul><li>Deployment 是 Kubernetes 中常见的一种 Workload，支持部署管理多版本的 Pod；</li><li>Deployment 管理多版本的方式，是针对每个版本的 template 创建一个 ReplicaSet，由 ReplicaSet 维护一定数量的 Pod 副本，而 Deployment 只需要关心不同版本的 ReplicaSet 里要指定多少数量的 Pod；</li><li>因此，Deployment 发布部署的根本原理，就是 Deployment 调整不同版本 ReplicaSet 里的终态副本数，以此来达到多版本 Pod 的升级和回滚。</li></ul><p><strong><u>PS: 本文摘录于阿里云公开课，仅供学习与参考。</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>deployment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5_应用编排与管理：核心原理</title>
    <link href="/2020/09/27/app-arrange-theory/"/>
    <url>/2020/09/27/app-arrange-theory/</url>
    
    <content type="html"><![CDATA[<h3 id="5-应用编排与管理：核心原理"><a href="#5-应用编排与管理：核心原理" class="headerlink" title="5_应用编排与管理：核心原理"></a>5_应用编排与管理：核心原理</h3><h4 id="一、资源元信息"><a href="#一、资源元信息" class="headerlink" title="一、资源元信息"></a>一、资源元信息</h4><h5 id="1-Kubernetes-资源对象"><a href="#1-Kubernetes-资源对象" class="headerlink" title="1. Kubernetes 资源对象"></a>1. Kubernetes 资源对象</h5><p>首先，我们来回顾一下 Kubernetes 的资源对象组成：主要包括了 Spec、Status 两部分。其中 Spec 部分用来描述期望的状态，Status 部分用来描述观测到的状态。</p><p>今天我们将为大家介绍 K8s 的另外一个部分，即元数据部分。该部分主要包括了用来识别资源的标签：Labels， 用来描述资源的注解；Annotations， 用来描述多个资源之间相互关系的 OwnerReference。这些元数据在 K8s 运行中有非常重要的作用。后续课程中将会反复讲到。</p><h5 id="2-labels"><a href="#2-labels" class="headerlink" title="2. labels"></a>2. labels</h5><p>第一个元数据，也是最重要的一个元数据是：资源标签。资源标签是一种具有标识型的 Key：Value 元数据，这里展示了几个常见的标签。</p><p>前三个标签都打在了 Pod 对象上，分别标识了对应的应用环境、发布的成熟度和应用的版本。从应用标签的例子可以看到，标签的名字包括了一个域名的前缀，用来描述打标签的系统和工具， 最后一个标签打在 Node 对象上，还在域名前增加了版本的标识 beta 字符串。</p><p>标签主要用来筛选资源和组合资源，可以使用类似于 SQL 查询 select，来根据 Label 查询相关的资源。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187567-726bb2ec-a600-4fa2-86b8-f53a3a3ffd23.png?x-oss-process=image/resize,w_1500" alt="img"></p><h5 id="3-Selector"><a href="#3-Selector" class="headerlink" title="3. Selector"></a>3. Selector</h5><p>最常见的 Selector 就是相等型 Selector。现在举一个简单的例子： </p><p>假设系统中有四个 Pod，每个 Pod 都有标识系统层级和环境的标签，我们通过 Tie：front 这个标签，可以匹配左边栏的 Pod，相等型 Selector 还可以包括多个相等条件，多个相等条件之间是逻辑”与“的关系。 </p><p>在刚才的例子中，通过 Tie=front,Env=dev 的Selector，我们可以筛选出所有 Tie=front，而且 Env=dev 的 Pod，也就是下图中左上角的 Pod。另外一种 Selector 是集合型 Selector，在例子中，Selector 筛选所有环境是 test 或者 gray 的 Pod。 </p><p>除了 in 的集合操作外，还有 notin 集合操作，比如 tie notin（front,back），将会筛选所有 tie 不是 front 且不是 back 的 Pod。另外，也可以根据是否存在某 lable 的筛选，如：Selector release，筛选所有带 release 标签的 Pod。集合型和相等型的 Selector，也可以用“，”来连接，同样的标识逻辑”与“的关系。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187528-0f9b4a0d-267b-4d22-bd44-2b4e681b61f7.png?x-oss-process=image/resize,w_1500" alt="img"></p><h5 id="4-Annotations"><a href="#4-Annotations" class="headerlink" title="4. Annotations"></a>4. Annotations</h5><p>另外一种重要的元数据是：annotations。一般是系统或者工具用来存储资源的非标示性信息，可以用来扩展资源的 spec/status 的描述，这里给了几个 annotations 的例子：</p><p>第一个例子，存储了阿里云负载器的证书 ID，我们可以看到 annotations 一样可以拥有域名的前缀，标注中也可以包含版本信息。第二个 annotation存储了 nginx 接入层的配置信息，我们可以看到 annotations 中包括“，”这样无法出现在 label 中的特殊字符。第三个 annotations 一般可以在 kubectl apply 命令行操作后的资源中看到， annotation 值是一个结构化的数据，实际上是一个 json 串，标记了上一次 kubectl 操作的资源的 json 的描述。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187521-d6090de5-3f4f-4ad3-b41c-56159d58a652.png?x-oss-process=image/resize,w_1500" alt="img"></p><h5 id="5-Ownereference"><a href="#5-Ownereference" class="headerlink" title="5. Ownereference"></a>5. Ownereference</h5><p>我们当时讲到最后一个元数据叫做 Ownereference，所谓所有者，一般就是指集合类的资源，比如说 Pod 集合，就有 replicaset、statefulset，这个将在后序的课程中讲到。</p><p>集合类资源的控制器会创建对应的归属资源。比如：replicaset 控制器在操作中会创建 Pod，被创建 Pod 的 Ownereference 就指向了创建 Pod 的 replicaset，Ownereference 使得用户可以方便地查找一个创建资源的对象，另外，还可以用来实现级联删除的效果。</p><h4 id="二、操作演示"><a href="#二、操作演示" class="headerlink" title="二、操作演示"></a>二、操作演示</h4><p>这里通过 kubectl 命令去连接我们 ACK 中已经创建好的一个 K8s 集群，然后来展示一下怎么查看和修改 K8s 对象中的元数据，主要就是 Pod 的一个标签、注解，还有对应的 Ownerference。</p><p>首先我们看一下集群里现在的配置情况：</p><p>查看 Pod，现在没有任何的一个 Pod；</p><ul><li><strong>kubectl get pods</strong></li></ul><p>然后用事先准备好的一个 Pod 的 yaml，创建一个 Pod 出来；</p><ul><li><strong>kubectl apply -f pod1.yaml</strong></li><li><strong>kubectl apply -f pod2.yaml</strong></li></ul><p>现在查看一下 Pod 打的标签，我们用 –show-labels 这个选项，可以看到这两个 Pod 都打上了一个部署环境和层级的标签；</p><ul><li><strong>kubectl get pods —show-labels</strong></li></ul><p>我们也可以通过另外一种方式来查看具体的资源信息。首先查看 nginx1 第一个 Pod 的一个信息，用 -o yaml 的方式输出，可以看到这个 Pod 元数据里面包括了一个 lables 的字段，里面有两个 lable；</p><ul><li><strong>kubectl get pods nginx1 -o yaml | less</strong></li></ul><p>现在再想一下，怎么样对 Pod 已有的 lable 进行修改？我们先把它的部署环境，从开发环境改成测试环境，然后指定 Pod 名字，在环境再加上它的一个值 test ，看一下能不能成功。 这里报了一个错误，可以看到，它其实是说现在这个 label 已经有值了；</p><ul><li><strong>kubectl label pods nginx1 env=test</strong></li></ul><p>如果想覆盖掉它的话，得额外再加上一个覆盖的选项。加上之后呢，我们应该可以看到这个打标已经成功了；</p><ul><li><strong>kubectl label pods nginx1 env=test —overwrite</strong></li></ul><p>我们再看一下现在集群的 lable 设置情况，首先可以看到 nginx1 的确已经加上了一个部署环境 test 标签；</p><ul><li><strong>kubectl get pods —show-labels</strong></li></ul><p>如果想要对 Pod 去掉一个标签，也是跟打标签一样的操作，但是 env 后就不是等号了。只加上 label 名字，后面不加等号，改成用减号表示去除 label 的 k:v；</p><ul><li><strong>kubectl label pods nginx tie-</strong></li></ul><p>可以看到这个 label，去标已经完全成功；</p><ul><li><strong>kubectl get pods —show-labels</strong></li></ul><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187641-41eee660-5197-4e71-92c1-921e1ab18ec2.png" alt="img"></p><p>下面来看一下配置的 label 值，的确能看到 nginx1 的这个 Pod 少了一个 tie=front 的标签。有了这个 Pod 标签之后，可以看一下怎样用 label Selector 进行匹配？首先 label Selector 是通过 -l 这个选项来进行指定的 ，指定的时候，先试一下用相等型的一个 label 来筛选，所以我们指定的是部署环境等于测试的一个 Pod，我们可以看到能够筛选出一台；</p><ul><li><strong>kubectl get pods —show-labels -l env=test</strong></li></ul><p>假如说有多个相等的条件需要指定的，实际上这是一个与的关系，假如说 env 再等于 dev，我们实际上是一个 Pod 都拿不到的；</p><ul><li><strong>kubectl get pods —show-labels -l env=test,env=dev</strong></li></ul><p>然后假如说 env=dev，但是 tie=front，我们能够匹配到第二个 Pod，也就是 nginx2；</p><ul><li><strong>kubectl get pods —show-labels -l env=dev,tie=front</strong></li></ul><p>我们还可以再试一下怎么样用集合型的 label Selector 来进行筛选。这一次我们还是想要匹配出所有部署环境是 test 或者是 dev 的一个 Pod，所以在这里加上一个引号，然后在括号里面指定所有部署环境的一个集合。这次能把两个创建的 Pod 都筛选出来；</p><ul><li><strong>kubectl get pods —show-labels -l ’env in (dev,test)’</strong></li></ul><p>我们再试一下怎样对 Pod 增加一个注解，注解的话，跟打标是一样的操作，但是把 label 命令改成 annotate 命令；然后，一样指定类型和对应的名字。后面就不是加上 label 的 k:v 了，而是加上 annotation 的 k:v。这里我们可以指定一个任意的字符串，比如说加上空格、加上逗号都可以；</p><ul><li><strong>kubectl annotate pods nginx1 my-annotate=‘my annotate,ok’</strong></li></ul><p>然后，我们再看一下这个 Pod 的一些元数据，我们这边能够看到这个 Pod 的元数据里面 annotations，这是有一个 my-annotate 这个 Annotations；</p><ul><li><strong>kubectl get pods nging1 -o yaml | less</strong></li></ul><p>然后我们这里其实也能够看到有一个 kubectl apply 的时候，kubectl 工具增加了一个 annotation，这也是一个 json 串。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187628-36ad6780-3f60-4d16-850d-ca8565ca8cdf.png?x-oss-process=image/resize,w_1500" alt="img"></p><p>然后我们再演示一下看 Pod 的 Ownereference 是怎么出来的。原来的 Pod 都是直接通过创建 Pod 这个资源方式来创建的，这次换一种方式来创建：通过创建一个 ReplicaSet 对象来创建 Pod 。首先创建一个 ReplicaSet 对象，这个 ReplicaSet 对象可以具体查看一下；</p><ul><li><strong>kubectl apply -f rs.yaml</strong></li><li><strong>kubectl get replicasets  nginx-replicasets -o yaml |less</strong></li></ul><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187637-41e6df02-3d01-4038-ac67-ef62502a0420.png?x-oss-process=image/resize,w_1500" alt="img"></p><p>我们可以关注一下这个 ReplicaSet 里面 spec 里面，提到会创建两个 Pod，然后 selector 通过匹配部署环境是 product 生产环境的这个标签来进行匹配。所以我们可以看一下，现在集群中的 Pod 情况；</p><ul><li><strong>kubectl get pods</strong></li></ul><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187677-7c5eb8fb-d484-4303-b801-1f9f9a755a25.png" alt="img"></p><p>将会发现多了两个 Pod，仔细查看这两个 Pod，可以看到 ReplicaSet 创建出来的 Pod 有一个特点，即它会带有 Ownereference，然后 Ownereference 里面指向了是一个 replicasets 类型，名字就叫做 nginx-replicasets；</p><ul><li><strong>kubectl get pods nginx-replicasets-rhd68 -o yaml | less</strong></li></ul><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187603-89bfe25e-0202-4c41-b98f-0f4624b37a11.png?x-oss-process=image/resize,w_1500" alt="img"> </p><h4 id="三、控制器模式"><a href="#三、控制器模式" class="headerlink" title="三、控制器模式"></a>三、控制器模式</h4><h5 id="1、控制循环"><a href="#1、控制循环" class="headerlink" title="1、控制循环"></a>1、控制循环</h5><p>控制型模式最核心的就是控制循环的概念。在控制循环中包括了控制器，被控制的系统，以及能够观测系统的传感器，三个逻辑组件。</p><p>当然这些组件都是逻辑的，外界通过修改资源 spec 来控制资源，控制器比较资源 spec 和 status，从而计算一个 diff，diff 最后会用来决定执行对系统进行什么样的控制操作，控制操作会使得系统产生新的输出，并被传感器以资源 status 形式上报，控制器的各个组件将都会是独立自主地运行，不断使系统向 spec 表示终态趋近。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187643-740fba96-5b4b-401c-80dd-f0d7717f306c.png?x-oss-process=image/resize,w_1500" alt="img"></p><h5 id="2、Sensor"><a href="#2、Sensor" class="headerlink" title="2、Sensor"></a>2、Sensor</h5><p>控制循环中逻辑的传感器主要由 Reflector、Informer、Indexer 三个组件构成。</p><p>Reflector 通过 List 和 Watch K8s server 来获取资源的数据。List 用来在 Controller 重启以及 Watch 中断的情况下，进行系统资源的全量更新；而 Watch 则在多次 List 之间进行增量的资源更新；Reflector 在获取新的资源数据后，会在 Delta 队列中塞入一个包括资源对象信息本身以及资源对象事件类型的 Delta 记录，Delta 队列中可以保证同一个对象在队列中仅有一条记录，从而避免 Reflector 重新 List 和 Watch 的时候产生重复的记录。</p><p>Informer 组件不断地从 Delta 队列中弹出 delta 记录，然后把资源对象交给 indexer，让 indexer 把资源记录在一个缓存中，缓存在默认设置下是用资源的命名空间来做索引的，并且可以被 Controller Manager 或多个 Controller 所共享。之后，再把这个事件交给事件的回调函数</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187734-9865063f-c9ee-466a-a767-f2962169e7b3.png?x-oss-process=image/resize,w_1500" alt="img"></p><p>控制循环中的控制器组件主要由事件处理函数以及 worker 组成，事件处理函数之间会相互关注资源的新增、更新、删除的事件，并根据控制器的逻辑去决定是否需要处理。对需要处理的事件，会把事件关联资源的命名空间以及名字塞入一个工作队列中，并且由后续的 worker 池中的一个 Worker 来处理，工作队列会对存储的对象进行去重，从而避免多个 Woker 处理同一个资源的情况。 </p><p>Worker 在处理资源对象时，一般需要用资源的名字来重新获得最新的资源数据，用来创建或者更新资源对象，或者调用其他的外部服务，Worker 如果处理失败的时候，一般情况下会把资源的名字重新加入到工作队列中，从而方便之后进行重试。 </p><h5 id="3、控制循环例子-扩容"><a href="#3、控制循环例子-扩容" class="headerlink" title="3、控制循环例子-扩容"></a>3、控制循环例子-扩容</h5><p>这里举一个简单的例子来说明一下控制循环的工作原理。 </p><p>ReplicaSet 是一个用来描述无状态应用的扩缩容行为的资源， ReplicaSet controler 通过监听 ReplicaSet 资源来维持应用希望的状态数量，ReplicaSet 中通过 selector 来匹配所关联的 Pod，在这里考虑 ReplicaSet rsA 的，replicas 从 2 被改到 3 的场景。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187510-d58a5fa0-d4af-41c3-838c-81845285c018.png?x-oss-process=image/resize,w_1500" alt="img"></p><p>首先，Reflector 会 watch 到 ReplicaSet 和 Pod 两种资源的变化，为什么我们还会 watch pod 资源的变化稍后会讲到。发现 ReplicaSet 发生变化后，在 delta 队列中塞入了对象是 rsA，而且类型是更新的记录。</p><p>Informer 一方面把新的 ReplicaSet 更新到缓存中，并与 Namespace nsA 作为索引。另外一方面，调用 Update 的回调函数，ReplicaSet 控制器发现 ReplicaSet 发生变化后会把字符串的 nsA/rsA 字符串塞入到工作队列中，工作队列后的一个 Worker 从工作队列中取到了 nsA/rsA 这个字符串的 key，并且从缓存中取到了最新的 ReplicaSet 数据。</p><p>Worker 通过比较 ReplicaSet 中 spec 和 status 里的数值，发现需要对这个 ReplicaSet 进行扩容，因此 ReplicaSet 的 Worker 创建了一个 Pod，这个 pod 中的 Ownereference 取向了 ReplicaSet rsA。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187602-f3238b0b-fe1e-4276-97ba-7ce6f56d0503.png?x-oss-process=image/resize,w_1500" alt="img"></p><p>然后 Reflector Watch 到的 Pod 新增事件，在 delta 队列中额外加入了 Add 类型的 deta 记录，一方面把新的 Pod 记录通过 Indexer 存储到了缓存中，另一方面调用了 ReplicaSet 控制器的 Add 回调函数，Add 回调函数通过检查 pod ownerReferences 找到了对应的 ReplicaSet，并把包括 ReplicaSet 命名空间和字符串塞入到了工作队列中。 </p><p>ReplicaSet 的 Woker 在得到新的工作项之后，从缓存中取到了新的 ReplicaSet 记录，并得到了其所有创建的 Pod，因为 ReplicaSet 的状态不是最新的，也就是所有创建 Pod 的数量不是最新的。因此在此时 ReplicaSet 更新 status 使得 spec 和 status 达成一致。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187623-7e3b818f-9376-457f-829f-a2be2a620ade.png?x-oss-process=image/resize,w_1500" alt="img"></p><h4 id="四、控制器模式总结"><a href="#四、控制器模式总结" class="headerlink" title="四、控制器模式总结"></a>四、控制器模式总结</h4><h5 id="1、两种-API-设计方法"><a href="#1、两种-API-设计方法" class="headerlink" title="1、两种 API 设计方法"></a>1、两种 API 设计方法</h5><p>Kubernetes 控制器模式依赖声明式的 API。另外一种常见的 API 类型是命令式 API。为什么 Kubernetes 采用声明式 API，而不是命令式 API 来设计整个控制器呢？ </p><p>首先，比较两种 API 在交互行为上的差别。在生活中，常见的命令式的交互方式是家长和孩子交流方式，因为孩子欠缺目标意识，无法理解家长期望，家长往往通过一些命令，教孩子一些明确的动作，比如说：吃饭、睡觉类似的命令。我们在容器编排体系中，命令式 API 就是通过向系统发出明确的操作来执行的。 </p><p>而常见的声明式交互方式，就是老板对自己员工的交流方式。老板一般不会给自己的员工下很明确的决定，实际上可能老板对于要操作的事情本身，还不如员工清楚。因此，老板通过给员工设置可量化的业务目标的方式，来发挥员工自身的主观能动性。比如说，老板会要求某个产品的市场占有率达到 80%，而不会指出要达到这个市场占有率，要做的具体操作细节。 </p><p>类似的，在容器编排体系中，我们可以执行一个应用实例副本数保持在 3 个，而不用明确的去扩容 Pod 或是删除已有的 Pod，来保证副本数在三个。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187617-16756dca-a91f-404a-b641-8cd639b984f7.png?x-oss-process=image/resize,w_1500" alt="img"></p><h5 id="2、命令式-API-的问题"><a href="#2、命令式-API-的问题" class="headerlink" title="2、命令式 API 的问题"></a>2、命令式 API 的问题</h5><p>在理解两个交互 API 的差别后，可以分析一下命令式 API 的问题。 </p><ul><li>命令 API 最大的一个问题在于错误处理； </li></ul><p>在大规模的分布式系统中，错误是无处不在的。一旦发出的命令没有响应，调用方只能通过反复重试的方式来试图恢复错误，然而盲目的重试可能会带来更大的问题。 </p><p>假设原来的命令，后台实际上已经执行完成了，重试后又多执行了一个重试的命令操作。为了避免重试的问题，系统往往还需要在执行命令前，先记录一下需要执行的命令，并且在重启等场景下，重做待执行的命令，而且在执行的过程中，还需要考虑多个命令的先后顺序、覆盖关系等等一些复杂的逻辑情况。 </p><ul><li>实际上许多命令式的交互系统后台往往还会做一个巡检的系统，用来修正命令处理超时、重试等一些场景造成数据不一致的问题； </li></ul><p>然而，因为巡检逻辑和日常操作逻辑是不一样的，往往在测试上覆盖不够，在错误处理上不够严谨，具有很大的操作风险，因此往往很多巡检系统都是人工来触发的。 </p><ul><li>最后，命令式 API 在处理多并发访问时，也很容易出现问题； </li></ul><p>假如有多方并发的对一个资源请求进行操作，并且一旦其中有操作出现了错误，就需要重试。那么最后哪一个操作生效了，就很难确认，也无法保证。很多命令式系统往往在操作前会对系统进行加锁，从而保证整个系统最后生效行为的可预见性，但是加锁行为会降低整个系统的操作执行效率。 </p><ul><li>相对的，声明式 API 系统里天然地记录了系统现在和最终的状态。 </li></ul><p>不需要额外的操作数据。另外因为状态的幂等性，可以在任意时刻反复操作。在声明式系统运行的方式里，正常的操作实际上就是对资源状态的巡检，不需要额外开发巡检系统，系统的运行逻辑也能够在日常的运行中得到测试和锤炼，因此整个操作的稳定性能够得到保证。 </p><p>最后，因为资源的最终状态是明确的，我们可以合并多次对状态的修改。可以不需要加锁，就支持多方的并发访问。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187533-52fd8d0f-ec0a-465d-a8cd-a45744b86d37.png?x-oss-process=image/resize,w_1500" alt="img"></p><h5 id="3、控制器模式总结"><a href="#3、控制器模式总结" class="headerlink" title="3、控制器模式总结"></a>3、控制器模式总结</h5><p>最后我们总结一下：</p><ol><li>Kubernetes 所采用的控制器模式，是由声明式 API 驱动的。确切来说，是基于对 Kubernetes 资源对象的修改来驱动的；</li><li>Kubernetes 资源之后，是关注该资源的控制器。这些控制器将异步的控制系统向设置的终态驱近；</li><li>这些控制器是自主运行的，使得系统的自动化和无人值守成为可能；</li><li>因为 Kubernetes 的控制器和资源都是可以自定义的，因此可以方便的扩展控制器模式。特别是对于有状态应用，我们往往通过自定义资源和控制器的方式，来自动化运维操作。这个也就是后续会介绍的 operator 的场景。</li></ol><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187601-8d979d5f-004c-4165-ad38-9b85c78a085b.png?x-oss-process=image/resize,w_1500" alt="img"></p><h4 id="本节总结"><a href="#本节总结" class="headerlink" title="本节总结"></a>本节总结</h4><p>本节课的主要内容就到此为止了，这里为大家简单总结一下： </p><ul><li>Kubernetes 资源对象中的元数据部分，主要包括了用来识别资源的标签：Labels， 用来描述资源的注解；Annotations， 用来描述多个资源之间相互关系的 OwnerReference。这些元数据在 K8s 运行中有非常重要的作用；</li><li>控制型模式中最核心的就是控制循环的概念；</li><li>两种 API 设计方法：声明式 API 和命令式 API ；Kubernetes 所采用的控制器模式，是由声明式 API 驱动的；</li></ul><p><strong><u>PS：本文摘录于阿里云公开课，仅为学习与参考。</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>theroy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>k8s_理解Pod和容器设计模式</title>
    <link href="/2020/09/25/k8s-pod/"/>
    <url>/2020/09/25/k8s-pod/</url>
    
    <content type="html"><![CDATA[<h3 id="k8s-理解Pod和容器设计模式"><a href="#k8s-理解Pod和容器设计模式" class="headerlink" title="k8s_理解Pod和容器设计模式"></a>k8s_理解Pod和容器设计模式</h3><h4 id="一、为什么需要-Pod"><a href="#一、为什么需要-Pod" class="headerlink" title="一、为什么需要 Pod"></a>一、为什么需要 Pod</h4><h5 id="容器的基本概念"><a href="#容器的基本概念" class="headerlink" title="容器的基本概念"></a>容器的基本概念</h5><p>现在来看第一个问题：为什么需要 Pod？我们知道 Pod 是 Kubernetes 项目里面一个非常重要的概念，也是非常重要的一个原子调度单位，但是为什么我们会需要这样一个概念呢？我们在使用容器 Docker 的时候，也没有这个说法。其实如果要理解 Pod，我们首先要理解容器，所以首先来回顾一下容器的概念：</p><p><strong>容器的本质实际上是一个进程，是一个视图被隔离，资源受限的进程。</strong></p><p>容器里面 PID=1 的进程就是应用本身，这意味着管理虚拟机等于管理基础设施，因为我们是在管理机器，但管理容器却等于直接管理应用本身。这也是之前说过的不可变基础设施的一个最佳体现，这个时候，你的应用就等于你的基础设施，它一定是不可变的。</p><p>在以上面的例子为前提的情况下，Kubernetes 又是什么呢？我们知道，很多人都说 Kubernetes 是云时代的操作系统，这个非常有意思，因为如果以此类推，容器镜像就是这个操作系统的软件安装包，它们之间是这样的一个类比关系。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134387-3d59f173-6d5d-422d-87de-9e3581af5c91.png" alt="img"></p><p>真实操作系统里的例子</p><p>如果说 Kubernetes 就是操作系统的话，那么我们不妨看一下真实的操作系统的例子。</p><p>例子里面有一个程序叫做 Helloworld，这个 Helloworld 程序实际上是由一组进程组成的，需要注意一下，这里说的进程实际上等同于 Linux 中的线程。</p><p>因为 Linux 中的线程是轻量级进程，所以如果从 Linux 系统中去查看 Helloworld 中的 pstree，将会看到这个 Helloworld 实际上是由四个线程组成的，分别是 **{api、main、log、compute}**。也就是说，四个这样的线程共同协作，共享 Helloworld 程序的资源，组成了 Helloworld 程序的真实工作情况。</p><p>这是操作系统里面进程组或者线程组中一个非常真实的例子，以上就是进程组的一个概念。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134417-da3e675b-647c-4004-930f-f36a659c913b.png" alt="img"></p><p>那么大家不妨思考一下，在真实的操作系统里面，一个程序往往是根据进程组来进行管理的。Kubernetes 把它类比为一个操作系统，比如说 Linux。针对于容器我们前面提到可以类比为进程，就是前面的 Linux 线程。那么 Pod 又是什么呢？实际上 Pod 就是我们刚刚提到的进程组，也就是 Linux 里的线程组。</p><h5 id="进程组概念"><a href="#进程组概念" class="headerlink" title="进程组概念"></a>进程组概念</h5><p>说到进程组，首先建议大家至少有个概念上的理解，然后我们再详细的解释一下。</p><p>还是前面那个例子：Helloworld 程序由四个进程组成，这些进程之间会共享一些资源和文件。那么现在有一个问题：假如说现在把 Helloworld 程序用容器跑起来，你会怎么去做？</p><p>当然，最自然的一个解法就是，我现在就启动一个 Docker 容器，里面运行四个进程。可是这样会有一个问题，这种情况下容器里面 PID=1 的进程该是谁? 比如说，它应该是我的 main 进程，那么问题来了，“谁”又负责去管理剩余的 3 个进程呢？ </p><p>这个核心问题在于，容器的设计本身是一种“单进程”模型，不是说容器里只能起一个进程，由于容器的应用等于进程，所以只能去管理 PID=1 的这个进程，其他再起来的进程其实是一个托管状态。 所以说服务应用进程本身就具有“进程管理”的能力。</p><p>比如说 Helloworld 的程序有 system 的能力，或者直接把容器里 PID=1 的进程直接改成 systemd，否则这个应用，或者是容器是没有办法去管理很多个进程的。因为 PID=1 进程是应用本身，如果现在把这个 PID=1 的进程给 kill 了，或者它自己运行过程中死掉了，那么剩下三个进程的资源就没有人回收了，这个是非常非常严重的一个问题。</p><p>而反过来真的把这个应用本身改成了 systemd，或者在容器里面运行了一个 systemd，将会导致另外一个问题：使得管理容器，不再是管理应用本身了，而等于是管理 systemd，这里的问题就非常明显了。比如说我这个容器里面 run 的程序或者进程是 systemd，那么接下来，这个应用是不是退出了？是不是 fail 了？是不是出现异常失败了？实际上是没办法直接知道的，因为容器管理的是 systemd。这就是为什么在容器里面运行一个复杂程序往往比较困难的一个原因。 </p><p>这里再帮大家梳理一下：<strong>由于容器实际上是一个“单进程”模型</strong>，所以如果你在容器里启动多个进程，只有一个可以作为 PID=1 的进程，而这时候，如果这个 PID=1 的进程挂了，或者说失败退出了，那么其他三个进程就会自然而然的成为孤儿，没有人能够管理它们，没有人能够回收它们的资源，这是一个非常不好的情况。 </p><blockquote><p>注意：Linux 容器的“单进程”模型，指的是容器的生命周期等同于 PID=1 的进程（容器应用进程）的生命周期，而不是说容器里不能创建多进程。当然，一般情况下，容器应用进程并不具备进程管理能力，所以你通过 exec 或者 ssh 在容器里创建的其他进程，一旦异常退出（比如 ssh 终止）是很容易变成孤儿进程的。</p></blockquote><p>反过来，其实可以在容器里面 run 一个 systemd，用它来管理其他所有的进程。这样会产生第二个问题：实际上没办法直接管理我的应用了，因为我的应用被 systemd 给接管了，那么这个时候应用状态的生命周期就不等于容器生命周期。这个管理模型实际上是非常非常复杂的。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134437-b2d02bac-7803-435a-9b13-606eb878d74e.png" alt="img"></p><h5 id="Pod-“进程组”"><a href="#Pod-“进程组”" class="headerlink" title="Pod = “进程组”"></a>Pod = “进程组”</h5><p>在 kubernetes 里面，Pod 实际上正是 kubernetes 项目为你抽象出来的一个可以类比为进程组的概念。</p><p>前面提到的，由四个进程共同组成的一个应用 Helloworld，在 Kubernetes 里面，实际上会被定义为一个拥有四个容器的 Pod，这个概念大家一定要非常仔细的理解。</p><p>就是说现在有四个职责不同、相互协作的进程，需要放在容器里去运行，在 Kubernetes 里面并不会把它们放到一个容器里，因为这里会遇到两个问题。那么在 Kubernetes 里会怎么去做呢？它会把四个独立的进程分别用四个独立的容器启动起来，然后把它们定义在一个 Pod 里面。 </p><p>所以当 Kubernetes 把 Helloworld 给拉起来的时候，你实际上会看到四个容器，它们共享了某些资源，这些资源都属于 Pod，所以我们说 Pod 在 Kubernetes 里面只有一个逻辑单位，没有一个真实的东西对应说这个就是 Pod，不会有的。真正起来在物理上存在的东西，就是四个容器。这四个容器，或者说是多个容器的组合就叫做 Pod。并且还有一个概念一定要非常明确，Pod 是 Kubernetes 分配资源的一个单位，因为里面的容器要共享某些资源，所以 Pod 也是 Kubernetes 的原子调度单位。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134420-11fc8a1b-71be-45ff-8970-a6397fb0f24c.png" alt="img"></p><p>上面提到的 Pod 设计，也不是 Kubernetes 项目自己想出来的， 而是早在 Google 研发 Borg 的时候，就已经发现了这样一个问题。这个在 Borg paper 里面有非常非常明确的描述。简单来说 Google 工程师发现在 Borg 下面部署应用时，很多场景下都存在着类似于“进程与进程组”的关系。更具体的是，这些应用之前往往有着密切的协作关系，使得它们必须部署在同一台机器上并且共享某些信息。</p><p>以上就是进程组的概念，也是 Pod 的用法。 </p><h5 id="为什么-Pod-必须是原子调度单位？"><a href="#为什么-Pod-必须是原子调度单位？" class="headerlink" title="为什么 Pod 必须是原子调度单位？"></a>为什么 Pod 必须是原子调度单位？</h5><p>可能到这里大家会有一些问题：虽然了解这个东西是一个进程组，但是为什么要把 Pod 本身作为一个概念抽象出来呢？或者说能不能通过调度把 Pod 这个事情给解决掉呢？为什么 Pod 必须是 Kubernetes 里面的原子调度单位？ </p><p>下面我们通过一个例子来解释。</p><p>假如现在有两个容器，它们是紧密协作的，所以它们应该被部署在一个 Pod 里面。具体来说，第一个容器叫做 App，就是业务容器，它会写日志文件；第二个容器叫做 LogCollector，它会把刚刚 App 容器写的日志文件转发到后端的 ElasticSearch 中。 </p><p>两个容器的资源需求是这样的：App 容器需要 1G 内存，LogCollector 需要 0.5G 内存，而当前集群环境的可用内存是这样一个情况：Node_A：1.25G 内存，Node_B：2G 内存。 </p><p>假如说现在没有 Pod 概念，就只有两个容器，这两个容器要紧密协作、运行在一台机器上。可是，如果调度器先把 App 调度到了 Node_A 上面，接下来会怎么样呢？这时你会发现：LogCollector 实际上是没办法调度到 Node_A 上的，因为资源不够。其实此时整个应用本身就已经出问题了，调度已经失败了，必须去重新调度。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134483-2edd851a-cc15-4f83-8d23-fd9810a6e460.png" alt="img"></p><p>以上就是一个非常典型的成组调度失败的例子。英文叫做：Task co-scheduling 问题，这个问题不是说不能解，在很多项目里面，这样的问题都有解法。</p><p>比如说在 Mesos 里面，它会做一个事情，叫做资源囤积（resource hoarding）：即当所有设置了 Affinity 约束的任务都达到时，才开始统一调度，这是一个非常典型的成组调度的解法。</p><p>所以上面提到的“App”和“LogCollector”这两个容器，在 Mesos 里面，他们不会说立刻调度，而是等两个容器都提交完成，才开始统一调度。这样也会带来新的问题，首先调度效率会损失，因为需要等待。由于需要等还会有外一个情况会出现，就是产生死锁，就是互相等待的一个情况。这些机制在 Mesos 里都是需要解决的，也带来了额外的复杂度。</p><p>另一种解法是 Google 的解法。它在 Omega 系统（就是 Borg 下一代）里面，做了一个非常复杂且非常厉害的解法，叫做乐观调度。比如说：不管这些冲突的异常情况，先调度，同时设置一个非常精妙的回滚机制，这样经过冲突后，通过回滚来解决问题。这个方式相对来说要更加优雅，也更加高效，但是它的实现机制是非常复杂的。这个有很多人也能理解，就是悲观锁的设置一定比乐观锁要简单。</p><p>而像这样的一个 Task co-scheduling 问题，在 Kubernetes 里，就直接通过 Pod 这样一个概念去解决了。因为在 Kubernetes 里，这样的一个 App 容器和 LogCollector 容器一定是属于一个 Pod 的，它们在调度时必然是以一个 Pod 为单位进行调度，所以这个问题是根本不存在的。 </p><h5 id="再次理解-Pod"><a href="#再次理解-Pod" class="headerlink" title="再次理解 Pod"></a>再次理解 Pod</h5><p>在讲了前面这些知识点之后，我们来再次理解一下 Pod，首先 Pod 里面的容器是“超亲密关系”。</p><p>这里有个“超”字需要大家理解，正常来说，有一种关系叫做亲密关系，这个亲密关系是一定可以通过调度来解决的。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134426-2b1f7331-c998-434d-b932-dbdcfdffbc37.png" alt="img"></p><p>比如说现在有两个 Pod，它们需要运行在同一台宿主机上，那这样就属于亲密关系，调度器一定是可以帮助去做的。但是对于超亲密关系来说，有一个问题，即它必须通过 Pod 来解决。因为如果超亲密关系赋予不了，那么整个 Pod 或者说是整个应用都无法启动。</p><p>什么叫做超亲密关系呢？大概分为以下几类：</p><ul><li>比如说两个进程之间会发生文件交换，前面提到的例子就是这样，一个写日志，一个读日志；</li><li>两个进程之间需要通过 localhost 或者说是本地的 Socket 去进行通信，这种本地通信也是超亲密关系；</li><li>这两个容器或者是微服务之间，需要发生非常频繁的 RPC 调用，出于性能的考虑，也希望它们是超亲密关系；</li><li>两个容器或者是应用，它们需要共享某些 Linux Namespace。最简单常见的一个例子，就是我有一个容器需要加入另一个容器的 Network Namespace。这样我就能看到另一个容器的网络设备，和它的网络信息。</li></ul><p>像以上几种关系都属于超亲密关系，它们都是在 Kubernetes 中会通过 Pod 的概念去解决的。</p><p>现在我们理解了 Pod 这样的概念设计，理解了为什么需要 Pod。它解决了两个问题：</p><ol><li>我们怎么去描述超亲密关系；</li><li>我们怎么去对超亲密关系的容器或者说是业务去做统一调度，这是 Pod 最主要的一个诉求。</li></ol><h4 id="二、Pod-的实现机制"><a href="#二、Pod-的实现机制" class="headerlink" title="二、Pod 的实现机制"></a>二、Pod 的实现机制</h4><h5 id="Pod-要解决的问题"><a href="#Pod-要解决的问题" class="headerlink" title="Pod 要解决的问题"></a>Pod 要解决的问题</h5><p>像 Pod 这样一个东西，本身是一个逻辑概念。那在机器上，它究竟是怎么实现的呢？这就是我们要解释的第二个问题。</p><p>既然说 Pod 要解决这个问题，核心就在于如何让一个 Pod 里的多个容器之间最高效的共享某些资源和数据。</p><p>因为容器之间原本是被 Linux Namespace 和 cgroups 隔开的，所以现在实际要解决的是怎么去打破这个隔离，然后共享某些事情和某些信息。这就是 Pod 的设计要解决的核心问题所在。</p><p><strong>所以说具体的解法分为两个部分：网络和存储。</strong></p><h5 id="1-共享网络"><a href="#1-共享网络" class="headerlink" title="1.共享网络"></a>1.共享网络</h5><p>第一个问题是 Pod 里的多个容器怎么去共享网络？下面是个例子：</p><p>比如说现在有一个 Pod，其中包含了一个容器 A 和一个容器 B，它们两个就要共享 Network Namespace。在 Kubernetes 里的解法是这样的：它会在每个 Pod 里，额外起一个 Infra container 小容器来共享整个 Pod 的 Network Namespace。</p><p>Infra container 是一个非常小的镜像，大概 100~200KB 左右，是一个汇编语言写的、永远处于“暂停”状态的容器。由于有了这样一个 Infra container 之后，其他所有容器都会通过 Join Namespace 的方式加入到 Infra container 的 Network Namespace 中。</p><p>所以说一个 Pod 里面的所有容器，它们看到的网络视图是完全一样的。即：它们看到的网络设备、IP地址、Mac地址等等，跟网络相关的信息，其实全是一份，这一份都来自于 Pod 第一次创建的这个 Infra container。这就是 Pod 解决网络共享的一个解法。</p><p>在 Pod 里面，一定有一个 IP 地址，是这个 Pod 的 Network Namespace 对应的地址，也是这个 Infra container 的 IP 地址。所以大家看到的都是一份，而其他所有网络资源，都是一个 Pod 一份，并且被 Pod 中的所有容器共享。这就是 Pod 的网络实现方式。</p><p>由于需要有一个相当于说中间的容器存在，所以整个 Pod 里面，必然是 Infra container 第一个启动。并且整个 Pod 的生命周期是等同于 Infra container 的生命周期的，与容器 A 和 B 是无关的。这也是为什么在 Kubernetes 里面，它是允许去单独更新 Pod 里的某一个镜像的，即：做这个操作，整个 Pod 不会重建，也不会重启，这是非常重要的一个设计。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134460-bae9e9c3-8e1d-4d79-8cd2-f0b3aff3d2e4.png" alt="img"></p><h5 id="2-共享存储"><a href="#2-共享存储" class="headerlink" title="2.共享存储"></a>2.共享存储</h5><p>第二问题：Pod 怎么去共享存储？Pod 共享存储就相对比较简单。</p><p>比如说现在有两个容器，一个是 Nginx，另外一个是非常普通的容器，在 Nginx 里放一些文件，让我能通过 Nginx 访问到。所以它需要去 share 这个目录。我 share 文件或者是 share 目录在 Pod 里面是非常简单的，实际上就是把 volume 变成了 Pod level。然后所有容器，就是所有同属于一个 Pod 的容器，他们共享所有的 volume。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134394-2f04efd5-8188-434b-a033-b4a2b09547f0.png" alt="img"></p><p> 比如说上图的例子，这个 volume 叫做 shared-data，它是属于 Pod level 的，所以在每一个容器里可以直接声明：要挂载 shared-data 这个 volume，只要你声明了你挂载这个 volume，你在容器里去看这个目录，实际上大家看到的就是同一份。这个就是 Kubernetes 通过 Pod 来给容器共享存储的一个做法。</p><p>所以在之前的例子中，应用容器 App 写了日志，只要这个日志是写在一个 volume 中，只要声明挂载了同样的 volume，这个 volume 就可以立刻被另外一个 LogCollector 容器给看到。以上就是 Pod 实现存储的方式。</p><h4 id="三、详解容器设计模式"><a href="#三、详解容器设计模式" class="headerlink" title="三、详解容器设计模式"></a>三、详解容器设计模式</h4><p>现在我们知道了为什么需要 Pod，也了解了 Pod 这个东西到底是怎么实现的。最后，以此为基础，详细介绍一下 Kubernetes 非常提倡的一个概念，叫做容器设计模式。</p><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><p>接下来将会用一个例子来给大家进行讲解。</p><p>比如我现在有一个非常常见的一个诉求：我现在要发布一个应用，这个应用是 JAVA 写的，有一个 WAR 包需要把它放到 Tomcat 的 web APP 目录下面，这样就可以把它启动起来了。可是像这样一个 WAR 包或 Tomcat 这样一个容器的话，怎么去做，怎么去发布？这里面有几种做法。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134433-e9168bca-f622-4519-afc0-08ab3466cc52.png" alt="img"></p><ul><li><p>第一种方式：可以把 WAR 包和 Tomcat 打包放进一个镜像里面。但是这样带来一个问题，就是现在这个镜像实际上揉进了两个东西。那么接下来，无论是我要更新 WAR 包还是说我要更新 Tomcat，都要重新做一个新的镜像，这是比较麻烦的；</p></li><li><p>第二种方式：就是镜像里面只打包 Tomcat。它就是一个 Tomcat，但是需要使用数据卷的方式，比如说 hostPath，从宿主机上把 WAR 包挂载进我们 Tomcat 容器中，挂到我的 web APP 目录下面，这样把这个容器启用起来之后，里面就能用了。</p></li></ul><p>但是这时会发现一个问题：这种做法一定需要维护一套分布式存储系统。因为这个容器可能第一次启动是在宿主机 A 上面，第二次重新启动就可能跑到 B 上去了，容器它是一个可迁移的东西，它的状态是不保持的。所以必须维护一套分布式存储系统，使容器不管是在 A 还是在 B 上，都可以找到这个 WAR 包，找到这个数据。</p><blockquote><p>注意，即使有了分布式存储系统做 Volume，你还需要负责维护 Volume 里的 WAR 包。比如：你需要单独写一套 Kubernetes Volume 插件，用来在每次 Pod 启动之前，把应用启动所需的 WAR 包下载到这个 Volume 里，然后才能被应用挂载使用到。</p></blockquote><p>这样操作带来的复杂程度还是比较高的，且这个容器本身必须依赖于一套持久化的存储插件（用来管理 Volume 里的 WAR 包内容）。</p><h5 id="InitContainer"><a href="#InitContainer" class="headerlink" title="InitContainer"></a>InitContainer</h5><p>所以大家有没有考虑过，像这样的组合方式，有没有更加通用的方法？哪怕在本地 Kubernetes 上，没有分布式存储的情况下也能用、能玩、能发布。</p><p>实际上方法是有的，在 Kubernetes 里面，像这样的组合方式，叫做 Init Container。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134496-9a5efe9f-ef17-4af6-b59a-507291e74212.png" alt="img"></p><p>还是同样一个例子：在上图的 yaml 里，首先定义一个 Init Container，它只做一件事情，就是把 WAR 包从镜像里拷贝到一个 Volume 里面，它做完这个操作就退出了，所以 Init Container 会比用户容器先启动，并且严格按照定义顺序来依次执行。 </p><p>然后，这个关键在于刚刚拷贝到的这样一个目的目录：APP 目录，实际上是一个 Volume。而我们前面提到，一个 Pod 里面的多个容器，它们是可以共享 Volume 的，所以现在这个 Tomcat 容器，只是打包了一个 Tomcat 镜像。但在启动的时候，要声明使用 APP 目录作为我的 Volume，并且要把它们挂载在 Web APP 目录下面。</p><p>而这个时候，由于前面已经运行过了一个 Init Container，已经执行完拷贝操作了，所以这个 Volume 里面已经存在了应用的 WAR 包：就是 sample.war，绝对已经存在这个 Volume 里面了。等到第二步执行启动这个 Tomcat 容器的时候，去挂这个 Volume，一定能在里面找到前面拷贝来的 sample.war。</p><p>所以可以这样去描述：这个 Pod 就是一个自包含的，可以把这一个 Pod 在全世界任何一个 Kubernetes 上面都顺利启用起来。不用担心没有分布式存储、Volume 不是持久化的，它一定是可以公布的。</p><p>所以这是一个通过组合两个不同角色的容器，并且按照这样一些像 Init Container 这样一种编排方式，统一的去打包这样一个应用，把它用 Pod 来去做的非常典型的一个例子。像这样的一个概念，在 Kubernetes 里面就是一个非常经典的容器设计模式，叫做：“Sidecar”。</p><h5 id="容器设计模式：Sidecar"><a href="#容器设计模式：Sidecar" class="headerlink" title="容器设计模式：Sidecar"></a>容器设计模式：Sidecar</h5><p>什么是 Sidecar？就是说其实在 Pod 里面，可以定义一些专门的容器，来执行主业务容器所需要的一些辅助工作，比如我们前面举的例子，其实就干了一个事儿，这个 Init Container，它就是一个 Sidecar，它只负责把镜像里的 WAR 包拷贝到共享目录里面，以便被 Tomcat 能够用起来。</p><p>其它有哪些操作呢？比如说：</p><ul><li><p>原本需要在容器里面执行 SSH 需要干的一些事情，可以写脚本、一些前置的条件，其实都可以通过像 Init Container 或者另外像 Sidecar 的方式去解决；</p></li><li><p>当然还有一个典型例子就是我的日志收集，日志收集本身是一个进程，是一个小容器，那么就可以把它打包进 Pod 里面去做这个收集工作；</p></li><li><p>还有一个非常重要的东西就是 Debug 应用，实际上现在 Debug 整个应用都可以在应用 Pod 里面再次定义一个额外的小的 Container，它可以去 exec 应用 pod 的 namespace；</p></li><li><p>查看其他容器的工作状态，这也是它可以做的事情。不再需要去 SSH 登陆到容器里去看，只要把监控组件装到额外的小容器里面就可以了，然后把它作为一个 Sidecar 启动起来，跟主业务容器进行协作，所以同样业务监控也都可以通过 Sidecar 方式来去做。</p></li></ul><p>这种做法一个非常明显的优势就是在于其实将辅助功能从我的业务容器解耦了，所以我就能够独立发布 Sidecar 容器，并且更重要的是这个能力是可以重用的，即同样的一个监控 Sidecar 或者日志 Sidecar，可以被全公司的人共用的。这就是设计模式的一个威力。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134438-219fd80c-b393-425d-a8b8-64f8cded2515.png" alt="img"></p><h5 id="Sidecar：应用与日志收集"><a href="#Sidecar：应用与日志收集" class="headerlink" title="Sidecar：应用与日志收集"></a>Sidecar：应用与日志收集</h5><p>接下来，我们再详细细化一下 Sidecar 这样一个模式，它还有一些其他的场景。</p><p>比如说前面提到的应用日志收集，业务容器将日志写在一个 Volume 里面，而由于 Volume 在 Pod 里面是被共享的，所以日志容器 —— 即 Sidecar 容器一定可以通过共享该 Volume，直接把日志文件读出来，然后存到远程存储里面，或者转发到另外一个例子。现在业界常用的 Fluentd 日志进程或日志组件，基本上都是这样的工作方式。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134493-3703f96a-47de-4b4c-b6a3-f2c94ec29478.png" alt="img"></p><h5 id="Sidecar：代理容器"><a href="#Sidecar：代理容器" class="headerlink" title="Sidecar：代理容器"></a>Sidecar：代理容器</h5><p>Sidecar 的第二个用法，可以称作为代理容器 Proxy。什么叫做代理容器呢？</p><p>假如现在有个 Pod 需要访问一个外部系统，或者一些外部服务，但是这些外部系统是一个集群，那么这个时候如何通过一个统一的、简单的方式，用一个 IP 地址，就把这些集群都访问到？有一种方法就是：修改代码。因为代码里记录了这些集群的地址；另外还有一种解耦的方法，即通过 Sidecar 代理容器。</p><p>简单说，单独写一个这么小的 Proxy，用来处理对接外部的服务集群，它对外暴露出来只有一个 IP 地址就可以了。所以接下来，业务容器主要访问 Proxy，然后由 Proxy 去连接这些服务集群，这里的关键在于 Pod 里面多个容器是通过 localhost 直接通信的，因为它们同属于一个 network Namespace，网络视图都一样，所以它们俩通信 localhost，并没有性能损耗。</p><p>所以说代理容器除了做了解耦之外，并不会降低性能，更重要的是，像这样一个代理容器的代码就又可以被全公司重用了。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134402-1486b924-7358-411f-9c82-57b29c8ff7bc.png" alt="img"></p><h5 id="Sidecar：适配器容器"><a href="#Sidecar：适配器容器" class="headerlink" title="Sidecar：适配器容器"></a>Sidecar：适配器容器</h5><p>Sidecar 的第三个设计模式 —— 适配器容器 Adapter，什么叫 Adapter 呢？</p><p>现在业务暴露出来的 API，比如说有个 API 的一个格式是 A，但是现在有一个外部系统要去访问我的业务容器，它只知道的一种格式是 API B ,所以要做一个工作，就是把业务容器怎么想办法改掉，要去改业务代码。但实际上，你可以通过一个 Adapter 帮你来做这层转换。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134457-42f87216-b8ce-42c7-b8a1-3695cc283e4d.png" alt="img"></p><p>现在有个例子：现在业务容器暴露出来的监控接口是 /metrics，访问这个这个容器的 metrics 的这个 URL 就可以拿到了。可是现在，这个监控系统升级了，它访问的 URL 是 /health，我只认得暴露出 health 健康检查的 URL，才能去做监控，metrics 不认识。那这个怎么办？那就需要改代码了，但可以不去改代码，而是额外写一个 Adapter，用来把所有对 health 的这个请求转发给 metrics 就可以了，所以这个 Adapter 对外暴露的是 health 这样一个监控的 URL，这就可以了，你的业务就又可以工作了。</p><p>这样的关键还在于 Pod 之中的容器是通过 localhost 直接通信的，所以没有性能损耗，并且这样一个 Adapter 容器可以被全公司重用起来，这些都是设计模式给我们带来的好处。 </p><h5 id="本节总结"><a href="#本节总结" class="headerlink" title="本节总结"></a><strong>本节总结</strong></h5><ul><li>Pod 是 Kubernetes 项目里实现“容器设计模式”的核心机制；</li><li>“容器设计模式”是 Google Borg 的大规模容器集群管理最佳实践之一，也是 Kubernetes 进行复杂应用编排的基础依赖之一；</li><li>所有“设计模式”的本质都是：解耦和重用。</li></ul><p><strong><u>PS：本文摘录于阿里云公开课，仅供学习与参考。</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
      <tag>pod</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kubernetes核心概念</title>
    <link href="/2020/09/23/k8s-core-concepts/"/>
    <url>/2020/09/23/k8s-core-concepts/</url>
    
    <content type="html"><![CDATA[<h3 id="Kubernetes核心概念"><a href="#Kubernetes核心概念" class="headerlink" title="Kubernetes核心概念"></a>Kubernetes核心概念</h3><h3 id="一、什么是-Kubernetes"><a href="#一、什么是-Kubernetes" class="headerlink" title="一、什么是 Kubernetes"></a>一、什么是 Kubernetes</h3><p> Kubernetes，从官方网站上可以看到，它是一个工业级的容器编排平台。Kubernetes 这个单词是希腊语，它的中文翻译是“舵手”或者“飞行员”。在一些常见的资料中也会看到“ks”这个词，也就是“k8s”，它是通过将8个字母“ubernete ”替换为“8”而导致的一个缩写。</p><p>Kubernetes 为什么要用“舵手”来命名呢？大家可以看一下这张图： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045845-c3b67c67-bc42-4853-95bb-d0769b04d6aa.png" alt="img"></p><p> 这是一艘载着一堆集装箱的轮船，轮船在大海上运着集装箱奔波，把集装箱送到它们该去的地方。我们之前其实介绍过一个概念叫做 container，container 这个英文单词也有另外的一个意思就是“集装箱”。Kubernetes 也就借着这个寓意，希望成为运送集装箱的一个轮船，来帮助我们管理这些集装箱，也就是管理这些容器。</p><p>这个就是为什么会选用 Kubernetes 这个词来代表这个项目的原因。更具体一点地来说：Kubernetes 是一个自动化的容器编排平台，它负责应用的部署、应用的弹性以及应用的管理，这些都是基于容器的。 </p><h3 id="二、Kubernetes-核心功能"><a href="#二、Kubernetes-核心功能" class="headerlink" title="二、Kubernetes 核心功能"></a>二、Kubernetes 核心功能</h3><ul><li><p>服务的发现与负载的均衡；</p></li><li><p>容器的自动装箱，我们也会把它叫做 scheduling，就是“调度”，把一个容器放到一个集群的某一个机器上，Kubernetes 会帮助我们去做存储的编排，让存储的声明周期与容器的生命周期能有一个连接；</p></li><li><p>Kubernetes 会帮助我们去做自动化的容器的恢复。在一个集群中，经常会出现宿主机的问题或者说是 OS 的问题，导致容器本身的不可用，Kubernetes 会自动地对这些不可用的容器进行恢复；</p></li><li><p>Kubernetes 会帮助我们去做应用的自动发布与应用的回滚，以及与应用相关的配置密文的管理；</p></li><li><p>对于 job 类型任务，Kubernetes 可以去做批量的执行；</p></li><li><p>为了让这个集群、这个应用更富有弹性，Kubernetes 也支持水平的伸缩。</p></li></ul><p>下面，我们希望以三个例子跟大家更切实地介绍一下 Kubernetes 的能力。</p><h5 id="1、调度"><a href="#1、调度" class="headerlink" title="1、调度"></a>1、调度</h5><p>Kubernetes 可以把用户提交的容器放到 Kubernetes 管理的集群的某一台节点上去。Kubernetes 的调度器是执行这项能力的组件，它会观察正在被调度的这个容器的大小、规格。</p><p>比如说它所需要的 CPU以及它所需要的 memory，然后在集群中找一台相对比较空闲的机器来进行一次 placement，也就是一次放置的操作。在这个例子中，它可能会把红颜色的这个容器放置到第二个空闲的机器上，来完成一次调度的工作。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045845-a2365a59-409f-4cc2-a52f-61cfd639e0cf.png" alt="img"> </p><h5 id="2、自动修复"><a href="#2、自动修复" class="headerlink" title="2、自动修复"></a>2、自动修复</h5><p>Kubernetes 有一个节点健康检查的功能，它会监测这个集群中所有的宿主机，当宿主机本身出现故障，或者软件出现故障的时候，这个节点健康检查会自动对它进行发现。 </p><p>下面 Kubernetes 会把运行在这些失败节点上的容器进行自动迁移，迁移到一个正在健康运行的宿主机上，来完成集群内容器的一个自动恢复。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046023-ae1f453d-cee9-48b5-8a02-97e87b4079f4.png" alt="img"></p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045645-8a9b5997-6a16-46c7-9e0c-dfa785e7de23.png" alt="img"></p><h5 id="3、水平伸缩"><a href="#3、水平伸缩" class="headerlink" title="3、水平伸缩"></a>3、水平伸缩</h5><p>Kubernetes 有业务负载检查的能力，它会监测业务上所承担的负载，如果这个业务本身的 CPU 利用率过高，或者响应时间过长，它可以对这个业务进行一次扩容。</p><p>比如说在下面的例子中，黄颜色的过度忙碌，Kubernetes 就可以把黄颜色负载从一份变为三份。接下来，它就可以通过负载均衡把原来打到第一个黄颜色上的负载平均分到三个黄颜色的负载上去，以此来提高响应的时间。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045804-c048afec-af4a-479d-9277-afe04485f998.png" alt="img">    </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045899-02fccbac-10f9-417a-96a2-c7d9db754971.png" alt="img"> </p><p>以上就是 Kubernetes 三个核心能力的简单介绍。 </p><h3 id="三、Kubernetes-的架构"><a href="#三、Kubernetes-的架构" class="headerlink" title="三、Kubernetes 的架构"></a>三、Kubernetes 的架构</h3><p>Kubernetes 架构是一个比较典型的二层架构和 server-client 架构。Master 作为中央的管控节点，会去与 Node 进行一个连接。</p><p>所有 UI 的、clients、这些 user 侧的组件，只会和 Master 进行连接，把希望的状态或者想执行的命令下发给 Master，Master 会把这些命令或者状态下发给相应的节点，进行最终的执行。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045915-952fbe85-c90f-4396-9a7c-040b949c4265.png" alt="img"> </p><p>Kubernetes 的 Master 包含四个主要的组件：API Server、Controller、Scheduler 以及 etcd。如下图所示： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046026-e89cd0ef-a9d3-4393-895e-f9e3de0ea6ef.png" alt="img"></p><ul><li><p><strong>API Server：</strong>顾名思义是用来处理 API 操作的，Kubernetes 中所有的组件都会和 API Server 进行连接，组件与组件之间一般不进行独立的连接，都依赖于 API Server 进行消息的传送；</p></li><li><p><strong>Controller：</strong>是控制器，它用来完成对集群状态的一些管理。比如刚刚我们提到的两个例子之中，第一个自动对容器进行修复、第二个自动进行水平扩张，都是由 Kubernetes 中的 Controller 来进行完成的；</p></li><li><p><strong>Scheduler：</strong>是调度器，“调度器”顾名思义就是完成调度的操作，就是我们刚才介绍的第一个例子中，把一个用户提交的 Container，依据它对 CPU、对 memory 请求大小，找一台合适的节点，进行放置；</p></li><li><p><strong>etcd：</strong>是一个分布式的一个存储系统，API Server 中所需要的这些原信息都被放置在 etcd 中，etcd 本身是一个高可用系统，通过 etcd 保证整个 Kubernetes 的 Master 组件的高可用性。</p></li></ul><p>我们刚刚提到的 API Server，它本身在部署结构上是一个可以水平扩展的一个部署组件；Controller 是一个可以进行热备的一个部署组件，它只有一个 active，它的调度器也是相应的，虽然只有一个 active，但是可以进行热备。</p><h4 id="Kubernetes-的架构：Node"><a href="#Kubernetes-的架构：Node" class="headerlink" title="Kubernetes 的架构：Node"></a><strong>Kubernetes 的架构：Node</strong></h4><p>Kubernetes 的 Node 是真正运行业务负载的，每个业务负载会以 Pod 的形式运行。等一下我会介绍一下 Pod 的概念。一个 Pod 中运行的一个或者多个容器，真正去运行这些 Pod 的组件的是叫做 <strong>kubelet</strong>，也就是 Node 上最为关键的组件，它通过 API Server 接收到所需要 Pod 运行的状态，然后提交到我们下面画的这个 Container Runtime 组件中。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045894-314cdcb7-a039-4b0e-81b8-174215dd322a.png" alt="img"></p><p>在 OS 上去创建容器所需要运行的环境，最终把容器或者 Pod 运行起来，也需要对存储跟网络进行管理。Kubernetes 并不会直接进行网络存储的操作，他们会靠 Storage Plugin 或者是网络的 Plugin 来进行操作。用户自己或者云厂商都会去写相应的 <strong>Storage Plugin</strong> 或者 <strong>Network Plugin</strong>，去完成存储操作或网络操作。</p><p>在 Kubernetes 自己的环境中，也会有 Kubernetes 的 Network，它是为了提供 Service network 来进行搭网组网的。（等一下我们也会去介绍“service”这个概念。）真正完成 service 组网的组件的是 <strong>Kube-proxy</strong>，它是利用了 iptable 的能力来进行组建 Kubernetes 的 Network，就是 cluster network，以上就是 Node 上面的四个组件。</p><p>Kubernetes 的 Node 并不会直接和 user 进行 interaction，它的 interaction 只会通过 Master。而 User 是通过 Master 向节点下发这些信息的。Kubernetes 每个 Node 上，都会运行我们刚才提到的这几个组件。</p><p>下面我们以一个例子再去看一下 Kubernetes 架构中的这些组件，是如何互相进行 interaction 的。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045902-c7effd6a-85c9-4fc0-a64c-d7245e5c2976.png" alt="img"></p><p>用户可以通过 UI 或者 CLI 提交一个 Pod 给 Kubernetes 进行部署，这个 Pod 请求首先会通过 CLI 或者 UI 提交给 Kubernetes API Server，下一步 API Server 会把这个信息写入到它的存储系统 etcd，之后 Scheduler 会通过 API Server 的 watch 或者叫做 notification 机制得到这个信息：有一个 Pod 需要被调度。</p><p>这个时候 Scheduler 会根据它的内存状态进行一次调度决策，在完成这次调度之后，它会向 API Server report 说：“OK！这个 Pod 需要被调度到某一个节点上。”</p><p>这个时候 API Server 接收到这次操作之后，会把这次的结果再次写到 etcd 中，然后 API Server 会通知相应的节点进行这次 Pod 真正的执行启动。相应节点的 kubelet 会得到这个通知，kubelet 就会去调 Container runtime 来真正去启动配置这个容器和这个容器的运行环境，去调度 Storage Plugin 来去配置存储，network Plugin 去配置网络。</p><p>这个例子我们可以看到：这些组件之间是如何相互沟通相互通信，协调来完成一次Pod的调度执行操作的。</p><h3 id="四、Kubernetes-的核心概念与它的-API"><a href="#四、Kubernetes-的核心概念与它的-API" class="headerlink" title="四、Kubernetes 的核心概念与它的 API"></a>四、Kubernetes 的核心概念与它的 API</h3><h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><h5 id="第一个概念：Pod"><a href="#第一个概念：Pod" class="headerlink" title="第一个概念：Pod"></a>第一个概念：Pod</h5><p>Pod 是 Kubernetes 的一个最小调度以及资源单元。用户可以通过 Kubernetes 的 Pod API 生产一个 Pod，让 Kubernetes 对这个 Pod 进行调度，也就是把它放在某一个 Kubernetes 管理的节点上运行起来。一个 Pod 简单来说是对一组容器的抽象，它里面会包含一个或多个容器。</p><p>比如像下面的这幅图里面，它包含了两个容器，每个容器可以指定它所需要资源大小。比如说，一个核一个 G，或者说 0.5 个核，0.5 个 G。</p><p>当然在这个 Pod 中也可以包含一些其他所需要的资源：比如说我们所看到的 Volume 卷这个存储资源；比如说我们需要 100 个 GB 的存储或者 20GB 的另外一个存储。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045754-a311ee41-3ff7-42d0-be1f-98a7c5f24595.png" alt="img"></p><p>在 Pod 里面，我们也可以去定义容器所需要运行的方式。比如说运行容器的 Command，以及运行容器的环境变量等等。Pod 这个抽象也给这些容器提供了一个共享的运行环境，它们会共享同一个网络环境，这些容器可以用 localhost 来进行直接的连接。而 Pod 与 Pod 之间，是互相有 isolation 隔离的。</p><h5 id="第二个概念：Volume"><a href="#第二个概念：Volume" class="headerlink" title="第二个概念：Volume"></a>第二个概念：Volume</h5><p>Volume 就是卷的概念，它是用来管理 Kubernetes 存储的，是用来声明在 Pod 中的容器可以访问文件目录的，一个卷可以被挂载在 Pod 中一个或者多个容器的指定路径下面。</p><p>而 Volume 本身是一个抽象的概念，一个 Volume 可以去支持多种的后端的存储。比如说 Kubernetes 的 Volume 就支持了很多存储插件，它可以支持本地的存储，可以支持分布式的存储，比如说像 ceph，GlusterFS ；它也可以支持云存储，比如说阿里云上的云盘、AWS 上的云盘、Google 上的云盘等等。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045937-5b074370-75ed-4843-9ce8-ea896cb1b39c.png" alt="img"></p><h5 id="第三个概念：Deployment"><a href="#第三个概念：Deployment" class="headerlink" title="第三个概念：Deployment"></a>第三个概念：Deployment</h5><p>Deployment 是在 Pod 这个抽象上更为上层的一个抽象，它可以定义一组 Pod 的副本数目、以及这个 Pod 的版本。一般大家用 Deployment 这个抽象来做应用的真正的管理，而 Pod 是组成 Deployment 最小的单元。</p><p>Kubernetes 是通过 Controller，也就是我们刚才提到的控制器去维护 Deployment 中 Pod 的数目，它也会去帮助 Deployment 自动恢复失败的 Pod。</p><p>比如说我可以定义一个 Deployment，这个 Deployment 里面需要两个 Pod，当一个 Pod 失败的时候，控制器就会监测到，它重新把 Deployment 中的 Pod 数目从一个恢复到两个，通过再去新生成一个 Pod。通过控制器，我们也会帮助完成发布的策略。比如说进行滚动升级，进行重新生成的升级，或者进行版本的回滚。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045678-29db8062-161a-4407-950b-e6a4ad060aac.png" alt="img"></p><h5 id="第四个概念：Service"><a href="#第四个概念：Service" class="headerlink" title="第四个概念：Service"></a>第四个概念：Service</h5><p>Service 提供了一个或者多个 Pod 实例的稳定访问地址。</p><p>比如在上面的例子中，我们看到：一个 Deployment 可能有两个甚至更多个完全相同的 Pod。对于一个外部的用户来讲，访问哪个 Pod 其实都是一样的，所以它希望做一次负载均衡，在做负载均衡的同时，我只想访问某一个固定的 VIP，也就是 Virtual IP 地址，而不希望得知每一个具体的 Pod 的 IP 地址。</p><p>我们刚才提到，这个 pod 本身可能 terminal go（终止），如果一个 Pod 失败了，可能会换成另外一个新的。</p><p>对一个外部用户来讲，提供了多个具体的 Pod 地址，这个用户要不停地去更新 Pod 地址，当这个 Pod 再失败重启之后，我们希望有一个抽象，把所有 Pod 的访问能力抽象成一个第三方的一个 IP 地址，实现这个的 Kubernetes 的抽象就叫 Service。</p><p>实现 Service 有多种方式，Kubernetes 支持 Cluster IP，上面我们讲过的 kuber-proxy 的组网，它也支持 nodePort、 LoadBalancer 等其他的一些访问的能力。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045956-d771cfae-11eb-4205-b1f7-8f72dcd8ec72.png" alt="img"> </p><h5 id="第五个概念：Namespace"><a href="#第五个概念：Namespace" class="headerlink" title="第五个概念：Namespace"></a>第五个概念：Namespace</h5><p>Namespace 是用来做一个集群内部的逻辑隔离的，它包括鉴权、资源管理等。Kubernetes 的每个资源，比如刚才讲的 Pod、Deployment、Service 都属于一个 Namespace，同一个 Namespace 中的资源需要命名的唯一性，不同的 Namespace 中的资源可以重名。 </p><p>Namespace 一个用例，比如像在阿里巴巴，我们内部会有很多个 business units，在每一个 business units 之间，希望有一个视图上的隔离，并且在鉴权上也不一样，在 cuda 上面也不一样，我们就会用 Namespace 来去给每一个 BU 提供一个他所看到的这么一个看到的隔离的机制。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045715-00efb568-5006-4a21-b566-11e2eb8615ee.png" alt="img"></p><h4 id="Kubernetes-的-API"><a href="#Kubernetes-的-API" class="headerlink" title="Kubernetes 的 API"></a><strong>Kubernetes</strong> 的 <strong>API</strong></h4><p>下面我们介绍一下 Kubernetes 的 API 的基础知识。从 high-level 上看，Kubernetes API 是由 <strong>HTTP+JSON</strong> 组成的：用户访问的方式是 HTTP，访问的 API 中 content 的内容是 JSON 格式的。<br>Kubernetes 的 kubectl 也就是 command tool，Kubernetes UI，或者有时候用 curl，直接与 Kubernetes 进行沟通，都是使用 HTTP + JSON 这种形式。</p><p>下面有个例子：比如说，对于这个 Pod 类型的资源，它的 HTTP 访问的路径，就是 API，然后是 apiVesion: V1, 之后是相应的 Namespaces，以及 Pods 资源，最终是 Podname，也就是 Pod 的名字。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046039-7af9e406-4a18-4c90-9fd0-baa30913cff5.png" alt="img"></p><p>如果我们去提交一个 Pod，或者 get 一个 Pod 的时候，它的 content 内容都是用 JSON 或者是 YAML 表达的。上图中有个 yaml 的例子，在这个 yaml file 中，对 Pod 资源的描述也分为几个部分。</p><p>第一个部分，一般来讲会是 API 的 <strong>version</strong>。比如在这个例子中是 V1，它也会描述我在操作哪个资源；比如说我的 <strong>kind</strong> 如果是 pod，在 Metadata 中，就写上这个 Pod 的名字；比如说 nginx，我们也会给它打一些 <strong>label</strong>，我们等下会讲到 label 的概念。在 Metadata 中，有时候也会去写 <strong>annotation</strong>，也就是对资源的额外的一些用户层次的描述。</p><p>比较重要的一个部分叫做 <strong>Spec</strong>，Spec 也就是我们希望 Pod 达到的一个预期的状态。比如说它内部需要有哪些 container 被运行；比如说这里面有一个 nginx 的 container，它的 image 是什么？它暴露的 port 是什么？</p><p>当我们从 Kubernetes API 中去获取这个资源的时候，一般来讲在 Spec 下面会有一个项目叫 <strong>status</strong>，它表达了这个资源当前的状态；比如说一个 Pod 的状态可能是正在被调度、或者是已经 running、或者是已经被 terminates，就是被执行完毕了。</p><p>刚刚在 API 之中，我们讲了一个比较有意思的 metadata 叫做“<strong>label</strong>”，这个 label 可以是一组 KeyValuePair。</p><p>比如下图的第一个 pod 中，label 就可能是一个 color 等于 red，即它的颜色是红颜色。当然你也可以加其他 label，比如说 size: big 就是大小，定义为大的，它可以是一组 label。</p><p>这些 label 是可以被 selector，也就是选择器所查询的。这个能力实际上跟我们的 sql 类型的 select 语句是非常相似的，比如下图中的三个 Pod 资源中，我们就可以进行 select。name color 等于 red，就是它的颜色是红色的，我们也可以看到，只有两个被选中了，因为只有他们的 label 是红色的，另外一个 label 中写的 color 等于 yellow，也就是它的颜色是黄色，是不会被选中的。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045814-dfc674c5-f325-4119-ac27-a163a443a5b3.png" alt="img"></p><p>通过 label，kubernetes 的 API 层就可以对这些资源进行一个筛选，那这些筛选也是 kubernetes 对资源的集合所表达默认的一种方式。 </p><p>例如说，我们刚刚介绍的 Deployment，它可能是代表一组的 Pod，它是一组 Pod 的抽象，一组 Pod 就是通过 label selector 来表达的。当然我们刚才讲到说 service 对应的一组 Pod，就是一个 service 要对应一个或者多个的 Pod，来对它们进行统一的访问，这个描述也是通过 label selector 来进行 select 选取的一组 Pod。</p><p>所以可以看到 label 是一个非常核心的 kubernetes API 的概念，我们在接下来的课程中也会着重地去讲解和介绍 label 这个概念，以及如何更好地去使用它。</p><h3 id="五、以一个-demo-结尾"><a href="#五、以一个-demo-结尾" class="headerlink" title="五、以一个 demo 结尾"></a>五、以一个 demo 结尾</h3><p>最后一部分，我想以一个例子来结束，让大家跟我一起来尝试一个 kubernetes，在尝试 Kubernetes 之前，我希望大家能在本机上安装一下 Kubernetes，安装一个 Kubernetes 沙箱环境。</p><p>安装这个沙箱环境，主要有三个步骤：</p><ul><li>首先需要安装一个虚拟机，来在虚拟机中启动 Kubernetes。我们会推荐大家利用 virtualbox 来作为虚拟机的运行环境；</li></ul><p>安装 VirtualBox： <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></p><ul><li>其次我们需要在虚拟机中启动 Kubernetes，Kubernetes 有一个非常有意思的项目，叫 minikube，也就是启动一个最小的 local 的 Kubernetes 的一个环境。</li></ul><p>minikube 我们推荐使用下面写到的阿里云的版本，它和官方 minikube 的主要区别就是把 minikube 中所需要的 Google 上的依赖换成国内访问比较快的一些镜像，这样就方便了大家的安装工作； </p><p>安装 MiniKube（中国版）: <a href="https://yq.aliyun.com/articles/221687">https://yq.aliyun.com/articles/221687</a></p><ul><li>最后在安装完 virtualbox 和 minikube 之后，大家可以对 minikube 进行启动，也就是下面这个命令。</li></ul><h5 id="Minikube安装（mac）"><a href="#Minikube安装（mac）" class="headerlink" title="Minikube安装（mac）"></a>Minikube安装（mac）</h5><p>下载Minikube</p><pre><code class="hljs shell">curl -Lo minikube https://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v1.13.0/minikube-darwin-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/local/bin/</code></pre><p>安装minikube，缺省驱动</p><pre><code class="hljs shell">minikube start --cpus=4 --memory=4096mb</code></pre><p>升级kubectl</p><pre><code class="hljs shell">/usr/local/bin/kubectl is version 1.15.5, which may have incompatibilites with Kubernetes 1.19.0.💡  Want kubectl v1.19.0? Try &#x27;minikube kubectl -- get pods -A&#x27;</code></pre><pre><code class="hljs shell">minikube kubectl -- get pods -A</code></pre><h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><p>查看状态</p><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash"> minikube status</span>minikubetype: Control Planehost: Runningkubelet: Runningapiserver: Runningkubeconfig: Configured</code></pre><p>查看节点</p><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash"> kubectl get nodes</span>NAME       STATUS   ROLES    AGE     VERSIONminikube   Ready    master   5m24s   v1.19.0<span class="hljs-meta">%</span><span class="bash"> kubectl get deployments</span>No resources found.</code></pre><p>启动</p><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash"> kubectl apply -f deployment.yaml </span>deployment.apps/nginx-deployment created<span class="hljs-meta">%</span><span class="bash"> kubectl describe deployment nginx-deployment</span>Name:                   nginx-deploymentNamespace:              defaultCreationTimestamp:      Wed, 23 Sep 2020 22:42:07 +0800Labels:                 &lt;none&gt;Annotations:            deployment.kubernetes.io/revision: 1                        kubectl.kubernetes.io/last-applied-configuration:                          &#123;&quot;apiVersion&quot;:&quot;apps/v1&quot;,&quot;kind&quot;:&quot;Deployment&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;name&quot;:&quot;nginx-deployment&quot;,&quot;namespace&quot;:&quot;default&quot;&#125;,&quot;spec&quot;:&#123;&quot;replica...Selector:               app=nginxReplicas:               2 desired | 2 updated | 2 total | 0 available | 2 unavailableStrategyType:           RollingUpdateMinReadySeconds:        0RollingUpdateStrategy:  25% max unavailable, 25% max surgePod Template:  Labels:  app=nginx  Containers:   nginx:    Image:        nginx:1.14.2    Port:         80/TCP    Host Port:    0/TCP    Environment:  &lt;none&gt;    Mounts:       &lt;none&gt;  Volumes:        &lt;none&gt;Conditions:  Type           Status  Reason  ----           ------  ------  Available      False   MinimumReplicasUnavailable  Progressing    True    ReplicaSetUpdatedOldReplicaSets:  &lt;none&gt;NewReplicaSet:   nginx-deployment-66b6c48dd5 (2/2 replicas created)Events:  Type    Reason             Age   From                   Message  ----    ------             ----  ----                   -------  Normal  ScalingReplicaSet  59s   deployment-controller  Scaled up replica set nginx-deployment-66b6c48dd5 to 2</code></pre><p>删除</p><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash"> kubectl delete deployment nginx-deployment</span>deployment.apps &quot;nginx-deployment&quot; deleted<span class="hljs-meta">%</span><span class="bash"> kubectl get deployments</span>No resources found.</code></pre><p>启动命令：minikube start —vm-driver virtualbox</p><p>如果大家不是 Mac 系统，其他操作系统请访问下面这个链接，查看其它操作系统如何安装 minikube 沙箱环境。</p><p><a href="https://kubernetes.io/docs/tasks/tools/install-minikube%EF%BC%8C">https://kubernetes.io/docs/tasks/tools/install-minikube/</a></p><p>当大家安装好之后，我会跟大家一起做一个例子，来做三件事情：</p><ol><li>提交一个 nginx deployment；</li></ol><p><code>kubectl apply  -f  https://k8s.io/examples/application/deployment.yaml</code></p><ol><li>升级 nginx deployment；</li></ol><p><code>kubectl apply -f  https://k8s.io/examples/application/deployment-update.yaml</code></p><ol><li>扩容 nginx deployment。</li></ol><p><code>kubectl apply -f  https://k8s.io/examples/application/deployment-scale.yaml</code></p><p>第一步，我们提交一个 nginx 的 Deployment，然后对这个 Deployment 进行一次版本升级，也就是改变它中间 Pod 的版本。最后我们也会尝试对 nginx 进行一次扩容，进行一次水平的伸缩，下面就让大家一起跟我来尝试这三个操作吧。</p><p>首先，我们先看一下 minikube 的 status，可以看到 kubelet master 和 kubectl 都是配置好的。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046057-b61d751d-c51a-4864-aec7-c4dd7d8dea09.png" alt="img"></p><p>下一步我们利用 kubectl 来看一下这个集群中节选的状态，可以看到这个master 的节点已经是running状态：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046101-c2b5f9ff-6704-4889-9ab2-5b8dae48edc3.png" alt="img"></p><p>我们就以这个为节点，下面我们尝试去看一下现在集群中 Deployment 这个资源：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046019-e95ed3ca-513c-4fb8-b491-adb3dec7dd6a.png" alt="img"></p><p>可以看到集群中没有任何的 Deployment，我们可以利用 watch 这个语义去看集群中 Deployment 这个资源的变化情况。</p><p>下面我们去做刚才想要的三个操作：第一个操作是去创建一个 Deployment。可以看到下面第一个图，这是一个 API 的 content，它的 kind 是 Deployment，name 是 nginx-deployment, 有图中它的 replicas 数目是2，它的镜像版本是 1.7.9。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046039-12c5b5d6-0c39-4029-9fac-a56f95999fc0.png" alt="img"><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046103-5f491536-2800-4dad-aec7-a4865820f5a5.png" alt="img"></p><p>我们下面还是回到 kubectl 这个 commnd 来执行这次 Deployment 的真正的操作。我们可以看到一个简单的操作，就会去让 Deployment 不停地生成副本。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045897-d7ee5ccc-8ba9-4c40-8e0c-76e4379b5ab7.png" alt="img"></p><p>Deployment 副本数目是 2 个，下面也可以 describe 一下现在的 Deployment 的状态。我们知道之前是没有这个 Deployment 的，现在我们去 describe 这个 nginx-deployment。</p><p>下图中可以看到：有一个 nginx-deployment 已经被生成了，它的 replicas 数目也是我们想要的、selector 也是我们想要的、它的 image 的版本也是 1.7.9。还可以看到，里面的 deployment-controller 这种版本控制器也是在管理它的生成。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046101-f6fe24aa-b78c-4c07-94a9-a27db717bd5e.png" alt="img"></p><p>下面我们去升级这个 Deployment 版本，首先下载另外一个 yaml 文件 deployment-update.yaml，可以看到这里面的 image 本身的版本号从 1.7.9 升级到 1.8。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045965-4e76c1e8-fdbb-40eb-989a-6b68bf9f4404.png" alt="img"></p><p>接下来我们重新 apply 新的 deployment-update 这个 yaml 文件。</p><p>可以看到，在另一边的屏幕上显示出了这个 Deployment 升级的一些操作，最终它的 up-to-date 值从 0 变成了 2，也就是说所有的容器都是最新版本的，所有的 Pod 都是最新版本的。我们也可以 discribe 具体去看一下是不是所有 Pod 的版本都被更新了，可以看到这个 image 的版本由 1.7.9 真正更新到了 1.8。</p><p>最后，我们也可以看到 controller 又执行了几次新的操作，这个控制器维护了整个 Deployment 和 Pod 状态。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046007-4d425be4-645d-4d7c-8524-34b52824c160.png" alt="img"></p><p>最后我们演示一下给 Deployment 做水平扩张，下载另一个 yaml 文件 deployment-scale.yaml，这里面的 replicas 数目已经从 2 改成了 4。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046074-fa0c81f8-d369-44ea-82f6-c7914133a858.png" alt="img"></p><p>回到最开始的窗口，用 kubectl 去 apply 这个新的 deployment-scale.yaml 文件，在另外一个窗口上可以看到，当我们执行了 deployment-scale 操作之后，它的容器 Pod 数目从 2 变成了 4。我们可以再一次 describ 一下当前集群中的 deployment 的情况，可以看到它的 replicas 的数目从 2 变到了 4，同时也可以看到 controller 又做了几次新的操作，这个 scale up 成功了。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045906-bcaa2618-a6ac-45af-ac84-130151dafe35.png" alt="img"></p><p>最后，让我们利用 delete 操作把我们刚才生成的 Deployment 给删除掉。kubectl delete deployment，也是刚才我们本身的 deployment name，当我们把它删除掉之后，我们今天所有的操作就完成了。 </p><p>我们再去重新 get 这个 Deployment，也会显示这个资源不再存在，这个集群又回到了最开始干净的状态。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046042-0c34c311-be33-41c1-a4ff-9dff0fb76dc1.png" alt="img"></p><h3 id="本节总结"><a href="#本节总结" class="headerlink" title="本节总结"></a>本节总结</h3><ul><li>Kubernetes 是一个自动化的容器编排平台，它负责应用的部署、应用的弹性以及应用的管理，这些都是基于容器的；</li><li>Kubernetes 架构是一个比较典型的二层架构和 server-client 架构；</li></ul><p><u><strong>PS：本文摘录于阿里云技术公开课，仅为学习与参考</strong></u></p>]]></content>
    
    
    
    <tags>
      
      <tag>k8s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jquery选择器</title>
    <link href="/2020/08/16/jquery-selector/"/>
    <url>/2020/08/16/jquery-selector/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Jquery选择器"><a href="#Jquery选择器" class="headerlink" title="Jquery选择器"></a>Jquery选择器</h2><h3 id="1、基本选择器"><a href="#1、基本选择器" class="headerlink" title="1、基本选择器"></a>1、基本选择器</h3><pre><code class="hljs js">*：$(<span class="hljs-string">&quot;*&quot;</span>)所有元素#id：$(<span class="hljs-string">&quot;#lastname&quot;</span>)id=<span class="hljs-string">&quot;lastname&quot;</span> 的元素.class：$(<span class="hljs-string">&quot;.intro&quot;</span>)<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;intro&quot;</span> 的所有元素注意不能级联$(<span class="hljs-string">&quot;div.p.intro&quot;</span>).class,.class：$(&quot;.intro,.demo&quot;)class 为 &quot;intro&quot; 或 &quot;demo&quot; 的所有元素element：$(<span class="hljs-string">&quot;p&quot;</span>)所有 &lt;p&gt; 元素el1,el2,el3：$(<span class="hljs-string">&quot;h1,div,p&quot;</span>)所有 &lt;h1&gt;、&lt;div&gt; 和 &lt;p&gt; 元素:first：$(<span class="hljs-string">&quot;p:first&quot;</span>)第一个 &lt;p&gt; 元素:last ：$(<span class="hljs-string">&quot;p:last&quot;</span>)最后一个 &lt;p&gt; 元素:even：$(<span class="hljs-string">&quot;tr:even&quot;</span>)所有偶数 &lt;tr&gt; 元素(对于index而言，从<span class="hljs-number">0</span>开始):odd：$(<span class="hljs-string">&quot;tr:odd&quot;</span>)所有奇数 &lt;tr&gt; 元素(对于index而言，从<span class="hljs-number">0</span>开始):parent：$(<span class="hljs-string">&quot;:parent&quot;</span>)匹配所有含有子元素或者文本的父元素:root：$(<span class="hljs-string">&quot;:root&quot;</span>)文档的根元素:lang(language)：$(<span class="hljs-string">&quot;p:lang(de)&quot;</span>)所有 lang 属性值为 <span class="hljs-string">&quot;de&quot;</span> 的 &lt;p&gt; 元素</code></pre><h3 id="2、层次选择器"><a href="#2、层次选择器" class="headerlink" title="2、层次选择器"></a>2、层次选择器</h3><pre><code class="hljs js">parent &gt; child：$(<span class="hljs-string">&quot;div &gt; p&quot;</span>)&lt;div&gt; 元素的直接子元素的所有 &lt;p&gt; 元素parent descendant：$(<span class="hljs-string">&quot;div p&quot;</span>)&lt;div&gt; 元素的后代的所有 &lt;p&gt; 元素element + next：$(<span class="hljs-string">&quot;div + p&quot;</span>)每个 &lt;div&gt; 元素相邻的下一个 &lt;p&gt; 元素element ~ siblings：$(<span class="hljs-string">&quot;div ~ p&quot;</span>)&lt;div&gt; 元素同级的所有 &lt;p&gt; 元素</code></pre><h3 id="3、过滤选择器"><a href="#3、过滤选择器" class="headerlink" title="3、过滤选择器"></a>3、过滤选择器</h3><pre><code class="hljs js">:first-child：$(<span class="hljs-string">&quot;p:first-child&quot;</span>)属于其父元素的第一个子元素的所有 &lt;p&gt; 元素（取第一个元素，有父元素作为参照物）:first-<span class="hljs-keyword">of</span>-type：$(<span class="hljs-string">&quot;p:first-of-type&quot;</span>)属于其父元素的第一个 &lt;p&gt; 元素的所有 &lt;p&gt;（取所有的p元素）:last-child ：$(<span class="hljs-string">&quot;p:last-child&quot;</span>)属于其父元素的最后一个子元素的所有 &lt;p&gt; 元素:last-<span class="hljs-keyword">of</span>-type ：$(<span class="hljs-string">&quot;p:last-of-type&quot;</span>)属于其父元素的最后一个 &lt;p&gt; 元素的所有 &lt;p&gt; 元素:nth-child(n)：$(<span class="hljs-string">&quot;p:nth-child(2)&quot;</span>)属于其父元素的第二个子元素的所有 &lt;p&gt; 元素:nth-last-child(n)：$(<span class="hljs-string">&quot;p:nth-last-child(2)&quot;</span>)属于其父元素的第二个子元素的所有 &lt;p&gt; 元素，从最后一个子元素开始计数:nth-<span class="hljs-keyword">of</span>-type(n)：$(<span class="hljs-string">&quot;p:nth-of-type(2)&quot;</span>)属于其父元素的第二个 &lt;p&gt; 元素的所有 &lt;p&gt; 元素:nth-last-<span class="hljs-keyword">of</span>-type(n)：$(<span class="hljs-string">&quot;p:nth-last-of-type(2)&quot;</span>)属于其父元素的第二个 &lt;p&gt; 元素的所有 &lt;p&gt; 元素，从最后一个子元素开始计数:only-child：$(<span class="hljs-string">&quot;p:only-child&quot;</span>)属于其父元素的唯一子元素的所有 &lt;p&gt; 元素:only-<span class="hljs-keyword">of</span>-type：$(<span class="hljs-string">&quot;p:only-of-type&quot;</span>)属于其父元素的特定类型的唯一子元素的所有 &lt;p&gt; 元素:eq(index)：$(<span class="hljs-string">&quot;ul li:eq(3)&quot;</span>)列表中的第四个元素（index 值从 <span class="hljs-number">0</span> 开始）:gt(no)：$(<span class="hljs-string">&quot;ul li:gt(3)&quot;</span>)列举 index 大于 <span class="hljs-number">3</span> 的元素:lt(no)：$(<span class="hljs-string">&quot;ul li:lt(3)&quot;</span>)列举 index 小于 <span class="hljs-number">3</span> 的元素:not(selector)：$(<span class="hljs-string">&quot;input:not(:empty)&quot;</span>)所有不为空的输入元素</code></pre><h3 id="4、内容过滤选择器"><a href="#4、内容过滤选择器" class="headerlink" title="4、内容过滤选择器"></a>4、内容过滤选择器</h3><pre><code class="hljs js">:header：$(<span class="hljs-string">&quot;:header&quot;</span>)所有标题元素 &lt;h1&gt;, &lt;h2&gt; ...:animated：$(<span class="hljs-string">&quot;:animated&quot;</span>)所有动画元素:focus：$(<span class="hljs-string">&quot;:focus&quot;</span>)当前具有焦点的元素:contains(text)：$(<span class="hljs-string">&quot;:contains(&#x27;Hello&#x27;)&quot;</span>)所有包含文本 <span class="hljs-string">&quot;Hello&quot;</span> 的元素:has(selector)：$(<span class="hljs-string">&quot;div:has(p)&quot;</span>)所有包含有 &lt;p&gt; 元素在其内的 &lt;div&gt; 元素:empty：$(<span class="hljs-string">&quot;:empty&quot;</span>)所有空元素例：$(<span class="hljs-string">&quot;#tbl tr:lt(7) &gt; td:empty&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;yellow&quot;</span>);   获取tbl表格中小于<span class="hljs-number">8</span>行内的空td，修改背景色黄色</code></pre><h3 id="5、可见性过滤选择器"><a href="#5、可见性过滤选择器" class="headerlink" title="5、可见性过滤选择器"></a>5、可见性过滤选择器</h3><pre><code class="hljs js">:hidden：$(<span class="hljs-string">&quot;p:hidden&quot;</span>)所有隐藏的 &lt;p&gt; 元素:visible：$(<span class="hljs-string">&quot;table:visible&quot;</span>)所有可见的表格</code></pre><h3 id="6、属性过滤选择器"><a href="#6、属性过滤选择器" class="headerlink" title="6、属性过滤选择器"></a>6、属性过滤选择器</h3><pre><code class="hljs js">[attribute]：$(<span class="hljs-string">&quot;[href]&quot;</span>)所有带有 href 属性的元素[attribute=value]：$(<span class="hljs-string">&quot;[href=&#x27;default.htm&#x27;]&quot;</span>)所有带有 href 属性且值等于 <span class="hljs-string">&quot;default.htm&quot;</span> 的元素[attribute!=value]：$(<span class="hljs-string">&quot;[href!=&#x27;default.htm&#x27;]&quot;</span>)所有带有 href 属性且值不等于 <span class="hljs-string">&quot;default.htm&quot;</span> 的元素例：$(<span class="hljs-string">&quot;p[class!=&#x27;intro&#x27;]&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;yellow&quot;</span>);[attribute$=value]：$(<span class="hljs-string">&quot;[href$=&#x27;.jpg&#x27;]&quot;</span>)所有带有 href 属性且值以 <span class="hljs-string">&quot;.jpg&quot;</span> 结尾的元素[attribute|=value]：$(<span class="hljs-string">&quot;[title|=&#x27;Tomorrow&#x27;]&quot;</span>)所有带有 title 属性且值等于 <span class="hljs-string">&#x27;Tomorrow&#x27;</span> 或者以 <span class="hljs-string">&#x27;Tomorrow&#x27;</span> 后跟连接符作为开头的字符串[attribute^=value]：$(<span class="hljs-string">&quot;[title^=&#x27;Tom&#x27;]&quot;</span>)所有带有 title 属性且值以 <span class="hljs-string">&quot;Tom&quot;</span> 开头的元素[attribute~=value]：$(<span class="hljs-string">&quot;[title~=&#x27;hello&#x27;]&quot;</span>)所有带有 title 属性且值包含单词 <span class="hljs-string">&quot;hello&quot;</span> 的元素[attribute*=value]：$(<span class="hljs-string">&quot;[title*=&#x27;hello&#x27;]&quot;</span>)所有带有 title 属性且值包含字符串 <span class="hljs-string">&quot;hello&quot;</span> 的元素[name=value][name2=value2]：$( <span class="hljs-string">&quot;input[id][name$=&#x27;man&#x27;]&quot;</span> )带有 id 属性，并且 name 属性以 man 结尾的输入框</code></pre><h3 id="7、状态过滤选择器"><a href="#7、状态过滤选择器" class="headerlink" title="7、状态过滤选择器"></a>7、状态过滤选择器</h3><pre><code class="hljs js">:enabled：$(<span class="hljs-string">&quot;:enabled&quot;</span>)所有启用的元素:disabled：$(<span class="hljs-string">&quot;:disabled&quot;</span>)所有禁用的元素:selected：$(<span class="hljs-string">&quot;:selected&quot;</span>)所有选定的下拉列表元素:checked：$(<span class="hljs-string">&quot;:checked&quot;</span>)所有选中的复选框选项:target：$( <span class="hljs-string">&quot;p:target&quot;</span>)选择器将选中ID和URI中一个格式化的标识符相匹配的&lt;p&gt;元素</code></pre><h3 id="8、表单选择器"><a href="#8、表单选择器" class="headerlink" title="8、表单选择器"></a>8、表单选择器</h3><pre><code class="hljs js">:input：$(<span class="hljs-string">&quot;:input&quot;</span>)所有 input 元素:text：$(<span class="hljs-string">&quot;:text&quot;</span>)所有带有 type=<span class="hljs-string">&quot;text&quot;</span> 的 input 元素:password：$(<span class="hljs-string">&quot;:password&quot;</span>)所有带有 type=<span class="hljs-string">&quot;password&quot;</span> 的 input 元素:radio：$(<span class="hljs-string">&quot;:radio&quot;</span>)所有带有 type=<span class="hljs-string">&quot;radio&quot;</span> 的 input 元素:checkbox：$(<span class="hljs-string">&quot;:checkbox&quot;</span>)所有带有 type=<span class="hljs-string">&quot;checkbox&quot;</span> 的 input 元素:submit：$(<span class="hljs-string">&quot;:submit&quot;</span>)所有带有 type=<span class="hljs-string">&quot;submit&quot;</span> 的 input 元素:reset：$(<span class="hljs-string">&quot;:reset&quot;</span>)所有带有 type=<span class="hljs-string">&quot;reset&quot;</span> 的 input 元素:button：$(<span class="hljs-string">&quot;:button&quot;</span>)所有带有 type=<span class="hljs-string">&quot;button&quot;</span> 的 input 元素:image：$(<span class="hljs-string">&quot;:image&quot;</span>)所有带有 type=<span class="hljs-string">&quot;image&quot;</span> 的 input 元素:file：$(<span class="hljs-string">&quot;:file&quot;</span>)所有带有 type=<span class="hljs-string">&quot;file&quot;</span> 的 input 元素</code></pre><p><strong><u>ps: 本文仅为学习笔记，仅供学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>jquery</tag>
      
      <tag>selector</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Finalcut-Pro快捷键记录</title>
    <link href="/2020/07/26/finalcut-hotkey/"/>
    <url>/2020/07/26/finalcut-hotkey/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Finalcut-Pro快捷键记录"><a href="#Finalcut-Pro快捷键记录" class="headerlink" title="Finalcut-Pro快捷键记录"></a>Finalcut-Pro快捷键记录</h2><h3 id="1、播放"><a href="#1、播放" class="headerlink" title="1、播放"></a>1、播放</h3><p>j：后退（连续按，几倍速后退）<br>k：暂停<br>l：前进（连续按，几倍速前进）</p><h3 id="2、编辑"><a href="#2、编辑" class="headerlink" title="2、编辑"></a>2、编辑</h3><p>i：入口点<br>o：出口点</p><p>使用i、l 和 o 将视频中的片段标记好后，该片段会被黄色框起来。</p><p>f：将标记的视频片段收藏，片段上方会出现绿色横框<br>双击：用鼠标双击收藏好的绿线，可以选中该收藏视频片段<br>del/back：拒绝选中的视频，选择工具栏中的[所有片段] -&gt; [隐藏被拒绝的]，该视频不可见<br>Ctrl + c：显示所有视频片段<br>Ctrl + h：隐藏被拒绝的的视频片段<br>Ctrl + f：显示收藏的视频片段<br>u：撤销操作</p><p>Command + n：新建项目（时间线）<br>d：将选中的音频加入到项目（时间线）中<br>Shift + z：将音乐片段放大，填充整个时间线，好控制<br>电影片段按钮：更改片段在时间线中的外观<br><img src="/2020/07/26/finalcut-hotkey/1.png" alt="audio-shape"></p><p>空格键：播放与暂停<br>m：音乐打点（一般在波峰位置打点）</p><p><img src="/2020/07/26/finalcut-hotkey/2.png" alt="mark-point"></p><p>双击打点：可以选择删除，删除打点<br>q：双击视频片段后，按q键可以将视频加入到时间线中<br>w：双击视频片段后，按w键可以将视频插入到时间线中<br>e：双击视频片段后，按e键可以将视频追加到时间线的末尾<br>d：双击视频片段后，按d键可以将视频覆盖到选择的时间点上<br>Command + k：视频加入关键词，便于查找，打过关键词的视频上方会有一条蓝色线<br><img src="/2020/07/26/finalcut-hotkey/3.png" alt="keyword"></p><p>t：在时间线可以修剪视频（前后拖拉），与a键联合使用，选择与修剪<br>p: 位置工具，拖拉片段可以在时间线中产生黑场<br>Command + +/-：放大与缩小时间线<br>Shift + z：快速的将时间线缩放到大小合适<br>s：打开或关闭视频/音频实时预览（鼠标拖拉预览）<br>n：吸附，打点，拖拉视频片段时使用</p><pre><code class="hljs bash"><span class="hljs-comment"># 剪辑开始点</span>Option/Alt + [<span class="hljs-comment"># 剪辑结束点</span>Option/Alt + ]</code></pre><h3 id="3、资源库"><a href="#3、资源库" class="headerlink" title="3、资源库"></a>3、资源库</h3><p>资源库是视频工作的场所。可以保存在本机，也可以保存在外置SSD上。<br>正在剪切的视频资源要放在本机，加快剪切视频流畅度。<br>已经完成的视频资源尽量放在外置SSD上。节省本机硬盘空间。</p><p>资源库中的 <strong>整合</strong>，可以将外置的视频整合到资源库中，方便资源库的整体移动。</p><p><img src="/2020/07/26/finalcut-hotkey/4.png" alt="compatable"></p><h3 id="4、视频格式"><a href="#4、视频格式" class="headerlink" title="4、视频格式"></a>4、视频格式</h3><p>视频一般格式如下</p><p><img src="/2020/07/26/finalcut-hotkey/5.png" alt="file-type"></p><p>帧率：每秒包含或者播放的照片数。<br><img src="/2020/07/26/finalcut-hotkey/6.png" alt="p-speed"></p><p>码率的计算公式：</p><p>码流 = 文件大小（兆位）/ 视频持续时间（秒）<br>例：200MB * 8 / 40 秒 = 40Mbps</p><p>分辨率：<br><img src="/2020/07/26/finalcut-hotkey/7.png" alt="mbps"> </p><p>Quicker Time player查看文件检查器：<strong>Command + i</strong><br><img src="/2020/07/26/finalcut-hotkey/8.png" alt="file-inspect"></p><h3 id="5、关键帧"><a href="#5、关键帧" class="headerlink" title="5、关键帧"></a>5、关键帧</h3><p>在视频的开始点和结束点可以加入关键帧，加入关键帧动画。<br><img src="/2020/07/26/finalcut-hotkey/9.png" alt="key-second"></p><p>Ctrl + v：可以查看关键帧信息<br>关键帧可以配合效果实现不同的特效。</p>]]></content>
    
    
    
    <tags>
      
      <tag>finalcut</tag>
      
      <tag>hotkey</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker之mysql安装</title>
    <link href="/2020/07/03/docker-mysql-ssh/"/>
    <url>/2020/07/03/docker-mysql-ssh/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker之mysql安装"><a href="#Docker之mysql安装" class="headerlink" title="Docker之mysql安装"></a>Docker之mysql安装</h2><h3 id="Dockerfile下载"><a href="#Dockerfile下载" class="headerlink" title="Dockerfile下载"></a>Dockerfile下载</h3><p>将github中的mysql的Dockerfile下载下来，地址如下：</p><p><code>https://github.com/DockerPool/mysql.git</code></p><pre><code class="hljs bash">mysql_sshd % lsDockerfileLICENSEREADME.mdcreate_db.shimport_sql.shmy.cnfmysqld_charset.cnfrun.shzhuyangze@localhost mysql_sshd % cat Dockerfile <span class="hljs-comment">#本文参考了「tutum」的 Dockerfile</span>FROM sshdMAINTAINER Waitfish &lt;dwj_zz@163.com&gt;<span class="hljs-comment">#安装软件 </span>ENV DEBIAN_FRONTEND noninteractiveRUN apt-get update &amp;&amp; \  apt-get -yq install mysql-server-5.6 pwgen &amp;&amp; \  rm -rf /var/lib/apt/lists/*<span class="hljs-comment"># 删除预安装的数据库文件</span>RUN rm -rf /var/lib/mysql/*<span class="hljs-comment"># 添加文件夹下的 MYSQL 配置文件</span>ADD my.cnf /etc/mysql/conf.d/my.cnfADD mysqld_charset.cnf /etc/mysql/conf.d/mysqld_charset.cnf<span class="hljs-comment"># 添加 MYSQL 的脚本</span>ADD import_sql.sh /import_sql.shADD run.sh /run.shRUN chmod 755 /*.sh<span class="hljs-comment"># 设置环境变量，用户名以及秘密</span>ENV MYSQL_USER adminENV MYSQL_PASS **Random**<span class="hljs-comment"># 设置主从复制模式下的环境变量</span>ENV REPLICATION_MASTER **False**ENV REPLICATION_SLAVE **False**ENV REPLICATION_USER replicaENV REPLICATION_PASS replica<span class="hljs-comment"># 设置可以允许挂载的卷，可以用来备份数据库和配置文件</span>VOLUME  [<span class="hljs-string">&quot;/etc/mysql&quot;</span>, <span class="hljs-string">&quot;/var/lib/mysql&quot;</span>]<span class="hljs-comment"># 设置可以映射的端口，如果是从我们的 sshd 镜像继承的话，默认还会开启 22 端口</span>EXPOSE 3306CMD [<span class="hljs-string">&quot;/run.sh&quot;</span>]</code></pre><h3 id="Mysql镜像安装"><a href="#Mysql镜像安装" class="headerlink" title="Mysql镜像安装"></a>Mysql镜像安装</h3><p>参考本地的Docker images镜像名称，修改如下：</p><pre><code class="hljs bash">% docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEsshd                dockerfile          5a0d9e4740fa        8 days ago          249MBsshd                ubuntu              6943898c8bac        9 days ago          235MBzhuyangze@localhost mysql_sshd % vim Dockerfile</code></pre><p>Dockerfile的继承镜像如下：sshd   -&gt; shd:dockerfile</p><pre><code class="hljs dockerfile"><span class="hljs-comment">#本文参考了「tutum」的 Dockerfile</span><span class="hljs-keyword">FROM</span> sshd:dockerfile<span class="hljs-keyword">MAINTAINER</span> <span class="hljs-keyword">from</span> www.lc-ling.com by lingchen (lingchen1316@<span class="hljs-number">163</span>.com)<span class="hljs-comment">#安装软件 </span><span class="hljs-keyword">ENV</span> DEBIAN_FRONTEND noninteractive<span class="hljs-keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; \</span><span class="bash">  apt-get -yq install mysql-server-5.6 pwgen &amp;&amp; \</span><span class="bash">  rm -rf /var/lib/apt/lists/*</span><span class="hljs-comment"># 删除预安装的数据库文件</span><span class="hljs-keyword">RUN</span><span class="bash"> rm -rf /var/lib/mysql/*</span><span class="hljs-comment"># 添加文件夹下的 MYSQL 配置文件</span><span class="hljs-keyword">ADD</span><span class="bash"> my.cnf /etc/mysql/conf.d/my.cnf</span><span class="hljs-keyword">ADD</span><span class="bash"> mysqld_charset.cnf /etc/mysql/conf.d/mysqld_charset.cnf</span><span class="hljs-comment"># 添加 MYSQL 的脚本</span><span class="hljs-keyword">ADD</span><span class="bash"> import_sql.sh /import_sql.sh</span><span class="hljs-keyword">ADD</span><span class="bash"> run.sh /run.sh</span><span class="hljs-keyword">RUN</span><span class="bash"> chmod 755 /*.sh</span><span class="hljs-comment"># 设置环境变量，用户名以及秘密</span><span class="hljs-keyword">ENV</span> MYSQL_USER admin<span class="hljs-keyword">ENV</span> MYSQL_PASS **Random**<span class="hljs-comment"># 设置主从复制模式下的环境变量</span><span class="hljs-keyword">ENV</span> REPLICATION_MASTER **False**<span class="hljs-keyword">ENV</span> REPLICATION_SLAVE **False**<span class="hljs-keyword">ENV</span> REPLICATION_USER replica<span class="hljs-keyword">ENV</span> REPLICATION_PASS replica<span class="hljs-comment"># 设置可以允许挂载的卷，可以用来备份数据库和配置文件</span><span class="hljs-keyword">VOLUME</span><span class="bash">  [<span class="hljs-string">&quot;/etc/mysql&quot;</span>, <span class="hljs-string">&quot;/var/lib/mysql&quot;</span>]</span><span class="hljs-comment"># 设置可以映射的端口，如果是从我们的 sshd 镜像继承的话，默认还会开启 22 端口</span><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">3306</span><span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;/run.sh&quot;</span>]</span></code></pre><p>构建镜像：<code>% docker build -t mysql:latest .</code></p><pre><code class="hljs bash">% docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEmysql               latest              a668adc70858        42 seconds ago      534MBsshd                dockerfile          5a0d9e4740fa        8 days ago          249MB</code></pre><h3 id="Mysql镜像启动"><a href="#Mysql镜像启动" class="headerlink" title="Mysql镜像启动"></a>Mysql镜像启动</h3><pre><code class="hljs bash">% docker run -d -P mysql137c211eadcdcd710833895786d15090af3a25eb2eddae3601fbe7c033691823zhuyangze@localhost mysql_sshd % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                            NAMES137c211eadcd        mysql               <span class="hljs-string">&quot;/run.sh&quot;</span>           5 seconds ago       Up 4 seconds        0.0.0.0:32769-&gt;22/tcp, 0.0.0.0:32768-&gt;3306/tcp   nervous_northcutt</code></pre><h4 id="通过ssh连接mysql容器"><a href="#通过ssh连接mysql容器" class="headerlink" title="通过ssh连接mysql容器"></a>通过ssh连接mysql容器</h4><pre><code class="hljs bash"><span class="hljs-comment"># 查看本机ip</span>% ifconfig% ssh root@192.168.0.107 -p 32769The authenticity of host <span class="hljs-string">&#x27;[192.168.0.107]:32769 ([192.168.0.107]:32769)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">ECDSA key fingerprint is SHA256:byz56n6ggX89uz39PZnFnS40Vkn4Ry5omVoAqi4UNZI.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><span class="hljs-string">Warning: Permanently added &#x27;</span>[192.168.0.107]:32769<span class="hljs-string">&#x27; (ECDSA) to the list of known hosts.</span><span class="hljs-string">Welcome to Ubuntu 14.04 LTS (GNU/Linux 4.4.0-170-generic x86_64)</span><span class="hljs-string"></span><span class="hljs-string"> * Documentation:  https://help.ubuntu.com/</span><span class="hljs-string"></span><span class="hljs-string">The programs included with the Ubuntu system are free software;</span><span class="hljs-string">the exact distribution terms for each program are described in the</span><span class="hljs-string">individual files in /usr/share/doc/*/copyright.</span><span class="hljs-string"></span><span class="hljs-string">Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by</span><span class="hljs-string">applicable law.</span><span class="hljs-string"></span><span class="hljs-string">root@137c211eadcd:~# ps -ef | grep mysql</span><span class="hljs-string">root         1     0  0 12:05 ?        00:00:00 /bin/sh /usr/bin/mysqld_safe</span><span class="hljs-string">mysql     1958     1  0 12:05 ?        00:00:03 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/lib/mysql/plugin --user=mysql --log-error=/var/log/mysql/error.log --pid-file=/var/run/mysqld/mysqld.pid --socket=/var/run/mysqld/mysqld.sock --port=3306</span><span class="hljs-string">root      2003  1991  0 12:30 pts/0    00:00:00 grep --color=auto mysql</span><span class="hljs-string">root@137c211eadcd:~# </span></code></pre><p>连接Mysql，查看Mysql的root用户的密码</p><p><code>docker logs 137</code></p><pre><code class="hljs bash">% docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                            NAMES137c211eadcd        mysql               <span class="hljs-string">&quot;/run.sh&quot;</span>           37 minutes ago      Up 37 minutes       0.0.0.0:32769-&gt;22/tcp, 0.0.0.0:32768-&gt;3306/tcp   nervous_northcuttzhuyangze@localhost mysql_sshd % docker logs 137=&gt; An empty or uninitialized MySQL volume is detected <span class="hljs-keyword">in</span> /var/lib/mysql=&gt; Installing MySQL ...=&gt; Done!=&gt; Creating admin user ...=&gt; Waiting <span class="hljs-keyword">for</span> confirmation of MySQL service startup, trying 0/13 ...=&gt; Creating MySQL user admin with random password=&gt; Done!========================================================================You can now connect to this MySQL Server using:    mysql -uadmin -pdWVMh7V1nDUa -h&lt;host&gt; -P&lt;port&gt;Please remember to change the above password as soon as possible!MySQL user <span class="hljs-string">&#x27;root&#x27;</span> has no password but only allows <span class="hljs-built_in">local</span> connections========================================================================200703 12:05:26 mysqld_safe Can<span class="hljs-string">&#x27;t log to error log and syslog at the same time.  Remove all --log-error configuration options for --syslog to take effect.</span><span class="hljs-string">200703 12:05:26 mysqld_safe Logging to &#x27;</span>/var/<span class="hljs-built_in">log</span>/mysql/error.log<span class="hljs-string">&#x27;.</span><span class="hljs-string">200703 12:05:26 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql</span></code></pre><h4 id="指定用户与密码登录"><a href="#指定用户与密码登录" class="headerlink" title="指定用户与密码登录"></a>指定用户与密码登录</h4><pre><code class="hljs bash">% docker run -d -P -e MYSQL_PASS=<span class="hljs-string">&quot;Aa123456&quot;</span> mysqlb3662485a106c4311a8f052a6c4a49f1ec17bb3abaae1aabb7e76e19e41a0167zhuyangze@localhost mysql_sshd % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                            NAMESb3662485a106        mysql               <span class="hljs-string">&quot;/run.sh&quot;</span>           4 seconds ago       Up 3 seconds        0.0.0.0:32771-&gt;22/tcp, 0.0.0.0:32770-&gt;3306/tcp   eloquent_visvesvaraya137c211eadcd        mysql               <span class="hljs-string">&quot;/run.sh&quot;</span>           14 hours ago        Up 14 hours         0.0.0.0:32769-&gt;22/tcp, 0.0.0.0:32768-&gt;3306/tcp   nervous_northcutt</code></pre><h4 id="挂载目录到Mysql容器"><a href="#挂载目录到Mysql容器" class="headerlink" title="挂载目录到Mysql容器"></a>挂载目录到Mysql容器</h4><pre><code class="hljs bash"><span class="hljs-comment"># 没有操作权限</span>% docker run -d -P -v /opt/docker_mysqldb:/var/lib/mysql mysql0715cabfa557a54b325e0ad02f1f3717a8f3fc38fa9dc1d6a300337b3c4b2a3ddocker: Error response from daemon: Mounts denied: The path /opt/docker_mysqldbis not shared from OS X and is not known to Docker.You can configure shared paths from Docker -&gt; Preferences... -&gt; File Sharing.See https://docs.docker.com/docker-for-mac/osxfs/<span class="hljs-comment">#namespaces for more info.</span></code></pre><p>指定到可访问可操作的目录，（建议挂载本地目录到容器，便于数据迁移，备份等管理）</p><pre><code class="hljs bash">% docker run -d -P -v /Users/zhuyangze/Documents/docker/volumes/mysqldb:/var/lib/mysql mysql8b1e7b9d1a90ed063714938ea03dc753f9fd9dd2cc5337d63d2ee8e3bc2a6cadzhuyangze@localhost mysqldb % lsib_logfile0ib_logfile1ibdata1mysqlperformance_schema<span class="hljs-built_in">test</span>zhuyangze@localhost mysqldb % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                            NAMES8b1e7b9d1a90        mysql               <span class="hljs-string">&quot;/run.sh&quot;</span>           14 seconds ago      Up 10 seconds       0.0.0.0:32773-&gt;22/tcp, 0.0.0.0:32772-&gt;3306/tcp   brave_hofstadter<span class="hljs-comment"># docker logs 8b1</span><span class="hljs-comment"># mysql -uadmin -ptxqo9GN5NyE0 -h&lt;host&gt; -P&lt;port&gt;</span></code></pre><h4 id="启用主从模式"><a href="#启用主从模式" class="headerlink" title="启用主从模式"></a>启用主从模式</h4><p>主Mysql服务器的名称必须为mysql</p><pre><code class="hljs bash"><span class="hljs-comment"># 主mysql容器</span>% sudo docker run -d -e REPLICATION_MASTER=<span class="hljs-literal">true</span> -P -v /Users/zhuyangze/Documents/docker/volumes/mysqldb_master:/var/lib/mysql --name mysql mysqlPassword:c472c728713bf1133e13dd6395d786718c610c8070c5afff34c880e27ce7b4fczhuyangze@localhost mysqldb_master % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                            NAMESc472c728713b        mysql               <span class="hljs-string">&quot;/run.sh&quot;</span>           6 seconds ago       Up 5 seconds        0.0.0.0:32775-&gt;22/tcp, 0.0.0.0:32774-&gt;3306/tcp   mysql<span class="hljs-comment"># 从mysql容器</span>% sudo docker run -d -e REPLICATION_SLAVE=<span class="hljs-literal">true</span> -P -v /Users/zhuyangze/Documents/docker/volumes/mysqldb_slave:/var/lib/mysql --link mysql:mysql mysql a50026556cbc9d42434149ff1a87104923e1a39f63e6535e3c74242742a24d73zhuyangze@localhost mysqldb_master % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                            NAMESa50026556cbc        mysql               <span class="hljs-string">&quot;/run.sh&quot;</span>           3 seconds ago       Up 2 seconds        0.0.0.0:32777-&gt;22/tcp, 0.0.0.0:32776-&gt;3306/tcp   epic_tereshkovac472c728713b        mysql               <span class="hljs-string">&quot;/run.sh&quot;</span>           2 minutes ago       Up 2 minutes        0.0.0.0:32775-&gt;22/tcp, 0.0.0.0:32774-&gt;3306/tcp   mysql<span class="hljs-comment"># mysql -uadmin -p9WtBLQrXGB22 -h&lt;host&gt; -P&lt;port&gt;</span><span class="hljs-comment"># mysql -uadmin -p19gtHyf8fbt2 -h&lt;host&gt; -P&lt;port&gt;</span></code></pre><p><strong><u>ps: 本文仅为学习记录，仅为学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>mysql</tag>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker之Web服务器与应用</title>
    <link href="/2020/06/25/docker-webapp/"/>
    <url>/2020/06/25/docker-webapp/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker之Web服务器与应用"><a href="#Docker之Web服务器与应用" class="headerlink" title="Docker之Web服务器与应用"></a>Docker之Web服务器与应用</h2><h3 id="1、Apache服务搭建"><a href="#1、Apache服务搭建" class="headerlink" title="1、Apache服务搭建"></a>1、Apache服务搭建</h3><p>使用Dockerfile来创建带apache服务的Docker镜像的容器</p><pre><code class="hljs bash">xxx@localhost docker % mkdir apache_ubuntuxxx@localhost docker % <span class="hljs-built_in">cd</span> apache_ubuntu xxx@localhost apache_ubuntu % lsxxx@localhost apache_ubuntu % touch Dockerfile run.shxxx@localhost apache_ubuntu % lsDockerfilerun.shxxx@localhost apache_ubuntu % mkdir samplexxx@localhost apache_ubuntu % lsDockerfilerun.shsamplexxx@localhost apache_ubuntu % vim Dockerfile <span class="hljs-comment"># Dockerfile文件</span><span class="hljs-comment"># 继承镜像</span>FROM sshd:dockerfile<span class="hljs-comment"># 提供一些作者的信息</span>MAINTAINER from www.lc-ling.com by lingchen (lingchen1316@163.com)<span class="hljs-comment"># 设置环境变量，所有操作都是非交互式的</span>ENV DEBIAN_FRONTEND noninteractive<span class="hljs-comment"># 安装</span>RUN apt-get -yq install apache2&amp;&amp;\    rm -rf /var/lib/apt/lists/*RUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone &amp;&amp; \    dpkg-reconfigure -f noninteractive tzdata<span class="hljs-comment"># 注意这里要更改系统的时区设置，因为在Web应用中经常会用到时区这个系统变量，</span><span class="hljs-comment"># 默认的ubuntu会让你的应用程序发生不可思议的效果哦</span><span class="hljs-comment"># 添加脚本，并设置权限，这会覆盖之前放在这个位置的脚本</span>ADD run.sh /run.shRUN chmod 755 /*.sh<span class="hljs-comment"># 添加一个示例的Web站点，删掉默认安装在apache文件夹下面的文件</span><span class="hljs-comment"># 并将我们添加的示例用软链接链到/var/www/html目录下面</span>RUN mkdir -p /var/lock/apache2 &amp;&amp; mkdir -p /app &amp;&amp; rm -fr /var/www/html &amp;&amp; ln -s /app /var/www/htmlCOPY sample/ /app<span class="hljs-comment"># 设置apache相关的一些变量，在容器启动的时候可以使用-e参数替代</span>ENV APACHE_RUN_USER www-dataENV APACHE_RUN_GROUP www-dataENV APACHE_LOG_DIR /var/<span class="hljs-built_in">log</span>/apache2ENV APACHE_PID_FILE /var/run/apache2.pidENV APACHE_RUN_DIR /var/run/apache2ENV APACHE_LOCK_DIR /var/lock/apache2ENV APACHE_SERVERADMIN admin@localhostENV APACHE_SERVERNAME localhostENV APACHE_SERVERALIAS docker.localhostENV APACHE_DOCUMENTROOT /var/wwwEXPOSE 80WORKDIR /appCMD [<span class="hljs-string">&quot;/run.sh&quot;</span>]</code></pre><p>在sample文件夹中新建index.html</p><pre><code class="hljs bash">% <span class="hljs-built_in">cd</span> sample% vim index.html</code></pre><p>index.html：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello, Docker!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>编辑run.sh</p><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">exec</span> apache2 -D FOREGROUND</code></pre><p>创建镜像</p><pre><code class="hljs bash">xxx@localhost apache_ubuntu % docker build -t apache:ubuntu ....Successfully tagged apache:ubuntu<span class="hljs-comment"># 查看镜像</span>xxx@localhost apache_ubuntu % docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEapache              ubuntu              fb3d56d54d11        7 seconds ago       262MBsshd                dockerfile          5a0d9e4740fa        5 hours ago         249MB<span class="hljs-comment"># 启动容器（-P：端口自动分配）</span>xxx@localhost apache_ubuntu % docker run -d -P apache:ubuntu4018616a748cb7add25e8a9eb0d785e14f4722a4c9fd50f7329212a62da2961fxxx@localhost apache_ubuntu % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                          NAMES4018616a748c        apache:ubuntu       <span class="hljs-string">&quot;/run.sh&quot;</span>           4 seconds ago       Up 3 seconds        0.0.0.0:32769-&gt;22/tcp, 0.0.0.0:32768-&gt;80/tcp   compassionate_benz<span class="hljs-comment"># 验证apache服务</span>xxx@localhost apache_ubuntu % curl 192.168.0.107:32768&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;body&gt;    &lt;p&gt;Hello, Docker!&lt;/p&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><p>或者访问<code>http://192.168.0.107:32768/</code></p><p><img src="/2020/06/25/docker-webapp/1.png" alt="docker_webapp"></p><p>在使用Dockerfile镜像时，会继承父镜像开放的端口，但却不会继承启动命令。</p><pre><code class="hljs bash"><span class="hljs-comment"># 访问22端口</span>xxx@localhost apache_ubuntu % ssh root@192.168.0.107 -p 32769kex_exchange_identification: Connection closed by remote host<span class="hljs-comment"># 解决：</span>xxx@localhost apache_ubuntu % vim run.sh <span class="hljs-meta">#!/bin/bash</span>/usr/sbin/sshd &amp;<span class="hljs-built_in">exec</span> apache2 -D FOREGROUND<span class="hljs-comment"># 重新构建镜像</span>% docker build -t apache:ubuntu .xxx@localhost apache_ubuntu % docker run -d -P apache:ubuntu16537d326eed465be3ddd058c477d319df5df1977f2884af6737f11eaeb99878xxx@localhost apache_ubuntu % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                          NAMES16537d326eed        apache:ubuntu       <span class="hljs-string">&quot;/run.sh&quot;</span>           6 seconds ago       Up 5 seconds        0.0.0.0:32771-&gt;22/tcp, 0.0.0.0:32770-&gt;80/tcp   unruffled_lamarr<span class="hljs-comment"># 测试ssh</span>xxx@localhost apache_ubuntu % ssh root@192.168.0.107 -p 32771The authenticity of host <span class="hljs-string">&#x27;[192.168.0.107]:32771 ([192.168.0.107]:32771)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">ECDSA key fingerprint is SHA256:byz56n6ggX89uz39PZnFnS40Vkn4Ry5omVoAqi4UNZI.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><span class="hljs-string">Warning: Permanently added &#x27;</span>[192.168.0.107]:32771<span class="hljs-string">&#x27; (ECDSA) to the list of known hosts.</span><span class="hljs-string">Welcome to Ubuntu 14.04 LTS (GNU/Linux 4.4.0-170-generic x86_64)</span><span class="hljs-string"></span><span class="hljs-string"> * Documentation:  https://help.ubuntu.com/</span><span class="hljs-string"></span><span class="hljs-string">The programs included with the Ubuntu system are free software;</span><span class="hljs-string">the exact distribution terms for each program are described in the</span><span class="hljs-string">individual files in /usr/share/doc/*/copyright.</span><span class="hljs-string"></span><span class="hljs-string">Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by</span><span class="hljs-string">applicable law.</span><span class="hljs-string"></span><span class="hljs-string">root@16537d326eed:~# </span></code></pre><h3 id="2、Nginx搭建"><a href="#2、Nginx搭建" class="headerlink" title="2、Nginx搭建"></a>2、Nginx搭建</h3><p>Nginx是一个高性能的Web和反向代理服务器。一个Nginx实例能够轻松支持高达50000个并发连接数的响应。</p><pre><code class="hljs bash">xxx@localhost docker % mkdir nginx_ubuntuxxx@localhost docker % cp apache_ubuntu/* nginx_ubuntu cp: apache_ubuntu/sample is a directory (not copied).xxx@localhost docker % cp apache_ubuntu/*.* nginx_ubuntuxxx@localhost docker % <span class="hljs-built_in">cd</span> nginx_ubuntu xxx@localhost nginx_ubuntu % lsDockerfilerun.sh</code></pre><p>编辑Dockerfile文件：<code>% vim Dockerfile </code></p><pre><code class="hljs dockerfile"><span class="hljs-comment"># 继承镜像sshd:dockerfile</span><span class="hljs-keyword">FROM</span> sshd:dockerfile<span class="hljs-comment"># 提供一些作者的信息</span><span class="hljs-keyword">MAINTAINER</span> <span class="hljs-keyword">from</span> www.lc-ling.com by lingchen (lingchen1316@<span class="hljs-number">163</span>.com)<span class="hljs-comment"># 设置环境变量，所有操作都是非交互式的</span><span class="hljs-keyword">ENV</span> DEBIAN_FRONTEND noninteractive<span class="hljs-comment"># 安装nginx，以非daemon启动</span><span class="hljs-keyword">RUN</span><span class="bash"> \</span><span class="bash">   apt-get install -y nginx &amp;&amp; \</span><span class="bash">   rm -rf /var/lib/apt/lists/* &amp;&amp; \</span><span class="bash">   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\ndaemon off;&quot;</span> &gt;&gt; /etc/nginx/nginx.conf &amp;&amp; \</span><span class="bash">   chown -R www-data:www-data /var/lib/nginx</span><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone &amp;&amp; \</span><span class="bash">    dpkg-reconfigure -f noninteractive tzdata</span><span class="hljs-comment"># 注意这里要更改系统的时区设置，因为在Web应用中经常会用到时区这个系统变量，</span><span class="hljs-comment"># 默认的ubuntu会让你的应用程序发生不可思议的效果哦</span><span class="hljs-comment"># 添加脚本，并设置权限，这会覆盖之前放在这个位置的脚本</span><span class="hljs-keyword">ADD</span><span class="bash"> run.sh /run.sh</span><span class="hljs-keyword">RUN</span><span class="bash"> chmod 755 /*.sh</span><span class="hljs-comment"># 定义可以被挂载的目录，分别是虚拟主机的挂载目录，证书目录，配置目录和日志目录</span><span class="hljs-keyword">VOLUME</span><span class="bash"> [<span class="hljs-string">&quot;/etc/nginx/sites-enabled&quot;</span>, <span class="hljs-string">&quot;/etc/nginx/certs&quot;</span>, <span class="hljs-string">&quot;/etc/nginx/conf.d&quot;</span>, <span class="hljs-string">&quot;/var/log/nginx&quot;</span>] </span><span class="hljs-comment"># 定义工作目录</span><span class="hljs-keyword">WORKDIR</span><span class="bash"> /etc/nginx</span><span class="hljs-comment"># 定义输出命令</span><span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;/run.sh&quot;</span>]</span><span class="hljs-comment"># 定义暴露端口</span><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">443</span></code></pre><p>编辑run.sh <code>vim run.sh</code></p><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span>/usr/sbin/sshd &amp;/usr/sbin/nginx</code></pre><p>创建镜像</p><pre><code class="hljs bash">xxx@localhost nginx_ubuntu % docker build -t nginx:stable .....Successfully built 99a2f2008406Successfully tagged nginx:stable<span class="hljs-comment"># 查看镜像</span>xxx@localhost nginx_ubuntu % docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEnginx               stable              99a2f2008406        16 seconds ago      270MBapache              ubuntu              ffac826ee6f2        17 hours ago        262MB</code></pre><p>基于nginx镜像，启动新的容器</p><pre><code class="hljs bash">% docker run -d -P nginx:stable89a2b5971b5718669feb099cdff6c5c35b99eac2c4fc2d74e1b3543b1f41945dxxx@localhost nginx_ubuntu % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                                                  NAMES89a2b5971b57        nginx:stable        <span class="hljs-string">&quot;/run.sh&quot;</span>           8 seconds ago       Up 7 seconds        0.0.0.0:32770-&gt;22/tcp, 0.0.0.0:32769-&gt;80/tcp, 0.0.0.0:32768-&gt;443/tcp   busy_dubinsky<span class="hljs-comment"># 测试nginx是否成功</span>xxx@localhost nginx_ubuntu % curl 192.168.0.107:32769&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;/title&gt;&lt;style&gt;    body &#123;        width: 35em;        margin: 0 auto;        font-family: Tahoma, Verdana, Arial, sans-serif;    &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;&lt;p&gt;If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.&lt;/p&gt;&lt;p&gt;For online documentation and support please refer to&lt;a href=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;Commercial support is available at&lt;a href=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you <span class="hljs-keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>访问地址：<code>http://192.168.0.107:32769/</code></p><p><img src="/2020/06/25/docker-webapp/2.png" alt="nginx-stable"></p><h3 id="3、Tengine镜像"><a href="#3、Tengine镜像" class="headerlink" title="3、Tengine镜像"></a>3、Tengine镜像</h3><p>Dockerfile文件：</p><pre><code class="hljs dockerfile"><span class="hljs-comment"># 继承镜像sshd:dockerfile</span><span class="hljs-keyword">FROM</span> sshd:dockerfile<span class="hljs-comment"># 提供一些作者的信息</span><span class="hljs-keyword">MAINTAINER</span> <span class="hljs-keyword">from</span> www.lc-ling.com by lingchen (lingchen1316@<span class="hljs-number">163</span>.com)<span class="hljs-comment"># 安装编译环境</span><span class="hljs-keyword">RUN</span><span class="bash"> apt-get install -y build-essential debhelper make autoconf automake patch</span><span class="hljs-keyword">RUN</span><span class="bash"> apt-get install -y dpkg-dev fakeroot pbuilder gnupg dh-make libssl-dev libpcre3-dev git-core</span><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone &amp;&amp; \</span><span class="bash">    dpkg-reconfigure -f noninteractive tzdata</span><span class="hljs-comment"># 注意这里要更改系统的时区设置，因为在Web应用中经常会用到时区这个系统变量，</span><span class="hljs-comment"># 默认的ubuntu会让你的应用程序发生不可思议的效果哦</span><span class="hljs-comment"># 创建Nginx用户</span><span class="hljs-keyword">RUN</span><span class="bash"> adduser --disabled-login --gecos <span class="hljs-string">&#x27;Tengine&#x27;</span> nginx</span><span class="hljs-comment"># tengine安装的shell脚本</span><span class="hljs-keyword">WORKDIR</span><span class="bash"> /home/nginx</span><span class="hljs-keyword">RUN</span><span class="bash"> su nginx -c <span class="hljs-string">&#x27;git clone https://github.com/alibaba/tengine.git&#x27;</span></span><span class="hljs-keyword">WORKDIR</span><span class="bash"> /home/nginx/tengine</span><span class="hljs-keyword">RUN</span><span class="bash"> su nginx -c <span class="hljs-string">&#x27;mv packages/debian .&#x27;</span></span><span class="hljs-keyword">ENV</span> DEB_BUILD_OPTIONS nocheck<span class="hljs-keyword">RUN</span><span class="bash"> su nginx -c <span class="hljs-string">&#x27;dpkg-buildpackage -rfakeroot -uc -b&#x27;</span></span><span class="hljs-keyword">WORKDIR</span><span class="bash"> /home/nginx</span><span class="hljs-keyword">RUN</span><span class="bash"> dpkg -i tengine_2.0.2-1_amd64.deb</span><span class="hljs-comment"># 定义挂载的目录</span><span class="hljs-keyword">VOLUME</span><span class="bash"> [<span class="hljs-string">&quot;/data&quot;</span>, <span class="hljs-string">&quot;/etc/nginx/sites-enabled&quot;</span>, <span class="hljs-string">&quot;/var/log/nginx&quot;</span>]</span><span class="hljs-comment"># 让nginx运行在非Daemon模式</span><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\ndaemon off;&quot;</span> &gt;&gt; /etc/nginx/nginx.conf</span><span class="hljs-comment"># 定义工作目录</span><span class="hljs-keyword">WORKDIR</span><span class="bash"> /etc/nginx</span><span class="hljs-comment"># 添加脚本，并设置权限，这会覆盖之前放在这个位置的脚本</span><span class="hljs-keyword">ADD</span><span class="bash"> run.sh /run.sh</span><span class="hljs-keyword">RUN</span><span class="bash"> chmod 755 /*.sh</span><span class="hljs-comment"># 定义输出命令</span><span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;/run.sh&quot;</span>]</span><span class="hljs-comment"># 定义暴露端口</span><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">443</span></code></pre><p>run.sh：</p><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span>/usr/sbin/sshd &amp;/usr/sbin/nginx</code></pre><p><code>docker build -t nginx:alibaba .</code></p><h3 id="4、Tomcat"><a href="#4、Tomcat" class="headerlink" title="4、Tomcat"></a>4、Tomcat</h3><p>Tomcat服务器是一个免费开放源代码的Web应用服务器，属于轻量级的应用服务器</p><h3 id="5、LAMP"><a href="#5、LAMP" class="headerlink" title="5、LAMP"></a>5、LAMP</h3><p>LAMP指的是Linux（操作系统）、ApacheHTTP服务器、MySQL（有时也指MariaDB，数据库软件）和PHP（有时也指Perl和Python）的组合方案，一般也适用来建立Web服务环境。</p><pre><code class="hljs bash">% docker pull tutum/lampxxx@localhost lamp % docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEtutum/lamp          latest              3d49e175ec00        4 years ago         427MB<span class="hljs-comment"># 启动lamp容器（3306端口已被mysql占用，改为3316）</span>% docker run -d -p 8080:80 -p 3316:3306 tutum/lampcc28860af6210e7d9ce97bd62cf5a68b238bcf0bf1459bb748a174901b3141faxxx@localhost lamp % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                          NAMEScc28860af621        tutum/lamp          <span class="hljs-string">&quot;/run.sh&quot;</span>           2 minutes ago       Up 2 minutes        0.0.0.0:8080-&gt;80/tcp, 0.0.0.0:3316-&gt;3306/tcp   great_clarke</code></pre><p>访问<code>http://127.0.0.1:8080/</code></p><p><img src="/2020/06/25/docker-webapp/3.png" alt="lamp-acess"></p><h3 id="6、CMS"><a href="#6、CMS" class="headerlink" title="6、CMS"></a>6、CMS</h3><p>内容管理系统（Content Management System, CMS）指的是提供内容编辑服务的平台程序。CMS可以让不懂编程的人方便又轻松地发布、更改和管理各类数字内容（主要以文本和图片为主）</p><p>WordPress是风靡全球的免费开源的内容管理系统。WordPress是博客、企业官网、产品首页等内容相关平台的主流实现方案之一。</p><pre><code class="hljs bash">% docker pull wordpress% docker run --name some-wordpress --link some-mysql:mysql -d wordpress</code></pre><p><code>--link some-mysql:mysql</code>，连接到mysql的容器</p><p>若没有相应的mysql容器</p><pre><code class="hljs bash">% docker run --name some-wordpress --link some-mysql:mysql -d wordpressdocker: Error response from daemon: could not get container <span class="hljs-keyword">for</span> some-mysql: No such container: some-mysql.</code></pre><p><strong><u>ps：本文为学习记录，仅供学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>webapp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker之操作系统学习(SSH容器搭建)</title>
    <link href="/2020/06/23/docker-os/"/>
    <url>/2020/06/23/docker-os/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker之操作系统学习"><a href="#Docker之操作系统学习" class="headerlink" title="Docker之操作系统学习"></a>Docker之操作系统学习</h2><h3 id="1、BusyBox"><a href="#1、BusyBox" class="headerlink" title="1、BusyBox"></a>1、BusyBox</h3><p>Busybox是一个集成了一百多个最常用的Linux命令和工具的软件工具箱，它在单一的可执行文件中提供了精简的Unix的工具集。</p><pre><code class="hljs bash">% docker search busybox% docker pull busyboxUsing default tag: latestlatest: Pulling from library/busybox76df9210b28c: Pull complete Digest: sha256:95cf004f559831017cdf4628aaf1bb30133677be8702a8c5f2994629f637a209Status: Downloaded newer image <span class="hljs-keyword">for</span> busybox:latestdocker.io/library/busybox:latest% docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEbusybox             latest              1c35c4412082        2 weeks ago         1.22MB<span class="hljs-comment"># 启动busybox容器</span>% docker run -it busybox<span class="hljs-comment"># 运行grep命令</span>/ <span class="hljs-comment"># grep</span>BusyBox v1.31.1 (2020-06-02 02:36:36 UTC) multi-call binary.Usage: grep [-HhnlLoqvsriwFE] [-m N] [-A/B/C N] PATTERN/-e PATTERN.../-f FILE [FILE]...Search <span class="hljs-keyword">for</span> PATTERN <span class="hljs-keyword">in</span> FILEs (or stdin)-HAdd <span class="hljs-string">&#x27;filename:&#x27;</span> prefix-hDo not add <span class="hljs-string">&#x27;filename:&#x27;</span> prefix-nAdd <span class="hljs-string">&#x27;line_no:&#x27;</span> prefix-lShow only names of files that match-LShow only names of files that don<span class="hljs-string">&#x27;t match</span><span class="hljs-string">-cShow only count of matching lines</span><span class="hljs-string">-oShow only the matching part of line</span><span class="hljs-string">-qQuiet. Return 0 if PATTERN is found, 1 otherwise</span><span class="hljs-string">-vSelect non-matching lines</span><span class="hljs-string">-sSuppress open and read errors</span><span class="hljs-string">-rRecurse</span><span class="hljs-string">-iIgnore case</span><span class="hljs-string">-wMatch whole words only</span><span class="hljs-string">-xMatch whole lines only</span><span class="hljs-string">-FPATTERN is a literal (not regexp)</span><span class="hljs-string">-EPATTERN is an extended regexp</span><span class="hljs-string">-m NMatch up to N times per file</span><span class="hljs-string">-A NPrint N lines of trailing context</span><span class="hljs-string">-B NPrint N lines of leading context</span><span class="hljs-string">-C NSame as &#x27;</span>-A N -B N<span class="hljs-string">&#x27;</span><span class="hljs-string">-e PTRNPattern to match</span><span class="hljs-string">-f FILERead pattern from file</span><span class="hljs-string"></span><span class="hljs-string"># 查看容器内的挂载信息</span><span class="hljs-string">/ # mount</span><span class="hljs-string">overlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/CI4ZX3GGYIARAQBCPDSWXFDIVK:/var/lib/docker/overlay2/l/PXT5LRJGKYW2STZOH4DLZRYCD4,upperdir=/var/lib/docker/overlay2/4b6cb63e4a6b00292b57ae981a1c23c812418e68aa02c10c959cdbd7bd4f5332/diff,workdir=/var/lib/docker/overlay2/4b6cb63e4a6b00292b57ae981a1c23c812418e68aa02c10c959cdbd7bd4f5332/work)</span><span class="hljs-string">proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)</span><span class="hljs-string">tmpfs on /dev type tmpfs (rw,nosuid,size=65536k,mode=755)</span><span class="hljs-string">devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=666)</span><span class="hljs-string">sysfs on /sys type sysfs (ro,nosuid,nodev,noexec,relatime)</span><span class="hljs-string">tmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,relatime,mode=755)</span><span class="hljs-string">cpuset on /sys/fs/cgroup/cpuset type cgroup (ro,nosuid,nodev,noexec,relatime,cpuset)</span><span class="hljs-string">cpu on /sys/fs/cgroup/cpu type cgroup (ro,nosuid,nodev,noexec,relatime,cpu)</span><span class="hljs-string">cpuacct on /sys/fs/cgroup/cpuacct type cgroup (ro,nosuid,nodev,noexec,relatime,cpuacct)</span></code></pre><p>busybox虽然小巧，但是它提供了常见的Linux命令，可以用来练习和熟悉Linux命令。</p><h3 id="2、Ubuntu"><a href="#2、Ubuntu" class="headerlink" title="2、Ubuntu"></a>2、Ubuntu</h3><p>Debian和Ubuntu都是目前较为流行的Debian系的服务器操作系统。</p><pre><code class="hljs bash">% docker search -s 10 ubuntuFlag --stars has been deprecated, use --filter=stars=3 insteadNAME                                                      DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDubuntu                                                    Ubuntu is a Debian-based Linux operating sys…   11031               [OK]                dorowu/ubuntu-desktop-lxde-vnc                            Docker image to provide HTML5 VNC interface …   441                                     [OK]rastasheep/ubuntu-sshd                                    Dockerized SSH service, built on top of offi…   244                                     [OK]consol/ubuntu-xfce-vnc                                    Ubuntu container with <span class="hljs-string">&quot;headless&quot;</span> VNC session…   220                                     [OK]ubuntu-upstart                                            Upstart is an event-based replacement <span class="hljs-keyword">for</span> th…   110                 [OK]                ansible/ubuntu14.04-ansible                               Ubuntu 14.04 LTS with ansible                   98                                      [OK]neurodebian                                               NeuroDebian provides neuroscience research s…   68                  [OK]                1and1internet/ubuntu-16-nginx-php-phpmyadmin-mysql-5      ubuntu-16-nginx-php-phpmyadmin-mysql-5          50                                      [OK]ubuntu-debootstrap                                        debootstrap --variant=minbase --components=m…   44                  [OK]                nuagebec/ubuntu                                           Simple always updated Ubuntu docker images w…   24                                      [OK]i386/ubuntu                                               Ubuntu is a Debian-based Linux operating sys…   21                                      1and1internet/ubuntu-16-apache-php-5.6                    ubuntu-16-apache-php-5.6                        14                                      [OK]1and1internet/ubuntu-16-apache-php-7.0                    ubuntu-16-apache-php-7.0                        13                                      [OK]eclipse/ubuntu_jdk8                                       Ubuntu, JDK8, Maven 3, git, curl, nmap, mc, …   12                                      [OK]1and1internet/ubuntu-16-nginx-php-phpmyadmin-mariadb-10   ubuntu-16-nginx-php-phpmyadmin-mariadb-10       11                                      [OK]<span class="hljs-comment"># 使用Ubuntu 14.04，查看其版本号</span>% docker run -it ubuntu:14.04 /bin/bashUnable to find image <span class="hljs-string">&#x27;ubuntu:14.04&#x27;</span> locally14.04: Pulling from library/ubuntu2e6e20c8e2e6: Pull complete 30bb187ac3fc: Pull complete b7a5bcc4a58a: Pull complete Digest: sha256:ffc76f71dd8be8c9e222d420dc96901a07b61616689a44c7b3ef6a10b7213de4Status: Downloaded newer image <span class="hljs-keyword">for</span> ubuntu:14.04root@d3bc90968ea7:/<span class="hljs-comment"># lsb_release -a</span>No LSB modules are available.Distributor ID:UbuntuDescription:Ubuntu 14.04.6 LTSRelease:14.04Codename:trusty<span class="hljs-comment"># 安装curl</span>root@d3bc90968ea7:/<span class="hljs-comment"># apt-get install curl</span>root@d3bc90968ea7:/<span class="hljs-comment"># curl</span>curl: try <span class="hljs-string">&#x27;curl --help&#x27;</span> or <span class="hljs-string">&#x27;curl --manual&#x27;</span> <span class="hljs-keyword">for</span> more information<span class="hljs-comment"># 安装apache2</span>root@d3bc90968ea7:/<span class="hljs-comment"># apt-get install apache2</span><span class="hljs-comment"># 启动apache2服务</span>root@d3bc90968ea7:/<span class="hljs-comment"># service apache2 start</span> * Starting web server apache2                                                                                                                                                                              AH00558: apache2: Could not reliably determine the server<span class="hljs-string">&#x27;s fully qualified domain name, using 172.17.0.2. Set the &#x27;</span>ServerName<span class="hljs-string">&#x27; directive globally to suppress this message</span><span class="hljs-string"> * </span><span class="hljs-string"></span><span class="hljs-string"># 访问apache2服务</span><span class="hljs-string">root@d3bc90968ea7:/# curl 127.0.0.1</span><span class="hljs-string"></span><span class="hljs-string">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><span class="hljs-string">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><span class="hljs-string">  &lt;!--</span><span class="hljs-string">    Modified from the Debian original for Ubuntu</span><span class="hljs-string">    Last updated: 2014-03-19</span><span class="hljs-string">    See: https://launchpad.net/bugs/1288690</span><span class="hljs-string">  --&gt;</span><span class="hljs-string">  &lt;head&gt;</span><span class="hljs-string">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span><span class="hljs-string">    &lt;title&gt;Apache2 Ubuntu Default Page: It works&lt;/title&gt;</span><span class="hljs-string">    &lt;style type=&quot;text/css&quot; media=&quot;screen&quot;&gt;</span><span class="hljs-string">......</span></code></pre><h3 id="3、Centos-Fedora"><a href="#3、Centos-Fedora" class="headerlink" title="3、Centos/Fedora"></a>3、Centos/Fedora</h3><p>Centos和Fedora都是基于Redhat的Linux发行版。前者以兼容Redhat软件而闻名，Centos是企业级服务器的常用选型。后者则主要面向个人用户。</p><h3 id="4、创建支持SSH服务的镜像"><a href="#4、创建支持SSH服务的镜像" class="headerlink" title="4、创建支持SSH服务的镜像"></a>4、创建支持SSH服务的镜像</h3><h4 id="基于commit命令创建"><a href="#基于commit命令创建" class="headerlink" title="基于commit命令创建"></a>基于commit命令创建</h4><p>Docker提供的docker commit命令，支持用户提交自己对容器的修改，并生成新的镜像。<br>命令格式为<code>docker commit CONTAINER [REPOSITORY[:TAG]]</code>。</p><pre><code class="hljs bash">xxx@bogon ~ % docker run -it ubuntu:14.04 /bin/bashroot@8d0c91836292:/<span class="hljs-comment"># sshd</span>bash: sshd: <span class="hljs-built_in">command</span> not found<span class="hljs-comment"># 安装sshd</span>root@8d0c91836292:/<span class="hljs-comment"># apt-get install openssh-server</span><span class="hljs-comment"># 查看容器的22端口，处于监听状态</span>root@8d0c91836292:/<span class="hljs-comment"># netstat -tunlp</span>Active Internet connections (only servers)Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program nametcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      579/sshd        tcp6       0      0 :::22                   :::*                    LISTEN      579/sshd    <span class="hljs-comment"># 修改SSH服务的安全登录配置，取消pam登录限制</span>root@8d0c91836292:/<span class="hljs-comment"># sed -ri &#x27;s/session required pam_loginuid.so/#session required pam_loginuid.so/g&#x27; /etc/pam.d/sshd</span><span class="hljs-comment"># 在root用户目录下创建．ssh目录，并复制需要登录的公钥信息</span><span class="hljs-comment"># (一般为本地主机用户目录下的．ssh/id_rsa.pub文件，可由ssh-keygen -t rsa命令生成)到authorized_keys文件中</span>root@8d0c91836292:/<span class="hljs-comment"># mkdir root/.ssh</span>root@8d0c91836292:/<span class="hljs-comment"># vi /root/.ssh/authorized_keys</span><span class="hljs-comment"># 创建自动启动ssh服务的脚本</span>root@8d0c91836292:/<span class="hljs-comment"># vi /run.sh</span><span class="hljs-meta">#! /bin/bash</span>/usr/sbin/sshd -D<span class="hljs-comment"># 添加执行权限</span>root@8d0c91836292:/<span class="hljs-comment"># chmod +x run.sh </span>root@8d0c91836292:/<span class="hljs-comment"># ls -l</span>-rwxr-xr-x   1 root root   31 Jun 23 14:44 run.sh<span class="hljs-comment"># 退出容器</span>root@8d0c91836292:/<span class="hljs-comment"># exit</span><span class="hljs-built_in">exit</span>xxx@bogon ~ % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<span class="hljs-comment"># 保存（创建新的镜像）</span><span class="hljs-comment"># 命令格式为`docker commit CONTAINER [REPOSITORY[:TAG]]`</span>xxx@bogon ~ % docker commit 8d0c91836292 sshd:ubuntusha256:6943898c8bac0f6968878ba7f8ce9bbcb974f43d483ceb118ae254aed1bbb4f9<span class="hljs-comment"># 查看新的镜像</span>xxx@bogon ~ % docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEsshd                ubuntu              6943898c8bac        6 seconds ago       235MBbusybox             latest              1c35c4412082        2 weeks ago         1.22MBubuntu              14.04               6e4f1fe62ff1        6 months ago        197MB<span class="hljs-comment"># 启动新的容器</span><span class="hljs-comment"># 添加22端口映射10022 -&gt; 22，10022为宿主主机的端口，22为容器的端口</span>xxx@bogon ~ % docker run -p 10022:22 -d sshd:ubuntu /run.sh982bbb0c883bb01a4b3c91dc659b1f6b34b5408369e332164ad794d302b60544xxx@bogon ~ % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                   NAMES982bbb0c883b        sshd:ubuntu         <span class="hljs-string">&quot;/run.sh&quot;</span>           4 seconds ago       Up 3 seconds        0.0.0.0:10022-&gt;22/tcp   hungry_haibt<span class="hljs-comment"># 连接之前要将本机的.ssh 目录下的id_rsa.pub内容拷贝到docker容器中的root目录下.ssh/authorized_keys中</span><span class="hljs-comment"># 连接容器(一定要指定root名，因为本地mac用户为自己的用户名)</span>xxx@bogon ~ % ssh root@192.168.0.107 -p 10022Welcome to Ubuntu 14.04 LTS (GNU/Linux 4.4.0-170-generic x86_64) * Documentation:  https://help.ubuntu.com/The programs included with the Ubuntu system are free software;the exact distribution terms <span class="hljs-keyword">for</span> each program are described <span class="hljs-keyword">in</span> theindividual files <span class="hljs-keyword">in</span> /usr/share/doc/*/copyright.Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted byapplicable law.root@982bbb0c883b:~<span class="hljs-comment">#</span></code></pre><h4 id="使用Dockerfile创建"><a href="#使用Dockerfile创建" class="headerlink" title="使用Dockerfile创建"></a>使用Dockerfile创建</h4><pre><code class="hljs bash">xxx@localhost docker % mkdir sshd_ubuntuxxx@localhost docker % <span class="hljs-built_in">cd</span> sshd_ubuntu xxx@localhost sshd_ubuntu % lsxxx@localhost sshd_ubuntu % touch Dockerfile run.shxxx@localhost sshd_ubuntu % lsDockerfilerun.sh<span class="hljs-comment"># 编写run.sh</span><span class="hljs-meta">#!/bin/bash</span>/usr/sbin/sshd -D<span class="hljs-comment"># 生成ssh密钥对</span>% ssh-keygen -t rsa% cat ~/.ssh/id_rsa.pub &gt; authorized_keys% lsDockerfileauthorized_keysrun.sh<span class="hljs-comment"># 编写Dockerfile</span><span class="hljs-comment"># 设置继承镜像</span>FROM ubuntu:14.04<span class="hljs-comment"># 提供一些作者的信息</span>MAINTAINER from www.lc-ling.com by lingchen (lingchen1316@163.com)<span class="hljs-comment"># 下面开始运行命令，此处更改ubuntu的源为国内163的源</span>RUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse&quot;</span> &gt; /etc/apt/sources.listRUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.listRUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.listRUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.listRUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.listRUN apt-get update<span class="hljs-comment"># 安装ssh服务</span>RUN apt-get install -y openssh-serverRUN mkdir -p /var/run/sshdRUN mkdir -p /root/.ssh<span class="hljs-comment"># 取消pam限制</span>RUN sed -ri <span class="hljs-string">&#x27;s/session required pam_loginuid.so/#session required pam_loginuid.so/g&#x27;</span> /etc/pam.d/sshd<span class="hljs-comment"># 复制配置文件到相应位置，并赋予脚本可执行权限</span>ADD authorized_keys /root/.ssh/authorized_keysADD run.sh /run.shRUN chmod 755 /run.sh<span class="hljs-comment"># 开放端口</span>EXPOSE 22<span class="hljs-comment"># 设置自启动命令</span>CMD [<span class="hljs-string">&quot;/run.sh&quot;</span>]<span class="hljs-comment"># 创建镜像 (有 . 号)</span>xxx@localhost sshd_ubuntu % sudo docker build -t sshd:dockerfile .<span class="hljs-comment"># 查看docker images</span>xxx@localhost sshd_ubuntu % docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEsshd                dockerfile          44638bb2f804        10 seconds ago      249MB<span class="hljs-comment"># 使用sshd:dockerfile镜像，创建容器，测试自定义镜像</span>% docker run -d -p 10122:22 sshd:dockerfile<span class="hljs-comment"># 错误一：</span>b5f645724ce1d19b85228e401bbfda008a13c39da9f9452b09754ffab4816e9fdocker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused <span class="hljs-string">&quot;exec: \&quot;/run.sh\&quot;: permission denied&quot;</span>: unknown.<span class="hljs-comment"># Dockerfile文件中没有设置run.sh的执行权限</span>RUN chmod 755 /run.sh<span class="hljs-comment"># ssh连接自定义容器</span>xxx@localhost sshd_ubuntu % ssh root@192.168.0.107 -p 10122The authenticity of host <span class="hljs-string">&#x27;[192.168.0.107]:10122 ([192.168.0.107]:10122)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">ECDSA key fingerprint is SHA256:byz56n6ggX89uz39PZnFnS40Vkn4Ry5omVoAqi4UNZI.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><span class="hljs-string">Warning: Permanently added &#x27;</span>[192.168.0.107]:10122<span class="hljs-string">&#x27; (ECDSA) to the list of known hosts.</span><span class="hljs-string">Welcome to Ubuntu 14.04 LTS (GNU/Linux 4.4.0-170-generic x86_64)</span><span class="hljs-string"></span><span class="hljs-string"> * Documentation:  https://help.ubuntu.com/</span><span class="hljs-string"></span><span class="hljs-string">The programs included with the Ubuntu system are free software;</span><span class="hljs-string">the exact distribution terms for each program are described in the</span><span class="hljs-string">individual files in /usr/share/doc/*/copyright.</span><span class="hljs-string"></span><span class="hljs-string">Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by</span><span class="hljs-string">applicable law.</span><span class="hljs-string"></span><span class="hljs-string">root@9e9b7f178cce:~# </span><span class="hljs-string"></span></code></pre><p><strong><u>ps：本文为学习记录，仅为学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>ssh</tag>
      
      <tag>os</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker之Dockfile的nginx构建</title>
    <link href="/2020/06/22/docker-dockfile-nginx/"/>
    <url>/2020/06/22/docker-dockfile-nginx/</url>
    
    <content type="html"><![CDATA[<p>Docker之Dockfile的nginx构建</p><p>Dockerfile由一行行命令语句组成，并且支持以#开头的注释行。<br>Dockerfile分为四个部分：</p><ul><li>基础镜像信息</li><li>维护者信息</li><li>镜像操作指令</li><li>容器启动时执行指令</li></ul><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>指令的一般格式是INSTRUCTION arguments</p><p>1、FROM</p><p>格式为<code>FROM &lt;image&gt;</code>或 <code>FROM &lt;image&gt;:&lt;tag&gt;</code>，指定基础镜像。</p><p>2、MAINTAINER</p><p>格式为<code>MAINTAINER &lt;name&gt;</code>，指定维护者信息。</p><p>3、RUN</p><p>格式为<code>RUN &lt;command&gt;</code> 或者 <code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>，每条RUN指令将在当前镜像基础上执行指定指令，并提交为新的镜像。</p><p>4、CMD</p><p>格式为<code>CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>使用exec执行，推荐方式。指定启动容器时的运行命令，每个Dockerfile只能有一条CMD命令。</p><p>5、EXPOSE</p><p>格式为<code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code>，告诉Docker服务端暴露的端口号，供互联系统使用。</p><p>6、ENV</p><p>格式为<code>ENV &lt;key&gt; &lt;value&gt;</code>。指定一个环境变量，会被后续RUN指令使用，并在容器运行时保持。</p><p>7、ADD</p><p>格式为<code>ADD &lt;src&gt; &lt;dest&gt;</code>，将复制指定的<code>&lt;src&gt;</code> 到容器中的<code>&lt;dest&gt;</code>，其中的<code>&lt;src&gt;</code>可以是Dockerfile所在目录的一个相对路径（文件或目录）。</p><p>8、COPY</p><p>格式为<code>COPY &lt;src&gt; &lt;dest&gt;</code>，复制本地主机的<code>&lt;src&gt;</code>为容器中的<code>&lt;dest&gt;</code>，其中的<code>&lt;src&gt;</code>可以是Dockerfile所在目录的一个相对路径。当使用本地目录时，推荐使用COPY。</p><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>编写完Dockerfile完，可以通过docker build命令来创建镜像。一般建议放置Dockerfile文件目录为空目录。</p><p>示例Dockerfile：</p><pre><code class="hljs dockerfile"><span class="hljs-number">1</span> <span class="hljs-comment"># This dockerfile uses the ubuntu image </span> <span class="hljs-number">2</span> <span class="hljs-comment"># VERSION 2 - EDITION 1</span> <span class="hljs-number">3</span> <span class="hljs-comment"># Author: lingchen</span> <span class="hljs-number">4</span> <span class="hljs-comment"># Command format: Instruction [arguments / command] ...</span> <span class="hljs-number">5</span>   <span class="hljs-number">6</span> <span class="hljs-comment"># 第一行必须指定基础镜像</span> <span class="hljs-number">7</span> <span class="hljs-keyword">FROM</span> ubuntu <span class="hljs-number">8</span>   <span class="hljs-number">9</span> <span class="hljs-comment"># 维护者信息</span><span class="hljs-number">10</span> <span class="hljs-keyword">MAINTAINER</span> lingchen docker@email.com <span class="hljs-number">11</span>  <span class="hljs-number">12</span> <span class="hljs-comment"># 镜像的操作指令</span><span class="hljs-number">13</span> <span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://archive.ubuntu.com/ubuntu/ raring main universe&quot;</span> &gt;&gt; /etc/apt/sources.list</span><span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y nginx</span><span class="hljs-number">16</span> <span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\ndaemon off;&quot;</span> &gt;&gt; /etc/nginx/nginx.conf</span><span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-comment"># 容器启动时执行指令</span><span class="hljs-number">19</span> <span class="hljs-keyword">CMD</span><span class="bash"> /usr/sbin/nginx</span></code></pre><p>运行指令：</p><p>使用当前目录的 Dockerfile 创建镜像，标签为 docker_nginx:v1。</p><pre><code class="hljs bash">% docker build -t docker_nginx:v1 .</code></pre><p><strong><u>ps：本文为学习记录，仅为学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>dockerfile</tag>
      
      <tag>nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建MVC的WebApp</title>
    <link href="/2020/06/04/net-mvc-webapp/"/>
    <url>/2020/06/04/net-mvc-webapp/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="创建MVC的WebApp"><a href="#创建MVC的WebApp" class="headerlink" title="创建MVC的WebApp"></a>创建MVC的WebApp</h2><h3 id="１、MVC新規"><a href="#１、MVC新規" class="headerlink" title="１、MVC新規"></a>１、MVC新規</h3><p><img src="/2020/06/04/net-mvc-webapp/1.png" alt="mvc-create"></p><p>OK ー＞　MVC　－＞　次へ、工程自動生成成功。<br>起動工程（F5），可能會報錯如下：</p><pre><code class="hljs html">&#x27;/&#x27; アプリケーションでサーバー エラーが発生しました。ファイルまたはアセンブリ &#x27;Newtonsoft.Json&#x27;、またはその依存関係の 1 つが読み込めませんでした。見つかったアセンブリのマニフェスト定義はアセンブリ参照に一致しません。 (HRESULT からの例外:0x80131040)  説明: 現在の Web 要求を実行中に、ハンドルされていない例外が発生しました。エラーに関する詳細および例外の発生場所については、スタック トレースを参照してください。</code></pre><p>解決案：<br>在NuGet包管理器中將Newtonsoft.Json升級即可</p><p><img src="/2020/06/04/net-mvc-webapp/2.png" alt="Nuget-management"></p><p><img src="/2020/06/04/net-mvc-webapp/3.png" alt="Newtonsoft.Json-update"></p><p>再次起動工程，MVC正常運行。如下：<br><img src="/2020/06/04/net-mvc-webapp/4.png" alt="MVC-init"></p><h3 id="２、站點風格"><a href="#２、站點風格" class="headerlink" title="２、站點風格"></a>２、站點風格</h3><p>修改ContosoUniversity\ContosoUniversity\Views\Shared_Layout.cshtml文件如下：</p><pre><code class="hljs php+HTML">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&#x2F;&gt;    &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;    &lt;title&gt;@ViewBag.Title - Contoso University&lt;&#x2F;title&gt;    @Styles.Render(&quot;~&#x2F;Content&#x2F;css&quot;)    @Scripts.Render(&quot;~&#x2F;bundles&#x2F;modernizr&quot;)&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div class&#x3D;&quot;navbar navbar-inverse navbar-fixed-top&quot;&gt;        &lt;div class&#x3D;&quot;container&quot;&gt;            &lt;div class&#x3D;&quot;navbar-header&quot;&gt;                &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;navbar-toggle&quot; data-toggle&#x3D;&quot;collapse&quot; data-target&#x3D;&quot;.navbar-collapse&quot;&gt;                    &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;                    &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;                    &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;                &lt;&#x2F;button&gt;                @Html.ActionLink(&quot;Contoso University&quot;, &quot;Index&quot;, &quot;Home&quot;, new &#123; area &#x3D; &quot;&quot; &#125;, new &#123; @class &#x3D; &quot;navbar-brand&quot; &#125;)            &lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;navbar-collapse collapse&quot;&gt;                &lt;ul class&#x3D;&quot;nav navbar-nav&quot;&gt;                    &lt;li&gt;@Html.ActionLink(&quot;Home&quot;, &quot;Index&quot;, &quot;Home&quot;)&lt;&#x2F;li&gt;                    &lt;li&gt;@Html.ActionLink(&quot;About&quot;, &quot;About&quot;, &quot;Home&quot;)&lt;&#x2F;li&gt;                    &lt;li&gt;@Html.ActionLink(&quot;Students&quot;, &quot;Index&quot;, &quot;Student&quot;)&lt;&#x2F;li&gt;                    &lt;li&gt;@Html.ActionLink(&quot;Courses&quot;, &quot;Index&quot;, &quot;Course&quot;)&lt;&#x2F;li&gt;                    &lt;li&gt;@Html.ActionLink(&quot;Instructors&quot;, &quot;Index&quot;, &quot;Instructor&quot;)&lt;&#x2F;li&gt;                    &lt;li&gt;@Html.ActionLink(&quot;Departments&quot;, &quot;Index&quot;, &quot;Department&quot;)&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;container body-content&quot;&gt;        @RenderBody()        &lt;hr &#x2F;&gt;        &lt;footer&gt;            &lt;p&gt;&amp;copy; @DateTime.Now.Year - Contoso University&lt;&#x2F;p&gt;        &lt;&#x2F;footer&gt;    &lt;&#x2F;div&gt;    @Scripts.Render(&quot;~&#x2F;bundles&#x2F;jquery&quot;)    @Scripts.Render(&quot;~&#x2F;bundles&#x2F;bootstrap&quot;)    @RenderSection(&quot;scripts&quot;, required: false)&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>修改ContosoUniversity\ContosoUniversity\Views\Home\Index.cshtml</p><pre><code class="hljs php+HTML">@&#123;    ViewBag.Title &#x3D; &quot;Home Page&quot;;&#125;&lt;div class&#x3D;&quot;jumbotron&quot;&gt;    &lt;h1&gt;Contoso University&lt;&#x2F;h1&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;row&quot;&gt;    &lt;div class&#x3D;&quot;col-md-4&quot;&gt;        &lt;h2&gt;Welcome to Contoso University&lt;&#x2F;h2&gt;        &lt;p&gt;            Contoso University is a sample application that            demonstrates how to use Entity Framework 6 in an            ASP.NET MVC 5 web application.        &lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;col-md-4&quot;&gt;        &lt;h2&gt;Build it from scratch&lt;&#x2F;h2&gt;        &lt;p&gt;            You can build the application by following the steps in the tutorial series on the ASP.NET site.        &lt;&#x2F;p&gt;        &lt;p&gt;&lt;a class&#x3D;&quot;btn btn-default&quot; href&#x3D;&quot;http:&#x2F;&#x2F;www.asp.net&#x2F;mvc&#x2F;tutorials&#x2F;getting-started-withef-using-mvc&#x2F;&quot;&gt;See the tutorial &amp;raquo;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;col-md-4&quot;&gt;        &lt;h2&gt;Download it&lt;&#x2F;h2&gt;        &lt;p&gt;You can download the completed project.&lt;&#x2F;p&gt;        &lt;p&gt;&lt;a class&#x3D;&quot;btn btn-default&quot; href&#x3D;&quot;https:&#x2F;&#x2F;webpifeed.blob.core.windows.net&#x2F;webpifeed&#x2F;Partners&#x2F;ASP.NET%20MVC%20Application%20Using%20Entity%20Framework%20Code%20First.zip&quot;&gt;Download &amp;raquo;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</code></pre><p>效果如下：<br><img src="/2020/06/04/net-mvc-webapp/5.png" alt="contoso-nav"></p><h3 id="３、安裝Entity-Framework-6"><a href="#３、安裝Entity-Framework-6" class="headerlink" title="３、安裝Entity Framework 6"></a>３、安裝Entity Framework 6</h3><p>ツール　－＞　NuGetパッケージマネージャー　－＞　パッケージマネージャーコンソール<br>‘Install-Package EntityFramework‘</p><pre><code class="hljs bash">PM&gt; Install-Package EntityFramework<span class="hljs-string">&#x27;.NETFramework,Version=v4.6.1&#x27;</span> を対象とするプロジェクト <span class="hljs-string">&#x27;ContosoUniversity&#x27;</span> に関して、パッケージ <span class="hljs-string">&#x27;EntityFramework.6.4.4&#x27;</span> の依存関係情報の収集を試行しています依存関係情報の収集に 34.99 ms かかりましたDependencyBehavior <span class="hljs-string">&#x27;Lowest&#x27;</span> でパッケージ <span class="hljs-string">&#x27;EntityFramework.6.4.4&#x27;</span> の依存関係の解決を試行しています依存関係情報の解決に 0 ms かかりましたパッケージ <span class="hljs-string">&#x27;EntityFramework.6.4.4&#x27;</span> をインストールするアクションを解決していますパッケージ <span class="hljs-string">&#x27;EntityFramework.6.4.4&#x27;</span> をインストールするアクションが解決されました<span class="hljs-string">&#x27;nuget.org&#x27;</span> からパッケージ <span class="hljs-string">&#x27;EntityFramework 6.4.4&#x27;</span> を取得しています。パッケージ <span class="hljs-string">&#x27;EntityFramework.6.4.4&#x27;</span> をフォルダー <span class="hljs-string">&#x27;D:\research\test\ContosoUniversity\packages&#x27;</span> に追加していますパッケージ <span class="hljs-string">&#x27;EntityFramework.6.4.4&#x27;</span> をフォルダー <span class="hljs-string">&#x27;D:\research\test\ContosoUniversity\packages&#x27;</span> に追加しましたパッケージ <span class="hljs-string">&#x27;EntityFramework.6.4.4&#x27;</span> を <span class="hljs-string">&#x27;packages.config&#x27;</span> に追加しましたスクリプト ファイル <span class="hljs-string">&#x27;D:\research\test\ContosoUniversity\packages\EntityFramework.6.4.4\tools\init.ps1&#x27;</span> を実行しています<span class="hljs-string">&#x27;EntityFramework 6.4.4&#x27;</span> が ContosoUniversity に正常にインストールされましたNuGet の操作の実行に 2.02 sec かかりました経過した時間: 00:00:04.5800281</code></pre><h3 id="４、建立數據模型"><a href="#４、建立數據模型" class="headerlink" title="４、建立數據模型"></a>４、建立數據模型</h3><p>Course &lt;-&gt; Enrollment &lt;-&gt; Student<br>Course to Enrollment       ＜ー＞    One-to-many<br>Student to Enrollment      ＜ー＞    One-to-many</p><p>建立Model（Student.cs）<br><img src="/2020/06/04/net-mvc-webapp/6.png" alt="Model-create">Students内容：</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<span class="hljs-keyword">using</span> System.Collections.Generic;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.Models</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>    &#123;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> ID &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Lastname &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> FirstMidName &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> DateTime EnrollmentDate &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> ICollection&lt;Enrollment&gt; Enrollments &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;    &#125;&#125;</code></pre><p>ID：主鍵<br>virtual：支持嬾加載（lazy loading）<br>ICollection  ： 列表集合（Student和Enrollment是一對多的關係）</p><p>Enrollment内容：</p><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.Models</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> Grade    &#123;        A, B, C, D, F    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Enrollment</span>    &#123;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> EnrollmentID &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> CourseID &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> StudentID &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> Grade? Grade &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> Course Course &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> Student Student &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;    &#125;&#125;</code></pre><p>EnrollmentID：主鍵<br>Grade：學分字段，枚舉型，可為空<br>StudentID：外鍵ID，關連Student<br>CourseID：外鍵ID，關連Course</p><p>Course内容：</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections.Generic;<span class="hljs-keyword">using</span> System.ComponentModel.DataAnnotations.Schema;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.Models</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Course</span>    &#123;        [<span class="hljs-meta">DatabaseGenerated(DatabaseGeneratedOption.None)</span>]        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> CourseID &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Title &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Credits &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> ICollection&lt;Enrollment&gt; Enrollments &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;    &#125;&#125;</code></pre><p>DatabaseGenerated：自己生成主鍵<br>Enrollments：Course和Enrollment是一對多的關係</p><h3 id="５、創建數據庫上下文"><a href="#５、創建數據庫上下文" class="headerlink" title="５、創建數據庫上下文"></a>５、創建數據庫上下文</h3><p>an entity set typically corresponds to a database table, and an entity corresponds to a row in the table.</p><p>Solution Explorer　ー＞　Add　－＞　New Folder  ー＞    DAL (for Data Access Layer)<br>SchoolContext.cs</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> ContosoUniversity.Models;<span class="hljs-keyword">using</span> System.Data.Entity;<span class="hljs-keyword">using</span> System.Data.Entity.ModelConfiguration.Conventions;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.DAL</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SchoolContext</span> : <span class="hljs-title">DbContext</span>    &#123;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SchoolContext</span>(<span class="hljs-params"></span>) : <span class="hljs-title">base</span>(<span class="hljs-params"><span class="hljs-string">&quot;SchoolContext&quot;</span></span>)</span><span class="hljs-function"></span>        &#123;        &#125;        <span class="hljs-keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> DbSet&lt;Enrollment&gt; Enrollments &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> DbSet&lt;Course&gt; Courses &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnModelCreating</span>(<span class="hljs-params">DbModelBuilder modelBuilder</span>)</span><span class="hljs-function"></span>        &#123;            modelBuilder.Conventions.Remove&lt;PluralizingTableNameConvention&gt;();        &#125;    &#125;&#125;</code></pre><p>modelBuilder.Conventions.Remove<PluralizingTableNameConvention>()：<br>聲明將數據表生成為單數形式：Student、Enrollment、Course 而不是Students、Enrollments、Courses</PluralizingTableNameConvention></p><p>數據庫啓動文件（初始化表）</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> ContosoUniversity.Models;<span class="hljs-keyword">using</span> System;<span class="hljs-keyword">using</span> System.Collections.Generic;<span class="hljs-keyword">using</span> System.Data.Entity;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.DAL</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SchoolInitializer</span> : <span class="hljs-title">DropCreateDatabaseIfModelChanges</span>&lt;<span class="hljs-title">SchoolContext</span>&gt;    &#123;        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Seed</span>(<span class="hljs-params">SchoolContext context</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">var</span> students = <span class="hljs-keyword">new</span> List&lt;Student&gt;            &#123;                <span class="hljs-keyword">new</span> Student&#123;FirstMidName=<span class="hljs-string">&quot;Carson&quot;</span>, LastName=<span class="hljs-string">&quot;Alexander&quot;</span>, EnrollmentDate=DateTime.Parse(<span class="hljs-string">&quot;2005-09-01&quot;</span>)&#125;,                <span class="hljs-keyword">new</span> Student&#123;FirstMidName=<span class="hljs-string">&quot;Meredith&quot;</span>,LastName=<span class="hljs-string">&quot;Alonso&quot;</span>,EnrollmentDate=DateTime.Parse(<span class="hljs-string">&quot;2002-09-01&quot;</span>)&#125;,                <span class="hljs-keyword">new</span> Student&#123;FirstMidName=<span class="hljs-string">&quot;Arturo&quot;</span>,LastName=<span class="hljs-string">&quot;Anand&quot;</span>,EnrollmentDate=DateTime.Parse(<span class="hljs-string">&quot;2003-09-01&quot;</span>)&#125;,                <span class="hljs-keyword">new</span> Student&#123;FirstMidName=<span class="hljs-string">&quot;Gytis&quot;</span>,LastName=<span class="hljs-string">&quot;Barzdukas&quot;</span>,EnrollmentDate=DateTime.Parse(<span class="hljs-string">&quot;2002-09-01&quot;</span>)&#125;,                <span class="hljs-keyword">new</span> Student&#123;FirstMidName=<span class="hljs-string">&quot;Yan&quot;</span>,LastName=<span class="hljs-string">&quot;Li&quot;</span>,EnrollmentDate=DateTime.Parse(<span class="hljs-string">&quot;2002-09-01&quot;</span>)&#125;,                <span class="hljs-keyword">new</span> Student&#123;FirstMidName=<span class="hljs-string">&quot;Peggy&quot;</span>,LastName=<span class="hljs-string">&quot;Justice&quot;</span>,EnrollmentDate=DateTime.Parse(<span class="hljs-string">&quot;2001-09-01&quot;</span>)&#125;,                <span class="hljs-keyword">new</span> Student&#123;FirstMidName=<span class="hljs-string">&quot;Laura&quot;</span>,LastName=<span class="hljs-string">&quot;Norman&quot;</span>,EnrollmentDate=DateTime.Parse(<span class="hljs-string">&quot;2003-09-01&quot;</span>)&#125;,                <span class="hljs-keyword">new</span> Student&#123;FirstMidName=<span class="hljs-string">&quot;Nino&quot;</span>,LastName=<span class="hljs-string">&quot;Olivetto&quot;</span>,EnrollmentDate=DateTime.Parse(<span class="hljs-string">&quot;2005-09-01&quot;</span>)&#125;            &#125;;            students.ForEach(s =&gt; context.Students.Add(s));            context.SaveChanges();            <span class="hljs-keyword">var</span> courses = <span class="hljs-keyword">new</span> List&lt;Course&gt;            &#123;                <span class="hljs-keyword">new</span> Course&#123;CourseID=<span class="hljs-number">1050</span>,Title=<span class="hljs-string">&quot;Chemistry&quot;</span>,Credits=<span class="hljs-number">3</span>,&#125;,                <span class="hljs-keyword">new</span> Course&#123;CourseID=<span class="hljs-number">4022</span>,Title=<span class="hljs-string">&quot;Microeconomics&quot;</span>,Credits=<span class="hljs-number">3</span>,&#125;,                <span class="hljs-keyword">new</span> Course&#123;CourseID=<span class="hljs-number">4041</span>,Title=<span class="hljs-string">&quot;Macroeconomics&quot;</span>,Credits=<span class="hljs-number">3</span>,&#125;,                <span class="hljs-keyword">new</span> Course&#123;CourseID=<span class="hljs-number">1045</span>,Title=<span class="hljs-string">&quot;Calculus&quot;</span>,Credits=<span class="hljs-number">4</span>,&#125;,                <span class="hljs-keyword">new</span> Course&#123;CourseID=<span class="hljs-number">3141</span>,Title=<span class="hljs-string">&quot;Trigonometry&quot;</span>,Credits=<span class="hljs-number">4</span>,&#125;,                <span class="hljs-keyword">new</span> Course&#123;CourseID=<span class="hljs-number">2021</span>,Title=<span class="hljs-string">&quot;Composition&quot;</span>,Credits=<span class="hljs-number">3</span>,&#125;,                <span class="hljs-keyword">new</span> Course&#123;CourseID=<span class="hljs-number">2042</span>,Title=<span class="hljs-string">&quot;Literature&quot;</span>,Credits=<span class="hljs-number">4</span>,&#125;            &#125;;            courses.ForEach(c =&gt; context.Courses.Add(c));            context.SaveChanges();            <span class="hljs-keyword">var</span> enrollments = <span class="hljs-keyword">new</span> List&lt;Enrollment&gt;            &#123;                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">1</span>,CourseID=<span class="hljs-number">1050</span>,Grade=Grade.A&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">1</span>,CourseID=<span class="hljs-number">4022</span>,Grade=Grade.C&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">1</span>,CourseID=<span class="hljs-number">4041</span>,Grade=Grade.B&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">2</span>,CourseID=<span class="hljs-number">1045</span>,Grade=Grade.B&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">2</span>,CourseID=<span class="hljs-number">3141</span>,Grade=Grade.F&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">2</span>,CourseID=<span class="hljs-number">2021</span>,Grade=Grade.F&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">3</span>,CourseID=<span class="hljs-number">1050</span>&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">4</span>,CourseID=<span class="hljs-number">1050</span>,&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">4</span>,CourseID=<span class="hljs-number">4022</span>,Grade=Grade.F&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">5</span>,CourseID=<span class="hljs-number">4041</span>,Grade=Grade.C&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">6</span>,CourseID=<span class="hljs-number">1045</span>&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">7</span>,CourseID=<span class="hljs-number">3141</span>,Grade=Grade.A&#125;            &#125;;            enrollments.ForEach(e =&gt; context.Enrollments.Add(e));            context.SaveChanges();        &#125;    &#125;&#125;</code></pre><p>DropCreateDatabaseIfModelChanges：表示只有儅Model類發生變化（如增加字段），DB才會重新創建來相應改變</p><p>web.config配置如下：</p><pre><code class="hljs php+HTML">&lt;entityFramework&gt;  &lt;contexts&gt;    &lt;context type&#x3D;&quot;ContosoUniversity.DAL.SchoolContext, ContosoUniversity&quot;&gt;      &lt;databaseInitializer type&#x3D;&quot;ContosoUniversity.DAL.SchoolInitializer, ContosoUniversity&quot; &#x2F;&gt;    &lt;&#x2F;context&gt;  &lt;&#x2F;contexts&gt;  &lt;defaultConnectionFactory type&#x3D;&quot;System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework&quot;&gt;    &lt;parameters&gt;      &lt;parameter value&#x3D;&quot;v11.0&quot; &#x2F;&gt;    &lt;&#x2F;parameters&gt;  &lt;&#x2F;defaultConnectionFactory&gt;  &lt;providers&gt;    &lt;provider invariantName&#x3D;&quot;System.Data.SqlClient&quot; type&#x3D;&quot;System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer&quot; &#x2F;&gt;  &lt;&#x2F;providers&gt;&lt;&#x2F;entityFramework&gt;</code></pre><h3 id="６、使用LocalDB"><a href="#６、使用LocalDB" class="headerlink" title="６、使用LocalDB"></a>６、使用LocalDB</h3><p>LocalDB是一種輕量級的SQL Server數據庫，適合開發環境使用。强烈不建議生產環境使用。默認與VS一同安裝好了<br>web.config配置如下：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">connectionStrings</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">add</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SchoolContext&quot;</span> <span class="hljs-attr">connectionString</span>=<span class="hljs-string">&quot;Data Source=(LocalDb)\MSSQLLocalDB;Initial Catalog=ContosoUniversity1;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\ContosoUniversity1.mdf&quot;</span> <span class="hljs-attr">providerName</span>=<span class="hljs-string">&quot;System.Data.SqlClient&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">connectionStrings</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">appSettings</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">add</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;webpages:Version&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3.0.0.0&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">add</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;webpages:Enabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">add</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ClientValidationEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">add</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;UnobtrusiveJavaScriptEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">appSettings</span>&gt;</span></code></pre><h3 id="７、創建Controller和View"><a href="#７、創建Controller和View" class="headerlink" title="７、創建Controller和View"></a>７、創建Controller和View</h3><p><img src="/2020/06/04/net-mvc-webapp/7.png" alt="controller-add"></p><p><img src="/2020/06/04/net-mvc-webapp/8.png" alt="controller-select"></p><p>選擇項設置：</p><p><img src="/2020/06/04/net-mvc-webapp/9.png" alt="controller-model-relatived"></p><p>生成StudentController和一些view文件：</p><p><img src="/2020/06/04/net-mvc-webapp/10.png" alt="controller-student"></p><p>訪問Student頁面如下：</p><p><img src="/2020/06/04/net-mvc-webapp/11.png" alt="student-web"></p><h3 id="８、定制基本的CRUD功能"><a href="#８、定制基本的CRUD功能" class="headerlink" title="８、定制基本的CRUD功能"></a>８、定制基本的CRUD功能</h3><p>修改學生的詳細頁面：</p><pre><code class="hljs php+HTML">@model ContosoUniversity.Models.Student@&#123;    ViewBag.Title &#x3D; &quot;Details&quot;;&#125;&lt;h2&gt;Details&lt;&#x2F;h2&gt;&lt;div&gt;    &lt;h4&gt;Student&lt;&#x2F;h4&gt;    &lt;hr &#x2F;&gt;    &lt;dl class&#x3D;&quot;dl-horizontal&quot;&gt;        &lt;dt&gt;            @Html.DisplayNameFor(model &#x3D;&gt; model.LastName)        &lt;&#x2F;dt&gt;        &lt;dd&gt;            @Html.DisplayFor(model &#x3D;&gt; model.LastName)        &lt;&#x2F;dd&gt;        &lt;dt&gt;            @Html.DisplayNameFor(model &#x3D;&gt; model.FirstMidName)        &lt;&#x2F;dt&gt;        &lt;dd&gt;            @Html.DisplayFor(model &#x3D;&gt; model.FirstMidName)        &lt;&#x2F;dd&gt;        &lt;dt&gt;            @Html.DisplayNameFor(model &#x3D;&gt; model.EnrollmentDate)        &lt;&#x2F;dt&gt;        &lt;dd&gt;            @Html.DisplayFor(model &#x3D;&gt; model.EnrollmentDate)        &lt;&#x2F;dd&gt;        &lt;dt&gt;            @Html.DisplayNameFor(model &#x3D;&gt; model.Enrollments)        &lt;&#x2F;dt&gt;        &lt;dd&gt;            &lt;table class&#x3D;&quot;table&quot;&gt;                &lt;tr&gt;                    &lt;th&gt;Course Title&lt;&#x2F;th&gt;                    &lt;th&gt;Grade&lt;&#x2F;th&gt;                &lt;&#x2F;tr&gt;                @foreach (var item in Model.Enrollments)                &#123;                    &lt;tr&gt;                        &lt;td&gt;                            @Html.DisplayFor(modelItem &#x3D;&gt; item.Course.Title)                        &lt;&#x2F;td&gt;                        &lt;td&gt;                            @Html.DisplayFor(modelItem &#x3D;&gt; item.Grade)                        &lt;&#x2F;td&gt;                    &lt;&#x2F;tr&gt;                &#125;            &lt;&#x2F;table&gt;        &lt;&#x2F;dd&gt;    &lt;&#x2F;dl&gt;&lt;&#x2F;div&gt;&lt;p&gt;    @Html.ActionLink(&quot;Edit&quot;, &quot;Edit&quot;, new &#123; id &#x3D; Model.ID &#125;) |    @Html.ActionLink(&quot;Back to List&quot;, &quot;Index&quot;)&lt;&#x2F;p&gt;</code></pre><p>通過嬾加載的方式訪問了Student中的Enrollments信息。</p><p><img src="/2020/06/04/net-mvc-webapp/12.png" alt="enrollments-details"></p><p>修改StudentController中的Create()方法</p><pre><code class="hljs csharp"><span class="hljs-comment">// POST: Student/Create</span>      <span class="hljs-comment">// 過多ポスティング攻撃を防止するには、バインド先とする特定のプロパティを有効にしてください。</span>      <span class="hljs-comment">// 詳細については、https://go.microsoft.com/fwlink/?LinkId=317598 を参照してください。</span>      [<span class="hljs-meta">HttpPost</span>]      [<span class="hljs-meta">ValidateAntiForgeryToken</span>]      <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">Create</span>(<span class="hljs-params">[Bind(Include = <span class="hljs-string">&quot;LastName,FirstMidName,EnrollmentDate&quot;</span></span>)] Student student)</span><span class="hljs-function"></span>      &#123;          <span class="hljs-keyword">try</span>          &#123;              <span class="hljs-keyword">if</span> (ModelState.IsValid)              &#123;                  db.Students.Add(student);                  db.SaveChanges();                  <span class="hljs-keyword">return</span> RedirectToAction(<span class="hljs-string">&quot;Index&quot;</span>);              &#125;          &#125;          catch (DataException <span class="hljs-comment">/* e */</span>)          &#123;              ModelState.AddModelError(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;Unable to save changes. Try again, and if the problem persists see your system administrator.&quot;</span>);          &#125;          <span class="hljs-keyword">return</span> View(student);      &#125;</code></pre><p>去掉Bind-Include中的ID，加了Try-catch捕捉DataException</p><p>修改編輯方法，防止黑客overposting。</p><pre><code class="hljs csharp"><span class="hljs-comment">// GET: Student/Edit/5</span>      <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">Edit</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>? id</span>)</span><span class="hljs-function"></span>      &#123;          <span class="hljs-keyword">if</span> (id == <span class="hljs-literal">null</span>)          &#123;              <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HttpStatusCodeResult(HttpStatusCode.BadRequest);          &#125;          Student student = db.Students.Find(id);          <span class="hljs-keyword">if</span> (student == <span class="hljs-literal">null</span>)          &#123;              <span class="hljs-keyword">return</span> HttpNotFound();          &#125;          <span class="hljs-keyword">return</span> View(student);      &#125;[<span class="hljs-meta">HttpPost, ActionName(<span class="hljs-meta-string">&quot;Edit&quot;</span>)</span>]      [<span class="hljs-meta">ValidateAntiForgeryToken</span>]      <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">EditPost</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>? id</span>)</span><span class="hljs-function"></span>      &#123;          <span class="hljs-keyword">if</span> (id == <span class="hljs-literal">null</span>)          &#123;              <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HttpStatusCodeResult(HttpStatusCode.BadRequest);          &#125;          <span class="hljs-keyword">var</span> studentToUpdate = db.Students.Find(id);          <span class="hljs-comment">// whitelisted in the TryUpdateModel parameters</span>          <span class="hljs-keyword">if</span> (TryUpdateModel(studentToUpdate, <span class="hljs-string">&quot;&quot;</span>,                  <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[] &#123; <span class="hljs-string">&quot;LastName&quot;</span>, <span class="hljs-string">&quot;FirstMidName&quot;</span>, <span class="hljs-string">&quot;EnrollmentDate&quot;</span> &#125;))          &#123;              <span class="hljs-keyword">try</span>              &#123;                  db.SaveChanges();                  <span class="hljs-keyword">return</span> RedirectToAction(<span class="hljs-string">&quot;Index&quot;</span>);              &#125;              catch(DataException <span class="hljs-comment">/* e */</span>)              &#123;                  ModelState.AddModelError(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;Unable to save changes. Try again, and if the problem persists, see your system administrator.&quot;</span>);              &#125;          &#125;          <span class="hljs-keyword">return</span> View(studentToUpdate);      &#125;</code></pre><p>ActionName(“Edit”)：指定編輯方法名（是Edit而不是EditPost）<br>TryUpdateModel：設置要更新操作的Bean屬性白名單（可接受數據）或者黑名單（不可接受數據）</p><p>修改Delete方法：</p><pre><code class="hljs csharp"><span class="hljs-comment">// GET: Student/Delete/5</span>      <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">Delete</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>? id, <span class="hljs-built_in">bool</span>? saveChangesError=<span class="hljs-literal">false</span></span>)</span><span class="hljs-function"></span>      &#123;          <span class="hljs-keyword">if</span> (id == <span class="hljs-literal">null</span>)          &#123;              <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HttpStatusCodeResult(HttpStatusCode.BadRequest);          &#125;          <span class="hljs-comment">// エラーメッセージを表示</span>          <span class="hljs-keyword">if</span> (saveChangesError.GetValueOrDefault())          &#123;              ViewBag.ErrorMessage = <span class="hljs-string">&quot;Delete failed. Try again, and if the problem persists see your system administrator.&quot;</span>;          &#125;          Student student = db.Students.Find(id);          <span class="hljs-keyword">if</span> (student == <span class="hljs-literal">null</span>)          &#123;              <span class="hljs-keyword">return</span> HttpNotFound();          &#125;          <span class="hljs-keyword">return</span> View(student);      &#125;      <span class="hljs-comment">// POST: Student/Delete/5</span>      [<span class="hljs-meta">HttpPost, ActionName(<span class="hljs-meta-string">&quot;Delete&quot;</span>)</span>]      [<span class="hljs-meta">ValidateAntiForgeryToken</span>]      <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">DeleteConfirmed</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> id</span>)</span><span class="hljs-function"></span>      &#123;          <span class="hljs-keyword">try</span>          &#123;              <span class="hljs-comment">// 正常の場合：検索　ー＞　削除</span>              <span class="hljs-comment">//Student student = db.Students.Find(id);</span>              <span class="hljs-comment">//db.Students.Remove(student);</span>              <span class="hljs-comment">// Improving performance in a high-volume application is a priority</span>              Student studentToDelete = <span class="hljs-keyword">new</span> Student &#123; ID = id &#125;;              db.Entry(studentToDelete).State = EntityState.Deleted;              db.SaveChanges();          &#125;          catch(Exception <span class="hljs-comment">/* e */</span>)          &#123;              <span class="hljs-comment">// Log the error message.</span>              <span class="hljs-keyword">return</span> RedirectToAction(<span class="hljs-string">&quot;Delete&quot;</span>, <span class="hljs-keyword">new</span> &#123; id = id, saveChangesError = <span class="hljs-literal">true</span> &#125;);          &#125;          <span class="hljs-keyword">return</span> RedirectToAction(<span class="hljs-string">&quot;Index&quot;</span>);      &#125;</code></pre><p>Delete.cshtml：</p><pre><code class="hljs php+HTML">@model ContosoUniversity.Models.Student@&#123;    ViewBag.Title &#x3D; &quot;Delete&quot;;&#125;&lt;h2&gt;Delete&lt;&#x2F;h2&gt;@*メッセージ表示*@&lt;p class&#x3D;&quot;error&quot;&gt;@ViewBag.ErrorMessage&lt;&#x2F;p&gt;&lt;h3&gt;Are you sure you want to delete this?&lt;&#x2F;h3&gt;&lt;div&gt;    &lt;h4&gt;Student&lt;&#x2F;h4&gt;    &lt;hr &#x2F;&gt;    &lt;dl class&#x3D;&quot;dl-horizontal&quot;&gt;        &lt;dt&gt;            @Html.DisplayNameFor(model &#x3D;&gt; model.LastName)        &lt;&#x2F;dt&gt;        &lt;dd&gt;            @Html.DisplayFor(model &#x3D;&gt; model.LastName)        &lt;&#x2F;dd&gt;        &lt;dt&gt;            @Html.DisplayNameFor(model &#x3D;&gt; model.FirstMidName)        &lt;&#x2F;dt&gt;        &lt;dd&gt;            @Html.DisplayFor(model &#x3D;&gt; model.FirstMidName)        &lt;&#x2F;dd&gt;        &lt;dt&gt;            @Html.DisplayNameFor(model &#x3D;&gt; model.EnrollmentDate)        &lt;&#x2F;dt&gt;        &lt;dd&gt;            @Html.DisplayFor(model &#x3D;&gt; model.EnrollmentDate)        &lt;&#x2F;dd&gt;    &lt;&#x2F;dl&gt;    @using (Html.BeginForm()) &#123;        @Html.AntiForgeryToken()        &lt;div class&#x3D;&quot;form-actions no-color&quot;&gt;            &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Delete&quot; class&#x3D;&quot;btn btn-default&quot; &#x2F;&gt; |            @Html.ActionLink(&quot;Back to List&quot;, &quot;Index&quot;)        &lt;&#x2F;div&gt;    &#125;&lt;&#x2F;div&gt;</code></pre><h3 id="９、增加排序、過濾和分頁"><a href="#９、增加排序、過濾和分頁" class="headerlink" title="９、增加排序、過濾和分頁"></a>９、增加排序、過濾和分頁</h3><p>排序：修改列表Index（）方法，增加排序字段sortOrder</p><pre><code class="hljs csharp"><span class="hljs-comment">// GET: Student</span>     <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">Index</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> sortOrder</span>)</span><span class="hljs-function"></span>     &#123;         <span class="hljs-comment">// Sort function added</span>         ViewBag.NameSortParm = String.IsNullOrEmpty(sortOrder) ? <span class="hljs-string">&quot;name_desc&quot;</span> : <span class="hljs-string">&quot;&quot;</span>;         ViewBag.DateSortParm = sortOrder == <span class="hljs-string">&quot;Date&quot;</span> ? <span class="hljs-string">&quot;date_desc&quot;</span> : <span class="hljs-string">&quot;Date&quot;</span>;         <span class="hljs-keyword">var</span> students = <span class="hljs-keyword">from</span> s <span class="hljs-keyword">in</span> db.Students                        <span class="hljs-keyword">select</span> s;         <span class="hljs-keyword">switch</span> (sortOrder)         &#123;             <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;name_desc&quot;</span>:                 students = students.OrderByDescending(s =&gt; s.LastName);                 <span class="hljs-keyword">break</span>;             <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Date&quot;</span>:                 students = students.OrderBy(s =&gt; s.EnrollmentDate);                 <span class="hljs-keyword">break</span>;             <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;date_desc&quot;</span>:                 students = students.OrderByDescending(s =&gt; s.EnrollmentDate);                 <span class="hljs-keyword">break</span>;             <span class="hljs-literal">default</span>:                 students = students.OrderBy(s =&gt; s.LastName);                 <span class="hljs-keyword">break</span>;         &#125;         <span class="hljs-comment">// ToList()を実行すると、SQLを調べて、データを取り</span>         <span class="hljs-keyword">return</span> View(students.ToList());     &#125;</code></pre><p>Index.cshtml：</p><pre><code class="hljs html">@model IEnumerable<span class="hljs-tag">&lt;<span class="hljs-name">ContosoUniversity.Models.Student</span>&gt;</span>@&#123;    ViewBag.Title = &quot;Index&quot;;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Index<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>    @Html.ActionLink(&quot;Create New&quot;, &quot;Create&quot;)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>            @*@Html.DisplayNameFor(model =&gt; model.LastName)*@            @Html.ActionLink(&quot;Last Name&quot;, &quot;Index&quot;, new &#123; sortOrder = ViewBag.NameSortParm &#125;)        <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>            @Html.DisplayNameFor(model =&gt; model.FirstMidName)        <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>            @*@Html.DisplayNameFor(model =&gt; model.EnrollmentDate)*@            @Html.ActionLink(&quot;Enrollment Date&quot;, &quot;Index&quot;, new &#123; sortOrder = ViewBag.DateSortParm &#125;)        <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>@foreach (var item in Model) &#123;    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            @Html.DisplayFor(modelItem =&gt; item.LastName)        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            @Html.DisplayFor(modelItem =&gt; item.FirstMidName)        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            @Html.DisplayFor(modelItem =&gt; item.EnrollmentDate)        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            @Html.ActionLink(&quot;Edit&quot;, &quot;Edit&quot;, new &#123; id=item.ID &#125;) |            @Html.ActionLink(&quot;Details&quot;, &quot;Details&quot;, new &#123; id=item.ID &#125;) |            @Html.ActionLink(&quot;Delete&quot;, &quot;Delete&quot;, new &#123; id=item.ID &#125;)        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><p>過濾（檢索）功能：<br>修改修改列表Index（）方法，增加檢索字段searchString</p><pre><code class="hljs csharp"><span class="hljs-comment">// GET: Student</span>      <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">Index</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> sortOrder, <span class="hljs-built_in">string</span> searchString</span>)</span><span class="hljs-function"></span>      &#123;          <span class="hljs-comment">// Sort function added</span>          ViewBag.NameSortParm = String.IsNullOrEmpty(sortOrder) ? <span class="hljs-string">&quot;name_desc&quot;</span> : <span class="hljs-string">&quot;&quot;</span>;          ViewBag.DateSortParm = sortOrder == <span class="hljs-string">&quot;Date&quot;</span> ? <span class="hljs-string">&quot;date_desc&quot;</span> : <span class="hljs-string">&quot;Date&quot;</span>;          <span class="hljs-keyword">var</span> students = <span class="hljs-keyword">from</span> s <span class="hljs-keyword">in</span> db.Students                         <span class="hljs-keyword">select</span> s;          <span class="hljs-comment">// 名フィールドを検索できる</span>          <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrEmpty(searchString))          &#123;              students = students.Where(s =&gt; s.LastName.Contains(searchString)                          || s.FirstMidName.Contains(searchString));          &#125;          <span class="hljs-keyword">switch</span> (sortOrder)          &#123;              <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;name_desc&quot;</span>:                  students = students.OrderByDescending(s =&gt; s.LastName);                  <span class="hljs-keyword">break</span>;              <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Date&quot;</span>:                  students = students.OrderBy(s =&gt; s.EnrollmentDate);                  <span class="hljs-keyword">break</span>;              <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;date_desc&quot;</span>:                  students = students.OrderByDescending(s =&gt; s.EnrollmentDate);                  <span class="hljs-keyword">break</span>;              <span class="hljs-literal">default</span>:                  students = students.OrderBy(s =&gt; s.LastName);                  <span class="hljs-keyword">break</span>;          &#125;          <span class="hljs-keyword">return</span> View(students.ToList());      &#125;</code></pre><p>Index.cshtml：</p><pre><code class="hljs html">@model IEnumerable<span class="hljs-tag">&lt;<span class="hljs-name">ContosoUniversity.Models.Student</span>&gt;</span>@&#123;    ViewBag.Title = &quot;Index&quot;;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Index<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>    @Html.ActionLink(&quot;Create New&quot;, &quot;Create&quot;)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>@*検索項設定*@@using (Html.BeginForm())&#123;    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>        Find by name: @Html.TextBox(&quot;searchString&quot;)        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Search&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>            @*@Html.DisplayNameFor(model =&gt; model.LastName)*@            @Html.ActionLink(&quot;Last Name&quot;, &quot;Index&quot;, new &#123; sortOrder = ViewBag.NameSortParm &#125;)        <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>            @Html.DisplayNameFor(model =&gt; model.FirstMidName)        <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>            @*@Html.DisplayNameFor(model =&gt; model.EnrollmentDate)*@            @Html.ActionLink(&quot;Enrollment Date&quot;, &quot;Index&quot;, new &#123; sortOrder = ViewBag.DateSortParm &#125;)        <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>@foreach (var item in Model) &#123;    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            @Html.DisplayFor(modelItem =&gt; item.LastName)        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            @Html.DisplayFor(modelItem =&gt; item.FirstMidName)        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            @Html.DisplayFor(modelItem =&gt; item.EnrollmentDate)        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            @Html.ActionLink(&quot;Edit&quot;, &quot;Edit&quot;, new &#123; id=item.ID &#125;) |            @Html.ActionLink(&quot;Details&quot;, &quot;Details&quot;, new &#123; id=item.ID &#125;) |            @Html.ActionLink(&quot;Delete&quot;, &quot;Delete&quot;, new &#123; id=item.ID &#125;)        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><p>排序效果：</p><p><img src="/2020/06/04/net-mvc-webapp/13.png" alt="list-search"></p><p>分頁功能：</p><p>增加分頁插件：Tools menu 　ー＞　NuGet Package Manager 　ー＞　Package Manager Console<br><code>Install-Package EntityFramework</code></p><p>修改Index方法：</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> PagedList;<span class="hljs-comment">// GET: Student</span>        <span class="hljs-comment">//public ActionResult Index(string sortOrder, string currentFilter, string searchString, int? page)</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> ViewResult <span class="hljs-title">Index</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> sortOrder, <span class="hljs-built_in">string</span> currentFilter, <span class="hljs-built_in">string</span> searchString, <span class="hljs-built_in">int</span>? page</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-comment">// Sort function added</span>            ViewBag.CurrentSort = sortOrder;            ViewBag.NameSortParm = String.IsNullOrEmpty(sortOrder) ? <span class="hljs-string">&quot;name_desc&quot;</span> : <span class="hljs-string">&quot;&quot;</span>;            ViewBag.DateSortParm = sortOrder == <span class="hljs-string">&quot;Date&quot;</span> ? <span class="hljs-string">&quot;date_desc&quot;</span> : <span class="hljs-string">&quot;Date&quot;</span>;            <span class="hljs-keyword">if</span> (searchString != <span class="hljs-literal">null</span>)            &#123;                page = <span class="hljs-number">1</span>;            &#125;            <span class="hljs-keyword">else</span>            &#123;                searchString = currentFilter;            &#125;            ViewBag.CurrentFilter = searchString;            <span class="hljs-keyword">var</span> students = <span class="hljs-keyword">from</span> s <span class="hljs-keyword">in</span> db.Students                           <span class="hljs-keyword">select</span> s;            <span class="hljs-comment">// 名フィールドを検索できる</span>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrEmpty(searchString))            &#123;                students = students.Where(s =&gt; s.LastName.Contains(searchString)                            || s.FirstMidName.Contains(searchString));            &#125;            <span class="hljs-keyword">switch</span> (sortOrder)            &#123;                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;name_desc&quot;</span>:                    students = students.OrderByDescending(s =&gt; s.LastName);                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Date&quot;</span>:                    students = students.OrderBy(s =&gt; s.EnrollmentDate);                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;date_desc&quot;</span>:                    students = students.OrderByDescending(s =&gt; s.EnrollmentDate);                    <span class="hljs-keyword">break</span>;                <span class="hljs-literal">default</span>:                    students = students.OrderBy(s =&gt; s.LastName);                    <span class="hljs-keyword">break</span>;            &#125;            <span class="hljs-comment">// Page function add</span>            <span class="hljs-built_in">int</span> pageSize = <span class="hljs-number">3</span>;            <span class="hljs-built_in">int</span> pageNumber = (page ?? <span class="hljs-number">1</span>);            <span class="hljs-comment">//return View(students.ToList());</span>            <span class="hljs-keyword">return</span> View(students.ToPagedList(pageNumber, pageSize));        &#125;</code></pre><p>Index.cshtml：</p><pre><code class="hljs php+HTML">@*@model IEnumerable&lt;ContosoUniversity.Models.Student&gt;*@@model PagedList.IPagedList&lt;ContosoUniversity.Models.Student&gt;@using PagedList.Mvc;&lt;link href&#x3D;&quot;~&#x2F;Content&#x2F;PagedList.css&quot; rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; &#x2F;&gt;@&#123;    ViewBag.Title &#x3D; &quot;Students&quot;;&#125;&lt;h2&gt;Students&lt;&#x2F;h2&gt;&lt;p&gt;    @Html.ActionLink(&quot;Create New&quot;, &quot;Create&quot;)&lt;&#x2F;p&gt;@*検索項設定*@@using (Html.BeginForm(&quot;Index&quot;, &quot;Student&quot;, FormMethod.Get))&#123;    &lt;p&gt;        Find by name: @Html.TextBox(&quot;searchString&quot;, ViewBag.CurrentFilter as string)        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Search&quot; &#x2F;&gt;    &lt;&#x2F;p&gt;&#125;&lt;table class&#x3D;&quot;table&quot;&gt;    &lt;tr&gt;        &lt;th&gt;            @*@Html.DisplayNameFor(model &#x3D;&gt; model.LastName)*@            @Html.ActionLink(&quot;Last Name&quot;, &quot;Index&quot;, new &#123; sortOrder &#x3D; ViewBag.NameSortParm, currentFilter &#x3D; ViewBag.CurrentFilter &#125;)        &lt;&#x2F;th&gt;        &lt;th&gt;            @*@Html.DisplayNameFor(model &#x3D;&gt; model.FirstMidName)*@            First Name        &lt;&#x2F;th&gt;        &lt;th&gt;            @*@Html.DisplayNameFor(model &#x3D;&gt; model.EnrollmentDate)*@            @Html.ActionLink(&quot;Enrollment Date&quot;, &quot;Index&quot;, new &#123; sortOrder &#x3D; ViewBag.DateSortParm, currentFilter &#x3D; ViewBag.CurrentFilter &#125;)        &lt;&#x2F;th&gt;        &lt;th&gt;&lt;&#x2F;th&gt;    &lt;&#x2F;tr&gt;@foreach (var item in Model) &#123;    &lt;tr&gt;        &lt;td&gt;            @Html.DisplayFor(modelItem &#x3D;&gt; item.LastName)        &lt;&#x2F;td&gt;        &lt;td&gt;            @Html.DisplayFor(modelItem &#x3D;&gt; item.FirstMidName)        &lt;&#x2F;td&gt;        &lt;td&gt;            @Html.DisplayFor(modelItem &#x3D;&gt; item.EnrollmentDate)        &lt;&#x2F;td&gt;        &lt;td&gt;            @Html.ActionLink(&quot;Edit&quot;, &quot;Edit&quot;, new &#123; id&#x3D;item.ID &#125;) |            @Html.ActionLink(&quot;Details&quot;, &quot;Details&quot;, new &#123; id&#x3D;item.ID &#125;) |            @Html.ActionLink(&quot;Delete&quot;, &quot;Delete&quot;, new &#123; id&#x3D;item.ID &#125;)        &lt;&#x2F;td&gt;    &lt;&#x2F;tr&gt;&#125;&lt;&#x2F;table&gt;&lt;br &#x2F;&gt;Page @(Model.PageCount &lt; Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount@Html.PagedListPager(Model, page &#x3D;&gt; Url.Action(&quot;Index&quot;, new &#123; page, sortOrder &#x3D; ViewBag.CurrentSort, currentFilter &#x3D; ViewBag.CurrentFilter &#125;))</code></pre><p>@model PagedList.IPagedList&lt;ContosoUniversity.Models.Student&gt;：本頁面渲染的是PagedList對象，而不是List對象<br>@using PagedList.Mvc：提供分頁按鈕<br>@Html.TextBox(“searchString”, ViewBag.CurrentFilter as string)：提供入力框默認值<br>@Html.ActionLink(“Last Name”, “Index”, new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })：帶檢索項排序<br>Page @(Model.PageCount &lt; Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount：當前頁 of 縂頁數。如：Page 0 of 0<br>PagedListPager：定制分頁按鈕和樣式</p><p>效果如下：</p><p><img src="/2020/06/04/net-mvc-webapp/14.png" alt="page-list"></p><h3 id="１０、統計數據展示"><a href="#１０、統計數據展示" class="headerlink" title="１０、統計數據展示"></a>１０、統計數據展示</h3><p>新建統計數據展示Bean：EnrollmentDateGroup</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<span class="hljs-keyword">using</span> System.ComponentModel.DataAnnotations;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.ViewModels</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EnrollmentDateGroup</span>    &#123;        [<span class="hljs-meta">DataType(DataType.Date)</span>]        <span class="hljs-keyword">public</span> DateTime? EnrollmentDate &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> StudentCount &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;    &#125;&#125;</code></pre><p>HomeController.cs：About()方法修改</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> ContosoUniversity.DAL;<span class="hljs-keyword">using</span> ContosoUniversity.ViewModels;<span class="hljs-keyword">using</span> System.Linq;<span class="hljs-keyword">using</span> System.Web.Mvc;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.Controllers</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">HomeController</span> : <span class="hljs-title">Controller</span>    &#123;        <span class="hljs-keyword">private</span> SchoolContext db = <span class="hljs-keyword">new</span> SchoolContext();        <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">Index</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">return</span> View();        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">About</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-comment">//ViewBag.Message = &quot;Your application description page.&quot;;</span>            IQueryable&lt;EnrollmentDateGroup&gt; data = <span class="hljs-keyword">from</span> student <span class="hljs-keyword">in</span> db.Students                                                   <span class="hljs-keyword">group</span> student <span class="hljs-keyword">by</span> student.EnrollmentDate <span class="hljs-keyword">into</span> dateGroup                                                   <span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-keyword">new</span> <span class="hljs-title">EnrollmentDateGroup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>                                                   &#123;                                                       EnrollmentDate = dateGroup.Key,                                                       StudentCount = dateGroup.Count()                                                   &#125;;            <span class="hljs-keyword">return</span> View(data.ToList());        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">Contact</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>        &#123;            ViewBag.Message = <span class="hljs-string">&quot;Your contact page.&quot;</span>;            <span class="hljs-keyword">return</span> View();        &#125;        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Dispose</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> disposing</span>)</span><span class="hljs-function"></span>        &#123;            db.Dispose();            <span class="hljs-keyword">base</span>.Dispose(disposing);        &#125;    &#125;&#125;</code></pre><p>畫面展示（About.cshtml）</p><pre><code class="hljs php+HTML">@model IEnumerable&lt;ContosoUniversity.ViewModels.EnrollmentDateGroup&gt;@&#123;    ViewBag.Title &#x3D; &quot;Student Body Statistics&quot;;&#125;&lt;h2&gt;Student Body Statistics&lt;&#x2F;h2&gt;&lt;table&gt;    &lt;tr&gt;        &lt;th&gt;            Enrollment Date        &lt;&#x2F;th&gt;        &lt;th&gt;            Students        &lt;&#x2F;th&gt;    &lt;&#x2F;tr&gt;    @foreach (var item in Model)    &#123;        &lt;tr&gt;            &lt;td&gt;                @Html.DisplayFor(modelItem &#x3D;&gt; item.EnrollmentDate)            &lt;&#x2F;td&gt;            &lt;td&gt;                @item.StudentCount            &lt;&#x2F;td&gt;        &lt;&#x2F;tr&gt;    &#125;&lt;&#x2F;table&gt;</code></pre><p>畫面展示：</p><p><img src="/2020/06/04/net-mvc-webapp/15.png" alt="statistics-data"></p><h3 id="１１、DB服務連接策略"><a href="#１１、DB服務連接策略" class="headerlink" title="１１、DB服務連接策略"></a>１１、DB服務連接策略</h3><p>儅DB在服務器上或者在微軟的云上時，DB操作時可能出錯，可以設置DB連接策略</p><p>在DAL文件夾中創建SchoolConfiguration.cs</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Data.Entity;<span class="hljs-keyword">using</span> System.Data.Entity.SqlServer;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.DAL</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SchoolConfiguration</span> : <span class="hljs-title">DbConfiguration</span>    &#123;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SchoolConfiguration</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-comment">// サービス実行策略</span>            SetExecutionStrategy(<span class="hljs-string">&quot;System.Data.SqlClient&quot;</span>, () =&gt; <span class="hljs-keyword">new</span> SqlAzureExecutionStrategy());        &#125;    &#125;&#125;</code></pre><p>創建日志系統，新建Logging文件夾，接口：ILogger.cs</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.Logging</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ILogger</span>    &#123;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Information</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> message</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Information</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Information</span>(<span class="hljs-params">Exception exception, <span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Warning</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> message</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Warning</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Warning</span>(<span class="hljs-params">Exception exception, <span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Error</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> message</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Error</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Error</span>(<span class="hljs-params">Exception exception, <span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TraceApi</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> componentName, <span class="hljs-built_in">string</span> method, TimeSpan timespan</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TraceApi</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> componentName, <span class="hljs-built_in">string</span> method, TimeSpan timespan, <span class="hljs-built_in">string</span> properties</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TraceApi</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> componentName, <span class="hljs-built_in">string</span> method, TimeSpan timespan, <span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span>;    &#125;&#125;</code></pre><p>日志接口實現類：Logger.cs</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<span class="hljs-keyword">using</span> System.Diagnostics;<span class="hljs-keyword">using</span> System.Text;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.Logging</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span> : <span class="hljs-title">ILogger</span>    &#123;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Error</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> message</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceError(message);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Error</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceError(fmt, vars);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Error</span>(<span class="hljs-params">Exception exception, <span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceError(FormatExceptionMessage(exception, fmt, vars));        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Information</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> message</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceInformation(message);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Information</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceInformation(fmt, vars);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Information</span>(<span class="hljs-params">Exception exception, <span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceInformation(FormatExceptionMessage(exception, fmt, vars));        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TraceApi</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> componentName, <span class="hljs-built_in">string</span> method, TimeSpan timespan</span>)</span><span class="hljs-function"></span>        &#123;            TraceApi(componentName, method, timespan, <span class="hljs-string">&quot;&quot;</span>);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TraceApi</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> componentName, <span class="hljs-built_in">string</span> method, TimeSpan timespan, <span class="hljs-built_in">string</span> properties</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-built_in">string</span> message = String.Concat(<span class="hljs-string">&quot;Component: &quot;</span>, componentName, <span class="hljs-string">&quot;, Method: &quot;</span>, method, <span class="hljs-string">&quot;; Timespan: &quot;</span>, timespan.ToString(), <span class="hljs-string">&quot;; Properties: &quot;</span>, properties);            Trace.TraceInformation(message);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TraceApi</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> componentName, <span class="hljs-built_in">string</span> method, TimeSpan timespan, <span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span><span class="hljs-function"></span>        &#123;            TraceApi(componentName, method, timespan, <span class="hljs-built_in">string</span>.Format(fmt, vars));        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Warning</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> message</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceWarning(message);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Warning</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceWarning(fmt, vars);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Warning</span>(<span class="hljs-params">Exception exception, <span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceWarning(FormatExceptionMessage(exception, fmt, vars));        &#125;        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> <span class="hljs-title">FormatExceptionMessage</span>(<span class="hljs-params">Exception exception, <span class="hljs-built_in">string</span> fmt, <span class="hljs-built_in">object</span>[] vars</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">var</span> sb = <span class="hljs-keyword">new</span> StringBuilder();            sb.Append(<span class="hljs-built_in">string</span>.Format(fmt, vars));            sb.Append(<span class="hljs-string">&quot; Exception: &quot;</span>);            sb.Append(exception.ToString());            <span class="hljs-keyword">return</span> sb.ToString();        &#125;    &#125;&#125;</code></pre><p>DB操作日志打印攔截器：SchoolInterceptorLogging.cs</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> ContosoUniversity.Logging;<span class="hljs-keyword">using</span> System.Data.Common;<span class="hljs-keyword">using</span> System.Data.Entity.Infrastructure.Interception;<span class="hljs-keyword">using</span> System.Diagnostics;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.DAL</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SchoolInterceptorLogging</span> : <span class="hljs-title">DbCommandInterceptor</span>    &#123;        <span class="hljs-keyword">private</span> ILogger _logger = <span class="hljs-keyword">new</span> Logger();        <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> Stopwatch _stopwatch = <span class="hljs-keyword">new</span> Stopwatch();        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ScalarExecuting</span>(<span class="hljs-params">DbCommand command, DbCommandInterceptionContext&lt;<span class="hljs-built_in">object</span>&gt; interceptionContext</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">base</span>.ScalarExecuting(command, interceptionContext);            _stopwatch.Restart();        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ScalarExecuted</span>(<span class="hljs-params">DbCommand command, DbCommandInterceptionContext&lt;<span class="hljs-built_in">object</span>&gt; interceptionContext</span>)</span><span class="hljs-function"></span>        &#123;            _stopwatch.Stop();            <span class="hljs-keyword">if</span> (interceptionContext.Exception != <span class="hljs-literal">null</span>)            &#123;                _logger.Error(interceptionContext.Exception, <span class="hljs-string">&quot;Error executing command: &#123;0&#125;&quot;</span>, command.CommandText);            &#125;            <span class="hljs-keyword">else</span>            &#123;                _logger.TraceApi(<span class="hljs-string">&quot;SQL Database&quot;</span>, <span class="hljs-string">&quot;SchoolInterceptor.ScalarExecuted&quot;</span>, _stopwatch.Elapsed, <span class="hljs-string">&quot;Command: &#123;0&#125;: &quot;</span>, command.CommandText);            &#125;            <span class="hljs-keyword">base</span>.ScalarExecuted(command, interceptionContext);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">NonQueryExecuting</span>(<span class="hljs-params">DbCommand command, DbCommandInterceptionContext&lt;<span class="hljs-built_in">int</span>&gt; interceptionContext</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">base</span>.NonQueryExecuting(command, interceptionContext);            _stopwatch.Restart();        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">NonQueryExecuted</span>(<span class="hljs-params">DbCommand command, DbCommandInterceptionContext&lt;<span class="hljs-built_in">int</span>&gt; interceptionContext</span>)</span><span class="hljs-function"></span>        &#123;            _stopwatch.Stop();            <span class="hljs-keyword">if</span> (interceptionContext.Exception != <span class="hljs-literal">null</span>)            &#123;                _logger.Error(interceptionContext.Exception, <span class="hljs-string">&quot;Error executing command: &#123;0&#125;&quot;</span>, command.CommandText);            &#125;            <span class="hljs-keyword">else</span>            &#123;                _logger.TraceApi(<span class="hljs-string">&quot;SQL Database&quot;</span>, <span class="hljs-string">&quot;SchoolInterceptor.NonQueryExecuted&quot;</span>, _stopwatch.Elapsed, <span class="hljs-string">&quot;Command: &#123;0&#125;: &quot;</span>, command.CommandText);            &#125;            <span class="hljs-keyword">base</span>.NonQueryExecuted(command, interceptionContext);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReaderExecuting</span>(<span class="hljs-params">DbCommand command, DbCommandInterceptionContext&lt;DbDataReader&gt; interceptionContext</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">base</span>.ReaderExecuting(command, interceptionContext);            _stopwatch.Restart();        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReaderExecuted</span>(<span class="hljs-params">DbCommand command, DbCommandInterceptionContext&lt;DbDataReader&gt; interceptionContext</span>)</span><span class="hljs-function"></span>        &#123;            _stopwatch.Stop();            <span class="hljs-keyword">if</span> (interceptionContext.Exception != <span class="hljs-literal">null</span>)            &#123;                _logger.Error(interceptionContext.Exception, <span class="hljs-string">&quot;Error executing command: &#123;0&#125;&quot;</span>, command.CommandText);            &#125;            <span class="hljs-keyword">else</span>            &#123;                _logger.TraceApi(<span class="hljs-string">&quot;SQL Database&quot;</span>, <span class="hljs-string">&quot;SchoolInterceptor.ReaderExecuted&quot;</span>, _stopwatch.Elapsed, <span class="hljs-string">&quot;Command: &#123;0&#125;: &quot;</span>, command.CommandText);            &#125;            <span class="hljs-keyword">base</span>.ReaderExecuted(command, interceptionContext);        &#125;    &#125;&#125;</code></pre><p>模擬DB操作發生異常攔截器：SchoolInterceptorTransientErrors.cs</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> ContosoUniversity.Logging;<span class="hljs-keyword">using</span> System;<span class="hljs-keyword">using</span> System.Data.Common;<span class="hljs-keyword">using</span> System.Data.Entity.Infrastructure.Interception;<span class="hljs-keyword">using</span> System.Data.SqlClient;<span class="hljs-keyword">using</span> System.Linq;<span class="hljs-keyword">using</span> System.Reflection;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.DAL</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SchoolInterceptorTransientErrors</span> : <span class="hljs-title">DbCommandInterceptor</span>    &#123;        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _counter = <span class="hljs-number">0</span>;        <span class="hljs-keyword">private</span> ILogger _logger = <span class="hljs-keyword">new</span> Logger();        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReaderExecuting</span>(<span class="hljs-params">DbCommand command, DbCommandInterceptionContext&lt;DbDataReader&gt; interceptionContext</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-built_in">bool</span> throwTransientErrors = <span class="hljs-literal">false</span>;            <span class="hljs-comment">// 仮想SQLの検索項目は”Throw”を含める、異常と発生</span>            <span class="hljs-keyword">if</span> (command.Parameters.Count &gt; <span class="hljs-number">0</span> &amp;&amp; command.Parameters[<span class="hljs-number">0</span>].Value.ToString() == <span class="hljs-string">&quot;%Throw%&quot;</span>)            &#123;                throwTransientErrors = <span class="hljs-literal">true</span>;                command.Parameters[<span class="hljs-number">0</span>].Value = <span class="hljs-string">&quot;%an%&quot;</span>;                command.Parameters[<span class="hljs-number">1</span>].Value = <span class="hljs-string">&quot;%an%&quot;</span>;            &#125;            <span class="hljs-comment">// 仮想異常エラーが発生</span>            <span class="hljs-keyword">if</span> (throwTransientErrors &amp;&amp; _counter &lt; <span class="hljs-number">4</span>)            &#123;                _logger.Information(<span class="hljs-string">&quot;Returning transient error for command: &#123;0&#125;&quot;</span>, command.CommandText);                _counter++;                interceptionContext.Exception = CreateDummySqlException();            &#125;            <span class="hljs-keyword">base</span>.ReaderExecuting(command, interceptionContext);        &#125;        <span class="hljs-function"><span class="hljs-keyword">private</span> SqlException <span class="hljs-title">CreateDummySqlException</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">var</span> sqlErrorNumber = <span class="hljs-number">20</span>;            <span class="hljs-keyword">var</span> sqlErrorCtor = <span class="hljs-keyword">typeof</span>(SqlError).GetConstructors(BindingFlags.Instance | BindingFlags.NonPublic).Where(c =&gt; c.GetParameters().Count() == <span class="hljs-number">7</span>).Single();            <span class="hljs-keyword">var</span> sqlError = sqlErrorCtor.Invoke(<span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[] &#123; sqlErrorNumber, (<span class="hljs-built_in">byte</span>)<span class="hljs-number">0</span>, (<span class="hljs-built_in">byte</span>)<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">1</span> &#125;);            <span class="hljs-keyword">var</span> errorCollection = Activator.CreateInstance(<span class="hljs-keyword">typeof</span>(SqlErrorCollection), <span class="hljs-literal">true</span>);            <span class="hljs-keyword">var</span> addMethod = <span class="hljs-keyword">typeof</span>(SqlErrorCollection).GetMethod(<span class="hljs-string">&quot;Add&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic);            addMethod.Invoke(errorCollection, <span class="hljs-keyword">new</span>[] &#123; sqlError &#125;);            <span class="hljs-keyword">var</span> sqlExceptionCtor = <span class="hljs-keyword">typeof</span>(SqlException).GetConstructors(BindingFlags.Instance | BindingFlags.NonPublic).Where(c =&gt; c.GetParameters().Count() == <span class="hljs-number">4</span>).Single();            <span class="hljs-keyword">var</span> sqlException = (SqlException)sqlExceptionCtor.Invoke(<span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[] &#123; <span class="hljs-string">&quot;Dummy&quot;</span>, errorCollection, <span class="hljs-literal">null</span>, Guid.NewGuid() &#125;);            <span class="hljs-keyword">throw</span> sqlException;        &#125;    &#125;&#125;</code></pre><p>文件目錄結構：</p><p><img src="/2020/06/04/net-mvc-webapp/16.png" alt="db-error-structure"></p><p>添加攔截器，Application_Start.cs</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> ContosoUniversity.DAL;<span class="hljs-keyword">using</span> System.Data.Entity.Infrastructure.Interception;<span class="hljs-keyword">using</span> System.Web.Mvc;<span class="hljs-keyword">using</span> System.Web.Optimization;<span class="hljs-keyword">using</span> System.Web.Routing;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MvcApplication</span> : <span class="hljs-title">System.Web.HttpApplication</span>    &#123;        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Application_Start</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>        &#123;            AreaRegistration.RegisterAllAreas();            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);            RouteConfig.RegisterRoutes(RouteTable.Routes);            BundleConfig.RegisterBundles(BundleTable.Bundles);            <span class="hljs-comment">// 自分のInterceptorを追加</span>            DbInterception.Add(<span class="hljs-keyword">new</span> SchoolInterceptorTransientErrors());            DbInterception.Add(<span class="hljs-keyword">new</span> SchoolInterceptorLogging());        &#125;    &#125;&#125;</code></pre><p>測試：</p><p>在學生列表檢索框中輸入：Throw，檢索會報錯：CreateDummySqlException中的Dummy錯誤。程序會自動連接4次：SchoolConfiguration中的連接策略和SchoolInterceptorTransientErrors中的重新連接次數（throwTransientErrors標志位）決定的。最後一次會成功。顯示出檢索結果。</p><p>ASP.Net.pdf（page——5332）</p><p><strong><u>Ps: 本文仅为学习记录，仅为学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>webapp</tag>
      
      <tag>mvc</tag>
      
      <tag>net</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Python读写CSV至Mysql</title>
    <link href="/2020/06/02/python-mysql-csv/"/>
    <url>/2020/06/02/python-mysql-csv/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="利用Python读写CSV至Mysql"><a href="#利用Python读写CSV至Mysql" class="headerlink" title="利用Python读写CSV至Mysql"></a>利用Python读写CSV至Mysql</h2><h3 id="构建Mysql数据表"><a href="#构建Mysql数据表" class="headerlink" title="构建Mysql数据表"></a>构建Mysql数据表</h3><p>前提：本机安装好mysql，运行以下脚本</p><pre><code class="hljs mysql">-- 创建表空间CREATE DATABASE my_suppliers;SHOW DATABASES;-- 创建表CREATE TABLE IF NOT EXISTS Suppliers(Supplier_Name VARCHAR(20), Invoice_Number VARCHAR(20), Part_Number VARCHAR(20), Cost FLOAT, Purchase_Date DATE);-- 查看表结构DESCRIBE Suppliers;-- 创建用户并授权CREATE USER &#39;ffawp&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;Aa123456&#39;;GRANT ALL PRIVILEGES ON my_suppliers.* TO &#39;ffawp&#39;@&#39;localhost&#39;;FLUSH PRIVILEGES;</code></pre><p>使用PyCharm连接Mysql，如下：</p><p><img src="/2020/06/02/python-mysql-csv/1.png" alt="pycharm-mysql"></p><p>安装mysqlclient<br>‘pip install mysqlclient’<br>在PyCharm的插件库中查看，Perferences -&gt; Project -&gt; Project Interpreter</p><p><img src="/2020/06/02/python-mysql-csv/2.png" alt="project-interpreter-mysqlclient"></p><h3 id="CSV至Mysql数据表"><a href="#CSV至Mysql数据表" class="headerlink" title="CSV至Mysql数据表"></a>CSV至Mysql数据表</h3><p>CSV文件：data/supplier_data.csv</p><pre><code class="hljs python">Supplier Name,Invoice Number,Part Number,Cost,Purchase DateSupplier X,<span class="hljs-number">001</span><span class="hljs-number">-1001</span>,<span class="hljs-number">2341</span>,$<span class="hljs-number">500.00</span>,<span class="hljs-number">1</span>/<span class="hljs-number">20</span>/<span class="hljs-number">14</span>Supplier X,<span class="hljs-number">001</span><span class="hljs-number">-1001</span>,<span class="hljs-number">2341</span>,$<span class="hljs-number">500.00</span>,<span class="hljs-number">1</span>/<span class="hljs-number">20</span>/<span class="hljs-number">14</span>Supplier X,<span class="hljs-number">001</span><span class="hljs-number">-1001</span>,<span class="hljs-number">5467</span>,$<span class="hljs-number">750.00</span>,<span class="hljs-number">1</span>/<span class="hljs-number">20</span>/<span class="hljs-number">14</span>Supplier X,<span class="hljs-number">001</span><span class="hljs-number">-1001</span>,<span class="hljs-number">5467</span>,$<span class="hljs-number">750.00</span>,<span class="hljs-number">1</span>/<span class="hljs-number">20</span>/<span class="hljs-number">14</span>Supplier Y,<span class="hljs-number">50</span><span class="hljs-number">-9501</span>,<span class="hljs-number">7009</span>,$<span class="hljs-number">250.00</span>,<span class="hljs-number">1</span>/<span class="hljs-number">30</span>/<span class="hljs-number">14</span>Supplier Y,<span class="hljs-number">50</span><span class="hljs-number">-9501</span>,<span class="hljs-number">7009</span>,$<span class="hljs-number">250.00</span>,<span class="hljs-number">1</span>/<span class="hljs-number">30</span>/<span class="hljs-number">14</span>Supplier Y,<span class="hljs-number">50</span><span class="hljs-number">-9505</span>,<span class="hljs-number">6650</span>,$<span class="hljs-number">125.00</span>,<span class="hljs-number">2</span>/<span class="hljs-number">3</span>/<span class="hljs-number">14</span>Supplier Y,<span class="hljs-number">50</span><span class="hljs-number">-9505</span>,<span class="hljs-number">6650</span>,$<span class="hljs-number">125.00</span>,<span class="hljs-number">2</span>/<span class="hljs-number">3</span>/<span class="hljs-number">14</span>Supplier Z,<span class="hljs-number">920</span><span class="hljs-number">-4803</span>,<span class="hljs-number">3321</span>,$<span class="hljs-number">615.00</span>,<span class="hljs-number">2</span>/<span class="hljs-number">3</span>/<span class="hljs-number">14</span>Supplier Z,<span class="hljs-number">920</span><span class="hljs-number">-4804</span>,<span class="hljs-number">3321</span>,$<span class="hljs-number">615.00</span>,<span class="hljs-number">2</span>/<span class="hljs-number">10</span>/<span class="hljs-number">14</span>Supplier Z,<span class="hljs-number">920</span><span class="hljs-number">-4805</span>,<span class="hljs-number">3321</span>,$<span class="hljs-number">615.00</span>,<span class="hljs-number">2</span>/<span class="hljs-number">17</span>/<span class="hljs-number">14</span>Supplier Z,<span class="hljs-number">920</span><span class="hljs-number">-4806</span>,<span class="hljs-number">3321</span>,$<span class="hljs-number">615.00</span>,<span class="hljs-number">2</span>/<span class="hljs-number">24</span>/<span class="hljs-number">14</span></code></pre><p>处理程序：<code>4_db_mysql_load_from_csv.py</code></p><pre><code class="hljs python"><span class="hljs-comment"># Date:2020/6/1</span><span class="hljs-comment"># Author:Lingchen</span><span class="hljs-comment"># Mark: 将数据从CSV文件中插入到数据表Suppliers</span><span class="hljs-comment">#       python 4_db_mysql_load_from_csv.py data/supplier_data.csv</span><span class="hljs-keyword">import</span> csv<span class="hljs-keyword">import</span> MySQLdb<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime, date<span class="hljs-comment"># CSV输入文件的路径和文件名</span>input_file = sys.argv[<span class="hljs-number">1</span>]<span class="hljs-comment"># 连接Mysql数据库</span>con = MySQLdb.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">3306</span>, db=<span class="hljs-string">&#x27;my_suppliers&#x27;</span>, user=<span class="hljs-string">&#x27;ffawp&#x27;</span>, passwd=<span class="hljs-string">&#x27;Aa123456&#x27;</span>)c = con.cursor()<span class="hljs-comment"># 向Suppliers表中插入数据</span>file_reader = csv.reader(<span class="hljs-built_in">open</span>(input_file, <span class="hljs-string">&#x27;r&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>))header = <span class="hljs-built_in">next</span>(file_reader)<span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> file_reader:    data = []    <span class="hljs-keyword">for</span> column_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(header)):        <span class="hljs-keyword">if</span> column_index &lt; <span class="hljs-number">4</span>:            data.append(<span class="hljs-built_in">str</span>(row[column_index]).lstrip(<span class="hljs-string">&#x27;$&#x27;</span>).replace(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).strip())        <span class="hljs-keyword">else</span>:            <span class="hljs-comment"># %Y：year的格式是四位数，如：2012，%y的格式是两位数，如12</span>            <span class="hljs-comment"># 将csv中的日期字符串转换成日期</span>            a_date = datetime.date(datetime.strptime(<span class="hljs-built_in">str</span>(row[column_index]), <span class="hljs-string">&#x27;%m/%d/%y&#x27;</span>))            <span class="hljs-comment"># print(&#x27;a_date: &#x27;, a_date)</span>            <span class="hljs-comment"># 将日期转换成特定格式的字符串</span>            a_date = a_date.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)            data.append(a_date)        print(data)    <span class="hljs-comment"># %s是要插入的实际值的占位符</span>    c.execute(<span class="hljs-string">&quot;&quot;&quot;INSERT INTO Suppliers VALUES (%s, %s, %s, %s, %s);&quot;&quot;&quot;</span>, data)con.commit()print(<span class="hljs-string">&#x27;查询Suppliers表：&#x27;</span>)c.execute(<span class="hljs-string">&quot;SELECT * FROM Suppliers&quot;</span>)rows = c.fetchall()<span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows:    row_list_output = []    <span class="hljs-keyword">for</span> column_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(row)):        row_list_output.append(<span class="hljs-built_in">str</span>(row[column_index]))    print(row_list_output)</code></pre><p>试运行时，可以会出错：</p><pre><code class="hljs bash">如果报Library not loaded: libcrypto.1.0.0.dylibLibrary not loaded: libssl.1.0.0.dylib, Library not loaded: @rpath/libmysqlclient.21.dylib等在命令窗口运行以下软链接：具体路径需要根据本机调整ln -s /usr/<span class="hljs-built_in">local</span>/mysql/lib/libmysqlclient.21.dylib /usr/<span class="hljs-built_in">local</span>/lib/libmysqlclient.21.dylibln -s /usr/<span class="hljs-built_in">local</span>/mysql/lib/libssl.1.0.0.dylib /usr/<span class="hljs-built_in">local</span>/lib/libssl.1.0.0.dylibln -s /usr/<span class="hljs-built_in">local</span>/mysql/lib/libcrypto.1.0.0.dylib /usr/<span class="hljs-built_in">local</span>/lib/libcrypto.1.0.0.dylib</code></pre><p>运行<code>python 4_db_mysql_load_from_csv.py data/supplier_data.csv</code>，会将CSV文件中的文本写入到数据表Suppliers中</p><p><img src="/2020/06/02/python-mysql-csv/3.png" alt="mysql_load_from_csv"></p><h3 id="Mysql数据表至CSV文件"><a href="#Mysql数据表至CSV文件" class="headerlink" title="Mysql数据表至CSV文件"></a>Mysql数据表至CSV文件</h3><p>从mysql数据表Suppliers数据表中查询出一组特定记录，然后将输出写入到CSV输出文件。找出Cost列中的值大于700.00的所有记录，并将记录输出。<br>处理程序：<code>5_db_mysql_write_to_file.py</code></p><pre><code class="hljs python"><span class="hljs-comment"># Date:2020/6/2</span><span class="hljs-comment"># Author:Lingchen</span><span class="hljs-comment"># Mark: 从mysql数据表Suppliers数据表中查询出一组特定记录，然后将输出写入到CSV输出文件。</span><span class="hljs-comment">#       找出Cost列中的值大于700.00的所有记录，并将记录输出</span><span class="hljs-comment">#       python 5_db_mysql_write_to_file.py data/output_files/5_output.csv</span><span class="hljs-keyword">import</span> csv<span class="hljs-keyword">import</span> MySQLdb<span class="hljs-keyword">import</span> sys<span class="hljs-comment"># CSV输出文件名</span>output_file = sys.argv[<span class="hljs-number">1</span>]<span class="hljs-comment"># 连接到Mysql数据库</span>con = MySQLdb.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">3306</span>, db=<span class="hljs-string">&#x27;my_suppliers&#x27;</span>, user=<span class="hljs-string">&#x27;ffawp&#x27;</span>, passwd=<span class="hljs-string">&#x27;Aa123456&#x27;</span>)c = con.cursor()<span class="hljs-comment"># 创建写文件的对象，并写入标题行</span>file_writer = csv.writer(<span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>), delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)header = [<span class="hljs-string">&#x27;Supplier Name&#x27;</span>, <span class="hljs-string">&#x27;Invoice Number&#x27;</span>, <span class="hljs-string">&#x27;Part Number&#x27;</span>, <span class="hljs-string">&#x27;Cost&#x27;</span>, <span class="hljs-string">&#x27;Purchase Date&#x27;</span>]file_writer.writerow(header)<span class="hljs-comment"># 查询Suppliers表，并将结果写入CSV文件中</span>c.execute(<span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    SELECT *</span><span class="hljs-string">    FROM Suppliers</span><span class="hljs-string">    WHERE Cost &gt; 700.00;</span><span class="hljs-string">&quot;&quot;&quot;</span>)rows = c.fetchall()<span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows:    file_writer.writerow(row)</code></pre><p>运行，查看效果<br><code>python 5_db_mysql_write_to_file.py data/output_files/5_output.csv</code></p><p><img src="/2020/06/02/python-mysql-csv/4.png" alt="mysql_write_to_file"></p><p><strong><u>ps: 本文仅为学习笔记，仅供学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>python</tag>
      
      <tag>csv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VS2017常用快捷键</title>
    <link href="/2020/06/02/mvs-2017-hotkey/"/>
    <url>/2020/06/02/mvs-2017-hotkey/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="VS2017常用快捷键"><a href="#VS2017常用快捷键" class="headerlink" title="VS2017常用快捷键"></a>VS2017常用快捷键</h2><h3 id="项目快捷键"><a href="#项目快捷键" class="headerlink" title="项目快捷键"></a>项目快捷键</h3><p><u>Ctrl + Alt + L</u>：显示 Solution Explorer（解决方案资源管理器）</p><p>Shift + Alt+ C：添加新类</p><p>Ctrl + Shift + C：显示类视图窗口</p><p><u>Shift + Alt + Enter</u>：全屏显示</p><p>Ctrl + F4：关闭文档窗口</p><p><u>Ctrl + F6</u>：移動到下一個文档窗口</p><h3 id="编辑快捷键"><a href="#编辑快捷键" class="headerlink" title="编辑快捷键"></a>编辑快捷键</h3><p>Ctrl + U：转小写</p><p>Ctrl + Shift + U：转大写</p><p>Ctrl + Enter：在当前行插入空行</p><p>Ctrl + Shift + Enter：在当前行下方插入空行</p><p>Ctrl + 空格键：使用 IntelliSense（智能感知）自动完成</p><p>Alt + Shift + 箭头键(←,↑,↓,→)：选择代码的自定义部分</p><p><u>Ctrl + }</u>：匹配大括号、括号</p><p><u>Ctrl + Shift +}</u>：在匹配的括号、括号内选择文本</p><p>Ctrl + Shift + S：保存所有文件和项目</p><p><u>Ctrl + K，Ctrl + C</u>：注释选定行</p><p><u>Ctrl + K，Ctrl + U</u>：取消选定行的注释</p><p>Ctrl + M, Ctrl + O：折叠代码定义</p><p>Ctrl + M, Ctrl + L：展开代码定义</p><p>Ctrl + K，Ctrl + D：正确对齐所有代码</p><p>Shift + End：从头到尾选择整行</p><p>Shift + Home：从尾到头选择整行</p><p>Ctrl + Shift + End：选择至文档末尾</p><p>Ctrl + Shift + Home：选择至文档末尾开始</p><p><u>Ctrl + W</u>：选择当前单词</p><p>Ctrl + Delete：删除光标右侧的所有字</p><p>Ctrl + Shift + T：格式-文字缩进</p><p><u>Ctrl + Shift + 空格键</u> ：参数信息</p><h3 id="导航快捷键"><a href="#导航快捷键" class="headerlink" title="导航快捷键"></a>导航快捷键</h3><p>Ctrl +Up/Down：滚动窗口但不移动光标</p><p><u>Ctrl + -</u>：向后定位</p><p>Ctrl + Shift + -：向前定位</p><p>Ctrl + +：让光标移动到下一个位置</p><p><u>F12</u>：转到定义</p><p>Ctrl + Alt + J：对象浏览</p><p><u>Ctrl + Tab</u>：下一个文档窗口</p><p><u>Ctrl + F2</u>：移動到导航bar</p><h3 id="调试快捷键"><a href="#调试快捷键" class="headerlink" title="调试快捷键"></a>调试快捷键</h3><p><u>F5</u>：开始调试</p><p>Ctrl + Alt + P：附加到进程</p><p><u>F10</u>：调试单步执行</p><p>Shift + F5：停止调试</p><p>F9：设置或删除断点</p><h3 id="搜索快捷键"><a href="#搜索快捷键" class="headerlink" title="搜索快捷键"></a>搜索快捷键</h3><p>Ctrl + K  Ctrl + K：将当前行添加书签</p><p>Ctrl + K  Ctrl + N：导航至下一个书签</p><p>Ctrl + .：如果你键入一个类名如 Collection<string>，且命名空间导入不正确的话，那么这个快捷方式组合将自动插入导入</string></p><p>Ctrl + Shift + F：在文件中查找</p><p>Shift + F12：查找所有引用</p><p>Ctrl + F：显示查找对话框</p><p>Ctrl + H：显示替换对话框</p><p><u>Ctrl + G</u>：跳转到行号或行</p><p>Ctrl + Shift + F：查找所选条目在整个解决方案中的引用</p><p><u>Ctrl+;</u>：搜索 Solution Explorer</p><p><strong><u>ps: 快捷键摘取与网络，仅供学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>VS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flink学习-DataStream API</title>
    <link href="/2020/05/30/flink-dataStream-api-java/"/>
    <url>/2020/05/30/flink-dataStream-api-java/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Flink学习—DataStream-API"><a href="#Flink学习—DataStream-API" class="headerlink" title="Flink学习—DataStream API"></a>Flink学习—DataStream API</h2><p>Apache Flink是一个分布式流批一体化的开源平台。Flink的核心是一个提供数据分发、通信以及自动容错的流计算引擎。<br>Flink在流计算之上构建批处理，并且原生的支持迭代计算，内存管理以及程序优化。</p><h3 id="DataStream-API入门指导"><a href="#DataStream-API入门指导" class="headerlink" title="DataStream API入门指导"></a>DataStream API入门指导</h3><p>In this guide we will start from scratch and go from setting up a Flink project to running a streaming analysis program on a Flink cluster.<br>Wikipedia provides an IRC channel where all edits to the wiki are logged. We are going to read this channel in Flink and count the number of bytes that each user edits within a given window of time. This is easy enough to implement in a few minutes using Flink, but it will give you a good foundation from which to start building more complex analysis programs on your own.</p><h4 id="Maven构建"><a href="#Maven构建" class="headerlink" title="Maven构建"></a>Maven构建</h4><pre><code class="hljs bash">$ mvn archetype:generate \&gt;     -DarchetypeGroupId=org.apache.flink \&gt;     -DarchetypeArtifactId=flink-quickstart-java \&gt;     -DarchetypeVersion=1.9.0 \&gt;     -DgroupId=wiki-edits \&gt;     -DartifactId=wiki-edits \&gt;     -Dversion=0.1 \&gt;     -Dpackage=wikiedits \&gt;     -DinteractiveMode=<span class="hljs-literal">false</span></code></pre><p>查看构建好文件目录</p><pre><code class="hljs bash">$ tree wiki-edits/// mac system$ ls -Rwiki-edits./wiki-edits:pom.xmlsrc./wiki-edits/src:main./wiki-edits/src/main:javaresources./wiki-edits/src/main/java:wikiedits./wiki-edits/src/main/java/wikiedits:BatchJob.javaStreamingJob.java./wiki-edits/src/main/resources:log4j.properties</code></pre><p>删除示例程序</p><pre><code class="hljs java">$ rm wiki-edits/src/main/java/wikiedits<span class="hljs-comment">/*.java</span></code></pre><h4 id="创建Java程序"><a href="#创建Java程序" class="headerlink" title="创建Java程序"></a>创建Java程序</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> wikiedits;<span class="hljs-keyword">import</span> org.apache.flink.api.common.functions.AggregateFunction;<span class="hljs-keyword">import</span> org.apache.flink.api.java.functions.KeySelector;<span class="hljs-keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.KeyedStream;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.wikiedits.WikipediaEditEvent;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.wikiedits.WikipediaEditsSource;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: Wikipedia provides an IRC channel where all edits to the wiki are logged. </span><span class="hljs-comment"> * We are going to read this channel in Flink and </span><span class="hljs-comment"> * count the number of bytes that each user edits within a given window of time. </span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/5/31</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WikipediaAnalysis</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();        DataStreamSource&lt;WikipediaEditEvent&gt; edits = see.addSource(<span class="hljs-keyword">new</span> WikipediaEditsSource());        KeyedStream&lt;WikipediaEditEvent, String&gt; keyedEdits = edits.keyBy(<span class="hljs-keyword">new</span> KeySelector&lt;WikipediaEditEvent, String&gt;() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getKey</span><span class="hljs-params">(WikipediaEditEvent event)</span> </span>&#123;                <span class="hljs-keyword">return</span> event.getUser();            &#125;        &#125;);        DataStream&lt;Tuple2&lt;String, Long&gt;&gt; result = keyedEdits                .timeWindow(Time.seconds(<span class="hljs-number">5</span>))                .aggregate(<span class="hljs-keyword">new</span> AggregateFunction&lt;WikipediaEditEvent, Tuple2&lt;String, Long&gt;, Tuple2&lt;String, Long&gt;&gt;() &#123;                    <span class="hljs-meta">@Override</span>                    <span class="hljs-function"><span class="hljs-keyword">public</span> Tuple2&lt;String, Long&gt; <span class="hljs-title">createAccumulator</span><span class="hljs-params">()</span> </span>&#123;                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Tuple2&lt;&gt;(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0L</span>);                    &#125;                    <span class="hljs-meta">@Override</span>                    <span class="hljs-function"><span class="hljs-keyword">public</span> Tuple2&lt;String, Long&gt; <span class="hljs-title">add</span><span class="hljs-params">(WikipediaEditEvent value, Tuple2&lt;String, Long&gt; accumulator)</span> </span>&#123;                        accumulator.f0 = value.getUser();                        accumulator.f1 += value.getByteDiff();                        <span class="hljs-keyword">return</span> accumulator;                    &#125;                    <span class="hljs-meta">@Override</span>                    <span class="hljs-function"><span class="hljs-keyword">public</span> Tuple2&lt;String, Long&gt; <span class="hljs-title">getResult</span><span class="hljs-params">(Tuple2&lt;String, Long&gt; accumulator)</span> </span>&#123;                        <span class="hljs-keyword">return</span> accumulator;                    &#125;                    <span class="hljs-meta">@Override</span>                    <span class="hljs-function"><span class="hljs-keyword">public</span> Tuple2&lt;String, Long&gt; <span class="hljs-title">merge</span><span class="hljs-params">(Tuple2&lt;String, Long&gt; a, Tuple2&lt;String, Long&gt; b)</span> </span>&#123;                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Tuple2&lt;&gt;(a.f0, a.f1 + b.f1);                    &#125;                &#125;);        result.print();        see.execute();    &#125;&#125;</code></pre><p>编译打包</p><pre><code class="hljs bash">$ mvn clean package[INFO] Replacing /Users/xxxxxx/Documents/Flink/self-code/wiki-edits/target/wiki-edits-0.1.jar with /Users/xxxxxx/Documents/Flink/self-code/wiki-edits/target/wiki-edits-0.1-shaded.jar[INFO] Dependency-reduced POM written at: /Users/xxxxxx/Documents/Flink/self-code/wiki-edits/dependency-reduced-pom.xml[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 20.218 s[INFO] Finished at: 2020-05-31T11:56:00+08:00[INFO] ------------------------------------------------------------------------</code></pre><p>启动</p><pre><code class="hljs bash">$ mvn <span class="hljs-built_in">exec</span>:java -Dexec.mainClass=wikiedits.WikipediaAnalysis</code></pre><p>结果</p><pre><code class="hljs bash">// 连接wiki不成功，尴尬，以下是官网结果1&gt; (Fenix down,114)6&gt; (AnomieBOT,155)8&gt; (BD2412bot,-3690)7&gt; (IgnorantArmies,49)3&gt; (Ckh3111,69)5&gt; (Slade360,0)7&gt; (Narutolovehinata5,2195)6&gt; (Vuyisa2001,79)4&gt; (Ms Sarah Welch,269)4&gt; (KasparBot,-245)</code></pre><p><strong><u>ps: 本文摘取于网络，仅供学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>flink</tag>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python Head-First学习</title>
    <link href="/2020/05/14/python-header-first/"/>
    <url>/2020/05/14/python-header-first/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Python-Head-First学习"><a href="#Python-Head-First学习" class="headerlink" title="Python Head-First学习"></a>Python Head-First学习</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表读取</p><pre><code class="hljs python">cast = [<span class="hljs-string">&quot;Cleese&quot;</span>, <span class="hljs-string">&#x27;Palin&#x27;</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;Idle&#x27;</span>]print(cast)print(<span class="hljs-built_in">len</span>(cast))print(cast[<span class="hljs-number">1</span>])<span class="hljs-comment"># 末尾添加元素</span>cast.append(<span class="hljs-string">&quot;Gilliam&quot;</span>)<span class="hljs-comment"># 输出</span>[<span class="hljs-string">&#x27;Cleese&#x27;</span>, <span class="hljs-string">&#x27;Palin&#x27;</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;Idle&#x27;</span>]<span class="hljs-number">4</span>Palin[<span class="hljs-string">&#x27;Cleese&#x27;</span>, <span class="hljs-string">&#x27;Palin&#x27;</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;Idle&#x27;</span>, <span class="hljs-string">&#x27;Gilliam&#x27;</span>]</code></pre><p>添加列表</p><pre><code class="hljs python">cast = [<span class="hljs-string">&quot;Cleese&quot;</span>, <span class="hljs-string">&#x27;Palin&#x27;</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;Idle&#x27;</span>]cast.extend([<span class="hljs-string">&quot;Gilliam&quot;</span>, <span class="hljs-string">&quot;Chapman&quot;</span>])print(cast)<span class="hljs-comment"># 输出</span>[<span class="hljs-string">&#x27;Cleese&#x27;</span>, <span class="hljs-string">&#x27;Palin&#x27;</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;Idle&#x27;</span>, <span class="hljs-string">&#x27;Gilliam&#x27;</span>, <span class="hljs-string">&#x27;Chapman&#x27;</span>]<span class="hljs-comment"># cast.insert(0, &quot;Chapman&quot;)</span></code></pre><p>删除</p><pre><code class="hljs python">cast = [<span class="hljs-string">&#x27;Cleese&#x27;</span>, <span class="hljs-string">&#x27;Palin&#x27;</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;Idle&#x27;</span>, <span class="hljs-string">&#x27;Gilliam&#x27;</span>]<span class="hljs-comment"># 删除末尾数据</span>cast.pop()<span class="hljs-comment"># cast.remove(&quot;Chapman&quot;)</span>print(cast)// 输出[<span class="hljs-string">&#x27;Cleese&#x27;</span>, <span class="hljs-string">&#x27;Palin&#x27;</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;Idle&#x27;</span>]</code></pre><h3 id="列表迭代"><a href="#列表迭代" class="headerlink" title="列表迭代"></a>列表迭代</h3><pre><code class="hljs python">movies = [<span class="hljs-string">&quot;The Holy Grail&quot;</span>, <span class="hljs-number">1975</span>, <span class="hljs-string">&quot;Terry Jones &amp; Terry Gilliam&quot;</span>, <span class="hljs-number">91</span>,          [<span class="hljs-string">&quot;Graham Chapman&quot;</span>,           [<span class="hljs-string">&quot;Michael Palin&quot;</span>, <span class="hljs-string">&quot;John Cleese&quot;</span>, <span class="hljs-string">&quot;Terry Gilliam&quot;</span>, <span class="hljs-string">&quot;Eric Idle&quot;</span>, <span class="hljs-string">&quot;Terry Jones&quot;</span>]]]print(movies)print(movies[<span class="hljs-number">4</span>][<span class="hljs-number">1</span>][<span class="hljs-number">3</span>])print(<span class="hljs-string">&quot;遍历内嵌列表：&quot;</span>)<span class="hljs-keyword">for</span> each_item <span class="hljs-keyword">in</span> movies:    print(each_item)<span class="hljs-comment"># 输出</span>[<span class="hljs-string">&#x27;The Holy Grail&#x27;</span>, <span class="hljs-number">1975</span>, <span class="hljs-string">&#x27;Terry Jones &amp; Terry Gilliam&#x27;</span>, <span class="hljs-number">91</span>, [<span class="hljs-string">&#x27;Graham Chapman&#x27;</span>, [<span class="hljs-string">&#x27;Michael Palin&#x27;</span>, <span class="hljs-string">&#x27;John Cleese&#x27;</span>, <span class="hljs-string">&#x27;Terry Gilliam&#x27;</span>, <span class="hljs-string">&#x27;Eric Idle&#x27;</span>, <span class="hljs-string">&#x27;Terry Jones&#x27;</span>]]]Eric Idle遍历内嵌列表：The Holy Grail<span class="hljs-number">1975</span>Terry Jones &amp; Terry Gilliam<span class="hljs-number">91</span>[<span class="hljs-string">&#x27;Graham Chapman&#x27;</span>, [<span class="hljs-string">&#x27;Michael Palin&#x27;</span>, <span class="hljs-string">&#x27;John Cleese&#x27;</span>, <span class="hljs-string">&#x27;Terry Gilliam&#x27;</span>, <span class="hljs-string">&#x27;Eric Idle&#x27;</span>, <span class="hljs-string">&#x27;Terry Jones&#x27;</span>]]</code></pre><p>文件读取</p><pre><code class="hljs python"><span class="hljs-comment"># Mark: 通过自定义模块lc_nester来输出列表到指定文件</span><span class="hljs-keyword">import</span> lc_nesterman = []other = []<span class="hljs-keyword">try</span>:    data = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sketch.txt&#x27;</span>)    <span class="hljs-comment"># 使用with语句来处理文件</span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sketch.txt&#x27;</span>) <span class="hljs-keyword">as</span> data:        <span class="hljs-keyword">for</span> each_line <span class="hljs-keyword">in</span> data:            <span class="hljs-keyword">try</span>:                (role, line_spoken) = each_line.split(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-number">1</span>)                <span class="hljs-comment"># 删除行中不需要的空白符</span>                line_spoken = line_spoken.strip()                <span class="hljs-keyword">if</span> role == <span class="hljs-string">&#x27;Man&#x27;</span>:                    man.append(line_spoken)                <span class="hljs-keyword">elif</span> role == <span class="hljs-string">&#x27;Other Man&#x27;</span>:                    other.append(line_spoken)            <span class="hljs-keyword">except</span> ValueError:                <span class="hljs-keyword">pass</span><span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:    print(<span class="hljs-string">&quot;The datafile is missing: &quot;</span>, <span class="hljs-built_in">str</span>(err))print(<span class="hljs-string">&#x27;Man: &#x27;</span>, man)print(<span class="hljs-string">&#x27;Other Man: &#x27;</span>, other)<span class="hljs-comment"># 写入文件</span><span class="hljs-keyword">try</span>:    <span class="hljs-comment"># 并行处理，使用，号隔开</span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;man_data_nester.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> man_file, <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;other_data_nester.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> other_file:        <span class="hljs-comment"># print(man, file=man_file)</span>        <span class="hljs-comment"># print(other, file=other_file)</span>        lc_nester.print_lol(man, out=man_file)        lc_nester.print_lol(other, out=other_file)<span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:    print(<span class="hljs-string">&#x27;File Error: &#x27;</span>, <span class="hljs-built_in">str</span>(err))</code></pre><h3 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h3><p>在同一个目录下先准备好模块文件lc_nester.py</p><pre><code class="hljs python"><span class="hljs-comment"># Mark: 将列表输出到文件或者到屏幕</span><span class="hljs-keyword">import</span> sys<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_lol</span>(<span class="hljs-params">the_list, indent=<span class="hljs-literal">False</span>, level=<span class="hljs-number">0</span>, out=sys.stdout</span>):</span>    <span class="hljs-keyword">for</span> each_item <span class="hljs-keyword">in</span> the_list:        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(each_item, <span class="hljs-built_in">list</span>):            print_lol(each_item, indent, level + <span class="hljs-number">1</span>, out)        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">if</span> indent:                <span class="hljs-keyword">for</span> tab_stop <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(level):                    print(<span class="hljs-string">&quot;\t&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>, file=out)            print(each_item, file=out)</code></pre><h4 id="打包和安装自定义模块"><a href="#打包和安装自定义模块" class="headerlink" title="打包和安装自定义模块"></a>打包和安装自定义模块</h4><p><code>python3 setup.py sdist</code><br><code>python3 setup.py install</code></p><pre><code class="hljs python"><span class="hljs-comment"># 打包</span>$ python3 setup.py sdistrunning sdistrunning checkwarning: sdist: manifest template <span class="hljs-string">&#x27;MANIFEST.in&#x27;</span> does <span class="hljs-keyword">not</span> exist (using default file <span class="hljs-built_in">list</span>)warning: sdist: standard file <span class="hljs-keyword">not</span> found: should have one of README, README.txtwriting manifest file <span class="hljs-string">&#x27;MANIFEST&#x27;</span>creating lc_nester<span class="hljs-number">-1.3</span><span class="hljs-number">.0</span>making hard links <span class="hljs-keyword">in</span> lc_nester<span class="hljs-number">-1.3</span><span class="hljs-number">.0</span>...hard linking lc_nester.py -&gt; lc_nester-1.3.0hard linking setup.py -&gt; lc_nester-1.3.0Creating tar archiveremoving <span class="hljs-string">&#x27;lc_nester-1.3.0&#x27;</span> (<span class="hljs-keyword">and</span> everything under it)<span class="hljs-comment"># 安装</span>$ python3 setup.py installrunning installrunning buildrunning build_pyrunning install_librunning install_egg_infoRemoving /Users/user_name/PycharmPro/aconda/lib/python3<span class="hljs-number">.6</span>/site-packages/lc_nester<span class="hljs-number">-1.3</span><span class="hljs-number">.0</span>-py3<span class="hljs-number">.6</span>.egg-infoWriting /Users/user_name/PycharmPro/aconda/lib/python3<span class="hljs-number">.6</span>/site-packages/lc_nester<span class="hljs-number">-1.3</span><span class="hljs-number">.0</span>-py3<span class="hljs-number">.6</span>.egg-info</code></pre><h4 id="引用自定义模块"><a href="#引用自定义模块" class="headerlink" title="引用自定义模块"></a>引用自定义模块</h4><pre><code class="hljs python"><span class="hljs-comment"># Mark: 通过自定义模块lc_nester来输出列表到指定文件</span><span class="hljs-keyword">import</span> lc_nesterman = []other = []<span class="hljs-keyword">try</span>:    data = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sketch.txt&#x27;</span>)    <span class="hljs-comment"># 使用with语句来处理文件</span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sketch.txt&#x27;</span>) <span class="hljs-keyword">as</span> data:        <span class="hljs-keyword">for</span> each_line <span class="hljs-keyword">in</span> data:            <span class="hljs-keyword">try</span>:                (role, line_spoken) = each_line.split(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-number">1</span>)                <span class="hljs-comment"># 删除行中不需要的空白符</span>                line_spoken = line_spoken.strip()                <span class="hljs-keyword">if</span> role == <span class="hljs-string">&#x27;Man&#x27;</span>:                    man.append(line_spoken)                <span class="hljs-keyword">elif</span> role == <span class="hljs-string">&#x27;Other Man&#x27;</span>:                    other.append(line_spoken)            <span class="hljs-keyword">except</span> ValueError:                <span class="hljs-keyword">pass</span><span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:    print(<span class="hljs-string">&quot;The datafile is missing: &quot;</span>, <span class="hljs-built_in">str</span>(err))print(<span class="hljs-string">&#x27;Man: &#x27;</span>, man)print(<span class="hljs-string">&#x27;Other Man: &#x27;</span>, other)<span class="hljs-comment"># 写入文件</span><span class="hljs-keyword">try</span>:    <span class="hljs-comment"># 并行处理，使用，号隔开</span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;man_data_nester.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> man_file, <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;other_data_nester.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> other_file:        <span class="hljs-comment"># print(man, file=man_file)</span>        <span class="hljs-comment"># print(other, file=other_file)</span>        lc_nester.print_lol(man, out=man_file)        lc_nester.print_lol(other, out=other_file)<span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:    print(<span class="hljs-string">&#x27;File Error: &#x27;</span>, <span class="hljs-built_in">str</span>(err))<span class="hljs-comment"># 输出</span>Man:  [<span class="hljs-string">&#x27;Is this the right room for an argument?&#x27;</span>, <span class="hljs-string">&quot;No you haven&#x27;t!&quot;</span>, <span class="hljs-string">&#x27;When?&#x27;</span>, <span class="hljs-string">&quot;No you didn&#x27;t!&quot;</span>, <span class="hljs-string">&quot;You didn&#x27;t!&quot;</span>, <span class="hljs-string">&#x27;You did not!&#x27;</span>, <span class="hljs-string">&#x27;Ah! (taking out his wallet and paying) Just the five minutes.&#x27;</span>, <span class="hljs-string">&#x27;You most certainly did not!&#x27;</span>, <span class="hljs-string">&quot;Oh no you didn&#x27;t!&quot;</span>, <span class="hljs-string">&quot;Oh no you didn&#x27;t!&quot;</span>, <span class="hljs-string">&quot;Oh look, this isn&#x27;t an argument!&quot;</span>, <span class="hljs-string">&quot;No it isn&#x27;t!&quot;</span>, <span class="hljs-string">&quot;It&#x27;s just contradiction!&quot;</span>, <span class="hljs-string">&#x27;It IS!&#x27;</span>, <span class="hljs-string">&#x27;You just contradicted me!&#x27;</span>, <span class="hljs-string">&#x27;You DID!&#x27;</span>, <span class="hljs-string">&#x27;You did just then!&#x27;</span>, <span class="hljs-string">&#x27;(exasperated) Oh, this is futile!!&#x27;</span>, <span class="hljs-string">&#x27;Yes it is!&#x27;</span>]Other Man:  [<span class="hljs-string">&quot;I&#x27;ve told you once.&quot;</span>, <span class="hljs-string">&#x27;Yes I have.&#x27;</span>, <span class="hljs-string">&#x27;Just now.&#x27;</span>, <span class="hljs-string">&#x27;Yes I did!&#x27;</span>, <span class="hljs-string">&quot;I&#x27;m telling you, I did!&quot;</span>, <span class="hljs-string">&quot;Oh I&#x27;m sorry, is this a five minute argument, or the full half hour?&quot;</span>, <span class="hljs-string">&#x27;Just the five minutes. Thank you.&#x27;</span>, <span class="hljs-string">&#x27;Anyway, I did.&#x27;</span>, <span class="hljs-string">&quot;Now let&#x27;s get one thing quite clear: I most definitely told you!&quot;</span>, <span class="hljs-string">&#x27;Oh yes I did!&#x27;</span>, <span class="hljs-string">&#x27;Oh yes I did!&#x27;</span>, <span class="hljs-string">&#x27;Yes it is!&#x27;</span>, <span class="hljs-string">&quot;No it isn&#x27;t!&quot;</span>, <span class="hljs-string">&#x27;It is NOT!&#x27;</span>, <span class="hljs-string">&quot;No I didn&#x27;t!&quot;</span>, <span class="hljs-string">&#x27;No no no!&#x27;</span>, <span class="hljs-string">&#x27;Nonsense!&#x27;</span>, <span class="hljs-string">&quot;No it isn&#x27;t!&quot;</span>]</code></pre><h3 id="推导列表"><a href="#推导列表" class="headerlink" title="推导列表"></a>推导列表</h3><p>列表推导可以最大限度的简化代码，从右向左看，便于理解。如：<br><code>sorted(set([float(sanitize(t)) for t in james]), reverse=True)[0:3]</code></p><pre><code class="hljs python"><span class="hljs-comment"># Mark: 读取4个数据文件至列表，并在屏幕上打印</span><span class="hljs-comment"># 列表</span>james = []julie = []mikey = []sarah = []<span class="hljs-comment"># 读取文件数据</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_coach_data</span>(<span class="hljs-params">file_name</span>):</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name) <span class="hljs-keyword">as</span> f:            data = f.readline()        <span class="hljs-keyword">return</span> data.strip().split(<span class="hljs-string">&#x27;,&#x27;</span>)    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:        print(<span class="hljs-string">&#x27;File IO error: &#x27;</span>, <span class="hljs-built_in">str</span>(err))        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><span class="hljs-comment"># 清洗时间数据</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sanitize</span>(<span class="hljs-params">time_string</span>):</span>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">in</span> time_string:        splitter = <span class="hljs-string">&#x27;-&#x27;</span>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-keyword">in</span> time_string:        splitter = <span class="hljs-string">&#x27;:&#x27;</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> time_string    (mins, secs) = time_string.split(splitter)    <span class="hljs-keyword">return</span> mins + <span class="hljs-string">&#x27;.&#x27;</span> + secsjames = get_coach_data(<span class="hljs-string">&#x27;james.txt&#x27;</span>)julie = get_coach_data(<span class="hljs-string">&#x27;julie.txt&#x27;</span>)mikey = get_coach_data(<span class="hljs-string">&#x27;mikey.txt&#x27;</span>)sarah = get_coach_data(<span class="hljs-string">&#x27;sarah.txt&#x27;</span>)print(<span class="hljs-string">&#x27;james: &#x27;</span>, james)print(<span class="hljs-string">&#x27;james set: &#x27;</span>, <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>([<span class="hljs-built_in">float</span>(sanitize(t)) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> james]), reverse=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])print(<span class="hljs-string">&#x27;julie: &#x27;</span>, julie)print(<span class="hljs-string">&#x27;julie set: &#x27;</span>, <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>([<span class="hljs-built_in">float</span>(sanitize(t)) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> julie]), reverse=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])print(<span class="hljs-string">&#x27;mikey: &#x27;</span>, mikey)print(<span class="hljs-string">&#x27;mikey set: &#x27;</span>, <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>([<span class="hljs-built_in">float</span>(sanitize(t)) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> mikey]), reverse=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])print(<span class="hljs-string">&#x27;sarah: &#x27;</span>, sarah)print(<span class="hljs-string">&#x27;sarah set: &#x27;</span>, <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>([<span class="hljs-built_in">float</span>(sanitize(t)) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> sarah]), reverse=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])<span class="hljs-comment"># 输出</span>james:  [<span class="hljs-string">&#x27;2-34&#x27;</span>, <span class="hljs-string">&#x27;3:21&#x27;</span>, <span class="hljs-string">&#x27;2.34&#x27;</span>, <span class="hljs-string">&#x27;2.45&#x27;</span>, <span class="hljs-string">&#x27;3.01&#x27;</span>, <span class="hljs-string">&#x27;2:01&#x27;</span>, <span class="hljs-string">&#x27;2:01&#x27;</span>, <span class="hljs-string">&#x27;3:10&#x27;</span>, <span class="hljs-string">&#x27;2-22&#x27;</span>]james <span class="hljs-built_in">set</span>:  [<span class="hljs-number">3.21</span>, <span class="hljs-number">3.1</span>, <span class="hljs-number">3.01</span>]julie:  [<span class="hljs-string">&#x27;2.59&#x27;</span>, <span class="hljs-string">&#x27;2.11&#x27;</span>, <span class="hljs-string">&#x27;2:11&#x27;</span>, <span class="hljs-string">&#x27;2:23&#x27;</span>, <span class="hljs-string">&#x27;3-10&#x27;</span>, <span class="hljs-string">&#x27;2-23&#x27;</span>, <span class="hljs-string">&#x27;3:10&#x27;</span>, <span class="hljs-string">&#x27;3.21&#x27;</span>, <span class="hljs-string">&#x27;3-21&#x27;</span>]julie <span class="hljs-built_in">set</span>:  [<span class="hljs-number">3.21</span>, <span class="hljs-number">3.1</span>, <span class="hljs-number">2.59</span>]mikey:  [<span class="hljs-string">&#x27;2:22&#x27;</span>, <span class="hljs-string">&#x27;3.01&#x27;</span>, <span class="hljs-string">&#x27;3:01&#x27;</span>, <span class="hljs-string">&#x27;3.02&#x27;</span>, <span class="hljs-string">&#x27;3:02&#x27;</span>, <span class="hljs-string">&#x27;3.02&#x27;</span>, <span class="hljs-string">&#x27;3:22&#x27;</span>, <span class="hljs-string">&#x27;2.49&#x27;</span>, <span class="hljs-string">&#x27;2:38&#x27;</span>]mikey <span class="hljs-built_in">set</span>:  [<span class="hljs-number">3.22</span>, <span class="hljs-number">3.02</span>, <span class="hljs-number">3.01</span>]sarah:  [<span class="hljs-string">&#x27;2:58&#x27;</span>, <span class="hljs-string">&#x27;2.58&#x27;</span>, <span class="hljs-string">&#x27;2:39&#x27;</span>, <span class="hljs-string">&#x27;2-25&#x27;</span>, <span class="hljs-string">&#x27;2-55&#x27;</span>, <span class="hljs-string">&#x27;2:54&#x27;</span>, <span class="hljs-string">&#x27;2.18&#x27;</span>, <span class="hljs-string">&#x27;2:55&#x27;</span>, <span class="hljs-string">&#x27;2:55&#x27;</span>]</code></pre><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>字典是一个内置的数据结构（内置于Python中），允许将数据与键而不是数字关联。这样可以使内存中的数据与实际数据的结构保持一致。</p><pre><code class="hljs python"><span class="hljs-comment"># Mark: 读取4个数据文件至列表，排序后，放至字典数据结构中, 将处理细节放至函数中</span><span class="hljs-comment"># 字典</span>james = &#123;&#125;julie = &#123;&#125;mikey = &#123;&#125;sarah = &#123;&#125;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_coach_data</span>(<span class="hljs-params">file_name</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    读取文件数据，返回一个字典结构</span><span class="hljs-string">    :param file_name:</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name) <span class="hljs-keyword">as</span> f:            data = f.readline()        file_list = data.strip().split(<span class="hljs-string">&#x27;,&#x27;</span>)        <span class="hljs-comment"># data_dic = dict()</span>        <span class="hljs-comment"># data_dic[&#x27;name&#x27;] = file_list.pop(0)</span>        <span class="hljs-comment"># data_dic[&#x27;birthday&#x27;] = file_list.pop(0)</span>        <span class="hljs-comment"># # data_dic[&#x27;time&#x27;] = file_list</span>        <span class="hljs-comment"># data_dic[&#x27;time&#x27;] = str(sorted(set([sanitize(t) for t in file_list]))[0:3])</span>        <span class="hljs-comment"># return data_dic</span>        <span class="hljs-keyword">return</span> &#123;            <span class="hljs-string">&#x27;name&#x27;</span>: file_list.pop(<span class="hljs-number">0</span>),            <span class="hljs-string">&#x27;birthday&#x27;</span>: file_list.pop(<span class="hljs-number">0</span>),            <span class="hljs-string">&#x27;time&#x27;</span>: <span class="hljs-built_in">str</span>(<span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>([sanitize(t) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> file_list]))[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])        &#125;    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:        print(<span class="hljs-string">&#x27;File IO error: &#x27;</span>, <span class="hljs-built_in">str</span>(err))        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><span class="hljs-comment"># 清洗时间数据</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sanitize</span>(<span class="hljs-params">time_string</span>):</span>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">in</span> time_string:        splitter = <span class="hljs-string">&#x27;-&#x27;</span>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-keyword">in</span> time_string:        splitter = <span class="hljs-string">&#x27;:&#x27;</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> time_string    (mins, secs) = time_string.split(splitter)    <span class="hljs-keyword">return</span> mins + <span class="hljs-string">&#x27;.&#x27;</span> + secsjames = get_coach_data(<span class="hljs-string">&#x27;james2.txt&#x27;</span>)print(<span class="hljs-string">&#x27;james: &#x27;</span>, james)print(james[<span class="hljs-string">&#x27;name&#x27;</span>] + <span class="hljs-string">&quot;&#x27;s faster times are: &quot;</span> + james[<span class="hljs-string">&#x27;time&#x27;</span>])julie = get_coach_data(<span class="hljs-string">&#x27;julie2.txt&#x27;</span>)print(<span class="hljs-string">&#x27;julie: &#x27;</span>, julie)print(julie[<span class="hljs-string">&#x27;name&#x27;</span>] + <span class="hljs-string">&quot;&#x27;s faster times are: &quot;</span> + julie[<span class="hljs-string">&#x27;time&#x27;</span>])mikey = get_coach_data(<span class="hljs-string">&#x27;mikey2.txt&#x27;</span>)print(<span class="hljs-string">&#x27;mikey: &#x27;</span>, mikey)print(mikey[<span class="hljs-string">&#x27;name&#x27;</span>] + <span class="hljs-string">&quot;&#x27;s faster times are: &quot;</span> + mikey[<span class="hljs-string">&#x27;time&#x27;</span>])sarah = get_coach_data(<span class="hljs-string">&#x27;sarah2.txt&#x27;</span>)print(<span class="hljs-string">&#x27;sarah: &#x27;</span>, sarah)print(sarah[<span class="hljs-string">&#x27;name&#x27;</span>] + <span class="hljs-string">&quot;&#x27;s faster times are: &quot;</span> + sarah[<span class="hljs-string">&#x27;time&#x27;</span>])<span class="hljs-comment"># 输出</span>james:  &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;James Lee&#x27;</span>, <span class="hljs-string">&#x27;birthday&#x27;</span>: <span class="hljs-string">&#x27;2002-3-14&#x27;</span>, <span class="hljs-string">&#x27;time&#x27;</span>: <span class="hljs-string">&quot;[&#x27;2.01&#x27;, &#x27;2.16&#x27;, &#x27;2.22&#x27;]&quot;</span>&#125;James Lee<span class="hljs-string">&#x27;s faster times are: [&#x27;</span><span class="hljs-number">2.01</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.16</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.22</span><span class="hljs-string">&#x27;]</span><span class="hljs-string">julie:  &#123;&#x27;</span>name<span class="hljs-string">&#x27;: &#x27;</span>Julie Jones<span class="hljs-string">&#x27;, &#x27;</span>birthday<span class="hljs-string">&#x27;: &#x27;</span><span class="hljs-number">2002</span><span class="hljs-number">-8</span><span class="hljs-number">-17</span><span class="hljs-string">&#x27;, &#x27;</span>time<span class="hljs-string">&#x27;: &quot;[&#x27;</span><span class="hljs-number">2.11</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.23</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.59</span><span class="hljs-string">&#x27;]&quot;&#125;</span><span class="hljs-string">Julie Jones&#x27;</span>s faster times are: [<span class="hljs-string">&#x27;2.11&#x27;</span>, <span class="hljs-string">&#x27;2.23&#x27;</span>, <span class="hljs-string">&#x27;2.59&#x27;</span>]mikey:  &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Mikey McManus&#x27;</span>, <span class="hljs-string">&#x27;birthday&#x27;</span>: <span class="hljs-string">&#x27;2002-2-24&#x27;</span>, <span class="hljs-string">&#x27;time&#x27;</span>: <span class="hljs-string">&quot;[&#x27;2.22&#x27;, &#x27;2.31&#x27;, &#x27;2.38&#x27;]&quot;</span>&#125;Mikey McManus<span class="hljs-string">&#x27;s faster times are: [&#x27;</span><span class="hljs-number">2.22</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.31</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.38</span><span class="hljs-string">&#x27;]</span><span class="hljs-string">sarah:  &#123;&#x27;</span>name<span class="hljs-string">&#x27;: &#x27;</span>Sarah Sweeney<span class="hljs-string">&#x27;, &#x27;</span>birthday<span class="hljs-string">&#x27;: &#x27;</span><span class="hljs-number">2002</span><span class="hljs-number">-6</span><span class="hljs-number">-17</span><span class="hljs-string">&#x27;, &#x27;</span>time<span class="hljs-string">&#x27;: &quot;[&#x27;</span><span class="hljs-number">2.18</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.21</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.22</span><span class="hljs-string">&#x27;]&quot;&#125;</span><span class="hljs-string">Sarah Sweeney&#x27;</span>s faster times are: [<span class="hljs-string">&#x27;2.18&#x27;</span>, <span class="hljs-string">&#x27;2.21&#x27;</span>, <span class="hljs-string">&#x27;2.22&#x27;</span>]</code></pre><h3 id="对象类"><a href="#对象类" class="headerlink" title="对象类"></a>对象类</h3><p>Python遵循标准的面向对象编程模型，提供了一种方法允许将代码及其处理的数据定义为一个类。<br>就可以用它来创建（或实例化）数据对象，它会继承类的特性。</p><ul><li>类的方法：对象代码</li><li>类的属性：数据</li><li>实例：实例化的数据对象</li></ul><pre><code class="hljs python"><span class="hljs-comment"># Mark: 定义一个运动数据类</span><span class="hljs-comment"># 类的属性最好保存原始数据，需要计算得出的数据最好通过方法来实现，保持灵活与扩展</span><span class="hljs-comment"># 通常把代码与数据封装到一个定制类中。方便维护</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Athlete</span>:</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    选手类，包含姓名，年龄，运动时间</span><span class="hljs-string">    类的好处，更多功能 = 更多方法，如top3()</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, a_name, a_dob=<span class="hljs-literal">None</span>, a_times=[]</span>):</span>        self.name = a_name        self.dob = a_dob        self.times = a_times    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top3</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        取出最快的三个时间</span><span class="hljs-string">        格式化，去重，排序，转换成字符串</span><span class="hljs-string">        :return: 返回最好是一个原始列表，你不知道调用者怎么处理这个列表，不要假设是字符串</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-comment"># return str(sorted(set([sanitize(t) for t in self.times]))[0:3])</span>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>([sanitize(t) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> self.times]))[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_time</span>(<span class="hljs-params">self, a_time</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        将一个额外的计时值追加到选手的计时数据</span><span class="hljs-string">        :param a_time:</span><span class="hljs-string">        :return:</span><span class="hljs-string">        &quot;&quot;&quot;</span>        self.times.append(a_time)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_times</span>(<span class="hljs-params">self, a_times</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        会用一个或多个计时值（提供为一个列表），来扩展一个选手的计时数据</span><span class="hljs-string">        运用extend方法</span><span class="hljs-string">        :param a_times:</span><span class="hljs-string">        :return:</span><span class="hljs-string">        &quot;&quot;&quot;</span>        self.times.extend(a_times)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sanitize</span>(<span class="hljs-params">time_string</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    清洗时间数据</span><span class="hljs-string">    :param time_string:</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">in</span> time_string:        splitter = <span class="hljs-string">&#x27;-&#x27;</span>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-keyword">in</span> time_string:        splitter = <span class="hljs-string">&#x27;:&#x27;</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> time_string    (mins, secs) = time_string.split(splitter)    <span class="hljs-keyword">return</span> mins + <span class="hljs-string">&#x27;.&#x27;</span> + secs<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_coach_data</span>(<span class="hljs-params">file_name</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    读取文本数据</span><span class="hljs-string">    :param file_name:</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name) <span class="hljs-keyword">as</span> f:            data = f.readline()        <span class="hljs-comment"># 去空白符，切割</span>        templ = data.strip().split(<span class="hljs-string">&#x27;,&#x27;</span>)        <span class="hljs-keyword">return</span> Athlete(templ.pop(<span class="hljs-number">0</span>), templ.pop(<span class="hljs-number">0</span>), templ)        <span class="hljs-comment"># templ_name = templ.pop(0)</span>        <span class="hljs-comment"># templ_dob = templ.pop(0)</span>        <span class="hljs-comment"># templ_times = templ</span>        <span class="hljs-comment"># print(&quot;templ&#x27;s times: &quot;, templ)</span>        <span class="hljs-comment"># return Athlete(templ_name, templ_dob, templ_times)</span>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:        print(<span class="hljs-string">&#x27;File error: &#x27;</span> + <span class="hljs-built_in">str</span>(err))        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><span class="hljs-comment"># 获取数据</span>james = get_coach_data(<span class="hljs-string">&#x27;james2.txt&#x27;</span>)julie = get_coach_data(<span class="hljs-string">&#x27;julie2.txt&#x27;</span>)mikey = get_coach_data(<span class="hljs-string">&#x27;mikey2.txt&#x27;</span>)sarah = get_coach_data(<span class="hljs-string">&#x27;sarah2.txt&#x27;</span>)print(james.name + <span class="hljs-string">&quot;&#x27;s fastest times are: &quot;</span> + <span class="hljs-built_in">str</span>(james.top3()))print(julie.name + <span class="hljs-string">&quot;&#x27;s fastest times are: &quot;</span> + <span class="hljs-built_in">str</span>(julie.top3()))print(mikey.name + <span class="hljs-string">&quot;&#x27;s fastest times are: &quot;</span> + <span class="hljs-built_in">str</span>(mikey.top3()))print(sarah.name + <span class="hljs-string">&quot;&#x27;s fastest times are: &quot;</span> + <span class="hljs-built_in">str</span>(sarah.top3()))<span class="hljs-comment"># 输出</span>James Lee<span class="hljs-string">&#x27;s fastest times are: [&#x27;</span><span class="hljs-number">2.01</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.16</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.22</span><span class="hljs-string">&#x27;]</span><span class="hljs-string">Julie Jones&#x27;</span>s fastest times are: [<span class="hljs-string">&#x27;2.11&#x27;</span>, <span class="hljs-string">&#x27;2.23&#x27;</span>, <span class="hljs-string">&#x27;2.59&#x27;</span>]Mikey McManus<span class="hljs-string">&#x27;s fastest times are: [&#x27;</span><span class="hljs-number">2.22</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.31</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.38</span><span class="hljs-string">&#x27;]</span><span class="hljs-string">Sarah Sweeney&#x27;</span>s fastest times are: [<span class="hljs-string">&#x27;2.18&#x27;</span>, <span class="hljs-string">&#x27;2.21&#x27;</span>, <span class="hljs-string">&#x27;2.22&#x27;</span>]</code></pre><h3 id="对象类继承内置对象"><a href="#对象类继承内置对象" class="headerlink" title="对象类继承内置对象"></a>对象类继承内置对象</h3><p>Python的class还允许通过继承现有的其他类来创建一个类，可包括用list，set和dict提供的Python内置数据结构类。通过继承来创建的这些类为子类。</p><pre><code class="hljs python"><span class="hljs-comment"># Mark: 利用继承重写coach Athlete类，继承列表</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AthleteList</span>(<span class="hljs-params"><span class="hljs-built_in">list</span></span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    初始化选手信息，继承list</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, a_name, a_dob=<span class="hljs-literal">None</span>, a_times=[]</span>):</span>        <span class="hljs-built_in">list</span>.__init__([])        self.name = a_name        self.dob = a_dob        <span class="hljs-comment"># 利用列表</span>        self.extend(a_times)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top3</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        获取最快的3个运动时间</span><span class="hljs-string">        :return:</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-comment"># 数据本身是计时数据，不再需要times属性</span>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>([sanitize(t) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> self]))[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sanitize</span>(<span class="hljs-params">time_string</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    清洗时间数据</span><span class="hljs-string">    :param time_string:</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">in</span> time_string:        splitter = <span class="hljs-string">&#x27;-&#x27;</span>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-keyword">in</span> time_string:        splitter = <span class="hljs-string">&#x27;:&#x27;</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> time_string    (mins, secs) = time_string.split(splitter)    <span class="hljs-keyword">return</span> mins + <span class="hljs-string">&#x27;.&#x27;</span> + secs<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_coach_data</span>(<span class="hljs-params">file_name</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    获取选手运动数据</span><span class="hljs-string">    :param file_name:</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name) <span class="hljs-keyword">as</span> f:            data = f.readline()        templ = data.strip().split(<span class="hljs-string">&#x27;,&#x27;</span>)        <span class="hljs-keyword">return</span> AthleteList(templ.pop(<span class="hljs-number">0</span>), templ.pop(<span class="hljs-number">0</span>), templ)    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:        print(<span class="hljs-string">&quot;File error: &quot;</span> + <span class="hljs-built_in">str</span>(err))        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>james = get_coach_data(<span class="hljs-string">&quot;james2.txt&quot;</span>)julie = get_coach_data(<span class="hljs-string">&quot;julie2.txt&quot;</span>)mikey = get_coach_data(<span class="hljs-string">&quot;mikey2.txt&quot;</span>)sarah = get_coach_data(<span class="hljs-string">&quot;sarah2.txt&quot;</span>)print(james.name + <span class="hljs-string">&quot;&#x27;s fastest times are: &quot;</span> + <span class="hljs-built_in">str</span>(james.top3()))print(julie.name + <span class="hljs-string">&quot;&#x27;s fastest times are: &quot;</span> + <span class="hljs-built_in">str</span>(julie.top3()))print(mikey.name + <span class="hljs-string">&quot;&#x27;s fastest times are: &quot;</span> + <span class="hljs-built_in">str</span>(mikey.top3()))print(sarah.name + <span class="hljs-string">&quot;&#x27;s fastest times are: &quot;</span> + <span class="hljs-built_in">str</span>(sarah.top3()))<span class="hljs-comment"># 输出</span>James Lee<span class="hljs-string">&#x27;s fastest times are: [&#x27;</span><span class="hljs-number">2.01</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.16</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.22</span><span class="hljs-string">&#x27;]</span><span class="hljs-string">Julie Jones&#x27;</span>s fastest times are: [<span class="hljs-string">&#x27;2.11&#x27;</span>, <span class="hljs-string">&#x27;2.23&#x27;</span>, <span class="hljs-string">&#x27;2.59&#x27;</span>]Mikey McManus<span class="hljs-string">&#x27;s fastest times are: [&#x27;</span><span class="hljs-number">2.22</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.31</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.38</span><span class="hljs-string">&#x27;]</span><span class="hljs-string">Sarah Sweeney&#x27;</span>s fastest times are: [<span class="hljs-string">&#x27;2.18&#x27;</span>, <span class="hljs-string">&#x27;2.21&#x27;</span>, <span class="hljs-string">&#x27;2.22&#x27;</span>]</code></pre><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> sqlite3db_name = <span class="hljs-string">&#x27;coachdata.sqlite&#x27;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_names_from_store</span>():</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    从sqlite数据库的athletes表中获取姓名信息</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    connection = sqlite3.connect(db_name)    cursor = connection.cursor()    <span class="hljs-comment"># 抽取数据</span>    results = cursor.execute(<span class="hljs-string">&quot;&quot;&quot;SELECT name FROM athletes&quot;&quot;&quot;</span>)    response = [row[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> results.fetchall()]    connection.close()    <span class="hljs-keyword">return</span> responseresult_name = get_names_from_store()print(result_name)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_names_id_from_store</span>():</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    从sqlite数据库的athletes表中获取姓名和ID信息</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    connection = sqlite3.connect(db_name)    cursor = connection.cursor()    results = cursor.execute(<span class="hljs-string">&quot;&quot;&quot;SELECT name, id FROM athletes&quot;&quot;&quot;</span>)    response = results.fetchall()    connection.close()    <span class="hljs-keyword">return</span> responseresult_name = get_names_id_from_store()print(result_name)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_athlete_from_id</span>(<span class="hljs-params">athlete_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    获取与指定id相关的计时数据</span><span class="hljs-string">    :param athlete_id:</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    connection = sqlite3.connect(db_name)    cursor = connection.cursor()    results = cursor.execute(<span class="hljs-string">&quot;&quot;&quot;SELECT name, dob FROM athletes WHERE id=?&quot;&quot;&quot;</span>, (athlete_id,))    (name, dob) = results.fetchone()    results = cursor.execute(<span class="hljs-string">&quot;&quot;&quot;SELECT value FROM timing_data WHERE athlete_id=?&quot;&quot;&quot;</span>, (athlete_id,))    data = [row[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> results.fetchall()]    connection.close()    response = &#123;        <span class="hljs-string">&#x27;name&#x27;</span>: name,        <span class="hljs-string">&#x27;dob&#x27;</span>: dob,        <span class="hljs-string">&#x27;data&#x27;</span>: data,        <span class="hljs-string">&#x27;top3&#x27;</span>: data[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]    &#125;    <span class="hljs-keyword">return</span> responseresult_timing = get_athlete_from_id(<span class="hljs-number">2</span>)print(result_timing)<span class="hljs-comment"># 输出</span>[<span class="hljs-string">&#x27;James Lee&#x27;</span>, <span class="hljs-string">&#x27;Mikey McManus&#x27;</span>, <span class="hljs-string">&#x27;Sarah Sweeney&#x27;</span>, <span class="hljs-string">&#x27;Julie Jones&#x27;</span>, <span class="hljs-string">&#x27;James Lee&#x27;</span>, <span class="hljs-string">&#x27;Mikey McManus&#x27;</span>, <span class="hljs-string">&#x27;Sarah Sweeney&#x27;</span>, <span class="hljs-string">&#x27;Julie Jones&#x27;</span>][(<span class="hljs-string">&#x27;James Lee&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;Mikey McManus&#x27;</span>, <span class="hljs-number">2</span>), (<span class="hljs-string">&#x27;Sarah Sweeney&#x27;</span>, <span class="hljs-number">3</span>), (<span class="hljs-string">&#x27;Julie Jones&#x27;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&#x27;James Lee&#x27;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&#x27;Mikey McManus&#x27;</span>, <span class="hljs-number">6</span>), (<span class="hljs-string">&#x27;Sarah Sweeney&#x27;</span>, <span class="hljs-number">7</span>), (<span class="hljs-string">&#x27;Julie Jones&#x27;</span>, <span class="hljs-number">8</span>)]&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Mikey McManus&#x27;</span>, <span class="hljs-string">&#x27;dob&#x27;</span>: <span class="hljs-string">&#x27;2002-2-24&#x27;</span>, <span class="hljs-string">&#x27;data&#x27;</span>: [<span class="hljs-string">&#x27;2.22&#x27;</span>, <span class="hljs-string">&#x27;2.31&#x27;</span>, <span class="hljs-string">&#x27;2.38&#x27;</span>, <span class="hljs-string">&#x27;2.40&#x27;</span>, <span class="hljs-string">&#x27;2.49&#x27;</span>, <span class="hljs-string">&#x27;3.01&#x27;</span>, <span class="hljs-string">&#x27;3.02&#x27;</span>, <span class="hljs-string">&#x27;3.22&#x27;</span>], <span class="hljs-string">&#x27;top3&#x27;</span>: [<span class="hljs-string">&#x27;2.22&#x27;</span>, <span class="hljs-string">&#x27;2.31&#x27;</span>, <span class="hljs-string">&#x27;2.38&#x27;</span>]&#125;</code></pre><h3 id="处理复杂数据"><a href="#处理复杂数据" class="headerlink" title="处理复杂数据"></a>处理复杂数据</h3><p>从input读入数据，匹配最近的运动时间数据。</p><pre><code class="hljs python"><span class="hljs-comment"># 数据：PaceData.csv</span>V02,<span class="hljs-number">84.8</span>,<span class="hljs-number">82.9</span>,<span class="hljs-number">81.1</span>,<span class="hljs-number">79.3</span>,<span class="hljs-number">77.5</span>,<span class="hljs-number">75.8</span>,<span class="hljs-number">74.2</span>,<span class="hljs-number">72.5</span>,<span class="hljs-number">70.9</span>,<span class="hljs-number">69.4</span>,<span class="hljs-number">67.9</span>,<span class="hljs-number">66.4</span>,<span class="hljs-number">64.9</span>,<span class="hljs-number">63.5</span>,<span class="hljs-number">62.1</span>,<span class="hljs-number">60.7</span>,<span class="hljs-number">59.4</span>,<span class="hljs-number">58.1</span>,<span class="hljs-number">56.8</span>,<span class="hljs-number">55.5</span>,<span class="hljs-number">54.3</span>,<span class="hljs-number">53.1</span>,<span class="hljs-number">52</span>,<span class="hljs-number">50.8</span>,<span class="hljs-number">49.7</span>,<span class="hljs-number">48.6</span>,<span class="hljs-number">47.5</span>,<span class="hljs-number">46.5</span>,<span class="hljs-number">45.5</span>,<span class="hljs-number">44.5</span>,<span class="hljs-number">43.5</span>,<span class="hljs-number">42.5</span>,<span class="hljs-number">41.6</span>,<span class="hljs-number">40.7</span>,<span class="hljs-number">39.8</span>,<span class="hljs-number">38.9</span>,<span class="hljs-number">38</span>,<span class="hljs-number">37.2</span>,<span class="hljs-number">36.4</span>,<span class="hljs-number">35.6</span>,<span class="hljs-number">34.8</span>,<span class="hljs-number">34</span>,<span class="hljs-number">33.3</span>,<span class="hljs-number">32.6</span>,<span class="hljs-number">31.8</span>,<span class="hljs-number">31.1</span>,<span class="hljs-number">30.5</span>,<span class="hljs-number">29.8</span>,<span class="hljs-number">29.1</span>,<span class="hljs-number">28.5</span><span class="hljs-number">2</span>mi,<span class="hljs-number">8</span>:<span class="hljs-number">00</span>,<span class="hljs-number">8</span>:<span class="hljs-number">10</span>,<span class="hljs-number">8</span>:<span class="hljs-number">21</span>,<span class="hljs-number">8</span>:<span class="hljs-number">33</span>,<span class="hljs-number">8</span>:<span class="hljs-number">44</span>,<span class="hljs-number">8</span>:<span class="hljs-number">56</span>,<span class="hljs-number">9</span>:<span class="hljs-number">08</span>,<span class="hljs-number">9</span>:<span class="hljs-number">20</span>,<span class="hljs-number">9</span>:<span class="hljs-number">33</span>,<span class="hljs-number">9</span>:<span class="hljs-number">46</span>,<span class="hljs-number">9</span>:<span class="hljs-number">59</span>,<span class="hljs-number">10</span>:<span class="hljs-number">13</span>,<span class="hljs-number">10</span>:<span class="hljs-number">26</span>,<span class="hljs-number">10</span>:<span class="hljs-number">41</span>,<span class="hljs-number">10</span>:<span class="hljs-number">55</span>,<span class="hljs-number">11</span>:<span class="hljs-number">10</span>,<span class="hljs-number">11</span>:<span class="hljs-number">25</span>,<span class="hljs-number">11</span>:<span class="hljs-number">40</span>,<span class="hljs-number">11</span>:<span class="hljs-number">56</span>,<span class="hljs-number">12</span>:<span class="hljs-number">12</span>,<span class="hljs-number">12</span>:<span class="hljs-number">29</span>,<span class="hljs-number">12</span>:<span class="hljs-number">45</span>,<span class="hljs-number">13</span>:<span class="hljs-number">03</span>,<span class="hljs-number">13</span>:<span class="hljs-number">20</span>,<span class="hljs-number">13</span>:<span class="hljs-number">38</span>,<span class="hljs-number">13</span>:<span class="hljs-number">57</span>,<span class="hljs-number">14</span>:<span class="hljs-number">16</span>,<span class="hljs-number">14</span>:<span class="hljs-number">35</span>,<span class="hljs-number">14</span>:<span class="hljs-number">54</span>,<span class="hljs-number">15</span>:<span class="hljs-number">15</span>,<span class="hljs-number">15</span>:<span class="hljs-number">35</span>,<span class="hljs-number">15</span>:<span class="hljs-number">56</span>,<span class="hljs-number">16</span>:<span class="hljs-number">18</span>,<span class="hljs-number">16</span>:<span class="hljs-number">40</span>,<span class="hljs-number">17</span>:<span class="hljs-number">02</span>,<span class="hljs-number">17</span>:<span class="hljs-number">25</span>,<span class="hljs-number">17</span>:<span class="hljs-number">49</span>,<span class="hljs-number">18</span>:<span class="hljs-number">13</span>,<span class="hljs-number">18</span>:<span class="hljs-number">38</span>,<span class="hljs-number">19</span>:<span class="hljs-number">03</span>,<span class="hljs-number">19</span>:<span class="hljs-number">28</span>,<span class="hljs-number">19</span>:<span class="hljs-number">55</span>,<span class="hljs-number">20</span>:<span class="hljs-number">22</span>,<span class="hljs-number">20</span>:<span class="hljs-number">49</span>,<span class="hljs-number">21</span>:<span class="hljs-number">17</span>,<span class="hljs-number">21</span>:<span class="hljs-number">46</span>,<span class="hljs-number">22</span>:<span class="hljs-number">15</span>,<span class="hljs-number">22</span>:<span class="hljs-number">45</span>,<span class="hljs-number">23</span>:<span class="hljs-number">16</span>,<span class="hljs-number">23</span>:<span class="hljs-number">48</span><span class="hljs-number">5</span>k,<span class="hljs-number">12</span>:<span class="hljs-number">49</span>,<span class="hljs-number">13</span>:<span class="hljs-number">06</span>,<span class="hljs-number">13</span>:<span class="hljs-number">24</span>,<span class="hljs-number">13</span>:<span class="hljs-number">42</span>,<span class="hljs-number">14</span>:<span class="hljs-number">00</span>,<span class="hljs-number">14</span>:<span class="hljs-number">19</span>,<span class="hljs-number">14</span>:<span class="hljs-number">38</span>,<span class="hljs-number">14</span>:<span class="hljs-number">58</span>,<span class="hljs-number">15</span>:<span class="hljs-number">18</span>,<span class="hljs-number">15</span>:<span class="hljs-number">39</span>,<span class="hljs-number">16</span>:<span class="hljs-number">00</span>,<span class="hljs-number">16</span>:<span class="hljs-number">22</span>,<span class="hljs-number">16</span>:<span class="hljs-number">44</span>,<span class="hljs-number">17</span>:<span class="hljs-number">06</span>,<span class="hljs-number">17</span>:<span class="hljs-number">30</span>,<span class="hljs-number">17</span>:<span class="hljs-number">53</span>,<span class="hljs-number">18</span>:<span class="hljs-number">17</span>,<span class="hljs-number">18</span>:<span class="hljs-number">42</span>,<span class="hljs-number">19</span>:<span class="hljs-number">07</span>,<span class="hljs-number">19</span>:<span class="hljs-number">33</span>,<span class="hljs-number">20</span>:<span class="hljs-number">00</span>,<span class="hljs-number">20</span>:<span class="hljs-number">27</span>,<span class="hljs-number">20</span>:<span class="hljs-number">54</span>,<span class="hljs-number">21</span>:<span class="hljs-number">22</span>,<span class="hljs-number">21</span>:<span class="hljs-number">51</span>,<span class="hljs-number">22</span>:<span class="hljs-number">21</span>,<span class="hljs-number">22</span>:<span class="hljs-number">51</span>,<span class="hljs-number">23</span>:<span class="hljs-number">22</span>,<span class="hljs-number">23</span>:<span class="hljs-number">53</span>,<span class="hljs-number">24</span>:<span class="hljs-number">26</span>,<span class="hljs-number">24</span>:<span class="hljs-number">59</span>,<span class="hljs-number">25</span>:<span class="hljs-number">32</span>,<span class="hljs-number">26</span>:<span class="hljs-number">07</span>,<span class="hljs-number">26</span>:<span class="hljs-number">42</span>,<span class="hljs-number">27</span>:<span class="hljs-number">18</span>,<span class="hljs-number">27</span>:<span class="hljs-number">55</span>,<span class="hljs-number">28</span>:<span class="hljs-number">33</span>,<span class="hljs-number">29</span>:<span class="hljs-number">11</span>,<span class="hljs-number">29</span>:<span class="hljs-number">51</span>,<span class="hljs-number">30</span>:<span class="hljs-number">31</span>,<span class="hljs-number">31</span>:<span class="hljs-number">12</span>,<span class="hljs-number">31</span>:<span class="hljs-number">54</span>,<span class="hljs-number">32</span>:<span class="hljs-number">37</span>,<span class="hljs-number">33</span>:<span class="hljs-number">22</span>,<span class="hljs-number">34</span>:<span class="hljs-number">07</span>,<span class="hljs-number">34</span>:<span class="hljs-number">53</span>,<span class="hljs-number">35</span>:<span class="hljs-number">40</span>,<span class="hljs-number">36</span>:<span class="hljs-number">28</span>,<span class="hljs-number">37</span>:<span class="hljs-number">17</span>,<span class="hljs-number">38</span>:<span class="hljs-number">07</span><span class="hljs-number">5</span>mi,<span class="hljs-number">21</span>:<span class="hljs-number">19</span>,<span class="hljs-number">21</span>:<span class="hljs-number">48</span>,<span class="hljs-number">22</span>:<span class="hljs-number">17</span>,<span class="hljs-number">22</span>:<span class="hljs-number">47</span>,<span class="hljs-number">23</span>:<span class="hljs-number">18</span>,<span class="hljs-number">23</span>:<span class="hljs-number">50</span>,<span class="hljs-number">24</span>:<span class="hljs-number">22</span>,<span class="hljs-number">24</span>:<span class="hljs-number">55</span>,<span class="hljs-number">25</span>:<span class="hljs-number">28</span>,<span class="hljs-number">26</span>:<span class="hljs-number">03</span>,<span class="hljs-number">26</span>:<span class="hljs-number">38</span>,<span class="hljs-number">27</span>:<span class="hljs-number">14</span>,<span class="hljs-number">27</span>:<span class="hljs-number">51</span>,<span class="hljs-number">28</span>:<span class="hljs-number">28</span>,<span class="hljs-number">29</span>:<span class="hljs-number">07</span>,<span class="hljs-number">29</span>:<span class="hljs-number">46</span>,<span class="hljs-number">30</span>:<span class="hljs-number">26</span>,<span class="hljs-number">31</span>:<span class="hljs-number">07</span>,<span class="hljs-number">31</span>:<span class="hljs-number">49</span>,<span class="hljs-number">32</span>:<span class="hljs-number">32</span>,<span class="hljs-number">33</span>:<span class="hljs-number">16</span>,<span class="hljs-number">34</span>:<span class="hljs-number">01</span>,<span class="hljs-number">34</span>:<span class="hljs-number">47</span>,<span class="hljs-number">35</span>:<span class="hljs-number">34</span>,<span class="hljs-number">36</span>:<span class="hljs-number">22</span>,<span class="hljs-number">37</span>:<span class="hljs-number">11</span>,<span class="hljs-number">38</span>:<span class="hljs-number">01</span>,<span class="hljs-number">38</span>:<span class="hljs-number">53</span>,<span class="hljs-number">39</span>:<span class="hljs-number">45</span>,<span class="hljs-number">40</span>:<span class="hljs-number">39</span>,<span class="hljs-number">41</span>:<span class="hljs-number">34</span>,<span class="hljs-number">42</span>:<span class="hljs-number">30</span>,<span class="hljs-number">43</span>:<span class="hljs-number">27</span>,<span class="hljs-number">44</span>:<span class="hljs-number">26</span>,<span class="hljs-number">45</span>:<span class="hljs-number">26</span>,<span class="hljs-number">46</span>:<span class="hljs-number">27</span>,<span class="hljs-number">47</span>:<span class="hljs-number">30</span>,<span class="hljs-number">48</span>:<span class="hljs-number">34</span>,<span class="hljs-number">49</span>:<span class="hljs-number">40</span>,<span class="hljs-number">50</span>:<span class="hljs-number">47</span>,<span class="hljs-number">51</span>:<span class="hljs-number">55</span>,<span class="hljs-number">53</span>:<span class="hljs-number">05</span>,<span class="hljs-number">54</span>:<span class="hljs-number">17</span>,<span class="hljs-number">55</span>:<span class="hljs-number">30</span>,<span class="hljs-number">56</span>:<span class="hljs-number">45</span>,<span class="hljs-number">58</span>:<span class="hljs-number">02</span>,<span class="hljs-number">59</span>:<span class="hljs-number">20</span>,<span class="hljs-number">1</span>:<span class="hljs-number">00</span>:<span class="hljs-number">40</span>,<span class="hljs-number">1</span>:<span class="hljs-number">02</span>:<span class="hljs-number">02</span>,<span class="hljs-number">1</span>:<span class="hljs-number">03</span>:<span class="hljs-number">26</span><span class="hljs-number">10</span>k,<span class="hljs-number">26</span>:<span class="hljs-number">54</span>,<span class="hljs-number">27</span>:<span class="hljs-number">30</span>,<span class="hljs-number">28</span>:<span class="hljs-number">08</span>,<span class="hljs-number">28</span>:<span class="hljs-number">45</span>,<span class="hljs-number">29</span>:<span class="hljs-number">24</span>,<span class="hljs-number">30</span>:<span class="hljs-number">04</span>,<span class="hljs-number">30</span>:<span class="hljs-number">45</span>,<span class="hljs-number">31</span>:<span class="hljs-number">26</span>,<span class="hljs-number">32</span>:<span class="hljs-number">09</span>,<span class="hljs-number">32</span>:<span class="hljs-number">52</span>,<span class="hljs-number">33</span>:<span class="hljs-number">36</span>,<span class="hljs-number">34</span>:<span class="hljs-number">22</span>,<span class="hljs-number">35</span>:<span class="hljs-number">08</span>,<span class="hljs-number">35</span>:<span class="hljs-number">56</span>,<span class="hljs-number">36</span>:<span class="hljs-number">44</span>,<span class="hljs-number">37</span>:<span class="hljs-number">34</span>,<span class="hljs-number">38</span>:<span class="hljs-number">24</span>,<span class="hljs-number">39</span>:<span class="hljs-number">16</span>,<span class="hljs-number">40</span>:<span class="hljs-number">09</span>,<span class="hljs-number">41</span>:<span class="hljs-number">04</span>,<span class="hljs-number">41</span>:<span class="hljs-number">59</span>,<span class="hljs-number">42</span>:<span class="hljs-number">56</span>,<span class="hljs-number">43</span>:<span class="hljs-number">54</span>,<span class="hljs-number">44</span>:<span class="hljs-number">53</span>,<span class="hljs-number">45</span>:<span class="hljs-number">54</span>,<span class="hljs-number">46</span>:<span class="hljs-number">55</span>,<span class="hljs-number">47</span>:<span class="hljs-number">59</span>,<span class="hljs-number">49</span>:<span class="hljs-number">04</span>,<span class="hljs-number">50</span>:<span class="hljs-number">10</span>,<span class="hljs-number">51</span>:<span class="hljs-number">18</span>,<span class="hljs-number">52</span>:<span class="hljs-number">27</span>,<span class="hljs-number">53</span>:<span class="hljs-number">38</span>,<span class="hljs-number">54</span>:<span class="hljs-number">50</span>,<span class="hljs-number">56</span>:<span class="hljs-number">04</span>,<span class="hljs-number">57</span>:<span class="hljs-number">20</span>,<span class="hljs-number">58</span>:<span class="hljs-number">37</span>,<span class="hljs-number">59</span>:<span class="hljs-number">56</span>,<span class="hljs-number">1</span>:<span class="hljs-number">01</span>:<span class="hljs-number">17</span>,<span class="hljs-number">1</span>:<span class="hljs-number">02</span>:<span class="hljs-number">40</span>,<span class="hljs-number">1</span>:<span class="hljs-number">04</span>:<span class="hljs-number">05</span>,<span class="hljs-number">1</span>:<span class="hljs-number">05</span>:<span class="hljs-number">31</span>,<span class="hljs-number">1</span>:<span class="hljs-number">07</span>:<span class="hljs-number">00</span>,<span class="hljs-number">1</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span>,<span class="hljs-number">1</span>:<span class="hljs-number">10</span>:<span class="hljs-number">03</span>,<span class="hljs-number">1</span>:<span class="hljs-number">11</span>:<span class="hljs-number">37</span>,<span class="hljs-number">1</span>:<span class="hljs-number">13</span>:<span class="hljs-number">14</span>,<span class="hljs-number">1</span>:<span class="hljs-number">14</span>:<span class="hljs-number">53</span>,<span class="hljs-number">1</span>:<span class="hljs-number">16</span>:<span class="hljs-number">34</span>,<span class="hljs-number">1</span>:<span class="hljs-number">18</span>:<span class="hljs-number">17</span>,<span class="hljs-number">1</span>:<span class="hljs-number">20</span>:<span class="hljs-number">03</span><span class="hljs-number">15</span>k,<span class="hljs-number">41</span>:<span class="hljs-number">31</span>,<span class="hljs-number">42</span>:<span class="hljs-number">27</span>,<span class="hljs-number">43</span>:<span class="hljs-number">24</span>,<span class="hljs-number">44</span>:<span class="hljs-number">23</span>,<span class="hljs-number">45</span>:<span class="hljs-number">23</span>,<span class="hljs-number">46</span>:<span class="hljs-number">24</span>,<span class="hljs-number">47</span>:<span class="hljs-number">27</span>,<span class="hljs-number">48</span>:<span class="hljs-number">31</span>,<span class="hljs-number">49</span>:<span class="hljs-number">36</span>,<span class="hljs-number">50</span>:<span class="hljs-number">43</span>,<span class="hljs-number">51</span>:<span class="hljs-number">52</span>,<span class="hljs-number">53</span>:<span class="hljs-number">02</span>,<span class="hljs-number">54</span>:<span class="hljs-number">14</span>,<span class="hljs-number">55</span>:<span class="hljs-number">27</span>,<span class="hljs-number">56</span>:<span class="hljs-number">42</span>,<span class="hljs-number">57</span>:<span class="hljs-number">58</span>,<span class="hljs-number">59</span>:<span class="hljs-number">16</span>,<span class="hljs-number">1</span>:<span class="hljs-number">00</span>:<span class="hljs-number">36</span>,<span class="hljs-number">1</span>:<span class="hljs-number">01</span>:<span class="hljs-number">58</span>,<span class="hljs-number">1</span>:<span class="hljs-number">03</span>:<span class="hljs-number">22</span>,<span class="hljs-number">1</span>:<span class="hljs-number">04</span>:<span class="hljs-number">48</span>,<span class="hljs-number">1</span>:<span class="hljs-number">06</span>:<span class="hljs-number">15</span>,<span class="hljs-number">1</span>:<span class="hljs-number">07</span>:<span class="hljs-number">44</span>,<span class="hljs-number">1</span>:<span class="hljs-number">09</span>:<span class="hljs-number">16</span>,<span class="hljs-number">1</span>:<span class="hljs-number">10</span>:<span class="hljs-number">49</span>,<span class="hljs-number">1</span>:<span class="hljs-number">12</span>:<span class="hljs-number">25</span>,<span class="hljs-number">1</span>:<span class="hljs-number">14</span>:<span class="hljs-number">03</span>,<span class="hljs-number">1</span>:<span class="hljs-number">15</span>:<span class="hljs-number">43</span>,<span class="hljs-number">1</span>:<span class="hljs-number">17</span>:<span class="hljs-number">25</span>,<span class="hljs-number">1</span>:<span class="hljs-number">19</span>:<span class="hljs-number">10</span>,<span class="hljs-number">1</span>:<span class="hljs-number">20</span>:<span class="hljs-number">56</span>,<span class="hljs-number">1</span>:<span class="hljs-number">22</span>:<span class="hljs-number">46</span>,<span class="hljs-number">1</span>:<span class="hljs-number">24</span>:<span class="hljs-number">37</span>,<span class="hljs-number">1</span>:<span class="hljs-number">26</span>:<span class="hljs-number">32</span>,<span class="hljs-number">1</span>:<span class="hljs-number">28</span>:<span class="hljs-number">29</span>,<span class="hljs-number">1</span>:<span class="hljs-number">30</span>:<span class="hljs-number">28</span>,<span class="hljs-number">1</span>:<span class="hljs-number">32</span>:<span class="hljs-number">30</span>,<span class="hljs-number">1</span>:<span class="hljs-number">34</span>:<span class="hljs-number">35</span>,<span class="hljs-number">1</span>:<span class="hljs-number">36</span>:<span class="hljs-number">43</span>,<span class="hljs-number">1</span>:<span class="hljs-number">38</span>:<span class="hljs-number">53</span>,<span class="hljs-number">1</span>:<span class="hljs-number">41</span>:<span class="hljs-number">07</span>,<span class="hljs-number">1</span>:<span class="hljs-number">43</span>:<span class="hljs-number">23</span>,<span class="hljs-number">1</span>:<span class="hljs-number">45</span>:<span class="hljs-number">43</span>,<span class="hljs-number">1</span>:<span class="hljs-number">48</span>:<span class="hljs-number">06</span>,<span class="hljs-number">1</span>:<span class="hljs-number">50</span>:<span class="hljs-number">32</span>,<span class="hljs-number">1</span>:<span class="hljs-number">53</span>:<span class="hljs-number">01</span>,<span class="hljs-number">1</span>:<span class="hljs-number">55</span>:<span class="hljs-number">33</span>,<span class="hljs-number">1</span>:<span class="hljs-number">58</span>:<span class="hljs-number">09</span>,<span class="hljs-number">2</span>:<span class="hljs-number">00</span>:<span class="hljs-number">49</span>,<span class="hljs-number">2</span>:<span class="hljs-number">03</span>:<span class="hljs-number">32</span><span class="hljs-number">10</span>mi,<span class="hljs-number">44</span>:<span class="hljs-number">46</span>,<span class="hljs-number">45</span>:<span class="hljs-number">46</span>,<span class="hljs-number">46</span>:<span class="hljs-number">48</span>,<span class="hljs-number">47</span>:<span class="hljs-number">51</span>,<span class="hljs-number">48</span>:<span class="hljs-number">56</span>,<span class="hljs-number">50</span>:<span class="hljs-number">02</span>,<span class="hljs-number">51</span>:<span class="hljs-number">09</span>,<span class="hljs-number">52</span>:<span class="hljs-number">18</span>,<span class="hljs-number">53</span>:<span class="hljs-number">29</span>,<span class="hljs-number">54</span>:<span class="hljs-number">41</span>,<span class="hljs-number">55</span>:<span class="hljs-number">55</span>,<span class="hljs-number">57</span>:<span class="hljs-number">11</span>,<span class="hljs-number">58</span>:<span class="hljs-number">28</span>,<span class="hljs-number">59</span>:<span class="hljs-number">47</span>,<span class="hljs-number">1</span>:<span class="hljs-number">01</span>:<span class="hljs-number">07</span>,<span class="hljs-number">1</span>:<span class="hljs-number">02</span>:<span class="hljs-number">30</span>,<span class="hljs-number">1</span>:<span class="hljs-number">03</span>:<span class="hljs-number">54</span>,<span class="hljs-number">1</span>:<span class="hljs-number">05</span>:<span class="hljs-number">21</span>,<span class="hljs-number">1</span>:<span class="hljs-number">06</span>:<span class="hljs-number">49</span>,<span class="hljs-number">1</span>:<span class="hljs-number">08</span>:<span class="hljs-number">19</span>,<span class="hljs-number">1</span>:<span class="hljs-number">09</span>:<span class="hljs-number">51</span>,<span class="hljs-number">1</span>:<span class="hljs-number">11</span>:<span class="hljs-number">26</span>,<span class="hljs-number">1</span>:<span class="hljs-number">13</span>:<span class="hljs-number">02</span>,<span class="hljs-number">1</span>:<span class="hljs-number">14</span>:<span class="hljs-number">41</span>,<span class="hljs-number">1</span>:<span class="hljs-number">16</span>:<span class="hljs-number">22</span>,<span class="hljs-number">1</span>:<span class="hljs-number">18</span>:<span class="hljs-number">05</span>,<span class="hljs-number">1</span>:<span class="hljs-number">19</span>:<span class="hljs-number">50</span>,<span class="hljs-number">1</span>:<span class="hljs-number">21</span>:<span class="hljs-number">38</span>,<span class="hljs-number">1</span>:<span class="hljs-number">23</span>:<span class="hljs-number">28</span>,<span class="hljs-number">1</span>:<span class="hljs-number">25</span>:<span class="hljs-number">21</span>,<span class="hljs-number">1</span>:<span class="hljs-number">27</span>:<span class="hljs-number">16</span>,<span class="hljs-number">1</span>:<span class="hljs-number">29</span>:<span class="hljs-number">14</span>,<span class="hljs-number">1</span>:<span class="hljs-number">31</span>:<span class="hljs-number">14</span>,<span class="hljs-number">1</span>:<span class="hljs-number">33</span>:<span class="hljs-number">17</span>,<span class="hljs-number">1</span>:<span class="hljs-number">35</span>:<span class="hljs-number">23</span>,<span class="hljs-number">1</span>:<span class="hljs-number">37</span>:<span class="hljs-number">32</span>,<span class="hljs-number">1</span>:<span class="hljs-number">39</span>:<span class="hljs-number">44</span>,<span class="hljs-number">1</span>:<span class="hljs-number">41</span>:<span class="hljs-number">59</span>,<span class="hljs-number">1</span>:<span class="hljs-number">44</span>:<span class="hljs-number">16</span>,<span class="hljs-number">1</span>:<span class="hljs-number">46</span>:<span class="hljs-number">37</span>,<span class="hljs-number">1</span>:<span class="hljs-number">49</span>:<span class="hljs-number">01</span>,<span class="hljs-number">1</span>:<span class="hljs-number">51</span>:<span class="hljs-number">28</span>,<span class="hljs-number">1</span>:<span class="hljs-number">53</span>:<span class="hljs-number">59</span>,<span class="hljs-number">1</span>:<span class="hljs-number">56</span>:<span class="hljs-number">32</span>,<span class="hljs-number">1</span>:<span class="hljs-number">59</span>:<span class="hljs-number">10</span>,<span class="hljs-number">2</span>:<span class="hljs-number">01</span>:<span class="hljs-number">51</span>,<span class="hljs-number">2</span>:<span class="hljs-number">04</span>:<span class="hljs-number">35</span>,<span class="hljs-number">2</span>:<span class="hljs-number">07</span>:<span class="hljs-number">23</span>,<span class="hljs-number">2</span>:<span class="hljs-number">10</span>:<span class="hljs-number">15</span>,<span class="hljs-number">2</span>:<span class="hljs-number">13</span>:<span class="hljs-number">11</span><span class="hljs-number">20</span>k,<span class="hljs-number">56</span>:<span class="hljs-number">29</span>,<span class="hljs-number">57</span>:<span class="hljs-number">45</span>,<span class="hljs-number">59</span>:<span class="hljs-number">03</span>,<span class="hljs-number">1</span>:<span class="hljs-number">00</span>:<span class="hljs-number">23</span>,<span class="hljs-number">1</span>:<span class="hljs-number">01</span>:<span class="hljs-number">45</span>,<span class="hljs-number">1</span>:<span class="hljs-number">03</span>:<span class="hljs-number">08</span>,<span class="hljs-number">1</span>:<span class="hljs-number">04</span>:<span class="hljs-number">33</span>,<span class="hljs-number">1</span>:<span class="hljs-number">06</span>:<span class="hljs-number">00</span>,<span class="hljs-number">1</span>:<span class="hljs-number">07</span>:<span class="hljs-number">29</span>,<span class="hljs-number">1</span>:<span class="hljs-number">09</span>:<span class="hljs-number">01</span>,<span class="hljs-number">1</span>:<span class="hljs-number">10</span>:<span class="hljs-number">34</span>,<span class="hljs-number">1</span>:<span class="hljs-number">12</span>:<span class="hljs-number">09</span>,<span class="hljs-number">1</span>:<span class="hljs-number">13</span>:<span class="hljs-number">46</span>,<span class="hljs-number">1</span>:<span class="hljs-number">15</span>:<span class="hljs-number">26</span>,<span class="hljs-number">1</span>:<span class="hljs-number">17</span>:<span class="hljs-number">08</span>,<span class="hljs-number">1</span>:<span class="hljs-number">18</span>:<span class="hljs-number">52</span>,<span class="hljs-number">1</span>:<span class="hljs-number">20</span>:<span class="hljs-number">39</span>,<span class="hljs-number">1</span>:<span class="hljs-number">22</span>:<span class="hljs-number">27</span>,<span class="hljs-number">1</span>:<span class="hljs-number">24</span>:<span class="hljs-number">19</span>,<span class="hljs-number">1</span>:<span class="hljs-number">26</span>:<span class="hljs-number">13</span>,<span class="hljs-number">1</span>:<span class="hljs-number">28</span>:<span class="hljs-number">09</span>,<span class="hljs-number">1</span>:<span class="hljs-number">30</span>:<span class="hljs-number">08</span>,<span class="hljs-number">1</span>:<span class="hljs-number">32</span>:<span class="hljs-number">10</span>,<span class="hljs-number">1</span>:<span class="hljs-number">34</span>:<span class="hljs-number">14</span>,<span class="hljs-number">1</span>:<span class="hljs-number">36</span>:<span class="hljs-number">21</span>,<span class="hljs-number">1</span>:<span class="hljs-number">38</span>:<span class="hljs-number">31</span>,<span class="hljs-number">1</span>:<span class="hljs-number">40</span>:<span class="hljs-number">44</span>,<span class="hljs-number">1</span>:<span class="hljs-number">43</span>:<span class="hljs-number">00</span>,<span class="hljs-number">1</span>:<span class="hljs-number">45</span>:<span class="hljs-number">20</span>,<span class="hljs-number">1</span>:<span class="hljs-number">47</span>:<span class="hljs-number">42</span>,<span class="hljs-number">1</span>:<span class="hljs-number">50</span>:<span class="hljs-number">07</span>,<span class="hljs-number">1</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36</span>,<span class="hljs-number">1</span>:<span class="hljs-number">55</span>:<span class="hljs-number">08</span>,<span class="hljs-number">1</span>:<span class="hljs-number">57</span>:<span class="hljs-number">43</span>,<span class="hljs-number">2</span>:<span class="hljs-number">00</span>:<span class="hljs-number">22</span>,<span class="hljs-number">2</span>:<span class="hljs-number">03</span>:<span class="hljs-number">05</span>,<span class="hljs-number">2</span>:<span class="hljs-number">05</span>:<span class="hljs-number">51</span>,<span class="hljs-number">2</span>:<span class="hljs-number">08</span>:<span class="hljs-number">41</span>,<span class="hljs-number">2</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span>,<span class="hljs-number">2</span>:<span class="hljs-number">14</span>:<span class="hljs-number">32</span>,<span class="hljs-number">2</span>:<span class="hljs-number">17</span>:<span class="hljs-number">34</span>,<span class="hljs-number">2</span>:<span class="hljs-number">20</span>:<span class="hljs-number">40</span>,<span class="hljs-number">2</span>:<span class="hljs-number">23</span>:<span class="hljs-number">49</span>,<span class="hljs-number">2</span>:<span class="hljs-number">27</span>:<span class="hljs-number">04</span>,<span class="hljs-number">2</span>:<span class="hljs-number">30</span>:<span class="hljs-number">22</span>,<span class="hljs-number">2</span>:<span class="hljs-number">33</span>:<span class="hljs-number">45</span>,<span class="hljs-number">2</span>:<span class="hljs-number">37</span>:<span class="hljs-number">13</span>,<span class="hljs-number">2</span>:<span class="hljs-number">40</span>:<span class="hljs-number">45</span>,<span class="hljs-number">2</span>:<span class="hljs-number">44</span>:<span class="hljs-number">22</span>,<span class="hljs-number">2</span>:<span class="hljs-number">48</span>:<span class="hljs-number">04</span><span class="hljs-number">13.1</span>mi,<span class="hljs-number">59</span>:<span class="hljs-number">49</span>,<span class="hljs-number">1</span>:<span class="hljs-number">01</span>:<span class="hljs-number">09</span>,<span class="hljs-number">1</span>:<span class="hljs-number">02</span>:<span class="hljs-number">32</span>,<span class="hljs-number">1</span>:<span class="hljs-number">03</span>:<span class="hljs-number">56</span>,<span class="hljs-number">1</span>:<span class="hljs-number">05</span>:<span class="hljs-number">23</span>,<span class="hljs-number">1</span>:<span class="hljs-number">06</span>:<span class="hljs-number">51</span>,<span class="hljs-number">1</span>:<span class="hljs-number">08</span>:<span class="hljs-number">21</span>,<span class="hljs-number">1</span>:<span class="hljs-number">09</span>:<span class="hljs-number">53</span>,<span class="hljs-number">1</span>:<span class="hljs-number">11</span>:<span class="hljs-number">28</span>,<span class="hljs-number">1</span>:<span class="hljs-number">13</span>:<span class="hljs-number">04</span>,<span class="hljs-number">1</span>:<span class="hljs-number">14</span>:<span class="hljs-number">43</span>,<span class="hljs-number">1</span>:<span class="hljs-number">16</span>:<span class="hljs-number">24</span>,<span class="hljs-number">1</span>:<span class="hljs-number">18</span>:<span class="hljs-number">07</span>,<span class="hljs-number">1</span>:<span class="hljs-number">19</span>:<span class="hljs-number">52</span>,<span class="hljs-number">1</span>:<span class="hljs-number">21</span>:<span class="hljs-number">40</span>,<span class="hljs-number">1</span>:<span class="hljs-number">23</span>:<span class="hljs-number">30</span>,<span class="hljs-number">1</span>:<span class="hljs-number">25</span>:<span class="hljs-number">23</span>,<span class="hljs-number">1</span>:<span class="hljs-number">27</span>:<span class="hljs-number">19</span>,<span class="hljs-number">1</span>:<span class="hljs-number">29</span>:<span class="hljs-number">16</span>,<span class="hljs-number">1</span>:<span class="hljs-number">31</span>:<span class="hljs-number">17</span>,<span class="hljs-number">1</span>:<span class="hljs-number">33</span>:<span class="hljs-number">20</span>,<span class="hljs-number">1</span>:<span class="hljs-number">35</span>:<span class="hljs-number">26</span>,<span class="hljs-number">1</span>:<span class="hljs-number">37</span>:<span class="hljs-number">35</span>,<span class="hljs-number">1</span>:<span class="hljs-number">39</span>:<span class="hljs-number">47</span>,<span class="hljs-number">1</span>:<span class="hljs-number">42</span>:<span class="hljs-number">02</span>,<span class="hljs-number">1</span>:<span class="hljs-number">44</span>:<span class="hljs-number">19</span>,<span class="hljs-number">1</span>:<span class="hljs-number">46</span>:<span class="hljs-number">40</span>,<span class="hljs-number">1</span>:<span class="hljs-number">49</span>:<span class="hljs-number">04</span>,<span class="hljs-number">1</span>:<span class="hljs-number">51</span>:<span class="hljs-number">31</span>,<span class="hljs-number">1</span>:<span class="hljs-number">54</span>:<span class="hljs-number">02</span>,<span class="hljs-number">1</span>:<span class="hljs-number">56</span>:<span class="hljs-number">36</span>,<span class="hljs-number">1</span>:<span class="hljs-number">59</span>:<span class="hljs-number">13</span>,<span class="hljs-number">2</span>:<span class="hljs-number">01</span>:<span class="hljs-number">54</span>,<span class="hljs-number">2</span>:<span class="hljs-number">04</span>:<span class="hljs-number">39</span>,<span class="hljs-number">2</span>:<span class="hljs-number">07</span>:<span class="hljs-number">27</span>,<span class="hljs-number">2</span>:<span class="hljs-number">10</span>:<span class="hljs-number">19</span>,<span class="hljs-number">2</span>:<span class="hljs-number">13</span>:<span class="hljs-number">15</span>,<span class="hljs-number">2</span>:<span class="hljs-number">16</span>:<span class="hljs-number">15</span>,<span class="hljs-number">2</span>:<span class="hljs-number">19</span>:<span class="hljs-number">19</span>,<span class="hljs-number">2</span>:<span class="hljs-number">22</span>:<span class="hljs-number">27</span>,<span class="hljs-number">2</span>:<span class="hljs-number">25</span>:<span class="hljs-number">39</span>,<span class="hljs-number">2</span>:<span class="hljs-number">28</span>:<span class="hljs-number">56</span>,<span class="hljs-number">2</span>:<span class="hljs-number">32</span>:<span class="hljs-number">17</span>,<span class="hljs-number">2</span>:<span class="hljs-number">35</span>:<span class="hljs-number">43</span>,<span class="hljs-number">2</span>:<span class="hljs-number">39</span>:<span class="hljs-number">13</span>,<span class="hljs-number">2</span>:<span class="hljs-number">42</span>:<span class="hljs-number">48</span>,<span class="hljs-number">2</span>:<span class="hljs-number">46</span>:<span class="hljs-number">28</span>,<span class="hljs-number">2</span>:<span class="hljs-number">50</span>:<span class="hljs-number">12</span>,<span class="hljs-number">2</span>:<span class="hljs-number">54</span>:<span class="hljs-number">02</span>,<span class="hljs-number">2</span>:<span class="hljs-number">57</span>:<span class="hljs-number">57</span><span class="hljs-number">25</span>k,<span class="hljs-number">1</span>:<span class="hljs-number">11</span>:<span class="hljs-number">43</span>,<span class="hljs-number">1</span>:<span class="hljs-number">13</span>:<span class="hljs-number">20</span>,<span class="hljs-number">1</span>:<span class="hljs-number">14</span>:<span class="hljs-number">59</span>,<span class="hljs-number">1</span>:<span class="hljs-number">16</span>:<span class="hljs-number">40</span>,<span class="hljs-number">1</span>:<span class="hljs-number">18</span>:<span class="hljs-number">24</span>,<span class="hljs-number">1</span>:<span class="hljs-number">20</span>:<span class="hljs-number">10</span>,<span class="hljs-number">1</span>:<span class="hljs-number">21</span>:<span class="hljs-number">58</span>,<span class="hljs-number">1</span>:<span class="hljs-number">23</span>:<span class="hljs-number">49</span>,<span class="hljs-number">1</span>:<span class="hljs-number">25</span>:<span class="hljs-number">49</span>,<span class="hljs-number">1</span>:<span class="hljs-number">27</span>:<span class="hljs-number">37</span>,<span class="hljs-number">1</span>:<span class="hljs-number">29</span>:<span class="hljs-number">36</span>,<span class="hljs-number">1</span>:<span class="hljs-number">31</span>:<span class="hljs-number">37</span>,<span class="hljs-number">1</span>:<span class="hljs-number">33</span>:<span class="hljs-number">40</span>,<span class="hljs-number">1</span>:<span class="hljs-number">35</span>:<span class="hljs-number">47</span>,<span class="hljs-number">1</span>:<span class="hljs-number">37</span>:<span class="hljs-number">56</span>,<span class="hljs-number">1</span>:<span class="hljs-number">40</span>:<span class="hljs-number">08</span>,<span class="hljs-number">1</span>:<span class="hljs-number">42</span>:<span class="hljs-number">24</span>,<span class="hljs-number">1</span>:<span class="hljs-number">44</span>:<span class="hljs-number">42</span>,<span class="hljs-number">1</span>:<span class="hljs-number">47</span>:<span class="hljs-number">03</span>,<span class="hljs-number">1</span>:<span class="hljs-number">49</span>:<span class="hljs-number">28</span>,<span class="hljs-number">1</span>:<span class="hljs-number">51</span>:<span class="hljs-number">55</span>,<span class="hljs-number">1</span>:<span class="hljs-number">54</span>:<span class="hljs-number">27</span>,<span class="hljs-number">1</span>:<span class="hljs-number">57</span>:<span class="hljs-number">01</span>,<span class="hljs-number">1</span>:<span class="hljs-number">59</span>:<span class="hljs-number">39</span>,<span class="hljs-number">2</span>:<span class="hljs-number">02</span>:<span class="hljs-number">21</span>,<span class="hljs-number">2</span>:<span class="hljs-number">05</span>:<span class="hljs-number">06</span>,<span class="hljs-number">2</span>:<span class="hljs-number">07</span>:<span class="hljs-number">55</span>,<span class="hljs-number">2</span>:<span class="hljs-number">10</span>:<span class="hljs-number">47</span>,<span class="hljs-number">2</span>:<span class="hljs-number">13</span>:<span class="hljs-number">44</span>,<span class="hljs-number">2</span>:<span class="hljs-number">16</span>:<span class="hljs-number">44</span>,<span class="hljs-number">2</span>:<span class="hljs-number">19</span>:<span class="hljs-number">49</span>,<span class="hljs-number">2</span>:<span class="hljs-number">22</span>:<span class="hljs-number">58</span>,<span class="hljs-number">2</span>:<span class="hljs-number">26</span>:<span class="hljs-number">11</span>,<span class="hljs-number">2</span>:<span class="hljs-number">29</span>:<span class="hljs-number">28</span>,<span class="hljs-number">2</span>:<span class="hljs-number">32</span>:<span class="hljs-number">50</span>,<span class="hljs-number">2</span>:<span class="hljs-number">36</span>:<span class="hljs-number">16</span>,<span class="hljs-number">2</span>:<span class="hljs-number">39</span>:<span class="hljs-number">47</span>,<span class="hljs-number">2</span>:<span class="hljs-number">43</span>:<span class="hljs-number">23</span>,<span class="hljs-number">2</span>:<span class="hljs-number">47</span>:<span class="hljs-number">04</span>,<span class="hljs-number">2</span>:<span class="hljs-number">50</span>:<span class="hljs-number">49</span>,<span class="hljs-number">2</span>:<span class="hljs-number">54</span>:<span class="hljs-number">40</span>,<span class="hljs-number">2</span>:<span class="hljs-number">58</span>:<span class="hljs-number">36</span>,<span class="hljs-number">3</span>:<span class="hljs-number">02</span>:<span class="hljs-number">37</span>,<span class="hljs-number">3</span>:<span class="hljs-number">06</span>:<span class="hljs-number">43</span>,<span class="hljs-number">3</span>:<span class="hljs-number">10</span>:<span class="hljs-number">55</span>,<span class="hljs-number">3</span>:<span class="hljs-number">15</span>:<span class="hljs-number">13</span>,<span class="hljs-number">3</span>:<span class="hljs-number">19</span>:<span class="hljs-number">37</span>,<span class="hljs-number">3</span>:<span class="hljs-number">24</span>:<span class="hljs-number">06</span>,<span class="hljs-number">3</span>:<span class="hljs-number">28</span>:<span class="hljs-number">42</span>,<span class="hljs-number">3</span>:<span class="hljs-number">33</span>:<span class="hljs-number">23</span><span class="hljs-number">30</span>k,<span class="hljs-number">1</span>:<span class="hljs-number">27</span>:<span class="hljs-number">10</span>,<span class="hljs-number">1</span>:<span class="hljs-number">19</span>:<span class="hljs-number">08</span>,<span class="hljs-number">1</span>:<span class="hljs-number">31</span>:<span class="hljs-number">08</span>,<span class="hljs-number">1</span>:<span class="hljs-number">33</span>:<span class="hljs-number">11</span>,<span class="hljs-number">1</span>:<span class="hljs-number">35</span>:<span class="hljs-number">17</span>,<span class="hljs-number">1</span>:<span class="hljs-number">37</span>:<span class="hljs-number">26</span>,<span class="hljs-number">1</span>:<span class="hljs-number">39</span>:<span class="hljs-number">37</span>,<span class="hljs-number">1</span>:<span class="hljs-number">41</span>:<span class="hljs-number">52</span>,<span class="hljs-number">1</span>:<span class="hljs-number">44</span>:<span class="hljs-number">09</span>,<span class="hljs-number">1</span>:<span class="hljs-number">46</span>:<span class="hljs-number">30</span>,<span class="hljs-number">1</span>:<span class="hljs-number">48</span>:<span class="hljs-number">54</span>,<span class="hljs-number">1</span>:<span class="hljs-number">51</span>:<span class="hljs-number">21</span>,<span class="hljs-number">1</span>:<span class="hljs-number">53</span>:<span class="hljs-number">51</span>,<span class="hljs-number">1</span>:<span class="hljs-number">56</span>:<span class="hljs-number">25</span>,<span class="hljs-number">1</span>:<span class="hljs-number">59</span>:<span class="hljs-number">02</span>,<span class="hljs-number">2</span>:<span class="hljs-number">01</span>:<span class="hljs-number">43</span>,<span class="hljs-number">2</span>:<span class="hljs-number">04</span>:<span class="hljs-number">27</span>,<span class="hljs-number">2</span>:<span class="hljs-number">07</span>:<span class="hljs-number">15</span>,<span class="hljs-number">2</span>:<span class="hljs-number">10</span>:<span class="hljs-number">07</span>,<span class="hljs-number">2</span>:<span class="hljs-number">13</span>:<span class="hljs-number">03</span>,<span class="hljs-number">2</span>:<span class="hljs-number">16</span>:<span class="hljs-number">02</span>,<span class="hljs-number">2</span>:<span class="hljs-number">19</span>:<span class="hljs-number">06</span>,<span class="hljs-number">2</span>:<span class="hljs-number">22</span>:<span class="hljs-number">14</span>,<span class="hljs-number">2</span>:<span class="hljs-number">25</span>:<span class="hljs-number">26</span>,<span class="hljs-number">2</span>:<span class="hljs-number">28</span>:<span class="hljs-number">42</span>,<span class="hljs-number">2</span>:<span class="hljs-number">32</span>:<span class="hljs-number">03</span>,<span class="hljs-number">2</span>:<span class="hljs-number">35</span>:<span class="hljs-number">28</span>,<span class="hljs-number">2</span>:<span class="hljs-number">38</span>:<span class="hljs-number">58</span>,<span class="hljs-number">2</span>:<span class="hljs-number">42</span>:<span class="hljs-number">33</span>,<span class="hljs-number">2</span>:<span class="hljs-number">46</span>:<span class="hljs-number">12</span>,<span class="hljs-number">2</span>:<span class="hljs-number">49</span>:<span class="hljs-number">56</span>,<span class="hljs-number">2</span>:<span class="hljs-number">53</span>:<span class="hljs-number">46</span>,<span class="hljs-number">2</span>:<span class="hljs-number">57</span>:<span class="hljs-number">40</span>,<span class="hljs-number">3</span>:<span class="hljs-number">01</span>:<span class="hljs-number">40</span>,<span class="hljs-number">3</span>:<span class="hljs-number">05</span>:<span class="hljs-number">45</span>,<span class="hljs-number">3</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span>,<span class="hljs-number">3</span>:<span class="hljs-number">14</span>:<span class="hljs-number">13</span>,<span class="hljs-number">3</span>:<span class="hljs-number">18</span>:<span class="hljs-number">35</span>,<span class="hljs-number">3</span>:<span class="hljs-number">23</span>:<span class="hljs-number">03</span>,<span class="hljs-number">3</span>:<span class="hljs-number">27</span>:<span class="hljs-number">37</span>,<span class="hljs-number">3</span>:<span class="hljs-number">32</span>:<span class="hljs-number">17</span>,<span class="hljs-number">3</span>:<span class="hljs-number">37</span>:<span class="hljs-number">04</span>,<span class="hljs-number">3</span>:<span class="hljs-number">41</span>:<span class="hljs-number">57</span>,<span class="hljs-number">3</span>:<span class="hljs-number">46</span>:<span class="hljs-number">57</span>,<span class="hljs-number">3</span>:<span class="hljs-number">52</span>:<span class="hljs-number">03</span>,<span class="hljs-number">3</span>:<span class="hljs-number">57</span>:<span class="hljs-number">16</span>,<span class="hljs-number">4</span>:<span class="hljs-number">02</span>:<span class="hljs-number">37</span>,<span class="hljs-number">4</span>:<span class="hljs-number">08</span>:<span class="hljs-number">04</span>,<span class="hljs-number">4</span>:<span class="hljs-number">13</span>:<span class="hljs-number">39</span>,<span class="hljs-number">4</span>:<span class="hljs-number">19</span>:<span class="hljs-number">22</span>Marathon,<span class="hljs-number">2</span>:<span class="hljs-number">05</span>:<span class="hljs-number">34</span>,<span class="hljs-number">2</span>:<span class="hljs-number">08</span>:<span class="hljs-number">24</span>,<span class="hljs-number">2</span>:<span class="hljs-number">11</span>:<span class="hljs-number">17</span>,<span class="hljs-number">2</span>:<span class="hljs-number">14</span>:<span class="hljs-number">15</span>,<span class="hljs-number">2</span>:<span class="hljs-number">17</span>:<span class="hljs-number">16</span>,<span class="hljs-number">2</span>:<span class="hljs-number">20</span>:<span class="hljs-number">21</span>,<span class="hljs-number">2</span>:<span class="hljs-number">23</span>:<span class="hljs-number">31</span>,<span class="hljs-number">2</span>:<span class="hljs-number">26</span>:<span class="hljs-number">44</span>,<span class="hljs-number">2</span>:<span class="hljs-number">30</span>:<span class="hljs-number">02</span>,<span class="hljs-number">2</span>:<span class="hljs-number">33</span>:<span class="hljs-number">25</span>,<span class="hljs-number">2</span>:<span class="hljs-number">36</span>:<span class="hljs-number">52</span>,<span class="hljs-number">2</span>:<span class="hljs-number">40</span>:<span class="hljs-number">24</span>,<span class="hljs-number">2</span>:<span class="hljs-number">44</span>:<span class="hljs-number">00</span>,<span class="hljs-number">2</span>:<span class="hljs-number">47</span>:<span class="hljs-number">42</span>,<span class="hljs-number">2</span>:<span class="hljs-number">51</span>:<span class="hljs-number">28</span>,<span class="hljs-number">2</span>:<span class="hljs-number">55</span>:<span class="hljs-number">20</span>,<span class="hljs-number">2</span>:<span class="hljs-number">59</span>:<span class="hljs-number">16</span>,<span class="hljs-number">3</span>:<span class="hljs-number">03</span>:<span class="hljs-number">18</span>,<span class="hljs-number">3</span>:<span class="hljs-number">07</span>:<span class="hljs-number">26</span>,<span class="hljs-number">3</span>:<span class="hljs-number">11</span>:<span class="hljs-number">39</span>,<span class="hljs-number">3</span>:<span class="hljs-number">15</span>:<span class="hljs-number">58</span>,<span class="hljs-number">3</span>:<span class="hljs-number">20</span>:<span class="hljs-number">22</span>,<span class="hljs-number">3</span>:<span class="hljs-number">24</span>:<span class="hljs-number">53</span>,<span class="hljs-number">3</span>:<span class="hljs-number">29</span>:<span class="hljs-number">29</span>,<span class="hljs-number">3</span>:<span class="hljs-number">34</span>:<span class="hljs-number">12</span>,<span class="hljs-number">3</span>:<span class="hljs-number">39</span>:<span class="hljs-number">01</span>,<span class="hljs-number">3</span>:<span class="hljs-number">43</span>:<span class="hljs-number">57</span>,<span class="hljs-number">3</span>:<span class="hljs-number">48</span>:<span class="hljs-number">59</span>,<span class="hljs-number">3</span>:<span class="hljs-number">54</span>:<span class="hljs-number">09</span>,<span class="hljs-number">3</span>:<span class="hljs-number">59</span>:<span class="hljs-number">25</span>,<span class="hljs-number">4</span>:<span class="hljs-number">04</span>:<span class="hljs-number">48</span>,<span class="hljs-number">4</span>:<span class="hljs-number">10</span>:<span class="hljs-number">18</span>,<span class="hljs-number">4</span>:<span class="hljs-number">15</span>:<span class="hljs-number">56</span>,<span class="hljs-number">4</span>:<span class="hljs-number">21</span>:<span class="hljs-number">42</span>,<span class="hljs-number">4</span>:<span class="hljs-number">27</span>:<span class="hljs-number">35</span>,<span class="hljs-number">4</span>:<span class="hljs-number">33</span>:<span class="hljs-number">36</span>,<span class="hljs-number">4</span>:<span class="hljs-number">39</span>:<span class="hljs-number">46</span>,<span class="hljs-number">4</span>:<span class="hljs-number">46</span>:<span class="hljs-number">04</span>,<span class="hljs-number">4</span>:<span class="hljs-number">52</span>:<span class="hljs-number">30</span>,<span class="hljs-number">4</span>:<span class="hljs-number">59</span>:<span class="hljs-number">05</span>,<span class="hljs-number">5</span>:<span class="hljs-number">05</span>:<span class="hljs-number">48</span>,<span class="hljs-number">5</span>:<span class="hljs-number">12</span>:<span class="hljs-number">41</span>,<span class="hljs-number">5</span>:<span class="hljs-number">19</span>:<span class="hljs-number">43</span>,<span class="hljs-number">5</span>:<span class="hljs-number">26</span>:<span class="hljs-number">55</span>,<span class="hljs-number">5</span>:<span class="hljs-number">34</span>:<span class="hljs-number">16</span>,<span class="hljs-number">5</span>:<span class="hljs-number">41</span>:<span class="hljs-number">48</span>,<span class="hljs-number">5</span>:<span class="hljs-number">49</span>:<span class="hljs-number">29</span>,<span class="hljs-number">5</span>:<span class="hljs-number">57</span>:<span class="hljs-number">21</span>,<span class="hljs-number">6</span>:<span class="hljs-number">05</span>:<span class="hljs-number">23</span>,<span class="hljs-number">6</span>:<span class="hljs-number">13</span>:<span class="hljs-number">37</span><span class="hljs-comment"># Mark: 从input读入数据，匹配最近的数据</span><span class="hljs-keyword">from</span> find_it <span class="hljs-keyword">import</span> find_closest<span class="hljs-keyword">from</span> tm2secs2tm <span class="hljs-keyword">import</span> time2secs, secs2time, format_time<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_nearest_time</span>(<span class="hljs-params">look_for, target_data</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    查找的时间以及所搜索的时间列表，这个函数将把找到的最接近的时间作为一个字符串返回</span><span class="hljs-string">    :param look_for:</span><span class="hljs-string">    :param target_data:</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-comment"># 将要查找的时间字符串转换为等价的秒数值</span>    what = time2secs(look_for)    print(what)    <span class="hljs-comment"># 将时间字符串行转换为秒数</span>    where = [time2secs(t) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> target_data]    print(where)    <span class="hljs-comment"># 查找最近的匹配的时间</span>    res = find_closest(what, where)    <span class="hljs-comment"># 返回时间字符串</span>    <span class="hljs-keyword">return</span> secs2time(res)row_data = &#123;&#125;<span class="hljs-comment"># 处理数据文件</span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data/PaceData.csv&#x27;</span>) <span class="hljs-keyword">as</span> paces:    <span class="hljs-comment"># 标题行处理，去空白符，分割成列表</span>    column_headings = paces.readline().strip().split(<span class="hljs-string">&#x27;,&#x27;</span>)    <span class="hljs-comment"># 去除第一列</span>    column_headings.pop(<span class="hljs-number">0</span>)    <span class="hljs-keyword">for</span> each_line <span class="hljs-keyword">in</span> paces:        row = each_line.strip().split(<span class="hljs-string">&#x27;,&#x27;</span>)        row_label = row.pop(<span class="hljs-number">0</span>)        <span class="hljs-comment"># 将时间放至对应的标签列表中</span>        <span class="hljs-comment"># row_data[row_label] = row</span>        inner_dict = &#123;&#125;        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(column_headings)):            <span class="hljs-comment"># 键：时间，值：列标题；快速地确定与某个时间关联的列</span>            inner_dict[format_time(row[i])] = column_headings[i]        row_data[row_label] = inner_dict<span class="hljs-comment"># print(row_data)</span><span class="hljs-comment"># input()函数</span><span class="hljs-comment"># help(input)</span>distance_run = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter the distance attempted: &#x27;</span>)recorded_time = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter the recorded time: &#x27;</span>)predicted_distance = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter the distance you want a prediction for: &#x27;</span>)<span class="hljs-comment"># 报KeyError错误，因为row_data没有对应的key与value</span><span class="hljs-comment"># print(row_data[distance_run][recorded_time])</span>closest_time = find_nearest_time(format_time(recorded_time), row_data[distance_run])print(<span class="hljs-string">&#x27;closest_time: &#x27;</span>, closest_time)closest_time_heading = row_data[distance_run][closest_time]print(<span class="hljs-string">&#x27;closest_time_heading: &#x27;</span>, closest_time_heading)prediction = [k <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> row_data[predicted_distance].keys()              <span class="hljs-keyword">if</span> row_data[predicted_distance][k] == closest_time_heading]print(<span class="hljs-string">&#x27;The predicted time running &#x27;</span> + predicted_distance + <span class="hljs-string">&#x27; is: &#x27;</span> + prediction[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;.&#x27;</span>)<span class="hljs-comment"># 输出</span>Enter the distance attempted: <span class="hljs-number">20</span>kEnter the recorded time: <span class="hljs-number">59</span>:<span class="hljs-number">06</span>Enter the distance you want a prediction <span class="hljs-keyword">for</span>: <span class="hljs-number">30</span>k<span class="hljs-number">3546</span>[<span class="hljs-number">3389</span>, <span class="hljs-number">3465</span>, <span class="hljs-number">3543</span>, <span class="hljs-number">3623</span>, <span class="hljs-number">3705</span>, <span class="hljs-number">3788</span>, <span class="hljs-number">3873</span>, <span class="hljs-number">3960</span>, <span class="hljs-number">4049</span>, <span class="hljs-number">4141</span>, <span class="hljs-number">4234</span>, <span class="hljs-number">4329</span>, <span class="hljs-number">4426</span>, <span class="hljs-number">4526</span>, <span class="hljs-number">4628</span>, <span class="hljs-number">4732</span>, <span class="hljs-number">4839</span>, <span class="hljs-number">4947</span>, <span class="hljs-number">5059</span>, <span class="hljs-number">5173</span>, <span class="hljs-number">5289</span>, <span class="hljs-number">5408</span>, <span class="hljs-number">5530</span>, <span class="hljs-number">5654</span>, <span class="hljs-number">5781</span>, <span class="hljs-number">5911</span>, <span class="hljs-number">6044</span>, <span class="hljs-number">6180</span>, <span class="hljs-number">6320</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">6607</span>, <span class="hljs-number">6756</span>, <span class="hljs-number">6908</span>, <span class="hljs-number">7063</span>, <span class="hljs-number">7222</span>, <span class="hljs-number">7385</span>, <span class="hljs-number">7551</span>, <span class="hljs-number">7721</span>, <span class="hljs-number">7895</span>, <span class="hljs-number">8072</span>, <span class="hljs-number">8254</span>, <span class="hljs-number">8440</span>, <span class="hljs-number">8629</span>, <span class="hljs-number">8824</span>, <span class="hljs-number">9022</span>, <span class="hljs-number">9225</span>, <span class="hljs-number">9433</span>, <span class="hljs-number">9645</span>, <span class="hljs-number">9862</span>, <span class="hljs-number">10084</span>]closest_time:  <span class="hljs-number">00</span>:<span class="hljs-number">59</span>:<span class="hljs-number">03</span>closest_time_heading:  <span class="hljs-number">81.1</span>The predicted time running <span class="hljs-number">30</span>k <span class="hljs-keyword">is</span>: <span class="hljs-number">01</span>:<span class="hljs-number">31</span>:<span class="hljs-number">08.</span></code></pre><h3 id="工具箱"><a href="#工具箱" class="headerlink" title="工具箱"></a>工具箱</h3><h4 id="查看函数功能"><a href="#查看函数功能" class="headerlink" title="查看函数功能"></a>查看函数功能</h4><p><code>dir(__builtins__)</code>， 可以看到Python提供的内置方法列表。所有的小写单词都是BIF（内置方法）<br><code>help(某个BIF函数)</code>，查看某个内置BIF函数的功能</p><pre><code class="hljs python">print(<span class="hljs-built_in">dir</span>(__builtins__))<span class="hljs-comment"># 查看print 内置函数</span><span class="hljs-built_in">help</span>(<span class="hljs-built_in">print</span>)<span class="hljs-comment"># 输出</span>[<span class="hljs-string">&#x27;ArithmeticError&#x27;</span>, <span class="hljs-string">&#x27;AssertionError&#x27;</span>, <span class="hljs-string">&#x27;AttributeError&#x27;</span>, <span class="hljs-string">&#x27;BaseException&#x27;</span>, <span class="hljs-string">&#x27;BlockingIOError&#x27;</span>, <span class="hljs-string">&#x27;BrokenPipeError&#x27;</span>, <span class="hljs-string">&#x27;BufferError&#x27;</span>, <span class="hljs-string">&#x27;BytesWarning&#x27;</span>, <span class="hljs-string">&#x27;ChildProcessError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionAbortedError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionRefusedError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionResetError&#x27;</span>, <span class="hljs-string">&#x27;DeprecationWarning&#x27;</span>, <span class="hljs-string">&#x27;EOFError&#x27;</span>, <span class="hljs-string">&#x27;Ellipsis&#x27;</span>, <span class="hljs-string">&#x27;EnvironmentError&#x27;</span>, <span class="hljs-string">&#x27;Exception&#x27;</span>, <span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;FileExistsError&#x27;</span>, <span class="hljs-string">&#x27;FileNotFoundError&#x27;</span>, <span class="hljs-string">&#x27;FloatingPointError&#x27;</span>, <span class="hljs-string">&#x27;FutureWarning&#x27;</span>, <span class="hljs-string">&#x27;GeneratorExit&#x27;</span>, <span class="hljs-string">&#x27;IOError&#x27;</span>, <span class="hljs-string">&#x27;ImportError&#x27;</span>, <span class="hljs-string">&#x27;ImportWarning&#x27;</span>, <span class="hljs-string">&#x27;IndentationError&#x27;</span>, <span class="hljs-string">&#x27;IndexError&#x27;</span>, <span class="hljs-string">&#x27;InterruptedError&#x27;</span>, <span class="hljs-string">&#x27;IsADirectoryError&#x27;</span>, <span class="hljs-string">&#x27;KeyError&#x27;</span>, <span class="hljs-string">&#x27;KeyboardInterrupt&#x27;</span>, <span class="hljs-string">&#x27;LookupError&#x27;</span>, <span class="hljs-string">&#x27;MemoryError&#x27;</span>, <span class="hljs-string">&#x27;ModuleNotFoundError&#x27;</span>, <span class="hljs-string">&#x27;NameError&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;NotADirectoryError&#x27;</span>, <span class="hljs-string">&#x27;NotImplemented&#x27;</span>, <span class="hljs-string">&#x27;NotImplementedError&#x27;</span>, <span class="hljs-string">&#x27;OSError&#x27;</span>, <span class="hljs-string">&#x27;OverflowError&#x27;</span>, <span class="hljs-string">&#x27;PendingDeprecationWarning&#x27;</span>, <span class="hljs-string">&#x27;PermissionError&#x27;</span>, <span class="hljs-string">&#x27;ProcessLookupError&#x27;</span>, <span class="hljs-string">&#x27;RecursionError&#x27;</span>, <span class="hljs-string">&#x27;ReferenceError&#x27;</span>, <span class="hljs-string">&#x27;ResourceWarning&#x27;</span>, <span class="hljs-string">&#x27;RuntimeError&#x27;</span>, <span class="hljs-string">&#x27;RuntimeWarning&#x27;</span>, <span class="hljs-string">&#x27;StopAsyncIteration&#x27;</span>, <span class="hljs-string">&#x27;StopIteration&#x27;</span>, <span class="hljs-string">&#x27;SyntaxError&#x27;</span>, <span class="hljs-string">&#x27;SyntaxWarning&#x27;</span>, <span class="hljs-string">&#x27;SystemError&#x27;</span>, <span class="hljs-string">&#x27;SystemExit&#x27;</span>, <span class="hljs-string">&#x27;TabError&#x27;</span>, <span class="hljs-string">&#x27;TimeoutError&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>, <span class="hljs-string">&#x27;TypeError&#x27;</span>, <span class="hljs-string">&#x27;UnboundLocalError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeDecodeError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeEncodeError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeTranslateError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeWarning&#x27;</span>, <span class="hljs-string">&#x27;UserWarning&#x27;</span>, <span class="hljs-string">&#x27;ValueError&#x27;</span>, <span class="hljs-string">&#x27;Warning&#x27;</span>, <span class="hljs-string">&#x27;ZeroDivisionError&#x27;</span>, <span class="hljs-string">&#x27;__build_class__&#x27;</span>, <span class="hljs-string">&#x27;__debug__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;__import__&#x27;</span>, <span class="hljs-string">&#x27;__loader__&#x27;</span>, <span class="hljs-string">&#x27;__name__&#x27;</span>, <span class="hljs-string">&#x27;__package__&#x27;</span>, <span class="hljs-string">&#x27;__spec__&#x27;</span>, <span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;all&#x27;</span>, <span class="hljs-string">&#x27;any&#x27;</span>, <span class="hljs-string">&#x27;ascii&#x27;</span>, <span class="hljs-string">&#x27;bin&#x27;</span>, <span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-string">&#x27;bytearray&#x27;</span>, <span class="hljs-string">&#x27;bytes&#x27;</span>, <span class="hljs-string">&#x27;callable&#x27;</span>, <span class="hljs-string">&#x27;chr&#x27;</span>, <span class="hljs-string">&#x27;classmethod&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;complex&#x27;</span>, <span class="hljs-string">&#x27;copyright&#x27;</span>, <span class="hljs-string">&#x27;credits&#x27;</span>, <span class="hljs-string">&#x27;delattr&#x27;</span>, <span class="hljs-string">&#x27;dict&#x27;</span>, <span class="hljs-string">&#x27;dir&#x27;</span>, <span class="hljs-string">&#x27;divmod&#x27;</span>, <span class="hljs-string">&#x27;enumerate&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-string">&#x27;filter&#x27;</span>, <span class="hljs-string">&#x27;float&#x27;</span>, <span class="hljs-string">&#x27;format&#x27;</span>, <span class="hljs-string">&#x27;frozenset&#x27;</span>, <span class="hljs-string">&#x27;getattr&#x27;</span>, <span class="hljs-string">&#x27;globals&#x27;</span>, <span class="hljs-string">&#x27;hasattr&#x27;</span>, <span class="hljs-string">&#x27;hash&#x27;</span>, <span class="hljs-string">&#x27;help&#x27;</span>, <span class="hljs-string">&#x27;hex&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;isinstance&#x27;</span>, <span class="hljs-string">&#x27;issubclass&#x27;</span>, <span class="hljs-string">&#x27;iter&#x27;</span>, <span class="hljs-string">&#x27;len&#x27;</span>, <span class="hljs-string">&#x27;license&#x27;</span>, <span class="hljs-string">&#x27;list&#x27;</span>, <span class="hljs-string">&#x27;locals&#x27;</span>, <span class="hljs-string">&#x27;map&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;memoryview&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;next&#x27;</span>, <span class="hljs-string">&#x27;object&#x27;</span>, <span class="hljs-string">&#x27;oct&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;ord&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;print&#x27;</span>, <span class="hljs-string">&#x27;property&#x27;</span>, <span class="hljs-string">&#x27;quit&#x27;</span>, <span class="hljs-string">&#x27;range&#x27;</span>, <span class="hljs-string">&#x27;repr&#x27;</span>, <span class="hljs-string">&#x27;reversed&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;set&#x27;</span>, <span class="hljs-string">&#x27;setattr&#x27;</span>, <span class="hljs-string">&#x27;slice&#x27;</span>, <span class="hljs-string">&#x27;sorted&#x27;</span>, <span class="hljs-string">&#x27;staticmethod&#x27;</span>, <span class="hljs-string">&#x27;str&#x27;</span>, <span class="hljs-string">&#x27;sum&#x27;</span>, <span class="hljs-string">&#x27;super&#x27;</span>, <span class="hljs-string">&#x27;tuple&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>, <span class="hljs-string">&#x27;vars&#x27;</span>, <span class="hljs-string">&#x27;zip&#x27;</span>]Help on built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">print</span> <span class="hljs-keyword">in</span> module builtins:print(...)    print(value, ..., sep=<span class="hljs-string">&#x27; &#x27;</span>, end=<span class="hljs-string">&#x27;\n&#x27;</span>, file=sys.stdout, flush=<span class="hljs-literal">False</span>)        Prints the values to a stream, <span class="hljs-keyword">or</span> to sys.stdout by default.    Optional keyword arguments:    file:  a file-like <span class="hljs-built_in">object</span> (stream); defaults to the current sys.stdout.    sep:   string inserted between values, default a space.    end:   string appended after the last value, default a newline.    flush: whether to forcibly flush the stream.</code></pre><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>Python中的各个模块提供了自己的命名空间，使用module.function()形式调用模块的函数时，要用命名空间名限定函数。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> athletemodel<span class="hljs-keyword">import</span> globdata_files = glob.glob(<span class="hljs-string">&quot;data/*.txt&quot;</span>)athletes = athletemodel.put_to_store(data_files)</code></pre><p><strong><u>ps: 本文仅为《Head First Python》一书学习笔记，仅供学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Logstash安装学习</title>
    <link href="/2020/05/06/logstash-data-transform/"/>
    <url>/2020/05/06/logstash-data-transform/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Logstash安装学习"><a href="#Logstash安装学习" class="headerlink" title="Logstash安装学习"></a>Logstash安装学习</h2><p>Logstash是Elasticsearch下的一款开源软件，它能够同时从多个来源采集数据、转换数据，然后将数据发送到Eleasticsearch中创建索引。 可以使用Logstash将MySQL中的数据采用到ES索引中。</p><h3 id="安装Logstash"><a href="#安装Logstash" class="headerlink" title="安装Logstash"></a>安装Logstash</h3><p>软件下载: <code>https://www.elastic.co/cn/downloads/past-releases/logstash-6-2-1</code> (与本地的es版本要一致)</p><p>解压logstash-6.2.1.zip包后，安装logstash-input-jdbc插件<br><code>./logstash-plugin install logstash-input-jdbc</code><br>说明：logstash-input-jdbc是ruby开发的，先下载ruby并安装<code>https://rubyinstaller.org/downloads/</code>，版本2.5即可</p><pre><code class="hljs bash">$ ruby -vruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin19]$ <span class="hljs-built_in">cd</span> /Users/user_name/Documents/elasticsearch/jar/logstash-6.2.1/bin$ lsbenchmark.shingest-convert.shlogstash-keystore.batlogstash.batrubycpdumplogstashlogstash-pluginlogstash.lib.shsetup.batdependencies-reportlogstash-keystorelogstash-plugin.batpqchecksystem-install$ ./logstash-plugin install logstash-input-jdbcValidating logstash-input-jdbcInstalling logstash-input-jdbcInstallation successful// 插件安装路径$ <span class="hljs-built_in">cd</span> /Users/user_name/Documents/elasticsearch/jar/logstash-6.2.1/vendor/bundle/jruby/2.3.0/gems</code></pre><h3 id="创建模板文件"><a href="#创建模板文件" class="headerlink" title="创建模板文件"></a>创建模板文件</h3><p>Logstash的工作是从MySQL中读取数据，向ES中创建索引，这里需要提前创建mapping的模板文件以便logstash使用。<br>在logstach的config目录创建xc_course_template.json</p><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /Users/zhuyangze/Documents/elasticsearch/jar/logstash-6.2.1/config/$ lsjvm.optionslogstash.ymlmysql.confstartup.optionslog4j2.propertieslogstash_metadatapipelines.ymlxc_course_template.json</code></pre><p>xc_course_template.json模板文件</p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;        <span class="hljs-attr">&quot;doc&quot;</span>: &#123;            <span class="hljs-attr">&quot;properties&quot;</span>: &#123;                <span class="hljs-attr">&quot;charge&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;description&quot;</span>: &#123;                    <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,                    <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;end_time&quot;</span>: &#123;                    <span class="hljs-attr">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>                &#125;,                <span class="hljs-attr">&quot;expires&quot;</span>: &#123;                    <span class="hljs-attr">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>                &#125;,                <span class="hljs-attr">&quot;grade&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;id&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;mt&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;name&quot;</span>: &#123;                    <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,                    <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;pic&quot;</span>: &#123;                    <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;price&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;float&quot;</span>                &#125;,                <span class="hljs-attr">&quot;price_old&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;float&quot;</span>                &#125;,                <span class="hljs-attr">&quot;pub_time&quot;</span>: &#123;                    <span class="hljs-attr">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>                &#125;,                <span class="hljs-attr">&quot;qq&quot;</span>: &#123;                    <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;st&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;start_time&quot;</span>: &#123;                    <span class="hljs-attr">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>                &#125;,                <span class="hljs-attr">&quot;status&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;teachmode&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;teachplan&quot;</span>: &#123;                    <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,                    <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;users&quot;</span>: &#123;                    <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;valid&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;            &#125;        &#125;    &#125;,    <span class="hljs-attr">&quot;template&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>&#125;</code></pre><h3 id="配置mysql-conf"><a href="#配置mysql-conf" class="headerlink" title="配置mysql.conf"></a>配置mysql.conf</h3><p>在logstash的config目录下配置mysql.conf文件供logstash使用，logstash会根据mysql.conf文件的配置的地址从MySQL中读取数据向ES中写入索引。</p><p>mysql.conf</p><pre><code class="hljs json">input &#123;  stdin &#123;  &#125;  jdbc &#123;  # jdbc_connection_string =&gt; &quot;jdbc:mysql://localhost:3306/xc_course?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC&quot;  jdbc_connection_string =&gt; &quot;jdbc:mysql://192.xxx.xxx.xxx:3306/xc_course?characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC&quot;  # the user we wish to excute our statement as  jdbc_user =&gt; &quot;root&quot;  jdbc_password =&gt; user_pwd  # the path to our downloaded jdbc driver  jdbc_driver_library =&gt; &quot;/Users/user_name/Documents/jar/mysql-connector-java-5.1.46.jar&quot;  # the name of the driver class for mysql  jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot;  jdbc_paging_enabled =&gt; &quot;true&quot;  jdbc_page_size =&gt; &quot;50000&quot;  #要执行的sql文件  #statement_filepath =&gt; &quot;/conf/course.sql&quot;  statement =&gt; &quot;select * from course_pub where timestamp &gt; date_add(:sql_last_value,INTERVAL 8 HOUR)&quot;  #定时配置  schedule =&gt; &quot;* * * * *&quot;  record_last_run =&gt; true  last_run_metadata_path =&gt; &quot;/Users/user_name/Documents/elasticsearch/jar/logstash-6.2.1/config/logstash_metadata&quot;  &#125;&#125;output &#123;  elasticsearch &#123;  #ES的ip地址和端口  hosts =&gt; &quot;192.xxx.xxx.xxx:9200&quot;  #hosts =&gt; [&quot;localhost:9200&quot;,&quot;localhost:9202&quot;,&quot;localhost:9203&quot;]  #ES索引库名称  index =&gt; &quot;xc_course&quot;  document_id =&gt; &quot;%&#123;id&#125;&quot;  document_type =&gt; &quot;doc&quot;  template =&gt;&quot;/Users/user_name/Documents/elasticsearch/jar/logstash-6.2.1/config/xc_course_template.json&quot;  template_name =&gt;&quot;xc_course&quot;  template_overwrite =&gt;&quot;true&quot;  &#125;  stdout &#123; #日志输出  codec =&gt; json_lines  &#125;&#125;</code></pre><p>ES采用UTC 时区，比北京时间早8小时，所以ES读取数据时让最后更新时间加8小时<br>where timestamp &gt; date_add(:sql_last_value,INTERVAL 8 HOUR)<br>logstash每个执行完成会在/Users/user_name/Documents/elasticsearch/jar/logstash-6.2.1/config/logstash_metadata记录执行时间下次以此 时间为基准进行增量同步数据到索引库。</p><h3 id="启动Logstash"><a href="#启动Logstash" class="headerlink" title="启动Logstash"></a>启动Logstash</h3><p><code>./logstash -f ../config/mysql.conf</code></p><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /Users/user_name/Documents/elasticsearch/jar/logstash-6.2.1/bin$ ./logstash -f ../config/mysql.conf...[INFO ][logstash.inputs.jdbc     ] (0.003997s) SELECT count(*) AS `count` FROM (select * from course_pub <span class="hljs-built_in">where</span> timestamp &gt; date_add(<span class="hljs-string">&#x27;2020-05-06 05:59:00&#x27;</span>,INTERVAL 8 HOUR)) AS `t1` LIMIT 1[INFO ][logstash.inputs.jdbc     ] (0.009669s) SELECT * FROM (select * from course_pub <span class="hljs-built_in">where</span> timestamp &gt; date_add(<span class="hljs-string">&#x27;2020-05-06 05:59:00&#x27;</span>,INTERVAL 8 HOUR)) AS `t1` LIMIT 50000 OFFSET 0&#123;<span class="hljs-string">&quot;end_time&quot;</span>:null,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Bootstrap开发框架测试&quot;</span>,<span class="hljs-string">&quot;pic&quot;</span>:<span class="hljs-string">&quot;group1/M00/00/00/rBEJ_l6fDIuATXcwAANTmWtxdDs870.png&quot;</span>,<span class="hljs-string">&quot;qq&quot;</span>:<span class="hljs-string">&quot;4455432&quot;</span>,<span class="hljs-string">&quot;expires&quot;</span>:null,<span class="hljs-string">&quot;start_time&quot;</span>:null,<span class="hljs-string">&quot;teachmode&quot;</span>:null,<span class="hljs-string">&quot;teachplan&quot;</span>:<span class="hljs-string">&quot;&#123;\&quot;children\&quot;:[&#123;\&quot;children\&quot;:[&#123;\&quot;id\&quot;:\&quot;3\&quot;,\&quot;pname\&quot;:\&quot;计算机硬件\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;4\&quot;,\&quot;pname\&quot;:\&quot;计算机软件\&quot;&#125;],\&quot;id\&quot;:\&quot;2\&quot;,\&quot;pname\&quot;:\&quot;计算机原理\&quot;&#125;,&#123;\&quot;children\&quot;:[&#123;\&quot;id\&quot;:\&quot;ff808081717e005701717e19b5120002\&quot;,\&quot;pname\&quot;:\&quot;Python学习课堂一\&quot;&#125;],\&quot;id\&quot;:\&quot;ff808081717e005701717e0821660001\&quot;,\&quot;pname\&quot;:\&quot;Python学习\&quot;&#125;,&#123;\&quot;children\&quot;:[&#123;\&quot;id\&quot;:\&quot;6\&quot;,\&quot;pname\&quot;:\&quot;java语法介绍\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;7\&quot;,\&quot;pname\&quot;:\&quot;Hello World\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;ff808081717e005701717e063c170000\&quot;,\&quot;pname\&quot;:\&quot;java高级编程\&quot;&#125;],\&quot;id\&quot;:\&quot;5\&quot;,\&quot;pname\&quot;:\&quot;计算机编程入门\&quot;&#125;,&#123;\&quot;children\&quot;:[&#123;\&quot;id\&quot;:\&quot;402885816347f814016348d68bad0000\&quot;,\&quot;pname\&quot;:\&quot;数据库基础知识\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;402885816347f814016348d6c5920001\&quot;,\&quot;pname\&quot;:\&quot;SQL查询\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;402885816347f814016348d7153c0002\&quot;,\&quot;pname\&quot;:\&quot;SQL优化\&quot;&#125;],\&quot;id\&quot;:\&quot;4028e581617ce7b601617ce801790000\&quot;,\&quot;pname\&quot;:\&quot;数据库编程\&quot;&#125;,&#123;\&quot;children\&quot;:[&#123;\&quot;id\&quot;:\&quot;4028e581617d02e101617d070ed90000\&quot;,\&quot;pname\&quot;:\&quot;操作系统类型介绍\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;4028e58161bbcd350161bbcefe3d0001\&quot;,\&quot;pname\&quot;:\&quot;操作系统原理\&quot;&#125;],\&quot;id\&quot;:\&quot;8\&quot;,\&quot;pname\&quot;:\&quot;操作系统原理\&quot;&#125;],\&quot;id\&quot;:\&quot;1\&quot;,\&quot;pname\&quot;:\&quot;Bootstrap开发框架\&quot;&#125;&quot;</span>,<span class="hljs-string">&quot;st&quot;</span>:<span class="hljs-string">&quot;1-1-1&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;4028e581617f945f01617f9dabc40000&quot;</span>,<span class="hljs-string">&quot;@version&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;charge&quot;</span>:<span class="hljs-string">&quot;203002&quot;</span>,<span class="hljs-string">&quot;studymodel&quot;</span>:<span class="hljs-string">&quot;201001&quot;</span>,<span class="hljs-string">&quot;price&quot;</span>:0.009999999776482582,<span class="hljs-string">&quot;@timestamp&quot;</span>:<span class="hljs-string">&quot;2020-05-06T06:00:00.561Z&quot;</span>,<span class="hljs-string">&quot;mt&quot;</span>:<span class="hljs-string">&quot;1-1&quot;</span>,<span class="hljs-string">&quot;grade&quot;</span>:<span class="hljs-string">&quot;200002&quot;</span>,<span class="hljs-string">&quot;timestamp&quot;</span>:<span class="hljs-string">&quot;2020-05-06T09:10:45.000Z&quot;</span>,<span class="hljs-string">&quot;valid&quot;</span>:<span class="hljs-string">&quot;204001&quot;</span>,<span class="hljs-string">&quot;pub_time&quot;</span>:<span class="hljs-string">&quot;2020-05-05 17:08:44&quot;</span>,<span class="hljs-string">&quot;users&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;price_old&quot;</span>:null,<span class="hljs-string">&quot;description&quot;</span>:<span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>&#125;</code></pre><p>问题：</p><p>服务端的mysql拒绝连接</p><pre><code class="hljs bash">[ERROR][logstash.inputs.jdbc] Unable to connect to database. Tried 1 <span class="hljs-built_in">times</span> &#123;:error_message=&gt;<span class="hljs-string">&quot;Java::JavaSql::SQLException: Access denied for user &#x27;root&#x27;@&#x27;192.xxx.xxx.xxx&#x27; (using password: YES)&quot;</span>&#125;ERROR 1064 (42000): You have an error <span class="hljs-keyword">in</span> your SQL syntax; check the manual that corresponds to your MySQL server version <span class="hljs-keyword">for</span> the right syntax to use near <span class="hljs-string">&#x27;identified by &#x27;</span>user_pwd<span class="hljs-string">&#x27; with grant option&#x27;</span> at line 1// 解决方法（mysql远程登录问题）// Mysql 8.0以前的版本：GRANT ALL PRIVILEGES ON *.* TO `root`@`%` IDENTIFIED BY `user_pwd` WITH GRANT OPTION;// Mysql 8.0以后的版本：CREATE USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;user_pwd&#x27;</span>; GRANT ALL ON *.* TO <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>; ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">&#x27;user_pwd&#x27;</span>;FLUSH PRIVILEGES;</code></pre><h3 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h3><p>访问<code>http://localhost:9100/</code><br><img src="/2020/05/06/logstash-data-transform/1.png" alt="logstash-data"></p><p><strong><u>ps:本文为学习笔记，仅供学习与参考</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>elasticsearch</tag>
      
      <tag>logstash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch集群搭建</title>
    <link href="/2020/05/01/elasticsearch-cluster-node/"/>
    <url>/2020/05/01/elasticsearch-cluster-node/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Elasticsearch集群搭建"><a href="#Elasticsearch集群搭建" class="headerlink" title="Elasticsearch集群搭建"></a>Elasticsearch集群搭建</h2><h3 id="集群结构"><a href="#集群结构" class="headerlink" title="集群结构"></a>集群结构</h3><p>ES通常以<strong>集群方式</strong>工作，这样做不仅能够提高 ES的搜索能力还可以处理大数据搜索的能力，同时也增加了系统的容错能力及高可用，ES可以实现PB级数据的搜索。</p><p><img src="/2020/05/01/elasticsearch-cluster-node/1.png" alt="es-cluster"></p><p>1、结点<br>ES集群由多个服务器组成，每个服务器即为一个Node结点(该服务只部署了一个ES进程)。<br>2、分片<br>当我们的文档量很大时，由于内存和硬盘的限制，同时也为了提高ES的处理能力、容错能力及高可用能力，我们将索引分成若干分片，每个分片可以放在不同的服务器，这样就实现了多个服务器共同对外提供索引及搜索服务。一个搜索请求过来，会分别从各个分片去查询，最后将查询到的数据合并返回给用户。<br> 3、副本<br>为了提高ES的高可用同时也为了提高搜索的吞吐量，我们将分片复制一份或多份存储在其它的服务器，这样即使当前的服务器挂掉了，拥有副本的服务器照常可以提供服务。<br>4、主结点<br>一个集群中会有一个或多个主结点，主结点的作用是集群管理，比如增加节点，移除节点等，主结点挂掉后ES会重新选一个主结点。<br>5、结点转发<br>每个结点都知道其它结点的信息，我们可以对任意一个结点发起请求，接收请求的结点会转发给其它结点查询数据。</p><h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><p>主结点：master节点主要用于集群的管理及索引，比如新增结点、分片分配、索引的新增和删除等。<br>数据结点：data节点上保存了数据分片，它负责索引和搜索操作。<br>客户端结点：client 节点仅作为请求客户端存在，client的作用也作为负载均衡器，client节点不存数据，只是将请求均衡转发到其它结点。</p><p>通过下边两项参数来配置结点的功能:<br> node.master: 是否允许为主结点<br> node.data: 允许存储数据作为数据结点<br> node.ingest: 是否允许成为协调节点<br> 四种组合方式:<br> master=true，data=true：即是主结点又是数据结点<br> master=false，data=true：仅是数据结点<br> master=true，data=false：仅是主结点，不存储数据<br>master=false，data=false：即不是主结点也不是数据结点，此时可设置ingest为true表示它是一个客户端。</p><p>本次实验是在同一台机器模拟集群，生产环境是不同的服务器IP上，端口不变，IP改变即可。</p><h4 id="config配置"><a href="#config配置" class="headerlink" title="config配置"></a>config配置</h4><p>master结点的elasticsearch.yml</p><pre><code class="hljs yaml"><span class="hljs-comment">#cluster.name: my-application</span><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">lc-xc</span><span class="hljs-comment">#node.name: node-1</span><span class="hljs-attr">node.name:</span> <span class="hljs-string">xc_node-1</span><span class="hljs-comment">#path.data: /path/to/data</span><span class="hljs-attr">path.data:</span> <span class="hljs-string">/Users/user_name/Documents/elasticsearch/data/elasticsearch-6.3.2</span><span class="hljs-comment">#path.logs: /path/to/logs</span><span class="hljs-attr">path.logs:</span> <span class="hljs-string">/Users/user_name/Documents/elasticsearch/log/elasticsearch-6.3.2</span><span class="hljs-comment">#bootstrap.memory_lock: true</span><span class="hljs-attr">bootstrap.memory_lock:</span> <span class="hljs-literal">false</span><span class="hljs-comment">#network.host: 192.168.0.1</span><span class="hljs-attr">network.host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.104</span><span class="hljs-comment">#http.port: 9200</span><span class="hljs-attr">http.port:</span> <span class="hljs-number">9200</span><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9300</span><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">/.*/</span><span class="hljs-comment">#discovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2&quot;]</span><span class="hljs-attr">discovery.zen.ping.unicast.hosts:</span> [<span class="hljs-string">&quot;192.168.0.104:9300&quot;</span>, <span class="hljs-string">&quot;192.168.0.104:9301&quot;</span>]<span class="hljs-comment">#discovery.zen.minimum_master_nodes: </span><span class="hljs-attr">discovery.zen.minimum_master_nodes:</span> <span class="hljs-number">1</span><span class="hljs-attr">node.ingest:</span> <span class="hljs-literal">true</span><span class="hljs-attr">node.max_local_storage_nodes:</span> <span class="hljs-number">2</span></code></pre><p>节点1的elasticsearch.yml</p><pre><code class="hljs yaml"><span class="hljs-comment">#cluster.name: my-application</span><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">lc-xc</span><span class="hljs-comment">#node.name: node-1</span><span class="hljs-attr">node.name:</span> <span class="hljs-string">xc_node-2</span><span class="hljs-comment">#path.data: /path/to/data</span><span class="hljs-attr">path.data:</span> <span class="hljs-string">/Users/user_name/Documents/elasticsearch/data/elasticsearch-6.3.2-2</span><span class="hljs-comment">#path.logs: /path/to/logs</span><span class="hljs-attr">path.logs:</span> <span class="hljs-string">/Users/user_name/Documents/elasticsearch/log/elasticsearch-6.3.2-2</span><span class="hljs-comment">#bootstrap.memory_lock: true</span><span class="hljs-attr">bootstrap.memory_lock:</span> <span class="hljs-literal">false</span><span class="hljs-comment">#network.host: 192.168.0.1</span><span class="hljs-attr">network.host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.104</span><span class="hljs-comment">#http.port: 9200</span><span class="hljs-attr">http.port:</span> <span class="hljs-number">9201</span><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9301</span><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">/.*/</span><span class="hljs-comment">#discovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2&quot;]</span><span class="hljs-attr">discovery.zen.ping.unicast.hosts:</span> [<span class="hljs-string">&quot;192.168.0.104:9300&quot;</span>, <span class="hljs-string">&quot;192.168.0.104:9301&quot;</span>]<span class="hljs-comment">#discovery.zen.minimum_master_nodes: </span><span class="hljs-attr">discovery.zen.minimum_master_nodes:</span> <span class="hljs-number">1</span><span class="hljs-attr">node.ingest:</span> <span class="hljs-literal">true</span><span class="hljs-attr">node.max_local_storage_nodes:</span> <span class="hljs-number">2</span></code></pre><p>节点3的elasticsearch.yml</p><pre><code class="hljs yaml"><span class="hljs-comment">#cluster.name: my-application</span><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">lc-xc</span><span class="hljs-comment">#node.name: node-1</span><span class="hljs-attr">node.name:</span> <span class="hljs-string">xc_node-3</span><span class="hljs-comment">#path.data: /path/to/data</span><span class="hljs-attr">path.data:</span> <span class="hljs-string">/Users/user_name/Documents/elasticsearch/data/elasticsearch-6.3.2-3</span><span class="hljs-comment">#path.logs: /path/to/logs</span><span class="hljs-attr">path.logs:</span> <span class="hljs-string">/Users/user_name/Documents/elasticsearch/log/elasticsearch-6.3.2-3</span><span class="hljs-comment">#bootstrap.memory_lock: true</span><span class="hljs-attr">bootstrap.memory_lock:</span> <span class="hljs-literal">false</span><span class="hljs-comment">#network.host: 192.168.0.1</span><span class="hljs-attr">network.host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.104</span><span class="hljs-comment">#http.port: 9200</span><span class="hljs-attr">http.port:</span> <span class="hljs-number">9202</span><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9302</span><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">/.*/</span><span class="hljs-comment">#discovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2&quot;]</span><span class="hljs-attr">discovery.zen.ping.unicast.hosts:</span> [<span class="hljs-string">&quot;192.168.0.104:9300&quot;</span>, <span class="hljs-string">&quot;192.168.0.104:9301&quot;</span>]<span class="hljs-comment">#discovery.zen.minimum_master_nodes: </span><span class="hljs-attr">discovery.zen.minimum_master_nodes:</span> <span class="hljs-number">1</span><span class="hljs-attr">node.ingest:</span> <span class="hljs-literal">true</span><span class="hljs-attr">node.max_local_storage_nodes:</span> <span class="hljs-number">2</span></code></pre><p>说明：主节点的plugin中的ik分词器，也要复制到节点1，2中。</p><h4 id="启动主结点与节点1"><a href="#启动主结点与节点1" class="headerlink" title="启动主结点与节点1"></a>启动主结点与节点1</h4><p><code>bin/elasticsearch</code></p><p>通过es-head插件访问 <code>http://192.168.0.104:9100/</code></p><p><img src="/2020/05/01/elasticsearch-cluster-node/2.png" alt="es-cluster-node-1"></p><p>创建索引，共2个分片，每个分片一个副本。<br><img src="/2020/05/01/elasticsearch-cluster-node/3.png" alt="es-cluster-index"></p><p>新建索引，Postman的访问：<br>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_mapping</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求JSON串</span>&#123;    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;        <span class="hljs-attr">&quot;description&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,            <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,            <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>        &#125;,        <span class="hljs-attr">&quot;name&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,            <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,            <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>        &#125;,        <span class="hljs-attr">&quot;pic&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,            <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span>        &#125;,        <span class="hljs-attr">&quot;price&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;float&quot;</span>        &#125;,        <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>        &#125;,        <span class="hljs-attr">&quot;timestamp&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>,            <span class="hljs-attr">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis&quot;</span>        &#125;    &#125;&#125;</code></pre><p>插入数据<br>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/1</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求JSON串</span>&#123;    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>,    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">38.6</span>,    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-04-25 19:11:35&quot;</span>,    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>&#125;</code></pre><p>访问主节点，查看数据</p><p><img src="/2020/05/01/elasticsearch-cluster-node/4.png" alt="es-cluster-main"></p><p>访问节点1，查看数据</p><p><img src="/2020/05/01/elasticsearch-cluster-node/5.png" alt="es-cluster-node-1"></p><p>此时，启动节点2，访问节点2，会发现上述数据会自动复制到节点2中。</p><p><img src="/2020/05/01/elasticsearch-cluster-node/6.png" alt="es-cluster-node-3"></p><p>集群的健康，可以访问<code>http://192.168.0.104:9200/_cluster/health</code></p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;cluster_name&quot;</span>: <span class="hljs-string">&quot;lc-xc&quot;</span>,    <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-string">&quot;green&quot;</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;number_of_nodes&quot;</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">&quot;number_of_data_nodes&quot;</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">&quot;active_primary_shards&quot;</span>: <span class="hljs-number">2</span>,    <span class="hljs-attr">&quot;active_shards&quot;</span>: <span class="hljs-number">4</span>,    <span class="hljs-attr">&quot;relocating_shards&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;initializing_shards&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;unassigned_shards&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;delayed_unassigned_shards&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;number_of_pending_tasks&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;number_of_in_flight_fetch&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;task_max_waiting_in_queue_millis&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;active_shards_percent_as_number&quot;</span>: <span class="hljs-number">100</span>&#125;</code></pre><p><strong><u>ps：该文仅为学习笔记与记录，仅供参考与学习</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>elasticsearch</tag>
      
      <tag>cluster</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch-dsl搜索学习</title>
    <link href="/2020/04/27/elasticsearch-dsl-search/"/>
    <url>/2020/04/27/elasticsearch-dsl-search/</url>
    
    <content type="html"><![CDATA[<h2 id="Elasticsearch-DSL搜索学习一"><a href="#Elasticsearch-DSL搜索学习一" class="headerlink" title="Elasticsearch-DSL搜索学习一"></a>Elasticsearch-DSL搜索学习一</h2><p>DSL(Domain Specific Language)是ES提出的基于json的搜索方式，在搜索时传入特定的json格式的数据来完成不同的搜索需求。</p><p>DSL比URI搜索方式功能强大，在项目中建议使用DSL方式来完成搜索。</p><h3 id="Postman查询"><a href="#Postman查询" class="headerlink" title="Postman查询"></a>Postman查询</h3><h4 id="查询所有索引库的文档"><a href="#查询所有索引库的文档" class="headerlink" title="查询所有索引库的文档"></a>查询所有索引库的文档</h4><p>Post方法：<code>http://192.168.0.104:9200/_search</code></p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">1</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">3</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">38.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-04-25 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;java编程基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">68.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-03-25 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">88.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-02-24 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><h4 id="查询指定索引库指定类型下的文档"><a href="#查询指定索引库指定类型下的文档" class="headerlink" title="查询指定索引库指定类型下的文档"></a>查询指定索引库指定类型下的文档</h4><p>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code>，一般采用这种方法</p><pre><code class="hljs json"><span class="hljs-comment">// 请求json串</span>&#123;<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;match_all&quot;</span>: &#123;&#125;&#125;,<span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>]&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">2</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">3</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>                &#125;            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;java编程基础&quot;</span>                &#125;            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>                &#125;            &#125;        ]    &#125;&#125;<span class="hljs-comment">// took:本次操作花费的时间，单位为毫秒。 </span><span class="hljs-comment">// timed_out:请求是否超时 </span><span class="hljs-comment">// _shards:说明本次操作共搜索了哪些分片</span><span class="hljs-comment">// hits:搜索命中的记录</span><span class="hljs-comment">// hits.total : 符合条件的文档总数 </span><span class="hljs-comment">// hits.hits :匹配度较高的前N个文档 </span><span class="hljs-comment">// hits.max_score:文档匹配得分，这里为最高分 </span><span class="hljs-comment">// _score:每个文档都有一个匹配度得分，按照降序排列。 </span><span class="hljs-comment">// _source:显示了文档的原始内容。</span></code></pre><h3 id="JavaClient查询"><a href="#JavaClient查询" class="headerlink" title="JavaClient查询"></a>JavaClient查询</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.elasticsearch;<span class="hljs-keyword">import</span> org.elasticsearch.action.search.SearchRequest;<span class="hljs-keyword">import</span> org.elasticsearch.action.search.SearchResponse;<span class="hljs-keyword">import</span> org.elasticsearch.client.RestClient;<span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<span class="hljs-keyword">import</span> org.elasticsearch.index.query.QueryBuilders;<span class="hljs-keyword">import</span> org.elasticsearch.search.SearchHit;<span class="hljs-keyword">import</span> org.elasticsearch.search.SearchHits;<span class="hljs-keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> org.junit.runner.RunWith;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.text.ParseException;<span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-comment">/**</span><span class="hljs-comment"> * DSL搜索测试</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/27</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootTest</span><span class="hljs-meta">@RunWith(SpringRunner.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSearch</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    RestHighLevelClient client;    <span class="hljs-meta">@Autowired</span>    RestClient restClient;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 搜索全部记录</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSearchAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ParseException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// 搜索方式(matchAllQuery搜索全部)</span>        searchSourceBuilder.query(QueryBuilders.matchAllQuery());        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        SimpleDateFormat dateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;&#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">3</span><span class="hljs-number">1</span>Bootstrap开发Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。<span class="hljs-number">38.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">04</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">2</span>java编程基础java语言是世界第一编程语言，在软件开发领域使用人数最多。<span class="hljs-number">68.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">3</span>spring开发基础spring 在java领域非常流行，java程序员都在用。<span class="hljs-number">88.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">24</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;from&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-attr">&quot;size&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;match_all&quot;</span>: &#123;&#125;&#125;,<span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>]&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">1</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">3</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * 搜索全部记录</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSearchPage</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ParseException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// 设置分页参数，起始下标，从0开始</span>        <span class="hljs-comment">// 页码</span>        <span class="hljs-keyword">int</span> page = <span class="hljs-number">1</span>;        <span class="hljs-comment">// 每页记录数</span>        <span class="hljs-keyword">int</span> size = <span class="hljs-number">1</span>;        <span class="hljs-comment">// 记录起始记录数</span>        <span class="hljs-keyword">int</span> from = (page - <span class="hljs-number">1</span>) * size;        searchSourceBuilder.from(from);        searchSourceBuilder.size(size);        <span class="hljs-comment">// 搜索方式(matchAllQuery搜索全部)</span>        searchSourceBuilder.query(QueryBuilders.matchAllQuery());        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-comment">// SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span>        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">3</span><span class="hljs-number">1</span>Bootstrap开发Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。<span class="hljs-number">38.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">04</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><h3 id="Term-Query"><a href="#Term-Query" class="headerlink" title="Term Query"></a>Term Query</h3><p>Term Query为<strong>精确查询</strong>，在搜索时会**<u>整体匹配关键字</u>**，不再将关键字分词。</p><p>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;term&quot;</span>: &#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发&quot;</span>&#125;&#125;,<span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>]&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">1</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-literal">null</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: []    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * Term query查询记录</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSearchTermQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ParseException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// 搜索方式(matchAllQuery搜索全部)</span>        <span class="hljs-comment">// searchSourceBuilder.query(QueryBuilders.matchAllQuery());</span>        <span class="hljs-comment">// TermQuery查询</span>        searchSourceBuilder.query(QueryBuilders.termQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;spring&quot;</span>));        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">1</span><span class="hljs-number">3</span>spring开发基础spring 在java领域非常流行，java程序员都在用。<span class="hljs-number">88.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">24</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><h3 id="根据ID精确匹配"><a href="#根据ID精确匹配" class="headerlink" title="根据ID精确匹配"></a>根据ID精确匹配</h3><p>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;ids&quot;</span>: &#123;<span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,<span class="hljs-attr">&quot;values&quot;</span>: [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;100&quot;</span>]&#125;&#125;,<span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>]&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>                &#125;            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;java编程基础&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * Term query ID查询记录</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSearchTermQueryByIds</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ParseException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// TermQuery查询-ID精确查询</span>        <span class="hljs-comment">// searchSourceBuilder.query(QueryBuilders.termQuery(&quot;name&quot;, &quot;spring&quot;));</span>        String[] ids = <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>&#125;;        List&lt;String&gt; idList = Arrays.asList(ids);        searchSourceBuilder.query(QueryBuilders.termsQuery(<span class="hljs-string">&quot;_id&quot;</span>, idList));        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">2</span><span class="hljs-number">1</span>Bootstrap开发Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。<span class="hljs-number">38.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">04</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">2</span>java编程基础java语言是世界第一编程语言，在软件开发领域使用人数最多。<span class="hljs-number">68.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><h3 id="Match-query"><a href="#Match-query" class="headerlink" title="Match query"></a>Match query</h3><p>match Query即全文检索，它的搜索方式是<strong>先将搜索字符串分词</strong>，再使用各各词条从索引中搜索。<br>match query与Term query区别是match query在搜索前先将搜索关键字分词，再拿各各词语去索引中搜索。</p><p>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;match&quot;</span>: &#123;<span class="hljs-attr">&quot;description&quot;</span>: &#123;<span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;spring java&quot;</span>,<span class="hljs-attr">&quot;operator&quot;</span>: <span class="hljs-string">&quot;or&quot;</span>&#125;&#125;&#125;&#125;<span class="hljs-comment">// query:搜索的关键字，对于英文关键字如果有多个单词则中间要用半角逗号分隔，而对于中文关键字中间可以用逗号分隔也可以不用。</span><span class="hljs-comment">// operator:or 表示 只要有一个词在文档中出现则就符合条件，and表示每个词都在文档中出现则才符合条件。</span><span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">2.1239562</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">2.1239562</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">88.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-02-24 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">0.5735117</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;java编程基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">68.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-03-25 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * Match query 查询记录</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMatchQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ParseException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// TermQuery查询-Match query</span>        searchSourceBuilder.query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;spring java&quot;</span>)                .operator(Operator.OR));        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">2</span><span class="hljs-number">3</span>spring开发基础spring 在java领域非常流行，java程序员都在用。<span class="hljs-number">88.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">24</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">2</span>java编程基础java语言是世界第一编程语言，在软件开发领域使用人数最多。<span class="hljs-number">68.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><h3 id="minimum-should-match"><a href="#minimum-should-match" class="headerlink" title="minimum_should_match"></a>minimum_should_match</h3><p>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><p>“spring开发框架”会被分为三个词:spring、开发、框架<br> 设置”minimum_should_match”: “80%”表示，三个词在文档的匹配占比为80%，即3*0.8=2.4，向上取整得2，表示至少有两个词在文档中要匹配成功。</p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;match&quot;</span>: &#123;<span class="hljs-attr">&quot;description&quot;</span>: &#123;<span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;spring开发框架&quot;</span>,<span class="hljs-attr">&quot;minimum_should_match&quot;</span>: <span class="hljs-string">&quot;80%&quot;</span>&#125;&#125;&#125;&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">2.1431413</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">2.1431413</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">38.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-04-25 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * Match query minimum_should_match查询记录</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMatchQueryMinimum</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ParseException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// TermQuery查询-Match query的minimum_should_match查询记录，并设置匹配占比</span>        searchSourceBuilder.query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;spring开发框架&quot;</span>)                .minimumShouldMatch(<span class="hljs-string">&quot;80%&quot;</span>));        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">1</span><span class="hljs-number">1</span>Bootstrap开发Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。<span class="hljs-number">38.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">04</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><p>Multi Query</p><p>termQuery和matchQuery一次只能匹配一个Field，而multiQuery，一次可以匹配多个字段。<br>单项匹配是在一个field中去匹配，多项匹配是拿关键字去多个Field中匹配。</p><p>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;multi_match&quot;</span>: &#123;<span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;spring css&quot;</span>,<span class="hljs-attr">&quot;minimum_should_match&quot;</span>: <span class="hljs-string">&quot;50%&quot;</span>,<span class="hljs-attr">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>]&#125;&#125;&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">16</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">1.3339276</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1.3339276</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">88.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-02-24 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">0.69607234</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">38.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-04-25 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>提升boost</p><p>匹配多个字段时可以提升字段的boost(权重)来提高得分<br>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;multi_match&quot;</span>: &#123;<span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;spring框架&quot;</span>,<span class="hljs-attr">&quot;minimum_should_match&quot;</span>: <span class="hljs-string">&quot;50%&quot;</span>,<span class="hljs-attr">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name^10&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>]&#125;&#125;&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">9.331132</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">9.331132</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">88.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-02-24 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1.4149667</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">38.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-04-25 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java">    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Multi query boost提升权重查询</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMultiMatchBoost</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// Multi query</span>        MultiMatchQueryBuilder multiMatchQueryBuilder = QueryBuilders.multiMatchQuery(<span class="hljs-string">&quot;spring框架&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>)                .minimumShouldMatch(<span class="hljs-string">&quot;50%&quot;</span>);        <span class="hljs-comment">// name^10表示权重提升10倍</span>        multiMatchQueryBuilder.field(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-number">10</span>);        searchSourceBuilder.query(multiMatchQueryBuilder);        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">2</span><span class="hljs-number">3</span>spring开发基础spring 在java领域非常流行，java程序员都在用。<span class="hljs-number">88.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">24</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">1</span>Bootstrap开发Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。<span class="hljs-number">38.6</span></code></pre><h3 id="布尔查询"><a href="#布尔查询" class="headerlink" title="布尔查询"></a>布尔查询</h3><p>布尔查询对应于Lucene的BooleanQuery查询，实现将多个查询组合起来。<br>must:文档必须匹配must所包括的查询条件，相当于 “AND”<br>should:文档应该匹配should所包括的查询条件其 中的一个或多个，相当于 “OR”<br>must_not:文档不能匹配must_not所包括的该查询条件，相当于“NOT”</p><p>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>],<span class="hljs-attr">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-attr">&quot;size&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;bool&quot;</span>: &#123;<span class="hljs-attr">&quot;must&quot;</span>: [&#123;<span class="hljs-attr">&quot;multi_match&quot;</span>: &#123;<span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;spring框架&quot;</span>,<span class="hljs-attr">&quot;minimum_should_match&quot;</span>: <span class="hljs-string">&quot;50%&quot;</span>,<span class="hljs-attr">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name^10&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>]&#125;&#125;,&#123;<span class="hljs-attr">&quot;term&quot;</span>: &#123;<span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>&#125;&#125;]&#125;&#125;&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">24</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">9.801136</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">9.801136</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java">    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 布尔查询</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBoolQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// Multi query</span>        MultiMatchQueryBuilder multiMatchQueryBuilder = QueryBuilders.multiMatchQuery(<span class="hljs-string">&quot;spring基础&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>)                .minimumShouldMatch(<span class="hljs-string">&quot;50%&quot;</span>);        <span class="hljs-comment">// name^10表示权重提升10倍</span>        multiMatchQueryBuilder.field(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-number">10</span>);        multiMatchQueryBuilder.field(<span class="hljs-string">&quot;description&quot;</span>);        <span class="hljs-comment">// term query</span>        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;201001&quot;</span>);        <span class="hljs-comment">// Bool query</span>        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        boolQueryBuilder.must(multiMatchQueryBuilder);        boolQueryBuilder.must(termQueryBuilder);        <span class="hljs-comment">// 设置布尔查询对象</span>        searchSourceBuilder.query(boolQueryBuilder);        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">2</span><span class="hljs-number">3</span>spring开发基础spring 在java领域非常流行，java程序员都在用。<span class="hljs-number">88.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">24</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">2</span>java编程基础java语言是世界第一编程语言，在软件开发领域使用人数最多。<span class="hljs-number">68.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>过虑是针对搜索的结果进行过虑，过虑器主要判断的是文档是否匹配，不去计算和判断文档的匹配度得分，所以过虑器性能比查询要高，且方便缓存，推荐尽量使用过虑器去实现查询或者过虑器和查询共同使用。</p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>],<span class="hljs-attr">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-attr">&quot;size&quot;</span>: <span class="hljs-number">10</span>,<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;bool&quot;</span>: &#123;<span class="hljs-attr">&quot;must&quot;</span>: [&#123;<span class="hljs-attr">&quot;multi_match&quot;</span>: &#123;<span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;spring基础&quot;</span>,<span class="hljs-attr">&quot;minimum_should_match&quot;</span>: <span class="hljs-string">&quot;50%&quot;</span>,<span class="hljs-attr">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name^10&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>]&#125;&#125;],<span class="hljs-attr">&quot;filter&quot;</span>: [&#123;<span class="hljs-attr">&quot;term&quot;</span>: &#123;<span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>&#125;&#125;,&#123;<span class="hljs-attr">&quot;range&quot;</span>: &#123;<span class="hljs-attr">&quot;price&quot;</span>: &#123;<span class="hljs-attr">&quot;gte&quot;</span>: <span class="hljs-number">60</span>, <span class="hljs-attr">&quot;lte&quot;</span>: <span class="hljs-number">70</span>&#125;&#125;&#125;]&#125;&#125;&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">4.471386</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">4.471386</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">68.6</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;java编程基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * Filter查询</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFilter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 设置分页参数，起始下标，从0开始</span>        <span class="hljs-comment">// 页码</span>        <span class="hljs-keyword">int</span> page = <span class="hljs-number">1</span>;        <span class="hljs-comment">// 每页记录数</span>        <span class="hljs-keyword">int</span> size = <span class="hljs-number">10</span>;        <span class="hljs-comment">// 记录起始记录数</span>        <span class="hljs-keyword">int</span> from = (page - <span class="hljs-number">1</span>) * size;        searchSourceBuilder.from(from);        searchSourceBuilder.size(size);        <span class="hljs-comment">// Multi query</span>        MultiMatchQueryBuilder multiMatchQueryBuilder = QueryBuilders.multiMatchQuery(<span class="hljs-string">&quot;spring基础&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>)                .minimumShouldMatch(<span class="hljs-string">&quot;50%&quot;</span>);        <span class="hljs-comment">// name^10表示权重提升10倍</span>        multiMatchQueryBuilder.field(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-number">10</span>);        multiMatchQueryBuilder.field(<span class="hljs-string">&quot;description&quot;</span>);        <span class="hljs-comment">// Bool query</span>        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        <span class="hljs-comment">// 设置布尔查询对象</span>        boolQueryBuilder.must(multiMatchQueryBuilder);        <span class="hljs-comment">// Filter过滤</span>        boolQueryBuilder.filter(QueryBuilders.termQuery(<span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;201001&quot;</span>));        boolQueryBuilder.filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).gte(<span class="hljs-number">60</span>).lte(<span class="hljs-number">70</span>));        searchSourceBuilder.query(boolQueryBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">1</span><span class="hljs-number">2</span>java编程基础java语言是世界第一编程语言，在软件开发领域使用人数最多。<span class="hljs-number">68.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>可以在字段上添加一个或多个排序，支持在keyword、date、float等类型上添加，text类型的字段上不允许添加排序。<br>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>],<span class="hljs-attr">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-attr">&quot;size&quot;</span>: <span class="hljs-number">10</span>,<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;bool&quot;</span>: &#123;<span class="hljs-attr">&quot;filter&quot;</span>: [&#123;<span class="hljs-attr">&quot;range&quot;</span>: &#123;<span class="hljs-attr">&quot;price&quot;</span>: &#123;<span class="hljs-attr">&quot;gte&quot;</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">&quot;lte&quot;</span>: <span class="hljs-number">100</span>&#125;&#125;&#125;]&#125;&#125;,<span class="hljs-attr">&quot;sort&quot;</span>: [&#123;<span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span>&#125;,&#123;<span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span>&#125;]&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">63</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">3</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-literal">null</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">38.6</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>                &#125;,                <span class="hljs-attr">&quot;sort&quot;</span>: [                    <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-number">38.6</span>                ]            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">68.6</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;java编程基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span>                &#125;,                <span class="hljs-attr">&quot;sort&quot;</span>: [                    <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-number">68.6</span>                ]            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">88.6</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>                &#125;,                <span class="hljs-attr">&quot;sort&quot;</span>: [                    <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-number">88.6</span>                ]            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * 排序查询</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSort</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// Bool query</span>        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        <span class="hljs-comment">// Filter过滤</span>        boolQueryBuilder.filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).gte(<span class="hljs-number">20</span>).lte(<span class="hljs-number">90</span>));        searchSourceBuilder.query(boolQueryBuilder);        <span class="hljs-comment">// Sort设置</span>        searchSourceBuilder.sort(<span class="hljs-keyword">new</span> FieldSortBuilder(<span class="hljs-string">&quot;studymodel&quot;</span>).order(SortOrder.DESC));        searchSourceBuilder.sort(<span class="hljs-keyword">new</span> FieldSortBuilder(<span class="hljs-string">&quot;price&quot;</span>).order(SortOrder.ASC));<span class="hljs-comment">//        searchSourceBuilder.sort(&quot;studymodel&quot;, SortOrder.DESC);</span><span class="hljs-comment">//        searchSourceBuilder.sort(&quot;price&quot;, SortOrder.ASC);</span>        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">3</span><span class="hljs-number">1</span>Bootstrap开发Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。<span class="hljs-number">38.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">04</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">2</span>java编程基础java语言是世界第一编程语言，在软件开发领域使用人数最多。<span class="hljs-number">68.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">3</span>spring开发基础spring 在java领域非常流行，java程序员都在用。<span class="hljs-number">88.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">24</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><h3 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h3><p>高亮显示可以将搜索结果一个或多个字突出显示，以便向用户展示匹配关键字的位置。（添加高亮显示的css样式标签）<br>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>],<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;bool&quot;</span>: &#123;<span class="hljs-attr">&quot;must&quot;</span>: [&#123;<span class="hljs-attr">&quot;multi_match&quot;</span>: &#123;<span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;开发框架&quot;</span>,<span class="hljs-attr">&quot;minimum_should_match&quot;</span>: <span class="hljs-string">&quot;50%&quot;</span>,<span class="hljs-attr">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name^10&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>],<span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;best_fields&quot;</span>&#125;&#125;],<span class="hljs-attr">&quot;filter&quot;</span>: [&#123;<span class="hljs-attr">&quot;range&quot;</span>: &#123;<span class="hljs-attr">&quot;price&quot;</span>: &#123;<span class="hljs-attr">&quot;gte&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">&quot;lte&quot;</span>: <span class="hljs-number">100</span>&#125;&#125;&#125;]&#125;&#125;,<span class="hljs-attr">&quot;sort&quot;</span>:[&#123;<span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span>&#125;],<span class="hljs-attr">&quot;highlight&quot;</span>: &#123;<span class="hljs-attr">&quot;pre_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;tag&gt;&quot;</span>],<span class="hljs-attr">&quot;post_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;/tag&gt;&quot;</span>],<span class="hljs-attr">&quot;fields&quot;</span>: &#123;<span class="hljs-attr">&quot;name&quot;</span>: &#123;&#125;,<span class="hljs-attr">&quot;description&quot;</span>: &#123;&#125;&#125;&#125;&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">10</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">3</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-literal">null</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">38.6</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>                &#125;,                <span class="hljs-attr">&quot;highlight&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: [                        <span class="hljs-string">&quot;Bootstrap&lt;tag&gt;开发&lt;/tag&gt;&quot;</span>                    ],                    <span class="hljs-attr">&quot;description&quot;</span>: [                        <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面&lt;tag&gt;开发&lt;/tag&gt;&lt;tag&gt;框架&lt;/tag&gt;，是一个非常流行的&lt;tag&gt;开发&lt;/tag&gt;&lt;tag&gt;框架&lt;/tag&gt;，此&lt;tag&gt;框架&lt;/tag&gt;集成了多种页面效果。&quot;</span>,                        <span class="hljs-string">&quot;此&lt;tag&gt;开发&lt;/tag&gt;&lt;tag&gt;框架&lt;/tag&gt;包含了大量的CSS、JS程序代码，可以帮助&lt;tag&gt;开发&lt;/tag&gt;者（尤其是不擅长页面&lt;tag&gt;开发&lt;/tag&gt;的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>                    ]                &#125;,                <span class="hljs-attr">&quot;sort&quot;</span>: [                    <span class="hljs-number">38.6</span>                ]            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">68.6</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;java编程基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span>                &#125;,                <span class="hljs-attr">&quot;highlight&quot;</span>: &#123;                    <span class="hljs-attr">&quot;description&quot;</span>: [                        <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件&lt;tag&gt;开发&lt;/tag&gt;领域使用人数最多。&quot;</span>                    ]                &#125;,                <span class="hljs-attr">&quot;sort&quot;</span>: [                    <span class="hljs-number">68.6</span>                ]            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">88.6</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>                &#125;,                <span class="hljs-attr">&quot;highlight&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: [                        <span class="hljs-string">&quot;spring&lt;tag&gt;开发&lt;/tag&gt;基础&quot;</span>                    ]                &#125;,                <span class="hljs-attr">&quot;sort&quot;</span>: [                    <span class="hljs-number">88.6</span>                ]            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * Highlight高亮查询</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testHighLight</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// Multi query</span>        MultiMatchQueryBuilder multiMatchQueryBuilder = QueryBuilders.multiMatchQuery(<span class="hljs-string">&quot;开发框架&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>)                .minimumShouldMatch(<span class="hljs-string">&quot;50%&quot;</span>);        <span class="hljs-comment">// name^10表示权重提升10倍</span>        multiMatchQueryBuilder.field(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-number">10</span>);        multiMatchQueryBuilder.field(<span class="hljs-string">&quot;description&quot;</span>);        <span class="hljs-comment">// Bool query</span>        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        <span class="hljs-comment">// 设置布尔查询对象</span>        boolQueryBuilder.must(multiMatchQueryBuilder);        <span class="hljs-comment">// Filter过滤</span>        boolQueryBuilder.filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).gte(<span class="hljs-number">0</span>).lte(<span class="hljs-number">100</span>));        searchSourceBuilder.query(boolQueryBuilder);        <span class="hljs-comment">// 排序</span>        searchSourceBuilder.sort(<span class="hljs-keyword">new</span> FieldSortBuilder(<span class="hljs-string">&quot;price&quot;</span>).order(SortOrder.ASC));        <span class="hljs-comment">// 高亮设置</span>        HighlightBuilder highlightBuilder = <span class="hljs-keyword">new</span> HighlightBuilder();        <span class="hljs-comment">// 设置前缀（css样式）</span>        highlightBuilder.preTags(<span class="hljs-string">&quot;&lt;tag&gt;&quot;</span>);        <span class="hljs-comment">// 设置后缀（css样式）</span>        highlightBuilder.postTags(<span class="hljs-string">&quot;&lt;/tag&gt;&quot;</span>);        <span class="hljs-comment">// 设置高亮字段</span>        highlightBuilder.fields().add(<span class="hljs-keyword">new</span> HighlightBuilder.Field(<span class="hljs-string">&quot;name&quot;</span>));        highlightBuilder.fields().add(<span class="hljs-keyword">new</span> HighlightBuilder.Field(<span class="hljs-string">&quot;description&quot;</span>));        searchSourceBuilder.highlighter(highlightBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 取出高亮字段内容</span>            Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();            <span class="hljs-keyword">if</span> (highlightFields != <span class="hljs-keyword">null</span>) &#123;                <span class="hljs-comment">// 名称</span>                HighlightField nameHightlight = highlightFields.get(<span class="hljs-string">&quot;name&quot;</span>);                name = getHightlightContent(name, nameHightlight);                <span class="hljs-comment">// 详细内容</span>                HighlightField descriptionFields = highlightFields.get(<span class="hljs-string">&quot;description&quot;</span>);                description = getHightlightContent(description, descriptionFields);            &#125;            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 高亮内容获取</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> field</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> highlightField</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getHightlightContent</span><span class="hljs-params">(String field, HighlightField highlightField)</span> </span>&#123;        StringBuffer stringBuffer = <span class="hljs-keyword">new</span> StringBuffer();        <span class="hljs-keyword">if</span> (highlightField != <span class="hljs-keyword">null</span>) &#123;            Text[] fragments = highlightField.getFragments();            <span class="hljs-keyword">for</span> (Text fragment : fragments) &#123;                stringBuffer.append(fragment);            &#125;            field = stringBuffer.toString();        &#125;        <span class="hljs-keyword">return</span> field;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">3</span><span class="hljs-number">1</span>Bootstrap&lt;tag&gt;开发&lt;/tag&gt;Bootstrap是由Twitter推出的一个前台页面&lt;tag&gt;开发&lt;/tag&gt;&lt;tag&gt;框架&lt;/tag&gt;，是一个非常流行的&lt;tag&gt;开发&lt;/tag&gt;&lt;tag&gt;框架&lt;/tag&gt;，此&lt;tag&gt;框架&lt;/tag&gt;集成了多种页面效果。此&lt;tag&gt;开发&lt;/tag&gt;&lt;tag&gt;框架&lt;/tag&gt;包含了大量的CSS、JS程序代码，可以帮助&lt;tag&gt;开发&lt;/tag&gt;者（尤其是不擅长页面&lt;tag&gt;开发&lt;/tag&gt;的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。<span class="hljs-number">38.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">04</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">2</span>java编程基础java语言是世界第一编程语言，在软件&lt;tag&gt;开发&lt;/tag&gt;领域使用人数最多。<span class="hljs-number">68.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">3</span>spring&lt;tag&gt;开发&lt;/tag&gt;基础spring 在java领域非常流行，java程序员都在用。<span class="hljs-number">88.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">24</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><p><u><strong>ps：本文为学习记录，仅供学习与参考</strong></u></p>]]></content>
    
    
    
    <tags>
      
      <tag>elasticsearch</tag>
      
      <tag>dsl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch与spring-boot整合</title>
    <link href="/2020/04/26/elasticsearch-spring-boot/"/>
    <url>/2020/04/26/elasticsearch-spring-boot/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Elasticsearch与spring-boot整合"><a href="#Elasticsearch与spring-boot整合" class="headerlink" title="Elasticsearch与spring-boot整合"></a>Elasticsearch与spring-boot整合</h2><h3 id="ES客户端"><a href="#ES客户端" class="headerlink" title="ES客户端"></a>ES客户端</h3><p>RestClient是官方推荐使用的，它包括两种:Java Low Level REST Client和 Java High Level REST Client。<br>ES在6.0之后提供 Java High Level REST Client， 两种客户端官方更推荐使用 **<u>Java High Level REST Client</u>**，不过当前它还处于完善中，有些功能还没有。<br>可以采用 Java High Level REST Client，如果它有不支持的功能，则使用Java Low Level REST Client。</p><h3 id="依赖Pom"><a href="#依赖Pom" class="headerlink" title="依赖Pom"></a>依赖Pom</h3><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../xc-framework-parent/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-service-search<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--project config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-model<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-service-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--web config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--elasticsearch client config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--elasticsearch config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--test config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--utils config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h3 id="application配置"><a href="#application配置" class="headerlink" title="application配置"></a>application配置</h3><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-string">$&#123;port:40100&#125;</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">xc-service-search</span><span class="hljs-attr">xuecheng:</span>  <span class="hljs-attr">elasticsearch:</span>    <span class="hljs-comment"># 多个节点中间使用逗号分隔</span>    <span class="hljs-attr">hostlist:</span> <span class="hljs-string">$&#123;eshostlist:127.0.0.1:9200&#125;</span></code></pre><h3 id="Elasticsearch配置类"><a href="#Elasticsearch配置类" class="headerlink" title="Elasticsearch配置类"></a>Elasticsearch配置类</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.elasticsearch.config;<span class="hljs-keyword">import</span> org.apache.http.HttpHost;<span class="hljs-keyword">import</span> org.elasticsearch.client.RestClient;<span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Elasticsearch配置类。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/26</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticsearchConfig</span> </span>&#123;    <span class="hljs-meta">@Value(&quot;$&#123;xuecheng.elasticsearch.hostlist&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String hostList;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * RestHighLevelClient配置</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title">restHighLevelClient</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// 解析hostList配置信息</span>        String[] split = hostList.split(<span class="hljs-string">&quot;,&quot;</span>);        <span class="hljs-comment">// 创建HttpHost数组，其中存放es主机和端口的配置信息</span>        HttpHost[] httpHosts = <span class="hljs-keyword">new</span> HttpHost[split.length];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; split.length; i++) &#123;            String item = split[i];            httpHosts[i] = <span class="hljs-keyword">new</span> HttpHost(item.split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">0</span>], Integer.parseInt(item.split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>]), <span class="hljs-string">&quot;http&quot;</span>);        &#125;        <span class="hljs-comment">// 创建RestHighLevelClient客户端</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestHighLevelClient(RestClient.builder(httpHosts));    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 低组的RestClient客户端，主要使用RestHighLevelClient</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestClient <span class="hljs-title">restClient</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// 解析hostList配置信息</span>        String[] split = hostList.split(<span class="hljs-string">&quot;,&quot;</span>);        <span class="hljs-comment">// 创建HttpHost数组，其中存放es主机和端口的配置信息</span>        HttpHost[] httpHosts = <span class="hljs-keyword">new</span> HttpHost[split.length];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; split.length; i++) &#123;            String item = split[i];            httpHosts[i] = <span class="hljs-keyword">new</span> HttpHost(item.split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">0</span>], Integer.parseInt(item.split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>]), <span class="hljs-string">&quot;http&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> RestClient.builder(httpHosts).build();    &#125;&#125;</code></pre><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.elasticsearch;<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.domain.EntityScan;<span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<span class="hljs-comment">/**</span><span class="hljs-comment"> * ElasticSearch项目启动类。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/26</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@EntityScan(&quot;com.xuecheng.framework.domain.search&quot;)</span><span class="hljs-comment">//扫描实体类</span><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.xuecheng.api&quot;&#125;)</span><span class="hljs-comment">//扫描接口</span><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.xuecheng.elasticsearch&quot;&#125;)</span><span class="hljs-comment">//扫描本项目下的所有类</span><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.xuecheng.framework&quot;&#125;)</span><span class="hljs-comment">//扫描common项目下的所有类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticSearchApplication</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(ElasticSearchApplication.class, args);    &#125;&#125;</code></pre><h3 id="测试ES索引"><a href="#测试ES索引" class="headerlink" title="测试ES索引"></a>测试ES索引</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.elasticsearch;<span class="hljs-keyword">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;<span class="hljs-keyword">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexResponse;<span class="hljs-keyword">import</span> org.elasticsearch.client.IndicesClient;<span class="hljs-keyword">import</span> org.elasticsearch.client.RestClient;<span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> org.junit.runner.RunWith;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * ES索引测试</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: &#123;Elasticsearch的版本是6.3.2，安装好分词器ik6.3.2版本。&#125;</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/26</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootTest</span><span class="hljs-meta">@RunWith(SpringRunner.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestIndex</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    RestHighLevelClient restHighLevelClient;    <span class="hljs-meta">@Autowired</span>    RestClient restClient;      <span class="hljs-comment">/**</span><span class="hljs-comment">     * 创建索引测试</span><span class="hljs-comment">     * Elasticsearch的版本是6.3.2，安装好分词器ik6.3.2版本。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCreateIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 创建索引对象</span>        CreateIndexRequest createIndexRequest = <span class="hljs-keyword">new</span> CreateIndexRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 设置参数</span>        createIndexRequest.settings(Settings.builder().put(<span class="hljs-string">&quot;number_of_shards&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)                .put(<span class="hljs-string">&quot;number_of_replicas&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>));        createIndexRequest.mapping(<span class="hljs-string">&quot;doc&quot;</span>,<span class="hljs-string">&quot; &#123;\n&quot;</span> +                <span class="hljs-string">&quot; \t\&quot;properties\&quot;: &#123;\n&quot;</span> +                <span class="hljs-string">&quot;            \&quot;studymodel\&quot;:&#123;\n&quot;</span> +                <span class="hljs-string">&quot;             \&quot;type\&quot;:\&quot;keyword\&quot;\n&quot;</span> +                <span class="hljs-string">&quot;           &#125;,\n&quot;</span> +                <span class="hljs-string">&quot;            \&quot;name\&quot;:&#123;\n&quot;</span> +                <span class="hljs-string">&quot;             \&quot;type\&quot;:\&quot;keyword\&quot;\n&quot;</span> +                <span class="hljs-string">&quot;           &#125;,\n&quot;</span> +                <span class="hljs-string">&quot;           \&quot;description\&quot;: &#123;\n&quot;</span> +                <span class="hljs-string">&quot;              \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +                <span class="hljs-string">&quot;              \&quot;analyzer\&quot;:\&quot;ik_max_word\&quot;,\n&quot;</span> +                <span class="hljs-string">&quot;              \&quot;search_analyzer\&quot;:\&quot;ik_smart\&quot;\n&quot;</span> +                <span class="hljs-string">&quot;           &#125;,\n&quot;</span> +                <span class="hljs-string">&quot;           \&quot;pic\&quot;:&#123;\n&quot;</span> +                <span class="hljs-string">&quot;             \&quot;type\&quot;:\&quot;text\&quot;,\n&quot;</span> +                <span class="hljs-string">&quot;             \&quot;index\&quot;:false\n&quot;</span> +                <span class="hljs-string">&quot;           &#125;\n&quot;</span> +                <span class="hljs-string">&quot; \t&#125;\n&quot;</span> +                <span class="hljs-string">&quot;&#125;&quot;</span>, XContentType.JSON);        <span class="hljs-comment">// 操作索引的客户端</span>        IndicesClient indices = restHighLevelClient.indices();        <span class="hljs-comment">// 执行创建索引库</span>        CreateIndexResponse createIndexResponse = indices.create(createIndexRequest);        <span class="hljs-comment">// 得到响应</span>        <span class="hljs-keyword">boolean</span> acknowledged = createIndexResponse.isAcknowledged();        System.out.println(acknowledged);    &#125;     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 添加文档</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAddDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 文档内容</span>        HashMap&lt;Object, Object&gt; jsonMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        jsonMap.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;spring cloud实战&quot;</span>);        jsonMap.put(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;本课程主要从四个章节进行讲解： 1.微服务架构入门 2.spring cloud 基础入门 3.实战Spring Boot 4.注册中心eureka。&quot;</span>);        jsonMap.put(<span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;201001&quot;</span>);        SimpleDateFormat dateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);        jsonMap.put(<span class="hljs-string">&quot;timestamp&quot;</span>, dateFormat.format(<span class="hljs-keyword">new</span> Date()));        jsonMap.put(<span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-number">5.6f</span>);        <span class="hljs-comment">// 创建索引创建对象</span>        IndexRequest indexRequest = <span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;xc_course&quot;</span>, <span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 文档内容</span>        indexRequest.source(jsonMap);        <span class="hljs-comment">// 通过client进行http请求</span>        IndexResponse indexResponse = restHighLevelClient.index(indexRequest);        DocWriteResponse.Result result = indexResponse.getResult();        System.out.println(result);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询文档</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        GetRequest getRequest = <span class="hljs-keyword">new</span> GetRequest(<span class="hljs-string">&quot;xc_course&quot;</span>, <span class="hljs-string">&quot;doc&quot;</span>, <span class="hljs-string">&quot;4HjhtnEBAZIsF0uSUCnm&quot;</span>);        GetResponse response = restHighLevelClient.get(getRequest);        Map&lt;String, Object&gt; sourceAsMap = response.getSourceAsMap();        System.out.println(sourceAsMap);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 更新文档-局部更新（全局更新，重新设定所有map的值）</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        UpdateRequest updateRequest = <span class="hljs-keyword">new</span> UpdateRequest(<span class="hljs-string">&quot;xc_course&quot;</span>, <span class="hljs-string">&quot;doc&quot;</span>, <span class="hljs-string">&quot;4HjhtnEBAZIsF0uSUCnm&quot;</span>);        <span class="hljs-comment">// 文档内容</span>        HashMap&lt;Object, Object&gt; jsonMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        jsonMap.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;spring cloud实战-更新&quot;</span>);        updateRequest.doc(jsonMap);        UpdateResponse update = restHighLevelClient.update(updateRequest);        RestStatus status = update.status();        System.out.println(status);    &#125;      <span class="hljs-comment">/**</span><span class="hljs-comment">     * 删除文档</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 删除文档的ID</span>        String id = <span class="hljs-string">&quot;4HjhtnEBAZIsF0uSUCnm&quot;</span>;        <span class="hljs-comment">// 删除索引对象</span>        DeleteRequest deleteRequest = <span class="hljs-keyword">new</span> DeleteRequest(<span class="hljs-string">&quot;xc_course&quot;</span>, <span class="hljs-string">&quot;doc&quot;</span>, id);        <span class="hljs-comment">// 响应对象</span>        DeleteResponse deleteResponse = restHighLevelClient.delete(deleteRequest);        DocWriteResponse.Result result = deleteResponse.getResult();        System.out.println(result);    &#125;      <span class="hljs-comment">/**</span><span class="hljs-comment">     * 删除索引库</span><span class="hljs-comment">     *</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 删除索引对象</span>        DeleteIndexRequest deleteIndexRequest = <span class="hljs-keyword">new</span> DeleteIndexRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 操作索引的客户端</span>        IndicesClient indices = restHighLevelClient.indices();        <span class="hljs-comment">// 执行删除索引</span>        DeleteIndexResponse delete = indices.delete(deleteIndexRequest);        <span class="hljs-comment">// 得到删除响应</span>        <span class="hljs-keyword">boolean</span> acknowledged = delete.isAcknowledged();        System.out.println(acknowledged);    &#125;  &#125;</code></pre><p>运行，访问’<a href="http://localhost:9100/&#39;%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0xc_course%E5%B7%B2%E7%BB%8F%E8%A2%AB%E5%88%9B%E5%BB%BA%EF%BC%8C%E5%88%A0%E9%99%A4%E3%80%82">http://localhost:9100/&#39;，可以发现xc_course已经被创建，删除。</a></p><p><strong><u>ps: 本文为学习笔记，仅供学习与参考。</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>elasticsearch</tag>
      
      <tag>spring-boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch学习一</title>
    <link href="/2020/04/23/elasticSearch-learning-one/"/>
    <url>/2020/04/23/elasticSearch-learning-one/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="ElasticSearch学习一"><a href="#ElasticSearch学习一" class="headerlink" title="ElasticSearch学习一"></a>ElasticSearch学习一</h2><p>什么是 Elasticsearch?<br>Elasticsearch 是一个开源的分布式 RESTful 搜索和分析引擎，能够解决越来越多不同的应用场景。<br>此外，还可以<a href="https://account.aliyun.com/login/login.htm?oauth_callback=http://common-buy.aliyun.com/?spm=a2c0j.9528745.826947.detail-button-testbuy01.52d55a36mcUW9g&commodityCode=elasticsearchpre&request=%7B%22region%22:%22cn-hangzhou%22,%22es_version%22:%225.5.3_with_X-Pack%22,%22network_type%22:%22VPC%22,%22vs_area%22:%22cn-hangzhou-b%22,%22vpc_id%22:%22vpc-bp170psqmu5is7iml6bq9%22,%22vswitch_id%22:%22vsw-bp1jyxgwodxsb1h9tfbih%22,%22node_spec%22:%22elasticsearch.n4.small%22,%22disk%22:20,%22node_amount%22:2,%22dedicate_master%22:false,%22ord_time%22:%22%5B%5Cn%20%201,%5Cn%20%20%5C%22Month%5C%22,%5Cn%20%20null%5Cn%5D%22%7D">免费试用</a>14天 <a href="https://data.aliyun.com/product/elasticsearch">阿里云 Elasticsearch</a> 服务试用服务托管 Elasticsearch（和 Kibana）或<a href="https://cloud.tencent.com/product/es">腾讯云Elasticsearch服务</a>。</p><p>elasticsearch是一个基于Lucene的高扩展的分布式搜索服务器，支持开箱即用。<br>elasticsearch隐藏了Lucene的复杂性，对外提供**<u>Restful接口</u>**来操作索引、搜索。</p><p>优点：<br>扩展性好，可部署上百台服务器集群，处理PB级数据。<br>近实时的去索引数据、搜索数据。</p><p>如果你公司准备进行全文检索项目的开发，建议优先考虑elasticsearch，因为像Github这样大规模的搜索都在用它。</p><p>下图是ElasticSearch的索引结构，下边黑色部分是物理结构，上边黄色部分是逻辑结构，逻辑结构也是为了更好的去描述ElasticSearch的工作原理及去使用物理结构中的索引文件。</p><p><img src="/2020/04/23/elasticSearch-learning-one/1.png" alt="index-structure"></p><p>逻辑结构部分是一个倒排索引表<br>将要搜索的文档内容分词，所有不重复的词组成分词列表。<br>将搜索的文档最终以Document方式存储起来。<br>每个词和docment都有关联。</p><p>ElasticSearch在项目中的应用方式:</p><p><img src="/2020/04/23/elasticSearch-learning-one/2.png" alt="ElasticSearch-wrokflow"></p><p>用户在前端搜索关键字<br>项目前端通过http方式请求项目服务端<br>项目服务端通过Http RESTful方式请求ES集群进行搜索<br>ES集群从索引库检索数据。</p><p><img src="/2020/04/23/elasticSearch-learning-one/3.png" alt="ElasticSearch-structure"></p><h3 id="ElasticSearch安装"><a href="#ElasticSearch安装" class="headerlink" title="ElasticSearch安装"></a>ElasticSearch安装</h3><h4 id="单机版安装（mac版）"><a href="#单机版安装（mac版）" class="headerlink" title="单机版安装（mac版）"></a>单机版安装（mac版）</h4><p>下载jar:elasticsearch-7.6.2-darwin-x86_64.tar.gz</p><p>解压：tar -zxvf elasticsearch-7.6.2-darwin-x86_64.tar.gz</p><pre><code class="hljs bash"><span class="hljs-comment"># cd elasticsearch-7.6.2</span>// 启动<span class="hljs-comment"># bin/elasticsearch</span></code></pre><p>访问：</p><p><code>http://localhost:9200/</code></p><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-attr">&quot;cluster_name&quot;</span>: <span class="hljs-string">&quot;elasticsearch&quot;</span>,<span class="hljs-attr">&quot;cluster_uuid&quot;</span>: <span class="hljs-string">&quot;UMEbOpOBRMuGVYhYPcPqiA&quot;</span>,<span class="hljs-attr">&quot;version&quot;</span>: &#123;<span class="hljs-attr">&quot;number&quot;</span>: <span class="hljs-string">&quot;7.6.2&quot;</span>,<span class="hljs-attr">&quot;build_flavor&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,<span class="hljs-attr">&quot;build_type&quot;</span>: <span class="hljs-string">&quot;tar&quot;</span>,<span class="hljs-attr">&quot;build_hash&quot;</span>: <span class="hljs-string">&quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;</span>,<span class="hljs-attr">&quot;build_date&quot;</span>: <span class="hljs-string">&quot;2020-03-26T06:34:37.794943Z&quot;</span>,<span class="hljs-attr">&quot;build_snapshot&quot;</span>: <span class="hljs-literal">false</span>,<span class="hljs-attr">&quot;lucene_version&quot;</span>: <span class="hljs-string">&quot;8.4.0&quot;</span>,<span class="hljs-attr">&quot;minimum_wire_compatibility_version&quot;</span>: <span class="hljs-string">&quot;6.8.0&quot;</span>,<span class="hljs-attr">&quot;minimum_index_compatibility_version&quot;</span>: <span class="hljs-string">&quot;6.0.0-beta1&quot;</span>&#125;,<span class="hljs-attr">&quot;tagline&quot;</span>: <span class="hljs-string">&quot;You Know, for Search&quot;</span>&#125;</code></pre><h4 id="安装head插件"><a href="#安装head插件" class="headerlink" title="安装head插件"></a>安装head插件</h4><p>head插件是ES的一个可视化管理插件，用来监视ES的状态，并通过head客户端和ES服务进行交互，比如创建映射、创建索引等，从ES6.0开始，head插件支持使得node.js运行。</p><pre><code class="hljs bash"><span class="hljs-comment"># git clone git://github.com/mobz/elasticsearch-head.git </span><span class="hljs-comment"># cd elasticsearch-head/</span>// 安装node_modules<span class="hljs-comment"># npm install</span>// 启动<span class="hljs-comment"># npm run start</span>&gt; elasticsearch-head@0.0.0 start /Users/xxx/Documents/Elasticsearch/jar/elasticsearch-head&gt; grunt serverRunning <span class="hljs-string">&quot;connect:server&quot;</span> (connect) taskWaiting forever...Started connect web server on http://localhost:9100</code></pre><p>解决跨域问题，设置elasticsearch.yml，然后重启</p><pre><code class="hljs yaml"><span class="hljs-comment"># vim elasticsearch.yml</span><span class="hljs-comment"># ======================== Elasticsearch Configuration =========================</span><span class="hljs-comment">#</span><span class="hljs-comment"># <span class="hljs-doctag">NOTE:</span> Elasticsearch comes with reasonable defaults for most settings.</span><span class="hljs-comment">#       Before you set out to tweak and tune the configuration, make sure you</span><span class="hljs-comment">#       understand what are you trying to accomplish and the consequences.</span><span class="hljs-comment">#</span><span class="hljs-comment"># The primary way of configuring a node is via this file. This template lists</span><span class="hljs-comment"># the most important settings you may want to configure for a production cluster.</span><span class="hljs-comment">#</span><span class="hljs-comment"># Please consult the documentation for further information on configuration options:</span><span class="hljs-comment"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span><span class="hljs-comment">#</span><span class="hljs-comment"># ---------------------------------- Cluster -----------------------------------</span><span class="hljs-comment">#</span><span class="hljs-comment"># Use a descriptive name for your cluster:</span><span class="hljs-comment">#</span><span class="hljs-comment">#cluster.name: my-application</span><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">lc-xc</span> <span class="hljs-comment">#</span><span class="hljs-comment"># ------------------------------------ Node ------------------------------------</span><span class="hljs-comment">#</span><span class="hljs-comment"># Use a descriptive name for the node:</span><span class="hljs-comment">#</span><span class="hljs-comment">#node.name: node-1</span><span class="hljs-attr">node.name:</span> <span class="hljs-string">xc_node-1</span><span class="hljs-comment">#node.max_local_storage_nodes: 1</span><span class="hljs-comment">#</span><span class="hljs-comment"># Add custom attributes to the node:</span><span class="hljs-comment">#</span><span class="hljs-comment">#node.attr.rack: r1</span><span class="hljs-comment">#</span><span class="hljs-comment"># ----------------------------------- Paths ------------------------------------</span><span class="hljs-comment">#</span><span class="hljs-comment"># Path to directory where to store the data (separate multiple locations by comma):</span><span class="hljs-comment">#</span><span class="hljs-comment">#path.data: /path/to/data</span><span class="hljs-attr">path.data:</span> <span class="hljs-string">/Users/user_name/Documents/Elasticsearch/data/elasticsearch-7.6.2</span><span class="hljs-comment">#</span><span class="hljs-comment"># Path to log files:</span><span class="hljs-comment">#</span><span class="hljs-comment">#path.logs: /path/to/logs</span><span class="hljs-attr">path.logs:</span> <span class="hljs-string">/Users/user_name/Documents/Elasticsearch/logs/elasticsearch-7.6.2</span><span class="hljs-comment">#</span><span class="hljs-comment"># ----------------------------------- Memory -----------------------------------</span><span class="hljs-comment">#</span><span class="hljs-comment"># Lock the memory on startup:</span><span class="hljs-comment">#</span><span class="hljs-comment">#bootstrap.memory_lock: true</span><span class="hljs-attr">bootstrap.memory_lock:</span> <span class="hljs-literal">false</span><span class="hljs-comment">#</span><span class="hljs-comment"># Make sure that the heap size is set to about half the memory available</span><span class="hljs-comment"># on the system and that the owner of the process is allowed to use this</span><span class="hljs-comment"># limit.</span><span class="hljs-comment">#</span><span class="hljs-comment"># Elasticsearch performs poorly when the system is swapping the memory.</span><span class="hljs-comment">#</span><span class="hljs-comment"># ---------------------------------- Network -----------------------------------</span><span class="hljs-comment">#</span><span class="hljs-comment"># Set the bind address to a specific IP (IPv4 or IPv6):</span><span class="hljs-comment">#</span><span class="hljs-comment">#network.host: 192.168.0.1</span><span class="hljs-string">//</span> <span class="hljs-string">如果想在别的机器上访问该ES服务，则修改此项为本机的IP地址</span><span class="hljs-attr">network.host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-comment">#</span><span class="hljs-comment"># Set a custom port for HTTP:</span><span class="hljs-comment">#</span><span class="hljs-comment">#http.port: 9200</span><span class="hljs-attr">http.port:</span> <span class="hljs-number">9200</span><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9300</span><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">/.*/</span><span class="hljs-comment">#</span><span class="hljs-comment"># For more information, consult the network module documentation.</span><span class="hljs-comment">#</span><span class="hljs-comment"># --------------------------------- Discovery ----------------------------------</span><span class="hljs-comment">#</span><span class="hljs-comment"># Pass an initial list of hosts to perform discovery when this node is started:</span><span class="hljs-comment"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span><span class="hljs-comment">#</span><span class="hljs-comment">#discovery.seed_hosts: [&quot;host1&quot;, &quot;host2&quot;]</span><span class="hljs-comment">#</span><span class="hljs-comment"># Bootstrap the cluster using an initial set of master-eligible nodes:</span><span class="hljs-comment">#</span><span class="hljs-comment">#cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;]</span><span class="hljs-comment">#</span><span class="hljs-comment"># For more information, consult the discovery and cluster formation module documentation.</span><span class="hljs-comment">#</span><span class="hljs-comment"># ---------------------------------- Gateway -----------------------------------</span><span class="hljs-comment">#</span><span class="hljs-comment"># Block initial recovery after a full cluster restart until N nodes are started:</span><span class="hljs-comment">#</span><span class="hljs-comment">#gateway.recover_after_nodes: 3</span><span class="hljs-comment">#</span><span class="hljs-comment"># For more information, consult the gateway module documentation.</span><span class="hljs-comment">#</span><span class="hljs-comment"># ---------------------------------- Various -----------------------------------</span><span class="hljs-comment">#</span><span class="hljs-comment"># Require explicit names when deleting indices:</span><span class="hljs-comment">#</span><span class="hljs-comment">#action.destructive_requires_name: true</span></code></pre><p>访问<code>http://localhost:9100/</code></p><p><img src="/2020/04/23/elasticSearch-learning-one/4.png" alt="es-head"></p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>ES作为一个索引及搜索服务，对外提供丰富的REST接口，快速入门部分的实例使用head插件来测试，目的是对ES的使用方法及流程有个初步的认识。<br>ES的索引库是一个逻辑概念，它包括了分词列表及文档列表，同一个索引库中存储了相同类型的文档。它就相当于MySQL中的表，或相当于Mongodb中的集合。<br>索引(名词):ES是基于Lucene构建的一个搜索服务，它要从索引库搜索符合条件索引数据。<br>索引(动词):索引库刚创建起来是空的，将数据添加到索引库的过程称为索引。</p><ul><li>使用postman工具来创建索引</li></ul><pre><code class="hljs json"><span class="hljs-comment">// put方法</span>localhost:9200/xc_course&#123;     <span class="hljs-attr">&quot;settings&quot;</span>:&#123;     <span class="hljs-attr">&quot;index&quot;</span>:&#123;         <span class="hljs-attr">&quot;number_of_shards&quot;</span>:<span class="hljs-number">1</span>,         <span class="hljs-attr">&quot;number_of_replicas&quot;</span>:<span class="hljs-number">0</span>       &#125;&#125;&#125;</code></pre><p><img src="/2020/04/23/elasticSearch-learning-one/5.png" alt="es-create-index"></p><p>head插件查看</p><p><img src="/2020/04/23/elasticSearch-learning-one/6.png" alt="head-index-look"></p><p>另外，通过head插件也可方便删除、新建索引。</p><h3 id="创建映射"><a href="#创建映射" class="headerlink" title="创建映射"></a>创建映射</h3><p>在索引中每个文档都包括了一个或多个field，创建映射就是向索引库中创建field的过程，下边是document和field与关系数据库的概念的类比:<br>文档(Document)—————-Row记录<br>字段(Field)——————-Columns 列</p><p>注意:**<u>6.0之前的版本</u>**有type(类型)概念，type相当于关系数据库的表，ES官方将在ES9.0版本中彻底删除type。</p><p>上边讲的创建索引库相当于关系数据库中的数据库还是表?</p><p>1、如果相当于数据库就表示一个索引库可以创建很多不同类型的文档，这在ES中也是允许的。<br>2、如果相当于表就表示一个索引库只能存储相同类型的文档，ES官方建议在一个索引库中只存储相同类型的文档。</p><p>Post方法：<code>localhost:9200/xc_course/_mapping</code> </p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;        <span class="hljs-attr">&quot;name&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>        &#125;,        <span class="hljs-attr">&quot;description&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>        &#125;,        <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>        &#125;    &#125;&#125;</code></pre><p>查看映射</p><p>Get方法：<code>localhost:9200/xc_course/_mapping</code></p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;xc_course&quot;</span>: &#123;        <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;            <span class="hljs-attr">&quot;properties&quot;</span>: &#123;                <span class="hljs-attr">&quot;description&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;name&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><h3 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h3><p>ES中的文档相当于MySQL数据库表中的记录。</p><p>Put或Post方法：<code>localhost:9200/xc_course/_doc/4028e58161bcf7f40161bcf8b77c0000</code></p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发框架&quot;</span>,    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者(尤其是不擅长页面开发的程序人员)轻松的实现一个不受浏览器限制的 精美界面效果。&quot;</span>,    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>&#125;<span class="hljs-comment">// 返回数据</span>&#123;    <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,    <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,    <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;4028e58161bcf7f40161bcf8b77c0000&quot;</span>,    <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,    <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-string">&quot;created&quot;</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span>&#125;</code></pre><p>修改入力JSON串，重新运行，则es是先删除这条记录，再插入记录。实现更新操作。</p><h3 id="搜索文档"><a href="#搜索文档" class="headerlink" title="搜索文档"></a>搜索文档</h3><ul><li>根据id查询<br>Get方法：<code>localhost:9200/xc_course/_doc/4028e58161bcf7f40161bcf8b77c0000</code></li></ul><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,    <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,    <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;4028e58161bcf7f40161bcf8b77c0000&quot;</span>,    <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">2</span>,    <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">1</span>,    <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span>,    <span class="hljs-attr">&quot;found&quot;</span>: <span class="hljs-literal">true</span>,    <span class="hljs-attr">&quot;_source&quot;</span>: &#123;        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发框架&quot;</span>,        <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者(尤其是不擅长页面开发的程序人员)轻松的实现一个不受浏览器限制的 精美界面效果。&quot;</span>,        <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>    &#125;&#125;</code></pre><ul><li>查询所有记录<br>Get方法：<code>localhost:9200/xc_course/_doc/_search</code> (_doc可不写)</li></ul><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: &#123;            <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">&quot;relation&quot;</span>: <span class="hljs-string">&quot;eq&quot;</span>        &#125;,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;4028e58161bcf7f40161bcf8b77c0000&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发框架&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者(尤其是不擅长页面开发的程序人员)轻松的实现一个不受浏览器限制的 精美界面效果。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><ul><li>关键字查询<br>Get方法：<code>localhost:9200/xc_course/_doc/_search?q=name:Bootstrap</code></li></ul><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">1</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: &#123;            <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">&quot;relation&quot;</span>: <span class="hljs-string">&quot;eq&quot;</span>        &#125;,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">0.2876821</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;4028e58161bcf7f40161bcf8b77c0000&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">0.2876821</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发框架&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者(尤其是不擅长页面开发的程序人员)轻松的实现一个不受浏览器限制的 精美界面效果。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>                &#125;            &#125;        ]    &#125;&#125;<span class="hljs-comment">// 说明</span>took:本次操作花费的时间，单位为毫秒。 timed_out:请求是否超时_shards:说明本次操作共搜索了哪些分片hits:搜索命中的记录hits.total: 符合条件的文档总数hits.hits:匹配度较高的前N个文档hits.max_score:文档匹配得分，这里为最高分_score:每个文档都有一个匹配度得分，按照降序排列。_source:显示了文档的原始内容。</code></pre><h3 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h3><p>测试正常情况下的分词效果<br>Post方法：<code>localhost:9200/_analyze</code></p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;tokens&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;测&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">0</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">0</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;试&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">2</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">1</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;分&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">2</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">3</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">2</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;词&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">3</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">4</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">3</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;器&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">4</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">5</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">4</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;后&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">6</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">7</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">5</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;边&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">7</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">8</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">6</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;是&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">8</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">9</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">7</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;测&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">9</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">10</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">8</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;试&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">10</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">11</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">9</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;内&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">11</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">12</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">10</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;容&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">12</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">13</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">11</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;spring&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">14</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">20</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">12</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;cloud&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">21</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">26</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">13</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;实&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">26</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">27</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">14</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;战&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">27</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">28</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">15</span>        &#125;    ]&#125;</code></pre><p>分词效果不是很好。</p><p>下载安装：<code>git clone git://github.com/medcl/elasticsearch-analysis-ik.git</code>，注下载对应的es版本的ik。</p><pre><code class="hljs bash">// 下载对应版本的ik，如：elasticsearch-analysis-ik-7.6.2.zip// 将下载好的zip解压到elasticsearch-7.6.2/plugins/中，并命名为ik<span class="hljs-comment"># cd elasticsearch-7.6.2/plugins/</span><span class="hljs-comment"># ls</span>ik// 重新启动elasticsearch// bin/elasticsearch</code></pre><p>IK分词支持：Analyzer: <code>ik_smart</code> , <code>ik_max_word</code> , Tokenizer: <code>ik_smart</code> , <code>ik_max_word</code></p><p>再次测试分词效果<br>Post方法：<code>localhost:9200/_analyze</code></p><pre><code class="hljs json"><span class="hljs-comment">// 添加分词方法：&quot;analyzer&quot;: &quot;ik_max_word&quot;</span>&#123;    <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;测试分词器，后边是测试内容:spring cloud实战&quot;</span>,    <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;tokens&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;测试&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">0</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">2</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">0</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;分词器&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">2</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">5</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">1</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;分词&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">2</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">4</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">2</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;器&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">4</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">5</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_CHAR&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">3</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;后边&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">6</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">8</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">4</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;是&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">8</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">9</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_CHAR&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">5</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;测试&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">9</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">11</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">6</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;内容&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">11</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">13</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">7</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;spring&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">14</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">20</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;ENGLISH&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">8</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;cloud&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">21</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">26</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;ENGLISH&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">9</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;实战&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">26</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">28</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">10</span>        &#125;    ]&#125;</code></pre><h4 id="自定义词库"><a href="#自定义词库" class="headerlink" title="自定义词库"></a>自定义词库</h4><p>如搜索品牌名，分词效果不是很好</p><pre><code class="hljs json"><span class="hljs-comment">// localhost:9200/_analyze</span>&#123;    <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;传智播客&quot;</span>,    <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;tokens&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;传&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">0</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_CHAR&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">0</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;智&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">2</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_CHAR&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">1</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;播&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">2</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">3</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_CHAR&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">2</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;客&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">3</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">4</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_CHAR&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">3</span>        &#125;    ]&#125;</code></pre><p>新建自定义词库，如my.dic</p><pre><code class="hljs bash"><span class="hljs-comment"># /Users/user_name/Documents/Elasticsearch/jar/elasticsearch-7.6.2/plugins/ik/config</span>// 新建一个my.dic文件(注意文件格式为utf-8(不要选择utf-8 BOM)// my.dic内容传智播客黑马程序员// 配置IKAnalyzer.cfg.xml：&lt;entry key=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;my.dic&lt;/entry&gt;&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;&lt;!DOCTYPE properties SYSTEM <span class="hljs-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;&lt;properties&gt;&lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt;&lt;!--用户可以在这里配置自己的扩展字典 --&gt;&lt;entry key=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;my.dic&lt;/entry&gt; &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;&lt;entry key=<span class="hljs-string">&quot;ext_stopwords&quot;</span>&gt;&lt;/entry&gt;&lt;!--用户可以在这里配置远程扩展字典 --&gt;&lt;!-- &lt;entry key=<span class="hljs-string">&quot;remote_ext_dict&quot;</span>&gt;words_location&lt;/entry&gt; --&gt;&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;&lt;!-- &lt;entry key=<span class="hljs-string">&quot;remote_ext_stopwords&quot;</span>&gt;words_location&lt;/entry&gt; --&gt;&lt;/properties&gt;</code></pre><p>重启Elasticsearch</p><pre><code class="hljs json">Post方法：localhost:9200/_analyze&#123;    <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;传智播客&quot;</span>,    <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;tokens&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;传智播客&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">0</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">4</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">0</span>        &#125;    ]&#125;</code></pre><h3 id="映射维护"><a href="#映射维护" class="headerlink" title="映射维护"></a>映射维护</h3><p>查询所有索引的映射</p><pre><code class="hljs json"><span class="hljs-comment">// Get方法: localhost:9200/xc_course/_mapping</span>&#123;    <span class="hljs-attr">&quot;xc_course&quot;</span>: &#123;        <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;            <span class="hljs-attr">&quot;properties&quot;</span>: &#123;                <span class="hljs-attr">&quot;description&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;name&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;pic&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p>修改映射</p><pre><code class="hljs json"><span class="hljs-comment">// Post方法：localhost:9200/xc_course/_mapping</span>&#123;    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;        <span class="hljs-attr">&quot;description&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>        &#125;,        <span class="hljs-attr">&quot;name&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>        &#125;,        <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>        &#125;,        <span class="hljs-attr">&quot;pic&quot;</span>: &#123;        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>        &#125;    &#125;&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;acknowledged&quot;</span>: <span class="hljs-literal">true</span>&#125;<span class="hljs-comment">// 再次查询：Get方法: localhost:9200/xc_course/_mapping</span>&#123;    <span class="hljs-attr">&quot;xc_course&quot;</span>: &#123;        <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;            <span class="hljs-attr">&quot;properties&quot;</span>: &#123;                <span class="hljs-attr">&quot;description&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;name&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;pic&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p>说明 ：映射创建成功可以**<u>添加新字段，已有字段不允许更新</u>**。(可以通过删除索引，重新生成映射)</p><h3 id="映射的常用类型"><a href="#映射的常用类型" class="headerlink" title="映射的常用类型"></a>映射的常用类型</h3><ul><li><p>text</p><p>对于ik分词器建议是索引时使用ik_max_word将搜索内容进行细粒度分词，搜索时使用ik_smart提高搜索精确性。</p></li><li><p>index</p><p>通过index属性指定是否索引。<br>默认为index=true，即要进行索引，只有进行索引才可以从索引库搜索到。但是也有一些内容不需要索引，比如:商品图片地址只被用来展示图片，不进行搜索图片，此时可以将index设置 为false。</p></li><li><p>store</p><p>是否在source之外存储，每个文档索引后会在 ES中保存一份原始文档，存放在”_source”中，一般情况下不需要设置store为true，因为在_source中已经有一份原始文档了。</p></li></ul><pre><code class="hljs json"><span class="hljs-comment">// 创建索引</span>Post方法：localhost:9200/xc_course/_mapping&#123;    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;        <span class="hljs-attr">&quot;name&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,            <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,            <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>        &#125;,        <span class="hljs-attr">&quot;description&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,            <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,            <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>        &#125;,        <span class="hljs-attr">&quot;pic&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,            <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span>        &#125;,        <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>        &#125;    &#125;&#125;<span class="hljs-comment">// 插入文档</span>Post方法：localhost:9200/xc_course/_doc/4028e58161bcf7f40161bcf8b77c0000&#123;    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发框架&quot;</span>,    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者(尤其是不擅长页面开发的程序人员)轻松的实现一个不受浏览器限制的 精美界面效果。&quot;</span>,    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg&quot;</span>,    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>&#125;<span class="hljs-comment">// 查询 Get方法：</span>localhost:9200/xc_course/_search?q=name:java开发-&gt;检索到数据localhost:9200/xc_course/_search?q=description:开发 -&gt;检索到数据localhost:9200/xc_course/_search?q=pic:group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg -&gt;检索不到数据（&quot;index&quot;: false所致）localhost:9200/xc_course/_search?q=studymodel:201002-&gt;检索到数据</code></pre><ul><li>keyword<br>keyword字段为关键字字段，通常搜索keyword是按照整体搜索，所以创建keyword字段的索引时是不进行分词的，比如:邮政编码、手机号码、身份证等。keyword字段通常用于过虑、排序、聚合等。</li></ul><pre><code class="hljs json"><span class="hljs-comment">// 创建索引</span>Post方法：localhost:9200/xc_course/_mapping&#123;    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;        <span class="hljs-attr">&quot;name&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>        &#125;,        <span class="hljs-attr">&quot;description&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,            <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,            <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>        &#125;,        <span class="hljs-attr">&quot;pic&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,            <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span>        &#125;,        <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>        &#125;    &#125;&#125;<span class="hljs-comment">// 插入文档</span>Post方法：localhost:9200/xc_course/_doc/4028e58161bcf7f40161bcf8b77c0000&#123;    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发框架&quot;</span>,    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者(尤其是不擅长页面开发的程序人员)轻松的实现一个不受浏览器限制的 精美界面效果。&quot;</span>,    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg&quot;</span>,    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>&#125;<span class="hljs-comment">// 查询 Get方法：</span>localhost:9200/xc_course/_search?q=name:开发-&gt;检索不到数据（keyword类型，所以查询方式是精确查询）localhost:9200/xc_course/_search?q=name:Bootstrap开发框架-&gt;检索到数据localhost:9200/xc_course/_search?q=studymodel:201002-&gt;检索到数据</code></pre><ul><li><p>date日期类型</p><p>日期类型不用设置分词器。通常日期类型的字段用于排序。</p></li></ul><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;        <span class="hljs-attr">&quot;timestamp&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>,            <span class="hljs-attr">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy‐MM‐dd HH:mm:ss||yyyy‐MM‐dd&quot;</span>        &#125;    &#125;&#125;</code></pre><ul><li><p>数值类型</p><p>尽量选择范围小的类型，提高搜索效率对于浮点数尽量用比例因子，比如一个价格字段，单位为元，我们将比例因子设置为100这在ES中会按分存储，</p><pre><code class="hljs json">&quot;price&quot;: &#123;&quot;type&quot;: &quot;scaled_float&quot;,&quot;scaling_factor&quot;: 100&#125;</code></pre><p>由于比例因子为100，如果我们输入的价格是23.45则ES中会将23.45乘以100存储在ES中。<br>如果输入的价格是23.456，ES会将23.456乘以100再取一个接近原始值的数，得出2346。<br>使用比例因子的好处是整型比浮点型更易压缩，节省磁盘空间。</p></li></ul><p><strong><u>ps: 本文为学习笔记，仅供学习与参考。</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>elasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eureka-settings学习一</title>
    <link href="/2020/04/20/eureka-settings-first/"/>
    <url>/2020/04/20/eureka-settings-first/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Eureka-settings学习一"><a href="#Eureka-settings学习一" class="headerlink" title="Eureka-settings学习一"></a>Eureka-settings学习一</h2><p>Spring Cloud中提供服务注册中心来管理微服务信息。<br>为什么要用注册中心?<br>1、微服务数量众多，要进行远程调用就需要知道服务端的ip地址和端口，注册中心帮助我们管理这些服务的ip和端口。<br>2、微服务会实时上报自己的状态，注册中心统一管理这些微服务的状态，将存在问题的服务踢出服务列表，客户端获取到可用的服务进行调用。<br>Spring Cloud Eureka 是对Netflix公司的Eureka的二次封装，它实现了服务治理的功能，Spring Cloud Eureka提供服务端与客户端，服务端即是Eureka服务注册中心，客户端完成微服务向Eureka服务的注册与发现。服务端和客户端均采用Java语言编写。<br>1、Eureka Server是服务端，负责管理各各微服务结点的信息和状态。<br>2、在微服务上部署Eureka Client程序，远程访问Eureka Server将自己注册在Eureka Server。<br>3、微服务需要调用另一个微服务时从Eureka Server中获取服务调用地址，进行远程调用。</p><h3 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h3><h4 id="pom依赖设定"><a href="#pom依赖设定" class="headerlink" title="pom依赖设定"></a>pom依赖设定</h4><p>父工程依赖</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tomcat.version</span>&gt;</span>8.5.28<span class="hljs-tag">&lt;/<span class="hljs-name">tomcat.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-boot.version</span>&gt;</span>2.0.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-boot.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">springframework.version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">springframework.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mybatis-spring-boot.version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis-spring-boot.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mybatis.version</span>&gt;</span>3.4.5<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mysql-connector-java.version</span>&gt;</span>5.1.45<span class="hljs-tag">&lt;/<span class="hljs-name">mysql-connector-java.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-io.version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">commons-io.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">org.apache.commons.io.version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">org.apache.commons.io.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-fileupload.version</span>&gt;</span>1.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">commons-fileupload.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-codec.version</span>&gt;</span>1.10<span class="hljs-tag">&lt;/<span class="hljs-name">commons-codec.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-lang3.version</span>&gt;</span>3.6<span class="hljs-tag">&lt;/<span class="hljs-name">commons-lang3.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">okhttp.version</span>&gt;</span>3.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">okhttp.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">feign-okhttp.version</span>&gt;</span>8.18.0<span class="hljs-tag">&lt;/<span class="hljs-name">feign-okhttp.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">lombok.version</span>&gt;</span>1.16.16<span class="hljs-tag">&lt;/<span class="hljs-name">lombok.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">springfox-swagger.version</span>&gt;</span>2.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">springfox-swagger.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">fastjson.version</span>&gt;</span>1.2.30<span class="hljs-tag">&lt;/<span class="hljs-name">fastjson.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">fastdfs-client-java.version</span>&gt;</span>1.27.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">fastdfs-client-java.version</span>&gt;</span>        <span class="hljs-comment">&lt;!--&lt;mysql-connector-java.version&gt;5.1.40&lt;/mysql-connector-java.version&gt;--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mysql-connector-java.version</span>&gt;</span>5.1.46<span class="hljs-tag">&lt;/<span class="hljs-name">mysql-connector-java.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">elasticsearch.version</span>&gt;</span>6.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">elasticsearch.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">guava.version</span>&gt;</span>24.0-jre<span class="hljs-tag">&lt;/<span class="hljs-name">guava.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-comment">&lt;!--test--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Finchley.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mysql-connector-java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis-spring-boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>okhttp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;okhttp.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.netflix.feign<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-okhttp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;feign-okhttp.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;org.apache.commons.io.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;commons-fileupload.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;commons-codec.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;commons-lang3.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;springfox-swagger.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;springfox-swagger.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.oschina.zcx7878<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastdfs-client-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fastdfs-client-java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch --&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;guava.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>           <span class="hljs-comment">&lt;!-- &amp;lt;!&amp;ndash; 资源文件拷贝插件 &amp;ndash;&amp;gt;</span><span class="hljs-comment">            &lt;plugin&gt;</span><span class="hljs-comment">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><span class="hljs-comment">                &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><span class="hljs-comment">                &lt;configuration&gt;</span><span class="hljs-comment">                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><span class="hljs-comment">                &lt;/configuration&gt;</span><span class="hljs-comment">            &lt;/plugin&gt;--&gt;</span>            <span class="hljs-comment">&lt;!-- java编译插件 --&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>Eureka子工程pom依赖</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../xc-framework-parent/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-govern-center<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--eureka config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h4 id="application配置"><a href="#application配置" class="headerlink" title="application配置"></a>application配置</h4><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">50101</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">xc-govern-center</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">client:</span>    <span class="hljs-comment"># 服务注册，是否将自己注册到Eureka服务中</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 服务发现，是否从Eureka中获取注册信息</span>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># Eureka客户端与Eureka服务端的交互地址，高可用状态配置对方的地址，单机状态配置自己（若不配置则默认本机端口是8761）</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:50101/eureka/</span>  <span class="hljs-attr">server:</span>    <span class="hljs-comment"># 是否开启自我保护模式</span>    <span class="hljs-attr">enable-self-preservation:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 服务注册表清理间隔（单位是毫秒，默认是60*1000）</span>    <span class="hljs-attr">eviction-interval-timer-in-ms:</span> <span class="hljs-number">60000</span></code></pre><h4 id="Eureka启动类"><a href="#Eureka启动类" class="headerlink" title="Eureka启动类"></a>Eureka启动类</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.govern.center;<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Eureka server启动类。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/20</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@EnableEurekaServer</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GovernCenterApplication</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(GovernCenterApplication.class, args);    &#125;&#125;</code></pre><p>启动访问<br><code>http://localhost:50101/</code></p><p><img src="/2020/04/20/eureka-settings-first/1.png" alt="eureka-http"></p><p>说明：Eureka Server有一种自我保护模式，当微服务不再向Eureka Server上报状态，Eureka Server会从服务列表将此服务删除，如果出现网络异常情况(微服务正常)，此时Eureka server进入自保护模式，不再将微服务从服务列表删除。</p><p><strong><u>在开发阶段建议关闭自保护模式。</u></strong></p><h3 id="高可用环境搭建"><a href="#高可用环境搭建" class="headerlink" title="高可用环境搭建"></a>高可用环境搭建</h3><p>Eureka Server 高可用环境需要部署两个Eureka server，它们互相向对方注册。<br>如果在本机启动两个Eureka需要注意两个Eureka Server的端口要设置不一样，这里我们部署一个Eureka Server工程，将端口可配置，制作两个 Eureka Server启动脚本，启动不同的端口。</p><p>1、在实际使用时Eureka Server至少部署两台服务器，实现高可用。<br>2、两台Eureka Server互相注册。<br>3、微服务需要连接两台Eureka Server注册，当其中一台Eureka死掉也不会影响服务的注册与发现。<br>4、微服务会定时向Eureka server发送心跳，报告自己的状态。<br>5、微服务从注册中心获取服务地址以RESTful方式发起远程调用。</p><p>pom依赖同单机环境</p><h4 id="application配置-1"><a href="#application配置-1" class="headerlink" title="application配置"></a>application配置</h4><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-comment"># 服务端口</span>  <span class="hljs-attr">port:</span> <span class="hljs-string">$&#123;PORT:50101&#125;</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">xc-govern-center</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">client:</span>    <span class="hljs-comment"># 服务注册，是否将自己注册到Eureka服务中，高可用状态设置为true</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 服务发现，是否从Eureka中获取注册信息，高可用状态设置为true</span>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># Eureka客户端与Eureka服务端的交互地址，高可用状态配置对方的地址，单机状态配置自己（若不配置则默认本机端口是8761）</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">$&#123;EUREKA_SERVER:http://eureka02:50102/eureka/&#125;</span>  <span class="hljs-attr">server:</span>    <span class="hljs-comment"># 是否开启自我保护模式</span>    <span class="hljs-attr">enable-self-preservation:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 服务注册表清理间隔（单位是毫秒，默认是60*1000）</span>    <span class="hljs-attr">eviction-interval-timer-in-ms:</span> <span class="hljs-number">60000</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">$&#123;EUREKA_DOMAIN:eureka01&#125;</span></code></pre><h4 id="启动脚本设置"><a href="#启动脚本设置" class="headerlink" title="启动脚本设置"></a>启动脚本设置</h4><p>Run -&gt; Edit configurations，设置端口，EUREKA_SERVER，EUREKA_DOMAIN如下</p><p><code>-DPORT=50101 -DEUREKA_SERVER=http://eureka02:50102/eureka/ -DEUREKA_DOMAIN=eureka01</code></p><p><code>-DPORT=50102 -DEUREKA_SERVER=http://eureka01:50101/eureka/ -DEUREKA_DOMAIN=eureka02</code></p><p><img src="/2020/04/20/eureka-settings-first/2.png" alt="eureka-script"></p><p>配置hostname<br>Eureka 组成高可用，两个Eureka互相向对方注册，这里需要通过域名或主机名访问，这里我们设置两个Eureka服务的主机名分别为 eureka01、eureka02。</p><pre><code class="hljs bash"><span class="hljs-comment"># sudo vim /etc/hosts</span>// 添加配置127.0.0.1       eureka01 eureka02</code></pre><p>启动访问</p><p><code>http://eureka01:50101/</code></p><p><code>http://eureka02:50102/</code></p><p><img src="/2020/04/20/eureka-settings-first/3.png" alt="eureka-01-02"></p><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p>将cms微服务向Eureka Server注册</p><h4 id="添加pom依赖"><a href="#添加pom依赖" class="headerlink" title="添加pom依赖"></a>添加pom依赖</h4><p><code>spring-cloud-starter-netflix-eureka-client</code></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../xc-framework-parent/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-service-manager-cms<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--project config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-service-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-model<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-utils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--eureka client config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--web config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--freemarker config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--mongodb config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--rabbitmq config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--http config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>okhttp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--test config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h4 id="application配置-2"><a href="#application配置-2" class="headerlink" title="application配置"></a>application配置</h4><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">31001</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">xc-service-manager-cms</span>  <span class="hljs-attr">data:</span>    <span class="hljs-attr">mongodb:</span>      <span class="hljs-attr">uri:</span> <span class="hljs-string">mongodb://sa:123456@1xx.xxx.xxx.xxx:27017/lc-test</span>      <span class="hljs-attr">database:</span> <span class="hljs-string">lc-test</span>  <span class="hljs-attr">rabbitmq:</span>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">client:</span>    <span class="hljs-comment"># 服务注册，是否将自己注册到Eureka服务中，高可用状态设置为true</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 服务发现，是否从Eureka中获取注册信息，高可用状态设置为true</span>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># Eureka客户端与Eureka服务端的交互地址，高可用状态配置对方的地址，单机状态配置自己（若不配置则默认本机端口是8761）</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">$&#123;EUREKA_SERVER:http://eureka01:50101/eureka/,http://eureka02:50102/eureka/&#125;</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-comment"># 将自己的IP地址注册到Eureka服务中</span>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">ip-address:</span> <span class="hljs-string">$&#123;IP_ADDRESS:127.0.0.1&#125;</span>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></code></pre><h4 id="在启动类添加注解"><a href="#在启动类添加注解" class="headerlink" title="在启动类添加注解"></a>在启动类添加注解</h4><p><code>@EnableDiscoveryClient</code></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.manager_cms;<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.domain.EntityScan;<span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<span class="hljs-keyword">import</span> org.springframework.http.client.OkHttp3ClientHttpRequestFactory;<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<span class="hljs-comment">/**</span><span class="hljs-comment"> * cms启动类，添加各个功能模块的扫描</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: &#123; <span class="hljs-doctag">@EnableDiscoveryClient</span>: 表示它是一个Eureka客户端 &#125;</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/1</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@EnableDiscoveryClient</span><span class="hljs-meta">@EntityScan(&quot;com.xuecheng.framework.domain.cms&quot;)</span><span class="hljs-comment">//扫描实体类</span><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.xuecheng.api&quot;&#125;)</span><span class="hljs-comment">//扫描接口</span><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.xuecheng.framework&quot;&#125;)</span><span class="hljs-comment">//扫描Common下的所有类</span><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.xuecheng.manager_cms&quot;&#125;)</span><span class="hljs-comment">//扫描本项目下的所有类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ManageCmsApplication</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(ManageCmsApplication.class, args);    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">restTemplate</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate(<span class="hljs-keyword">new</span> OkHttp3ClientHttpRequestFactory());    &#125;&#125;</code></pre><p>启动该类，访问</p><p><code>http://eureka01:50101/</code></p><p><img src="/2020/04/20/eureka-settings-first/4.png" alt="eureka-client"></p>]]></content>
    
    
    
    <tags>
      
      <tag>eureka</tag>
      
      <tag>spring-cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FastDFS安装设定</title>
    <link href="/2020/04/19/fastDFS-install-settings/"/>
    <url>/2020/04/19/fastDFS-install-settings/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="FastDFS安装设定"><a href="#FastDFS安装设定" class="headerlink" title="FastDFS安装设定"></a>FastDFS安装设定</h2><h3 id="FastDFS定义"><a href="#FastDFS定义" class="headerlink" title="FastDFS定义"></a>FastDFS定义</h3><p>FastDFS是用c语言编写的一款开源的分布式文件系统，它是由淘宝资深架构师余庆编写并开源。<br>FastDFS专为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p><p>为什么要使用FastDFS呢?</p><p>上边介绍的NFS、GFS都是通用的分布式文件系统，通用的分布式文件系统的优点的是开发体验好，但是系统复杂性高、性能一般，而专用的分布式文件系统虽然开发体验性差，但是<u>系统复杂性低并且性能高</u>。<strong>fastDFS非常适合存储图片</strong>等那些小文件，fastDFS不对文件进行分块，所以它就没有分块合并的开销，fastDFS网络通信采用socket，通信速度很快。</p><p><strong>FastDFS架构包括Tracker server和Storageserver。</strong>客户端请求Tracker server进行文件上传、下载，通过Tracker server调度最终由Storage server完成文件上传和下载。</p><p><img src="/2020/04/19/fastDFS-install-settings/1.png" alt="FastDFS架构"></p><p>Tracker</p><p><strong>Tracker Server作用是负载均衡和调度</strong>，通过Tracker server在文件上传时可以根据一些策略找到Storage server提供文件上传服务。可以将tracker称为<u>追踪服务器或调度服务器</u>。<br> FastDFS集群中的Tracker server可以有多台，Tracker server之间是相互平等关系同时提供服务，Tracker server不存在单点故障。客户端请求Tracker server采用<strong>轮询方式</strong>，如果请求的tracker无法提供服务则换另一个tracker。</p><p>Storage</p><p>Storage Server作用是文件存储，客户端上传的文件最终存储在Storage服务器上，Storage server没有实现自己的文件系统而是使用操作系统的文件系统来管理文件。可以将<strong>storage称为存储服务器</strong>。</p><p><strong>Storage集群采用了分组存储方式</strong>。storage集群由一个或多个组构成，集群存储总容量为集群中所有组的存储容量之和。一个组由一台或多台存储服务器组成，组内的<strong>Storage server之间是平等关系</strong>，不同组的Storage server 之间不会相互通信，同组内的Storage server之间会相互连接进行文件同步，从而保证同组内每个storage上的文件完全一致的。一个组的存储容量为该组内的存储服务器容量最小的那个，由此可见<strong>组内存储服务器的软硬件配置最好是一致的</strong>。</p><p>采用分组存储方式的好处是灵活、可控性较强。比如上传文件时，可以由客户端直接指定上传到的组也可以由 tracker进行调度选择。一个分组的存储服务器访问压力较大时，可以在该组增加存储服务器来扩充服务能力(<strong>纵向扩容</strong>)。当系统容量不足时，可以增加组来扩充存储容量(<strong>横向扩容</strong>)。</p><h3 id="FastDFS安装"><a href="#FastDFS安装" class="headerlink" title="FastDFS安装"></a>FastDFS安装</h3><p>安装环境：CentOS 8</p><pre><code class="hljs bash"><span class="hljs-comment"># lsb_release -a</span>// 这个命令适用于所有的linux，包括Redhat、SuSE、Debian等发行版。LSB Version:    :core-4.1-amd64:core-4.1-noarchDistributor ID: CentOSDescription:    CentOS Linux release 8.1.1911 (Core) Release:        8.1.1911Codename:       Core<span class="hljs-comment"># cat /proc/version</span>Linux version 4.18.0-147.5.1.el8_1.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 8.3.1 20190507 (Red Hat 8.3.1-4) (GCC)) <span class="hljs-comment">#1 SMP Wed Feb 5 02:00:39 UTC 2020</span><span class="hljs-comment"># uname -r</span>4.18.0-147.5.1.el8_1.x86_64<span class="hljs-comment"># uname -a</span>Linux iZ2ze4ty14huv07q6z3yapZ 4.18.0-147.5.1.el8_1.x86_64 <span class="hljs-comment">#1 SMP Wed Feb 5 02:00:39 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></code></pre><h4 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h4><pre><code class="hljs bash"><span class="hljs-comment"># sudo yum install gcc-c++</span><span class="hljs-comment"># sudo yum -y install libevent</span></code></pre><h4 id="安装libfastcommon基础库"><a href="#安装libfastcommon基础库" class="headerlink" title="安装libfastcommon基础库"></a>安装libfastcommon基础库</h4><pre><code class="hljs bash">// 将libfastcommonV1.0.7.tar.gz解压，安装至/usr/<span class="hljs-built_in">local</span>文件夹里<span class="hljs-comment"># cp libfastcommonV1.0.7.tar.gz /usr/local/</span><span class="hljs-comment"># cd /usr/local/</span><span class="hljs-comment"># tar -zxvf libfastcommonV1.0.7.tar.gz</span><span class="hljs-comment"># cd libfastcommon-1.0.7</span><span class="hljs-comment"># ./make.sh</span><span class="hljs-comment"># ./make.sh install</span><span class="hljs-comment"># ll /usr/local/libfastcommon-1.0.7/</span>总用量 24-rw-rw-r-- 1 root root 2170 9月  16 2014 HISTORY-rw-rw-r-- 1 root root  582 9月  16 2014 INSTALL-rw-rw-r-- 1 root root 1341 9月  16 2014 libfastcommon.spec-rwxrwxr-x 1 root root 2151 9月  16 2014 make.sh-rw-rw-r-- 1 root root  617 9月  16 2014 READMEdrwxrwxr-x 2 root root 4096 4月  17 14:25 src// libfastcommon 安装好后会自动将库文件拷贝至/usr/lib64 下，由于FastDFS 程序引用 usr/lib 目录所以需要将/usr/lib64 下的库文件拷贝至/usr/lib 下。<span class="hljs-comment"># cp /usr/lib64/libfastcommon.so /usr/lib/</span><span class="hljs-comment"># ll /usr/lib/libfastcommon.so</span>-rwxr-xr-x 1 root root 340392 4月  17 14:29 /usr/lib/libfastcommon.so</code></pre><h4 id="安装tracker编译安装"><a href="#安装tracker编译安装" class="headerlink" title="安装tracker编译安装"></a>安装tracker编译安装</h4><pre><code class="hljs bash"><span class="hljs-comment"># cp FastDFS_v5.05.tar.gz /usr/local/</span><span class="hljs-comment"># cd /usr/local/</span><span class="hljs-comment"># tar -zxvf FastDFS_v5.05.tar.gz</span><span class="hljs-comment"># cd FastDFS</span><span class="hljs-comment"># ./make.sh</span><span class="hljs-comment"># ./make.sh install</span>// 安装成功将安装目录下的 conf 下的文件拷贝到/etc/fdfs/下。<span class="hljs-comment"># cd /usr/local/FastDFS/conf</span><span class="hljs-comment"># cp *.conf /etc/fdfs/</span><span class="hljs-comment"># cp *.types /etc/fdfs/</span>// 配置<span class="hljs-comment"># cd /etc/fdfs/</span><span class="hljs-comment"># vim tracker.conf</span>// 修改配置项base_path=/home/root/fastdfs// 阿里云ECS中的服务器实例，不要使用80端口，已被阿里云自己占用http.server_port=90// 启动/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart</code></pre><h4 id="Storage安装"><a href="#Storage安装" class="headerlink" title="Storage安装"></a>Storage安装</h4><p>在另外的服务器实例上安装storage, 依赖库和基础库如上一致，本处在同一台ECS上安装</p><pre><code class="hljs bash">// 配置storage<span class="hljs-comment"># cd /etc/fdfs/</span><span class="hljs-comment"># vim storage.conf</span>// 修改配置group_name=group1base_path=/home/root/fastdfs/store/basestore_path0=/home/root/fastdfs/store/fdfs_storage// 若有多个挂载磁盘则定义多个store_pathstore_path1=...store_path2=...// 配置tracker服务器IP(此处IP是阿里云ECS的公网IP)tracker_server=1xx.xxx.xxx.xxx:22122// 如果有多个则配置多个trackertracker_server=1xx.xxx.xxx.xx2:22122// 配置 http 端口http.server_port=90// 启动/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</code></pre><h4 id="上传图片测试"><a href="#上传图片测试" class="headerlink" title="上传图片测试"></a>上传图片测试</h4><pre><code class="hljs bash"><span class="hljs-comment"># cd /etc/fdfs/</span><span class="hljs-comment"># vim client.conf</span>// 配置base_path=/home/root/fastdfs/clienttracker_server=1xx.xxx.xxx.xxx:22122// 如果有多个则配置多个trackertracker_server=1xx.xxx.xxx.xx2:22122// 测试文件上传logo.png<span class="hljs-comment"># ll /root/soft/logo.png </span>-rw-r--r-- 1 root root 6849 4月  19 11:28 /root/soft/logo.png<span class="hljs-comment"># /usr/bin/fdfs_test /etc/fdfs/client.conf upload /root/soft/logo.png </span>This is FastDFS client <span class="hljs-built_in">test</span> program v5.05Copyright (C) 2008, Happy Fish / YuQingFastDFS may be copied only under the terms of the GNU GeneralPublic License V3, <span class="hljs-built_in">which</span> may be found <span class="hljs-keyword">in</span> the FastDFS <span class="hljs-built_in">source</span> kit.Please visit the FastDFS Home Page http://www.csource.org/ <span class="hljs-keyword">for</span> more detail.[2020-04-19 11:32:50] DEBUG - base_path=/home/root/fastdfs/client, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0tracker_query_storage_store_list_without_group:         server 1. group_name=, ip_addr=1xx.xxx.xxx.xxx, port=23000group_name=group1, ip_addr=1xx.xxx.xxx.xxx, port=23000storage_upload_by_filenamegroup_name=group1, remote_filename=M00/00/00/rBEJ_l6bxmKAMWPCAAAawU0ID2Q071.png<span class="hljs-built_in">source</span> ip address: 1xx.xxx.xxx.xxxfile timestamp=2020-04-19 11:32:50file size=6849file crc32=1292373860example file url: http://1xx.xxx.xxx.xxx/group1/M00/00/00/rBEJ_l6bxmKAMWPCAAAawU0ID2Q071.pngstorage_upload_slave_by_filenamegroup_name=group1, remote_filename=M00/00/00/rBEJ_l6bxmKAMWPCAAAawU0ID2Q071_big.png<span class="hljs-built_in">source</span> ip address: 1xx.xxx.xxx.xxxfile timestamp=2020-04-19 11:32:50file size=6849file crc32=1292373860example file url: http://1xx.xxx.xxx.xxx/group1/M00/00/00/rBEJ_l6bxmKAMWPCAAAawU0ID2Q071_big.png// 对应Storage服务器上的文件<span class="hljs-built_in">cd</span> /home/root/fastdfs/store/fdfs_storage/data<span class="hljs-comment"># ll 00/00/rBEJ_l6bxmKAMWPCAAAawU0ID2Q071_big.png</span>-rw-r--r-- 1 root root 6849 4月  19 11:32 00/00/rBEJ_l6bxmKAMWPCAAAawU0ID2Q071_big.png</code></pre><h3 id="FastDFS和nginx整合"><a href="#FastDFS和nginx整合" class="headerlink" title="FastDFS和nginx整合"></a>FastDFS和nginx整合</h3><h4 id="安装FastDFS-nginx-module"><a href="#安装FastDFS-nginx-module" class="headerlink" title="安装FastDFS-nginx-module"></a>安装FastDFS-nginx-module</h4><pre><code class="hljs bash"><span class="hljs-comment"># cp fastdfs-nginx-module_v1.16.tar.gz /usr/local/</span><span class="hljs-comment"># cd /usr/local/</span><span class="hljs-comment"># tar -zxvf fastdfs-nginx-module_v1.16.tar.gz</span><span class="hljs-comment"># cd /usr/local/fastdfs-nginx-module/src</span><span class="hljs-comment"># vim config</span>// 修改配置（修改 config 文件将/usr/<span class="hljs-built_in">local</span>/路径改为/usr/）ngx_addon_name=ngx_http_fastdfs_moduleHTTP_MODULES=<span class="hljs-string">&quot;<span class="hljs-variable">$HTTP_MODULES</span> ngx_http_fastdfs_module&quot;</span>NGX_ADDON_SRCS=<span class="hljs-string">&quot;<span class="hljs-variable">$NGX_ADDON_SRCS</span> <span class="hljs-variable">$ngx_addon_dir</span>/ngx_http_fastdfs_module.c&quot;</span>CORE_INCS=<span class="hljs-string">&quot;<span class="hljs-variable">$CORE_INCS</span> /usr/include/fastdfs /usr/include/fastcommon/&quot;</span>CORE_LIBS=<span class="hljs-string">&quot;<span class="hljs-variable">$CORE_LIBS</span> -L/usr/lib -lfastcommon -lfdfsclient&quot;</span>CFLAGS=<span class="hljs-string">&quot;<span class="hljs-variable">$CFLAGS</span> -D_FILE_OFFSET_BITS=64 -DFDFS_OUTPUT_CHUNK_SIZE=&#x27;256*1024&#x27; -DFDFS_MOD_CONF_FILENAME=&#x27;\&quot;/etc/fdfs/mod_fastdfs.conf\&quot;&#x27;&quot;</span>// 将 FastDFS-nginx-module/src 下的 mod_FastDFS.conf 拷贝至/etc/fdfs/下<span class="hljs-comment"># cp mod_fastdfs.conf /etc/fdfs/</span><span class="hljs-comment"># vim /etc/fdfs/mod_fastdfs.conf</span>base_path=/home/root/fastdfstracker_server=1xx.xxx.xxx.xxx:22122// url中包含 group 名称url_have_group_name = <span class="hljs-literal">true</span>// 指定文件存储路径store_path0=/home/root/fastdfs/store/fdfs_storage// 将 libfdfsclient.so 拷贝至/usr/lib 下cp /usr/lib64/libfdfsclient.so /usr/lib/ll /usr/lib/libfdfsclient.so-rwxr-xr-x 1 root root 376392 4月  17 15:55 /usr/lib/libfdfsclient.so// 创建 nginx/client 目录<span class="hljs-comment"># mkdir -p /var/temp/nginx/client</span></code></pre><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><pre><code class="hljs bash"><span class="hljs-comment"># cd /usr/local/</span>// centos8与nginx的版本有关，不然安装不成功<span class="hljs-comment"># tar -zxvf nginx-1.17.6.tar.gz</span>// 安装依赖<span class="hljs-comment"># sudo yum -y install pcre-devel openssl openssl-devel</span><span class="hljs-comment"># cd nginx-1.17.6/</span>// 安装fastdfs-nginx-module./configure \--prefix=/usr/<span class="hljs-built_in">local</span>/nginx \--pid-path=/var/run/nginx/nginx.pid \--lock-path=/var/lock/nginx.lock \--error-log-path=/var/<span class="hljs-built_in">log</span>/nginx/error.log \--http-log-path=/var/<span class="hljs-built_in">log</span>/nginx/access.log \--with-http_gzip_static_module \--http-client-body-temp-path=/var/temp/nginx/client \--http-proxy-temp-path=/var/temp/nginx/proxy \--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \--http-scgi-temp-path=/var/temp/nginx/scgi \--add-module=/usr/<span class="hljs-built_in">local</span>/fastdfs-nginx-module/src<span class="hljs-comment"># make</span><span class="hljs-comment"># make install</span></code></pre><p>配置nginx</p><pre><code class="hljs bash"><span class="hljs-comment"># cd /usr/local/nginx/conf/</span><span class="hljs-comment"># vim nginx.conf</span>server &#123;        listen       8100;        server_name  1xx.xxx.xxx.xxx;        <span class="hljs-comment">#charset koi8-r;</span>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span>        location / &#123;            root   html;            index  index.html index.htm;        &#125;       location /group1/M00/ &#123;            root /home/root/fastdfs/store/fdfs_storage/data;            ngx_fastdfs_module;       &#125;...</code></pre><p>启动nginx</p><pre><code class="hljs bash"><span class="hljs-comment"># cd /usr/local/nginx</span><span class="hljs-comment"># ./sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><span class="hljs-comment"># ps -ef | grep nginx</span>root     16230  6486  0 12:18 pts/0    00:00:00 grep --color=auto nginxroot     16806     1  0 4月17 ?       00:00:00 nginx: master process ./sbin/nginx -c /usr/<span class="hljs-built_in">local</span>/nginx/conf/nginx.confnobody   16807 16806  0 4月17 ?       00:00:00 nginx: worker process// 校验，重启<span class="hljs-comment"># nginx -t</span><span class="hljs-comment"># nginx -s reload</span></code></pre><p>上述图片测试的图片可以在浏览器上直接访问</p><p><code>http://1xx.xxx.xxx.xxx:8100/group1/M00/00/00/rBEJ_l6bxmKAMWPCAAAawU0ID2Q071_big.png</code></p><p>注意，阿里云ECS安全组的配置也要设置好，才能正常访问或图片上传</p><p><img src="/2020/04/19/fastDFS-install-settings/2.png" alt="阿里云ECS安全组的配置"></p>]]></content>
    
    
    
    <tags>
      
      <tag>nginx</tag>
      
      <tag>fastdfs</tag>
      
      <tag>aliyu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis-PageHelper设定</title>
    <link href="/2020/04/15/mybatis-pagehelper-setting/"/>
    <url>/2020/04/15/mybatis-pagehelper-setting/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Mybatis-PageHelper设定"><a href="#Mybatis-PageHelper设定" class="headerlink" title="Mybatis-PageHelper设定"></a>Mybatis-PageHelper设定</h2><p>PageHelper是mybatis的通用分页插件，通过mybatis的拦截器实现分页功能，拦截sql查询请求，添加分页语句，最终实现分页查询功能。项目中使用Pagehelper实现Mybatis分页功能开发，与springboot开发整合，在springboot上集成<a href="https://github.com/pagehelper/pagehelper-spring-boot">pagehelper</a>。</p><p>PageHelper的使用方法及原理如下:<br>在调用dao的service方法中设置分页参数:PageHelper.startPage(page, size)，分页参数会设置在ThreadLocal中，PageHelper在mybatis执行sql前进行拦截，从ThreadLocal取出分页参数，修改当前执行的sql语句，添加分页 sql。<br>最后执行添加了分页sql的sql语句，实现分页查询。</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">31200</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">xc-service-manage-course</span>  <span class="hljs-attr">datasource:</span>    <span class="hljs-attr">druid:</span>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/xc_course?useSSL=false&amp;characterEncoding=utf-8</span>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>      <span class="hljs-attr">password:</span> <span class="hljs-string">Aa123456</span>      <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span>      <span class="hljs-attr">initialSize:</span> <span class="hljs-number">5</span>  <span class="hljs-comment">#初始建立连接数量</span>      <span class="hljs-attr">minIdle:</span> <span class="hljs-number">5</span>  <span class="hljs-comment">#最小连接数量</span>      <span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span> <span class="hljs-comment">#最大连接数量</span>      <span class="hljs-attr">maxWait:</span> <span class="hljs-number">10000</span>  <span class="hljs-comment">#获取连接最大等待时间，毫秒</span>      <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#申请连接时检测连接是否有效</span>      <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#归还连接时检测连接是否有效</span>      <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span> <span class="hljs-comment">#配置间隔检测连接是否有效的时间（单位是毫秒）</span>      <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span>   <span class="hljs-comment">#连接在连接池的最小生存时间（毫秒）</span><span class="hljs-comment">#pagehelper配置</span><span class="hljs-attr">pagehelper:</span>  <span class="hljs-attr">helper-dialect:</span> <span class="hljs-string">mysql</span></code></pre><h3 id="Mapper文件"><a href="#Mapper文件" class="headerlink" title="Mapper文件"></a>Mapper文件</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.manage_course.dao;<span class="hljs-keyword">import</span> com.github.pagehelper.Page;<span class="hljs-keyword">import</span> com.xuecheng.framework.domain.course.CourseBase;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Created by Administrator.</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Mapper</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CourseMapper</span> </span>&#123;    <span class="hljs-function">CourseBase <span class="hljs-title">findCourseBaseById</span><span class="hljs-params">(String id)</span></span>;    <span class="hljs-comment">// 分页查询课程</span>    <span class="hljs-function">Page&lt;CourseBase&gt; <span class="hljs-title">findCourseListPage</span><span class="hljs-params">()</span></span>;&#125;</code></pre><h3 id="xml文件"><a href="#xml文件" class="headerlink" title="xml文件"></a>xml文件</h3><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.xuecheng.manage_course.dao.CourseMapper&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findCourseBaseById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.xuecheng.framework.domain.course.CourseBase&quot;</span>&gt;</span>        select * from course_base where id = #&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findCourseListPage&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.xuecheng.framework.domain.course.CourseBase&quot;</span>&gt;</span>        SELECT      *        FROM      course_base    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-comment">&lt;!--定义日志文件的存储地址,使用绝对路径--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_HOME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;d:/logs&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- Console 输出设置 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>            <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 按照每天生成日志文件 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span>            <span class="hljs-comment">&lt;!--日志文件输出的文件名--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/xc.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 异步输出 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ASYNC&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">discardingThreshold</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">discardingThreshold</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">queueSize</span>&gt;</span>512<span class="hljs-tag">&lt;/<span class="hljs-name">queueSize</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 添加附加的appender,最多只能添加一个 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis.cache.decorators.LoggingCache&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework.boot&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- sql文查看-debug级别 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;ASYNC&quot;/&gt;--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>测试文件</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.manage_course.dao;<span class="hljs-keyword">import</span> com.github.pagehelper.Page;<span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<span class="hljs-keyword">import</span> com.xuecheng.framework.domain.course.CourseBase;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> org.junit.runner.RunWith;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Optional;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment"> **/</span><span class="hljs-meta">@SpringBootTest</span><span class="hljs-meta">@RunWith(SpringRunner.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDao</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    CourseMapper courseMapper;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 分页查询课程测试</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPageHelperFindCourse</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// 查询第1页，每页显示10条记录(从1开始)</span>        PageHelper.startPage(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>);        Page&lt;CourseBase&gt; courseListPage = courseMapper.findCourseListPage();        List&lt;CourseBase&gt; result = courseListPage.getResult();        <span class="hljs-keyword">long</span> total = courseListPage.getTotal();        System.out.println(result);        System.out.println(total);    &#125;&#125;</code></pre><p>运行日志</p><pre><code class="hljs java"><span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">33.561</span> [main] DEBUG o.m.s.t.SpringManagedTransaction - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@<span class="hljs-number">66e341</span>e9] will not be managed by Spring<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">33.622</span> [main] DEBUG c.x.m.d.C.findCourseListPage_COUNT - ==&gt;  Preparing: <span class="hljs-function">SELECT <span class="hljs-title">count</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span> FROM course_base </span><span class="hljs-function">2020-04-15 22:49:34.006 [main] DEBUG c.x.m.d.C.findCourseListPage_COUNT - </span>==&gt; Parameters: <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">34.269</span> [main] DEBUG c.x.m.d.C.findCourseListPage_COUNT - &lt;==      Total: <span class="hljs-number">1</span># 自动拼接分页参数<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">34.320</span> [main] DEBUG c.x.m.d.C.findCourseListPage - ==&gt;  Preparing: SELECT * FROM course_base LIMIT ? <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">34.325</span> [main] DEBUG c.x.m.d.C.findCourseListPage - ==&gt; Parameters: <span class="hljs-number">10</span>(Integer)<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">34.365</span> [main] DEBUG c.x.m.d.C.findCourseListPage - &lt;==      Total: <span class="hljs-number">10</span><span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">34.366</span> [main] DEBUG org.mybatis.spring.SqlSessionUtils - Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@<span class="hljs-number">2e549515</span>]<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">34.367</span> [main] DEBUG o.s.jdbc.datasource.DataSourceUtils - Returning JDBC Connection to DataSourcePage&#123;count=<span class="hljs-keyword">true</span>, pageNum=<span class="hljs-number">1</span>, pageSize=<span class="hljs-number">10</span>, startRow=<span class="hljs-number">0</span>, endRow=<span class="hljs-number">10</span>, total=<span class="hljs-number">21</span>, pages=<span class="hljs-number">3</span>, reasonable=<span class="hljs-keyword">false</span>, pageSizeZero=<span class="hljs-keyword">false</span>&#125;[CourseBase(id=<span class="hljs-number">297e7</span>c7c62b888f00162b8a7dec20000, name=test_java基础<span class="hljs-number">33</span>, users=b1, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">3</span>, grade=<span class="hljs-number">200002</span>, studymodel=<span class="hljs-number">201002</span>, teachmode=<span class="hljs-keyword">null</span>, description=test_java基础<span class="hljs-number">33</span>test_java基础<span class="hljs-number">33</span>test_java基础<span class="hljs-number">33</span>, status=<span class="hljs-number">202002</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b888f00162b8a965510001, name=test_java基础, users=test_java基础, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>, status=<span class="hljs-number">202002</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b8aa9d0162b8ab13910000, name=java基础<span class="hljs-number">3</span>, users=java基础<span class="hljs-number">3</span>, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>, status=<span class="hljs-number">202002</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b8aa9d0162b8ab56ba0001, name=java基础<span class="hljs-number">3</span>, users=b2, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3f</span>fff, status=<span class="hljs-number">202001</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b8aa9d0162b8ab70e90002, name=java基础<span class="hljs-number">3</span>, users=java基础<span class="hljs-number">3</span>, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>, status=<span class="hljs-number">202001</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b8aa9d0162b8accd4c0003, name=java基础<span class="hljs-number">4</span>, users=java基础<span class="hljs-number">4</span>, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=java基础<span class="hljs-number">4</span>java基础<span class="hljs-number">4</span>java基础<span class="hljs-number">4</span>java基础<span class="hljs-number">4</span>java基础<span class="hljs-number">4</span>java基础<span class="hljs-number">4</span>java基础<span class="hljs-number">4</span>, status=<span class="hljs-number">202001</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b8aa9d0162b8ad78a10004, name=java基础<span class="hljs-number">5</span>, users=java基础<span class="hljs-number">5</span>, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=java基础<span class="hljs-number">5</span>java基础<span class="hljs-number">5</span>java基础<span class="hljs-number">5</span>java基础<span class="hljs-number">5</span>, status=<span class="hljs-number">202001</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b8aa9d0162b8ae50300005, name=java基础<span class="hljs-number">5</span>, users=java基础<span class="hljs-number">5</span>, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=java基础<span class="hljs-number">5</span>, status=<span class="hljs-number">202001</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b8afe20162b8b0477c0000, name=test_java基础<span class="hljs-number">6</span>, users=test_java基础<span class="hljs-number">6</span>, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=test_java基础<span class="hljs-number">6</span>test_java基础<span class="hljs-number">6</span>, status=<span class="hljs-number">202001</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b8b3ff0162b8b58c260000, name=test_java基础<span class="hljs-number">6</span>, users=test_java基础<span class="hljs-number">6</span>, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=test_java基础<span class="hljs-number">6</span>, status=<span class="hljs-number">202001</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>)]<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">46.149</span> [cluster-ClusterId&#123;value=<span class="hljs-string">&#x27;5e971ef10d7a8aa870e707ed&#x27;</span>, description=<span class="hljs-string">&#x27;null&#x27;</span>&#125;-localhost:<span class="hljs-number">27017</span>] DEBUG org.mongodb.driver.connection - Closing connection connectionId&#123;localValue:<span class="hljs-number">3</span>&#125;<span class="hljs-number">21</span></code></pre><p><strong><u>ps:本文为学习记录，仅供参考与学习</u></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>pagehelper</tag>
      
      <tag>mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue-jsx语法配置</title>
    <link href="/2020/04/14/vue-jsx-setting/"/>
    <url>/2020/04/14/vue-jsx-setting/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue-JSX语法配置"><a href="#Vue-JSX语法配置" class="headerlink" title="Vue-JSX语法配置"></a>Vue-JSX语法配置</h2><p>Vue工程中，如果组件中用到了JSX语法，工程编译报错。如下</p><pre><code class="hljs vue">&lt;el-tree      :data&#x3D;&quot;teachplanList&quot;      :props&#x3D;&quot;defaultProps&quot;      node-key&#x3D;&quot;id&quot;      default-expand-all      :expand-on-click-node&#x3D;&quot;false&quot;      :render-content&#x3D;&quot;renderContent&quot;&gt;&lt;&#x2F;el-tree&gt;renderContent(h, &#123; node, data, store &#125;) &#123;        return (          &lt;span style&#x3D;&quot;flex: 1; display: flex; align-items: center; justify-content: space-between; font-size: 14px; padding-right: 8px;&quot;&gt;            &lt;span&gt;              &lt;span&gt;&#123;node.label&#125;&lt;&#x2F;span&gt;            &lt;&#x2F;span&gt;            &lt;span&gt;              &lt;el-button style&#x3D;&quot;font-size: 12px;&quot; type&#x3D;&quot;text&quot; on-click&#x3D;&#123; () &#x3D;&gt; this.choosevideo(data) &#125;&gt;&#123;data.mediaFileOriginalName&#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 选择视频&lt;&#x2F;el-button&gt;              &lt;el-button style&#x3D;&quot;font-size: 12px;&quot; type&#x3D;&quot;text&quot; on-click&#x3D;&#123; () &#x3D;&gt; this.edit(data) &#125;&gt;修改&lt;&#x2F;el-button&gt;              &lt;el-button style&#x3D;&quot;font-size: 12px;&quot; type&#x3D;&quot;text&quot; on-click&#x3D;&#123; () &#x3D;&gt; this.remove(node, data) &#125;&gt;删除&lt;&#x2F;el-button&gt;            &lt;&#x2F;span&gt;          &lt;&#x2F;span&gt;);      &#125;,</code></pre><p>解决方案如下：</p><p>JSX 是Javascript和XML结合的一种格式，它是<strong>React的核心组成部分</strong>，JSX和XML语法类似，可以定义属性以及子元 素。唯一特殊的是可以用大括号来加入JavaScript表达式。遇到 HTML 标签(以 &lt; 开头)，就用 HTML 规则解析; 遇到代码块(以 { 开头)，就用 JavaScript 规则解析。</p><p>WebStorm设置如下：</p><p><img src="/2020/04/14/vue-jsx-setting/1.png" alt="WebStorm设置"></p><p>HTML类型文件中增加Vue</p><p>preferences -&gt; Editor -&gt; File Types 中找到上边框中HTML 在下边加一个 *.vue</p><p><img src="/2020/04/14/vue-jsx-setting/2.png" alt="File Types"></p><p>如果已经在vue template 中已存在.vue 则把它改为.vue2( Html .vue)</p><p><img src="/2020/04/14/vue-jsx-setting/3.png" alt="vue template"></p><p>另外，工程的.babelrc文件如下：</p><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;presets&quot;</span>: [    [<span class="hljs-string">&quot;env&quot;</span>, &#123;      <span class="hljs-attr">&quot;modules&quot;</span>: <span class="hljs-literal">false</span>    &#125;],    <span class="hljs-string">&quot;stage-2&quot;</span>,    <span class="hljs-string">&quot;es2015&quot;</span>  ],  <span class="hljs-attr">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;transform-runtime&quot;</span>,<span class="hljs-string">&quot;transform-vue-jsx&quot;</span>],  <span class="hljs-attr">&quot;env&quot;</span>: &#123;    <span class="hljs-attr">&quot;test&quot;</span>: &#123;      <span class="hljs-attr">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-string">&quot;stage-2&quot;</span>],      <span class="hljs-attr">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;transform-es2015-modules-commonjs&quot;</span>, <span class="hljs-string">&quot;dynamic-import-node&quot;</span>]    &#125;  &#125;&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>vue</tag>
      
      <tag>jsx</tag>
      
      <tag>webStorm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Rabbit-MQ学习</title>
    <link href="/2020/04/09/rabbit-mq-start/"/>
    <url>/2020/04/09/rabbit-mq-start/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Rabbit-MQ学习"><a href="#Rabbit-MQ学习" class="headerlink" title="Rabbit-MQ学习"></a>Rabbit-MQ学习</h2><p>MQ全称为Message Queue，即消息队列， RabbitMQ是由erlang语言开发，基于AMQP(Advanced Message Queue 高级消息队列协议)协议实现的消息队列，它是一种应用程序之间的通信方法，消息队列在分布式系统开发中应用非常广泛。<a href="http://www.rabbitmq.com/">RabbitMQ官方地址</a></p><p>开发中消息队列通常有如下应用场景:<br> 1、任务异步处理。<br>将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间。<br> 2、应用程序解耦合<br>MQ相当于一个中介，生产方通过MQ与消费方交互，它将应用程序进行解耦合。</p><p>RabbitMQ的优点<br>1、使得简单，功能强大。<br>2、基于AMQP协议。<br>3、社区活跃，文档完善。<br>4、高并发性能好，这主要得益于Erlang语言。<br>5、Spring Boot默认已集成RabbitMQ。</p><h3 id="Java消息服务（JMS）"><a href="#Java消息服务（JMS）" class="headerlink" title="Java消息服务（JMS）"></a>Java消息服务（JMS）</h3><p>JMS应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步发送消息，进行异步通信。<br>JMS是java提供的一套消息服务API标准，其目的是为所有的java应用程序提供统一的消息通信的标准，类似java的 jdbc，只要遵循jms标准的应用程序之间都可以进行消息通信。<br>它和AMQP有什么不同，jms是java语言专属的消息服务标准，它是在api层定义标准，并且只能用于java应用;<br>而AMQP是在协议层定义的标准，是跨语言的 。</p><h3 id="RabbitMQ的工作原理"><a href="#RabbitMQ的工作原理" class="headerlink" title="RabbitMQ的工作原理"></a>RabbitMQ的工作原理</h3><p><img src="/2020/04/09/rabbit-mq-start/1.png" alt="RabbitMQ的工作原理"></p><p>Broker:消息队列服务进程，此进程包括两个部分:Exchange和Queue。<br>Exchange:消息队列交换机，按一定的规则将消息路由转发到某个队列，对消息进行过虑。<br>Queue:消息队列，存储消息的队列，消息到达队列并转发给指定的消费方。<br>Producer:消息生产者，即生产方客户端，生产方客户端将消息发送到MQ。<br>Consumer:消息消费者，即消费方客户端，接收MQ转发的消息。</p><p>消息发布接收流程:<br> —–发送消息—–<br> 1、生产者和Broker建立TCP连接。<br> 2、生产者和Broker建立通道。<br> 3、生产者通过通道消息发送给Broker，由Exchange将消息进行转发。<br> 4、Exchange将消息转发到指定的Queue(队列)。</p><p>—-接收消息—–<br> 1、消费者和Broker建立TCP连接。<br> 2、消费者和Broker建立通道 。<br> 3、消费者监听指定的Queue(队列)。<br> 4、当有消息到达Queue时Broker默认将消息推送给消费者。<br> 5、消费者接收到消息。</p><h3 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h3><pre><code class="hljs bash">// 安装rabbitmq$ brew install rabbitmq// 安装目录$ <span class="hljs-built_in">pwd</span>/usr/<span class="hljs-built_in">local</span>/Cellar/rabbitmq/3.7.12$ <span class="hljs-built_in">cd</span> sbin/$ lscuttlefishrabbitmq-defaultsrabbitmq-diagnosticsrabbitmq-envrabbitmq-pluginsrabbitmq-serverrabbitmqadminrabbitmqctl// 启动$ <span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/Cellar/rabbitmq/3.7.12$ ./sbin/rabbitmq-server// 后台启动(可以保证在关闭命令窗口后，MQ任然保持在运行）./sbin/rabbitmq-server -detached// 开启rabbitMQ的控制台:// 另起终端进入<span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/Cellar/rabbitmq/版本号/sbin目录；$ <span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/Cellar/rabbitmq/3.7.12/sbin/sudo ./rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_management// 访问rabbitMQ，在浏览器地址栏输入，进入登录页面（注：登录名和密码同为guest）：http://localhost:15672/// rabbitMQ的启动和关闭，启动rabbitMQ:./rabbitmqctl start_app// 关闭rabbitMQ:./rabbitmqctl stop_app// 开启rabbitMQ服务（推荐）:brew services start rabbitmq</code></pre><p><img src="/2020/04/09/rabbit-mq-start/2.png" alt="RabbitMQ工作台"></p><h3 id="生产者Producer"><a href="#生产者Producer" class="headerlink" title="生产者Producer"></a>生产者Producer</h3><p>操作流程<br>1）创建连接<br>2）创建通道<br>3）声明队列<br>4）发送消息</p><p>加入依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--此版本与spring boot 1.5.9版本匹配--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.rabbitmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>amqp-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><p>生产者测试</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * RabbitMQ入门程序测试。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer01</span> </span>&#123;    <span class="hljs-comment">// 队列</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE = <span class="hljs-string">&quot;Hello RabbitMQ&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;        Connection connection = <span class="hljs-keyword">null</span>;        Channel channel = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 通过连接工厂创建新的连接和mq建立连接</span>            ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();            connectionFactory.setHost(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);            connectionFactory.setPort(<span class="hljs-number">5672</span>);            connectionFactory.setUsername(<span class="hljs-string">&quot;guest&quot;</span>);            connectionFactory.setPassword(<span class="hljs-string">&quot;guest&quot;</span>);            <span class="hljs-comment">// RabbitMQ默认虚拟机名称为&quot;/&quot;,虚拟机相当于一个独立的mq服务器。</span>            connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);            <span class="hljs-comment">// 建立与RabbitMQ服务的TCP连接</span>            connection = connectionFactory.newConnection();            <span class="hljs-comment">// 建立会话通道，生产者和mq服务所有通信都在channel通道中完成。</span>            channel = connection.createChannel();            <span class="hljs-comment">// queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span>            <span class="hljs-comment">/**</span><span class="hljs-comment">             * queue: 队列名称</span><span class="hljs-comment">             * durable：是否持久化，若持久化，mq重启后队列还在</span><span class="hljs-comment">             * exclusive：是否独占连接，队列只允许在该连接中访问，若连接关闭队列自动删除，若此为True，可用于临时队列的创建。</span><span class="hljs-comment">             * autoDelete：自动删除，队列不再使用时是否自动删除此队列，若此参数与exclusive设为True,就可以实现临时队列。</span><span class="hljs-comment">             * arguments：参数，可以设置一个队列的扩展参数。如：可设置存活时间</span><span class="hljs-comment">             *</span><span class="hljs-comment">             */</span>            channel.queueDeclare(QUEUE, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);            <span class="hljs-comment">// basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body)</span>            <span class="hljs-comment">/**</span><span class="hljs-comment">             * exchange: 交换机，若不指定将使用mq的默认交换机(设为&quot;&quot;)</span><span class="hljs-comment">             * routingKey：路由key，交换机根据路由key来将消息转发到指定的队列，若使用默认交换机，routingKey设置为队列的名称</span><span class="hljs-comment">             * props： 消息的属性</span><span class="hljs-comment">             * body： 消息内容</span><span class="hljs-comment">             *</span><span class="hljs-comment">             */</span>            <span class="hljs-comment">// 消息内容</span>            String message = <span class="hljs-string">&quot;Hello, This is a First RabbitMQ program!&quot;</span>;            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE, <span class="hljs-keyword">null</span>, message.getBytes());            System.out.println(<span class="hljs-string">&quot;Send to mq: &quot;</span> + message);        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">if</span> (channel != <span class="hljs-keyword">null</span>) &#123;                channel.close();            &#125;            <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>)                connection.close();        &#125;    &#125;&#125;</code></pre><p>在RabbitMQ管理控制台中</p><p><img src="/2020/04/09/rabbit-mq-start/3.png" alt="RabbitMQ-producer"></p><h3 id="消费者Consumer"><a href="#消费者Consumer" class="headerlink" title="消费者Consumer"></a>消费者Consumer</h3><p>操作流程：<br>1）创建连接<br>2）创建通道<br>3）声明队列<br>4）监听队列<br>5）接收消息</p><p>消费者测试</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<span class="hljs-comment">/**</span><span class="hljs-comment"> *  RabbitMQ入门程序-消费者测试。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer01</span> </span>&#123;    <span class="hljs-comment">// 队列</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE = <span class="hljs-string">&quot;Hello RabbitMQ&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;        <span class="hljs-comment">// 通过连接工厂创建新的连接和mq建立连接</span>        ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();        connectionFactory.setHost(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);        connectionFactory.setPort(<span class="hljs-number">5672</span>);        connectionFactory.setUsername(<span class="hljs-string">&quot;guest&quot;</span>);        connectionFactory.setPassword(<span class="hljs-string">&quot;guest&quot;</span>);        <span class="hljs-comment">// RabbitMQ默认虚拟机名称为&quot;/&quot;,虚拟机相当于一个独立的mq服务器。</span>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);        <span class="hljs-comment">// 建立与RabbitMQ服务的TCP连接</span>        Connection connection = connectionFactory.newConnection();        <span class="hljs-comment">// 建立会话通道，生产者和mq服务所有通信都在channel通道中完成。</span>        Channel channel = connection.createChannel();        <span class="hljs-comment">/**</span><span class="hljs-comment">         * queue: 队列名称</span><span class="hljs-comment">         * durable：是否持久化，若持久化，mq重启后队列还在</span><span class="hljs-comment">         * exclusive：是否独占连接，队列只允许在该连接中访问，若连接关闭队列自动删除，若此为True，可用于临时队列的创建。</span><span class="hljs-comment">         * autoDelete：自动删除，队列不再使用时是否自动删除此队列，若此参数与exclusive设为True,就可以实现临时队列。</span><span class="hljs-comment">         * arguments：参数，可以设置一个队列的扩展参数。如：可设置存活时间</span><span class="hljs-comment">         *</span><span class="hljs-comment">         */</span>        channel.queueDeclare(QUEUE, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);        <span class="hljs-comment">// 消费方法</span>        DefaultConsumer defaultConsumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel) &#123;            <span class="hljs-comment">/**</span><span class="hljs-comment">             * 当接收到消息后此方法将被调用。</span><span class="hljs-comment">             *</span><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> consumerTag 消费者标签，用来标识消费者的，在监听队列时设置channel.basicConsume</span><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> envelope 信封，通过envelope</span><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> properties 消息属性</span><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> body 消息内容</span><span class="hljs-comment">             * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment">             */</span>            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;                <span class="hljs-comment">// 交换机</span>                String exchange = envelope.getExchange();                <span class="hljs-comment">// 消息ID，mq在channel中用来标识消息的ID，可用于确认消息已经接收</span>                <span class="hljs-keyword">long</span> deliveryTag = envelope.getDeliveryTag();                String message = <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>);                System.out.println(<span class="hljs-string">&quot;Receive message: &quot;</span> + message);            &#125;        &#125;;              <span class="hljs-comment">/**</span><span class="hljs-comment">         * 监听队列 basicConsume(String queue, boolean autoAck, Consumer callback)</span><span class="hljs-comment">         *</span><span class="hljs-comment">         * queue：队列名称</span><span class="hljs-comment">         * autoAck：自动回复，当消费者接收到消息后要告诉mq消息已接收，若此参数设为True表示会自动回复mq，若为False要通过编程实现回复</span><span class="hljs-comment">         * callback：消费方法，当消费者接收到消息要执行的方法。</span><span class="hljs-comment">         *</span><span class="hljs-comment">         */</span>        channel.basicConsume(QUEUE, <span class="hljs-keyword">true</span>, defaultConsumer);    &#125;&#125;</code></pre><p>此时执行消费者，输出结果，消费者不会结果，持续监听。</p><pre><code class="hljs java">Receive message: Hello, This is a First RabbitMQ program!</code></pre><p>控制台消息清零（1-1=0）</p><p><img src="/2020/04/09/rabbit-mq-start/4.png" alt="RabbitMQ-consumer"></p><p>再次启动生产者生产消息，消费者就可持续接收到消息。</p><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><h4 id="1）Work-queues（工作队列模式）"><a href="#1）Work-queues（工作队列模式）" class="headerlink" title="1）Work queues（工作队列模式）"></a>1）Work queues（工作队列模式）</h4><p>对于任务过重或任务较多情况使用工作队列可以提高任务处理的速度。<br>一条消息只会被一个消费者接收;<br>rabbit采用**<u>轮询</u>**的方式将消息是平均发送给消费者的;<br>消费者在处理完某条消息后，才会收到下一条消息。</p><h4 id="2）Publish-subscribe（发布-订阅模式）"><a href="#2）Publish-subscribe（发布-订阅模式）" class="headerlink" title="2）Publish/subscribe（发布/订阅模式）"></a>2）Publish/subscribe（发布/订阅模式）</h4><p>每个消费者监听自己的队列。<br>生产者将消息发给broker，由交换机将消息转发到绑定此交换机的每个队列，每个绑定交换机的队列都将接收到消息。</p><p>测试<br>生产者</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;<span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * RabbitMQ生产订阅模式-生产者测试。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer02_publish</span> </span>&#123;    <span class="hljs-comment">// 邮件队列</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_INFORM_EMAIL = <span class="hljs-string">&quot;queue_inform_email&quot;</span>;    <span class="hljs-comment">// 短信队列</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_INFORM_SMS = <span class="hljs-string">&quot;queue_inform_sms&quot;</span>;    <span class="hljs-comment">// 交换机</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String EXCHANGE_FANOUT_INFORM = <span class="hljs-string">&quot;exchange_fanout_inform&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;        Connection connection = <span class="hljs-keyword">null</span>;        Channel channel = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 通过连接工厂创建新的连接和mq建立连接</span>            ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();            connectionFactory.setHost(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);            connectionFactory.setPort(<span class="hljs-number">5672</span>);            connectionFactory.setUsername(<span class="hljs-string">&quot;guest&quot;</span>);            connectionFactory.setPassword(<span class="hljs-string">&quot;guest&quot;</span>);            <span class="hljs-comment">// RabbitMQ默认虚拟机名称为&quot;/&quot;,虚拟机相当于一个独立的mq服务器。</span>            connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);            <span class="hljs-comment">// 建立与RabbitMQ服务的TCP连接</span>            connection = connectionFactory.newConnection();            <span class="hljs-comment">// 建立会话通道，生产者和mq服务所有通信都在channel通道中完成。</span>            channel = connection.createChannel();            <span class="hljs-comment">/**</span><span class="hljs-comment">             * 声明交换机</span><span class="hljs-comment">             * exchangeDeclare(String exchange, String type)</span><span class="hljs-comment">             * exchange: 交换机名称</span><span class="hljs-comment">             * type：交换机类型，</span><span class="hljs-comment">             *  FANOUT：对应的RabbitMQ的工作模式是 publish/subscribe模式</span><span class="hljs-comment">             *  DIRECT：对应的Routing工作模式</span><span class="hljs-comment">             *  TOPIC： 对应的Topic工作模式</span><span class="hljs-comment">             *  HEADERS：对应的headers工作模式</span><span class="hljs-comment">             *</span><span class="hljs-comment">             */</span>            channel.exchangeDeclare(EXCHANGE_FANOUT_INFORM, BuiltinExchangeType.FANOUT);            <span class="hljs-comment">/**</span><span class="hljs-comment">             * 声明队列</span><span class="hljs-comment">             * queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span><span class="hljs-comment">             *</span><span class="hljs-comment">             * queue: 队列名称</span><span class="hljs-comment">             * durable：是否持久化，若持久化，mq重启后队列还在</span><span class="hljs-comment">             * exclusive：是否独占连接，队列只允许在该连接中访问，若连接关闭队列自动删除，若此为True，可用于临时队列的创建。</span><span class="hljs-comment">             * autoDelete：自动删除，队列不再使用时是否自动删除此队列，若此参数与exclusive设为True,就可以实现临时队列。</span><span class="hljs-comment">             * arguments：参数，可以设置一个队列的扩展参数。如：可设置存活时间</span><span class="hljs-comment">             */</span>            channel.queueDeclare(QUEUE_INFORM_EMAIL, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);            channel.queueDeclare(QUEUE_INFORM_SMS, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);            <span class="hljs-comment">/**</span><span class="hljs-comment">             * 交换机与队列绑定</span><span class="hljs-comment">             * queueBind(String queue, String exchange, String routingKey)</span><span class="hljs-comment">             * queue: 队列名称</span><span class="hljs-comment">             * exchange：交换机名称</span><span class="hljs-comment">             * routingKey：路由key，交换机根据路由key的值将消息转发到指定的队列中，在publish/subscribe模式设置为空字符串</span><span class="hljs-comment">             */</span>            channel.queueBind(QUEUE_INFORM_EMAIL, EXCHANGE_FANOUT_INFORM, <span class="hljs-string">&quot;&quot;</span>);            channel.queueBind(QUEUE_INFORM_SMS, EXCHANGE_FANOUT_INFORM, <span class="hljs-string">&quot;&quot;</span>);            <span class="hljs-comment">/**</span><span class="hljs-comment">             * 发送消息</span><span class="hljs-comment">             * basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body)</span><span class="hljs-comment">             * exchange: 交换机，若不指定将使用mq的默认交换机(设为&quot;&quot;)</span><span class="hljs-comment">             * routingKey：路由key，交换机根据路由key来将消息转发到指定的队列，若使用默认交换机，routingKey设置为队列的名称</span><span class="hljs-comment">             * props： 消息的属性</span><span class="hljs-comment">             * body： 消息内容</span><span class="hljs-comment">             *</span><span class="hljs-comment">             */</span>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;                <span class="hljs-comment">// 消息内容</span>                String message = <span class="hljs-string">&quot;Hello, Inform to user &quot;</span> + i;                channel.basicPublish(EXCHANGE_FANOUT_INFORM, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());                System.out.println(<span class="hljs-string">&quot;Send to mq: &quot;</span> + message);            &#125;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">if</span> (channel != <span class="hljs-keyword">null</span>) &#123;                channel.close();            &#125;            <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>)                connection.close();        &#125;    &#125;&#125;</code></pre><p>消费者EMAIL</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.rabbitmq;<span class="hljs-keyword">import</span> com.rabbitmq.client.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * RabbitMQ生产订阅模式-消费者email测试。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer02_subscribe_email</span> </span>&#123;    <span class="hljs-comment">// 邮件队列</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_INFORM_EMAIL = <span class="hljs-string">&quot;queue_inform_email&quot;</span>;    <span class="hljs-comment">// 交换机</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String EXCHANGE_FANOUT_INFORM = <span class="hljs-string">&quot;exchange_fanout_inform&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;        <span class="hljs-comment">// 通过连接工厂创建新的连接和mq建立连接</span>        ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();        connectionFactory.setHost(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);        connectionFactory.setPort(<span class="hljs-number">5672</span>);        connectionFactory.setUsername(<span class="hljs-string">&quot;guest&quot;</span>);        connectionFactory.setPassword(<span class="hljs-string">&quot;guest&quot;</span>);        <span class="hljs-comment">// RabbitMQ默认虚拟机名称为&quot;/&quot;,虚拟机相当于一个独立的mq服务器。</span>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);        <span class="hljs-comment">// 建立与RabbitMQ服务的TCP连接</span>        Connection connection = connectionFactory.newConnection();        <span class="hljs-comment">// 建立会话通道，生产者和mq服务所有通信都在channel通道中完成。</span>        Channel channel = connection.createChannel();        <span class="hljs-comment">// 声明交换机</span>        channel.exchangeDeclare(EXCHANGE_FANOUT_INFORM, BuiltinExchangeType.FANOUT);        <span class="hljs-comment">// 声明队列</span>        channel.queueDeclare(QUEUE_INFORM_EMAIL, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);        <span class="hljs-comment">// 绑定队列</span>        channel.queueBind(QUEUE_INFORM_EMAIL, EXCHANGE_FANOUT_INFORM, <span class="hljs-string">&quot;&quot;</span>);        <span class="hljs-comment">// 消费方法</span>        DefaultConsumer defaultConsumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel) &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;                <span class="hljs-comment">// 交换机</span>                String exchange = envelope.getExchange();                <span class="hljs-comment">// 消息ID，mq在channel中用来标识消息的ID，可用于确认消息已经接收</span>                <span class="hljs-keyword">long</span> deliveryTag = envelope.getDeliveryTag();                String message = <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>);                System.out.println(<span class="hljs-string">&quot;Receive message: &quot;</span> + message);            &#125;        &#125;;        channel.basicConsume(QUEUE_INFORM_EMAIL, <span class="hljs-keyword">true</span>, defaultConsumer);    &#125;&#125;</code></pre><p>消费者SMS</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * RabbitMQ生产订阅模式-消费者sms测试。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/9</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer02_subscribe_sms</span> </span>&#123;    <span class="hljs-comment">// 短信队列</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_INFORM_SMS = <span class="hljs-string">&quot;queue_inform_sms&quot;</span>;    <span class="hljs-comment">// 交换机</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String EXCHANGE_FANOUT_INFORM = <span class="hljs-string">&quot;exchange_fanout_inform&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;        <span class="hljs-comment">// 通过连接工厂创建新的连接和mq建立连接</span>        ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();        connectionFactory.setHost(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);        connectionFactory.setPort(<span class="hljs-number">5672</span>);        connectionFactory.setUsername(<span class="hljs-string">&quot;guest&quot;</span>);        connectionFactory.setPassword(<span class="hljs-string">&quot;guest&quot;</span>);        <span class="hljs-comment">// RabbitMQ默认虚拟机名称为&quot;/&quot;,虚拟机相当于一个独立的mq服务器。</span>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);        <span class="hljs-comment">// 建立与RabbitMQ服务的TCP连接</span>        Connection connection = connectionFactory.newConnection();        <span class="hljs-comment">// 建立会话通道，生产者和mq服务所有通信都在channel通道中完成。</span>        Channel channel = connection.createChannel();        channel.exchangeDeclare(EXCHANGE_FANOUT_INFORM, BuiltinExchangeType.FANOUT);        channel.queueDeclare(QUEUE_INFORM_SMS, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);        channel.queueBind(QUEUE_INFORM_SMS, EXCHANGE_FANOUT_INFORM, <span class="hljs-string">&quot;&quot;</span>);        <span class="hljs-comment">// 消费方法</span>        DefaultConsumer defaultConsumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel) &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;                <span class="hljs-comment">// 交换机</span>                String exchange = envelope.getExchange();                <span class="hljs-comment">// 消息ID，mq在channel中用来标识消息的ID，可用于确认消息已经接收</span>                <span class="hljs-keyword">long</span> deliveryTag = envelope.getDeliveryTag();                String message = <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>);                System.out.println(<span class="hljs-string">&quot;Receive message: &quot;</span> + message);            &#125;        &#125;;        channel.basicConsume(QUEUE_INFORM_SMS, <span class="hljs-keyword">true</span>, defaultConsumer);    &#125;&#125;</code></pre><p>运行程序，测试</p><pre><code class="hljs html">// 生产者发布消息Connected to the target VM, address: &#x27;127.0.0.1:49691&#x27;, transport: &#x27;socket&#x27;Send to mq: Hello, Inform to user 0Send to mq: Hello, Inform to user 1Send to mq: Hello, Inform to user 2Send to mq: Hello, Inform to user 3Send to mq: Hello, Inform to user 4Disconnected from the target VM, address: &#x27;127.0.0.1:49691&#x27;, transport: &#x27;socket&#x27;// 消费者消费消息（email-1）Receive message: Hello, Inform to user 1Receive message: Hello, Inform to user 3// 消费者消费消息（email-2）Receive message: Hello, Inform to user 0Receive message: Hello, Inform to user 2Receive message: Hello, Inform to user 4// 消费者消费消息（sms）Receive message: Hello, Inform to user 0Receive message: Hello, Inform to user 1Receive message: Hello, Inform to user 2Receive message: Hello, Inform to user 3Receive message: Hello, Inform to user 4</code></pre><p>管理控制台</p><p><img src="/2020/04/09/rabbit-mq-start/5.png" alt="publish-scribe"></p><h4 id="3）路由模式（Routing）"><a href="#3）路由模式（Routing）" class="headerlink" title="3）路由模式（Routing）"></a>3）路由模式（Routing）</h4><p>每个消费者监听自己的队列，并且设置routingkey。<br>生产者将消息发给交换机，由交换机根据routingkey来转发消息到指定的队列。<br>可实现发送/订阅模式</p><h4 id="4）通配符模式（Topics）"><a href="#4）通配符模式（Topics）" class="headerlink" title="4）通配符模式（Topics）"></a>4）通配符模式（Topics）</h4><p>每个消费者监听自己的队列，并且设置带统配符的routingkey。<br>生产者将消息发给broker，由交换机根据routingkey来转发消息到指定的队列。</p><p>通配符模式（Topics）与路由模式（Routing）的区别<br>Topics和Routing的基本原理相同，即：生产者将消息发给交换机，交换机根据routingKey将消息转发给与routingKey匹配的队列。<br>不同之处是：routingKey的匹配方式，Routing模式是相等匹配，Topics模式是统配符匹配。</p><p>符号#：匹配一个或者多个词（每个词中间以.分隔）如infrom.#可以匹配inform.sms，inform.email，inform.email.sms<br>符号<em>：只能匹配一个词，如inform.\</em>  可以匹配inform.sms、inform.email</p><h4 id="5）Header模式"><a href="#5）Header模式" class="headerlink" title="5）Header模式"></a>5）Header模式</h4><p>header模式与routing不同的地方在于，header模式取消routingkey，使用header中的 key/value(键值对)匹配队列。<br>案例:<br>根据用户的通知设置去通知用户，设置接收Email的用户只接收Email，设置接收sms的用户只接收sms，设置两种通知类型都接收的则两种通知都有效。</p><h4 id="6）RPC模式"><a href="#6）RPC模式" class="headerlink" title="6）RPC模式"></a>6）RPC模式</h4><p>RPC即客户端远程调用服务端的方法 ，使用MQ可以实现RPC的异步调用，基于Direct交换机实现，流程如下:<br>1、客户端即是生产者就是消费者，向RPC请求队列发送RPC调用消息，同时监听RPC响应队列。<br>2、服务端监听RPC请求队列的消息，收到消息后执行服务端的方法，得到方法返回的结果。<br>3、服务端将RPC方法 的结果发送到RPC响应队列。<br>4、客户端(RPC调用方)监听RPC响应队列，接收到RPC调用结果。</p><h3 id="RabbitMQ与Spring-Boot整合"><a href="#RabbitMQ与Spring-Boot整合" class="headerlink" title="RabbitMQ与Spring Boot整合"></a>RabbitMQ与Spring Boot整合</h3><p>依赖</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../xc-framework-parent/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>test-rabbitmq-producer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--&amp;lt;!&amp;ndash;此版本与spring boot 1.5.9版本匹配&amp;ndash;&amp;gt;--&gt;</span>        <span class="hljs-comment">&lt;!--&lt;dependency&gt;--&gt;</span>            <span class="hljs-comment">&lt;!--&lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;--&gt;</span>            <span class="hljs-comment">&lt;!--&lt;artifactId&gt;amqp-client&lt;/artifactId&gt;--&gt;</span>            <span class="hljs-comment">&lt;!--&lt;version&gt;4.0.3&lt;/version&gt;--&gt;</span>        <span class="hljs-comment">&lt;!--&lt;/dependency&gt;--&gt;</span>        <span class="hljs-comment">&lt;!--web config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--amqp config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--test config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>yml配置文件</p><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">44000</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">test-rabbitmq-producer</span>  <span class="hljs-comment"># rabbitmq配置</span>  <span class="hljs-attr">rabbitmq:</span>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span></code></pre><p>RabbitMQ配置类</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.rabbitmq.config;<span class="hljs-keyword">import</span> org.springframework.amqp.core.*;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-comment">/**</span><span class="hljs-comment"> * RabbitMQ配置类。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: &#123; Topics模式 &#125;</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/12</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitmqConfig</span> </span>&#123;    <span class="hljs-comment">// 邮件队列</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_INFORM_EMAIL = <span class="hljs-string">&quot;queue_inform_email&quot;</span>;    <span class="hljs-comment">// 邮件队列</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_INFORM_SMS = <span class="hljs-string">&quot;queue_inform_sms&quot;</span>;    <span class="hljs-comment">// 交换机</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String EXCHANGE_TOPICS_INFORM = <span class="hljs-string">&quot;exchange_topics_inform&quot;</span>;    <span class="hljs-comment">// 路由key(EMAIL)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ROUTINGKEY_EMAIL = <span class="hljs-string">&quot;inform.#.email.#&quot;</span>;    <span class="hljs-comment">// 路由key(SMS)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ROUTINGKEY_SMS = <span class="hljs-string">&quot;inform.#.sms.#&quot;</span>;    <span class="hljs-comment">// 声明交换机</span>    <span class="hljs-meta">@Bean(EXCHANGE_TOPICS_INFORM)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">EXCHANGE_TOPICS_INFORM</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// durable(true)持久化，mq重启之后交换机还在</span>        <span class="hljs-keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_TOPICS_INFORM).durable(<span class="hljs-keyword">true</span>).build();    &#125;    <span class="hljs-comment">// 声明队列EMAIL</span>    <span class="hljs-meta">@Bean(QUEUE_INFORM_EMAIL)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">QUEUE_INFORM_EMAIL</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(QUEUE_INFORM_EMAIL);    &#125;    <span class="hljs-comment">// 声明队列SMS</span>    <span class="hljs-meta">@Bean(QUEUE_INFORM_SMS)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">QUEUE_INFORM_SMS</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(QUEUE_INFORM_SMS);    &#125;    <span class="hljs-comment">// 绑定交换机与队列EMAIL，指定RoutingKey</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">BINDING_QUEUE_INFORM_EMAIL</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(QUEUE_INFORM_EMAIL)</span> Queue queue,</span></span><span class="hljs-function"><span class="hljs-params">                                              <span class="hljs-meta">@Qualifier(EXCHANGE_TOPICS_INFORM)</span> Exchange exchange)</span> </span>&#123;        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(ROUTINGKEY_EMAIL).noargs();    &#125;    <span class="hljs-comment">// 绑定交换机与队列EMAIL，指定RoutingKey</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">BINDING_QUEUE_INFORM_SMS</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(QUEUE_INFORM_SMS)</span> Queue queue,</span></span><span class="hljs-function"><span class="hljs-params">                                            <span class="hljs-meta">@Qualifier(EXCHANGE_TOPICS_INFORM)</span> Exchange exchange)</span> </span>&#123;        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(ROUTINGKEY_SMS).noargs();    &#125;&#125;</code></pre><p>发送消息测试类</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.rabbitmq;<span class="hljs-keyword">import</span> com.xuecheng.rabbitmq.config.RabbitmqConfig;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> org.junit.runner.RunWith;<span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 基于springboot rabbitmq测试</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/12</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootTest</span><span class="hljs-meta">@RunWith(SpringRunner.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer05_springboot</span> </span>&#123;    <span class="hljs-comment">// 消息</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String MESSAGE_MQ = <span class="hljs-string">&quot;This a spring boot rabbitmq message&quot;</span>;    <span class="hljs-meta">@Autowired</span>    RabbitTemplate rabbitTemplate;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSendEmail</span><span class="hljs-params">()</span> </span>&#123;        rabbitTemplate.convertAndSend(                RabbitmqConfig.EXCHANGE_TOPICS_INFORM,                <span class="hljs-string">&quot;inform.email&quot;</span>,                MESSAGE_MQ        );    &#125;&#125;</code></pre><p>消费者接收</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.rabbitmq.handler;<span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<span class="hljs-keyword">import</span> com.xuecheng.rabbitmq.config.RabbitmqConfig;<span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Rabbitmq消费者监听</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/12</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mqReciveHandler</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 队列Email监听</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> channel</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RabbitListener(queues = &#123;RabbitmqConfig.QUEUE_INFORM_EMAIL&#125;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send_email</span><span class="hljs-params">(String msg, Message message, Channel channel)</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;Receive message is : &quot;</span> + msg);    &#125;&#125;</code></pre><p>运行测试方法，发布消息，结果</p><pre><code class="hljs html">Receive message is : This a spring boot rabbitmq message</code></pre><p><u>ps: 本文是学习笔记，仅供学习与参照！</u></p>]]></content>
    
    
    
    <tags>
      
      <tag>rabbit-mq</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Freemarker与Spring Boot集成</title>
    <link href="/2020/04/06/freemake-spring-boot/"/>
    <url>/2020/04/06/freemake-spring-boot/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Freemarker与Spring-Boot集成"><a href="#Freemarker与Spring-Boot集成" class="headerlink" title="Freemarker与Spring Boot集成"></a>Freemarker与Spring Boot集成</h2><p>FreeMarker是一款模版引擎。一种基于模版和要改变的数据，并用来生成输出文本（HTML网页，电子邮件、配置文件，源代码等）的通用工具。它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。</p><p>Freemarker并不关心数据的来源，只是根据模版的内容，将数据模型在模版中显示并输出文件（通常为html）。</p><h3 id="Freemarker环境搭建"><a href="#Freemarker环境搭建" class="headerlink" title="Freemarker环境搭建"></a>Freemarker环境搭建</h3><p>项目右击 -&gt; Open module Settings -&gt; + -&gt; new module -&gt; Next -&gt; 继承父模块 -&gt; Next -&gt; Finsh。</p><p><img src="/2020/04/06/freemake-spring-boot/1.png" alt="Freemaker测试工程搭建"></p><h4 id="POM引入依赖"><a href="#POM引入依赖" class="headerlink" title="POM引入依赖"></a>POM引入依赖</h4><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../xc-framework-parent/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>test-freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--freemarker config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--web config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--lombok config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--okhttp config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>okhttp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--test config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--commons-io config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>刷新依赖，下载依赖包</p><p><img src="/2020/04/06/freemake-spring-boot/2.png" alt="Freemaker依赖包"></p><h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8088</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">test-freemarker</span>  <span class="hljs-attr">freemarker:</span>    <span class="hljs-comment"># 关闭模版缓存，方便测试</span>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">settings:</span>      <span class="hljs-comment"># 检查模版更新延迟时间，设置为0表示立即检查，如果时间大于0会有缓存不方便进行模版测试</span>      <span class="hljs-attr">template_update_delay:</span> <span class="hljs-number">0</span></code></pre><h4 id="日志文件配置"><a href="#日志文件配置" class="headerlink" title="日志文件配置"></a>日志文件配置</h4><p><code>logback-spring.xml</code></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-comment">&lt;!--定义日志文件的存储地址,使用绝对路径--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_HOME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/Users/xxx/Documents/tmp/log&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- Console 输出设置 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>            <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 按照每天生成日志文件 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span>            <span class="hljs-comment">&lt;!--日志文件输出的文件名--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/xc.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 异步输出 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ASYNC&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">discardingThreshold</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">discardingThreshold</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">queueSize</span>&gt;</span>512<span class="hljs-tag">&lt;/<span class="hljs-name">queueSize</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 添加附加的appender,最多只能添加一个 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis.cache.decorators.LoggingCache&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework.boot&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;ASYNC&quot;/&gt;--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><h3 id="Freemarker测试"><a href="#Freemarker测试" class="headerlink" title="Freemarker测试"></a>Freemarker测试</h3><p>创建model, controller,模版文件</p><p><img src="/2020/04/06/freemake-spring-boot/3.png" alt="freemarker目录结构"></p><p><code>FreemarkerController.java</code></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.test.freemarker.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Freemarker controller.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:  <span class="hljs-doctag">@Controller</span>: 指向模版文件，注意不可使用<span class="hljs-doctag">@RestController</span>（返回JSON串）。</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/6</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/freemarker&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FreemarkerController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping(&quot;/test1&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> </span>&#123;       map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;FreeMarker&quot;</span>);       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test1&quot;</span>;    &#125;&#125;</code></pre><p>test1.ftl</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Hello $&#123;name&#125;!<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>启动类</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.test.freemarker;<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<span class="hljs-comment">/**</span><span class="hljs-comment"> * FreemarkerApplication.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/6</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FreemarkerApplication</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(FreemarkerApplication.class, args);    &#125;&#125;</code></pre><p>运行启动类，访问</p><p><code>http://localhost:8088/freemarker/test1</code></p><p><code>Hello FreeMarker!</code></p><h3 id="Freemarker指令"><a href="#Freemarker指令" class="headerlink" title="Freemarker指令"></a>Freemarker指令</h3><p>1、注释，即&lt;#‐‐和‐‐&gt;，介于其之间的内容会被freemarker忽略<br>2、插值(Interpolation):即${..}部分,freemarker会用真实的值代替${..}<br>3、FTL指令:和HTML标记类似，名字前加#予以区分，Freemarker会解析标签中的表达式或逻辑。<br>4、文本，仅文本信息，这些不是freemarker的注释、插值、FTL指令的内容会被freemarker忽略解析，直接输出内容。</p><h4 id="List指令"><a href="#List指令" class="headerlink" title="List指令"></a>List指令</h4><p>Controller类中加入</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test1&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> </span>&#123;    map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;FreeMarker&quot;</span>);    Student stu1 = <span class="hljs-keyword">new</span> Student();    stu1.setName(<span class="hljs-string">&quot;小明&quot;</span>);    stu1.setAge(<span class="hljs-number">18</span>);    stu1.setMoney(<span class="hljs-number">1000.86f</span>);    stu1.setBirthday(<span class="hljs-keyword">new</span> Date());    Student stu2 = <span class="hljs-keyword">new</span> Student();    stu2.setName(<span class="hljs-string">&quot;小红&quot;</span>);    stu2.setMoney(<span class="hljs-number">200.1f</span>);    stu2.setAge(<span class="hljs-number">19</span>);    stu2.setBirthday(<span class="hljs-keyword">new</span> Date());    List&lt;Student&gt; friends = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    friends.add(stu1);    stu2.setFriends(friends);    stu2.setBestFriend(stu1);    List&lt;Student&gt; stus = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    stus.add(stu1);    stus.add(stu2);    <span class="hljs-comment">//向数据模型放数据</span>    map.put(<span class="hljs-string">&quot;stus&quot;</span>, stus);    <span class="hljs-comment">//准备map数据</span>    HashMap&lt;String, Student&gt; stuMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    stuMap.put(<span class="hljs-string">&quot;stu1&quot;</span>, stu1);    stuMap.put(<span class="hljs-string">&quot;stu2&quot;</span>, stu2);    <span class="hljs-comment">//向数据模型放数据</span>    map.put(<span class="hljs-string">&quot;stu1&quot;</span>, stu1);    <span class="hljs-comment">//向数据模型放数据</span>    map.put(<span class="hljs-string">&quot;stuMap&quot;</span>, stuMap);    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test1&quot;</span>;&#125;</code></pre><p>模版文件</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Hello $&#123;name&#125;!<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>遍历数据模型中的List学生信息（数据模型中的名字是stus）<span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>钱包<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        &lt;#--&lt;td&gt;生日日期&lt;/td&gt;--&gt;    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">#list</span> <span class="hljs-attr">stus</span> <span class="hljs-attr">as</span> <span class="hljs-attr">stu</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu_index + 1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu.money&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            &lt;#--&lt;td&gt;$&#123;stu.birthday&#125;&lt;/td&gt;--&gt;        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">#list</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><p>显示效果</p><pre><code class="hljs html">Hello FreeMarker!遍历数据模型中的List学生信息（数据模型中的名字是stus）序号姓名年龄钱包1小明181,000.862小红19200.1</code></pre><h4 id="遍历Map数据"><a href="#遍历Map数据" class="headerlink" title="遍历Map数据"></a>遍历Map数据</h4><p>模版文件</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>遍历数据模型中的Map数据（stuMap）<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>方法一：在[]中填写map的key<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>姓名：$&#123;stuMap[&#x27;stu1&#x27;].name&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>年龄：$&#123;stuMap[&#x27;stu1&#x27;].age&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>方法二：在map后边直接加.加key<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>姓名：$&#123;stuMap.stu1.name&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>年龄：$&#123;stuMap.stu1.age&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>遍历map中的key, keys就是key列表<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">#list</span> <span class="hljs-attr">stuMap</span>?<span class="hljs-attr">keys</span> <span class="hljs-attr">as</span> <span class="hljs-attr">k</span>&gt;</span>    $&#123;k&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>    姓名：$&#123;stuMap[k].name&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>    年龄：$&#123;stuMap[k].age&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">#list</span>&gt;</span></code></pre><p>输出结果</p><pre><code class="hljs html">遍历数据模型中的Map数据（stuMap）方法一：在[]中填写map的key姓名：小明年龄：18方法二：在map后边直接加.加key姓名：小明年龄：18遍历map中的key, keys就是key列表stu2姓名：小红年龄：19stu1姓名：小明年龄：18</code></pre><h4 id="if指令"><a href="#if指令" class="headerlink" title="if指令"></a>if指令</h4><p>if 指令即判断指令，是常用的FTL指令，freemarker在解析时遇到if会进行判断，条件为真则输出if中间的内容，否则跳过内容不再输出。</p><pre><code class="hljs html">&lt;td &lt;#if stu.name == &#x27;小明&#x27;&gt;style=&quot;background: cornflowerblue&quot;&lt;/#if&gt;&gt;$&#123;stu.name&#125;&lt;/td&gt;</code></pre><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>1、算数运算符<br>FreeMarker表达式中完全支持算术运算，FreeMarker支持的算术运算符包括:+, - , * , / , %<br>2、逻辑运算符<br>逻辑与:&amp;&amp;<br>逻辑或:||<br>逻辑非:!<br>逻辑运算符只能作用于布尔值,否则将产生错误<br>3、 比较运算符<br>表达式中支持的比较运算符有如下几个:<br>1 =或者==:判断两个值是否相等.<br>2 !=:判断两个值是否不等.<br>3 &gt; 或者gt:判断左边值是否大于右边值<br>4 &gt;=或者gte:判断左边值是否大于等于右边值<br>5 &lt;或者lt:判断左边值是否小于右边值<br>6 &lt;=或者lte:判断左边值是否小于等于右边值</p><p>注意：使用gt等字母运算符代替 &gt; 会有更好的效果,因为 FreeMarker会把&gt;解释成FTL标签的结束字符,当然,也可以使用括 号来避免这种情况,如:&lt;#if (x&gt;y)&gt;</p><pre><code class="hljs html">&lt;#--&lt;td &lt;#if (stu.money &gt; 300)&gt;style=&quot;background: cornflowerblue&quot;&lt;/#if&gt;&gt;$&#123;stu.money&#125;&lt;/td&gt;--&gt;&lt;td &lt;#if stu.money gt 300&gt;style=&quot;background: cornflowerblue&quot;&lt;/#if&gt;&gt;$&#123;stu.money&#125;&lt;/td&gt;</code></pre><h4 id="空值处理"><a href="#空值处理" class="headerlink" title="空值处理"></a>空值处理</h4><p>判断某变量是否存在使用 “??” 用法为:variable??,如果该变量存在,返回true,否则返回false</p><pre><code class="hljs html">遍历数据模型中的List学生信息（数据模型中的名字是stus）<span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>钱包<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        &lt;#--&lt;td&gt;生日日期&lt;/td&gt;--&gt;    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">#--空值处理--</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">#if</span> <span class="hljs-attr">stus</span>??&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">#list</span> <span class="hljs-attr">stus</span> <span class="hljs-attr">as</span> <span class="hljs-attr">stu</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu_index + 1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            &lt;td &lt;#if stu.name == &#x27;小明&#x27;&gt;style=&quot;background: cornflowerblue&quot;&lt;/#if&gt;&gt;$&#123;stu.name&#125;&lt;/td&gt;            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        &lt;#--&lt;td &lt;#if stu.money &gt; 300&gt;style=&quot;background: cornflowerblue&quot;&lt;/#if&gt;&gt;$&#123;stu.money&#125;&lt;/td&gt;--&gt;        &lt;#--&lt;td &lt;#if (stu.money &gt; 300)&gt;style=&quot;background: cornflowerblue&quot;&lt;/#if&gt;&gt;$&#123;stu.money&#125;&lt;/td&gt;--&gt;            &lt;td &lt;#if stu.money gt 300&gt;style=&quot;background: cornflowerblue&quot;&lt;/#if&gt;&gt;$&#123;stu.money&#125;&lt;/td&gt;        &lt;#--&lt;td&gt;$&#123;stu.birthday&#125;&lt;/td&gt;--&gt;        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">#list</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">#if</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><p>也可以使用缺省值<br>缺失变量默认值使用 “!” 使用!要以指定一个默认值，当变量为空时显示默认值。<br>如：${name !’’}表示如果name为空显示空字符串。</p><pre><code class="hljs html">遍历数据模型中的Map数据（stuMap）<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>方法一：在[]中填写map的key<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>&lt;#--&lt;#if stuMap?? &amp;&amp; stuMap.stu1??&gt;--&gt;姓名：$&#123;(stuMap[&#x27;stu1&#x27;].name) ! &#x27;&#x27;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>年龄：$&#123;(stuMap[&#x27;stu1&#x27;].age) ! &#x27;&#x27;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>方法二：在map后边直接加.加key<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>姓名：$&#123;(stuMap.stu1.name) ! &#x27;&#x27;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>年龄：$&#123;(stuMap.stu1.age) ! &#x27;&#x27;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></code></pre><p>输出结果</p><pre><code class="hljs html">遍历数据模型中的Map数据（stuMap）方法一：在[]中填写map的key姓名：年龄：方法二：在map后边直接加.加key姓名：年龄：</code></pre><h4 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h4><p>到某个集合的大小</p><p><code>$&#123;集合名?size&#125;</code></p><pre><code class="hljs html">学生的个数：$&#123;stus?size&#125;// 输出学生的个数：2</code></pre><p>日期格式化</p><p>显示年月日: ${today?date}<br>显示时分秒:${today?time}<br>显示日期+时间:${today?datetime}<br>自定义格式化: ${today?string(“yyyy年MM月”)}</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu.birthday?date&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>// 输出2020-4-6<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu.birthday?string(&quot;yyyy年MM月dd日&quot;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>// 输出2020年04月06日</code></pre><p>内建函数c</p><p>如果不想显示为每三位分隔的数字，可以使用c函数将数字型转成字符串输出</p><pre><code class="hljs html">POINT数字型：$&#123;point&#125;// 输出POINT数字型：102,920,122POINT数字型：$&#123;point?c&#125;// 输出POINT数字型：102920122</code></pre><p>将json字符串转成对象</p><p>使用assign标签，assign的作用是定义一个变量</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">#assign</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;&#123;&#x27;bank&#x27;:&#x27;工商银行&#x27;,&#x27;account&#x27;:&#x27;10101920201920212&#x27;&#125;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">#assign</span> <span class="hljs-attr">data</span>=<span class="hljs-string">text?eval</span> /&gt;</span>开户行:$&#123;data.bank&#125; 账号:$&#123;data.account&#125;// 输出开户行:工商银行 账号:10101920201920212</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>freemaker</tag>
      
      <tag>spring boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从IT到DevOps实践（转载）</title>
    <link href="/2020/04/01/it-devops-convert/"/>
    <url>/2020/04/01/it-devops-convert/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="从-IT-到-DevOps-实践"><a href="#从-IT-到-DevOps-实践" class="headerlink" title="从 IT 到 DevOps 实践"></a>从 IT 到 DevOps 实践</h2><p>ps：该文拉取于<a href="https://zhuanlan.zhihu.com/p/106525719">知乎帖子</a>,仅供学习与参考。</p><p>从事过 IT 工作的人可能会对以下这段经历感到非常熟悉：您最初是一位技术支持，扮演 IT 桌面工程师的角色（IT 桌面工程师，能够为与计算机系统，软硬件相关的问题提供技术帮助和支持）。在这个职位上，您不断获得经验，可能会晋升为 2 级桌面工程师，并成为 IT 管理员。之后您将有足够的经验以系统管理员或系统工程师的身份开始在系统上工作。</p><p>你开始思考：“我应该更多地关注代码还是运维？”</p><p>如果您是要从事软件或 Web 开发的系统管理员，那么 DevOps 自然而然成为了下一步将要关注的理念。系统管理员和工程师的主要目标是使不同部门的员工可以共享信息并更有效地合作。DevOps 工程师在效率和优化的方面与这些角色非常相似，但是他们要做的是将软件开发团队与部署团队联系在一起。</p><p>许多人仍然不知道如何进入软件开发领域，同时觉得他们一直困在重启计算机和修复打印机的炼狱中，但是如果努力学习的话，仍然有一条光明的出路。</p><p><strong>这篇文章是写给谁的？</strong></p><p>首先，我们需要清楚两件事：</p><ol><li><p>这不是从 IT /运营转移到 DevOps 的唯一且最佳的方法，但这是曾经实践过并且有效的方法。您可能有不同的经历，并且过程可能会有所不同。</p></li><li><p>我们之前都知道：“ DevOps 不是工作，而是一种文化。” 当然如此。有人说DevOps 不是一项真正的工作，开发和运维团队应该携手合作。如果您的公司负担得起聘请 DevOps 工程师是非常有优势的。如果不能，可以试图将 DevOps 理念与您当前的团队结合起来。</p></li></ol><p>话虽如此，这篇文章实际上是为那些从事 IT 并希望更多地参与软件开发，Web 开发或者产出人员所写。</p><h3 id="DevOps-工具和技能"><a href="#DevOps-工具和技能" class="headerlink" title="DevOps 工具和技能"></a>DevOps 工具和技能</h3><p>以下是我关注的关键技能和技术，这些技能和技术使我走上了软件开发的道路。</p><h3 id="操作系统：Linux"><a href="#操作系统：Linux" class="headerlink" title="操作系统：Linux"></a>操作系统：Linux</h3><p>如果想要进入 DevOps 的领域，习惯 Linux 是非常必要的。即使不实践 DevOps，我们也应该使用Linux，因为 Linux 支持全球 90％ 以上的计算机和系统。</p><p>如果使用 Mac 作为日常驱动程序事情将会变得非常容易。 由于 Mac 是基于 Unix 的，因此许多（即使不是大多数）Linux 命令也可以 在Mac 上使用。 当我们进行 Mac 管理时，如果想把每日任务编写入脚本并自动化，或者将 SSH 加密到服务器和计算机中以执行支持，这是非常有用的。稍后我们会关注更多这个话题。</p><h3 id="Web-Stack：LAMP"><a href="#Web-Stack：LAMP" class="headerlink" title="Web Stack：LAMP"></a>Web Stack：LAMP</h3><p>虽然并非总是适用于每个 DevOps 角色，但学习 LAMP 堆栈有助于我们从操作系统级别了解 Web 应用程序的基本基础。 我们每个人每天都在使用应用程序，但是了解Web 应用程序的这些主要组件如何协同工作，有助于处理正在发生的事情及其时间和原因。</p><p>当然，还有其他堆栈，例如 LEMP（Linux，NGINX，MySQL，PHP / Python）和MEAN，但是我学习 LAMP 是因为它是最受欢迎的堆栈之一。 熟悉堆栈的基本底线是了解 Web 应用程序的不同部分如何工作。</p><h3 id="后端语言：Python"><a href="#后端语言：Python" class="headerlink" title="后端语言：Python"></a>后端语言：Python</h3><p>Python 非常适合脚本，Web 应用程序等。每当有人决定要参与 Web 或软件开发时，他们几乎总是花太多时间来决定应该专注于哪种语言。 虽然学习特定的语言对于特定的角色肯定有其好处，但是当我们刚开始学习如何开发应用程序或软件时，选择任何一种语言并坚持使用是最重要的部分。</p><p>话虽如此，我个人认为系统管理员和未来的 DevOps 工程师应该真正坚持使用Python。 由于人性化，它可能是最易于学习和使用的语言之一。目前有许多用Python 编写的安全工具和框架。 但实际上，语言选择并不是最关键的。 在学习 DevOps 的第一年，我已经使用过 Ruby，Python，Shell 甚至是 PHP。我们要做的就是选择一些工具并坚持实践。</p><h3 id="脚本：Bash"><a href="#脚本：Bash" class="headerlink" title="脚本：Bash"></a>脚本：Bash</h3><p>您应该习惯使用命令行界面。尽管 Python 很棒，但作为 Mac 的系统管理员，有一个显而易见的优势是 Mac 基于Unix 并具有终端。 我编写了脚本来帮助配置系统并自动执行重复的任务。例如，我写了一些脚本，可以创建用户，安装应用程序，并配置打印机设置。 通常，这些任务将花费几个小时，但是谁有如此多的时间呢？ 通过使用 Bash 脚本，我可以利用 Apple Remote Desktop 之类的工具一次配置五台甚至十台机器，从而将启动时间减少到数分钟而不是数小时。</p><h3 id="自动化：Ansible"><a href="#自动化：Ansible" class="headerlink" title="自动化：Ansible"></a>自动化：Ansible</h3><p>Ansible 是一个开源的 IT 自动化引擎，可以减免工作中的繁琐任务，同时能够显著提高 IT 环境的可伸缩性，一致性和可靠性。 我们可以学习 Ansible 的资源调配，配置管理以及应用程序测试和部署。</p><p>一旦开始编写脚本，例如用户入门和应用程序安装，我便开始将脚本与 Apple Remote Desktop（ARD）和 AutoDMG 等工具结合起来，以自动进行计算机镜像处理。 Ansible 可以将我的更多任务组合到一个我可以执行的 playbook 中，playbook 能够进行配置管理和多主机部署。</p><p>以下链接是 GitHub 存储库，其中包含一些出色的Mac sysadmin 的 playbook。</p><p><a href="https://link.zhihu.com/?target=https://github.com/geerlingguy/mac-dev-playbook">https://github.com/geerlingguy/mac-dev-playbook</a></p><h3 id="VIrtualBox-Vagrant"><a href="#VIrtualBox-Vagrant" class="headerlink" title="VIrtualBox: Vagrant"></a>VIrtualBox: Vagrant</h3><p>Vagrant 是用于在单个工作流程中构建和管理虚拟机环境的工具。 Vagrant 提供了易于配置，可复制且可移植的工作环境。列两个场景，你是否需要 Ubuntu 18.04 实例进行测试？ 登台服务器的 CentOS 实例如何？ Vagrant 提供了一个用于开发和测试基础结构管理脚本的一次性环境和一致的工作流程。</p><h3 id="持续集成和部署：Jenkins"><a href="#持续集成和部署：Jenkins" class="headerlink" title="持续集成和部署：Jenkins"></a>持续集成和部署：Jenkins</h3><p>持续集成（CI）和持续部署（CD）是 DevOps 最重要的部分之一，但也是掌握和理解最复杂的部分之一。 Jenkins 可能不是CI/CD的最佳工具，但它无疑是最受欢迎的并且是行业必备的工具之一。</p><p>作为一种自动化工具，Jenkins用于构建，测试和启动应用程序的部署，从而使开发人员可以更轻松地将更改和错误修复持续集成到软件中，从而消除了可怕的“推向生产然后祈祷”的固有思维。在 DevOps 的世界里，Jenkins 具有显而易见的重要地位，因此强烈建议您全面了解 Jenkins。</p><p>译者注：如果想要体验全流程服务，可以尝试一些一站式解决方案，例如 CODING DevOps</p><h3 id="云：AWS"><a href="#云：AWS" class="headerlink" title="云：AWS"></a>云：AWS</h3><p>在云基础架构和服务方面，Amazon Web Services（AWS）无疑是一个优秀的平台。 AWS 无需担心服务器配置和物理资产限制，从而帮助公司降低成本，缩短部署时间并增加运营规模。 如果想要尝试进行 DevOps 或软件开发，AWS 是一个不错的选择。AWS提供了数百种服务，但是重要的是要了解诸如 EC2，S3，RDS，Route53 和 Lambda等核心服务。</p><p>译者注: 这篇文章面向的中国受众可能在体验 AWS 时遇到一些问题，如服务不够本土化，备案不流畅等等。因此您可以自行尝试一些针对中国用户市场的产品。CODING DevOps 提供了高可用，安全可靠的本地化云服务，国内速度稳定流畅，让云上开发更简单。</p><p><strong>总结</strong></p><p>真正了解软件开发和 DevOps 来龙去脉的最佳方法是启动自己的项目。即使整天观看YouTube 教程并彻夜阅读经验帖子无疑是一种手段，但是在真正开始编写一些代码，配置服务器并推动部署之前，您所学到的东西都不会真正被吸收消化。</p><p>以下是对新入门者的一些学习建议：<br>从全新的 Ubuntu 安装开始，配置 LAMP 堆栈并部署自己的网站<br>安装和构建 Jenkins 服务器，或者使用可安装 Jenkins 插件的工具并练习推送代码以进行部署<br>创建一个免费的云服务器账户，然后开始处理EC2，S3存储桶和其他服务<br>开始构建脚本，实现部分日常任务自动化。</p><p>笔者在 IT 领域浸淫了五年，并且学到了很多与DevOps 相关的知识。这些探索与经验能够帮助更多人减少走弯路的机会。这篇文章就是在指导您如何在最短时间内最有效地去实践 DevOps 过程。</p>]]></content>
    
    
    
    <tags>
      
      <tag>devops</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB环境搭建（Docker系）</title>
    <link href="/2020/03/31/mongodb-docker-install/"/>
    <url>/2020/03/31/mongodb-docker-install/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="MongoDB环境搭建（Docker系）"><a href="#MongoDB环境搭建（Docker系）" class="headerlink" title="MongoDB环境搭建（Docker系）"></a>MongoDB环境搭建（Docker系）</h2><h3 id="查看MongoDB可用版本"><a href="#查看MongoDB可用版本" class="headerlink" title="查看MongoDB可用版本"></a>查看MongoDB可用版本</h3><p><code>docker search mongo</code></p><pre><code class="hljs bash">$ docker search mongoNAME                                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDmongo                               MongoDB document databases provide high avai…   6710                [OK]                mongo-express                       Web-based MongoDB admin interface, written w…   654                 [OK]                tutum/mongodb                       MongoDB Docker image – listens <span class="hljs-keyword">in</span> port 27017…   230                                     [OK]bitnami/mongodb                     Bitnami MongoDB Docker Image                    111                                     [OK]mongoclient/mongoclient             Official docker image <span class="hljs-keyword">for</span> Mongoclient, featu…   80                                      [OK]mongooseim/mongooseim               Small docker image <span class="hljs-keyword">for</span> MongooseIM - robust a…   19                                      frodenas/mongodb                    A Docker Image <span class="hljs-keyword">for</span> MongoDB                      18                                      [OK]cvallance/mongo-k8s-sidecar         Kubernetes side car to setup and maintain a …   14                                      [OK]circleci/mongo                      CircleCI images <span class="hljs-keyword">for</span> MongoDB                     8                                       [OK]centos/mongodb-32-centos7           MongoDB NoSQL database server                   8                                       arm64v8/mongo                       MongoDB document databases provide high avai…   7                                       istepanov/mongodump                 Docker image with mongodump running as a cro…   6                                       [OK]centos/mongodb-36-centos7           MongoDB NoSQL database server                   5                                       webhippie/mongodb                   Docker images <span class="hljs-keyword">for</span> MongoDB                       5                                       [OK]eses/mongodb_exporter               mongodb exporter <span class="hljs-keyword">for</span> prometheus                 5                                       [OK]centos/mongodb-26-centos7           MongoDB NoSQL database server                   5                                       neowaylabs/mongodb-mms-agent        This Docker image with MongoDB Monitoring Ag…   3                                       [OK]centos/mongodb-34-centos7           MongoDB NoSQL database server                   3                                       openshift/mongodb-24-centos7        DEPRECATED: A Centos7 based MongoDB v2.4 ima…   1                                       ansibleplaybookbundle/mongodb-apb   An APB to deploy MongoDB.                       1                                       [OK]ekesken/mongo                       docker image <span class="hljs-keyword">for</span> mongo that is configurable …   1                                       [OK]andreasleicher/mongo-azure-backup   a docker container to backup a mongodb using…   1                                       [OK]phenompeople/mongodb                 MongoDB is an open-source, document databas…   0                                       [OK]targetprocess/mongodb_exporter      MongoDB exporter <span class="hljs-keyword">for</span> prometheus                 0                                       [OK]martel/mongo-replica-ctrl           A dockerized controller <span class="hljs-keyword">for</span> a Mongo db repli…   0                                       [OK]</code></pre><h3 id="拉取MongoDB"><a href="#拉取MongoDB" class="headerlink" title="拉取MongoDB"></a>拉取MongoDB</h3><p><code>docker pull mongo:latest</code></p><pre><code class="hljs bash">$ docker pull mongo:latestlatest: Pulling from library/mongo5bed26d33875: Pull complete f11b29a9c730: Pull complete 930bda195c84: Pull complete 78bf9a5ad49e: Pull complete 3d7fb3809884: Pull complete a7237292ff8a: Pull complete c936e28b5159: Pull complete 3fb56b127f30: Pull complete c54a0478af29: Pull complete ffc3a4dd1cdc: Pull complete 236ffdb10499: Pull complete c33efe03b109: Pull complete 1d3609ce2ac9: Pull complete Digest: sha256:1e33093260855e83baee0237e29947e243818c58a1d37b1022909e227f624d7aStatus: Downloaded newer image <span class="hljs-keyword">for</span> mongo:latestdocker.io/library/mongo:latest$ docker image lsREPOSITORY                              TAG                 IMAGE ID            CREATED             SIZEmongo                                   latest              c5e5843d9f5f        4 days ago          387MB</code></pre><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><p><code>docker run -itd --name mongo -p 27017:27017 mongo --auth</code> </p><p><strong>-p 27017:27017</strong> ：映射容器服务的 27017 端口到宿主机的 27017 端口。外部可以直接通过 宿主机 ip:27017 访问到 mongo 的服务。<br>**–auth**：需要密码才能访问容器服务。</p><p><strong><u>第一次运行不带 –auth 参数</u></strong></p><p><code>docker run -itd --name mongo -p 27017:27017 mongo</code></p><pre><code class="hljs bash">$ docker run -itd --name mongo -p 27017:27017 mongo --auth2d4bb82ced0e050e922e300db7ba4fa97afc37a10a0c21134465b261e8619792localhost:tmp zhuyangze$ docker container lsCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES2d4bb82ced0e        mongo               <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   46 seconds ago      Up 46 seconds       0.0.0.0:27017-&gt;27017/tcp            mongo</code></pre><h3 id="设置用户密码"><a href="#设置用户密码" class="headerlink" title="设置用户密码"></a>设置用户密码</h3><p><code>docker exec -it mongo mongo admin</code></p><p><code>db.createUser(&#123; user:&#39;admin&#39;,pwd:&#39;123456&#39;,roles:[ &#123; role:&#39;userAdminAnyDatabase&#39;, db: &#39;admin&#39;&#125;]&#125;);</code></p><p><code>db.auth(&#39;admin&#39;, &#39;123456&#39;)</code></p><p>需要创建一个帐号，该账号需要有grant权限，即：账号管理的授权权限。<br><strong>注意一点</strong>，<u><strong>帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)。</strong></u></p><pre><code class="hljs bash">$ docker <span class="hljs-built_in">exec</span> -it mongo mongo adminMongoDB shell version v4.2.5connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodbImplicit session: session &#123; <span class="hljs-string">&quot;id&quot;</span> : UUID(<span class="hljs-string">&quot;913745fe-904c-43ef-ad00-2e3caef28643&quot;</span>) &#125;MongoDB server version: 4.2.5Welcome to the MongoDB shell.For interactive <span class="hljs-built_in">help</span>, <span class="hljs-built_in">type</span> <span class="hljs-string">&quot;help&quot;</span>.For more comprehensive documentation, seehttp://docs.mongodb.org/Questions? Try the support grouphttp://groups.google.com/group/mongodb-userServer has startup warnings: 2020-03-31T11:16:39.887+0000 I  STORAGE  [initandlisten] 2020-03-31T11:16:39.887+0000 I  STORAGE  [initandlisten] ** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine2020-03-31T11:16:39.887+0000 I  STORAGE  [initandlisten] **          See http://dochub.mongodb.org/core/prodnotes-filesystem2020-03-31T11:16:40.436+0000 I  CONTROL  [initandlisten] 2020-03-31T11:16:40.436+0000 I  CONTROL  [initandlisten] ** WARNING: Access control is not enabled <span class="hljs-keyword">for</span> the database.2020-03-31T11:16:40.436+0000 I  CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.2020-03-31T11:16:40.436+0000 I  CONTROL  [initandlisten] ---Enable MongoDB<span class="hljs-string">&#x27;s free cloud-based monitoring service, which will then receive and display</span><span class="hljs-string">metrics about your deployment (disk utilization, CPU, operation statistics, etc).</span><span class="hljs-string"></span><span class="hljs-string">The monitoring data will be available on a MongoDB website with a unique URL accessible to you</span><span class="hljs-string">and anyone you share the URL with. MongoDB may use this information to make product</span><span class="hljs-string">improvements and to suggest MongoDB products and deployment options to you.</span><span class="hljs-string"></span><span class="hljs-string">To enable free monitoring, run the following command: db.enableFreeMonitoring()</span><span class="hljs-string">To permanently disable this reminder, run the following command: db.disableFreeMonitoring()</span><span class="hljs-string">---</span><span class="hljs-string"></span><span class="hljs-string">&gt;</span></code></pre><p>创建用户与密码</p><pre><code class="hljs bash">&gt; use adminswitched to db admin// 创建myadmin用户db.createUser(...      &#123;...        user:<span class="hljs-string">&quot;myadmin&quot;</span>,...        <span class="hljs-built_in">pwd</span>:<span class="hljs-string">&quot;secret&quot;</span>,...        roles:[&#123;role:<span class="hljs-string">&quot;root&quot;</span>,db:<span class="hljs-string">&quot;admin&quot;</span>&#125;]...      &#125;...   )Successfully added user: &#123;<span class="hljs-string">&quot;user&quot;</span> : <span class="hljs-string">&quot;myadmin&quot;</span>,<span class="hljs-string">&quot;roles&quot;</span> : [&#123;<span class="hljs-string">&quot;role&quot;</span> : <span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;db&quot;</span> : <span class="hljs-string">&quot;admin&quot;</span>&#125;]&#125;// 没有验证通过，查询会出错&gt; show users2020-03-31T14:20:29.326+0000 E  QUERY    [js] uncaught exception: Error: <span class="hljs-built_in">command</span> usersInfo requires authentication :_getErrorWithCode@src/mongo/shell/utils.js:25:13DB.prototype.getUsers@src/mongo/shell/db.js:1638:15shellHelper.show@src/mongo/shell/utils.js:883:9shellHelper@src/mongo/shell/utils.js:790:15@(shellhelp2):1:1// 验证用户&gt; db.auth(<span class="hljs-string">&#x27;myadmin&#x27;</span>, <span class="hljs-string">&#x27;secret&#x27;</span>)1&gt; show users&#123;<span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;admin.myadmin&quot;</span>,<span class="hljs-string">&quot;userId&quot;</span> : UUID(<span class="hljs-string">&quot;734e6d84-074b-4b67-85e3-450783d0a8ea&quot;</span>),<span class="hljs-string">&quot;user&quot;</span> : <span class="hljs-string">&quot;myadmin&quot;</span>,<span class="hljs-string">&quot;db&quot;</span> : <span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;roles&quot;</span> : [&#123;<span class="hljs-string">&quot;role&quot;</span> : <span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;db&quot;</span> : <span class="hljs-string">&quot;admin&quot;</span>&#125;],<span class="hljs-string">&quot;mechanisms&quot;</span> : [<span class="hljs-string">&quot;SCRAM-SHA-1&quot;</span>,<span class="hljs-string">&quot;SCRAM-SHA-256&quot;</span>]&#125;&gt; db.createRole(&#123;<span class="hljs-string">&quot;role&quot;</span> : <span class="hljs-string">&quot;sysadmin&quot;</span>,<span class="hljs-string">&quot;roles&quot;</span> : [ ],<span class="hljs-string">&quot;privileges&quot;</span> : [&#123;<span class="hljs-string">&quot;resource&quot;</span> : &#123;<span class="hljs-string">&quot;anyResource&quot;</span> : <span class="hljs-literal">true</span>&#125;,<span class="hljs-string">&quot;actions&quot;</span> : [<span class="hljs-string">&quot;anyAction&quot;</span>]&#125;]&#125;)// 结果&#123;<span class="hljs-string">&quot;role&quot;</span> : <span class="hljs-string">&quot;sysadmin&quot;</span>,<span class="hljs-string">&quot;roles&quot;</span> : [ ],<span class="hljs-string">&quot;privileges&quot;</span> : [&#123;<span class="hljs-string">&quot;resource&quot;</span> : &#123;<span class="hljs-string">&quot;anyResource&quot;</span> : <span class="hljs-literal">true</span>&#125;,<span class="hljs-string">&quot;actions&quot;</span> : [<span class="hljs-string">&quot;anyAction&quot;</span>]&#125;]&#125;// 创建数据库lc-test&gt; use lc-testswitched to db lc-test// 创建用户名与密码&gt; db.createUser(&#123;user:<span class="hljs-string">&#x27;sa&#x27;</span>, <span class="hljs-built_in">pwd</span>:<span class="hljs-string">&#x27;123456&#x27;</span>, roles:[&#123;role:<span class="hljs-string">&#x27;sysadmin&#x27;</span>,db:<span class="hljs-string">&#x27;admin&#x27;</span>&#125;]&#125;)Successfully added user: &#123;<span class="hljs-string">&quot;user&quot;</span> : <span class="hljs-string">&quot;sa&quot;</span>,<span class="hljs-string">&quot;roles&quot;</span> : [&#123;<span class="hljs-string">&quot;role&quot;</span> : <span class="hljs-string">&quot;sysadmin&quot;</span>,<span class="hljs-string">&quot;db&quot;</span> : <span class="hljs-string">&quot;admin&quot;</span>&#125;]&#125;&gt; <span class="hljs-built_in">exit</span>// 重新进入容器$ docker <span class="hljs-built_in">exec</span> -it mongo mongo saMongoDB shell version v4.2.5connecting to: mongodb://127.0.0.1:27017/sa?compressors=disabled&amp;gssapiServiceName=mongodbImplicit session: session &#123; <span class="hljs-string">&quot;id&quot;</span> : UUID(<span class="hljs-string">&quot;cc084b61-fa73-4118-a826-c7f77beb49bf&quot;</span>) &#125;MongoDB server version: 4.2.5// 切换数据库&gt; use lc-testswitched to db lc-test// 没有授权前，查询出错&gt; db.student.find()Error: error: &#123;<span class="hljs-string">&quot;ok&quot;</span> : 0,<span class="hljs-string">&quot;errmsg&quot;</span> : <span class="hljs-string">&quot;command find requires authentication&quot;</span>,<span class="hljs-string">&quot;code&quot;</span> : 13,<span class="hljs-string">&quot;codeName&quot;</span> : <span class="hljs-string">&quot;Unauthorized&quot;</span>&#125;// 用户授权&gt; db.auth(<span class="hljs-string">&quot;sa&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>)1// 查询，插入操作均可&gt; db.student.find()&gt; db.student.insert(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mrling&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;19&quot;</span>&#125;)WriteResult(&#123; <span class="hljs-string">&quot;nInserted&quot;</span> : 1 &#125;)</code></pre><p>停止容器并重启容器</p><pre><code class="hljs bash">$ docker container lsCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES2d4bb82ced0e        mongo               <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   4 minutes ago       Up 4 minutes        0.0.0.0:27017-&gt;27017/tcp            mongo$ docker container restart mongomongo$ docker container lsCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES2d4bb82ced0e        mongo               <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   4 minutes ago       Up 7 seconds        0.0.0.0:27017-&gt;27017/tcp            mongo</code></pre><h3 id="MongoDB的数据存储路径"><a href="#MongoDB的数据存储路径" class="headerlink" title="MongoDB的数据存储路径"></a>MongoDB的数据存储路径</h3><p><code>docker exec -it mongo bash</code></p><p><code>/data/db</code></p><pre><code class="hljs bash">$ docker <span class="hljs-built_in">exec</span> -it mongo bashroot@02cb330d07df:/<span class="hljs-comment"># cd /data/db/</span>root@02cb330d07df:/data/db<span class="hljs-comment"># ls</span>WiredTiger       WiredTiger.turtle  WiredTigerLAS.wt  collection-0--554143273899493200.wt  collection-4--554143273899493200.wt  diagnostic.data                 index-10--554143273899493200.wt  index-5--554143273899493200.wt  index-9--554143273899493200.wt  mongod.lock    storage.bsonWiredTiger.lock  WiredTiger.wt      _mdb_catalog.wt   collection-2--554143273899493200.wt  collection-8--554143273899493200.wt  index-1--554143273899493200.wt  index-3--554143273899493200.wt   index-6--554143273899493200.wt  journal                         sizeStorer.wt</code></pre><h3 id="安装MongoDB客户端"><a href="#安装MongoDB客户端" class="headerlink" title="安装MongoDB客户端"></a>安装MongoDB客户端</h3><p>**<u>Studio 3T</u>**下载</p><p><code>https://studio3t.com/download/</code></p><p>连接串：Docker ip地址</p><p><code>docker-machine ip</code></p><p><img src="/2020/03/31/mongodb-docker-install/1.png" alt="MongoDB-ip"></p><p>认证密码（sa：123456）</p><p><strong><u>接入的数据库要写对</u></strong></p><p><img src="/2020/03/31/mongodb-docker-install/2.png" alt="MongoDB-pwd"></p><p>测试连接</p><p><img src="/2020/03/31/mongodb-docker-install/3.png" alt="MongoDB-test"></p><p>连接后界面</p><p><img src="/2020/03/31/mongodb-docker-install/4.png" alt="client"></p><p>在Studio 3T脚本界面可以写MongoDB的相关脚本</p><p><img src="/2020/03/31/mongodb-docker-install/5.png" alt="MongoDB-script"></p><h3 id="MongoDB脚本"><a href="#MongoDB脚本" class="headerlink" title="MongoDB脚本"></a>MongoDB脚本</h3><pre><code class="hljs js"><span class="hljs-comment">// 使用admin数据库</span>use admin<span class="hljs-comment">// 创建student文档集合</span>db.createCollection(<span class="hljs-string">&quot;student&quot;</span>)<span class="hljs-comment">// 指定查询student文档集合</span>db.getCollection(<span class="hljs-string">&quot;student&quot;</span>)<span class="hljs-comment">// 替换插入文档集合</span>db.student.insert(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mrling&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;19&quot;</span>&#125;)<span class="hljs-comment">// 更新文档集合</span>db.student.update(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mrling&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mrlingchen&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;29&quot;</span>&#125;)<span class="hljs-comment">// 更新-设定</span>db.student.update(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mrlingchen&quot;</span>&#125;, &#123;<span class="hljs-attr">$set</span>: &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mrling&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;39&quot;</span>&#125;&#125;, &#123;<span class="hljs-attr">multi</span>:<span class="hljs-literal">true</span>&#125;)<span class="hljs-comment">// 查询student文档集合</span>db.student.find()<span class="hljs-comment">// 条件查询</span>db.student.find(&#123;<span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;mrling&quot;</span>&#125;)<span class="hljs-comment">// 条件查询（输出结果指定，1，显示；0：不显示）</span>db.student.find(&#123;<span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;mrling&quot;</span>&#125;, &#123;<span class="hljs-attr">name</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">age</span> : <span class="hljs-number">1</span>, <span class="hljs-attr">_id</span> : <span class="hljs-number">0</span>&#125;)db.student.find(&#123;<span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;mrling&quot;</span>&#125;, &#123;<span class="hljs-attr">age</span> : <span class="hljs-number">1</span>&#125;)</code></pre><p>用户信息</p><pre><code class="hljs js">db.createUser(&#123;<span class="hljs-attr">user</span>:<span class="hljs-string">&#x27;sa&#x27;</span>, <span class="hljs-attr">pwd</span>:<span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-attr">roles</span>:[&#123;<span class="hljs-attr">role</span>:<span class="hljs-string">&#x27;sysadmin&#x27;</span>,<span class="hljs-attr">db</span>:<span class="hljs-string">&#x27;admin&#x27;</span>&#125;]&#125;)</code></pre><p><img src="/2020/03/31/mongodb-docker-install/6.png" alt="MongDB-user"></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>mongo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jira-Docker环境搭建</title>
    <link href="/2020/03/29/jira-init/"/>
    <url>/2020/03/29/jira-init/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Jira-Docker环境搭建"><a href="#Jira-Docker环境搭建" class="headerlink" title="Jira-Docker环境搭建"></a>Jira-Docker环境搭建</h2><h3 id="docker-mysql环境搭建"><a href="#docker-mysql环境搭建" class="headerlink" title="docker-mysql环境搭建"></a>docker-mysql环境搭建</h3><p>拉取mysql镜像</p><pre><code class="hljs bash">$ docker pull mysql:5.7</code></pre><p>启动mysql docker实例</p><pre><code class="hljs bash">$ docker run --name=atlassian-mysql -it -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root_password<span class="hljs-comment"># -d mysql:5.7</span></code></pre><p>连接mysql</p><pre><code class="hljs bash">$ docker <span class="hljs-built_in">exec</span> -it atlassian-mysql bash</code></pre><p>创建jira数据库，并添加jira用户</p><pre><code class="hljs bash">$ mysql -uroot -p// 输入密码// jira的mysql数据库，注意格式：utf8，utf8_bin$ create database jira default character <span class="hljs-built_in">set</span> utf8 collate utf8_bin;$ CREATE USER <span class="hljs-string">&#x27;jira&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;jira&#x27;</span>;$ GRANT ALL ON *.* TO <span class="hljs-string">&#x27;jira&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> WITH GRANT OPTION;$ alter user <span class="hljs-string">&#x27;jira&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified with mysql_native_password by <span class="hljs-string">&#x27;jira&#x27;</span>;// 修改mysql事物隔离级别$ <span class="hljs-built_in">set</span> global transaction isolation level <span class="hljs-built_in">read</span> committed;$ <span class="hljs-built_in">set</span> session transaction isolation level <span class="hljs-built_in">read</span> committed;</code></pre><h3 id="Docker-jira环境搭建"><a href="#Docker-jira环境搭建" class="headerlink" title="Docker-jira环境搭建"></a>Docker-jira环境搭建</h3><h4 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写Dockerfile文件</h4><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> cptactionhank/atlassian-jira-software:<span class="hljs-number">7.12</span>.<span class="hljs-number">0</span><span class="hljs-keyword">USER</span> root<span class="hljs-comment"># 将代理破解包加入容器</span><span class="hljs-keyword">COPY</span><span class="bash"> <span class="hljs-string">&quot;atlassian-agent.jar&quot;</span> /opt/atlassian/jira/</span><span class="hljs-comment"># 设置启动加载代理包</span><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export CATALINA_OPTS=&quot;-javaagent:/opt/atlassian/jira/atlassian-agent.jar $&#123;CATALINA_OPTS&#125;&quot;&#x27;</span> &gt;&gt; /opt/atlassian/jira/bin/setenv.sh</span></code></pre><p>注意：atlassian-agent.jar与Dockerfile文件在同一个文件夹下</p><pre><code class="hljs bash">$ lsDockerfileatlassian-agent.jarmysql-connector-java-5.1.39-bin.jar</code></pre><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><pre><code class="hljs bash">$ docker build -t jira/jira:v7.12.0 .</code></pre><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><pre><code class="hljs bash">$ docker run -d -it -p 8180:8080 --privileged  -m 1800M jira/jira:v7.12.0$ docker container lsCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES08adf58871f2        mysql:5.7           <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   About an hour ago   Up 47 minutes       0.0.0.0:3306-&gt;3306/tcp, 33060/tcp   atlassian-mysqlc19ec1a0fbc5        jira/jira:v7.12.0   <span class="hljs-string">&quot;/docker-entrypoint.…&quot;</span>   About an hour ago   Up 7 minutes        0.0.0.0:8180-&gt;8080/tcp              festive_wilbur</code></pre><h4 id="访问IP"><a href="#访问IP" class="headerlink" title="访问IP"></a>访问IP</h4><pre><code class="hljs bash">$ docker-machine ip192.168.99.100</code></pre><p><code>http://192.168.99.100:8180</code></p><p>mysql相关设置</p><p><img src="/2020/03/29/jira-init/1.png" alt="mysql-设置"></p><p>设置应用属性</p><p><img src="/2020/03/29/jira-init/2.png" alt="app-properties"></p><p>设置注册码:</p><p>atlassian-agent.jar包需要clone atlassian-agent-master项目，mvn package打包</p><h4 id="配置Agent"><a href="#配置Agent" class="headerlink" title="配置Agent"></a>配置Agent</h4><ol><li>将<code>atlassian-agent.jar</code>放在一个你不会随便删除的位置（你服务器上的所有Atlassian服务可共享同一个<code>atlassian-agent.jar</code>）。</li><li>设置环境变量’JAVA_OPTS’ （这其实是Java的环境变量，用来指定其启动java程序时附带的参数），把-javaagent参数附带上。具体可以这么做：<ul><li>你可以把：<code>export JAVA_OPTS=&quot;-javaagent:/path/to/atlassian-agent.jar $&#123;JAVA_OPTS&#125;&quot;</code>这样的命令放到<code>.bashrc</code>或<code>.bash_profile</code>这样的文件内。</li><li>你可以把：<code>export JAVA_OPTS=&quot;-javaagent:/path/to/atlassian-agent.jar $&#123;JAVA_OPTS&#125;&quot;</code>这样的命令放到服务安装所在<code>bin目录</code>下的<code>setenv.sh</code>或<code>setenv.bat（供windows使用）</code>中。</li><li>你还可以直接命令行执行：<code>JAVA_OPTS=&quot;-javaagent:/path/to/atlassian-agent.jar&quot; /path/to/start-confluence.sh</code>来启动你的服务。</li><li>或者你所知的其他修改环境变量的方法，但如果你机器上有无关的服务，则不建议修改全局<code>JAVA_OPTS</code>环境变量。</li><li>总之你想办法把<code>-javaagent</code>参数附带到要启动的java进程上。</li></ul></li></ol><pre><code class="hljs bash">// 设置环境变量(可以不做)$ vim .bash_profile<span class="hljs-built_in">export</span> JAVA_OPTS=<span class="hljs-string">&quot;-javaagent:/Users/xxxxusername/Documents/jira/jar/atlassian-agent.jar <span class="hljs-variable">$&#123;JAVA_OPTS&#125;</span>&quot;</span>$ <span class="hljs-built_in">source</span> .bash_profile$ java -jar atlassian-agent.jar -d -m lingchen1316@163.com -n lc-jira -p jira -o http://192.168.99.100 -s BXFC-5EKZ-STKW-1S3KYour license code(Don<span class="hljs-string">&#x27;t copy this line!!!): </span><span class="hljs-string"></span><span class="hljs-string">AAABqQ0ODAoPeJyNkluPmzAQhd/5FUh9NmtDcyGSpW2BSiiQVCXbVvvmOJPgihg0Nmmzv74QWHUvU</span><span class="hljs-string">...</span><span class="hljs-string">...</span><span class="hljs-string">O0evxRfUmxQmbG9DpRfgR3juzBWkvTsfwHwXim/MCwCFCQhoWdSEWZn9ZsLIgKyjjP7SU2QAhRvA</span><span class="hljs-string">1NiktqLvIZW8mzE/bvEGmik2A==X02kg</span></code></pre><p><img src="/2020/03/29/jira-init/3.png" alt="license-key"></p><p>以下步骤依次向下即可。</p><p>效果如下</p><p><img src="/2020/03/29/jira-init/4.png" alt="jira-init"></p><p>查看Application中的license expires</p><p><img src="/2020/03/29/jira-init/5.png" alt="license-expires"></p><p><u>ps: 内容摘取于网络，仅供学习与参考</u></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>mysql</tag>
      
      <tag>jira</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DevOps实践笔记</title>
    <link href="/2020/03/27/devops-practise-note/"/>
    <url>/2020/03/27/devops-practise-note/</url>
    
    <content type="html"><![CDATA[<h2 id="DevOps实践笔记"><a href="#DevOps实践笔记" class="headerlink" title="DevOps实践笔记"></a>DevOps实践笔记</h2><p>Devops能够做到的事：需要对产品的质量负责。Devops能够提供一个平台或机制，让我能够从中找到所需的资源。<br>在企业里，使用自动化和持续交付来提高代码部署频率、降低代码上线间隔。</p><p>DevOps = 开发（developers）+ 运维（operations）<br>DevOps旨在将不同的社区，比如开发和运维社区，联合起来变成一个更有效率的整体。</p><h3 id="DevOps和持续交付"><a href="#DevOps和持续交付" class="headerlink" title="DevOps和持续交付"></a>DevOps和持续交付</h3><p>敏捷宣言里的经典摘录：</p><p>个体和互动 高于 流程和工具<br>工作的软件 高于 详尽的文档<br>客户合作 高于 合同谈判<br>响应变化 高于 遵循计划<br>也就是说，尽管右项有其价值，我们更看重左项的价值。</p><p>DevOps的另一个核心目标是自动化和持续交付。简单来说，自动化一切可重复的乏味的工作，把更多时间留给人与人之间的交流，这才能产生真实的价值。<br>DevOps工程师致力于让公司的流程更快、更有效，并且更可靠。只要有可能，就取代那些容易出错的重复性人力劳动。</p><h3 id="洞察全局"><a href="#洞察全局" class="headerlink" title="洞察全局"></a>洞察全局</h3><p>持续交付流水线</p><p><img src="/2020/03/27/devops-practise-note/1.png" alt="持续交付流水线"></p><h4 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h4><p>版本控制系统一般来说是开发环境的中心。</p><h4 id="构建服务器"><a href="#构建服务器" class="headerlink" title="构建服务器"></a>构建服务器</h4><p>最常用的模式是让构建服务器紧盯着版本控制系统的提交。当一个提交发生时，构建服务器就从版本控制系统上更新自己本地的源代码。随即，构建代码并运行测试来验证代码提交的质量。这个过程被称为<strong>持续集成</strong>。<br>Jenkins能做到开箱即用，给你简单而健壮的体验。安装也相当容易。</p><h4 id="工件库"><a href="#工件库" class="headerlink" title="工件库"></a>工件库</h4><p>当构建服务器确认了代码质量并将其编译成可交付物时，将这些编译好的二进制工件存放在一个库里是非常有用的。<br>这些二进制代码库是通过HTTP协议操作的文件系统。<br>亚马逊S3是一个可以用来存储二进制工件的键值数据库。</p><h4 id="包管理库"><a href="#包管理库" class="headerlink" title="包管理库"></a>包管理库</h4><p>包管理系统最大的优势是能很容易地安装和升级，并且自动安装依赖。<br>如Red Hat系统上的yum。</p><h4 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h4><p>一般来说，测试环境应该尽可能像生产环境一样。所以，它们也应该能用相同方法在生产环境上安装和配置。</p><h4 id="预发布-生产"><a href="#预发布-生产" class="headerlink" title="预发布/生产"></a>预发布/生产</h4><p>你把最新的发布安装到预发布服务器上，检查一切是否都正常，然后将老的生产环境切换过来，这样预发布环境就变成了新的生产环境—<u><strong>蓝绿发布策略</strong></u>。</p><h4 id="发布管理"><a href="#发布管理" class="headerlink" title="发布管理"></a>发布管理</h4><p>发布过程主要是自动化的。</p><ul><li>需要相当高程度的自动化测试才能更有信心实践自动化部署，而这通常很难做到。</li><li>业务和技术开发的节奏不一定相同。</li></ul><p>在发布过程中人工介入是必要的。</p><h3 id="DevOps如何影响架构"><a href="#DevOps如何影响架构" class="headerlink" title="DevOps如何影响架构"></a>DevOps如何影响架构</h3><p>DevOps和持续交付着眼于软件架构的两个非功能需求：</p><ul><li>需要频繁交付小的变更</li><li>需要对质量有大的信心</li></ul><h4 id="架构经验法则"><a href="#架构经验法则" class="headerlink" title="架构经验法则"></a>架构经验法则</h4><ul><li>关注点分离（应该分开考虑系统不同的方面）</li><li>内聚原则（内聚指的是软件模块的各部分之间相互关联的程度）</li><li>耦合（耦合指的是两个模块间相互依赖的程度）</li></ul><p>康威定律—设计软件的组织结构，等价于软件的组织架构。<br>拥抱DevOps和持续交付的企业里，REST的实现更加流行的一个原因。</p><h3 id="一切皆代码"><a href="#一切皆代码" class="headerlink" title="一切皆代码"></a>一切皆代码</h3><p>一切皆代码，而你需要一个地方来存储。这个地方就是企业里的源代码管理系统。<br>提供集中式代码库：</p><ul><li>可以使用软件即服务的解决方案，如GitHub、Bitbucket或者GitLab。性价比高。</li><li>可以使用云提供商。如AWS。</li></ul><h4 id="源代码控制的必要性"><a href="#源代码控制的必要性" class="headerlink" title="源代码控制的必要性"></a>源代码控制的必要性</h4><p>对于DevOps而言，确实几乎一切都可以用代码的形式来表达。</p><ul><li>构建的应用程序</li><li>部署应用程序的基础设施</li><li>产品文档</li></ul><p>Git是这个类别里最流行的工具。<br>Git是一个分布式版本管理系统（DVCS）。</p><h4 id="角色与代码"><a href="#角色与代码" class="headerlink" title="角色与代码"></a>角色与代码</h4><p>开发者靠源代码管理来生活和呼吸。<br>运维人员也喜欢通过代码、脚本或者其他产品的方式管理描述基础设施。</p><h4 id="选择一个客户端"><a href="#选择一个客户端" class="headerlink" title="选择一个客户端"></a>选择一个客户端</h4><p>大部分的开发环境都能很好地支持使用Git。<br>许多开发者用的是集成在开发环境里的客户端，或者Git的命令行客户端。当执行运维任务时，更倾向于使用Git命令行客户端，因为在远程ssh的时候很方便。</p><p>无论如何，使用GitHub或GitLab是一个学习探索Git的捷径。</p><p>GitLab和GitHub的功能强点：</p><ul><li>web界面</li><li>内置wiki提供文档存放</li><li>问题跟踪器</li><li>提交可视化</li><li>分支可视化</li><li>拉请求工作流</li></ul><h4 id="Gerrit"><a href="#Gerrit" class="headerlink" title="Gerrit"></a>Gerrit</h4><p>Gerrit是基于Git的代码审查工具。<br>Gerrit可以让你创建规则来允许开发者审查和批准其他开发者对代码库的变更。<br>更简单的方法是使用Docker来尝试Gerrit。<br>Gerrit允许对敏感的代码库进行细粒度的操作。变更可以在授权人审查之后入库。这是Gerrit最主要的优势。</p><h4 id="拉请求模型"><a href="#拉请求模型" class="headerlink" title="拉请求模型"></a>拉请求模型</h4><p>由于GitHub而变得流行起来的拉请求模型。<br>除非是代码库所有者，推送是不被允许的。不过其他开发者被允许fork代码库，然后做变更，提交一个拉请求。代码库所有者可以审查这个请求并决定是否把变更合并到主代码库里。</p><h4 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h4><p>基于Docker-compose来安装GitLab</p><pre><code class="hljs bash">$ mkdir gitlab$ <span class="hljs-built_in">pwd</span>/root/gitlab$ wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml$ docker-compose up</code></pre><p>命令docker-compose将会读取.yml文件并用默认的演示配置启动所有需要的服务。<br>查看控制台窗口的启动日志，会发现三个单独的应用程序被启动：</p><p>gitlab、postgresql1、gitlab redis1和gitlab gitlab1</p><p>文件docker-compose.yml在/srv/docker/gitlab创建了数据卷。</p><p>GitLab增加的主要价值能消除DevOps工作流程的瓶颈。</p><ul><li>用户ssh密钥的管理</li><li>新版本库的创建</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>devops</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jenkins-Pipeline学习</title>
    <link href="/2020/03/27/jenkins-pipeline/"/>
    <url>/2020/03/27/jenkins-pipeline/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Jenkins-Pipeline学习"><a href="#Jenkins-Pipeline学习" class="headerlink" title="Jenkins-Pipeline学习"></a>Jenkins-Pipeline学习</h2><p>Jenkins Pipeline（或简称为 “Pipeline”）是一套插件，将持续交付的实现和实施集成到 Jenkins 中。<br>持续交付 Pipeline 自动化的表达了这样一种流程：<strong>将基于版本控制管理的软件持续的交付到您的用户和消费者手中。</strong></p><p>Jenkins Pipeline 提供了一套可扩展的工具，<strong>用于将“简单到复杂”的交付流程实现为“持续交付即代码”。</strong>Jenkins Pipeline 的定义通常被写入到一个文本文件（称为 <code>Jenkinsfile</code> ）中，该文件可以被放入项目的源代码控制库中。</p><h3 id="执行多个步骤（step）"><a href="#执行多个步骤（step）" class="headerlink" title="执行多个步骤（step）"></a>执行多个步骤（step）</h3><p>Pipelines 由多个步骤（step）组成，允许你构建、测试和部署应用。 Jenkins Pipeline 允许您使用一种简单的方式组合多个步骤， 以帮助您实现多种类型的自动化构建过程。</p><p>可以把“步骤（step）”看作一个执行单一动作的单一的命令。 当一个步骤运行成功时继续运行下一个步骤。 当任何一个步骤执行失败时，Pipeline 的执行结果也为失败。</p><p>当所有的步骤都执行完成并且为成功时，Pipeline 的执行结果为成功。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    stages &#123;        stage(&#x27;Build&#x27;) &#123;            steps &#123;                sh &#x27;echo &quot;Hello World&quot;&#x27;                sh &#x27;&#x27;&#x27;                    echo &quot;Multiline shell steps works too&quot;                    ls -lah                &#x27;&#x27;&#x27;            &#125;        &#125;    &#125;&#125;</code></pre><p><img src="/2020/03/27/jenkins-pipeline/1.png" alt="pipelines-script"></p><p>阶段视图</p><p><img src="/2020/03/27/jenkins-pipeline/2.png" alt="pipeline-stage"></p><h3 id="超时、重试和更多"><a href="#超时、重试和更多" class="headerlink" title="超时、重试和更多"></a>超时、重试和更多</h3><p>Jenkins Pipeline 提供了很多的步骤（step），这些步骤可以相互组合嵌套，方便地解决像重复执行步骤直到成功（重试）和如果一个步骤执行花费的时间太长则退出（超时）等问题。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    stages &#123;        stage(&#x27;Deploy&#x27;) &#123;            steps &#123;                retry(3) &#123;                    sh &#x27;./flakey-deploy.sh&#x27;                &#125;                timeout(time: 3, unit: &#x27;MINUTES&#x27;) &#123;                    sh &#x27;./health-check.sh&#x27;                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p>“Deploy”阶段（stage）重复执行 <code>flakey-deploy.sh</code> 脚本3次，然后等待 <code>health-check.sh</code> 脚本最长执行3分钟。 如果 <code>health-check.sh</code> 脚本在 3 分钟内没有完成，Pipeline 将会标记在“Deploy”阶段失败。<br><strong>内嵌类型</strong>的步骤，例如 <code>timeout</code> 和 <code>retry</code> 可以包含其他的步骤，包括 <code>timeout</code> 和 <code>retry</code> 。<br>我们也可以<strong>组合这些步骤</strong>。例如，如果我们想要重试部署任务 5 次，但是总共花费的时间不能超过 3 分钟。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    stages &#123;        stage(&#x27;Deploy&#x27;) &#123;            steps &#123;                timeout(time: 3, unit: &#x27;MINUTES&#x27;) &#123;                    retry(5) &#123;                        sh &#x27;./flakey-deploy.sh&#x27;                    &#125;                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><h3 id="完成时动作"><a href="#完成时动作" class="headerlink" title="完成时动作"></a>完成时动作</h3><p>当 Pipeline 运行完成时，你可能需要做一些清理工作或者基于 Pipeline 的运行结果执行不同的操作， 这些操作可以放在 <code>post</code> 部分。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    stages &#123;        stage(&#x27;Test&#x27;) &#123;            steps &#123;                sh &#x27;echo &quot;Fail!&quot;; exit 1&#x27;            &#125;        &#125;    &#125;    post &#123;        always &#123;            echo &#x27;This will always run&#x27;        &#125;        success &#123;            echo &#x27;This will run only if successful&#x27;        &#125;        failure &#123;            echo &#x27;This will run only if failed&#x27;        &#125;        unstable &#123;            echo &#x27;This will run only if the run was marked as unstable&#x27;        &#125;        changed &#123;            echo &#x27;This will run only if the state of the Pipeline has changed&#x27;            echo &#x27;For example, if the Pipeline was previously failing but is now successful&#x27;        &#125;    &#125;&#125;<span class="hljs-comment">// 构建结果</span>This will always run[Pipeline] echoThis will run only if failed[Pipeline] &#125;[Pipeline] <span class="hljs-comment">// stage</span>[Pipeline] &#125;[Pipeline] <span class="hljs-comment">// node</span>[Pipeline] End of PipelineERROR: script returned exit code 1Finished: FAILURE</code></pre><h3 id="定义执行环境"><a href="#定义执行环境" class="headerlink" title="定义执行环境"></a>定义执行环境</h3><p><code>agent</code> 指令告诉Jenkins在哪里以及如何执行Pipeline或者Pipeline子集。<br>正如您所预料的，<strong>所有的Pipeline都需要 <code>agent</code> 指令。</strong></p><p>在执行引擎中，<code>agent</code> 指令会引起以下操作的执行：</p><ul><li>所有在块block中的步骤steps会被Jenkins保存在一个执行队列中。 一旦一个执行器 <a href="https://jenkins.io/zh/doc/pipeline/tour/agents/#../../book/glossary/#executor">executor</a> 是可以利用的，这些步骤将会开始执行。</li><li>一个工作空间 workspace 将会被分配， 工作空间中会包含来自远程仓库的文件和一些用于Pipeline的工作文件</li></ul><p>在Pipeline中可以使用这几种 <a href="https://jenkins.io/doc/book/pipeline/syntax#agent">定义代理的方式</a> 在本导读中，我们仅使用Docker容器的代理方式。</p><p>在Pipeline中可以很容易的运行 <a href="https://docs.docker.com/">Docker</a> 镜像和容器。 Pipeline可以定义命令或者应用运行需要的环境和工具， 不需要在执行代理中手动去配置各种各样的系统工具和依赖。 这种方式可以让你使用 <a href="http://hub.docker.com/">Docker容器工具包</a> 中的任何工具。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent &#123;        docker &#123; image &#x27;node:7-alpine&#x27; &#125;    &#125;    stages &#123;        stage(&#x27;Test&#x27;) &#123;            steps &#123;                sh &#x27;node --version&#x27;            &#125;        &#125;    &#125;&#125;</code></pre><h3 id="使用环境变量"><a href="#使用环境变量" class="headerlink" title="使用环境变量"></a>使用环境变量</h3><p>环境变量可以像下面的示例设置为全局的，也可以是阶段（stage）级别的。 如你所想，阶段（stage）级别的环境变量只能在定义变量的阶段（stage）使用。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    environment &#123;        DISABLE_AUTH = &#x27;true&#x27;        DB_ENGINE    = &#x27;sqlite&#x27;    &#125;    stages &#123;        stage(&#x27;Build&#x27;) &#123;            steps &#123;                sh &#x27;printenv&#x27;            &#125;        &#125;    &#125;&#125;</code></pre><p>这种在 <code>Jenkinsfile</code> 中定义环境变量的方法对于指令性的脚本定义非常有用方便， 比如 <code>Makefile</code> 文件，可以在 Pipeline 中配置构建或者测试的环境，然后在 Jenkins 中运行。</p><p>环境变量的另一个常见用途是<strong>设置或者覆盖构建或测试脚本中的凭证</strong>。 因为把凭证信息直接写入 <code>Jenkinsfile</code> 很显然是一个坏主意， Jenkins Pipeline 允许用户快速安全地访问在 <code>Jenkinsfile</code> 中预定义的凭证信息，并且无需知道它们的值。</p><h3 id="记录测试和构建结果"><a href="#记录测试和构建结果" class="headerlink" title="记录测试和构建结果"></a>记录测试和构建结果</h3><p>虽然测试是良好的持续交付过程中的关键部分，但大多数人并不希望筛选数千行控制台输出来查找有关失败测试的信息。 为了简化操作，只要<strong>您的测试运行时可以输出测试结果文件，Jenkins 就可以记录和汇总这些测试结果</strong>。 Jenkins 通常与 <code>junit</code> 步骤捆绑在一起，但如果您的测试运行结果无法输出 JUnit 样式的 XML 报告， 那么还有其他插件可以处理任何广泛使用的测试报告格式。</p><p>为了收集我们的测试结果，我们将使用 <code>post</code> 部分。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    stages &#123;        stage(&#x27;Test&#x27;) &#123;            steps &#123;                sh &#x27;./gradlew check&#x27;            &#125;        &#125;    &#125;    post &#123;        always &#123;            junit &#x27;build/reports/**/*.xml&#x27;        &#125;    &#125;&#125;</code></pre><p>这将会获得测试结果，Jenkins 会持续跟踪并计算测试的趋势和结果。 如果存在失败的测试用例，Pipeline 会被标记为 “UNSTABLE”，在网页上用黄色表示， 这不同于使用红色表示的 “FAILED” 失败状态。<br>当出现测试失败时，通常可以从 Jenkins 中获取构建结果报告进行本地分析和测试。 Jenkins 内置支持存储构建结果报告，在 Pipeline 执行期间生成记录文件。</p><h3 id="清理和通知"><a href="#清理和通知" class="headerlink" title="清理和通知"></a>清理和通知</h3><p>因为 <code>post</code> 部分保证在 Pipeline 结束的时候运行， 所以我们可以添加通知或者其他的步骤去完成清理、通知或者其他的 Pipeline 结束任务。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    stages &#123;        stage(&#x27;No-op&#x27;) &#123;            steps &#123;                sh &#x27;ls&#x27;            &#125;        &#125;    &#125;    post &#123;        always &#123;            echo &#x27;One way or another, I have finished&#x27;            deleteDir() /* clean up our workspace */        &#125;        success &#123;            echo &#x27;I succeeeded!&#x27;        &#125;        unstable &#123;            echo &#x27;I am unstable :/&#x27;        &#125;        failure &#123;            echo &#x27;I failed :(&#x27;        &#125;        changed &#123;            echo &#x27;Things were different before...&#x27;        &#125;    &#125;&#125;</code></pre><p><img src="/2020/03/27/jenkins-pipeline/3.png" alt="pipeline-post"></p><p>有很多方法可以发送通知， 下面是一些示例展示了如何通过电子邮件、Hipchat room 或者 Slack channel 发送 Pipeline 的相关信息。</p><pre><code class="hljs json">post &#123;    failure &#123;        mail to: &#x27;team@example.com&#x27;,             subject: &quot;Failed Pipeline: $&#123;currentBuild.fullDisplayName&#125;&quot;,             body: &quot;Something is wrong with $&#123;env.BUILD_URL&#125;&quot;    &#125;&#125;</code></pre><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>大多数最基本的持续交付 Pipeline 至少会有三个阶段：构建、测试和部署，这些阶段被定义在 <code>Jenkinsfile</code> 中。 这一小节我们将主要关注部署阶段，但应该指出稳定的构建和测试阶段是任何部署活动的重要前提。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    stages &#123;        stage(&#x27;Build&#x27;) &#123;            steps &#123;                echo &#x27;Building&#x27;            &#125;        &#125;        stage(&#x27;Test&#x27;) &#123;            steps &#123;                echo &#x27;Testing&#x27;            &#125;        &#125;        stage(&#x27;Deploy&#x27;) &#123;            steps &#123;                echo &#x27;Deploying&#x27;            &#125;        &#125;    &#125;&#125;<span class="hljs-comment">// 运行结果</span>[Pipeline] &#123;[Pipeline] stage[Pipeline] &#123; (Build)[Pipeline] echoBuilding[Pipeline] &#125;[Pipeline] <span class="hljs-comment">// stage</span>[Pipeline] stage[Pipeline] &#123; (Test)[Pipeline] echoTesting[Pipeline] &#125;[Pipeline] <span class="hljs-comment">// stage</span>[Pipeline] stage[Pipeline] &#123; (Deploy)[Pipeline] echoDeploying[Pipeline] &#125;[Pipeline] <span class="hljs-comment">// stage</span>[Pipeline] &#125;[Pipeline] <span class="hljs-comment">// node</span>[Pipeline] End of PipelineFinished: SUCCESS</code></pre><h3 id="阶段即为部署环境"><a href="#阶段即为部署环境" class="headerlink" title="阶段即为部署环境"></a>阶段即为部署环境</h3><p>一个常见的模式是扩展阶段的数量以获取额外的部署环境信息， 如 “staging” 或者 “production”，如下例所示。</p><pre><code class="hljs json">stage(&#x27;Deploy - Staging&#x27;) &#123;    steps &#123;        sh &#x27;./deploy staging&#x27;        sh &#x27;./run-smoke-tests&#x27;    &#125;&#125;stage(&#x27;Deploy - Production&#x27;) &#123;    steps &#123;        sh &#x27;./deploy production&#x27;    &#125;&#125;</code></pre><h3 id="人工确认"><a href="#人工确认" class="headerlink" title="人工确认"></a>人工确认</h3><p>通常在阶段之间，特别是不同环境阶段之间，您可能需要人工确认是否可以继续运行。 例如，判断应用程序是否在一个足够好的状态可以进入到生产环境阶段。 这可以使用 <code>input</code> 步骤完成。 在下面的例子中，“Sanity check” 阶段会等待人工确认，并且在没有人工确认的情况下不会继续执行。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    stages &#123;        <span class="hljs-comment">/* &quot;Build&quot; and &quot;Test&quot; stages omitted */</span>        stage(&#x27;Deploy - Staging&#x27;) &#123;            steps &#123;                sh &#x27;./deploy staging&#x27;                sh &#x27;./run-smoke-tests&#x27;            &#125;        &#125;        stage(&#x27;Sanity check&#x27;) &#123;            steps &#123;                input &quot;Does the staging environment look ok?&quot;            &#125;        &#125;        stage(&#x27;Deploy - Production&#x27;) &#123;            steps &#123;                sh &#x27;./deploy production&#x27;            &#125;        &#125;    &#125;&#125;</code></pre><p>Jenkins与Docker整合</p><p>Jenkins主机上，需要安装Docker。</p><pre><code class="hljs bash">// 出错一Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?// 解决方案$ systemctl daemon-reload$ systemctl restart docker.service$ docker --versionDocker version 1.13.1, build cccb291/1.13.1</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>jenkins</tag>
      
      <tag>pipeline</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DevOps-学习之打包</title>
    <link href="/2020/03/27/devops-package/"/>
    <url>/2020/03/27/devops-package/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="DevOps-学习之打包部署"><a href="#DevOps-学习之打包部署" class="headerlink" title="DevOps-学习之打包部署"></a>DevOps-学习之打包部署</h2><p>Docker 的受欢迎程度急剧提升巧妙地映射了微服务的兴起—一种将软件分解为许多单独组件的软件工程方法。<br>Docker 的优势</p><ul><li><p>进程隔离<br>Docker 不仅允许完全进程隔离，还允许完全依赖性隔离，在同一个操作系统上并排运行多个容器是完全可能和常见的，每个容器都可有自己的冲突的依赖库和包。</p></li><li><p>运行管理</p><p>通过 Docker，我们获得了一个统一的管理界面，允许我们启动，监控，集中日志，停止和重启许多不同类型的应用程序。这是一个巨大的胜利，并大大降低了运行生产系统的运维开销。</p></li></ul><p>Lambda 时代</p><p>开发人员，我只想编写代码并让其他人管运行的事，Docker，Kubernetes 和其他繁琐的东西都不是简单的东西——所以我真的需要学么？这就要具体问题具体分析了。</p><p>对于那些只想让其他人帮忙运行其代码的人来说，AWS Lambda（以及其他类似的解决方案）就是答案：<br>AWS Lambda 允许你在不配置或管理服务器的情况下运行代码。只需为你消耗的计算时间付费——当代码未运行时不收取任何费用。<br>如果你听说过“serverless”，这就是它！不再需要运行的服务器或要管理的容器，只需编写代码，将其打包成 zip 文件，上传到亚马逊并让他们处理那些烦人的问题。<br>此外，由于 Lambda 是瞬时的，没有什么可以破解的，所以 Lambda 在设计上也是非常安全。</p><p>这样看来像 Lambda 这类的 serverless 功能真的挺不错的，但是即使这样，也是有缺点的。<br>第一，就现阶段而言，<strong>Lambda 暂时不支持长时间的进程</strong>。<br>其次，<strong>Lambda 是功能即服务（Functions-as-a-Service）</strong>，这意味着你的应用必须完全分解为微服务的形式，并与其他复杂的 PaaS 服务（如 AWS Step Functions）协调。并非每个企业都处于或者能转变成这种水平的微服务架构。<br>第三，<strong>对 Lambda 进行故障排除是很困难的</strong>。作为云原生的应用，所有的 bug 修复都需要在亚马逊生态系统中修复，这通常挺烦人的且不直观。</p><h3 id="部署代码"><a href="#部署代码" class="headerlink" title="部署代码"></a>部署代码</h3><p>没有说“如何轻松地部署代码”，因为代码从开发环境到正确部署仍然是一个充满了错误和失败的痛苦过程。</p><p>原因很多，但在我看来，<strong>这主要归结为差异</strong>。具体而言，<strong>创建代码的环境与实际代码运行的环境之间存在差异。</strong><br>减少这些差异意味着你不仅可以在整体代码部署中实现最大的改进，还可以在代码部署后的运行时达到一定的优化。那么，我们如何减少或消除生产和非生产环境之间的差异呢？</p><p>如果你使用<strong>基础设施即为代码</strong>的方式而不是手动配置，那么差异这事儿你已经搞定得七七八八了。如果不是，请不要绝望 —— 你并不孤单。花一个下午，找出你所碰到的所有差异（培训、文化、人员、流程等），并逐一消除它们。</p><p>最重要的是，如果你仍在手动配置，那你可能很难去管理现代技术栈。因此你需要做的第一件事是确保涉及产品的所有内容都是由部署服务器构建的版本化软件包。假设上述事情你已经完成，我会告诉你<strong>部署代码的最佳方法是不部署代码。</strong></p><p>你的生产环境服务器（代码运行的地方）与你的开发环境服务器（编写代码的地方）不同。这就难怪在部署后会立即出现大量问题。<br>因此，你需要尽一切可能确保构建产物（而不是一小段代码）一直处在运行环境当中。换句话说，<strong>将代码一次性部署到开发环境，克隆运行代码的整个机器环境，然后将其复制到需要的任何位置。</strong>这被称为“不可变部署”，是一个非常强大的模式，可以避免你数小时部署后的头痛。当然，如果你运行容器，同样的想法也是适用的：在任何地方部署相同的容器即可。<br>“但是我的生产环境和开发环境就是不同的！”你可能会说。数据库用户名密码，连接字符串，S3 存储桶位置等等，这些都是不同的。解决这个问题的方法是<u>使用 12 因子应用配置原则</u>。<strong>所有配置都需要外部化并作为环境变量传递到服务器。</strong></p><p>如果我需要日志来解决问题呢？<strong>所以日志也应该外部化</strong>。理想情况下可以通过ElasticSearch / Logstash / Kibana（ELK）技术栈或商业软件（如 SumoLogic 或Datadog）将日志转储到其它地方。<br><strong>不要“修复”你的生产环境机器，而是修复你的开发环境并重新部署。</strong></p><h3 id="代码部署机制"><a href="#代码部署机制" class="headerlink" title="代码部署机制"></a>代码部署机制</h3><p>这就是 Jenkins 的用武之地，Jenkins 是最受欢迎的开源部署自动化服务器之一。</p><p>了解 Jenkins，特别是 Jenkinsfile 的结构，对就业前景会是一个巨大并且不容忽视的好处。当你学习 Jenkins 时，请确保你遵循较新的 Pipeline BlueOcean 技术路径，而不是更旧的“Jenkins jobs”。<br>参考阅读：<br><a href="https://jenkins.io/doc/book/pipeline/jenkinsfile/">Jenkinsfile</a><br><a href="https://jenkins.io/doc/book/blueocean/">Pipeline BlueOcean</a></p><h3 id="一切都是代码"><a href="#一切都是代码" class="headerlink" title="一切都是代码"></a>一切都是代码</h3><p>应用程序如何被部署、监控、配置等等——说到底最终都化作为存储在代码仓库里被正确版本化的代码片段。<br>我们的目标是<strong>为核心开发人员（编写功能代码的软件工程师）创建一个真正无摩擦的环境。</strong><br>例如，我应该能够编写我自己的微服务、添加我认为必要的测试、添加监控即代码的配置、在一些“env.yaml” 文件中指定我的参数、将它们全部存储在一个代码仓库中；通过 CI/CD 流水线自动触发构建、测试、部署（金丝雀发布或蓝绿发布），并在完成后给我发送电子邮件。事实上，这是 DevOps 工程师核心使命的本质。</p><h3 id="Jenkins-的替代品"><a href="#Jenkins-的替代品" class="headerlink" title="Jenkins 的替代品"></a>Jenkins 的替代品</h3><p>就像我之前说过的那样，Jenkins 已经被广大开发者使用很长一段时间了。现在还有其它的工具，在我看来更好，即使没有 Jenkins 那么为人所知。</p><ul><li>一个是 AWS 自己的 CodeDeploy 服务。它有局限性，但 CodeDeploy 背后的开发人员在过去一年做了很大的改进，如果你在用 AWS，建议你试一试。</li><li>另一个是 GitLab CI。如果你的研发组织运行在 GitLab 上，你可以考虑使用，因为它与 GitLab 的其它部分良好地集成在一起。</li><li>去年十月 GitHub 宣布了 Actions（目前仍处在公测中），用于 GitHub 用户的自动化工作流场景。</li></ul><p>我认为这里的工具并不是最重要的。重要的是要记住包括<u>代码部署流水线在内的所有内容都是版本化的软件部件，它首先得来自于开发环境，而不是生产环境。</u></p><p>如果你从 Jenkins 开始学习持续集成，请尝试将其设置为容器模式。<br>这并不是一件非常困难的事情，反而会是一个很不错的学习机会，你可以找到弹性的、容器化的 Jenkins 机器节点来部署容器化的 Jenkins。</p><p><u>ps: 该文摘取于知乎。仅供学习与参考！</u></p>]]></content>
    
    
    
    <tags>
      
      <tag>devops</tag>
      
      <tag>package</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git命令学习</title>
    <link href="/2020/03/26/git-learning/"/>
    <url>/2020/03/26/git-learning/</url>
    
    <content type="html"><![CDATA[<h2 id="Git命令学习"><a href="#Git命令学习" class="headerlink" title="Git命令学习"></a>Git命令学习</h2><h3 id="Git-Commit"><a href="#Git-Commit" class="headerlink" title="Git Commit"></a>Git Commit</h3><p>Git 希望提交记录尽可能地轻量，因此在你每次进行提交时，它并不会盲目地复制整个目录。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并把所有的差异打包到一起作为一个提交记录。<br>Git 还保存了提交的历史记录。这也是为什么大多数提交记录的上面都有父节点的原因 —— 我们会在图示中用箭头来表示这种关系。对于项目组的成员来说，维护提交历史对大家都有好处。<br>你可以把提交记录看作是项目的快照。提交记录非常轻量，可以快速地在这些提交记录之间切换！</p><p><code>git commit</code></p><h3 id="Git-Branch"><a href="#Git-Branch" class="headerlink" title="Git Branch"></a>Git Branch</h3><p>Git 的分支也非常轻量。它们只是简单地指向某个提交纪录。<br><u>早建分支！多用分支！</u><br>这是因为即使创建再多分的支也不会造成储存或内存上的开销，并且按逻辑分解工作到不同的分支要比维护那些特别臃肿的分支简单多了。<br>在将分支和提交记录结合起来后，我们会看到两者如何协作。现在只要记住使用分支其实就相当于在说：“我想基于这个提交以及它所有的父提交进行新的工作。”</p><p>创建一个到名为 <code>newImage</code> 的分支</p><pre><code class="hljs bash">$ git branch newImage$ git commit</code></pre><p>切换到新的分支上，这样修改就可以保存到新的分支里了</p><pre><code class="hljs bash">$ git checkout newImage$ git commit</code></pre><p>如果你想创建一个新的分支同时切换到新创建的分支的话，可以通过 <code>git checkout -b &lt;your-branch-name&gt;</code> 来实现。</p><h3 id="分支与合并"><a href="#分支与合并" class="headerlink" title="分支与合并"></a>分支与合并</h3><p>如何将两个分支合并到一起。就是说我们新建一个分支，在其上开发某个新功能，开发完成后再合并回主线。<br>第一种方法 —— <code>git merge</code>。在 Git 中合并两个分支时会产生一个特殊的提交记录，它有两个父节点。翻译成自然语言相当于：“我要把这两个父节点本身及它们所有的祖先都包含进来。”</p><p>操作：</p><ul><li>创建新分支 <code>bugFix</code></li><li>用 <code>git checkout bugFix</code> 命令切换到该分支</li><li>提交一次</li><li>用 <code>git checkout master</code> 切换回 <code>master</code></li><li>再提交一次</li><li>用 <code>git merge</code> 把 <code>bugFix</code> 合并到 <code>master</code></li></ul><pre><code class="hljs bash">$ git branch bugFix$ git checkout bugFix$ git commit$ git checkout master$ git commit$ git merge bugFix</code></pre><h3 id="Git-Rebase"><a href="#Git-Rebase" class="headerlink" title="Git Rebase"></a>Git Rebase</h3><p>第二种合并分支的方法是 <code>git rebase</code>。Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。<br>Rebase 的优势就是可以创造更线性的提交历史，这听上去有些难以理解。如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。</p><p>操作：</p><ul><li>新建并切换到 <code>bugFix</code> 分支</li><li>提交一次</li><li>切换回 master 分支再提交一次</li><li>再次切换到 bugFix 分支，rebase 到 master 上</li></ul><pre><code class="hljs bash">$ git checkout -b bugFix$ git commit$ git checkout master$ git commit$ git checkout bugFix$ git rebase master</code></pre><h3 id="在提交树上移动"><a href="#在提交树上移动" class="headerlink" title="在提交树上移动"></a>在提交树上移动</h3><p>首先看一下 “HEAD”。 <strong>HEAD 是一个对当前检出记录的符号引用</strong> —— 也就是指向你正在其基础上进行工作的提交记录。HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。<br>HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。</p><p>分离的 HEAD 就是让其指向了某个具体的提交记录而不是分支名。</p><p>从 <code>bugFix</code> 分支中分离出 HEAD 并让其指向一个提交记录。通过哈希值指定提交记录。每个提交记录的哈希值显示在代表提交记录的圆圈中。</p><pre><code class="hljs bash">$ git checkout C4// C4提交树上的节点</code></pre><p><img src="/2020/03/26/git-learning/1.png" alt="git-head"></p><h3 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h3><p>通过指定提交记录哈希值的方式在 Git 中移动不太方便。在实际应用时，并没有像本程序中这么漂亮的可视化提交树供你参考，所以你就不得不用 <code>git log</code> 来查查看提交记录的哈希值。<br>并且哈希值在真实的 Git 世界中也会更长（基于 SHA-1，共 40 位）。例如前一关的介绍中的提交记录的哈希值可能是 <code>fed2da64c0efc5293610bdd892f82a58e8cbc5d8</code>。<br>比较令人欣慰的是，Git 对哈希的处理很智能。<strong>你只需要提供能够唯一标识提交记录的前几个字符即可</strong>。因此我可以仅输入<code>fed2</code> 而不是上面的一长串字符。</p><p>相对引用非常给力，这里我介绍两个简单的用法：</p><ul><li>使用 <code>^</code> 向上移动 1 个提交记录</li><li>使用 <code>~</code> 向上移动多个提交记录，如 <code>~3</code></li></ul><p>操作符 (^)，把这个符号加在引用名称的后面，表示让 Git 寻找指定提交记录的父提交。<br>所以 <code>master^</code> 相当于“<code>master</code> 的父节点”。<code>master^^</code> 是 <code>master</code> 的第二个父节点。</p><pre><code class="hljs bash">$ git checkout bugFix^</code></pre><p><img src="/2020/03/26/git-learning/2.png" alt="checkout-^"></p><h3 id="“-”操作符"><a href="#“-”操作符" class="headerlink" title="“~”操作符"></a>“~”操作符</h3><p>想在提交树中向上移动很多步的话，又引入了操作符 <code>~</code>。该操作符后面可以跟一个数字（可选，不跟数字时与 <code>^</code> 相同，向上移动一次），指定向上移动多少次。</p><p><strong>使用相对引用最多的就是移动分支</strong>。可以直接使用 <code>-f</code> 选项让分支指向另一个提交。例如:</p><pre><code class="hljs crmsh">git branch -f <span class="hljs-keyword">master</span> <span class="hljs-title">HEAD</span>~<span class="hljs-number">3</span></code></pre><p>上面的命令会将 master 分支强制指向 HEAD 的第 3 级父提交。</p><p>操作源显示：</p><p><img src="/2020/03/26/git-learning/3.png" alt="git-branch"></p><p>显示目标：</p><p><img src="/2020/03/26/git-learning/4.png" alt="git-branch"></p><pre><code class="hljs bash">$ git branch -f master C6$ git branch -f bugFix C0$ git checkout master~3</code></pre><h3 id="撤销变更"><a href="#撤销变更" class="headerlink" title="撤销变更"></a>撤销变更</h3><p>在 Git 里撤销变更的方法很多。和提交一样，撤销变更由底层部分（暂存区的独立文件或者片段）和上层部分（变更到底是通过哪种方式被撤销的）组成。我们这个应用主要关注的是后者。</p><p>主要有两种方法用来撤销变更 —— 一是 <code>git reset</code>，还有就是 <code>git revert</code>。接下来咱们逐个进行讲解。</p><p><code>git reset</code> 通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。<code>git reset</code> 向上移动分支，原来指向的提交记录就跟从来没有提交过一样。</p><p><code>git reset HEAD~1</code></p><p>虽然在你的本地分支中使用 <code>git reset</code> 很方便，但是这种“改写历史”的方法对大家一起<strong>使用的远程分支是无效的</strong>哦！</p><p><code>git revert HEAD</code>（推荐方式）<br>在我们要撤销的提交记录后面居然多了一个新提交。revert 之后就可以把你的更改推送到远程仓库与别人分享啦。</p><pre><code class="hljs bash">$ git reset HEAD~1$ git checkout pushed$ git revert HEAD</code></pre><h3 id="整理提交记录"><a href="#整理提交记录" class="headerlink" title="整理提交记录"></a>整理提交记录</h3><p>到现在我们已经学习了 Git 的基础知识 —— 提交、分支以及在提交树上移动。 这些概念涵盖了 Git 90% 的功能，同样也足够满足开发者的日常需求。</p><p>然而, <u>剩余的 10% 在处理复杂的工作流时(或者当你陷入困惑时）可能就显得尤为重要了</u>。接下来要讨论的这个话题是“整理提交记录” —— 开发人员有时会说“我想要把这个提交放到这里, 那个提交放到刚才那个提交的后面”, 而接下来就讲的就是它的实现方式，非常清晰、灵活，还很生动。</p><p>本系列的第一个命令是 <code>git cherry-pick</code>, 命令形式为:</p><p><code>git cherry-pick &lt;提交号&gt;...</code></p><p>如果你想将一些提交复制到当前所在的位置（<code>HEAD</code>）下面的话， Cherry-pick 是最直接的方式了。</p><p>如：我们想将 <code>side</code> 分支上的工作C2，C4复制到 <code>master</code> 分支。</p><p><code>git cherry-pick C2 C4</code></p><h3 id="交互式的-rebase"><a href="#交互式的-rebase" class="headerlink" title="交互式的 rebase"></a>交互式的 rebase</h3><p>当你知道你所需要的提交记录（<strong>并且</strong>还知道这些提交记录的哈希值）时, 用 cherry-pick 再好不过了 —— 没有比这更简单的方式了。<br>但是如果你不清楚你想要的提交记录的哈希值呢? 幸好 Git 帮你想到了这一点, 我们可以利用交互式的 rebase —— 如果你想从一系列的提交记录中找到想要的记录, 这就是最好的方法了。</p><p><u>交互式 rebase 指的是使用带参数 <code>--interactive</code> 的 rebase 命令, 简写为 <code>-i</code></u><br>如果你在命令后增加了这个选项, Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。<br>在实际使用时，所谓的 UI 窗口一般会在文本编辑器 —— 如 Vim —— 中打开一个文件。<br>当 rebase UI界面打开时, 你能做3件事: </p><ul><li>调整提交记录的顺序（通过鼠标拖放来完成）</li><li>删除你不想要的提交（通过切换 <code>pick</code> 的状态来完成，关闭就意味着你不想要这个提交记录）</li><li>合并提交。简而言之，它允许你把多个提交记录合并成一个。</li></ul><p><code>git rebase -i HEAD~4</code></p><h3 id="本地栈式提交"><a href="#本地栈式提交" class="headerlink" title="本地栈式提交"></a>本地栈式提交</h3><p>来看一个在开发中经常会遇到的情况：我正在解决某个特别棘手的 Bug，为了便于调试而在代码中添加了一些调试命令并向控制台打印了一些信息。<br>这些调试和打印语句都在它们各自的提交记录里。最后我终于找到了造成这个 Bug 的根本原因，解决掉以后觉得沾沾自喜！</p><p>最后就差把 <code>bugFix</code> 分支里的工作合并回 <code>master</code> 分支了。你可以选择通过 fast-forward 快速合并到 <code>master</code> 分支上，但这样的话 <code>master</code> 分支就会包含我这些调试语句了。你肯定不想这样，应该还有更好的方式。</p><p>实际我们只要让 Git 复制解决问题的那一个提交记录就可以了。跟之前我们在“整理提交记录”中学到的一样，我们可以使用来达到目的。</p><ul><li><code>git rebase -i</code></li><li><code>git cherry-pick</code></li></ul><pre><code class="hljs bash">$ git checkout master$ git cherry-pick C4// 或者$ git rebase -i HEAD~3$ git branch -f master C4<span class="hljs-string">&#x27;</span></code></pre><h3 id="提交的技巧-1"><a href="#提交的技巧-1" class="headerlink" title="提交的技巧 #1"></a>提交的技巧 #1</h3><p>这种情况也是很常见的：你之前在 <code>newImage</code> 分支上进行了一次提交，然后又基于它创建了 <code>caption</code> 分支，然后又提交了一次。<br>此时你想对的某个以前的提交记录进行一些小小的调整。比如设计师想修改一下 <code>newImage</code> 中图片的分辨率，尽管那个提交记录并不是最新的了。</p><p>我们可以通过下面的方法来克服困难：</p><ul><li>先用 <code>git rebase -i</code> 将提交重新排序，然后把我们想要修改的提交记录挪到最前</li><li>然后用 <code>commit --amend</code> 来进行一些小修改</li><li>接着再用 <code>git rebase -i</code> 来将他们调回原来的顺序</li><li>最后我们把 master 移到修改的最前端（用你自己喜欢的方法），就大功告成啦！</li></ul><pre><code class="hljs bash">$ git rebase -i HEAD~2$ git commit --amend$ git rebase -i HEAD~2$ git branch -f master C3<span class="hljs-string">&#x27;&#x27;</span></code></pre><h3 id="提交的技巧-2"><a href="#提交的技巧-2" class="headerlink" title="提交的技巧 #2"></a>提交的技巧 #2</h3><p>正如你在上一关所见到的，我们可以使用 <code>rebase -i</code> 对提交记录进行重新排序。只要把我们想要的提交记录挪到最前端，我们就可以很轻松的用 <code>--amend</code> 修改它，然后把它们重新排成我们想要的顺序。<br>但这样做就唯一的问题就是要进行两次排序，而这有可能造成由 rebase 而导致的冲突。下面还是看看 <code>git cherry-pick</code>是怎么做的吧。</p><p>要在心里<strong>牢记 cherry-pick 可以将提交树上任何地方的提交记录取过来追加到 HEAD 上</strong>（只要不是 HEAD 上游的提交就没问题）。</p><pre><code class="hljs bash">$ git checkout master$ git cherry-pick C2$ git commit --amend$ git cherry-pick C3</code></pre><h3 id="Git-Tags"><a href="#Git-Tags" class="headerlink" title="Git Tags"></a>Git Tags</h3><p>相信通过前面课程的学习你已经发现了：分支很容易被人为移动，并且当有新的提交时，它也会移动。分支很容易被改变，大部分分支还只是临时的，并且还一直在变。<br>你可能会问了：有没有什么可以<em>永远</em>指向某个提交记录的标识呢，比如软件发布新的大版本，或者是修正一些重要的 Bug 或是增加了某些新特性，有没有比分支更好的可以永远指向这些提交的方法呢？</p><p>Git 的 tag 就是干这个用的啊，它们可以（在某种程度上 —— 因为标签可以被删除后重新在另外一个位置创建同名的标签）永久地将某个特定的提交命名为里程碑，然后就可以像分支一样引用了。<br>更难得的是，它们并不会随着新的提交而移动。你也不能检出到某个标签上面进行修改提交，它就像是提交树上的一个锚点，标识了某个特定的位置。</p><p>咱们先建立一个标签，指向提交记录 <code>C1</code>，表示这是我们 1.0 版本。</p><p><code>git tag v1 C1</code></p><pre><code class="hljs bash">$ git tag v0 C1$ git tag v1 C2$ git checkout C2</code></pre><h3 id="Git-Describe"><a href="#Git-Describe" class="headerlink" title="Git Describe"></a>Git Describe</h3><p>由于标签在代码库中起着“锚点”的作用，Git 还为此专门设计了一个命令用来<strong>描述</strong>离你最近的锚点（也就是标签），它就是 <code>git describe</code>！<br>Git Describe 能帮你在提交历史中移动了多次以后找到方向；<br>当你用 <code>git bisect</code>（一个查找产生 Bug 的提交记录的指令）找到某个提交记录时，或者是当你坐在你那刚刚度假回来的同事的电脑前时， 可能会用到这个命令。</p><p><code>git describe</code> 的语法是：</p><pre><code class="hljs bash">$ git describe &lt;ref&gt;</code></pre><p>`<ref>可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（HEAD）。</ref></p><p>它输出的结果是这样的：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tag</span>&gt;</span>_<span class="hljs-tag">&lt;<span class="hljs-name">numCommits</span>&gt;</span>_g<span class="hljs-tag">&lt;<span class="hljs-name">hash</span>&gt;</span></code></pre><p><code>tag</code> 表示的是离 <code>ref</code> 最近的标签， <code>numCommits</code> 是表示这个 <code>ref</code> 与 <code>tag</code> 相差有多少个提交记录， <code>hash</code> 表示的是你所给定的 <code>ref</code> 所表示的提交记录哈希值的前几位。</p><p>当 <code>ref</code> 提交记录上有某个标签时，则只输出标签名称</p><h3 id="多分支-rebase"><a href="#多分支-rebase" class="headerlink" title="多分支 rebase"></a>多分支 rebase</h3><p>我们准备了很多分支！咱们把这些分支 rebase 到 master 上吧。<br>他们希望得到有序的提交历史，也就是我们最终的结果应该是 <code>C6&#39;</code> 在 <code>C7&#39;</code> 上面， <code>C5&#39;</code> 在 <code>C6&#39;</code> 上面，依此类推。<br>即使你搞砸了也没关系，用 <code>reset</code> 命令就可以重新开始了。记得看看我们提供的答案，看你能否使用更少的命令来完成任务！</p><pre><code class="hljs bash">$ git rebase side another$ git rebase bugFix another$ git rebase master another$ git branch -f master another</code></pre><h3 id="选择父提交记录"><a href="#选择父提交记录" class="headerlink" title="选择父提交记录"></a>选择父提交记录</h3><p>操作符 <code>^</code> 与 <code>~</code> 符一样，后面也可以跟一个数字。</p><p>但是该操作符后面的数字与 <code>~</code> 后面的不同，并不是用来指定向上返回几代，而是指定合并提交记录的某个父提交。还记得前面提到过的一个合并提交有两个父提交吧，所以遇到这样的节点时该选择哪条路径就不是很清晰了。</p><p><strong>Git 默认选择合并提交的“第一个”父提交，在操作符 <code>^</code> 后跟一个数字可以改变这一默认行为。</strong></p><p><code>git checkout master^</code></p><p><code>git checkout master^2</code>（回到了另外一个父提交上）</p><pre><code class="hljs bash">$ git checkout HEAD~$ git checkout HEAD^2$ git checkout HEAD~2// 等价于$ git checkout HEAD~^2~2// 这些操作符还支持链式操作$ git branch bugWork HEAD~^2~</code></pre><h3 id="纠缠不清的分支"><a href="#纠缠不清的分支" class="headerlink" title="纠缠不清的分支"></a>纠缠不清的分支</h3><p>现在我们的 <code>master</code> 分支是比 <code>one</code>、<code>two</code> 和 <code>three</code> 要多几个提交。出于某种原因，我们需要把 <code>master</code> 分支上最近的几次提交做不同的调整后，分别添加到各个的分支上。</p><p><code>one</code> 需要重新排序并删除 <code>C5</code>，<code>two</code> 仅需要重排排序，而 <code>three</code> 只需要提交一次。<br>慢慢来，你会找到答案的 —— 记得通关之后用 <code>show solution</code> 看看我们的答案哦。</p><pre><code class="hljs bash">$ git checkout one$ git cherry-pick C4 C3 C2$ git checkout two$ git cherry-pick C5 C4 C3 C2$ git branch -f three C2</code></pre><p><img src="/2020/03/26/git-learning/5.png" alt="git-branch"></p><h3 id="错误一"><a href="#错误一" class="headerlink" title="错误一"></a>错误一</h3><p>代码提交时, 出现错误:</p><pre><code class="hljs bash">fatal: unable to access <span class="hljs-string">&#x27;https://github.com/xxxx/xxxx.git/&#x27;</span>: error:02FFF036:system library:func(4095):Connection reset by peer</code></pre><p>执行:</p><pre><code class="hljs bash">git config remote.origin.url git@github.com:github用户名/仓库名.git</code></pre><p>再次提交即可.</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>command</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DevOps学习路线导向</title>
    <link href="/2020/03/26/devops-start/"/>
    <url>/2020/03/26/devops-start/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="DevOps学习路线导向"><a href="#DevOps学习路线导向" class="headerlink" title="DevOps学习路线导向"></a>DevOps学习路线导向</h2><h3 id="什么是-DevOps"><a href="#什么是-DevOps" class="headerlink" title="什么是 DevOps"></a>什么是 DevOps</h3><p><u>DevOps 是一种研发团队同甘共苦、患难与共交付软件的方式。</u><br>DevOps 尝试将开发和运维融进一个研发小团队里，由这个小团队共同承担开发、部署、努力创造软件收入的痛苦、责任（相反也可能是奖励）。<br>DevOps 工程师了解软件开发生命周期，并通过软件工程工具和流程解决传统运维挑战。<br>DevOps 最终意味着建立一个数字流水线：从开发者的笔记本中获取代码直至产生收益的全过程。</p><p><strong>世上没有初级的 DevOps 工程师。</strong><br>这意味着需要多年的经验，结合对工具的扎实理解，才能最终成为真正有效的高级 DevOps 从业者。遗憾的是，没有捷径可行。<br>最重要的是，不要忘记我们追求的目标—建立一个全自动的数字化流水线，将创意转化为创收。</p><h3 id="DevOps-学习路线图"><a href="#DevOps-学习路线图" class="headerlink" title="DevOps 学习路线图"></a>DevOps 学习路线图</h3><p>广度优先逐层遍历</p><p>广度优先、逐层遍历。先从基础开始，学习蓝色标记的技术（Linux | Python | 腾讯云/阿里云），然后如果时间允许或者就业市场有相应需求，追踪紫色的技术（Golang | AWS/谷歌云）。<br><img src="/2020/03/26/devops-start/1.png" alt="devops-learning-steps"></p><p>一旦你有一个合理的知识基础，就拥有了进入现实世界的技能组合。下面总共有 6 个蓝色列，建议每月学习一列。<br><img src="/2020/03/26/devops-start/2.png" alt="devops-custom"></p><p>本路线图的目标是快速获取新的技能和工具。<br>将这些工具结合在一起，端到端的流程自动化。你肯定不希望学习一堆工具后就停下来。工具变化很快，概念变化得相对缓慢，因此你要做的是使用工具作为进阶概念的学习辅助。</p><h3 id="DevOps-必备基础知识"><a href="#DevOps-必备基础知识" class="headerlink" title="DevOps 必备基础知识"></a>DevOps 必备基础知识</h3><p><u>主导的支柱：操作系统，编程语言，公有云。</u></p><ul><li>Linux<br>最好的方法是在家里安装 Linux（ Fedora 或 Ubuntu）并尽可能多地使用它。你会破坏操作系统上的东西，会被问题困住，然后你不得不解决所有问题，在这个过程中，你将学习到 Linux 相关的知识与技能。</li><li>Python<br>Python 是如今占主导地位的后端语言，易于上手，被广泛使用。Python 在 AI 以及机器学习领域使用非常普遍，所以如果你想要转换到另一个热门领域，那么你也会更加得心应手。</li><li>公有云<br>如果没有充分了解公有云的运作方式，就不可能成为一名经验丰富的 DevOps 专业人士。国内外云计算领域的主导者们提供了非常丰富的工具集。</li></ul><p>建议每天留出 20-30 分钟来学习 Python，Linux 和公有云。<br>图二是你必须学习的补充内容。总的来说，我估计每天要花费一个小时，<br>每周五次就足以让你在 6 个月或更短的时间内充分了解 DevOps 相关的内容。</p><h3 id="配置（Configure）"><a href="#配置（Configure）" class="headerlink" title="配置（Configure）"></a>配置（Configure）</h3><p>配置现状<br>云服务器这种高级服务，所有的基础环境设置都可以通过点击完成，当然有时候可能需要很多次点击。<br>但是，我们发现通过点击来实现配置环境也不是一个好主意，因为同样的问题仍然存在：</p><ul><li>还是到处是坑（human error 无法避免）</li><li>没法控制版本（点击没办法存储在 git 里）</li><li>重复性高（更多的机器 = 更多次的点击）</li><li>同时还没法测试（完全黑箱，不知道点击后会不会把所有东西弄乱）</li></ul><p>想象一下，当你需要给你的 dev 环境、QA 环境、Staging 环境和各个地区不同的生产环境做配置时所需的工作量，而且这项工作很快就会变得非常烦人和冗长。</p><p>新的解决方案就是 “<strong>基础设施即代码（Infrastructure as Code）</strong>“ 这也是本文关于 DevOps 中配置环节的重点。<br>基础设施即代码（Infrastructure as Code）的最佳实践即所有归为计算资源编排工具类的工作都必须<u><strong>使用代码来完成</strong></u>。这里的计算资源指的是为了让代码跑起来所需要的一切，比如：服务器、存储、网络、数据库等等。</p><p>这意味着我们部署基础设施的方式从各种点击变为：</p><ul><li>在 Terraform 中编写所需的基础架构状态</li><li>将其存储在我们的源代码版本控制中</li><li>通过正式的 Pull Request 流程征求反馈</li><li>测试一下配置</li><li>通过执行代码来配置所需的资源</li></ul><p><u>为什么选用 Terraform 而不是其他的呢？</u></p><ul><li>Terraform 现在很火，这代表着会有很多相关的工作机会</li><li>相对于其他的来说，它比较容易学习</li><li>它有跨平台支持</li></ul><p>事实上，Terraform + AWS 已经成为最火的技术需求之一了。</p><h3 id="不可变基础设施（Immutable-Infrastructure）"><a href="#不可变基础设施（Immutable-Infrastructure）" class="headerlink" title="不可变基础设施（Immutable Infrastructure）"></a>不可变基础设施（Immutable Infrastructure）</h3><p>不可变部署是指永不改变已部署的基础架构的做法。<br>换句话说，你的部署单元是 VM 或 Docker 容器，而不是一段代码。因此，你不会将代码部署到一组静态虚拟机，而是部署整个已经编译了代码的 VM。<br>不可变基础设施中所谓的不可变，即安装一次，不做修改，用过即扔。有点像一次性产品，或者可以称为即抛型。<br>不再需要给生产环境中的机器打补丁，直接部署一个新的已经打好补丁的机器就好了。<br>也没有<strong>必要区别生产环境和编译环境中 VM</strong>，所有的机器在不可变基础设施概念下都是一样的。<br>实际上，您可以安全地禁用对所有生产环境机器的所有 SSH 访问，因为已经没有任何事情可做 - 没有要更改的设置，没有要查看的日志。<br>如果能正确的使用，这是一个非常强大的模式，所以我强烈推荐！<br>不可变部署要求将配置与您的代码分开。</p><p><img src="/2020/03/26/devops-start/3.png" alt="12 Factor App"></p><p>只需要配置一台服务器并将其作为扩展组的一部分进行多次部署就可以实现大规模的自动化配置了。<br>除了容器之外，对于那些刚刚开始学习的人来说，<u><strong>使用 Terraform 配置 AWS 基础设施</strong>是一个教科书级的 DevOps 实践模式</u>，也是成长为 DevOps 工程师的必经之路。<br><strong>但是如果我需要查看日志来解决问题怎么办？</strong><br>好吧，您将不再登录虚拟机来查看日志，而是查看集中式日志管理的基础设施来解决问题。</p><h3 id="Terraform是什么"><a href="#Terraform是什么" class="headerlink" title="Terraform是什么"></a>Terraform是什么</h3><p><a href="https://www.terraform.io/">Terraform</a>是一款基于<a href="https://golang.org/doc/">Golang</a>的开源的资源编排工具，可以让用户管理配置任何基础架构，可以管理公有云和私有云服务的基础架构，也可以管理外部服务。</p><p>如果你不知道什么叫资源编排，那 AWS控制台、腾讯云控制台 你一定知道，你可以在这些控制台管理你的所有云资源，Terraform和控制台作用一样，本质都是管理你的云资源，只不过，控制台是界面化的操作，而Terraform是通过配置文件来实现。</p><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>所有与生产环境相关的内容都必须进行版本控制，能被追踪、审查并且保留历史记录。<br>强制“所有产品必须版本化”实际上也是迫使你以“自动化优先”的思维方式处理问题。</p><p>Git 的不同之处在于它包含了分布式源代码控制的概念。（不会将其他人锁定在集中式源代码存储库之外）<br>Git 不像旧的 SVN，它是一个分布式源代码控制系统，多个团队可以在一个共享的代码库上安全地工作。</p><p>Git教程</p><p>学习和练习的一系列教程是 <a href="https://www.atlassian.com/git/tutorials">Atlassian 的 Git 教程</a>、<a href="https://www.atlassian.com/git/tutorials/comparing-workflows">Git Workflows</a>。<br><a href="https://learngitbranching.js.org/">Learn Git Branching</a> 是一个互动教程。</p><p>无论如何，如果你不明白 git 的工作原理，你就不会在这个行业中走得太远！<br>对 git 功能分支如何工作缺乏了解，或者无法解释 Gitflow，这是 99% 有抱负的 DevOps 工程师候选人的失败之处。</p><p>Git必备技能：</p><ul><li>Fork 代码仓库</li><li>创建分支</li><li>合并来自上游或者后端的更改</li><li>创建 Pull 请求</li></ul><p><u>ps：该文章摘取于知乎，仅供学习与参考</u></p>]]></content>
    
    
    
    <tags>
      
      <tag>devops</tag>
      
      <tag>git</tag>
      
      <tag>terraform</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安全</title>
    <link href="/2020/03/25/docker-security/"/>
    <url>/2020/03/25/docker-security/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker安全"><a href="#Docker安全" class="headerlink" title="Docker安全"></a>Docker安全</h2><p>安全本质就是分层！<br>Docker平台本身提供了一些非常棒的原生安全技术。这些技术使用起来都很简单。</p><ul><li><p>Docker Swarm模式</p></li><li><p>Docker内容信任</p></li><li><p>Docker安全扫描</p></li><li><p>Docker密钥</p><p><img src="/2020/03/25/docker-security/1.png" alt="docker-security"></p></li></ul><h3 id="Linux安全技术"><a href="#Linux安全技术" class="headerlink" title="Linux安全技术"></a>Linux安全技术</h3><ul><li><h4 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h4><p>内核命名空间属于容器中非常核心的一部分。该技术能够将操作系统（OS）进行拆分，使一个操作系统看起来像多个互相独立的操作系统一样。如用户可以在相同的OS上运行多个Web服务，每个端口都是443。</p><p><img src="/2020/03/25/docker-security/2.png" alt="namespace"></p><p>Linux Docker利用了下列内核命名空间</p><ul><li>进程ID（PID）</li><li>网络（NET）</li><li>文件系统/挂载（MNT）</li><li>进程内通信（IPC）</li><li>用户（USER）</li><li>UTS</li></ul><p><strong>Docker容器本质就是命名空间的有组织集合</strong></p></li><li><h4 id="Control-Group"><a href="#Control-Group" class="headerlink" title="Control Group"></a>Control Group</h4><p>命名空间用于隔离，那么控制组就是用于限额。<br>在Docker的世界中，容器之间是互相隔离的，但却共享OS资源，比如CPU、RAM以及硬盘I/O。</p></li><li><h4 id="Capability（系统权限）"><a href="#Capability（系统权限）" class="headerlink" title="Capability（系统权限）"></a>Capability（系统权限）</h4><p>Docker采用Capability机制来实现用户在以root身份运行容器的同时，还能移除非必须的root能力。</p></li><li><p>MAC（强制访问控制）</p></li><li><p>Seccomp（安全计算）</p></li></ul><h3 id="Docker平台安全技术"><a href="#Docker平台安全技术" class="headerlink" title="Docker平台安全技术"></a>Docker平台安全技术</h3><h4 id="Swarm模式"><a href="#Swarm模式" class="headerlink" title="Swarm模式"></a>Swarm模式</h4><p>Swarm模式是Docker未来的趋势。Swarm模式支持用户集群化管理多个Docker主机，同时还能通过声明式的方式部署应用。Swarm模式包括很多开箱即用的安全特性，同时还设置了合理的默认值。</p><ul><li>加密节点ID</li><li>基于TLS的认证机制</li><li>安全准入令牌</li><li>支持周期性证书自动更新的CA配置</li><li>加密集群存储（配置DB）</li><li>加密网络</li></ul><p><img src="/2020/03/25/docker-security/3.png" alt="docker-swarm-node"></p><p>向某个现存的Swarm中加入管理者和工作者所需的唯一凭证就是准入令牌。<br>管理者所需准入令牌<br>工作者所需准入令牌</p><p><code>docker swarm join-token manager</code><br><code>docker swarm join-token worker</code><br>在任意管理者节点上运行上面命令，可以获取管理者或者工作者准入令牌。</p><p><code>docker swarm join-token --rotate manager</code><br>取消了已经授权的管理者准入令牌，之后又发布了新的令牌</p><p>集群存储是Swarm的大脑，保存了集群配置和状态数据。<br>集群存储的日常维护由Docker自动完成。但是，在生产环境中，需要为集群存储提供完整的备份和恢复方案。</p><h4 id="Docker密钥"><a href="#Docker密钥" class="headerlink" title="Docker密钥"></a>Docker密钥</h4><p>Docker使用命令 <code>docker secret</code> 来管理密钥。</p><p>（1）密钥被创建，并且发送到Swarm。</p><p>（2）密钥存放在集群存储当中，并且是加密的（每个管理节点都能访问集群存储）。</p><p>（3）B服务被创建，并且使用了该密钥。</p><p>（4）密钥传输到B服务的任务节点（容器）的过程是加密的。</p><p>（5）B服务的容器将密钥解密并挂载到路径/run/secrets下。这是一个临时的内存文件系统。</p><p>（6）一旦容器（服务任务）完成，内存文件系统关闭，密钥也随之删除。</p><p>（7）A服务中的容器不能访问该密钥。</p><p><img src="/2020/03/25/docker-security/4.png" alt="secret"></p><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker-Stack部署应用</title>
    <link href="/2020/03/24/docker-stack/"/>
    <url>/2020/03/24/docker-stack/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker-Stack部署应用"><a href="#Docker-Stack部署应用" class="headerlink" title="Docker-Stack部署应用"></a>Docker-Stack部署应用</h2><p>大规模场景下的多服务部署和管理是一件很难的事情。<br>Docker Stack通过提供期望状态、滚动升级、简单易用、扩缩容、健康检查等特性简化了应用的管理。<br>Stack能够在单个声明文件中定义复杂的多服务应用。<br>Stack还提供了简单的方式来部署应用并管理其完整的生命周期。<br>初始化部署 &gt; 健康检查 &gt; 扩容 &gt; 更新 &gt; 回滚，以及其他功能。<br>Compose文件中包含了构成应用所需的完整服务栈。此外还包含了卷、网络、安全以及应用所需的其他基础架构。</p><p>Stack是基于Docker Swarm之上来完成应用的部署。<br>Docker适用于开发与测试。Docker Stack则适用于大规模场景和生产环境。</p><p>使用Docker Stack部署应用<br>Stack一直是期望的Compose—完全集成到Docker中，并能够管理应用的整个生命周期。</p><p><img src="/2020/03/24/docker-stack/1.png" alt="stack-structure"></p><h3 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h3><p><img src="/2020/03/24/docker-stack/2.png" alt="AtSea"></p><p>docker-stack.yml文件通常常被称为Stack文件，在该文件中定义了应用及其依赖。<br>在该文件中，定义了4种顶级关键字</p><ul><li>version（Compose文件格式的版本号。为了应用于Stack,需要3.0或者更高的版本）</li><li>services（定义了组成当前应用的服务都有哪些）</li><li>networks（列出了必需的网络）</li><li>secrets（定义了应用用到的密钥）</li></ul><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.2&quot;</span><span class="hljs-attr">services:</span>  <span class="hljs-attr">reverse_proxy:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/atseasampleshopapp_reverse_proxy</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;443:443&quot;</span>    <span class="hljs-attr">secrets:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">revprox_cert</span>        <span class="hljs-attr">target:</span> <span class="hljs-string">revprox_cert</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">revprox_key</span>        <span class="hljs-attr">target:</span> <span class="hljs-string">revprox_key</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">front-tier</span>  <span class="hljs-attr">database:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/atsea_db</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-attr">POSTGRES_USER:</span> <span class="hljs-string">gordonuser</span>      <span class="hljs-attr">POSTGRES_DB_PASSWORD_FILE:</span> <span class="hljs-string">/run/secrets/postgres_password</span>      <span class="hljs-attr">POSTGRES_DB:</span> <span class="hljs-string">atsea</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-tier</span>    <span class="hljs-attr">secrets:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">postgres_password</span>    <span class="hljs-attr">deploy:</span>      <span class="hljs-attr">placement:</span>        <span class="hljs-attr">constraints:</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node.role == worker&#x27;</span>  <span class="hljs-attr">appserver:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/atsea_app</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">front-tier</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-tier</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">payment</span>    <span class="hljs-attr">deploy:</span>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span>      <span class="hljs-attr">update_config:</span>        <span class="hljs-attr">parallelism:</span> <span class="hljs-number">2</span>        <span class="hljs-attr">failure_action:</span> <span class="hljs-string">rollback</span>      <span class="hljs-attr">placement:</span>        <span class="hljs-attr">constraints:</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node.role == worker&#x27;</span>      <span class="hljs-attr">restart_policy:</span>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span>        <span class="hljs-attr">delay:</span> <span class="hljs-string">5s</span>        <span class="hljs-attr">max_attempts:</span> <span class="hljs-number">3</span>        <span class="hljs-attr">window:</span> <span class="hljs-string">120s</span>    <span class="hljs-attr">secrets:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">postgres_password</span>  <span class="hljs-attr">visualizer:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/visualizer:stable</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8001:8080&quot;</span>    <span class="hljs-attr">stop_grace_period:</span> <span class="hljs-string">1m30s</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span>    <span class="hljs-attr">deploy:</span>      <span class="hljs-attr">update_config:</span>        <span class="hljs-attr">failure_action:</span> <span class="hljs-string">rollback</span>      <span class="hljs-attr">placement:</span>        <span class="hljs-attr">constraints:</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node.role == manager&#x27;</span>  <span class="hljs-attr">payment_gateway:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/atseasampleshopapp_payment_gateway</span>    <span class="hljs-attr">secrets:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">staging_token</span>        <span class="hljs-attr">target:</span> <span class="hljs-string">payment_token</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">payment</span>    <span class="hljs-attr">deploy:</span>      <span class="hljs-attr">update_config:</span>        <span class="hljs-attr">failure_action:</span> <span class="hljs-string">rollback</span>      <span class="hljs-attr">placement:</span>        <span class="hljs-attr">constraints:</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node.role == worker&#x27;</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node.labels.pcidss == yes&#x27;</span><span class="hljs-attr">networks:</span>  <span class="hljs-attr">front-tier:</span>  <span class="hljs-attr">back-tier:</span>  <span class="hljs-attr">payment:</span>    <span class="hljs-attr">driver:</span> <span class="hljs-string">overlay</span>    <span class="hljs-attr">driver_opts:</span>      <span class="hljs-attr">encrypted:</span> <span class="hljs-string">&#x27;yes&#x27;</span><span class="hljs-attr">secrets:</span>  <span class="hljs-attr">postgres_password:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">staging_token:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">revprox_key:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">revprox_cert:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span></code></pre><p>Stack文件是应用的一个自描述文件，并且作为一个很好的工具弥合了开发和运维之间的隔阂。</p><h3 id="深入分析Stack文件"><a href="#深入分析Stack文件" class="headerlink" title="深入分析Stack文件"></a>深入分析Stack文件</h3><p>在Docker根据某个Stack文件部署应用的时候，首先会检查并创建networks。如果对应网络不存在，Docker则创建。</p><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><pre><code class="hljs yaml"><span class="hljs-attr">networks:</span>  <span class="hljs-attr">front-tier:</span>  <span class="hljs-attr">back-tier:</span>  <span class="hljs-attr">payment:</span>    <span class="hljs-attr">driver:</span> <span class="hljs-string">overlay</span>    <span class="hljs-attr">driver_opts:</span>      <span class="hljs-attr">encrypted:</span> <span class="hljs-string">&#x27;yes&#x27;</span><span class="hljs-comment"># 默认情况下，网络都会采用overlay驱动</span><span class="hljs-comment"># payment网络需要数据层加密，通常额外开销会在10%的范围之内。</span><span class="hljs-comment"># 网络均会先于密钥和服务被创建。</span></code></pre><h4 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h4><pre><code class="hljs yaml"><span class="hljs-attr">secrets:</span>  <span class="hljs-attr">postgres_password:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">staging_token:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">revprox_key:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">revprox_cert:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># external意味着在Stack部署之前，这些密钥必须存在。</span></code></pre><h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><p>Docker Stack和Docker Compose的一个区别是，Stack不支持构建。这意味着<u>在部署Stack之前，所有镜像必须提前构建完成。</u></p><pre><code class="hljs yaml"><span class="hljs-attr">services:</span>  <span class="hljs-attr">reverse_proxy:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/atseasampleshopapp_reverse_proxy</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;443:443&quot;</span>    <span class="hljs-attr">secrets:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">revprox_cert</span>        <span class="hljs-attr">target:</span> <span class="hljs-string">revprox_cert</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">revprox_key</span>        <span class="hljs-attr">target:</span> <span class="hljs-string">revprox_key</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">front-tier</span><span class="hljs-comment"># image关键字是服务对象中唯一的必填项。定义了将要用于构建的服务副本的Docker镜像。</span><span class="hljs-comment"># ports关键字定义了端口映射。默认情况下，所有端口映射都采用Ingress模式。（每个节点可访问）</span><span class="hljs-comment"># secrets关键字定义了两个密钥，密钥以普通文件的形式被挂载到服务副本当中。（Linux路径: /run/secrets）</span><span class="hljs-comment"># networks关键字确保服务所有副本都会连接到front-tier网络中。</span><span class="hljs-attr">database:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/atsea_db</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-attr">POSTGRES_USER:</span> <span class="hljs-string">gordonuser</span>      <span class="hljs-attr">POSTGRES_DB_PASSWORD_FILE:</span> <span class="hljs-string">/run/secrets/postgres_password</span>      <span class="hljs-attr">POSTGRES_DB:</span> <span class="hljs-string">atsea</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-tier</span>    <span class="hljs-attr">secrets:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">postgres_password</span>    <span class="hljs-attr">deploy:</span>      <span class="hljs-attr">placement:</span>        <span class="hljs-attr">constraints:</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node.role == worker&#x27;</span><span class="hljs-comment"># environment关键字允许在服务副本中注入环境变量。</span><span class="hljs-comment"># deploy关键字定义了部署约束。只会运行在Swarm集群的worker节点中。</span><span class="hljs-attr">appserver:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/atsea_app</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">front-tier</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-tier</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">payment</span>    <span class="hljs-attr">deploy:</span>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span>      <span class="hljs-attr">update_config:</span>        <span class="hljs-attr">parallelism:</span> <span class="hljs-number">2</span>        <span class="hljs-attr">failure_action:</span> <span class="hljs-string">rollback</span>      <span class="hljs-attr">placement:</span>        <span class="hljs-attr">constraints:</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node.role == worker&#x27;</span>      <span class="hljs-attr">restart_policy:</span>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span>        <span class="hljs-attr">delay:</span> <span class="hljs-string">5s</span>        <span class="hljs-attr">max_attempts:</span> <span class="hljs-number">3</span>        <span class="hljs-attr">window:</span> <span class="hljs-string">120s</span>    <span class="hljs-attr">secrets:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">postgres_password</span><span class="hljs-comment"># replicas设置期望服务的副本数量为2。默认是1。</span><span class="hljs-comment"># update_config.parallelism定义了Docker在服务滚动升级的时候具体如何操作。（每次更新两个副本）</span><span class="hljs-comment"># update_config.failure_action在升级失败后自动回滚。（默认操作是pause）</span><span class="hljs-comment"># deploy.restart_policy定义了Swarm针对容器异常退出的重启策略。（若某个副本以非0返回值退出，会立即重启当前副本。重启最多重试3次，每次都会等待至多120s来检测是否启动成功，每次重启的间隔是5s）</span><span class="hljs-attr">visualizer:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/visualizer:stable</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8001:8080&quot;</span>    <span class="hljs-attr">stop_grace_period:</span> <span class="hljs-string">1m30s</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span>    <span class="hljs-attr">deploy:</span>      <span class="hljs-attr">update_config:</span>        <span class="hljs-attr">failure_action:</span> <span class="hljs-string">rollback</span>      <span class="hljs-attr">placement:</span>        <span class="hljs-attr">constraints:</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node.role == manager&#x27;</span><span class="hljs-comment"># 挂载了一个指定卷，并且定义了容器的优雅停止方式。（stop_grace_period）</span><span class="hljs-comment"># volumes关键字用于挂载提前创建的卷或者主机目录到某个服务副本当中。</span></code></pre><h3 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h3><p>在部署应用之前，前置处理</p><ul><li>Swarm模式 （应用将采用Docker Stack部署，而Stack依赖于Swarm模式）</li><li>标签 （某个Swarm worker节点需要自定义标签）</li><li>密钥 （应用所需的密钥需要在部署前创建完成）</li></ul><p><img src="/2020/03/24/docker-stack/3.png" alt="部署环境"></p><h4 id="创建新的Swarm"><a href="#创建新的Swarm" class="headerlink" title="创建新的Swarm"></a>创建新的Swarm</h4><p>一个管理节点和两个工作节点构成</p><p><code>docker swarm init</code></p><p><code>docker swarm join</code></p><p><code>docker node ls</code></p><pre><code class="hljs bash">$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONw75fjsgwvw74bsux8q7dqgeg4     ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Ready               Active                                  18.09.9-cefcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg *   ip-172-xxx-xxx-90                                    Ready               Active              Leader              18.09.9-ce</code></pre><h4 id="在Swarm管理节点上添加标签pcidss"><a href="#在Swarm管理节点上添加标签pcidss" class="headerlink" title="在Swarm管理节点上添加标签pcidss"></a>在Swarm管理节点上添加标签pcidss</h4><p><code>docker node update --label-add pcidss=yes ip-172-xxx-xxx-57.ap-northeast-1.compute.internal</code></p><pre><code class="hljs bash">$ docker node update --label-add pcidss=yes ip-172-xxx-xxx-57.ap-northeast-1.compute.internalip-172-xxx-xxx-57.ap-northeast-1.compute.internal// 查看节点标签$ docker node inspect ip-172-xxx-xxx-57.ap-northeast-1.compute.internal[    &#123;        <span class="hljs-string">&quot;ID&quot;</span>: <span class="hljs-string">&quot;fcjl1u2ogpw3yxsg0l47i7pbf&quot;</span>,        <span class="hljs-string">&quot;Version&quot;</span>: &#123;            <span class="hljs-string">&quot;Index&quot;</span>: 419        &#125;,        <span class="hljs-string">&quot;CreatedAt&quot;</span>: <span class="hljs-string">&quot;2020-03-20T06:46:46.680403232Z&quot;</span>,        <span class="hljs-string">&quot;UpdatedAt&quot;</span>: <span class="hljs-string">&quot;2020-03-24T13:54:36.991693666Z&quot;</span>,        <span class="hljs-string">&quot;Spec&quot;</span>: &#123;            <span class="hljs-string">&quot;Labels&quot;</span>: &#123;                <span class="hljs-string">&quot;pcidss&quot;</span>: <span class="hljs-string">&quot;yes&quot;</span>            &#125;,            <span class="hljs-string">&quot;Role&quot;</span>: <span class="hljs-string">&quot;worker&quot;</span>,            <span class="hljs-string">&quot;Availability&quot;</span>: <span class="hljs-string">&quot;active&quot;</span>        &#125;,...</code></pre><h4 id="在Swarm管理节点上创建新的键值对"><a href="#在Swarm管理节点上创建新的键值对" class="headerlink" title="在Swarm管理节点上创建新的键值对"></a>在Swarm管理节点上创建新的键值对</h4><p><code>openssl req -newkey rsa:4096 -nodes -sha256 -keyout domain.key -x509 -days 365 -out domain.crt</code></p><p><code>docker secret create revprox_cert domain.crt</code></p><p><code>docker secret create revprox_key domain.key</code></p><p><code>docker secret create postgres_password domain.key</code></p><p><code>echo staging | docker secret create staging_token -</code></p><pre><code class="hljs bash">$ openssl req -newkey rsa:4096 -nodes -sha256 -keyout domain.key -x509 -days 365 -out domain.crtGenerating a 4096 bit RSA private key..................................................................................................................................................................................................................++.............................................................++writing new private key to <span class="hljs-string">&#x27;domain.key&#x27;</span>-----You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter <span class="hljs-string">&#x27;.&#x27;</span>, the field will be left blank.-----Country Name (2 letter code) [XX]:CNState or Province Name (full name) []:bjLocality Name (eg, city) [Default City]:bjOrganization Name (eg, company) [Default Company Ltd]:.Organizational Unit Name (eg, section) []:,^HCommon Name (eg, your name or your server<span class="hljs-string">&#x27;s hostname) []:ling</span><span class="hljs-string">Email Address []:ling@^H</span><span class="hljs-string"></span><span class="hljs-string">$ docker secret create revprox_cert domain.crt</span><span class="hljs-string">wn30cqrf6f8wspe5p2td061s4</span><span class="hljs-string"></span><span class="hljs-string">$ docker secret create revprox_key domain.key</span><span class="hljs-string">x1d5pp4isgxgesytt885qgzum</span><span class="hljs-string"></span><span class="hljs-string">$ docker secret create postgres_password domain.key</span><span class="hljs-string">j4tc6tm4c9sccq2n7ji34uw54</span><span class="hljs-string"></span><span class="hljs-string">// 创建 stage_token 密钥</span><span class="hljs-string">$ echo staging | docker secret create staging_token -</span><span class="hljs-string">ij02s4a3rrbtnwd2hsbfi8as5</span></code></pre><p>列出所有密钥</p><p><code>docker secret ls</code></p><pre><code class="hljs bash">$ docker secret lsID                          NAME                DRIVER              CREATED             UPDATEDj4tc6tm4c9sccq2n7ji34uw54   postgres_password                       15 minutes ago      15 minutes agown30cqrf6f8wspe5p2td061s4   revprox_cert                            16 minutes ago      16 minutes agox1d5pp4isgxgesytt885qgzum   revprox_key                             15 minutes ago      15 minutes agoij02s4a3rrbtnwd2hsbfi8as5   staging_token                           7 minutes ago       7 minutes ago</code></pre><h4 id="部署应用-1"><a href="#部署应用-1" class="headerlink" title="部署应用"></a>部署应用</h4><p><code>docker stack deploy -c docker-stack.yml seastack</code></p><pre><code class="hljs bash">$ docker stack deploy -c docker-stack.yml seastackCreating network seastack_back-tierCreating network seastack_paymentCreating network seastack_front-tierCreating network seastack_defaultCreating service seastack_appserverCreating service seastack_visualizerCreating service seastack_payment_gatewayCreating service seastack_reverse_proxyCreating service seastack_database// 查看网络$ docker network lsNETWORK ID          NAME                  DRIVER              SCOPEhvg1z4ixwsmx        seastack_back-tier    overlay             swarmyihnzx16dbpi        seastack_default      overlay             swarmuxha9rcn1pzf        seastack_front-tier   overlay             swarmcq0hd66xn345        seastack_payment      overlay             swarm// 查看服务$ docker service lsID                  NAME                       MODE                REPLICAS            IMAGE                                                     PORTSoxzijg2tb5og        seastack_appserver         replicated          2/2                 dockersamples/atsea_app:latest                            mzp0p6tdfzkv        seastack_database          replicated          1/1                 dockersamples/atsea_db:latest                             6c3af1m0boeg        seastack_payment_gateway   replicated          1/1                 dockersamples/atseasampleshopapp_payment_gateway:latest   sxqxwy090zz6        seastack_reverse_proxy     replicated          1/1                 dockersamples/atseasampleshopapp_reverse_proxy:latest     *:80-&gt;80/tcp, *:443-&gt;443/tcpnwfjdrncsjcc        seastack_visualizer        replicated          1/1                 dockersamples/visualizer:stable                           *:8001-&gt;8080/tcp</code></pre><p>网络是先于服务创建的。这是因为服务依赖于网络，所以网络需要在服务启动前创建。</p><p>Docker将Stack名称附加到由他创建的任何资源名称前作为前缀。<strong>Stack名称_<resource></resource></strong></p><p>列出Stack信息，包含多少个服务。</p><p><code>docker stack ls</code></p><pre><code class="hljs bash">$ docker stack lsNAME                SERVICES            ORCHESTRATORseastack            5                   Swarm</code></pre><p>针对某个指定的Stack查看详细信息</p><p><code>docker stack ps seastack</code></p><pre><code class="hljs bash">$ docker stack ps seastackID                  NAME                         IMAGE                                                     NODE                                               DESIRED STATE       CURRENT STATE                ERROR                       PORTSljf3wkqiydgm        seastack_appserver.1         dockersamples/atsea_app:latest                            ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 42 seconds ago                                   y2l4p9vdv3kd        seastack_database.1          dockersamples/atsea_db:latest                             ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 35 seconds ago                                   9hnaggyf0u25        seastack_reverse_proxy.1     dockersamples/atseasampleshopapp_reverse_proxy:latest     ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 54 seconds ago                                   gqanvork109y        seastack_payment_gateway.1   dockersamples/atseasampleshopapp_payment_gateway:latest   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 58 seconds ago                                   qmslp63e8a59        seastack_visualizer.1        dockersamples/visualizer:stable                           ip-172-xxx-xxx-90                                    Running             Running about a minute ago                               ksdh2ky0fulw        seastack_appserver.1         dockersamples/atsea_app:latest                            ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Shutdown            Failed 49 seconds ago        <span class="hljs-string">&quot;task: non-zero exit (1)&quot;</span>   gef9xv7ek8xe        seastack_appserver.2         dockersamples/atsea_app:latest                            ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 41 seconds ago                                   k6r1cq1ibf33         \_ seastack_appserver.2     dockersamples/atsea_app:latest                            ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Shutdown            Failed 49 seconds ago        <span class="hljs-string">&quot;task: non-zero exit (1)&quot;</span></code></pre><p>查看某个服务的具体信息</p><p><code>docker service logs seastack_reverse_proxy</code></p><pre><code class="hljs bash">$ docker service logs seastack_reverse_proxyseastack_reverse_proxy.1.9hnaggyf0u25@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    | 2020/03/24 14:44:50 [warn] 1<span class="hljs-comment">#1: the &quot;ssl&quot; directive is deprecated, use the &quot;listen ... ssl&quot; directive instead in /etc/nginx/nginx.conf:38</span>seastack_reverse_proxy.1.9hnaggyf0u25@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    | nginx: [warn] the <span class="hljs-string">&quot;ssl&quot;</span> directive is deprecated, use the <span class="hljs-string">&quot;listen ... ssl&quot;</span> directive instead <span class="hljs-keyword">in</span> /etc/nginx/nginx.conf:38</code></pre><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker卷与持久化数据</title>
    <link href="/2020/03/23/docker-volume/"/>
    <url>/2020/03/23/docker-volume/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker卷与持久化数据"><a href="#Docker卷与持久化数据" class="headerlink" title="Docker卷与持久化数据"></a>Docker卷与持久化数据</h2><p>数据主要分为两类，持久化的与非持久化的。<br>每个Docker容器都有自己的非持久化存储。非持久化存储自动创建，从属于容器，生命周期与容器相同。这意味着删除容器也会删除全部非持久化数据。<br>如果希望自己的容器数据保留下来（持久化），则需要将数据存储在卷上。卷和容器是解耦的，从而可以独立地创建并管理卷。</p><h3 id="容器与非持久数据"><a href="#容器与非持久数据" class="headerlink" title="容器与非持久数据"></a>容器与非持久数据</h3><p>毫无疑问，容器擅长无状态和非持久事务。<br>非持久化存储属于容器的一部分，并且与容器的生命周期一致—容器创建时会创建非持久化存储，同时该存储也会随着容器的删除而删除。</p><h3 id="容器与持久化数据"><a href="#容器与持久化数据" class="headerlink" title="容器与持久化数据"></a>容器与持久化数据</h3><p>在容器中持久化数据的方式推荐采用卷。<br>总体来说，用户创建卷，然后创建容器，接着将卷挂载到容器上。卷会挂载到容器文件系统的某个目录之下，任何写到该目录下的内容都会写到卷中。即使容器被删除，卷与其上面的数据仍然存在。</p><p>创建和管理容器卷</p><p><code>docker volume create myvol</code></p><p>默认情况下，Docker创建新卷时采用内置的local驱动。本地卷只能被所在节点的容器使用。使用-d 参数可以指定不同的驱动。<br>第三方驱动可以通过插件方式接入。</p><ul><li>块存储。如Amazon EBS</li><li>文件存储。如Azure文件存储</li><li>对象存储。如Amazon S3</li></ul><p><img src="/2020/03/23/docker-volume/1.png" alt="docker-third-vol"></p><pre><code class="hljs bash">$ docker volume create myvolmyvol[ec2-user@ip-172-xxx-xxx-221 ~]$ docker volume lsDRIVER              VOLUME NAME<span class="hljs-built_in">local</span>               myvol[ec2-user@ip-172-xxx-xxx-221 ~]$ docker volume inspect myvol[    &#123;        <span class="hljs-string">&quot;CreatedAt&quot;</span>: <span class="hljs-string">&quot;2020-03-23T12:28:43Z&quot;</span>,        <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;local&quot;</span>,        <span class="hljs-string">&quot;Labels&quot;</span>: &#123;&#125;,        <span class="hljs-string">&quot;Mountpoint&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/volumes/myvol/_data&quot;</span>,        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;myvol&quot;</span>,        <span class="hljs-string">&quot;Options&quot;</span>: &#123;&#125;,        <span class="hljs-string">&quot;Scope&quot;</span>: <span class="hljs-string">&quot;local&quot;</span>    &#125;]</code></pre><p>Driver和Scope都是local。这意味着卷使用默认local驱动创建，只能用于当前的Docker主机上的容器。</p><p>删除卷</p><p><code>docker volume prune</code></p><p>会删除未装入到某个容器或者服务的所有卷。<strong>谨慎使用！</strong></p><p><code>docker volume rm myvol</code></p><p>删除指定卷</p><pre><code class="hljs bash">$ docker volume pruneWARNING! This will remove all <span class="hljs-built_in">local</span> volumes not used by at least one container.Are you sure you want to <span class="hljs-built_in">continue</span>? [y/N] yDeleted Volumes:myvolTotal reclaimed space: 0B</code></pre><h3 id="卷在容器和服务中的使用"><a href="#卷在容器和服务中的使用" class="headerlink" title="卷在容器和服务中的使用"></a>卷在容器和服务中的使用</h3><p>创建一个新的独立容器，并挂载一个名为bizvol的卷</p><p><code>--mount source=bizvol,target=/vol</code></p><pre><code class="hljs bash">$ docker container run -dit --name voltainer \&gt; --mount <span class="hljs-built_in">source</span>=bizvol,target=/vol \&gt; alpineUnable to find image <span class="hljs-string">&#x27;alpine:latest&#x27;</span> locallylatest: Pulling from library/alpinec9b1b535fdd9: Pull complete Digest: sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367dStatus: Downloaded newer image <span class="hljs-keyword">for</span> alpine:latestc4caa49ae1d0a5151483ebb67efcec5961efb7d0d4ee5741edd2786c5e9404a0// 查看卷[ec2-user@ip-172-xxx-xxx-221 ~]$ docker volume lsDRIVER              VOLUME NAME<span class="hljs-built_in">local</span>               bizvol</code></pre><p>如果指定了已经存在的卷，Docker会使用该卷。<br>如果指定的卷不存在，Docker会创建一个卷。</p><p>尽管容器和卷各自拥有独立的生命周期，Docker也不允许删除正在被容器使用的卷。</p><pre><code class="hljs bash">$ docker volume rm bizvolError response from daemon: remove bizvol: volume is <span class="hljs-keyword">in</span> use - [c4caa49ae1d0a5151483ebb67efcec5961efb7d0d4ee5741edd2786c5e9404a0]</code></pre><p>在卷中输入数据</p><pre><code class="hljs bash">// 进入容器终端sh$ docker container <span class="hljs-built_in">exec</span> -it voltainer sh/ <span class="hljs-comment"># ls -l /vol</span>total 0// 写入数据/ <span class="hljs-comment"># echo &quot;I promise to write a review of the book on Amazon&quot; &gt; /vol/file1</span>/ <span class="hljs-comment"># ls -l /vol</span>total 4-rw-r--r--    1 root     root            50 Mar 23 12:47 file1// 查看写入数据/ <span class="hljs-comment"># cat /vol/file1 </span>I promise to write a review of the book on Amazon// 退出sh/ <span class="hljs-comment"># exit</span>[ec2-user@ip-172-xxx-xxx-221 ~]$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMESc4caa49ae1d0        alpine              <span class="hljs-string">&quot;/bin/sh&quot;</span>           7 minutes ago       Up 7 minutes                            voltainer// 删除容器[ec2-user@ip-172-xxx-xxx-221 ~]$ docker container rm voltainer -fvoltainer[ec2-user@ip-172-xxx-xxx-221 ~]$ docker container ls -aCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES257e76160609        nginx:latest        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   29 hours ago        Exited (0) 29 hours ago                       svc1.1.yefksat7bl2lyu4sttzefhkkp2ce656f3d29a        nginx:latest        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   29 hours ago        Exited (0) 29 hours ago                       svc1.3.m48n3y1xhqtczy6p69lmlzr45// 查看容器[ec2-user@ip-172-xxx-xxx-221 ~]$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES// 查看卷[ec2-user@ip-172-xxx-xxx-221 ~]$ docker volume lsDRIVER              VOLUME NAME<span class="hljs-built_in">local</span>               bizvol// 卷中数据还在。$ ls -l /var/lib/docker/volumes/bizvol/_data/ls: 无法访问/var/lib/docker/volumes/bizvol/_data/: Permission denied[ec2-user@ip-172-xxx-xxx-221 ~]$ sudo ls -l /var/lib/docker/volumes/bizvol/_data/总用量 4-rw-r--r-- 1 root root 50 3月  23 12:47 file1[ec2-user@ip-172-xxx-xxx-221 ~]$ sudo cat /var/lib/docker/volumes/bizvol/_data/file1I promise to write a review of the book on Amazon</code></pre><p>卷和数据还在！</p><p>将卷挂载到一个新的服务或者容器上</p><pre><code class="hljs bash">$ docker swarm join \&gt; --token SWMTKN-1-1fmkohiw5wn4eleb0frcuv4guzdwbqpmvco7vc0hvfvyz1a1fi-7do8xf8my3cjejp10dohwm9t8 172.xxx.xxx.90:2377 \&gt; --advertise-addr 172.xxx.xxx.221:2377 \&gt; --listen-addr 172.xxx.xxx.221:2377Error response from daemon: This node is already part of a swarm. Use <span class="hljs-string">&quot;docker swarm leave&quot;</span> to leave this swarm and join another one.[ec2-user@ip-172-xxx-xxx-221 ~]$ docker swarm leaveNode left the swarm.[ec2-user@ip-172-xxx-xxx-221 ~]$ docker swarm join \&gt; --token SWMTKN-1-1fmkohiw5wn4eleb0frcuv4guzdwbqpmvco7vc0hvfvyz1a1fi-7do8xf8my3cjejp10dohwm9t8 172.xxx.xxx.90:2377 \&gt; --advertise-addr 172.xxx.xxx.221:2377 \&gt; --listen-addr 172.xxx.xxx.221:2377This node joined a swarm as a worker.// 在管理节点上运行[ec2-user@ip-172-xxx-xxx-90 ~]$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONw75fjsgwvw74bsux8q7dqgeg4     ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Ready               Active                                  18.09.9-cefcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg *   ip-172-xxx-xxx-90                                    Ready               Active              Leader              18.09.9-ce// 将存在的卷挂载到新的服务上。$ docker service create \&gt; --name hellcat \&gt; --mount <span class="hljs-built_in">source</span>=bizvol,target=/vol \&gt; alpine sleep 1dwqr1c980gcj8o4qlqj54wgjvxoverall progress: 1 out of 1 tasks 1/1: running   [==================================================&gt;] verify: Service converged [ec2-user@ip-172-xxx-xxx-90 ~]$ docker service ps hellcatID                  NAME                IMAGE               NODE                                               DESIRED STATE       CURRENT STATE            ERROR               PORTSr1r74l0wlbip        hellcat.1           alpine:latest       ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 27 seconds ago // 在工作节点上[ec2-user@ip-172-xxx-xxx-221 ~]$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMEScc93b21f2137        alpine:latest       <span class="hljs-string">&quot;sleep 1d&quot;</span>          2 minutes ago       Up 2 minutes                            hellcat.1.r1r74l0wlbipdiawwia9cze0d// 容器的名称包括了service-name,replica-number以及replica-ID,采用句号分隔。// 貌似工作节点上，不能共享file2，疑问！（以下是在管理节点运行的。）$ docker container <span class="hljs-built_in">exec</span> -it 70ad18d7e686 sh/ <span class="hljs-comment"># cat /vol/file2</span>line 2, I promise to write a review of the book on Amazon</code></pre><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>volume</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker覆盖网络</title>
    <link href="/2020/03/22/docker-over-network/"/>
    <url>/2020/03/22/docker-over-network/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker覆盖网络"><a href="#Docker覆盖网络" class="headerlink" title="Docker覆盖网络"></a>Docker覆盖网络</h2><p>容器间通信的可靠性和安全性相当重要，即使容器分属于不同网络中的不同主机。这也是覆盖网络大展拳脚的地方。它允许读者创建扁平的、安全的二层网络来连接多个主机，容器可以连接到覆盖网络并直接互相通信。</p><p>Docker提供了原生覆盖网络的支持，易于配置且非常安全。</p><h3 id="在Swarm模式下构建并测试Docker覆盖网络"><a href="#在Swarm模式下构建并测试Docker覆盖网络" class="headerlink" title="在Swarm模式下构建并测试Docker覆盖网络"></a>在Swarm模式下构建并测试Docker覆盖网络</h3><h4 id="创建两个节点"><a href="#创建两个节点" class="headerlink" title="创建两个节点"></a>创建两个节点</h4><pre><code class="hljs bash">$ docker node lsID                            HOSTNAME                                          STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONfcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal   Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg *   ip-172-xxx-xxx-90                                   Ready               Active              Leader              18.09.9-ce</code></pre><h4 id="创建一个覆盖网络"><a href="#创建一个覆盖网络" class="headerlink" title="创建一个覆盖网络"></a>创建一个覆盖网络</h4><pre><code class="hljs bash">// node1节点上（管理节点）创建覆盖网络$ docker network create -d overlay uber-net26lqapii93ynkykvhltt4gnodw[ec2-user@ip-172-xxx-xxx-90 ~]$ docker network lsNETWORK ID          NAME                DRIVER              SCOPE4bdb42df4187        bridge              bridge              <span class="hljs-built_in">local</span>99534e330251        docker_gwbridge     bridge              <span class="hljs-built_in">local</span>7dac12898c6b        host                host                <span class="hljs-built_in">local</span>dve1uqi3prlu        ingress             overlay             swarmde235266375f        localnet            bridge              <span class="hljs-built_in">local</span>8f140a8fa9a9        none                null                <span class="hljs-built_in">local</span>y0w8j0n8xair        uber-net            overlay             swarm6lqapii93ynk        uber-net2           overlay             swarm// node2节点上（工作节点）查看网络$ docker network lsNETWORK ID          NAME                DRIVER              SCOPE1a2ea5ebe299        bridge              bridge              <span class="hljs-built_in">local</span>a7b11d61bff7        docker_gwbridge     bridge              <span class="hljs-built_in">local</span>693779ae38b0        host                host                <span class="hljs-built_in">local</span>dve1uqi3prlu        ingress             overlay             swarma9e7c985858f        none                null                <span class="hljs-built_in">local</span>y0w8j0n8xair        uber-net            overlay             swarm</code></pre><h4 id="将服务连接到覆盖网络"><a href="#将服务连接到覆盖网络" class="headerlink" title="将服务连接到覆盖网络"></a>将服务连接到覆盖网络</h4><p>新建一个Docker服务并连接到该网络。Docker服务会包含两个副本（容器），一个运行在node1节点上，一个运行在node2节点上。这样自动将node2节点接入到uber-net2网络。</p><pre><code class="hljs bash">$ docker service create --name <span class="hljs-built_in">test</span> \&gt; --network uber-net2 \&gt; --replicas 2 \&gt; ubuntu sleep infinityfs5xijcqu4ukny0uk06qql8hyoverall progress: 2 out of 2 tasks 1/2: running   [==================================================&gt;] 2/2: running   [==================================================&gt;] verify: Service converged $ docker service ps <span class="hljs-built_in">test</span>ID                  NAME                IMAGE               NODE                                              DESIRED STATE       CURRENT STATE            ERROR               PORTS9jeucl42ssa4        test.1              ubuntu:latest       ip-172-xxx-xxx-57.ap-northeast-1.compute.internal   Running             Running 40 seconds ago                       rbq9tor1q2bv        test.2              ubuntu:latest       ip-172-xxx-xxx-90                                   Running             Running 40 seconds ago// node节点上查看网络（uber-net2可以看到了）$ docker network lsNETWORK ID          NAME                DRIVER              SCOPE1a2ea5ebe299        bridge              bridge              <span class="hljs-built_in">local</span>a7b11d61bff7        docker_gwbridge     bridge              <span class="hljs-built_in">local</span>693779ae38b0        host                host                <span class="hljs-built_in">local</span>dve1uqi3prlu        ingress             overlay             swarma9e7c985858f        none                null                <span class="hljs-built_in">local</span>y0w8j0n8xair        uber-net            overlay             swarm6lqapii93ynk        uber-net2           overlay             swarm</code></pre><p>查看网络</p><pre><code class="hljs bash">$ docker network inspect uber-net2[    &#123;        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;uber-net2&quot;</span>,        <span class="hljs-string">&quot;Id&quot;</span>: <span class="hljs-string">&quot;6lqapii93ynkykvhltt4gnodw&quot;</span>,        <span class="hljs-string">&quot;Created&quot;</span>: <span class="hljs-string">&quot;2020-03-22T08:17:31.148833516Z&quot;</span>,        <span class="hljs-string">&quot;Scope&quot;</span>: <span class="hljs-string">&quot;swarm&quot;</span>,        <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;overlay&quot;</span>,        <span class="hljs-string">&quot;EnableIPv6&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-string">&quot;IPAM&quot;</span>: &#123;            <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,            <span class="hljs-string">&quot;Options&quot;</span>: null,            <span class="hljs-string">&quot;Config&quot;</span>: [                &#123;                    <span class="hljs-string">&quot;Subnet&quot;</span>: <span class="hljs-string">&quot;10.0.1.0/24&quot;</span>,                    <span class="hljs-string">&quot;Gateway&quot;</span>: <span class="hljs-string">&quot;10.0.1.1&quot;</span>                &#125;            ]        &#125;,...</code></pre><p>uber-net2的子网是”10.0.1.0/24”。这跟两个节点的任意底层物理网络IP均不相符。</p><p>获取节点容器ID和IP</p><pre><code class="hljs bash">// node1节点$ docker container lsCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMESd3c5c3cd35a4        ubuntu:latest       <span class="hljs-string">&quot;sleep infinity&quot;</span>         10 minutes ago      Up 10 minutes                           test.2.rbq9tor1q2bvvhpf9vwus8a64$ docker container inspect \--format=<span class="hljs-string">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> \d3c5c3cd35a410.0.1.4// node2节点$ docker container lsCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMESa20372076036        ubuntu:latest       <span class="hljs-string">&quot;sleep infinity&quot;</span>         14 minutes ago      Up 14 minutes                           test.1.9jeucl42ssa42z5abrwxta32v[ec2-user@ip-172-xxx-xxx-57 ~]$ docker container inspect \&gt; --format=<span class="hljs-string">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> \&gt; a2037207603610.0.1.3</code></pre><p>登录node1容器，ping另外一个容器（安装ping工具）</p><pre><code class="hljs bash">$ docker container <span class="hljs-built_in">exec</span> -it d3c5c3cd35a4 bashroot@d3c5c3cd35a4:/<span class="hljs-comment"># ping</span>bash: ping: <span class="hljs-built_in">command</span> not foundroot@d3c5c3cd35a4:/<span class="hljs-comment"># apt-get update</span>...root@d3c5c3cd35a4:/<span class="hljs-comment"># apt-get install iputils-ping</span>...root@d3c5c3cd35a4:/<span class="hljs-comment"># ping 10.0.1.3</span>PING 10.0.1.3 (10.0.1.3) 56(84) bytes of data.64 bytes from 10.0.1.3: icmp_seq=1 ttl=255 time=0.518 ms64 bytes from 10.0.1.3: icmp_seq=2 ttl=255 time=0.468 ms64 bytes from 10.0.1.3: icmp_seq=3 ttl=255 time=0.508 ms64 bytes from 10.0.1.3: icmp_seq=4 ttl=255 time=0.457 ms64 bytes from 10.0.1.3: icmp_seq=5 ttl=255 time=0.527 ms64 bytes from 10.0.1.3: icmp_seq=6 ttl=255 time=0.448 ms64 bytes from 10.0.1.3: icmp_seq=7 ttl=255 time=0.508 ms^C</code></pre><p>node1上的容器可以通过覆盖网络ping通node2之上的容器了。</p><p>查看路由信息</p><pre><code class="hljs bash">root@d3c5c3cd35a4:/<span class="hljs-comment"># apt-get install traceroute</span>...root@d3c5c3cd35a4:/<span class="hljs-comment"># traceroute 10.0.1.3</span>traceroute to 10.0.1.3 (10.0.1.3), 30 hops max, 60 byte packets 1  test.1.9jeucl42ssa42z5abrwxta32v.uber-net2 (10.0.1.3)  0.582 ms  0.518 ms  0.515 ms</code></pre><h3 id="VXLAN入门"><a href="#VXLAN入门" class="headerlink" title="VXLAN入门"></a>VXLAN入门</h3><p>Docker使用VXLAN隧道技术创建了虚拟二层覆盖网络。<br>VXLAN的美妙之处在于它是一种封装技术，能使现存的路由器和网络架构看起来就像普通的IP/UDP包一样，并且处理起来毫无问题。</p><p><img src="/2020/03/22/docker-over-network/1.png" alt="VXLAN"></p><p>不同主机的VXLAN隧道终端VTEP（VXLAN Tunnel Endpoint, VTEP）创建覆盖网络。</p><p><img src="/2020/03/22/docker-over-network/2.png" alt="VTEP"></p><p>为容器设置IP地址</p><p><img src="/2020/03/22/docker-over-network/3.png" alt="VTEP-IP"></p><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker网络</title>
    <link href="/2020/03/21/docker-network/"/>
    <url>/2020/03/21/docker-network/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><p>网络负责连接一切—无网络，无APP。<br>Docker在容器内部运行应用，这些应用之间的交互依赖于大量不同的网络，这意味着Docker需要强大的网络功能。<br>Docker网络架构源自一种叫作容器网络模型（CNM，Container Network Model）的方案，该方案是开源的并且支持插接式连接。Libnetwork是Docker对CNM的一种实现，提供了Docker核心网络架构的全部功能。</p><h3 id="Docker网络架构"><a href="#Docker网络架构" class="headerlink" title="Docker网络架构"></a>Docker网络架构</h3><ul><li>CNM</li><li>Libnetwork</li><li>驱动</li></ul><p><img src="/2020/03/21/docker-network/1.png" alt="网络架构"></p><p>CNM定义了三个基本要素：沙盒（Sandbox）、终端（Endpoint）和网络（Network）。</p><p><img src="/2020/03/21/docker-network/2.png" alt="CNM"></p><p>Docker环境中最小的调度单位就是容器。CNM组件—沙盒被放置在容器内部，为容器提供网络连接。</p><p><img src="/2020/03/21/docker-network/3.png" alt="CNM与容器"></p><p>Libnetwork实现了CNM中定义的全部3个组件。此外它还实现了本地化服务发现（Service Discovery）、基于Ingress的容器负载均衡，以及网络控制层和管理层功能。<br>Libnetwork实现了控制层和管理层功能。<br>驱动就负责实现数据层。<br><img src="/2020/03/21/docker-network/4.png" alt="控制层管理层和数据层关系"></p><h3 id="单机桥接网络"><a href="#单机桥接网络" class="headerlink" title="单机桥接网络"></a>单机桥接网络</h3><p>单机意味着该网络只能在单个Docker主机上运行，并且只能与所在Docker主机上的容器进行连接。<br>桥接意味着这是802.1.d桥接的一种实现（二层交换机）。</p><p>每个Docker主机都有一个默认的单机桥接网络，Linux上网络名称为bridge，在Windows上叫作nat。</p><h4 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h4><p><code>docker network ls</code></p><p><code>docker network inspect bridge</code></p><pre><code class="hljs bash">$ docker network lsNETWORK ID          NAME                DRIVER              SCOPEfe38b7b60ea2        bridge              bridge              <span class="hljs-built_in">local</span>$ docker network inspect bridge[    &#123;        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;bridge&quot;</span>,        <span class="hljs-string">&quot;Id&quot;</span>: <span class="hljs-string">&quot;fe38b7b60ea278e4e7bb38c67e97c462cf8a7b885206a14f280d03a1ecfb88ca&quot;</span>,        <span class="hljs-string">&quot;Created&quot;</span>: <span class="hljs-string">&quot;2020-03-21T07:40:05.276022898Z&quot;</span>,        <span class="hljs-string">&quot;Scope&quot;</span>: <span class="hljs-string">&quot;local&quot;</span>,        <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;bridge&quot;</span>,        <span class="hljs-string">&quot;EnableIPv6&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-string">&quot;IPAM&quot;</span>: &#123;            <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,            <span class="hljs-string">&quot;Options&quot;</span>: null,            <span class="hljs-string">&quot;Config&quot;</span>: [                &#123;                    <span class="hljs-string">&quot;Subnet&quot;</span>: <span class="hljs-string">&quot;172.17.0.0/16&quot;</span>,                    <span class="hljs-string">&quot;Gateway&quot;</span>: <span class="hljs-string">&quot;172.17.0.1&quot;</span>                &#125;            ]        &#125;,        <span class="hljs-string">&quot;Internal&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-string">&quot;Attachable&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-string">&quot;Ingress&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-string">&quot;ConfigFrom&quot;</span>: &#123;            <span class="hljs-string">&quot;Network&quot;</span>: <span class="hljs-string">&quot;&quot;</span>        &#125;,        <span class="hljs-string">&quot;ConfigOnly&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-string">&quot;Containers&quot;</span>: &#123;&#125;,        <span class="hljs-string">&quot;Options&quot;</span>: &#123;            <span class="hljs-string">&quot;com.docker.network.bridge.default_bridge&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>,            <span class="hljs-string">&quot;com.docker.network.bridge.enable_icc&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>,            <span class="hljs-string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>,            <span class="hljs-string">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>,            <span class="hljs-string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="hljs-string">&quot;docker0&quot;</span>,            <span class="hljs-string">&quot;com.docker.network.driver.mtu&quot;</span>: <span class="hljs-string">&quot;1500&quot;</span>        &#125;,        <span class="hljs-string">&quot;Labels&quot;</span>: &#123;&#125;    &#125;]$ docker network inspect bridge | grep bridge.name            <span class="hljs-string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="hljs-string">&quot;docker0&quot;</span>,</code></pre><p>使用Linux brctl工具查看系统中的Linux网桥</p><p><code>yum install brctl</code></p><p><code>brctl show</code></p><pre><code class="hljs bash">$ brctl showbridge name     bridge id               STP enabled     interfacesdocker0         8000.0242582cc9e7       no              docker_gwbridge         8000.0242c19ade9e       no</code></pre><p>创建新的单机桥接网络</p><p><code>docker network create -d bridge localnet</code></p><pre><code class="hljs bash">$ docker network create -d bridge localnetde235266375f7398571c288d30c1afd71a17fd47a028316562b59a812af56f5f$ brctl showbridge name     bridge id               STP enabled     interfacesbr-de235266375f         8000.0242357cce23       no              docker0         8000.0242582cc9e7       no              docker_gwbridge         8000.0242c19ade9e       no</code></pre><p>创建一个新的容器，接入到新建桥接网络localnet当中。</p><pre><code class="hljs bash">$ docker container run -d --name c1 \&gt; --network localnet \&gt; alpine sleep 1dUnable to find image <span class="hljs-string">&#x27;alpine:latest&#x27;</span> locallylatest: Pulling from library/alpinec9b1b535fdd9: Pull complete Digest: sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367dStatus: Downloaded newer image <span class="hljs-keyword">for</span> alpine:latest742cb2a3281868c156c24e656c98ebdb63b4739726cc5ba6a3e9546ef77e8cff$ docker network inspect localnet --format <span class="hljs-string">&#x27;&#123;&#123;json .Containers&#125;&#125;&#x27;</span>&#123;    <span class="hljs-string">&quot;742cb2a3281868c156c24e656c98ebdb63b4739726cc5ba6a3e9546ef77e8cff&quot;</span>: &#123;        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;c1&quot;</span>,        <span class="hljs-string">&quot;EndpointID&quot;</span>: <span class="hljs-string">&quot;afadd344ec0e3cd98aa1a14b4c86c784d9f7a793992f5ca63edcbb6dff31b55c&quot;</span>,        <span class="hljs-string">&quot;MacAddress&quot;</span>: <span class="hljs-string">&quot;02:42:ac:13:00:02&quot;</span>,        <span class="hljs-string">&quot;IPv4Address&quot;</span>: <span class="hljs-string">&quot;172.19.0.2/16&quot;</span>,        <span class="hljs-string">&quot;IPv6Address&quot;</span>: <span class="hljs-string">&quot;&quot;</span>    &#125;&#125;$ brctl showbridge name     bridge id               STP enabled     interfacesbr-de235266375f         8000.0242357cce23       no              vethd4c4e03docker0         8000.0242582cc9e7       no              docker_gwbridge         8000.0242c19ade9e       no  // c1的网络接口连接到了br-de235266375f网桥。</code></pre><p>创建一个c2的容器，并接入到“c1”所在的localnet网络中</p><pre><code class="hljs bash">$ docker container run -it --name c2 \&gt; --network localnet \&gt; alpine sh/ <span class="hljs-comment"># ping c1</span>PING c1 (172.19.0.2): 56 data bytes64 bytes from 172.19.0.2: seq=0 ttl=255 time=0.069 ms64 bytes from 172.19.0.2: seq=1 ttl=255 time=0.073 ms64 bytes from 172.19.0.2: seq=2 ttl=255 time=0.066 ms64 bytes from 172.19.0.2: seq=3 ttl=255 time=0.064 ms64 bytes from 172.19.0.2: seq=4 ttl=255 time=0.059 ms64 bytes from 172.19.0.2: seq=5 ttl=255 time=0.070 ms64 bytes from 172.19.0.2: seq=6 ttl=255 time=0.109 ms64 bytes from 172.19.0.2: seq=7 ttl=255 time=0.073 ms64 bytes from 172.19.0.2: seq=8 ttl=255 time=0.068 ms64 bytes from 172.19.0.2: seq=9 ttl=255 time=0.060 ms^C--- c1 ping statistics ---10 packets transmitted, 10 packets received, 0% packet lossround-trip min/avg/max = 0.059/0.071/0.109 ms/ <span class="hljs-comment"># </span></code></pre><p>桥接网络中容器只能与位于相同网络中的容器进行通信。但是可以使用端口映射（Port Mapping）来绕开这个限制。</p><p>运行一个新的Web服务容器，并将容器80端口映射到Docker主机的5000端口。</p><pre><code class="hljs bash">$ docker container run -d --name web \&gt; --network localnet \&gt; --publish 5000:80 \&gt; nginxUnable to find image <span class="hljs-string">&#x27;nginx:latest&#x27;</span> locallylatest: Pulling from library/nginx68ced04f60ab: Pull complete 28252775b295: Pull complete a616aa3b0bf2: Pull complete Digest: sha256:2539d4344dd18e1df02be842ffc435f8e1f699cfc55516e2cf2cb16b7a9aea0bStatus: Downloaded newer image <span class="hljs-keyword">for</span> nginx:latestecb9ef0734b5c6887efb311744134cf26d6c806db14f65603d0186735de16603$ docker port web80/tcp -&gt; 0.0.0.0:5000// 容器80端口已经映射到Docker主机所有接口上的5000端口。</code></pre><p>此时通过访问<code>http://18.xxx.xxx.xxx:5000/</code>就可以访问容器中的nginx。</p><h3 id="多机覆盖网络"><a href="#多机覆盖网络" class="headerlink" title="多机覆盖网络"></a>多机覆盖网络</h3><p>覆盖网络适用于多机环境。它允许单个网络包含多个主机，这样不同主机上的容器间就可以在链路层实现通信。<br>覆盖网络是理想的容器间通信方式，支持完全容器化的应用，并且具备良好的伸缩性。</p><p>能够将容器化应用连接到外部系统以及物理网络的能力是非常必要的。常见的例子是部分容器化的应用—应用中已容器化的部分需要与那些运行在物理网络和VLAN上的未容器化部分进行通信。</p><p>Docker内置的Macvlan驱动就是为此场景而生的。<br>Macvlan的优点是性能优异，无须端口映射或者额外桥接。<br>Macvlan的缺点是需要将主机网卡（NIC）设置为<strong>混杂模式</strong>（Promiscuous Mode）。这在大部分公有云平台上是不允许的</p><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><p>查看单独的容器日志</p><p><code>docker container logs xxx</code></p><pre><code class="hljs bash">$ docker container logs web221.xxx-xxx.75 - - [21/Mar/2020:08:42:49 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 200 612 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span>2020/03/21 08:42:50 [error] 6<span class="hljs-comment">#6: *1 open() &quot;/usr/share/nginx/html/favicon.ico&quot; failed (2: No such file or directory), client: 221.223.232.75, server: localhost, request: &quot;GET /favicon.ico HTTP/1.1&quot;, host: &quot;18.182.11.164:5000&quot;, referrer: &quot;http://18.182.11.164:5000/&quot;</span>221.xxx-xxx.75 - - [21/Mar/2020:08:42:50 +0000] <span class="hljs-string">&quot;GET /favicon.ico HTTP/1.1&quot;</span> 404 555 <span class="hljs-string">&quot;http://18.182.11.164:5000/&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span>221.xxx-xxx.75 - - [21/Mar/2020:09:01:33 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span>221.xxx-xxx.75 - - [21/Mar/2020:09:01:34 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span>221.xxx-xxx.75 - - [21/Mar/2020:09:01:35 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span></code></pre><p>查看Swarm服务日志</p><p><code>docker service logs xxx</code></p><pre><code class="hljs bash">$ docker service logs svc1svc1.1.005grokadf97@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    | 10.255.0.2 - - [21/Mar/2020:10:03:23 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span>svc1.2.bva4j461fn8f@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    | 10.255.0.3 - - [21/Mar/2020:09:53:26 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span>svc1.4.xla77t1eo0ts@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    | 10.255.0.2 - - [21/Mar/2020:09:53:19 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span>svc1.4.xla77t1eo0ts@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    | 10.255.0.5 - - [21/Mar/2020:09:53:22 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span></code></pre><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>服务发现（Service Discovery）允许容器和Swarm服务通过名称互相定位。唯一的要求就是需要处于同一个网络当中。</p><p><img src="/2020/03/21/docker-network/5.png" alt="服务发现"></p><p>每个启动时使用了–name参数的Swarm服务或者独立的容器，都会将自己的名称和IP地址注册到Docker DNS服务。这意味着容器和服务副本可以通过Docker DNS服务互相发现。<br>服务发现是受网络限制的。这意味着名称解析只对位于<strong>同一网络中</strong>的容器和服务生效。如果两个容器在不同的网络，那么就不能互相解析。</p><h4 id="Ingress网络"><a href="#Ingress网络" class="headerlink" title="Ingress网络"></a>Ingress网络</h4><p>Swarm支持两种服务发布模式，两种模式均保证服务从集群外可访问。</p><ul><li>Ingress模式（默认）</li><li>Host模式</li></ul><p>通过Ingress模式发布的服务，可以保证从Swarm集群内任一节点（即使没有运行服务的副本）都能访问该服务；以Host模式发布的服务只能通过运行服务副本的节点来访问。</p><pre><code class="hljs bash">$ docker network lsNETWORK ID          NAME                DRIVER              SCOPEdcb8438283df        bridge              bridge              <span class="hljs-built_in">local</span>4dfe607b699b        host                host                <span class="hljs-built_in">local</span>dve1uqi3prlu        ingress             overlay             swarmy0w8j0n8xair        uber-net            overlay             swarm[ec2-user@ip-172-xxx-xxx-221 ~]$ docker service create -d --name svc1 --network uber-net --publish published=5000,target=80 nginxqw5n3db4t6b4e7u5toz9yn4hc[ec2-user@ip-172-xxx-xxx-221 ~]$ docker service lsID                  NAME                MODE                REPLICAS            IMAGE               PORTSqw5n3db4t6b4        svc1                replicated          1/1                 nginx:latest        *:5000-&gt;80/tcp$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONee70iiqr4suz0iry3uvtu2fvl *   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Ready               Active              Leader              18.09.9-cefcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg     ip-172-xxx-xxx-90                                    Ready               Active              Reachable           18.09.9-ce</code></pre><p>从三个节点都可访问：<code>http://52.xxx.xxx.124:5000/</code></p><p><img src="/2020/03/21/docker-network/6.png" alt="Ingress模式"></p><p>如果存在多个运行中的副本，流量会平均到每个副本之上。</p><pre><code class="hljs bash">$ docker service create -d --name svc1 --network uber-net \&gt; --replicas 5 \&gt; --publish published=5000,target=80 nginxk07efmmmggiz1buu1vod1xe9p</code></pre><p><img src="/2020/03/21/docker-network/7.png" alt="ingress-replicas"></p><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker Swarm</title>
    <link href="/2020/03/20/docker-swarm/"/>
    <url>/2020/03/20/docker-swarm/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h2><p>Docker Swarm包含两个方面：一个企业级的Docker安全集群，一个微服务应用编排引擎。</p><p>集群方面：Swarm将一个或多个Docker节点组织起来，使得用户能够以集群方式管理它们。<br>Swarm默认内置有加密的分布式集群存储、加密网络、公用TLS、安全集群接入令牌以及一套简化数字证书管理的PKI。用户可以自如地添加或删除节点。</p><p>编排方面：Swarm提供了一套丰富的API使得部署和管理复杂的微服务应用变得易如反掌。</p><p>Docker Swarm是一个基于Docker引擎之上的独立产品。除了原生Swarm应用，它还可以部署和管理Kubernetes应用。</p><p>一个Swarm由一个或多个Docker节点组成。唯一的前提就是要求所有节点通过可靠的网络相连。<br>节点会被配置为管理节点（Manager）或工作节点（Worker）。管理节点负责集群控制面版，进行诸如监控集群状态、分发任务至工作节点等操作。工作节点接收来自管理节点的任务并执行。<br>Swarm的配置和状态信息保存在一套位于所有管理节点上的分布式etcd数据库中。该数据库运行于内存中，并保持数据的最新状态。它几乎不需要任何配置—作为Swarm的一部分被安装，无须管理。</p><p>关于应用编排，Swarm中的最小调度单元是服务。当容器被封装在一个服务中时，称之为一个任务或一个副本，服务中增加了诸如扩缩容、滚动升级以及简单回滚等特性。</p><h3 id="搭建安全Swarm集群"><a href="#搭建安全Swarm集群" class="headerlink" title="搭建安全Swarm集群"></a>搭建安全Swarm集群</h3><h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><pre><code class="hljs bash">// 1）切换docker源$ tee /etc/yum.repos.d/docker.repo &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span>[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/<span class="hljs-variable">$releasever</span>/enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpgEOF// 2）安装docker $ sudo yum install docker$ docker --versionDocker version 18.09.9-ce, build 039a7df// 3) 启动docker$ sudo systemctl <span class="hljs-built_in">enable</span> docker$ sudo systemctl start docker或者$ sudo service docker start// 4) 将当前用户加入docker用户组中,需要重新登录才能有效$ sudo groupadd docker$ sudo usermod -aG docker <span class="hljs-variable">$USER</span>// centos 8安装docker// 删除旧的docker$ yum remove docker docker-common docker-selinux docker-engineRepository AppStream is listed more than once <span class="hljs-keyword">in</span> the configurationRepository extras is listed more than once <span class="hljs-keyword">in</span> the configurationRepository PowerTools is listed more than once <span class="hljs-keyword">in</span> the configurationRepository centosplus is listed more than once <span class="hljs-keyword">in</span> the configuration未找到匹配的参数： docker未找到匹配的参数： docker-common未找到匹配的参数： docker-selinux未找到匹配的参数： docker-engine没有软件包需要移除。依赖关系解决。无需任何处理。完毕！// 安装相关依赖$ yum install -y yum-utils \device-mapper-persistent-data \lvm2// 查看docker版本yum list docker-ce --showduplicates | sort -r...// 安装docker$ yum install docker-ce// 出错一Repository AppStream is listed more than once <span class="hljs-keyword">in</span> the configurationRepository extras is listed more than once <span class="hljs-keyword">in</span> the configurationRepository PowerTools is listed more than once <span class="hljs-keyword">in</span> the configurationRepository centosplus is listed more than once <span class="hljs-keyword">in</span> the configuration上次元数据过期检查：0:01:13 前，执行于 2020年03月28日 星期六 21时52分31秒。错误： 问题: package docker-ce-3:19.03.8-3.el7.x86_64 requires containerd.io &gt;= 1.2.2-3, but none of the providers can be installed  - cannot install the best candidate <span class="hljs-keyword">for</span> the job  - package containerd.io-1.2.10-3.2.el7.x86_64 is excluded  - package containerd.io-1.2.13-3.1.el7.x86_64 is excluded  - package containerd.io-1.2.2-3.3.el7.x86_64 is excluded  - package containerd.io-1.2.2-3.el7.x86_64 is excluded  - package containerd.io-1.2.4-3.1.el7.x86_64 is excluded  - package containerd.io-1.2.5-3.1.el7.x86_64 is excluded  - package containerd.io-1.2.6-3.3.el7.x86_64 is excluded(尝试添加 <span class="hljs-string">&#x27;--skip-broken&#x27;</span> 来跳过无法安装的软件包 或 <span class="hljs-string">&#x27;--nobest&#x27;</span> 来不只使用最佳选择的软件包)// 需要安装containerd.io，// 我们可以到这个网站https://download.docker.com/linux/centos/7/x86_64/stable/Packages/，// 找到最新的去安装，可以手动浏览器下载，快$ dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm$ yum install docker-ce docker-ce-cli// centos 8默认已经安装好Python3和pip3$ pip3 -Vpip 9.0.3 from /usr/lib/python3.6/site-packages (python 3.6)$ pip3 install docker-compose$ docker-compose versiondocker-compose version 1.25.4, build unknowndocker-py version: 4.2.0CPython version: 3.6.8OpenSSL version: OpenSSL 1.1.1c FIPS  28 May 2019// 修改Docker下载源// 登录阿里云：https://cr.console.aliyun.com/cn-hangzhou/mirrors。最后一栏就是镜像加速器。会有自己的镜像加速器地址。$ sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span>&gt; &#123;&gt;   <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://aorfq0az.mirror.aliyuncs.com&quot;</span>]&gt; &#125;&gt; EOF&#123;  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://aorfq0az.mirror.aliyuncs.com&quot;</span>]&#125;$ lsdaemon.json  key.json<span class="hljs-comment"># systemctl daemon-reload</span><span class="hljs-comment"># systemctl restart docker</span></code></pre><h4 id="初始化Swarm"><a href="#初始化Swarm" class="headerlink" title="初始化Swarm"></a>初始化Swarm</h4><p>初始化第一个管理节点 &gt; 加入额外的管理节点 &gt; 加入工作节点 &gt; 完成</p><p>单引擎（Single-Engine）模式：不包含在任何Swarm中的Docker节点。一旦被加入Swarm集群，则切换为Swarm模式。</p><pre><code class="hljs bash">$ docker swarm init \&gt; --advertise-addr 172.xxx.xxx.xxx:2377 \&gt; --listen-addr 172.xxx.xxx.xxx:2377Swarm initialized: current node (ee70iiqr4suz0iry3uvtu2fvl) is now a manager.To add a worker to this swarm, run the following <span class="hljs-built_in">command</span>:    docker swarm join --token SWMTKN-1-1fmkohiw5wn4eleb0frcuv4guzdwbqpmvco7vc0hvfvyz1a1fi-7do8xf8my3cjejp10dohwm9t8 172.xxx.xxx.xxx:2377To add a manager to this swarm, run <span class="hljs-string">&#x27;docker swarm join-token manager&#x27;</span> and follow the instructions.</code></pre><p>docker swarm init会通知Docker来初始化一个新的Swarm，并将自身设置为第一个管理节点。同时也会使该节点开启Swarm模式。<br>–advertise-addr指定其他节点用来连接到当前管理节点的IP和端口。<br>–listen-addr指定用于承载Swarm流量的IP和端口。<br>Swarm模式下的操作默认运行于2337端口，虽然它是可配置的，但2377/tcp是用于客户端与Swarm进行安全（Https）通信的约定俗成的端口配置。</p><h4 id="列出Swarm中的节点"><a href="#列出Swarm中的节点" class="headerlink" title="列出Swarm中的节点"></a>列出Swarm中的节点</h4><p><code>docker node ls</code></p><pre><code class="hljs bash">$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONee70iiqr4suz0iry3uvtu2fvl *   ip-xxx-xxx-xxx-xxx.ap-northeast-1.compute.internal   Ready               Active              Leader              18.09.9-ce</code></pre><p>此时ip-xxx-xxx-xxx-xxx.ap-northeast-1.compute.internal是Swarm中唯一的节点，并且作为Leader列出。</p><h4 id="添加工作和管理节点"><a href="#添加工作和管理节点" class="headerlink" title="添加工作和管理节点"></a>添加工作和管理节点</h4><pre><code class="hljs bash">$ docker swarm join-token workerTo add a worker to this swarm, run the following <span class="hljs-built_in">command</span>:    docker swarm join --token SWMTKN-1-1fmkohiw5wn4eleb0frcuv4guzdwbqpmvco7vc0hvfvyz1a1fi-7do8xf8my3cjejp10dohwm9t8 172.xxx.xxx.xxx:2377$ docker swarm join-token managerTo add a manager to this swarm, run the following <span class="hljs-built_in">command</span>:    docker swarm join --token SWMTKN-1-1fmkohiw5wn4eleb0frcuv4guzdwbqpmvco7vc0hvfvyz1a1fi-1d4p1rhwnb2nxn21kqoirftn8 172.xxx.xxx.xxx:2377</code></pre><p>工作节点和管理节点的接入命令中使用的接入Token是不同的。一个节点是作为工作节点还是管理节点接入，完全依赖于使用了哪个Token。</p><pre><code class="hljs bash">// 添加工作节点$ docker swarm join \&gt; --token SWMTKN-1-1fmkohiw5wn4eleb0frcuv4guzdwbqpmvco7vc0hvfvyz1a1fi-7do8xf8my3cjejp10dohwm9t8 172.xxx.xxx.221:2377 \&gt; --advertise-addr 172.xxx.xxx.57:2377 \&gt; --listen-addr 172.xxx.xxx.57:2377This node joined a swarm as a worker.// 添加管理节点$ docker swarm join \&gt; --token SWMTKN-1-1fmkohiw5wn4eleb0frcuv4guzdwbqpmvco7vc0hvfvyz1a1fi-1d4p1rhwnb2nxn21kqoirftn8 172.xxx.xxx.221:2377 \&gt; --advertise-addr 172.xxx.xxx.90:2377 \&gt; --listen-addr 172.xxx.xxx.90:2377This node joined a swarm as a manager.// 查看节点$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONee70iiqr4suz0iry3uvtu2fvl     ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Ready               Active              Leader              18.09.9-cefcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg *   ip-172-xxx-xxx-90                                    Ready               Active              Reachable           18.09.9-ce</code></pre><p>一个工作节点，两个管理节点。<br>MANAGER STATUS列显示为Leader或者Reachable，则为管理节点。<br>MANAGER STATUS列<strong>无任何显示</strong>的节点是工作节点。只有在管理节点才能执行docker node ls相关命令。</p><h3 id="Swarm管理器高可用性（HA）"><a href="#Swarm管理器高可用性（HA）" class="headerlink" title="Swarm管理器高可用性（HA）"></a>Swarm管理器高可用性（HA）</h3><p>Swarm实现了一种主从方式的多管理节点的HA。<br>通常处于活动状态的管理节点被称为“主节点”（leader）,而主节点也是唯一的一个会对Swarm发送控制命令的节点。<br>只有主节点才会变更配置，或发送任务到工作节点。如果一个备用（非活动）管理节点接收到了Swarm命令，则它会将其转发给主节点。</p><p>关于HA，两条最佳实践</p><ul><li>部署奇数个管理节点</li><li>不要部署太多管理节点（建议3个或5个）</li></ul><p>部署奇数个管理节点有利于减少脑裂（Split-Brain）情况的出现机会。掌握多数管理节点的分区能够继续对集群进行管理。<br>显然将管理节点分布到不同的可用域中是一种不错的实践方式，但是一定要确保它们之间的网络连接是可靠的，否则由于底层网络分区导致的问题将是令人痛苦的！请一定要确保管理节点之间是有高速可靠的网络连接的。</p><p>Docker提供了自动锁机制来锁定Swarm，这会强制要求重启的管理节点在提供一个集群解锁码之后才有权从新接入集群。</p><h4 id="Swarm加锁"><a href="#Swarm加锁" class="headerlink" title="Swarm加锁"></a>Swarm加锁</h4><p><code>docker swarm update --autolock=true</code></p><pre><code class="hljs bash">$ docker swarm update --autolock=<span class="hljs-literal">true</span>Swarm updated.To unlock a swarm manager after it restarts, run the `docker swarm unlock`<span class="hljs-built_in">command</span> and provide the following key:    SWMKEY-1-jpphL37czEhKVGXr7u5tAb+kndkA9dd5BUO5LdyF6GgPlease remember to store this key <span class="hljs-keyword">in</span> a password manager, since without it youwill not be able to restart the manager.// 重启docker$ sudo service docker restartRedirecting to /bin/systemctl restart docker.service[ec2-user@ip-172-xxx-xxx-221 ~]$ docker node lsError response from daemon: Swarm is encrypted and needs to be unlocked before it can be used. Please use <span class="hljs-string">&quot;docker swarm unlock&quot;</span> to unlock it.// 别的管理节点$ docker node lsError response from daemon: rpc error: code = Unknown desc = The swarm does not have a leader. It<span class="hljs-string">&#x27;s possible that too few managers are online. Make sure more than half of the managers are online.</span></code></pre><h4 id="Swarm解锁"><a href="#Swarm解锁" class="headerlink" title="Swarm解锁"></a>Swarm解锁</h4><p><code>docker swarm unlock</code></p><pre><code class="hljs bash">$ docker swarm unlockPlease enter unlock key: // 解锁key，就是加锁key，要妥善保管[ec2-user@ip-172-xxx-xxx-221 ~]$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONl90pqzsmj0al5gs7laktshpdv                                                        Unknown             Active                                  ee70iiqr4suz0iry3uvtu2fvl *   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Ready               Active              Reachable           18.09.9-cefcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg     ip-172-xxx-xxx-90                                    Ready               Active              Leader              18.09.9-ce</code></pre><h4 id="启动Swarm服务"><a href="#启动Swarm服务" class="headerlink" title="启动Swarm服务"></a>启动Swarm服务</h4><pre><code class="hljs bash">$ docker service create --name web-fe \&gt; -p 8080:8080 \&gt; --replicas 3 \&gt; nigelpoulton/pluralsight-docker-ciiqaqb78ufwhps3ugrm5fsxfo5overall progress: 3 out of 3 tasks 1/3: running   [==================================================&gt;] 2/3: running   [==================================================&gt;] 3/3: running   [==================================================&gt;] verify: Service converged</code></pre><p>docker service create 命令告知Docker正在声明一个新服务<br>–name 参数将其命名为web-fe<br>-p 参数映射端口<br>–replicas 参数告知Docker应该总是有几个此服务的副本</p><p>启动的服务都会被Swarm待续监控—Swarm会在后台进行轮训检查（Reconciliation Loop），来持续比较服务的实际状态和期望状态是否一致。若不一致，Swarm会使其一致。</p><p>查看服务</p><p><code>docker service ls</code></p><pre><code class="hljs bash">$ docker service lsID                  NAME                MODE                REPLICAS            IMAGE                                       PORTSiqaqb78ufwhp        web-fe              replicated          3/3                 nigelpoulton/pluralsight-docker-ci:latest   *:8080-&gt;8080/tcp</code></pre><p>查看状态</p><p><code>docker service ps web-fe</code></p><pre><code class="hljs bash">$ docker service ps web-feID                  NAME                IMAGE                                       NODE                                               DESIRED STATE       CURRENT STATE            ERROR               PORTSdavkzelaad5o        web-fe.1            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 20 minutes ago                       y7tw6ryd2vw1        web-fe.2            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-90                                    Running             Running 20 minutes ago                       lkbh8k5t2lus        web-fe.3            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 20 minutes ago</code></pre><p>docker service ps <service-name or serviceid>命令可以查看服务副本列表及各副本的状态。</service-name></p><p>查看详细状态</p><p><code>docker service inspect --pretty web-fe</code></p><pre><code class="hljs ba">$ docker service inspect --pretty web-feID:             iqaqb78ufwhps3ugrm5fsxfo5Name:           web-feService Mode:   Replicated Replicas:      3Placement:UpdateConfig: Parallelism:   1 On failure:    pause Monitoring Period: 5s Max failure ratio: 0 Update order:      stop-firstRollbackConfig: Parallelism:   1 On failure:    pause Monitoring Period: 5s Max failure ratio: 0 Rollback order:    stop-firstContainerSpec: Image:         nigelpoulton&#x2F;pluralsight-docker-ci:latest@sha256:61bc64850a5f2bfbc65967cc33feaae8a77c8b49379c55aaf05bb02dcee41451 Init:          falseResources:Endpoint Mode:  vipPorts: PublishedPort &#x3D; 8080  Protocol &#x3D; tcp  TargetPort &#x3D; 8080  PublishMode &#x3D; ingress</code></pre><p>服务的默认复制模式是副本模式，这种模式会部署期望数量的服务副本，并尽可能均匀地将各个副本分布在整个集群上中<br>全局模式—在这种模式下，每个节点仅运行一个副本。</p><h4 id="服务的扩缩容"><a href="#服务的扩缩容" class="headerlink" title="服务的扩缩容"></a>服务的扩缩容</h4><p><code>docker service scale web-fe=10</code></p><pre><code class="hljs bash">$ docker service scale web-fe=5// 扩容到5个副本数web-fe scaled to 5overall progress: 5 out of 5 tasks 1/5: running   [==================================================&gt;] 2/5: running   [==================================================&gt;] 3/5: running   [==================================================&gt;] 4/5: running   [==================================================&gt;] 5/5: running   [==================================================&gt;] verify: Service converged [ec2-user@ip-172-xxx-xxx-221 ~]$ docker service lsID                  NAME                MODE                REPLICAS            IMAGE                                       PORTSiqaqb78ufwhp        web-fe              replicated          5/5                 nigelpoulton/pluralsight-docker-ci:latest   *:8080-&gt;8080/tcp[ec2-user@ip-172-xxx-xxx-221 ~]$ docker service ps web-feID                  NAME                IMAGE                                       NODE                                               DESIRED STATE       CURRENT STATE               ERROR               PORTSdavkzelaad5o        web-fe.1            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running about an hour ago                       y7tw6ryd2vw1        web-fe.2            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-90                                    Running             Running about an hour ago                       lkbh8k5t2lus        web-fe.3            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running about an hour ago                       i7s9lrds3ek8        web-fe.4            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 30 seconds ago                          2fdleu3jx0sd        web-fe.5            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 30 seconds ago</code></pre><p>缩容</p><pre><code class="hljs bash">$ docker service scale web-fe=3// 调整数字大小，可以缩容web-fe scaled to 3overall progress: 3 out of 3 tasks 1/3: running   [==================================================&gt;] 2/3: running   [==================================================&gt;] 3/3: running   [==================================================&gt;] verify: Service converged [ec2-user@ip-172-xxx-xxx-221 ~]$ docker service lsID                  NAME                MODE                REPLICAS            IMAGE                                       PORTSiqaqb78ufwhp        web-fe              replicated          5/3                 nigelpoulton/pluralsight-docker-ci:latest   *:8080-&gt;8080/tcp[ec2-user@ip-172-xxx-xxx-221 ~]$ docker service ps web-feID                  NAME                IMAGE                                       NODE                                               DESIRED STATE       CURRENT STATE               ERROR               PORTSdavkzelaad5o        web-fe.1            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running about an hour ago                       y7tw6ryd2vw1        web-fe.2            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-90                                    Running             Running about an hour ago                       lkbh8k5t2lus        web-fe.3            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running about an hour ago</code></pre><p>删除服务</p><p><code>docker service rm web-fe</code></p><h4 id="滚动升级"><a href="#滚动升级" class="headerlink" title="滚动升级"></a>滚动升级</h4><p>创建网络（Overlay Network）</p><p><code>docker network create -d overlay uber-net</code></p><pre><code class="hljs bash">$ docker network create -d overlay uber-nety0w8j0n8xairlub0qj5a621p2[ec2-user@ip-172-xxx-xxx-221 ~]$ docker network lsNETWORK ID          NAME                DRIVER              SCOPEy0w8j0n8xair        uber-net            overlay             swarm</code></pre><p>创建一个新的服务，并将其接入uber-net网络</p><pre><code class="hljs bash">$ docker service create --name uber-svc \&gt; --network uber-net \&gt; -p 80:80 --replicas 6 \&gt; nigelpoulton/tu-demo:v1xlp3rupt5rjptzjjipd4vofmuoverall progress: 6 out of 6 tasks 1/6: running   [==================================================&gt;] 2/6: running   [==================================================&gt;] 3/6: running   [==================================================&gt;] 4/6: running   [==================================================&gt;] 5/6: running   [==================================================&gt;] 6/6: running   [==================================================&gt;] verify: Service converged [ec2-user@ip-172-xxx-xxx-221 ~]$ docker service lsID                  NAME                MODE                REPLICAS            IMAGE                     PORTSxlp3rupt5rjp        uber-svc            replicated          6/6                 nigelpoulton/tu-demo:v1   *:80-&gt;80/tcp[ec2-user@ip-172-xxx-xxx-221 ~]$ docker service ps uber-svcID                  NAME                IMAGE                     NODE                                               DESIRED STATE       CURRENT STATE            ERROR               PORTSjl7o8inw4hiw        uber-svc.1          nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 44 seconds ago                       mcd0kovmmfm2        uber-svc.2          nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 44 seconds ago                       pq8oxkxvbvkn        uber-svc.3          nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-90                                    Running             Running 44 seconds ago                       surhy6sjwe2e        uber-svc.4          nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 44 seconds ago                       iq8pxhzrkl07        uber-svc.5          nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 44 seconds ago                       ovynni3in53e        uber-svc.6          nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-90                                    Running             Running 44 seconds ago</code></pre><p>–network 参数声明所有的副本都连接到uber-net网络。</p><p>此时输入Swarm应用访问地址</p><p><img src="/2020/03/20/docker-swarm/1.png" alt="访问Swarm应用"></p><h4 id="滚动更新"><a href="#滚动更新" class="headerlink" title="滚动更新"></a>滚动更新</h4><p>将新镜像更新到Swarm中时采用一种阶段性的方式—每次更新两个副本，并且中间间隔20s。</p><p><code>docker service update</code></p><pre><code class="hljs bash">$ docker service update --image nigelpoulton/tu-demo:v2 \&gt; --update-parallelism 2 \&gt; --update-delay 20s uber-svcuber-svcoverall progress: 6 out of 6 tasks 1/6: running   [==================================================&gt;] 2/6: running   [==================================================&gt;] 3/6: running   [==================================================&gt;] 4/6: running   [==================================================&gt;] 5/6: running   [==================================================&gt;] 6/6: running   [==================================================&gt;] verify: Service converged $ docker service ps uber-svcID                  NAME                IMAGE                     NODE                                               DESIRED STATE       CURRENT STATE            ERROR               PORTSmgp2tlukas59        uber-svc.1          nigelpoulton/tu-demo:v2   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 3 minutes ago                        jl7o8inw4hiw         \_ uber-svc.1      nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Shutdown            Shutdown 3 minutes ago                       gh7qw0m6obzc        uber-svc.2          nigelpoulton/tu-demo:v2   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 4 minutes ago                        mcd0kovmmfm2         \_ uber-svc.2      nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Shutdown            Shutdown 4 minutes ago                       js42qhpdcig0        uber-svc.3          nigelpoulton/tu-demo:v2   ip-172-xxx-xxx-90                                    Running             Running 4 minutes ago                        pq8oxkxvbvkn         \_ uber-svc.3      nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-90                                    Shutdown            Shutdown 4 minutes ago                       pc7e8bqql86t        uber-svc.4          nigelpoulton/tu-demo:v2   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 4 minutes ago                        surhy6sjwe2e         \_ uber-svc.4      nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Shutdown            Shutdown 4 minutes ago                       nrc546s3y5dg        uber-svc.5          nigelpoulton/tu-demo:v2   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 3 minutes ago                        iq8pxhzrkl07         \_ uber-svc.5      nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Shutdown            Shutdown 3 minutes ago                       qs90nd4litg6        uber-svc.6          nigelpoulton/tu-demo:v2   ip-172-xxx-xxx-90                                    Running             Running 4 minutes ago                        ovynni3in53e         \_ uber-svc.6      nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-90                                    Shutdown            Shutdown 4 minutes ago</code></pre><p>有的版本号有v1和v2，滚动更新</p><pre><code class="hljs bash">$ docker service inspect --pretty uber-svcID:             xlp3rupt5rjptzjjipd4vofmuName:           uber-svcService Mode:   Replicated Replicas:      6UpdateStatus: State:         completed Started:       11 minutes ago Completed:     9 minutes ago Message:       update completedPlacement:UpdateConfig: Parallelism:   2 Delay:         20s On failure:    pause Monitoring Period: 5s Max failure ratio: 0 Update order:      stop-firstRollbackConfig: Parallelism:   1 On failure:    pause Monitoring Period: 5s Max failure ratio: 0 Rollback order:    stop-firstContainerSpec: Image:         nigelpoulton/tu-demo:v2@sha256:d3c0d8c9d5719d31b79cca146025fa7d1de4749fef58a7e038cf0ef2ba5eb74c Init:          <span class="hljs-literal">false</span>Resources:Networks: uber-net Endpoint Mode:  vipPorts: PublishedPort = 80  Protocol = tcp  TargetPort = 80  PublishMode = ingress</code></pre><p>发现更新时对并行和延迟的设置已经成为服务定义的一部分了。</p><p>查看日志</p><p><code>docker service logs uber-svc</code></p><pre><code class="hljs bash">$ docker service logs uber-svcuber-svc.6.ovynni3in53e@ip-172-xxx-xxx-90    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.3.pq8oxkxvbvkn@ip-172-xxx-xxx-90    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.3.pq8oxkxvbvkn@ip-172-xxx-xxx-90    | 10.255.0.3 - - [20/Mar/2020 10:32:19] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 200 -uber-svc.6.qs90nd4litg6@ip-172-xxx-xxx-90    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.3.js42qhpdcig0@ip-172-xxx-xxx-90    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.4.pc7e8bqql86t@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.1.mgp2tlukas59@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.4.surhy6sjwe2e@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.4.surhy6sjwe2e@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    | 10.255.0.3 - - [20/Mar/2020 10:32:21] <span class="hljs-string">&quot;POST / HTTP/1.1&quot;</span> 200 -uber-svc.1.jl7o8inw4hiw@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.1.jl7o8inw4hiw@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    | 10.255.0.3 - - [20/Mar/2020 10:28:26] <span class="hljs-string">&quot;GET /favicon.ico HTTP/1.1&quot;</span> 404 -uber-svc.1.jl7o8inw4hiw@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    | 10.255.0.5 - - [20/Mar/2020 10:32:14] <span class="hljs-string">&quot;GET /favicon.ico HTTP/1.1&quot;</span> 404 -uber-svc.2.mcd0kovmmfm2@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.2.mcd0kovmmfm2@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    | 10.255.0.3 - - [20/Mar/2020 10:28:23] <span class="hljs-string">&quot;GET /static/stylesheets/style.css HTTP/1.1&quot;</span> 200 -uber-svc.2.mcd0kovmmfm2@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    | 10.255.0.5 - - [20/Mar/2020 10:32:08] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 200 -uber-svc.5.iq8pxhzrkl07@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.5.iq8pxhzrkl07@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    | 10.255.0.3 - - [20/Mar/2020 10:28:22] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 200 -uber-svc.5.iq8pxhzrkl07@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    | 10.255.0.5 - - [20/Mar/2020 10:32:09] <span class="hljs-string">&quot;GET /static/stylesheets/style.css HTTP/1.1&quot;</span> 200 -uber-svc.2.gh7qw0m6obzc@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.5.nrc546s3y5dg@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)</code></pre><h3 id="Swarm删除节点"><a href="#Swarm删除节点" class="headerlink" title="Swarm删除节点"></a>Swarm删除节点</h3><p><code>docker node update --availability drain node_xxx</code></p><pre><code class="hljs bash">// 查看Swarm节点$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONee70iiqr4suz0iry3uvtu2fvl *   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Ready               Active              Leader              18.09.9-cefcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg     ip-172-xxx-xxx-90                                    Ready               Active              Reachable           18.09.9-ce// 查看Swarm服务[ec2-user@ip-172-xxx-xxx-221 ~]$ docker service lsID                  NAME                MODE                REPLICAS            IMAGE               PORTSk07efmmmggiz        svc1                replicated          5/5                 nginx:latest        *:5000-&gt;80/tcp// 查看本节点的服务[ec2-user@ip-172-xxx-xxx-221 ~]$ docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES257e76160609        nginx:latest        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   8 minutes ago       Up 8 minutes        80/tcp              svc1.1.yefksat7bl2lyu4sttzefhkkp2ce656f3d29a        nginx:latest        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   8 minutes ago       Up 8 minutes        80/tcp              svc1.3.m48n3y1xhqtczy6p69lmlzr45// 将节点停用,该节点上的容器会迁移到其他节点[ec2-user@ip-172-xxx-xxx-221 ~]$ docker node update --availability drain ip-172-xxx-xxx-221.ap-northeast-1.compute.internalip-172-31-33-221.ap-northeast-1.compute.internal[ec2-user@ip-172-xxx-xxx-221 ~]$ docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES// 将停用的节点容器迁移到其它的节点[ec2-user@ip-172-xxx-xxx-90 ~]$ docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMESf27d910e8144        nginx:latest        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   8 minutes ago       Up 8 minutes        80/tcp              svc1.5.mid0cf32rcmdwzpm627q4juxd[ec2-user@ip-172-xxx-xxx-90 ~]$ docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES56751f6cbc14        nginx:latest        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   20 seconds ago      Up 14 seconds       80/tcp              svc1.1.mazi7xv1d5o3lw8eqafcnmhnv883cec81a463        nginx:latest        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   20 seconds ago      Up 14 seconds       80/tcp              svc1.3.nc50ulw6mgkpdhot7ac2v2391f27d910e8144        nginx:latest        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   10 minutes ago      Up 10 minutes       80/tcp              svc1.5.mid0cf32rcmdwzpm627q4juxd</code></pre><p>降级（在其它管理节点）</p><p><code>docker node demote node_xxx</code></p><pre><code class="hljs bash">$ docker node demote ip-172-xxx-xxx-221.ap-northeast-1.compute.internalManager ip-172-xxx-xxx-221.ap-northeast-1.compute.internal demoted <span class="hljs-keyword">in</span> the swarm.$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONee70iiqr4suz0iry3uvtu2fvl     ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Ready               Drain                                   18.09.9-cefcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg *   ip-172-xxx-xxx-90                                    Ready               Active              Leader              18.09.9-ce</code></pre><p>停止docker服务（待删除的节点）</p><pre><code class="hljs bash">$ sudo systemctl stop docker.service$ ps -ef | grep dockerec2-user  4789  5324  0 07:56 pts/0    00:00:00 grep --color=auto docker</code></pre><p>删除节点</p><p><code>docker node rm node_xxx</code></p><pre><code class="hljs bash">$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONee70iiqr4suz0iry3uvtu2fvl     ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Down                Drain                                   18.09.9-cefcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg *   ip-172-xxx-xxx-90                                    Ready               Active              Leader              18.09.9-ce[ec2-user@ip-172-xxx-xxx-90 ~]$ docker node rm ip-172-xxx-xxx-221.ap-northeast-1.compute.internalip-172-xxx-xxx-221.ap-northeast-1.compute.internal[ec2-user@ip-172-xxx-xxx-90 ~]$ docker node lsID                            HOSTNAME                                          STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONfcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal   Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg *   ip-172-xxx-xxx-90                                   Ready               Active              Leader              18.09.9-ce</code></pre><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Swarm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker Compose部署应用</title>
    <link href="/2020/03/19/docker-compose/"/>
    <url>/2020/03/19/docker-compose/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker-Compose部署应用"><a href="#Docker-Compose部署应用" class="headerlink" title="Docker Compose部署应用"></a>Docker Compose部署应用</h2><p>Docker Compose能够在Docker节点上，以单引擎（Single-Engine Mode）进行多容器应用的部署与管理。<br>多数的现代应用通过多个更小的服务互相协同来组成一个完整可用的应用。<br>Docker Compose并不是通过脚本和各种冗长的docker命令来将应用组件组织起来，而是通过一个声明式的配置文件描述整个应用，从而使用一条命令完成部署。</p><p>Docker Compose的前身是Fig。Fig是一个基于Docker的Python工具，允许用户基于一个YAML文件定义多容器应用，从而可以使用fig命令行工具进行应用的部署。Fig还可以对应用的全生命周期进行管理。<br>内部实现上，Fig会解析YAML文件，并通过Docker API进行应用的部署和管理。<br>Fig更名为Docker Compose，并自此成为绑定在Docker引擎之上的外部工具。虽然它从未完全集成到Docker引擎中，但是仍然受到广泛关注并得到普通使用。</p><p>Docker Compose仍然是一个需要在Docker主机上进行安装的外部Python工具。使用它时，首先编写定义多容器（多服务）应用的YAML文件，然后将其交由docker-compose命令处理，Docker Compose就会基于Docker引擎API完成应用的部署。 </p><h3 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker Compose"></a>安装Docker Compose</h3><p>安装Docker-compose</p><p>访问网址，查找合适的版本</p><p><code>https://github.com/docker/compose/releases</code></p><pre><code class="hljs bash">$ curl -L https://github.com/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="hljs-built_in">local</span>/bin/docker-compose// 换取国内镜像curl -L https://get.daocloud.io/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="hljs-built_in">local</span>/bin/docker-compose$ chmod +x /usr/<span class="hljs-built_in">local</span>/bin/docker-compose</code></pre><p>检查Docker Compose是否安装</p><pre><code class="hljs bash">$ docker-compose --versiondocker-compose version 1.23.2, build 1110ad01</code></pre><p>Compose文件</p><p>Docker Compose使用YAML文件来定义多服务的应用。YAML是JSON的一个子集，因此也可以使用JSON。<br>Docker Compose默认使用文件名docker-compose.yml。当然，用户也可以使用 -f 参数指定具体文件。</p><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.5&quot;</span><span class="hljs-attr">services:</span><span class="hljs-attr">web-fe:</span><span class="hljs-attr">build:</span> <span class="hljs-string">.</span><span class="hljs-attr">command:</span> <span class="hljs-string">python</span> <span class="hljs-string">app.py</span><span class="hljs-attr">ports:</span><span class="hljs-bullet">-</span> <span class="hljs-attr">target:</span> <span class="hljs-number">5000</span><span class="hljs-attr">published:</span> <span class="hljs-number">5000</span><span class="hljs-attr">networks:</span><span class="hljs-bullet">-</span> <span class="hljs-string">counter-net</span><span class="hljs-attr">volumes:</span><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">volume</span><span class="hljs-attr">source:</span> <span class="hljs-string">counter-vol</span><span class="hljs-attr">target:</span> <span class="hljs-string">/code</span><span class="hljs-attr">redis:</span><span class="hljs-attr">image:</span> <span class="hljs-string">&quot;redis:alpine&quot;</span><span class="hljs-attr">networks:</span><span class="hljs-attr">counter-net:</span><span class="hljs-attr">networks:</span><span class="hljs-attr">counter-net:</span><span class="hljs-attr">volumes:</span><span class="hljs-attr">counter-vol:</span></code></pre><p>version是必须指定的，总是位于文件的第一行。定义了Compose文件格式的版本。<br>services用于定义不同的应用服务。<br>networks用于指引Docker创建新的网络。<br>volumes用于指引Docker来创建新的卷。<br>Docker Compose会将每个服务部署为一个容器，并且会使用key作为容器名字的一部分。</p><h3 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h3><p>常用的启动一个Compose应用的方式就是<strong>docker-compose up命令</strong>。它会构建所需的镜像，创建网络和卷，并启动容器</p><pre><code class="hljs bash">$ docker-compose up &amp;// 应先进入Docker[1] 98639localhost:counter-app xxxx$ Creating network <span class="hljs-string">&quot;counter-app_counter-net&quot;</span> with the default driverCreating volume <span class="hljs-string">&quot;counter-app_counter-vol&quot;</span> with default driverBuilding web-feStep 1/5 : FROM python:3.4-alpine3.4-alpine: Pulling from library/python8e402f1a9c57: Pull completecda9ba2397ef: Pull completeaafecf9bbbfd: Pull completebc2e7e266629: Pull completee1977129b756: Pull completeDigest: sha256:c210b660e2ea553a7afa23b41a6ed112f85dbce25cbcb567c75dfe05342a4c4bStatus: Downloaded newer image <span class="hljs-keyword">for</span> python:3.4-alpine ---&gt; c06adcf62f6eStep 2/5 : ADD . /code ---&gt; 140d7686d413Step 3/5 : WORKDIR /code ---&gt; Running <span class="hljs-keyword">in</span> 94884afcd407Removing intermediate container 94884afcd407 ---&gt; af5369ebc768Step 4/5 : RUN pip install -r requirements.txt ---&gt; Running <span class="hljs-keyword">in</span> ba41aa887b15DEPRECATION: Python 3.4 support has been deprecated. pip 19.1 will be the last one supporting it. Please upgrade your Python as Python 3.4 won<span class="hljs-string">&#x27;t be maintained after March 2019 (cf PEP 429).</span><span class="hljs-string">Collecting flask (from -r requirements.txt (line 1))</span><span class="hljs-string">  Downloading https://files.pythonhosted.org/packages/d8/94/7350820ae209ccdba073f83220cea1c376f2621254d1e0e82609c9a65e58/Flask-1.0.4-py2.py3-none-any.whl (92kB)</span><span class="hljs-string">Collecting redis (from -r requirements.txt (line 2))</span><span class="hljs-string">  Downloading https://files.pythonhosted.org/packages/32/ae/28613a62eea0d53d3db3147f8715f90da07667e99baeedf1010eb400f8c0/redis-3.3.11-py2.py3-none-any.whl (66kB)</span><span class="hljs-string">Collecting Werkzeug&gt;=0.14 (from flask-&gt;-r requirements.txt (line 1))</span><span class="hljs-string">  Downloading https://files.pythonhosted.org/packages/c2/e4/a859d2fe516f466642fa5c6054fd9646271f9da26b0cac0d2f37fc858c8f/Werkzeug-0.16.1-py2.py3-none-any.whl (327kB)</span><span class="hljs-string">Collecting itsdangerous&gt;=0.24 (from flask-&gt;-r requirements.txt (line 1))</span><span class="hljs-string">  Downloading https://files.pythonhosted.org/packages/76/ae/44b03b253d6fade317f32c24d100b3b35c2239807046a4c953c7b89fa49e/itsdangerous-1.1.0-py2.py3-none-any.whl</span><span class="hljs-string">Collecting Jinja2&gt;=2.10 (from flask-&gt;-r requirements.txt (line 1))</span><span class="hljs-string">  Downloading https://files.pythonhosted.org/packages/65/e0/eb35e762802015cab1ccee04e8a277b03f1d8e53da3ec3106882ec42558b/Jinja2-2.10.3-py2.py3-none-any.whl (125kB)</span><span class="hljs-string">Collecting click&gt;=5.1 (from flask-&gt;-r requirements.txt (line 1))</span><span class="hljs-string">  Downloading https://files.pythonhosted.org/packages/fa/37/45185cb5abbc30d7257104c434fe0b07e5a195a6847506c074527aa599ec/Click-7.0-py2.py3-none-any.whl (81kB)</span><span class="hljs-string">Collecting MarkupSafe&gt;=0.23 (from Jinja2&gt;=2.10-&gt;flask-&gt;-r requirements.txt (line 1))</span><span class="hljs-string">  Downloading https://files.pythonhosted.org/packages/b9/2e/64db92e53b86efccfaea71321f597fa2e1b2bd3853d8ce658568f7a13094/MarkupSafe-1.1.1.tar.gz</span><span class="hljs-string">Building wheels for collected packages: MarkupSafe</span><span class="hljs-string">  Building wheel for MarkupSafe (setup.py): started</span><span class="hljs-string">  Building wheel for MarkupSafe (setup.py): finished with status &#x27;</span><span class="hljs-keyword">done</span><span class="hljs-string">&#x27;</span><span class="hljs-string">  Stored in directory: /root/.cache/pip/wheels/f2/aa/04/0edf07a1b8a5f5f1aed7580fffb69ce8972edc16a505916a77</span><span class="hljs-string">Successfully built MarkupSafe</span><span class="hljs-string">Installing collected packages: Werkzeug, itsdangerous, MarkupSafe, Jinja2, click, flask, redis</span><span class="hljs-string">Successfully installed Jinja2-2.10.3 MarkupSafe-1.1.1 Werkzeug-0.16.1 click-7.0 flask-1.0.4 itsdangerous-1.1.0 redis-3.3.11</span><span class="hljs-string">You are using pip version 19.0.3, however version 19.1.1 is available.</span><span class="hljs-string">You should consider upgrading via the &#x27;</span>pip install --upgrade pip<span class="hljs-string">&#x27; command.</span><span class="hljs-string">Removing intermediate container ba41aa887b15</span><span class="hljs-string"> ---&gt; 7b1ad6caceb8</span><span class="hljs-string">Step 5/5 : CMD [&quot;python&quot;, &quot;app.py&quot;]</span><span class="hljs-string"> ---&gt; Running in 268e39050c88</span><span class="hljs-string">Removing intermediate container 268e39050c88</span><span class="hljs-string"> ---&gt; f2c090352f6d</span><span class="hljs-string"></span><span class="hljs-string">Successfully built f2c090352f6d</span><span class="hljs-string">Successfully tagged counter-app_web-fe:latest</span><span class="hljs-string">WARNING: Image for service web-fe was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.</span><span class="hljs-string">Pulling redis (redis:alpine)...</span><span class="hljs-string">alpine: Pulling from library/redis</span><span class="hljs-string">c9b1b535fdd9: Already exists</span><span class="hljs-string">8dd5e7a0ba4a: Pull complete</span><span class="hljs-string">e20c1cdf5aef: Pull complete</span><span class="hljs-string">25131c35a099: Pull complete</span><span class="hljs-string">bd7c9740b22d: Pull complete</span><span class="hljs-string">d4f86850c303: Pull complete</span><span class="hljs-string">Creating counter-app_redis_1  ... done</span><span class="hljs-string">Creating counter-app_web-fe_1 ... done</span><span class="hljs-string">Attaching to counter-app_web-fe_1, counter-app_redis_1</span><span class="hljs-string">redis_1   | 1:C 19 Mar 2020 10:10:01.123 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><span class="hljs-string">redis_1   | 1:C 19 Mar 2020 10:10:01.123 # Redis version=5.0.8, bits=64, commit=00000000, modified=0, pid=1, just started</span><span class="hljs-string">redis_1   | 1:C 19 Mar 2020 10:10:01.123 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span><span class="hljs-string">redis_1   | 1:M 19 Mar 2020 10:10:01.125 * Running mode=standalone, port=6379.</span><span class="hljs-string">redis_1   | 1:M 19 Mar 2020 10:10:01.125 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><span class="hljs-string">redis_1   | 1:M 19 Mar 2020 10:10:01.125 # Server initialized</span><span class="hljs-string">redis_1   | 1:M 19 Mar 2020 10:10:01.126 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;</span>vm.overcommit_memory = 1<span class="hljs-string">&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;</span>sysctl vm.overcommit_memory=1<span class="hljs-string">&#x27; for this to take effect.</span><span class="hljs-string">web-fe_1  |  * Serving Flask app &quot;app&quot; (lazy loading)</span><span class="hljs-string">web-fe_1  |  * Environment: production</span><span class="hljs-string">web-fe_1  |    WARNING: This is a development server. Do not use it in a production deployment.</span><span class="hljs-string">web-fe_1  |    Use a production WSGI server instead.</span><span class="hljs-string">web-fe_1  |  * Debug mode: on</span><span class="hljs-string">web-fe_1  |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)</span><span class="hljs-string">web-fe_1  |  * Restarting with stat</span><span class="hljs-string">web-fe_1  |  * Debugger is active!</span><span class="hljs-string">web-fe_1  |  * Debugger PIN: 241-353-594</span><span class="hljs-string">web-fe_1  | xxx.xxx.xxx.x - - [19/Mar/2020 10:11:44] &quot;GET / HTTP/1.1&quot; 200 -</span></code></pre><p>默认情况下，docker-compose up会查找名为docker-compose.yml或docker-compose.yaml的Compose文件。也可以启动通过-f 参数来指定别的文件来启动</p><p><code>docker-compose -f prod-equus-bass.yml up</code></p><p>使用 -d 参数在后台启动应用</p><p>使用命令来终止Compose应用</p><pre><code class="hljs bash">$ docker container ls -qa686232b31153a981515f86992b5f3ca1259251e5f3afca98localhost:counter-app xxxx$ docker container stop $(docker container ls -qa)// 批量关闭redis_1   | 1:M 19 Mar 2020 10:10:01.127 * Ready to accept connectionsweb-fe_1  | xxx.xxx.xxx.xxx - - [19/Mar/2020 10:54:57] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 200 -redis_1   | 1:signal-handler (1584615486) Received SIGTERM scheduling shutdown...redis_1   | 1:M 19 Mar 2020 10:58:06.120 <span class="hljs-comment"># User requested shutdown...</span>redis_1   | 1:M 19 Mar 2020 10:58:06.120 * Saving the final RDB snapshot before exiting.686232b31153counter-app_web-fe_1 exited with code 0redis_1   | 1:M 19 Mar 2020 10:58:06.121 * DB saved on diskredis_1   | 1:M 19 Mar 2020 10:58:06.121 <span class="hljs-comment"># Redis is now ready to exit, bye bye...</span>a981515f86992b5f3ca1259251e5f3afca98counter-app_redis_1 exited with code 0localhost:counter-app xxxx$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</code></pre><p>Compose应用后台启动</p><pre><code class="hljs bash">$ docker-compose up -dStarting counter-app_web-fe_1 ... <span class="hljs-keyword">done</span>Starting counter-app_redis_1  ... <span class="hljs-keyword">done</span></code></pre><p>Docker Compose会将项目名称（counter-app）和Compose文件中定义的资源名（web-fe）连接起来，作为新构建的镜像的名称。Docker Compose部署的所有资源的名称都会遵循这一规范。</p><pre><code class="hljs bash">$ docker image lsREPOSITORY                                             TAG                 IMAGE ID            CREATED             SIZEcounter-app_web-fe                                     latest              f2c090352f6d        About an hour ago   84.5MB</code></pre><p>每个容器的名称都以<strong>项目名称（所在目录名称）为前缀</strong>。此外它们还都以一个<strong>数字为后缀</strong>用于标识容器实例序号—因为Docker Compose允许扩缩容。</p><pre><code class="hljs bash">$ docker container lsCONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                    NAMES686232b31153        counter-app_web-fe   <span class="hljs-string">&quot;python app.py&quot;</span>          About an hour ago   Up 10 seconds       0.0.0.0:5000-&gt;5000/tcp   counter-app_web-fe_1a981515f8699        redis:alpine         <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   About an hour ago   Up 10 seconds       6379/tcp                 counter-app_redis_1</code></pre><p>显示容器的网络与卷</p><pre><code class="hljs bash">$ docker network lsNETWORK ID          NAME                      DRIVER              SCOPEdb8fbbb6664e        bridge                    bridge              <span class="hljs-built_in">local</span>456f16f998df        counter-app_counter-net   bridge              <span class="hljs-built_in">local</span>fd0e04e21a2a        host                      host                <span class="hljs-built_in">local</span>e6370760945d        none                      null                <span class="hljs-built_in">local</span>localhost:counter-app xxxx$ docker volume lsDRIVER              VOLUME NAME....<span class="hljs-built_in">local</span>               counter-app_counter-vol....</code></pre><h3 id="使用Docker-Compose管理应用"><a href="#使用Docker-Compose管理应用" class="headerlink" title="使用Docker Compose管理应用"></a>使用Docker Compose管理应用</h3><h4 id="停止应用"><a href="#停止应用" class="headerlink" title="停止应用"></a>停止应用</h4><p><code>docker-compose down</code></p><pre><code class="hljs bash">$ docker-compose downStopping counter-app_web-fe_1 ... Stopping counter-app_redis_1  ... redis_1   | 1:M 19 Mar 2020 11:28:00.922 * Ready to accept connectionsredis_1   | 1:signal-handler (1584617313) Received SIGTERM scheduling shutdown...redis_1   | 1:M 19 Mar 2020 11:28:33.848 <span class="hljs-comment"># User requested shutdown...</span>redis_1   | 1:M 19 Mar 2020 11:28:33.848 * Saving the final RDB snapshot before exiting.web-fe_1  | 192.168.99.1 - - [19/Mar/2020 11:28:15] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 200 -Stopping counter-app_web-fe_1 ... <span class="hljs-keyword">done</span>redis_1   | 1:M 19 Mar 2020 11:28:33.849 <span class="hljs-comment"># Redis is now ready to exit, bye bye...</span>Stopping counter-app_redis_1  ... <span class="hljs-keyword">done</span>counter-app_redis_1 exited with code 0Removing counter-app_web-fe_1 ... <span class="hljs-keyword">done</span>Removing counter-app_redis_1  ... <span class="hljs-keyword">done</span>Removing network counter-app_counter-net</code></pre><p>停止应用时，应用的卷counter-vol并没有被删除，因为卷应该是用于数据的长期持久化存储的。因此，卷的生命周期是与相应的容器完全解耦的。执行$ docker volume ls发现，该卷依然存在于系统中。写到卷上的所有数据都会保存上。再次执行docker-compose up过程中拉取或构建的镜像也会保留在系统中。因此，再次部署该应用将更加快捷。</p><h4 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h4><p><code>docker-compose up -d</code></p><pre><code class="hljs bash">$ docker-compose up -dCreating network <span class="hljs-string">&quot;counter-app_counter-net&quot;</span> with the default driverCreating counter-app_web-fe_1 ... <span class="hljs-keyword">done</span>Creating counter-app_redis_1  ... <span class="hljs-keyword">done</span>[1]+  Done                    docker-compose up</code></pre><p>再次启动时，发现counter-vol卷已经存在，而且不需要去拉取和构建镜像。启动速度变快。</p><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><p><code>docker-compose ps</code></p><pre><code class="hljs bash">$ docker-compose ps        Name                      Command               State           Ports         --------------------------------------------------------------------------------------counter-app_redis_1    docker-entrypoint.sh redis ...   Up      6379/tcp              counter-app_web-fe_1   python app.py                    Up      0.0.0.0:5000-&gt;5000/tcp</code></pre><h4 id="列出进程"><a href="#列出进程" class="headerlink" title="列出进程"></a>列出进程</h4><p><code>docker-compose top</code></p><pre><code class="hljs bash">$ docker-compose topcounter-app_redis_1UID   PID    PPID   C   STIME   TTY     TIME         CMD     -------------------------------------------------------------999   4928   4898   0   11:47   ?     00:00:00   redis-servercounter-app_web-fe_1UID    PID    PPID   C   STIME   TTY     TIME                    CMD                ------------------------------------------------------------------------------------root   4953   4912   0   11:47   ?     00:00:00   python app.py                     root   5068   4953   0   11:47   ?     00:00:00   /usr/<span class="hljs-built_in">local</span>/bin/python /code/app.py</code></pre><p>停止应用</p><p><code>docker-compose stop</code></p><pre><code class="hljs bash">$ docker-compose stopStopping counter-app_redis_1  ... <span class="hljs-keyword">done</span>Stopping counter-app_web-fe_1 ... <span class="hljs-keyword">done</span>localhost:counter-app xxxx$ docker-compose ps        Name                      Command               State    Ports----------------------------------------------------------------------counter-app_redis_1    docker-entrypoint.sh redis ...   Exit 0        counter-app_web-fe_1   python app.py                    Exit 0</code></pre><p>停止Compose应用并不会在系统中删除对应用的定义，而仅将应用的容器停止。</p><pre><code class="hljs bash">$ docker container ls -aCONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS                      PORTS                  NAMES97e38bcf6f7f        redis:alpine                         <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   21 minutes ago      Exited (0) 5 minutes ago                           counter-app_redis_1d30a05ed10a1        counter-app_web-fe                   <span class="hljs-string">&quot;python app.py&quot;</span>          21 minutes ago      Exited (0) 5 minutes ago                           counter-app_web-fe_1</code></pre><h4 id="重启应用"><a href="#重启应用" class="headerlink" title="重启应用"></a>重启应用</h4><p><code>docker-compose restart</code></p><pre><code class="hljs bash">$ docker-compose restartRestarting counter-app_redis_1  ... <span class="hljs-keyword">done</span>Restarting counter-app_web-fe_1 ... <span class="hljs-keyword">done</span>localhost:counter-app xxxx$ docker container lsCONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                    NAMES97e38bcf6f7f        redis:alpine         <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   23 minutes ago      Up 3 seconds        6379/tcp                 counter-app_redis_1d30a05ed10a1        counter-app_web-fe   <span class="hljs-string">&quot;python app.py&quot;</span>          23 minutes ago      Up 3 seconds        0.0.0.0:5000-&gt;5000/tcp   counter-app_web-fe_1// 或者$ docker-compose ps        Name                      Command               State           Ports         --------------------------------------------------------------------------------------counter-app_redis_1    docker-entrypoint.sh redis ...   Up      6379/tcp              counter-app_web-fe_1   python app.py                    Up      0.0.0.0:5000-&gt;5000/tcp</code></pre><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker应用的容器化</title>
    <link href="/2020/03/18/docker-containerizing/"/>
    <url>/2020/03/18/docker-containerizing/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker应用的容器化"><a href="#Docker应用的容器化" class="headerlink" title="Docker应用的容器化"></a>Docker应用的容器化</h2><p>Docker的核心思想就是如何将应用整合到容器中，并且能在容器中实际运行。<br>将应用整合到容器中并且运行起来的这个过程，称为“容器化”（Containerizing），有时也叫作“Docker化”（Dockerizing）。</p><p>容器是为应用而生！容器能够简化应用的构建、部署和运行过程。</p><ul><li>编写应用代码</li><li>创建一个Dockerfile，其中包括当前应用的描述、依赖以及该如何运行这个应用</li><li>对该Dockerfile执行docker image build命令</li><li>等待Docker将应用程序构建到Docker镜像中</li></ul><p>一旦应用容器化完成（打包成一个Docker镜像），就能以镜像的方式交付并以容器的方式运行了。</p><h3 id="单体应用容器化"><a href="#单体应用容器化" class="headerlink" title="单体应用容器化"></a>单体应用容器化</h3><ol><li>获取应用代码</li><li>分析Dockerfile</li><li>构建应用镜像</li><li>运行该应用</li><li>测试应用</li><li>容器应用化细节</li><li>生产环境中的多阶段构建</li><li>最佳实践</li></ol><p>Dockfile——这个文件包含了对当前应用的描述，并且能指导Docker完成镜像的构建。<br>构建上下文——在Docker当中，包含应用文件的目录通常称为构建上下文（Build Context）。通常将Dockerfile放到构建上下文的根目录下。</p><pre><code class="hljs dockerfile">$ cat Dockerfile<span class="hljs-comment"># Test web-app to use with Pluralsight courses and Docker Deep Dive book</span><span class="hljs-comment"># Linux x64</span><span class="hljs-keyword">FROM</span> alpine<span class="hljs-keyword">LABEL</span><span class="bash"> maintainer=<span class="hljs-string">&quot;nigelpoulton@hotmail.com&quot;</span></span><span class="hljs-comment"># Install Node and NPM</span><span class="hljs-keyword">RUN</span><span class="bash"> apk add --update nodejs nodejs-npm</span><span class="hljs-comment"># Copy app to /src</span><span class="hljs-keyword">COPY</span><span class="bash"> . /src</span><span class="hljs-keyword">WORKDIR</span><span class="bash"> /src</span><span class="hljs-comment"># Install dependencies</span><span class="hljs-keyword">RUN</span><span class="bash">  npm install</span><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;node&quot;</span>, <span class="hljs-string">&quot;./app.js&quot;</span>]</span></code></pre><p>FROM指令指定的镜像，会作为当前镜像的一个基础镜像层，当前应用的剩余内容会作为新增镜像层添加到基础镜像层之上。<br>LABEL标签方式指定了当前镜像的维护者。<br>RUN指令会在FROM指定的alpine基础镜像之上，新建一个镜像层来存储这些安装内容。<br>COPY . /src指令将应用相关文件从构建上下文复制到了当前镜像中，并且新建一个镜像层来存储。<br>WORKDIR指令为Dockerfile中尚未执行的指令设置工作目录。<br>RUN指令会安装依赖，在设置的工作目录中执行，在镜像中新建镜像层来保存相应的依赖文件。<br>EXPOSE指令来完成相应端口的设置。<br>ENTRYPOINT指令来指定当前镜像的入口程序。</p><h3 id="容器化当前应用"><a href="#容器化当前应用" class="headerlink" title="容器化当前应用"></a>容器化当前应用</h3><pre><code class="hljs bash">$ docker image build -t web:latest .Sending build context to Docker daemon  10.24kBStep 1/8 : FROM alpine ---&gt; e7d92cdc71feStep 2/8 : LABEL maintainer=<span class="hljs-string">&quot;nigelpoulton@hotmail.com&quot;</span> ---&gt; Running <span class="hljs-keyword">in</span> f0429b44c728Removing intermediate container f0429b44c728 ---&gt; 480c0e286f41Step 3/8 : RUN apk add --update nodejs nodejs-npm ---&gt; Running <span class="hljs-keyword">in</span> 2ea8291a9c93fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/main/x86_64/APKINDEX.tar.gzfetch http://dl-cdn.alpinelinux.org/alpine/v3.11/community/x86_64/APKINDEX.tar.gz(1/8) Installing ca-certificates (20191127-r1)(2/8) Installing c-ares (1.15.0-r0)(3/8) Installing libgcc (9.2.0-r3)(4/8) Installing nghttp2-libs (1.40.0-r0)(5/8) Installing libstdc++ (9.2.0-r3)(6/8) Installing libuv (1.34.0-r0)(7/8) Installing nodejs (12.15.0-r1)(8/8) Installing npm (12.15.0-r1)Executing busybox-1.31.1-r9.triggerExecuting ca-certificates-20191127-r1.triggerOK: 64 MiB <span class="hljs-keyword">in</span> 22 packagesRemoving intermediate container 2ea8291a9c93 ---&gt; fa0d1c42c45dStep 4/8 : COPY . /src ---&gt; 3b1b01e51d16Step 5/8 : WORKDIR /src ---&gt; Running <span class="hljs-keyword">in</span> 6c3d53d9f756Removing intermediate container 6c3d53d9f756 ---&gt; ad8ccb0f4716Step 6/8 : RUN  npm install ---&gt; Running <span class="hljs-keyword">in</span> 46d8a8488130npm WARN deprecated json3@3.3.2: Please use the native JSON object instead of JSON 3npm WARN deprecated core-js@2.6.11: core-js@&lt;3 is no longer maintained and not recommended <span class="hljs-keyword">for</span> usage due to the number of issues. Please, upgrade your dependencies to the actual version of core-js@3.&gt; core-js@2.6.11 postinstall /src/node_modules/core-js&gt; node -e <span class="hljs-string">&quot;try&#123;require(&#x27;./postinstall&#x27;)&#125;catch(e)&#123;&#125;&quot;</span>Thank you <span class="hljs-keyword">for</span> using core-js ( https://github.com/zloirock/core-js ) <span class="hljs-keyword">for</span> polyfilling JavaScript standard library!The project needs your <span class="hljs-built_in">help</span>! Please consider supporting of core-js on Open Collective or Patreon: &gt; https://opencollective.com/core-js &gt; https://www.patreon.com/zloirock Also, the author of core-js ( https://github.com/zloirock ) is looking <span class="hljs-keyword">for</span> a good job -)npm notice created a lockfile as package-lock.json. You should commit this file.added 163 packages from 460 contributors and audited 262 packages <span class="hljs-keyword">in</span> 18.93s4 packages are looking <span class="hljs-keyword">for</span> funding  run `npm fund` <span class="hljs-keyword">for</span> detailsfound 5 vulnerabilities (2 low, 2 moderate, 1 critical)  run `npm audit fix` to fix them, or `npm audit` <span class="hljs-keyword">for</span> detailsRemoving intermediate container 46d8a8488130 ---&gt; fbd86f0eea99Step 7/8 : EXPOSE 8080 ---&gt; Running <span class="hljs-keyword">in</span> ea7262f068c0Removing intermediate container ea7262f068c0 ---&gt; 0f4af4a14d13Step 8/8 : ENTRYPOINT [<span class="hljs-string">&quot;node&quot;</span>, <span class="hljs-string">&quot;./app.js&quot;</span>] ---&gt; Running <span class="hljs-keyword">in</span> 15e56cd7d5edRemoving intermediate container 15e56cd7d5ed ---&gt; 8a31255e74a1Successfully built 8a31255e74a1Successfully tagged web:latest$ docker image lsREPOSITORY                                             TAG                 IMAGE ID            CREATED              SIZEweb                                                    latest              8a31255e74a1        About a minute ago   76.2MB$ docker image inspect web:latest// 确认刚刚构建的镜像配置是否正确，列出Dockerfile中设置的所有配置项。</code></pre><h3 id="推送镜像到仓库"><a href="#推送镜像到仓库" class="headerlink" title="推送镜像到仓库"></a>推送镜像到仓库</h3><p>登录到Docker Hub</p><pre><code class="hljs bash">$ docker loginLogin with your Docker ID to push and pull images from Docker Hub. If you don<span class="hljs-string">&#x27;t have a Docker ID, head over to https://hub.docker.com to create one.</span><span class="hljs-string">Username: yourname</span><span class="hljs-string">Password: </span><span class="hljs-string">Error saving credentials: error storing credentials - err: exec: &quot;docker-credential-osxkeychain&quot;: executable file not found in $PATH, out: ``</span><span class="hljs-string"></span><span class="hljs-string">// rm ~/.docker/config.json.</span><span class="hljs-string">// 可以解决上述错误</span><span class="hljs-string"></span><span class="hljs-string">localhost:psweb zhuyangze$ docker login</span><span class="hljs-string">Login with your Docker ID to push and pull images from Docker Hub. If you don&#x27;</span>t have a Docker ID, head over to https://hub.docker.com to create one.Username: yournamePassword: WARNING! Your password will be stored unencrypted <span class="hljs-keyword">in</span> /Users/xxxx/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/<span class="hljs-comment">#credentials-store</span>Login Succeeded</code></pre><p>推送Docker镜像之前，不需要为镜像打标签，Docker在镜像推送过程中需要如下信息：</p><ul><li>Registry（镜像仓库服务），默认值：docker.io</li><li>Repository（镜像仓库），无默认值</li><li>Tag（镜像标签），默认值：latest</li></ul><h4 id="为镜像打标签"><a href="#为镜像打标签" class="headerlink" title="为镜像打标签"></a>为镜像打标签</h4><p><code>docker image tag &lt;current-tag&gt; &lt;new-tag&gt;</code><br>为指定的镜像添加一个额外的标签，并且不需要覆盖已经存在的标签。</p><pre><code class="hljs bash">$ docker image tag web:latest mrlingchen/web:latestlocalhost:psweb xxxx$ docker image lsREPOSITORY                                             TAG                 IMAGE ID            CREATED             SIZEweb                                                    latest              8a31255e74a1        32 minutes ago      76.2MBmrlingchen/web                                         latest              8a31255e74a1        32 minutes ago      76.2MB</code></pre><p>推送镜像到Docker Hub</p><pre><code class="hljs bash">$ docker image push mrlingchen/web:latestThe push refers to repository [docker.io/mrlingchen/web]3c826da67148: Pushed 517a19fd4267: Pushed 433c1223c0c0: Pushed 5216338b40a7: Mounted from library/alpine latest: digest: sha256:3b623c4fc25f83b0e96d863c7d60064e19727e4aa557d220263126f65ad668da size: 1159</code></pre><p>Dockerfile文件中指令是<strong>不区分大小写</strong>的，但是通常都是采用大写的方式。这样的Dockerfile的可读性会高一些。<br>Docker image build命令会按行来解析Dockerfile中的指令并顺序执行。<br>关于如何区分命令是否会新建镜像层，一个基本的原则是，如果指令的作用是向镜像中增添新的文件或者程序，那么这条指令就会新建镜像层；如果只是告诉Docker如何完成构建或者如何运行应用程序，那么就只会增加镜像的元数据。</p><h3 id="查看构建镜像过程"><a href="#查看构建镜像过程" class="headerlink" title="查看构建镜像过程"></a>查看构建镜像过程</h3><p><code>docker image history</code></p><pre><code class="hljs bash">$ docker image <span class="hljs-built_in">history</span> web:latestIMAGE               CREATED             CREATED BY                                      SIZE                COMMENT8a31255e74a1        24 hours ago        /bin/sh -c <span class="hljs-comment">#(nop)  ENTRYPOINT [&quot;node&quot; &quot;./app…   0B                  </span>0f4af4a14d13        24 hours ago        /bin/sh -c <span class="hljs-comment">#(nop)  EXPOSE 8080                  0B                  </span>fbd86f0eea99        24 hours ago        /bin/sh -c npm install                          20.7MB              ad8ccb0f4716        24 hours ago        /bin/sh -c <span class="hljs-comment">#(nop) WORKDIR /src                  0B                  </span>3b1b01e51d16        24 hours ago        /bin/sh -c <span class="hljs-comment">#(nop) COPY dir:a1bb21301f1b629e0…   2.29kB              </span>fa0d1c42c45d        24 hours ago        /bin/sh -c apk add --update nodejs nodejs-npm   49.9MB              480c0e286f41        24 hours ago        /bin/sh -c <span class="hljs-comment">#(nop)  LABEL maintainer=nigelpou…   0B                  </span>e7d92cdc71fe        2 months ago        /bin/sh -c <span class="hljs-comment">#(nop)  CMD [&quot;/bin/sh&quot;]              0B                  </span>&lt;missing&gt;           2 months ago        /bin/sh -c <span class="hljs-comment">#(nop) ADD file:e69d441d729412d24…   5.59MB</span>// size不为0的行，指令会新建镜像层，size为0的行只是在镜像中新增了元数据信息</code></pre><p><code>docker image inspect</code>命令也会确认出新建的镜像层</p><pre><code class="hljs bash">$ docker image inspect web:latest...<span class="hljs-string">&quot;RootFS&quot;</span>: &#123;            <span class="hljs-string">&quot;Type&quot;</span>: <span class="hljs-string">&quot;layers&quot;</span>,            <span class="hljs-string">&quot;Layers&quot;</span>: [                <span class="hljs-string">&quot;sha256:5216338b40a7b96416b8b9858974bbe4acc3096ee60acbc4dfb1ee02aecceb10&quot;</span>,                <span class="hljs-string">&quot;sha256:433c1223c0c01ced5f0e3e6af341d360c54c98d368210c2cee38da91b42a3dda&quot;</span>,                <span class="hljs-string">&quot;sha256:517a19fd426774ed21a6b147880cf80fdc215d2e18f4af16687a7b9bf65e0b89&quot;</span>,                <span class="hljs-string">&quot;sha256:3c826da671482f888974a97a0176c3dc7ea3c88b4651c278f40f73c9419001b6&quot;</span>            ]        &#125;,...</code></pre><h3 id="生产环境中的多阶段构建"><a href="#生产环境中的多阶段构建" class="headerlink" title="生产环境中的多阶段构建"></a>生产环境中的多阶段构建</h3><p>对于Docker镜像来说，过大的体积并不好。<br>越大则越慢，这就意味着更难使用，而且可能更加脆弱，更容易遭受攻击。<br>Docker镜像应该尽量小。对于生产环境镜像来说，目标是将其缩小到仅包含运行应用所必需的内容即可。</p><p>建造者模式（Builder Pattern）</p><p>开发者通常不会在构建完成后进行清理。<br>建造者模式需要至少两个Dockerfile，一个用于开发环境，一个用于生产环境。<br><strong>多阶段构建（Multi-Stage Build）</strong>是一种更好的方式！<br>多阶段构建能够在不增加复杂性的情况下优化构建过程。</p><pre><code class="hljs bash">$ cat Dockerfile<span class="hljs-comment"># 阶段一</span>FROM node:latest AS storefrontWORKDIR /usr/src/atsea/app/react-appCOPY react-app .RUN npm installRUN npm run build<span class="hljs-comment"># 阶段二</span>FROM maven:latest AS appserverWORKDIR /usr/src/atseaCOPY pom.xml .RUN mvn -B -f pom.xml -s /usr/share/maven/ref/settings-docker.xml dependency:resolveCOPY . .RUN mvn -B -s /usr/share/maven/ref/settings-docker.xml package -DskipTests<span class="hljs-comment"># 阶段三</span>FROM java:8-jdk-alpineRUN adduser -Dh /home/gordon gordonWORKDIR /staticCOPY --from=storefront /usr/src/atsea/app/react-app/build/ .WORKDIR /appCOPY --from=appserver /usr/src/atsea/target/AtSea-0.0.1-SNAPSHOT.jar .ENTRYPOINT [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/app/AtSea-0.0.1-SNAPSHOT.jar&quot;</span>]CMD [<span class="hljs-string">&quot;--spring.profiles.active=postgres&quot;</span>]</code></pre><p>构建命令</p><pre><code class="hljs bash">$ docker image build -t multi:stage .</code></pre><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>containerizing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker容器</title>
    <link href="/2020/03/17/docker-container/"/>
    <url>/2020/03/17/docker-container/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h2><p>容器是镜像的运行时实例。<br>虚拟机和容器最大的区别是容器更快并且更轻量级—与虚拟机运行在完整的操作系统之上相比，容器会共享其所在主机的操作系统/内核。</p><p>启动容器的简便方式</p><pre><code class="hljs bash">$ docker container run &lt;image&gt; &lt;app&gt;$ docker container run -it &lt;image&gt; &lt;app&gt;// -it参数可以将当前终端连接到容器的Shell终端之上。</code></pre><p>容器会随着其中运行应用的退出而终止</p><pre><code class="hljs bash">$ docker container run alpine:latest sleep 10// Shell会连接到容器Shell 10s的时间，然后退出</code></pre><p>容器是操作系统虚拟化（OS Virtualization）—容器将系统资源划分为虚拟资源。</p><p>容器启动唯一需要确定的是位于容器下层操作系统的共享内核是启动的，容器可以在1s内启动。唯一对容器启动时间有影响的就是容器内应用启动所花费的时间。</p><h3 id="运行的容器"><a href="#运行的容器" class="headerlink" title="运行的容器"></a>运行的容器</h3><pre><code class="hljs bash">$ docker versionClient: Docker Engine - Community Version:           18.09.2 API version:       1.39 Go version:        go1.10.8 Git commit:        6247962 Built:             Sun Feb 10 04:12:39 2019 OS/Arch:           darwin/amd64 Experimental:      <span class="hljs-literal">false</span>Server: Docker Engine - Community Engine:  Version:          18.09.2  API version:      1.39 (minimum version 1.12)  Go version:       go1.10.6  Git commit:       6247962  Built:            Sun Feb 10 04:20:28 2019  OS/Arch:          linux/amd64  Experimental:     <span class="hljs-literal">false</span></code></pre><p>启动容器</p><pre><code class="hljs bash">$ docker container run -it ubuntu:latest /bin/bashroot@128ad43e07d9:/<span class="hljs-comment"># ls -l</span>total 64drwxr-xr-x   2 root root 4096 Feb  4  2019 bindrwxr-xr-x   2 root root 4096 Apr 24  2018 bootdrwxr-xr-x   5 root root  360 Mar 17 08:11 devdrwxr-xr-x   1 root root 4096 Mar 17 08:11 etcdrwxr-xr-x   2 root root 4096 Apr 24  2018 homedrwxr-xr-x   8 root root 4096 May 23  2017 libdrwxr-xr-x   2 root root 4096 Feb  4  2019 lib64drwxr-xr-x   2 root root 4096 Feb  4  2019 mediadrwxr-xr-x   2 root root 4096 Feb  4  2019 mntdrwxr-xr-x   2 root root 4096 Feb  4  2019 optdr-xr-xr-x 131 root root    0 Mar 17 08:11 procdrwx------   2 root root 4096 Feb  4  2019 rootdrwxr-xr-x   1 root root 4096 Feb  6  2019 rundrwxr-xr-x   1 root root 4096 Feb  6  2019 sbindrwxr-xr-x   2 root root 4096 Feb  4  2019 srvdr-xr-xr-x  13 root root    0 Mar 17 08:11 sysdrwxrwxrwt   2 root root 4096 Feb  4  2019 tmpdrwxr-xr-x   1 root root 4096 Feb  4  2019 usrdrwxr-xr-x   1 root root 4096 Feb  4  2019 varroot@128ad43e07d9:/<span class="hljs-comment"># ping www.docker.com</span>bash: ping: <span class="hljs-built_in">command</span> not found// ping工具包并不是官方Ubuntu镜像的一部分</code></pre><h4 id="启动容器命令"><a href="#启动容器命令" class="headerlink" title="启动容器命令"></a>启动容器命令</h4><pre><code class="hljs bash">$ docker container run &lt;options&gt; &lt;im- age&gt;:&lt;tag&gt; &lt;app&gt;// -it参数使容器具备交互性并与终端进行连接</code></pre><h3 id="容器进程"><a href="#容器进程" class="headerlink" title="容器进程"></a>容器进程</h3><pre><code class="hljs bash">root@128ad43e07d9:/<span class="hljs-comment"># ps -elf</span>F S UID        PID  PPID  C PRI  NI ADDR SZ WCHAN  STIME TTY          TIME CMD4 S root         1     0  0  80   0 -  4627 -      08:11 pts/0    00:00:00 /bin/bash4 R root        12     1  0  80   0 -  8600 -      08:17 pts/0    00:00:00 ps -elf// PID为1的进程是容器被告知要运行的Bash Shell，也是容器中运行的唯一运行的进程。</code></pre><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><pre><code class="hljs bash">root@128ad43e07d9:/<span class="hljs-comment"># exit</span><span class="hljs-built_in">exit</span>localhost:~ xxxx$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES// 容器如果不运行任何进程则无法存在</code></pre><p>退出容器而不终止容器，Ctrl + PQ  组合键</p><pre><code class="hljs bash">$ docker container run -it ubuntu:latest /bin/bashroot@0625ac544fde:/<span class="hljs-comment"># localhost:~ xxxx$ docker container ls</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES0625ac544fde        ubuntu:latest       <span class="hljs-string">&quot;/bin/bash&quot;</span>         20 seconds ago      Up 19 seconds                           elegant_diffie$ docker container <span class="hljs-built_in">exec</span> -it 0625ac544fde bashroot@0625ac544fde:/<span class="hljs-comment"># </span>// 重新连接到运行中的容器root@0625ac544fde:/<span class="hljs-comment"># ps -elf</span>F S UID        PID  PPID  C PRI  NI ADDR SZ WCHAN  STIME TTY          TIME CMD4 S root         1     0  0  80   0 -  4627 -      08:22 pts/0    00:00:00 /bin/bash4 S root        10     0  0  80   0 -  4627 -      08:24 pts/1    00:00:00 bash4 R root        19    10  0  80   0 -  8600 -      08:26 pts/1    00:00:00 ps -elf// docker container <span class="hljs-built_in">exec</span>命令创建了新的bashroot@0625ac544fde:/<span class="hljs-comment"># exit</span><span class="hljs-built_in">exit</span>localhost:~ xxxx$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES0625ac544fde        ubuntu:latest       <span class="hljs-string">&quot;/bin/bash&quot;</span>         5 minutes ago       Up 5 minutes                            elegant_diffie// 此时退出，容器中还有一个运行的bash进程，容器不会终止。</code></pre><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><pre><code class="hljs bash">localhost:~ xxxx$ docker container stop 0625ac544fde0625ac544fdelocalhost:~ xxxx$ docker container psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</code></pre><h3 id="容器生命周期"><a href="#容器生命周期" class="headerlink" title="容器生命周期"></a>容器生命周期</h3><p>关注容器的生命周期—从创建、运行、休眠，直至销毁的整个过程</p><pre><code class="hljs bash">$ docker container run --name percy -it ubuntu:latest /bin/bash// 创建容器root@87f5c7df3bd3:/<span class="hljs-comment"># cd tmp/</span>root@87f5c7df3bd3:/tmp<span class="hljs-comment"># ls -l</span>total 0root@87f5c7df3bd3:/tmp<span class="hljs-comment"># echo &quot;DevOps FTW&quot; &gt; newfile</span>root@87f5c7df3bd3:/tmp<span class="hljs-comment"># ls -l</span>total 4-rw-r--r-- 1 root root 11 Mar 17 08:36 newfileroot@87f5c7df3bd3:/tmp<span class="hljs-comment"># cat newfile </span>DevOps FTWroot@87f5c7df3bd3:/tmp<span class="hljs-comment"># </span>// Ctrl—PQ 组合键，退出容器localhost:~ xxxx$ docker container psCONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS               NAMES87f5c7df3bd3        ubuntu:latest       <span class="hljs-string">&quot;/bin/bash&quot;</span>         About a minute ago   Up About a minute                       percylocalhost:~ xxxx$ docker container stop percy// 停止容器percylocalhost:~ xxxx$ docker container psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMESlocalhost:~ xxxx$ docker container ls -a// -a 参数显示出全部的容器，包括处于停止状态的和运行状态的。CONTAINER ID        IMAGE                                                  COMMAND                  CREATED             STATUS                         PORTS                                      NAMES87f5c7df3bd3        ubuntu:latest                                          <span class="hljs-string">&quot;/bin/bash&quot;</span>              2 minutes ago       Exited (0) 45 seconds ago                                                 percy$ docker container start percy// 将容器重启percylocalhost:~ xxxx$ docker container psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES87f5c7df3bd3        ubuntu:latest       <span class="hljs-string">&quot;/bin/bash&quot;</span>         8 minutes ago       Up 8 seconds                            percy$ docker container <span class="hljs-built_in">exec</span> -it percy /bin/bash// 连接容器root@87f5c7df3bd3:/<span class="hljs-comment"># cd tmp/</span>root@87f5c7df3bd3:/tmp<span class="hljs-comment"># ls -l</span>total 4-rw-r--r-- 1 root root 11 Mar 17 08:36 newfileroot@87f5c7df3bd3:/tmp<span class="hljs-comment"># cat newfile </span>DevOps FTW// 证明停止容器运行并不会损毁容器或者其中的数据—————容器的持久化特性<span class="hljs-comment"># exit</span><span class="hljs-built_in">exit</span>localhost:~ xxxx$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES87f5c7df3bd3        ubuntu:latest       <span class="hljs-string">&quot;/bin/bash&quot;</span>         13 minutes ago      Up 5 minutes                            percylocalhost:~ xxxx$ docker container stop percy// 停止容器percylocalhost:~ xxxx$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMESlocalhost:~ xxxx$ docker container rm percy// 删除容器percylocalhost:~ xxxx$ docker container ls -aCONTAINER ID        IMAGE                                                  COMMAND                  CREATED             STATUS                         PORTS                                      NAMES</code></pre><p>容器的生命周期：可以根据需要多次停止、启动、暂停以及重启容器，并且这些操作执行的很快。但是容器及其数据是安全的。直至明确删除容器前，容器都不会丢弃其中的数据。就算容器被删除了，如果将容器数据存储在卷中，数据也会被保存下来。</p><h3 id="容器重启策略"><a href="#容器重启策略" class="headerlink" title="容器重启策略"></a>容器重启策略</h3><p>容器支持的重启策略—always、unless-stopped和on-failed</p><pre><code class="hljs bash">$ docker container run --name neversaydie -it --restart always alpine sh/ <span class="hljs-comment"># exit</span>localhost:~ xxxx$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES11687455cb2a        alpine              <span class="hljs-string">&quot;sh&quot;</span>                25 seconds ago      Up 9 seconds                            neversaydie// Up 9 seconds 在容器中输入退出命令的同时的时候，容器被杀死，然后docker又重新启动了该容器。</code></pre><p>–restart always策略，当daemon重启的时候，停止的容器也会被重启。unless-stopped策略的容器则不会重启。</p><h3 id="删除所有容器"><a href="#删除所有容器" class="headerlink" title="删除所有容器"></a>删除所有容器</h3><pre><code class="hljs bash">$ docker container rm $(docker container ls -aq) -f// 谨慎使用$ docker container ls -aCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</code></pre><h3 id="Web服务器示例"><a href="#Web服务器示例" class="headerlink" title="Web服务器示例"></a>Web服务器示例</h3><pre><code class="hljs bash">$ docker container run -d --name webserver -p 80:8080 nigelpoulton/pluralsight-docker-ci// -d 参数表示后台模式，告知容器在后台运行// -p 80:8080 参数将Docker主机的端口映射到容器内的8080端口Unable to find image <span class="hljs-string">&#x27;nigelpoulton/pluralsight-docker-ci:latest&#x27;</span> locallylatest: Pulling from nigelpoulton/pluralsight-docker-ci729ec3a6ada3: Pull complete f0a3eea3dca0: Pull complete e07851c50ad6: Pull complete f78e7cd1f8dc: Pull complete 7cad1fbd2f07: Pull complete 22835c51693f: Pull complete Digest: sha256:61bc64850a5f2bfbc65967cc33feaae8a77c8b49379c55aaf05bb02dcee41451Status: Downloaded newer image <span class="hljs-keyword">for</span> nigelpoulton/pluralsight-docker-ci:latest51e5f3afca983b8170f1e21551c2f6e87f2cd627ea9d1931119573509a9fbc09localhost:hexo xxxx$ docker container lsCONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS              PORTS                  NAMES51e5f3afca98        nigelpoulton/pluralsight-docker-ci   <span class="hljs-string">&quot;/bin/sh -c &#x27;cd /src…&quot;</span>   2 minutes ago       Up 2 minutes        0.0.0.0:80-&gt;8080/tcp   webserver</code></pre><h4 id="查看docker-IP"><a href="#查看docker-IP" class="headerlink" title="查看docker IP"></a>查看docker IP</h4><pre><code class="hljs bash">$ docker-machine ip192.168.99.100http://192.168.99.100:80// 访问地址</code></pre><h4 id="查看容器详情"><a href="#查看容器详情" class="headerlink" title="查看容器详情"></a>查看容器详情</h4><pre><code class="hljs flix">$ docker image inspect nigelpoulton/pluralsight-docker-ci[    &#123;        <span class="hljs-string">&quot;Id&quot;</span>: <span class="hljs-string">&quot;sha256:dd7a37fe7c1e6f3b9bcd1c51cad0a54fde3f393ac458af3b009b2032978f599d&quot;</span>,        <span class="hljs-string">&quot;RepoTags&quot;</span>: [            <span class="hljs-string">&quot;nigelpoulton/pluralsight-docker-ci:latest&quot;</span>        ],        <span class="hljs-string">&quot;RepoDigests&quot;</span>: [            <span class="hljs-string">&quot;nigelpoulton/pluralsight-docker-ci@sha256:61bc64850a5f2bfbc65967cc33feaae8a77c8b49379c55aaf05bb02dcee41451&quot;</span>        ],        <span class="hljs-string">&quot;Parent&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,        <span class="hljs-string">&quot;Comment&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,        <span class="hljs-string">&quot;Created&quot;</span>: <span class="hljs-string">&quot;2020-01-18T15:29:24.3067368Z&quot;</span>,        <span class="hljs-string">&quot;Container&quot;</span>: <span class="hljs-string">&quot;5e6c8e135f3504d8cdbb3b0f4f7658018f7eafa99011bcb0252c34bad246844f&quot;</span>,        <span class="hljs-string">&quot;ContainerConfig&quot;</span>: &#123;            <span class="hljs-string">&quot;Hostname&quot;</span>: <span class="hljs-string">&quot;5e6c8e135f35&quot;</span>,            <span class="hljs-string">&quot;Domainname&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,            <span class="hljs-string">&quot;User&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,            <span class="hljs-string">&quot;AttachStdin&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-string">&quot;AttachStdout&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-string">&quot;AttachStderr&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-string">&quot;ExposedPorts&quot;</span>: &#123;                <span class="hljs-string">&quot;8080/tcp&quot;</span>: &#123;&#125;            &#125;,            <span class="hljs-string">&quot;Tty&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-string">&quot;OpenStdin&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-string">&quot;StdinOnce&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-string">&quot;Env&quot;</span>: [                <span class="hljs-string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span>            ],            <span class="hljs-string">&quot;Cmd&quot;</span>: [                <span class="hljs-string">&quot;/bin/sh&quot;</span>,                <span class="hljs-string">&quot;-c&quot;</span>,                <span class="hljs-string">&quot;#(nop) &quot;</span>,                <span class="hljs-string">&quot;CMD [\&quot;</span>/bin/sh\<span class="hljs-string">&quot; \&quot;</span>-c\<span class="hljs-string">&quot; \&quot;</span>cd /src &amp;&amp; node ./app.js\<span class="hljs-string">&quot;]&quot;</span>            ],            <span class="hljs-string">&quot;Image&quot;</span>: <span class="hljs-string">&quot;sha256:3eee35387b69036be84160c16d756c975ce6445f5460b19ada2c343d796a0a17&quot;</span>,....<span class="hljs-comment">// Cmd一项中展示了容器将会执行的命令或应用。</span></code></pre><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>container</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac-intelliJ-idea-快捷键记录</title>
    <link href="/2020/03/16/mac-intelliJ-idea-hotkey/"/>
    <url>/2020/03/16/mac-intelliJ-idea-hotkey/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Mac-IntelliJ-IDEA-快捷键大全"><a href="#Mac-IntelliJ-IDEA-快捷键大全" class="headerlink" title="Mac IntelliJ IDEA 快捷键大全"></a>Mac IntelliJ IDEA 快捷键大全</h2><h3 id="Mac键盘符号和修饰键说明"><a href="#Mac键盘符号和修饰键说明" class="headerlink" title="Mac键盘符号和修饰键说明"></a>Mac键盘符号和修饰键说明</h3><ul><li><code>⌘</code> Command</li><li><code>⇧</code> Shift</li><li><code>⌥</code> Option</li><li><code>⌃</code> Control</li><li><code>↩︎</code> Return/Enter</li><li><code>⌫</code> Delete</li><li><code>⌦</code> 向前删除键（Fn+Delete）</li><li><code>↑</code> 上箭头</li><li><code>↓</code> 下箭头</li><li><code>←</code> 左箭头</li><li><code>→</code> 右箭头</li><li><code>⇞</code> Page Up（Fn+↑）</li><li><code>⇟</code> Page Down（Fn+↓）</li><li><code>Home</code> Fn + ←</li><li><code>End</code> Fn + →</li><li><code>⇥</code> 右制表符（Tab键）</li><li><code>⇤</code> 左制表符（Shift+Tab）</li><li><code>⎋</code> Escape (Esc)</li></ul><h3 id="Editing（编辑）"><a href="#Editing（编辑）" class="headerlink" title="Editing（编辑）"></a>Editing（编辑）</h3><ul><li><code>⌃Space</code>  ：基本的代码补全（补全任何类、方法、变量）</li><li><code>⌃F4</code> : <u><strong>开启代码独立窗口</strong></u></li><li><code>⌃⇧Space</code>  ：智能代码补全（过滤器方法列表和变量的预期类型）</li><li><code>⌘⇧↩</code>  ：自动结束代码，行末自动添加分号</li><li><code>⌘P</code>  ：显示方法的参数信息</li><li><code>⌃J, Mid. button click</code>  ：快速查看文档</li><li><code>⇧F1</code>  ：查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</li><li><code>⌘+鼠标放在代码上</code>  ：显示代码简要信息</li><li><code>⌘F1</code>  ：在错误或警告处显示具体描述信息</li><li><code>⌘N, ⌃↩, ⌃N</code>  ：生成代码（getter、setter、构造函数、hashCode/equals,toString）</li><li><code>⌃O</code>  ：覆盖方法（重写父类方法）</li><li><code>⌃I</code>  ：实现方法（实现接口中的方法）</li><li><code>⌘⌥T</code>  ：包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）</li><li><code>⌘/</code>  ：注释/取消注释与行注释</li><li><code>⌘⌥/</code>  ：注释/取消注释与块注释</li><li><code>⌥↑</code>  ：连续选中代码块</li><li><code>⌥↓</code>  ：减少当前选中的代码块</li><li><code>⌃⇧Q</code>  ：显示上下文信息</li><li><code>⌥↩</code>  ：显示意向动作和快速修复代码</li><li><code>⌘⌥L</code>  ：格式化代码</li><li><code>⌃⌥O</code>  ：优化import</li><li><code>⌃⌥I</code>  ：自动缩进线</li><li><code>⇥ / ⇧⇥</code>  ：缩进代码 / 反缩进代码</li><li><code>⌘X</code>  ：剪切当前行或选定的块到剪贴板</li><li><code>⌘C</code>  ：复制当前行或选定的块到剪贴板</li><li><code>⌘V</code>  ：从剪贴板粘贴</li><li><code>⌘⇧V</code>  ：从最近的缓冲区粘贴</li><li><code>⌘D</code>  ：复制当前行或选定的块</li><li><code>⌘⌫</code>  ：删除当前行或选定的块的行</li><li><code>⌃⇧J</code>  ：智能的将代码拼接成一行</li><li><code>⌘↩</code>  ：智能的拆分拼接的行</li><li><code>⇧↩</code>  ：开始新的一行</li><li><code>⌘⇧U</code>  ：大小写切换</li><li><code>⌘⇧] / ⌘⇧[</code>  ：选择直到代码块结束/开始</li><li><code>⌥⌦</code>  ：删除到单词的末尾（⌦键为Fn+Delete）</li><li><code>⌥⌫</code>  ：删除到单词的开头</li><li><code>⌘+ / ⌘-</code>  ：展开 / 折叠代码块</li><li><code>⌘⇧+</code>  ：展开所以代码块</li><li><code>⌘⇧-</code>  ：折叠所有代码块</li><li><code>⌘W</code>  ：关闭活动的编辑器选项卡</li></ul><h3 id="Search-Replace（查询-替换）"><a href="#Search-Replace（查询-替换）" class="headerlink" title="Search/Replace（查询/替换）"></a>Search/Replace（查询/替换）</h3><ul><li><code>Double ⇧</code>  ：查询任何东西</li><li><code>⌘F</code>  ：文件内查找</li><li><code>⌘G</code>  ：查找模式下，向下查找</li><li><code>⌘⇧G</code>  ：查找模式下，向上查找</li><li><code>⌘R</code>  ：文件内替换</li><li><code>⌘⇧F</code>  ：全局查找（根据路径）</li><li><code>⌘⇧R</code>  ：全局替换（根据路径）</li><li><code>⌘⇧S</code>  ：查询结构（Ultimate Edition 版专用，需要在Keymap中设置）</li><li><code>⌘⇧M</code>  ：替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</li></ul><h3 id="Usage-Search（使用查询）"><a href="#Usage-Search（使用查询）" class="headerlink" title="Usage Search（使用查询）"></a>Usage Search（使用查询）</h3><ul><li><code>⌥F7 / ⌘F7</code>  ：在文件中查找用法 / 在类中查找用法</li><li><code>⌘⇧F7</code>  ：在文件中突出显示的用法</li><li><code>⌘⌥F7</code>  ：显示用法</li><li><code>⌘ + 7</code> ：<u>显示当前类的所有方法，全局常量，方法还包括形参和返回值</u></li></ul><h3 id="Compile-and-Run（编译和运行）"><a href="#Compile-and-Run（编译和运行）" class="headerlink" title="Compile and Run（编译和运行）"></a>Compile and Run（编译和运行）</h3><ul><li><code>⌘F9</code>  ：编译Project</li><li><code>⌘⇧F9</code>  ：编译选择的文件、包或模块</li><li><code>⌃⌥R</code>  ：弹出 Run 的可选择菜单</li><li><code>⌃⌥D</code>  ：弹出 Debug 的可选择菜单</li><li><code>⌃R</code>  ：运行</li><li><code>⌃D</code>  ：调试</li><li><code>⌃⇧R, ⌃⇧D</code>  ：从编辑器运行上下文环境配置</li></ul><h3 id="Debugging（调试）"><a href="#Debugging（调试）" class="headerlink" title="Debugging（调试）"></a>Debugging（调试）</h3><ul><li><code>F8</code>  ：进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li><li><code>F7</code>  ：进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</li><li><code>⇧F7</code>  ：智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</li><li><code>⇧F8</code>  ：跳出</li><li><code>⌥F9</code>  ：运行到光标处，如果光标前有其他断点会进入到该断点</li><li><code>⌥F8</code>  ：计算表达式（可以更改变量值使其生效）</li><li><code>⌘⌥R</code>  ：恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</li><li><code>⌘F8</code>  ：切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li><li><code>⌘⇧F8</code>  ：查看断点信息</li></ul><h3 id="Navigation（导航）"><a href="#Navigation（导航）" class="headerlink" title="Navigation（导航）"></a>Navigation（导航）</h3><ul><li><code>⌘O</code>  ：查找类文件</li><li><code>⌘⇧O</code>  ：查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠<code>/</code></li><li><code>⌘⌥O</code>  ：前往指定的变量 / 方法</li><li><code>⌃← / ⌃→</code>  ：左右切换打开的编辑tab页 <strong>(mac中无效)</strong></li><li><code>F12</code>  ：返回到前一个工具窗口</li><li><code>⎋</code>  ：从工具窗口进入代码文件窗口</li><li><code>⇧⎋</code>  ：隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li><li><code>⌘⇧F4</code>  ：关闭活动run/messages/find/… tab</li><li><code>⌘L</code>  ：在当前文件跳转到某一行的指定处</li><li><code>⌘E</code>  ：显示最近打开的文件记录列表</li><li><code>⌘⌥← / ⌘⌥→</code>  ：<u><strong>退回 / 前进到上一个操作的地方</strong></u></li><li><code>⌘⇧⌫</code>  ：跳转到最后一个编辑的地方</li><li><code>⌥F1</code>  ：显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li><li><code>⌘B / ⌘ 鼠标点击</code>  ：进入光标所在的方法/变量的接口或是定义处</li><li><code>⌘⌥B</code>  ：跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</li><li><code>⌥ Space, ⌘Y</code>  ：<u><strong>快速打开光标所在方法、类的定义</strong></u></li><li><code>⌃⇧B</code>  ：跳转到类型声明处</li><li><code>⌘U</code>  ：前往当前光标所在方法的父类的方法 / 接口定义</li><li><code>⌃↓ / ⌃↑</code>  ：当前光标跳转到当前文件的前一个/后一个方法名位置</li><li><code>⌘\] / ⌘[</code>  ：移动光标到当前所在代码的花括号开始/结束位置</li><li><code>⌘F12</code>  ：<strong>弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</strong></li><li>⌃H`  ：显示当前类的层次结构</li><li><code>⌘⇧H</code>  ：显示方法层次结构</li><li><code>⌃⌥H</code>  ：显示调用层次结构</li><li><code>F2 / ⇧F2</code>  ：跳转到下一个/上一个突出错误或警告的位置</li><li><code>F4 / ⌘↓</code>  ：编辑/查看代码源</li><li><code>⌥ Home</code>  ：显示到当前文件的导航条</li><li><code>F3</code> ：选中文件/文件夹/代码行，添加/取消书签</li><li><code>⌥F3</code>  ：选中文件/文件夹/代码行，使用助记符添加/取消书签</li><li><code>⌃0...⌃9</code>  ：定位到对应数值的书签位置</li><li><code>⌘F3</code>  ：显示所有书签</li></ul><h3 id="Refactoring（重构）"><a href="#Refactoring（重构）" class="headerlink" title="Refactoring（重构）"></a>Refactoring（重构）</h3><ul><li><code>F5</code>  ：复制文件到指定目录</li><li><code>F6</code>  ：移动文件到指定目录</li><li><code>⌘⌫</code>  ：在文件上为安全删除文件，弹出确认框</li><li><code>⇧F6</code>  ：重命名文件</li><li><code>⌘F6</code>  ：更改签名</li><li><code>⌘⌥N</code>  ：一致性</li><li><code>⌘⌥M</code>  ：<strong><u>将选中的代码提取为方法</u></strong></li><li><code>⌘⌥V</code>  ：提取变量</li><li><code>⌘⌥F</code>  ：提取字段</li><li><code>⌘⌥C</code>  ：提取常量</li><li><code>⌘⌥P</code>  ：提取参数</li></ul><h3 id="VCS-Local-History（版本控制-本地历史记录）"><a href="#VCS-Local-History（版本控制-本地历史记录）" class="headerlink" title="VCS/Local History（版本控制/本地历史记录）"></a>VCS/Local History（版本控制/本地历史记录）</h3><ul><li><code>⌘K</code>  ：提交代码到版本控制器</li><li><code>⌘T</code>  ：从版本控制器更新代码</li><li><code>⌥⇧C</code>  ：查看最近的变更记录</li><li><code>⌃C</code>  ：快速弹出版本控制器操作面板</li></ul><h3 id="Live-Templates（动态代码模板）"><a href="#Live-Templates（动态代码模板）" class="headerlink" title="Live Templates（动态代码模板）"></a>Live Templates（动态代码模板）</h3><ul><li><code>⌘⌥J</code> 弹出模板选择窗口，将选定的代码使用动态模板包住</li><li><code>⌘J</code> 插入自定义动态代码模板</li></ul><h3 id="General（通用）"><a href="#General（通用）" class="headerlink" title="General（通用）"></a>General（通用）</h3><ul><li><code>⌘1...⌘9</code>  ：打开相应编号的工具窗口</li><li><code>⌘S</code>  ：保存所有</li><li><code>⌘⌥Y</code>  ：同步、刷新</li><li><code>⌃⌘F</code>  ：切换全屏模式</li><li><code>⌘⇧F12</code>  ：切换最大化编辑器</li><li><code>⌥⇧F</code>  ：添加到收藏夹</li><li><code>⌥⇧I</code>  ：检查当前文件与当前的配置文件</li><li>`§⌃, ⌃``  ：快速切换当前的scheme（切换主题、代码样式等）</li><li><code>⌘,</code>  ：打开IDEA系统设置</li><li><code>⌘;</code>  ：打开项目结构对话框</li><li><code>⇧⌘A</code>  ：查找动作（可设置相关选项）</li><li><code>⌃⇥</code>  ：编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</li></ul><h3 id="Other（一些官方文档上没有体现的快捷键）"><a href="#Other（一些官方文档上没有体现的快捷键）" class="headerlink" title="Other（一些官方文档上没有体现的快捷键）"></a>Other（一些官方文档上没有体现的快捷键）</h3><ul><li><code>⌘⇧8</code>  ：竖编辑模式</li></ul><h4 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h4><ul><li>⌘O  ：查找类文件 Ctrl + N</li><li>⌘⌥O  ：前往指定的变量 / 方法 Ctrl + Shift + Alt + N</li><li>⌃← / ⌃→  ：左右切换打开的编辑tab页 Alt← / Alt→</li><li>⎋  ：从工具窗口进入代码文件窗口 ESC</li><li>⌘L  ：在当前文件跳转到某一行的指定处 Ctrl + G</li><li>⌘E  ：显示最近打开的文件记录列表 Ctrl + E</li><li>⌘⌥← / ⌘⌥→  ：退回 / 前进到上一个操作的地方 Ctrl + Alt + ← Ctrl + Alt + →</li><li>⌘⇧⌫  ：跳转到最后一个编辑的地方</li><li>⌃H  ：显示当前类的层次结构 Ctrl + H</li><li>⌘⇧H  ：显示方法层次结构</li><li>⌃⌥H  ：显示调用层次结构</li><li>F4 / ⌘↓  ：编辑/查看代码源</li><li>⌘⌥U  ：显示类UML图</li><li>⌃J  ：查看注释</li></ul><h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><ul><li>⌥⌦  ：删除到单词的末尾（⌦键为Fn+Delete）</li><li>⌥⌫  ：删除到单词的开头</li><li>⌘+ / ⌘-  ：展开 / 折叠代码块</li><li>⌘F1  ：在错误或警告处显示具体描述信息</li><li>⌘⌥L  ：格式化代码</li><li>⌃⌥O  ：优化import</li><li>⇧↩  ：开始新的一行</li><li>⌘⇧↩  ：自动结束代码，行末自动添加分号</li><li>⌃I  ：实现方法（实现接口中的方法）</li><li>⇧F6  ：<strong><u>重命名文件或者变量</u></strong></li><li>⌘N, ⌃↩, ⌃N  ：生成代码（getter、setter、构造函数、hashCode/equals,toString）</li><li>⌘P  ：显示方法的参数信息</li></ul><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><ul><li>Double⇧  ：查找任何东西</li><li>⌘⇧F  ：全局查找（根据路径）</li><li>⌘F  ：文件内查找</li><li>⌘G  ：查找模式下，向下查找</li><li>⌘⇧G  ：查找模式下，向上查找</li></ul><h4 id="导航-1"><a href="#导航-1" class="headerlink" title="导航"></a>导航</h4><ul><li>⌘⌥B  ：跳转到接口的实现</li><li>⌘U  ：查看接口定义</li><li>⌘⌥← / ⌘⌥→  ：退回 / 前进到上一个操作的地方</li><li>⌘B / ⌘  ：鼠标点击 进入光标所在的方法/变量的接口或是定义处</li><li>⌃⇧B  ：跳转到类型声明处</li><li>⌥ Space, ⌘Y  ：快速打开光标所在方法、类的定义</li><li>⌘O  ：查找类文件</li><li>⌘⇧O  ：查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</li><li>F12  ：返回到前一个工具窗口</li><li>⎋ ：从工具窗口进入代码文件窗口</li><li>⇧⎋  ：隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li><li>F3 ：选中文件/文件夹/代码行，添加/取消书签</li><li>⌥F3 ：选中文件/文件夹/代码行，使用助记符添加/取消书签</li><li>⌃0…⌃9 ：定位到对应数值的书签位置</li><li>⌘F3 ：显示所有书签</li><li>⌥F1 ：显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li><li><strong>⌘F12 ：弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</strong></li></ul><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><ul><li>⌃⌘F 切换全屏模式</li></ul><p>ps: 摘录于链接，仅供学习。</p><pre><code class="hljs http"><span class="hljs-attribute">https://mp.weixin.qq.com/s/IDGZ6GPYGuJIUcWajdbtNQ</span></code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>idea</tag>
      
      <tag>hot-key</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Webstorm和JetBrains-IDE-Support插件安装使用</title>
    <link href="/2020/03/16/webstorm-ide-support/"/>
    <url>/2020/03/16/webstorm-ide-support/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Webstorm和JetBrains-IDE-Support插件安装使用"><a href="#Webstorm和JetBrains-IDE-Support插件安装使用" class="headerlink" title="Webstorm和JetBrains-IDE-Support插件安装使用"></a>Webstorm和JetBrains-IDE-Support插件安装使用</h2><p>JetBrains IDE Support是一款支持编译即时显示在浏览器上调试的谷歌浏览器插件。<br>作为web开发人员常用的开发者插件，程序员习惯称之为JB插件。<br>这款调试插件需要与一些开发工具结合使用，比如JetBrains公司发布的一个web开发IDE，webstorm！支持代码提示、补全、定位、与Git集成等等各种功能，已经跟传统强类型语言的开发环境感觉无多大差异。</p><h3 id="chrome插件安装"><a href="#chrome插件安装" class="headerlink" title="chrome插件安装"></a>chrome插件安装</h3><p>chrome -&gt; 更多工具 -&gt; 扩展程序 -&gt; 打开Chrome网上应用店<br>搜索“webstorm”，添加JetBrains-IDE-Support插件。</p><p><img src="/2020/03/16/webstorm-ide-support/1.png" alt="JetBrains-IDE-Support插件"></p><p>安装好的效果</p><p><img src="/2020/03/16/webstorm-ide-support/2.png" alt="JetBrains-IDE-Support效果图"></p><h3 id="webstorm设置"><a href="#webstorm设置" class="headerlink" title="webstorm设置"></a>webstorm设置</h3><p>操作：webstorm -&gt; Preferences -&gt; 搜索框输入（Live Edit） -&gt; 将下方几项全部勾选，如下图</p><p><img src="/2020/03/16/webstorm-ide-support/3.png" alt="webstorm设置"></p><h3 id="调试静态页面"><a href="#调试静态页面" class="headerlink" title="调试静态页面"></a>调试静态页面</h3><p>在静态文件html（右击） -&gt; Debug xxx.html -&gt; 在chrome浏览器中打开该页面。</p><p><img src="/2020/03/16/webstorm-ide-support/4.png" alt="debug操作"></p><p><img src="/2020/03/16/webstorm-ide-support/5.png" alt="chrome调试图"></p><p>此时，在webstorm中修改html文件或者css，js时，在浏览器中会实时刷新，显示出效果。</p><p><img src="/2020/03/16/webstorm-ide-support/6.png" alt="修改代码"></p>]]></content>
    
    
    
    <tags>
      
      <tag>webstorm</tag>
      
      <tag>chrome</tag>
      
      <tag>IDE-support</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker镜像</title>
    <link href="/2020/03/15/docker-images/"/>
    <url>/2020/03/15/docker-images/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><p>镜像由多个层组成，每层叠加之后，从外部看来就如一个独立的对象。<br>镜像内部是一个精简的操作系统（OS），同时还包含应用运行所必须的文件和依赖包。<br>容器的设计初衷就是快速和小巧，所以镜像通常都比较小。</p><p>镜像可以理解为一种构建时结构，而容器可以理解为一种运行时结构。</p><h3 id="检查本地镜像"><a href="#检查本地镜像" class="headerlink" title="检查本地镜像"></a>检查本地镜像</h3><pre><code class="hljs bash">$ docker image lsREPOSITORY                                             TAG                 IMAGE ID            CREATED             SIZEminio/minio                                            latest              6efa3219bc21        8 months ago        60.9MBmyjava3                                                latest              4192d501c33b        9 months ago        643MB</code></pre><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><pre><code class="hljs bash">$ docker image pull alpine:latestlatest: Pulling from library/alpinec9b1b535fdd9: Pull complete Digest: sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367dStatus: Downloaded newer image <span class="hljs-keyword">for</span> alpine:latest$ docker image lsREPOSITORY                                             TAG                 IMAGE ID            CREATED             SIZEalpine                                                 latest              e7d92cdc71fe        8 weeks ago         5.59MB</code></pre><h3 id="镜像仓库服务"><a href="#镜像仓库服务" class="headerlink" title="镜像仓库服务"></a>镜像仓库服务</h3><p>官方仓库：Docker Hub<br>非官方仓库</p><h3 id="镜像命名和标签"><a href="#镜像命名和标签" class="headerlink" title="镜像命名和标签"></a>镜像命名和标签</h3><p>命令格式</p><pre><code class="hljs bash">$ docker image pull &lt;repository&gt;:&lt;tag&gt;$ docker image pull alpine:latest$ docker image pull mongo:3.3.11// 该命令从官方Mongo库拉取标签为3.3.11的镜像</code></pre><p>一个镜像可以根据用户需要设置多个标签，latest是一个非强制标签，不保证指向仓库中最新的镜像。</p><h3 id="悬虚镜像"><a href="#悬虚镜像" class="headerlink" title="悬虚镜像"></a>悬虚镜像</h3><p>悬虚镜像，在列表展示为<none>:<none>。通常是因为构建一个新镜像，然后为该镜像打了一个已经存在的标签。Docker发现已经有镜像包含相同的标签，接着Docker会移除旧镜像上面的标签，将该标签标在新的镜像上。旧镜像就变成了悬虚镜像。</none></none></p><pre><code class="hljs bash">$ docker image ls --filter dangling=<span class="hljs-literal">true</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE&lt;none&gt;              &lt;none&gt;              b940e6102c2d        12 months ago       222MB</code></pre><h3 id="镜像过滤"><a href="#镜像过滤" class="headerlink" title="镜像过滤"></a>镜像过滤</h3><pre><code class="hljs bash">$ docker image ls --filter=reference=<span class="hljs-string">&quot;*:latest&quot;</span>// 使用reference完成过滤并且仅显示标签为latest的示例REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEalpine              latest              e7d92cdc71fe        8 weeks ago         5.59MBmyjava3             latest              4192d501c33b        9 months ago        643MBmongo               latest              a3abd47e8d61        12 months ago       394MBubuntu              latest              47b19964fb50        13 months ago       88.1MBjava                latest              d23bdf5b1b1b        3 years ago         643MB$ docker image ls --format <span class="hljs-string">&quot;&#123;&#123;.Size&#125;&#125;&quot;</span>// 返回Docker主机上镜像的大小属性5.59MB60.9MB643MB301MB194MB394MB222MB222MB222MB$ docker image ls --format <span class="hljs-string">&quot;&#123;&#123;.Repository&#125;&#125;:&#123;&#123;.Tag&#125;&#125;:&#123;&#123;.Size&#125;&#125;&quot;</span>// 返回全部镜像，只显示仓库、标签和大小信息alpine:latest:5.59MBminio/minio:latest:60.9MBmyjava3:latest:643MBcentos:6:301MB</code></pre><h3 id="搜索仓库镜像"><a href="#搜索仓库镜像" class="headerlink" title="搜索仓库镜像"></a>搜索仓库镜像</h3><pre><code class="hljs bash">$ docker search alpineNAME                                   DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDalpine                                 A minimal Docker image based on Alpine Linux…   6234                [OK]                mhart/alpine-node                      Minimal Node.js built on Alpine Linux           460                                     </code></pre><p>“NAME”字段是仓库名称，包含了Docker ID,或者非官方仓库的组织名称。</p><pre><code class="hljs bash">$ docker search alpine --filter <span class="hljs-string">&quot;is-official=true&quot;</span>// --filter <span class="hljs-string">&quot;is-official=true&quot;</span> 只返回官方镜像NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDalpine              A minimal Docker image based on Alpine Linux…   6234                [OK]</code></pre><h3 id="镜像与分层"><a href="#镜像与分层" class="headerlink" title="镜像与分层"></a>镜像与分层</h3><p>Docker镜像由一些松耦合的只读镜像层组成。<br>Docker负责堆叠这些镜像层，并且将它们表示为单个统一的对象。</p><p><img src="/2020/03/15/docker-images/1.png" alt="Docker镜像与分层"></p><p>查看image分层方式</p><pre><code class="hljs bash">$ docker image inspect ubuntu:latest...<span class="hljs-string">&quot;RootFS&quot;</span>: &#123;            <span class="hljs-string">&quot;Type&quot;</span>: <span class="hljs-string">&quot;layers&quot;</span>,            <span class="hljs-string">&quot;Layers&quot;</span>: [                <span class="hljs-string">&quot;sha256:bebe7ce6215aee349bee5d67222abeb5c5a834bbeaa2f2f5d05363d9fd68db41&quot;</span>,                <span class="hljs-string">&quot;sha256:283fb404ea9415ab48456fd8a82b153b1a719491cdf7b806d1853b047d00f27f&quot;</span>,                <span class="hljs-string">&quot;sha256:663e8522d78b5b767f15b2e43885da5975068e3195bbbfa8fc3a082297a361c1&quot;</span>,                <span class="hljs-string">&quot;sha256:4b7d93055d8781d27259ba5780938e6a78d8ef691c94ee9abc3616c1b009ec4a&quot;</span>            ]        &#125;,...// Layers，显示了镜像包含了多少个镜像层</code></pre><p>所有的Docker镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><h3 id="共享镜像层"><a href="#共享镜像层" class="headerlink" title="共享镜像层"></a>共享镜像层</h3><p>多个镜像之间可以并且确实会共享镜像层。这样可以有效节省空间并提升性能。</p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>每次拉取镜像时，摘要都会作为docker image pull 命令返回代码的一部分。</p><pre><code class="hljs bash">$ docker image ls --digests alpineREPOSITORY          TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZEalpine              latest              sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367d   e7d92cdc71fe        8 weeks ago         5.59MB</code></pre><p>现在已知镜像的摘要，那么可以使用摘要值再次拉取这个镜像。这种方式可以确保准确拉取想要的镜像。</p><pre><code class="hljs bash">$ docker image rm alpine:latest// 删除当前镜像（alpine:latest）Untagged: alpine:latestUntagged: alpine@sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367dDeleted: sha256:e7d92cdc71feacf90708cb59182d0df1b911f8ae022d29e8e95d75ca6a99776aDeleted: sha256:5216338b40a7b96416b8b9858974bbe4acc3096ee60acbc4dfb1ee02aecceb10$ docker image pull alpine@sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367d// 根据摘要拉取镜像（alpine）sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367d: Pulling from library/alpinec9b1b535fdd9: Pull complete Digest: sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367dStatus: Downloaded newer image <span class="hljs-keyword">for</span> alpine@sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367d$ docker image ls alpineREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEalpine              &lt;none&gt;              e7d92cdc71fe        8 weeks ago         5.59MB</code></pre><h3 id="多层架构的镜像"><a href="#多层架构的镜像" class="headerlink" title="多层架构的镜像"></a>多层架构的镜像</h3><p>Docker最值得称赞的一点就是使用方便。运行一个应用就像拉取镜像并运行容器这么简单。无须担心安装、依赖或者配置的问题。开箱即用。</p><p>Docker（镜像和镜像仓库服务）规范目前支持多架构镜像。这意味着某个镜像仓库标签（repository:tag）下的镜像可以同时支持64位Linux、PowerPC Linux、64位Windows和ARM等多种架构。<br>为了实现这个特性，镜像仓库服务API支持两种重要的结构：Manifest列表（新）和Manifest。</p><p><img src="/2020/03/15/docker-images/2.png" alt="多层架构镜像"></p><pre><code class="hljs bash">$ docker container run --rm golang go version// 选择当前平台和架构所需的正确镜像版本是由Docker来完成的Unable to find image <span class="hljs-string">&#x27;golang:latest&#x27;</span> locallylatest: Pulling from library/golang50e431f79093: Pull complete dd8c6d374ea5: Pull complete c85513200d84: Pull complete 55769680e827: Pull complete 15357f5e50c4: Pull complete 9edb2e455d9d: Pull complete ed2acfe844ed: Pull complete Digest: sha256:d27017d27f9c9a58b361aa36126a29587ffd3b1b274af0d583fe4954365a4a59Status: Downloaded newer image <span class="hljs-keyword">for</span> golang:latestgo version go1.14 linux/amd64</code></pre><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>删除操作会在当前主机上删除该镜像以及相关的镜像层。这意味着无法通过docker image ls 命令查看到删除后的镜像，并且对应的包含镜像层数据的目录会被删除。可以通过镜像ID来删除镜像。</p><pre><code class="hljs bash">$ docker image lsREPOSITORY                                             TAG                 IMAGE ID            CREATED             SIZEgolang                                                 latest              25c4671a1478        2 weeks ago         809MBalpine                                                 &lt;none&gt;              e7d92cdc71fe        8 weeks ago         5.59MB$ docker image rm e7d92cdc71fe// 根据image id来删除镜像Untagged: alpine@sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367dDeleted: sha256:e7d92cdc71feacf90708cb59182d0df1b911f8ae022d29e8e95d75ca6a99776aDeleted: sha256:5216338b40a7b96416b8b9858974bbe4acc3096ee60acbc4dfb1ee02aecceb10$ docker image ls alpineREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE$ docker image ls -q// 返回系统中本地拉取的全部镜像的ID列表25c4671a1478e7d92cdc71fe6efa3219bc214192d501c33b$ docker image rm $(docker image ls -q) -f// 删除主机上全部镜像</code></pre><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>image</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSO单点登录</title>
    <link href="/2020/03/11/oauth2-sso/"/>
    <url>/2020/03/11/oauth2-sso/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="SSO单点登录"><a href="#SSO单点登录" class="headerlink" title="SSO单点登录"></a>SSO单点登录</h2><h3 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h3><p>单点登录，英文全称Single Sign On，简称就是SSO。它的解释是：在多个应用系统中，只需要登录一次，就可以访问其他相互信任的应用系统。可分为同域下的单点登录，不同域下的单点登录（Cookie是不能跨域的）。</p><p>CAS流程—这个流程是单点登录的标准流程。</p><p><img src="/2020/03/11/oauth2-sso/1.png" alt="单点登录流程"></p><ul><li>单点登录（SSO系统）是保障各业务系统的用户资源的安全 。</li><li>各个业务系统获得的信息是，这个用户能不能访问我的资源。</li><li>单点登录，资源都在各个业务系统这边，不在SSO那一方。 用户在给SSO服务器提供了用户名密码后，作为业务系统并不知道这件事。 SSO随便给业务系统一个ST，那么业务系统是不能确定这个ST是用户伪造的，还是真的有效，所以要拿着这个ST去SSO服务器再问一下，这个用户给我的ST是否有效，是有效的我才能让这个用户访问。</li></ul><p>注明：以上内容摘录于以下链接，仅供学习记录。<br><code>https://yq.aliyun.com/articles/636281</code></p><h3 id="搭建第三方客户端服务"><a href="#搭建第三方客户端服务" class="headerlink" title="搭建第三方客户端服务"></a>搭建第三方客户端服务</h3><p>构建oauth2-client应用，它将使用Spring Cloud Security提供的单点登录功能。oauth2-client将封装客户端与授权服务器交互的流程，使用户可以使用第三方登录的方式登录客户端应用。</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>chapter12-oauth2-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>chapter12-oauth2-client<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Finchley.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--eureka client--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--web config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--security config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--actuator config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--lombok config. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--test config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">oauth2-client</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8888</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;vcap.application.instance_id:$&#123;spring.application.instance_id:$&#123;random.value&#125;&#125;&#125;</span>  <span class="hljs-attr">client:</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">default-zone:</span> <span class="hljs-string">http://localhost:8761/eureka/,</span> <span class="hljs-string">http://localhost:8762/eureka/</span><span class="hljs-attr">security:</span>  <span class="hljs-attr">oauth2:</span>    <span class="hljs-attr">client:</span>      <span class="hljs-attr">client-id:</span> <span class="hljs-string">client</span>      <span class="hljs-attr">client-secret:</span> <span class="hljs-string">secret</span>      <span class="hljs-attr">access-token-uri:</span> <span class="hljs-string">http://localhost:8766/oauth/token</span>      <span class="hljs-attr">user-authorization-uri:</span> <span class="hljs-string">http://localhost:8766/oauth/authorize</span>      <span class="hljs-attr">client-authentication-scheme:</span> <span class="hljs-string">form</span>    <span class="hljs-attr">resource:</span>      <span class="hljs-attr">user-info-uri:</span> <span class="hljs-string">http://localhost:8767/user</span>      <span class="hljs-attr">prefer-token-info:</span> <span class="hljs-literal">false</span></code></pre><h4 id="添加SecurityConfig配置文件"><a href="#添加SecurityConfig配置文件" class="headerlink" title="添加SecurityConfig配置文件"></a>添加SecurityConfig配置文件</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.config;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.security.oauth2.client.EnableOAuth2Sso;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 单点登录配置</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Component</span><span class="hljs-meta">@EnableOAuth2Sso</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        http.csrf().disable()                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)                .and()                .requestMatchers().anyRequest()                .and()                .authorizeRequests()                .antMatchers(<span class="hljs-string">&quot;/user/**&quot;</span>).authenticated()                .and()                .formLogin().successForwardUrl(<span class="hljs-string">&quot;/index&quot;</span>)                .and()                .logout().logoutUrl(<span class="hljs-string">&quot;/logout&quot;</span>).permitAll()                .logoutSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>);    &#125;&#125;</code></pre><h4 id="访问接口"><a href="#访问接口" class="headerlink" title="访问接口"></a>访问接口</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-keyword">import</span> java.security.Principal;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 访问接口</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping(method = RequestMethod.GET)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome to the main index!&quot;</span>;    &#125;    <span class="hljs-meta">@RequestMapping(value = &quot;/index&quot;, method = RequestMethod.GET)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome to the index!&quot;</span>;    &#125;    <span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.GET)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Principal <span class="hljs-title">principal</span><span class="hljs-params">(Principal user)</span> </span>&#123;        <span class="hljs-keyword">return</span> user;    &#125;&#125;</code></pre><h4 id="授权服务器配置"><a href="#授权服务器配置" class="headerlink" title="授权服务器配置"></a>授权服务器配置</h4><p>authorization-server应用中修改客户端的回调地址</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.config;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 授权服务器配置。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-meta">@EnableAuthorizationServer</span><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthorizationServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizationServerConfigurerAdapter</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    AuthenticationManager authenticationManager;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置一个客户端</span><span class="hljs-comment">     * 即可以通过授权码类型获取令牌，也可以通过密码类型获取令牌。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clients</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(ClientDetailsServiceConfigurer clients)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        clients.inMemory()                <span class="hljs-comment">// 客户端ID</span>                .withClient(<span class="hljs-string">&quot;client&quot;</span>)                <span class="hljs-comment">// 客户端可以使用的授权类型</span>                .authorizedGrantTypes(<span class="hljs-string">&quot;authorization_code&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;refresh_token&quot;</span>, <span class="hljs-string">&quot;implicit&quot;</span>)                <span class="hljs-comment">// 允许请求范围</span>                .scopes(<span class="hljs-string">&quot;all&quot;</span>)                <span class="hljs-comment">// 客户端安全码</span>                .secret(<span class="hljs-string">&quot;secret&quot;</span>)                <span class="hljs-comment">// 回调地址（第三方客户端的IP地址）</span>                .redirectUris(<span class="hljs-string">&quot;http://xxx.xxx.x.xxx:8888/&quot;</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置AuthorizationServer tokenServices.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> endpoints</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 将令牌保存到内存中，也可以保存到数据库中，或者是Redis中</span>        endpoints.tokenStore(<span class="hljs-keyword">new</span> InMemoryTokenStore())                .accessTokenConverter(accessTokenConverter())                .authenticationManager(authenticationManager)                .reuseRefreshTokens(<span class="hljs-keyword">false</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置JWT转换器。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> JwtAccessTokenConverter <span class="hljs-title">accessTokenConverter</span><span class="hljs-params">()</span> </span>&#123;        JwtAccessTokenConverter jwtAccessTokenConverter = <span class="hljs-keyword">new</span> JwtAccessTokenConverter();        <span class="hljs-comment">// 设置JWT的签名的密钥为：secret</span>        jwtAccessTokenConverter.setSigningKey(<span class="hljs-string">&quot;secret&quot;</span>);        <span class="hljs-keyword">return</span> jwtAccessTokenConverter;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthorizationServerSecurityConfigurer security)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        security.tokenKeyAccess(<span class="hljs-string">&quot;permitAll()&quot;</span>)                .checkTokenAccess(<span class="hljs-string">&quot;isAuthenticated()&quot;</span>)                .allowFormAuthenticationForClients();    &#125;&#125;</code></pre><h4 id="资源服务器配置"><a href="#资源服务器配置" class="headerlink" title="资源服务器配置"></a>资源服务器配置</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.controller;<span class="hljs-keyword">import</span> com.lc.dto.Instance;<span class="hljs-keyword">import</span> com.lc.dto.User;<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.authentication.BearerTokenExtractor;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.security.Principal;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 资源访问控制器。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-meta">@RestController</span><span class="hljs-meta">@Slf4j</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResourceController</span> </span>&#123;    BearerTokenExtractor tokenExtractor = <span class="hljs-keyword">new</span> BearerTokenExtractor();    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> ResourceServerTokenServices tokenServices;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 根据访问令牌获取用户认证信息的接口。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Principal <span class="hljs-title">userInfo</span><span class="hljs-params">(ServletRequest req)</span> </span>&#123;        <span class="hljs-keyword">final</span> HttpServletRequest request = (HttpServletRequest) req;        Authentication authentication = tokenExtractor.extract(request);        String token = (String) authentication.getPrincipal();        <span class="hljs-keyword">return</span> tokenServices.loadAuthentication(token);    &#125;&#125;</code></pre><p>配置文件中注入ResourceServerTokenServices Bean</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.config;<span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.http.client.ClientHttpResponse;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.RemoteTokenServices;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtTokenStore;<span class="hljs-keyword">import</span> org.springframework.web.client.DefaultResponseErrorHandler;<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 资源服务器配置。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableResourceServer</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResourceServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ResourceServerConfigurerAdapter</span> </span>&#123;<span class="hljs-comment">//    @Autowired</span><span class="hljs-comment">//    private RestTemplate restTemplate;</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(ResourceServerSecurityConfigurer resources)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">//resources.tokenStore(new JwtTokenStore(accessTokenConverter()))</span>        <span class="hljs-comment">//        .stateless(true);</span>        resources.tokenServices(tokenServices())                .stateless(<span class="hljs-keyword">true</span>);    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> ResourceServerTokenServices <span class="hljs-title">tokenServices</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// 从AuthorizationServer中获取令牌服务。</span>        RemoteTokenServices tokenServices = <span class="hljs-keyword">new</span> RemoteTokenServices();        tokenServices.setAccessTokenConverter(accessTokenConverter());        <span class="hljs-comment">// 为restTemplate配置异常处理器，忽略400错误</span>        RestTemplate restTemplate = restTemplate();        restTemplate.setErrorHandler(<span class="hljs-keyword">new</span> DefaultResponseErrorHandler() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleError</span><span class="hljs-params">(ClientHttpResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;                <span class="hljs-keyword">if</span> (response.getRawStatusCode() != <span class="hljs-number">400</span>) &#123;                    <span class="hljs-keyword">super</span>.handleError(response);                &#125;            &#125;        &#125;);        tokenServices.setRestTemplate(restTemplate);        tokenServices.setCheckTokenEndpointUrl(<span class="hljs-string">&quot;http://AUTHORIZATION-SERVER/oauth/check_token&quot;</span>);        tokenServices.setClientId(<span class="hljs-string">&quot;client&quot;</span>);        tokenServices.setClientSecret(<span class="hljs-string">&quot;secret&quot;</span>);        <span class="hljs-keyword">return</span> tokenServices;    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-meta">@LoadBalanced</span>    <span class="hljs-function">RestTemplate <span class="hljs-title">restTemplate</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置JWT转换器。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> JwtAccessTokenConverter <span class="hljs-title">accessTokenConverter</span><span class="hljs-params">()</span> </span>&#123;        JwtAccessTokenConverter converter = <span class="hljs-keyword">new</span> JwtAccessTokenConverter();        converter.setSigningKey(<span class="hljs-string">&quot;secret&quot;</span>);        <span class="hljs-keyword">return</span> converter;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置资源服务器的拦截规则。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> http</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)                .and()                .requestMatchers().anyRequest()                .and()                .anonymous()                .and()                .authorizeRequests()                .antMatchers(<span class="hljs-string">&quot;/user/**&quot;</span>).authenticated()                .and()                .exceptionHandling().accessDeniedHandler(<span class="hljs-keyword">new</span> OAuth2AccessDeniedHandler());    &#125;&#125;</code></pre><p>启动Eureka Server、授权服务器、资源服务器以及本服务，效果如下</p><p><img src="/2020/03/11/oauth2-sso/2.png" alt="启动服务"></p><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p><code>http://xxx.xxx.xxx.xx6:8888/</code></p><pre><code class="hljs html">Welcome to the main index!</code></pre><p><code>http://xxx.xxx.xxx.xx6:8888/index</code></p><pre><code class="hljs html">Welcome to the index!</code></pre><p><code>http://xxx.xxx.xxx.xx6:8888/user</code></p><p><img src="/2020/03/11/oauth2-sso/5.png" alt="认证访问"></p><p>返回结果</p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;authorities&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;authority&quot;</span>: <span class="hljs-string">&quot;USER&quot;</span>        &#125;    ],    <span class="hljs-attr">&quot;details&quot;</span>: &#123;        <span class="hljs-attr">&quot;remoteAddress&quot;</span>: <span class="hljs-string">&quot;xxx.xxx.x.xxx&quot;</span>,        <span class="hljs-attr">&quot;sessionId&quot;</span>: <span class="hljs-string">&quot;2335CEC749CF3C65D7E1FC6E2B78837A&quot;</span>,        <span class="hljs-attr">&quot;tokenValue&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODM5NjM2NTQsInVzZXJfbmFtZSI6InVzZXJfYXV0aG9yaXphdGlvbl9jb2RlIiwiYXV0aG9yaXRpZXMiOlsiVVNFUiJdLCJqdGkiOiI2MjYzZDhiZS0yYzU1LTRjNWMtOTE3YS03YWEwMTc4YjM2MGUiLCJjbGllbnRfaWQiOiJjbGllbnQiLCJzY29wZSI6WyJhbGwiXX0.YGv-jBCIHPloMQGHmFuFKv5iyQ8v3rdnAcuPKEIZI2U&quot;</span>,        <span class="hljs-attr">&quot;tokenType&quot;</span>: <span class="hljs-string">&quot;bearer&quot;</span>,        <span class="hljs-attr">&quot;decodedDetails&quot;</span>: <span class="hljs-literal">null</span>    &#125;,    <span class="hljs-attr">&quot;authenticated&quot;</span>: <span class="hljs-literal">true</span>,    <span class="hljs-attr">&quot;userAuthentication&quot;</span>: &#123;        <span class="hljs-attr">&quot;authorities&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;authority&quot;</span>: <span class="hljs-string">&quot;USER&quot;</span>            &#125;        ],        <span class="hljs-attr">&quot;details&quot;</span>: &#123;            <span class="hljs-attr">&quot;authorities&quot;</span>: [                &#123;                    <span class="hljs-attr">&quot;authority&quot;</span>: <span class="hljs-string">&quot;USER&quot;</span>                &#125;            ],            <span class="hljs-attr">&quot;details&quot;</span>: <span class="hljs-literal">null</span>,            <span class="hljs-attr">&quot;authenticated&quot;</span>: <span class="hljs-literal">true</span>,            <span class="hljs-attr">&quot;userAuthentication&quot;</span>: &#123;                <span class="hljs-attr">&quot;authorities&quot;</span>: [                    &#123;                        <span class="hljs-attr">&quot;authority&quot;</span>: <span class="hljs-string">&quot;USER&quot;</span>                    &#125;                ],                <span class="hljs-attr">&quot;details&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;authenticated&quot;</span>: <span class="hljs-literal">true</span>,                <span class="hljs-attr">&quot;principal&quot;</span>: <span class="hljs-string">&quot;user_authorization_code&quot;</span>,                <span class="hljs-attr">&quot;credentials&quot;</span>: <span class="hljs-string">&quot;N/A&quot;</span>,                <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;user_authorization_code&quot;</span>            &#125;,            <span class="hljs-attr">&quot;credentials&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,            <span class="hljs-attr">&quot;oauth2Request&quot;</span>: &#123;                <span class="hljs-attr">&quot;clientId&quot;</span>: <span class="hljs-string">&quot;client&quot;</span>,                <span class="hljs-attr">&quot;scope&quot;</span>: [                    <span class="hljs-string">&quot;all&quot;</span>                ],                <span class="hljs-attr">&quot;requestParameters&quot;</span>: &#123;                    <span class="hljs-attr">&quot;client_id&quot;</span>: <span class="hljs-string">&quot;client&quot;</span>                &#125;,                <span class="hljs-attr">&quot;resourceIds&quot;</span>: [],                <span class="hljs-attr">&quot;authorities&quot;</span>: [],                <span class="hljs-attr">&quot;approved&quot;</span>: <span class="hljs-literal">true</span>,                <span class="hljs-attr">&quot;refresh&quot;</span>: <span class="hljs-literal">false</span>,                <span class="hljs-attr">&quot;redirectUri&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;responseTypes&quot;</span>: [],                <span class="hljs-attr">&quot;extensions&quot;</span>: &#123;&#125;,                <span class="hljs-attr">&quot;refreshTokenRequest&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;grantType&quot;</span>: <span class="hljs-literal">null</span>            &#125;,            <span class="hljs-attr">&quot;clientOnly&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-attr">&quot;principal&quot;</span>: <span class="hljs-string">&quot;user_authorization_code&quot;</span>,            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;user_authorization_code&quot;</span>        &#125;,        <span class="hljs-attr">&quot;authenticated&quot;</span>: <span class="hljs-literal">true</span>,        <span class="hljs-attr">&quot;principal&quot;</span>: <span class="hljs-string">&quot;user_authorization_code&quot;</span>,        <span class="hljs-attr">&quot;credentials&quot;</span>: <span class="hljs-string">&quot;N/A&quot;</span>,        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;user_authorization_code&quot;</span>    &#125;,    <span class="hljs-attr">&quot;principal&quot;</span>: <span class="hljs-string">&quot;user_authorization_code&quot;</span>,    <span class="hljs-attr">&quot;clientOnly&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;credentials&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,    <span class="hljs-attr">&quot;oauth2Request&quot;</span>: &#123;        <span class="hljs-attr">&quot;clientId&quot;</span>: <span class="hljs-string">&quot;client&quot;</span>,        <span class="hljs-attr">&quot;scope&quot;</span>: [],        <span class="hljs-attr">&quot;requestParameters&quot;</span>: &#123;&#125;,        <span class="hljs-attr">&quot;resourceIds&quot;</span>: [],        <span class="hljs-attr">&quot;authorities&quot;</span>: [],        <span class="hljs-attr">&quot;approved&quot;</span>: <span class="hljs-literal">true</span>,        <span class="hljs-attr">&quot;refresh&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-attr">&quot;redirectUri&quot;</span>: <span class="hljs-literal">null</span>,        <span class="hljs-attr">&quot;responseTypes&quot;</span>: [],        <span class="hljs-attr">&quot;extensions&quot;</span>: &#123;&#125;,        <span class="hljs-attr">&quot;grantType&quot;</span>: <span class="hljs-literal">null</span>,        <span class="hljs-attr">&quot;refreshTokenRequest&quot;</span>: <span class="hljs-literal">null</span>    &#125;,    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;user_authorization_code&quot;</span>&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>oauth2</tag>
      
      <tag>sso</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Cloud安全认证OAuth2与JWT</title>
    <link href="/2020/03/10/spring-cloud-security/"/>
    <url>/2020/03/10/spring-cloud-security/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Spring-Cloud安全认证OAuth2与JWT"><a href="#Spring-Cloud安全认证OAuth2与JWT" class="headerlink" title="Spring-Cloud安全认证OAuth2与JWT"></a>Spring-Cloud安全认证OAuth2与JWT</h2><p>应用的安全在于两个方面：认证（Authentication）和授权（Authoriztion）。</p><h3 id="微服务的认证方式"><a href="#微服务的认证方式" class="headerlink" title="微服务的认证方式"></a>微服务的认证方式</h3><p>​    通过一个中心化的权限管理系统，对用户的身份和权限进行统一的管理，一次授权，多次多点使用。</p><p>​    将安全控制分散到各个微服务中，由各个微服务根据自身的业务对用户的访问进行管理和控制。</p><h3 id="OAuth2"><a href="#OAuth2" class="headerlink" title="OAuth2"></a>OAuth2</h3><p>​    OAuth协议的目的是为用户资源的授权提供一个安全的、开放而简易的标准。</p><p>​    OAuth2是当前授权的行业标准，其重点在于为Web应用服务、桌面应用程序、移动设备以及室内设备的授权流程提供简单的客户端开发方式。</p><h4 id="OAuth2的角色"><a href="#OAuth2的角色" class="headerlink" title="OAuth2的角色"></a>OAuth2的角色</h4><p>​        Resource Owner（资源所有者）：能够对受保护的资源授予访问权限的实体，可以是一个用户（终端用户）。</p><p>​        Resource Server（资源服务器）：持有受保护的资源，允许持有访问令牌（Access Token）的请求访问受保护资源</p><p>​        Client（客户端）：持有资源所有者的授权，代表资源所有者对受保护资源进行访问。</p><p>​        Authorization Server（授权服务器）：对资源所有者的授权进行认证，成功后向客户发送访问令牌。</p><h4 id="OAuth2协议流程"><a href="#OAuth2协议流程" class="headerlink" title="OAuth2协议流程"></a>OAuth2协议流程</h4><p>​        <img src="/2020/03/10/spring-cloud-security/1.png" alt="OAuth2协议流程"></p><h4 id="客户端授权类型"><a href="#客户端授权类型" class="headerlink" title="客户端授权类型"></a>客户端授权类型</h4><p>​        Authorization Code（授权码类型）</p><p>​        Implicit（简化类型，也称为隐式类型）</p><p>​        Resource Owner Password Credentials（密码类型）</p><p>​        Client Credential（客户端类型）</p><p>​        授权码类型的授权流程</p><p>​            <img src="/2020/03/10/spring-cloud-security/2.png" alt="授权码类型"></p><p>​        密码类型流程</p><p>​            <img src="/2020/03/10/spring-cloud-security/3.png" alt="密码类型"></p><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p>​    JWT（JSON Web Token）作为一个开放的标准，通过紧凑或者包含的方式，定义了用于在各方之间发送的安全的JSON对象。JWT可以充当访问令牌和刷新令牌的载体，这是Web双方之间进行安全传输信息的良好方式。</p><h4 id="JWT格式"><a href="#JWT格式" class="headerlink" title="JWT格式"></a>JWT格式</h4><h4 id><a href="#" class="headerlink" title></a><img src="/2020/03/10/spring-cloud-security/4.png" alt="JWT格式"></h4><h4 id="JWT组成"><a href="#JWT组成" class="headerlink" title="JWT组成"></a>JWT组成</h4><p>​        Header（头部）</p><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;alg&quot;</span>: <span class="hljs-string">&quot;HS256&quot;</span>,  <span class="hljs-attr">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span>&#125;</code></pre><p>​        Payload（有效负荷）</p><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;sub&quot;</span>: <span class="hljs-string">&quot;1234567890&quot;</span>,  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;John Doe&quot;</span>,  <span class="hljs-attr">&quot;admin&quot;</span>: <span class="hljs-literal">true</span>&#125;</code></pre><p>​        Signature（签名）</p><pre><code class="hljs java">HMACSHA256(  base64UrlEncode(header) + <span class="hljs-string">&quot;.&quot;</span> +  base64UrlEncode(payload),  secret)</code></pre><h3 id="搭建授权服务器"><a href="#搭建授权服务器" class="headerlink" title="搭建授权服务器"></a>搭建授权服务器</h3><p>​    Spring Cloud Security的配置主要是通过适配器的方式对开发者需要的部分进行覆盖配置，其余的将使用Starter中的默认配置选项。</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>chapter12-authorization-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>chapter12-authorization-server<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Finchley.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--eureka client--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--web config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--security config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--actuator config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--lombok config. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--test config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">authorization-server</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8766</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;vcap.application.instance_id:$&#123;spring.application.instance_id:$&#123;random.value&#125;&#125;&#125;</span>  <span class="hljs-attr">client:</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">default-zone:</span> <span class="hljs-string">http://localhost:8761/eureka/,</span> <span class="hljs-string">http://localhost:8762/eureka/</span></code></pre><h4 id="授权服务器配置"><a href="#授权服务器配置" class="headerlink" title="授权服务器配置"></a>授权服务器配置</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.config;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 授权服务器配置。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> */</span><span class="hljs-meta">@EnableAuthorizationServer</span><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthorizationServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizationServerConfigurerAdapter</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    AuthenticationManager authenticationManager;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置一个客户端</span><span class="hljs-comment">     * 即可以通过授权码类型获取令牌，也可以通过密码类型获取令牌。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clients</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(ClientDetailsServiceConfigurer clients)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        clients.inMemory()                <span class="hljs-comment">// 客户端ID</span>                .withClient(<span class="hljs-string">&quot;client&quot;</span>)                <span class="hljs-comment">// 客户端可以使用的授权类型</span>                .authorizedGrantTypes(<span class="hljs-string">&quot;authorization_code&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;refresh_token&quot;</span>)                <span class="hljs-comment">// 允许请求范围</span>                .scopes(<span class="hljs-string">&quot;all&quot;</span>)                <span class="hljs-comment">// 客户端安全码</span>                .secret(<span class="hljs-string">&quot;secret&quot;</span>)                <span class="hljs-comment">// 回调地址</span>                .redirectUris(<span class="hljs-string">&quot;http://localhost:8888/&quot;</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置AuthorizationServer tokenServices.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> endpoints</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 将令牌保存到内存中，也可以保存到数据库中，或者是Redis中</span>        endpoints.tokenStore(<span class="hljs-keyword">new</span> InMemoryTokenStore())                .accessTokenConverter(accessTokenConverter())                .authenticationManager(authenticationManager)                .reuseRefreshTokens(<span class="hljs-keyword">false</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置JWT转换器。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> JwtAccessTokenConverter <span class="hljs-title">accessTokenConverter</span><span class="hljs-params">()</span> </span>&#123;        JwtAccessTokenConverter jwtAccessTokenConverter = <span class="hljs-keyword">new</span> JwtAccessTokenConverter();        <span class="hljs-comment">// 设置JWT的签名的密钥为：secret</span>        jwtAccessTokenConverter.setSigningKey(<span class="hljs-string">&quot;secret&quot;</span>);        <span class="hljs-keyword">return</span> jwtAccessTokenConverter;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthorizationServerSecurityConfigurer security)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        security.tokenKeyAccess(<span class="hljs-string">&quot;permitAll()&quot;</span>)                .checkTokenAccess(<span class="hljs-string">&quot;isAuthenticated()&quot;</span>)                .allowFormAuthenticationForClients();    &#125;&#125;</code></pre><h4 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h4><p>​        通过Spring Security为授权服务器配置两个存储在内存中的用户。</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.config;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.User;<span class="hljs-keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;<span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<span class="hljs-keyword">import</span> org.springframework.security.provisioning.InMemoryUserDetailsManager;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Security配置。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 在内存中配置两个用户。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> auth</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        InMemoryUserDetailsManager userDetailsManager = <span class="hljs-keyword">new</span> InMemoryUserDetailsManager();        <span class="hljs-comment">// 配置用户信息</span>        userDetailsManager.createUser(User.withUsername(<span class="hljs-string">&quot;user_authorization_code&quot;</span>).            password(<span class="hljs-string">&quot;123456&quot;</span>).authorities(<span class="hljs-string">&quot;USER&quot;</span>).build());        userDetailsManager.createUser(User.withUsername(<span class="hljs-string">&quot;user_password&quot;</span>).            password(<span class="hljs-string">&quot;123456&quot;</span>).authorities(<span class="hljs-string">&quot;USER&quot;</span>).build());        auth.userDetailsService(userDetailsManager);    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        AuthenticationManager manager = <span class="hljs-keyword">super</span>.authenticationManagerBean();        <span class="hljs-keyword">return</span> manager;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        http.csrf().disable()                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)                .and()                .requestMatchers().anyRequest()                .and()                .formLogin().permitAll()                .and()                .authorizeRequests()                .antMatchers(<span class="hljs-string">&quot;/oauth/*&quot;</span>).permitAll();    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置密码解码器</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> NoOpPasswordEncoder.getInstance();    &#125;    &#125;</code></pre><h3 id="配置资源服务器"><a href="#配置资源服务器" class="headerlink" title="配置资源服务器"></a>配置资源服务器</h3><h4 id="pom-xml-1"><a href="#pom-xml-1" class="headerlink" title="pom.xml"></a>pom.xml</h4><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>chapter12-resource-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>chapter12-resource-server<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Finchley.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--eureka client--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--web config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--security config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--common config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>chapter-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--actuator config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--lombok config. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--test config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--security test config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h4 id="application-xml"><a href="#application-xml" class="headerlink" title="application.xml"></a>application.xml</h4><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">resource-server</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8767</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;vcap.application.instance_id:$&#123;spring.application.instance_id:$&#123;random.value&#125;&#125;&#125;</span>  <span class="hljs-attr">client:</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">default-zone:</span> <span class="hljs-string">http://localhost:8761/eureka/</span></code></pre><h4 id="访问接口"><a href="#访问接口" class="headerlink" title="访问接口"></a>访问接口</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.controller;<span class="hljs-keyword">import</span> com.lc.dto.Instance;<span class="hljs-keyword">import</span> com.lc.dto.User;<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 资源访问控制器。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-meta">@RestController</span><span class="hljs-meta">@Slf4j</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResourceController</span> </span>&#123;    <span class="hljs-comment">// 默认用户名。</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String DEFAULT_NAME = <span class="hljs-string">&quot;lingchenbill&quot;</span>;    <span class="hljs-comment">// 服务ID。</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String DEFAULT_SERVICE_ID = <span class="hljs-string">&quot;application&quot;</span>;    <span class="hljs-comment">// host。</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String DEFAULT_HOST = <span class="hljs-string">&quot;localhost&quot;</span>;    <span class="hljs-comment">// 端口。</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> DEFAULT_PORT = <span class="hljs-number">8080</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 访问受保护的资源。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RequestMapping(value = &quot;/user/&#123;userId&#125;&quot;, method = RequestMethod.GET)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUserByUserId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;userId&quot;)</span> String userId)</span> </span>&#123;        log.info(<span class="hljs-string">&quot;Get User by UserId: &#123;&#125;&quot;</span>, userId);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(userId, DEFAULT_NAME);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 访问不受保护的资源。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> serviceId</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RequestMapping(value = &quot;/instance/&#123;serviceId&#125;&quot;, method = RequestMethod.GET)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Instance <span class="hljs-title">getInstanceByServiceId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;serviceId&quot;)</span> String serviceId)</span> </span>&#123;        log.info(<span class="hljs-string">&quot;Get Instance by serviceId: &#123;&#125;&quot;</span>, serviceId);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Instance(serviceId, DEFAULT_HOST, DEFAULT_PORT);    &#125;&#125;</code></pre><h4 id="资源服务器配置"><a href="#资源服务器配置" class="headerlink" title="资源服务器配置"></a>资源服务器配置</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.config;<span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.http.client.ClientHttpResponse;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.RemoteTokenServices;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtTokenStore;<span class="hljs-keyword">import</span> org.springframework.web.client.DefaultResponseErrorHandler;<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 资源服务器配置。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableResourceServer</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResourceServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ResourceServerConfigurerAdapter</span> </span>&#123;<span class="hljs-comment">//    @Autowired</span><span class="hljs-comment">//    private RestTemplate restTemplate;</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(ResourceServerSecurityConfigurer resources)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        resources.tokenStore(<span class="hljs-keyword">new</span> JwtTokenStore(accessTokenConverter()))                .stateless(<span class="hljs-keyword">true</span>);        <span class="hljs-comment">// 从AuthorizationServer中获取令牌服务。</span>        RemoteTokenServices tokenServices = <span class="hljs-keyword">new</span> RemoteTokenServices();        tokenServices.setAccessTokenConverter(accessTokenConverter());        RestTemplate restTemplate = restTemplate();        restTemplate.setErrorHandler(<span class="hljs-keyword">new</span> DefaultResponseErrorHandler() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleError</span><span class="hljs-params">(ClientHttpResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;                <span class="hljs-keyword">if</span> (response.getRawStatusCode() != <span class="hljs-number">400</span>) &#123;                    <span class="hljs-keyword">super</span>.handleError(response);                &#125;            &#125;        &#125;);        tokenServices.setRestTemplate(restTemplate);        tokenServices.setCheckTokenEndpointUrl(<span class="hljs-string">&quot;http://AUTHORIZATION-SERVER/oauth/check_token&quot;</span>);        tokenServices.setClientId(<span class="hljs-string">&quot;client&quot;</span>);        tokenServices.setClientSecret(<span class="hljs-string">&quot;secret&quot;</span>);        resources.tokenServices(tokenServices)                .stateless(<span class="hljs-keyword">true</span>);    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-meta">@LoadBalanced</span>    <span class="hljs-function">RestTemplate <span class="hljs-title">restTemplate</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置JWT转换器。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> JwtAccessTokenConverter <span class="hljs-title">accessTokenConverter</span><span class="hljs-params">()</span> </span>&#123;        JwtAccessTokenConverter converter = <span class="hljs-keyword">new</span> JwtAccessTokenConverter();        converter.setSigningKey(<span class="hljs-string">&quot;secret&quot;</span>);        <span class="hljs-keyword">return</span> converter;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置资源服务器的拦截规则。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> http</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)                .and()                .requestMatchers().anyRequest()                .and()                .anonymous()                .and()                .authorizeRequests()                .antMatchers(<span class="hljs-string">&quot;/user/**&quot;</span>).authenticated()                .and()                .exceptionHandling().accessDeniedHandler(<span class="hljs-keyword">new</span> OAuth2AccessDeniedHandler());    &#125;&#125;</code></pre><h3 id="访问受限资源"><a href="#访问受限资源" class="headerlink" title="访问受限资源"></a>访问受限资源</h3><p>​    启动Eureka Server jar<br>​        java -jar chapter4-eureka-server-0.0.1-SNAPSHOT.jar<br>​        java -jar chapter4-eureka-server-0.0.1-SNAPSHOT.jar –server.port=8762</p><p>​    启动授权服务与资源服务 jar<br>​        java -jar chapter12-authorization-server-1.0-SNAPSHOT.jar<br>​        java -jar chapter12-resource-server-1.0-SNAPSHOT.jar</p><p>​    查看Eureka    </p><img src="/2020/03/10/spring-cloud-security/5.png" alt="eureka" style="zoom:50%;"><p>​    访问不受保护的资源</p><p>​        <code>http://localhost:8767/instance/application-app</code></p><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;serviceId&quot;</span>: <span class="hljs-string">&quot;application-app&quot;</span>,<span class="hljs-attr">&quot;host&quot;</span>: <span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">8080</span>&#125;</code></pre><p>​    访问受保护的资源端口</p><p>​        <code>http://localhost:8767/user/lingchen</code></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">oauth</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">error_description</span>&gt;</span>  Full authentication is required to access this resource  <span class="hljs-tag">&lt;/<span class="hljs-name">error_description</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">error</span>&gt;</span>unauthorized<span class="hljs-tag">&lt;/<span class="hljs-name">error</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">oauth</span>&gt;</span></code></pre><h5 id="通过授权码类型获取访问令牌"><a href="#通过授权码类型获取访问令牌" class="headerlink" title="通过授权码类型获取访问令牌"></a>通过授权码类型获取访问令牌</h5><p>​    <code>http://localhost:8766/oauth/authorize?client_id=client&amp;response_type=code&amp;redirect_uri=http://localhost:8888/login</code></p><p>​    <img src="/2020/03/10/spring-cloud-security/6.png" alt="authorize"></p><p>​    授权码将通过回调地址获取</p><p>​        <code>http://localhost:8888/login?code=2dgnZO</code></p><p>​        <strong>2dgnZO</strong>即为授权码</p><p>​    携带授权码访问”/oauth/token”获取到访问令牌</p><p>​        method：post</p><p>​        <code>http://localhost:8766/oauth/token?grant_type=authorization_code&amp;code=2dgnZO&amp;redirect_uri=http://localhost:8888/login&amp;client_id=client&amp;client_secret=secret</code></p><p>​        可以通过IDEA中的Rest Client工具访问</p><p><img src="/2020/03/10/spring-cloud-security/7.png" alt="post-visit"></p><p>​         返回</p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;access_token&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODM4ODkwMDIsInVzZXJfbmFtZSI6InVzZXJfYXV0aG9yaXphdGlvbl9jb2RlIiwiYXV0aG9yaXRpZXMiOlsiVVNFUiJdLCJqdGkiOiJmNTJkMGVkNy0yMGI2LTQ5MGUtOGVmMS01MWQ2NWQyMDk3YTciLCJjbGllbnRfaWQiOiJjbGllbnQiLCJzY29wZSI6WyJhbGwiXX0.eNwBLIXB85ZXiQIPrDMtqL3ktW2vWu1FVVnra36XDTk&quot;</span>,    <span class="hljs-attr">&quot;token_type&quot;</span>: <span class="hljs-string">&quot;bearer&quot;</span>,    <span class="hljs-attr">&quot;refresh_token&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJ1c2VyX2F1dGhvcml6YXRpb25fY29kZSIsInNjb3BlIjpbImFsbCJdLCJhdGkiOiJmNTJkMGVkNy0yMGI2LTQ5MGUtOGVmMS01MWQ2NWQyMDk3YTciLCJleHAiOjE1ODY0Mzc4MDIsImF1dGhvcml0aWVzIjpbIlVTRVIiXSwianRpIjoiNmE0NTQyMTktMGU5OC00MmM4LWE0NjEtOTUxZWViNmU5Yjc4IiwiY2xpZW50X2lkIjoiY2xpZW50In0.3OsLTaElYD2G-s4LSG59ZZ_NqAKJhusiuzIdLRtzLiA&quot;</span>,    <span class="hljs-attr">&quot;expires_in&quot;</span>: <span class="hljs-number">43199</span>,    <span class="hljs-attr">&quot;scope&quot;</span>: <span class="hljs-string">&quot;all&quot;</span>,    <span class="hljs-attr">&quot;jti&quot;</span>: <span class="hljs-string">&quot;f52d0ed7-20b6-490e-8ef1-51d65d2097a7&quot;</span>&#125;</code></pre><p>​    携带访问令牌再次访问受保护的资源</p><p>​        <code>http://localhost:8767/user/lingchen?access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODM4ODkwMDIsInVzZXJfbmFtZSI6InVzZXJfYXV0aG9yaXphdGlvbl9jb2RlIiwiYXV0aG9yaXRpZXMiOlsiVVNFUiJdLCJqdGkiOiJmNTJkMGVkNy0yMGI2LTQ5MGUtOGVmMS01MWQ2NWQyMDk3YTciLCJjbGllbnRfaWQiOiJjbGllbnQiLCJzY29wZSI6WyJhbGwiXX0.eNwBLIXB85ZXiQIPrDMtqL3ktW2vWu1FVVnra36XDTk</code></p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;lingchen&quot;</span>,    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;lingchenbill&quot;</span>&#125;</code></pre><h5 id="通过密码类型获取访问令牌"><a href="#通过密码类型获取访问令牌" class="headerlink" title="通过密码类型获取访问令牌"></a>通过密码类型获取访问令牌</h5><p>​        method：post</p><p>​        <code>http://localhost:8766/oauth/token?username=user_password&amp;password=123456&amp;grant_type=password&amp;scope=all&amp;client_id=client&amp;client_secret=secret</code></p><p><img src="/2020/03/10/spring-cloud-security/8.png" alt="password-visit"></p><p>​        返回</p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;access_token&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODM4ODk1MzMsInVzZXJfbmFtZSI6InVzZXJfcGFzc3dvcmQiLCJhdXRob3JpdGllcyI6WyJVU0VSIl0sImp0aSI6ImQyNmNmMTFkLTljZjAtNDM3NS05YjIzLTY1ZjRiZTQyYzE1ZSIsImNsaWVudF9pZCI6ImNsaWVudCIsInNjb3BlIjpbImFsbCJdfQ.d4QZF0Vc9ePP01TmWM9EiixiqJNELu2UpvG1sjcWapU&quot;</span>,    <span class="hljs-attr">&quot;token_type&quot;</span>: <span class="hljs-string">&quot;bearer&quot;</span>,    <span class="hljs-attr">&quot;refresh_token&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJ1c2VyX3Bhc3N3b3JkIiwic2NvcGUiOlsiYWxsIl0sImF0aSI6ImQyNmNmMTFkLTljZjAtNDM3NS05YjIzLTY1ZjRiZTQyYzE1ZSIsImV4cCI6MTU4NjQzODMzMywiYXV0aG9yaXRpZXMiOlsiVVNFUiJdLCJqdGkiOiI1ODJiOWRlNy1mZDY0LTRjNjctYmFmZS1lZTlmM2RkZTVkZjYiLCJjbGllbnRfaWQiOiJjbGllbnQifQ.en1wMalkOoI3dv6bOx_W4ZXMMYeAugGoRm-VVdTEavg&quot;</span>,    <span class="hljs-attr">&quot;expires_in&quot;</span>: <span class="hljs-number">43199</span>,    <span class="hljs-attr">&quot;scope&quot;</span>: <span class="hljs-string">&quot;all&quot;</span>,    <span class="hljs-attr">&quot;jti&quot;</span>: <span class="hljs-string">&quot;d26cf11d-9cf0-4375-9b23-65f4be42c15e&quot;</span>&#125;</code></pre><p>​        携带访问令牌访问</p><p>​            <code>http://localhost:8767/user/lingchen-user?access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODM4ODk1MzMsInVzZXJfbmFtZSI6InVzZXJfcGFzc3dvcmQiLCJhdXRob3JpdGllcyI6WyJVU0VSIl0sImp0aSI6ImQyNmNmMTFkLTljZjAtNDM3NS05YjIzLTY1ZjRiZTQyYzE1ZSIsImNsaWVudF9pZCI6ImNsaWVudCIsInNjb3BlIjpbImFsbCJdfQ.d4QZF0Vc9ePP01TmWM9EiixiqJNELu2UpvG1sjcWapU</code></p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;lingchen-user&quot;</span>,    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;lingchenbill&quot;</span>&#125;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>security</tag>
      
      <tag>OAuth2</tag>
      
      <tag>JWT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim快捷键记录</title>
    <link href="/2020/03/09/vim-hot-key/"/>
    <url>/2020/03/09/vim-hot-key/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="vim快捷键记录"><a href="#vim快捷键记录" class="headerlink" title="vim快捷键记录"></a>vim快捷键记录</h3><h4 id="less操作"><a href="#less操作" class="headerlink" title="less操作"></a>less操作</h4><pre><code class="hljs bash"><span class="hljs-comment"># less -N config.xml</span>// 显示文件内容，带行号</code></pre><pre><code class="hljs xml">1 <span class="hljs-meta">&lt;?xml version=&#x27;1.1&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span>      2 <span class="hljs-tag">&lt;<span class="hljs-name">hudson</span>&gt;</span>      3   <span class="hljs-tag">&lt;<span class="hljs-name">disabledAdministrativeMonitors</span>/&gt;</span>      4   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.164.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>      5   <span class="hljs-tag">&lt;<span class="hljs-name">installStateName</span>&gt;</span>RUNNING<span class="hljs-tag">&lt;/<span class="hljs-name">installStateName</span>&gt;</span>      6   <span class="hljs-tag">&lt;<span class="hljs-name">numExecutors</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">numExecutors</span>&gt;</span>      7   <span class="hljs-tag">&lt;<span class="hljs-name">mode</span>&gt;</span>NORMAL<span class="hljs-tag">&lt;/<span class="hljs-name">mode</span>&gt;</span></code></pre><h4 id="vim基本操作"><a href="#vim基本操作" class="headerlink" title="vim基本操作"></a>vim基本操作</h4><pre><code class="hljs bash">:wq       // 在命令模式下，执行存盘退出操作（:ZZ）:w        // 在命令模式下，执行存盘操作:w!       // 在命令模式下，执行强制存盘操作:q        // 在命令模式下，执行退出vi操作:q！      // 在命令模式下，执行强制退出vi操作:e 文件名  // 在命令模式下，打开并编辑指定名称的文件:n       // 在命令模式下，如果同时打开多个文件，则继续编辑下一个文件:f       // 在命令模式下，用于显示当前的文件名、光标所在行的行号以及显示比例</code></pre><h4 id="vim翻页"><a href="#vim翻页" class="headerlink" title="vim翻页"></a>vim翻页</h4><pre><code class="hljs awk">ctrl + f 　　　<span class="hljs-regexp">//</span> 向下（后面）翻页ctrl + b 　　　<span class="hljs-regexp">//</span> 向上（前面）翻页或者：ctrl+u 　　　　<span class="hljs-regexp">//</span> 向文件首翻半屏ctrl+d 　　　　<span class="hljs-regexp">//</span> 向文件尾翻半屏</code></pre><h4 id="vim展示行号"><a href="#vim展示行号" class="headerlink" title="vim展示行号"></a>vim展示行号</h4><pre><code class="hljs bash">: <span class="hljs-built_in">set</span> nu 1 &lt;?xml version=<span class="hljs-string">&#x27;1.1&#x27;</span> encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>?&gt;  2 &lt;hudson&gt;  3   &lt;disabledAdministrativeMonitors/&gt;  4   &lt;version&gt;2.164.3&lt;/version&gt;  5   &lt;installStateName&gt;RUNNING&lt;/installStateName&gt;  6   &lt;numExecutors&gt;2&lt;/numExecutors&gt;  7   &lt;mode&gt;NORMAL&lt;/mode&gt;</code></pre><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><pre><code class="hljs bash">a 　　// 在当前字符后添加文本A 　　// 在行末添加文本i 　　// 在当前字符前插入文本I 　　// 在行首插入文本o 　　// 在当前行后面插入一空行O 　　// 在当前行前面插入一空行</code></pre><h4 id="vim模式切换"><a href="#vim模式切换" class="headerlink" title="vim模式切换"></a>vim模式切换</h4><p>​    在命令行模式　-&gt;  按字符选择模式</p><pre><code class="hljs bash">v　　　　// 输入字符v（小写）或者：Ctrl + v</code></pre><p>​    通过h、i、j、k键移动光标选择要进行复制的字符串<br>​    完成选择后按下y键进行复制，按下p执行粘贴操作</p><p>​    在命令行模式　-&gt;  按行选择模式</p><pre><code class="hljs bash">V　　　　// 输入字符V（大写）或者：<span class="hljs-built_in">shift</span> + v</code></pre><p>​    通过h、i、j、k键移动光标选择要进行复制的行号<br>​    将光标移动到要进行粘贴的位置，按下p键进行粘贴操作</p><p>​    编辑模式　-&gt;  命令模式</p><pre><code class="hljs bash">Esc</code></pre><h4 id="至文件的首行"><a href="#至文件的首行" class="headerlink" title="至文件的首行"></a>至文件的首行</h4><pre><code class="hljs bash">gg</code></pre><h4 id="至文件的末行"><a href="#至文件的末行" class="headerlink" title="至文件的末行"></a>至文件的末行</h4><pre><code class="hljs bash">G</code></pre><h4 id="至指定位置"><a href="#至指定位置" class="headerlink" title="至指定位置"></a>至指定位置</h4><p>​    到指定行的行首</p><pre><code class="hljs bash">:行号</code></pre><p>​    到最后一行的行首</p><pre><code class="hljs bash">:$</code></pre><h4 id="移动到单词"><a href="#移动到单词" class="headerlink" title="移动到单词"></a>移动到单词</h4><pre><code class="hljs bash">w// 向前移到到单词词尾e// 向前移到到单词词尾b// 向后移到到单词词首</code></pre><h4 id="删除字符操作"><a href="#删除字符操作" class="headerlink" title="删除字符操作"></a>删除字符操作</h4><h5 id="光标后字符"><a href="#光标后字符" class="headerlink" title="光标后字符"></a>光标后字符</h5><pre><code class="hljs bash">x // （小写）</code></pre><h5 id="光标前字符"><a href="#光标前字符" class="headerlink" title="光标前字符"></a>光标前字符</h5><pre><code class="hljs bash">X // （大写）</code></pre><h5 id="光标至行尾"><a href="#光标至行尾" class="headerlink" title="光标至行尾"></a>光标至行尾</h5><pre><code class="hljs bash">D</code></pre><h5 id="光标行内容"><a href="#光标行内容" class="headerlink" title="光标行内容"></a>光标行内容</h5><pre><code class="hljs bash">dd</code></pre><h5 id="行及其后n-1行"><a href="#行及其后n-1行" class="headerlink" title="行及其后n-1行"></a>行及其后n-1行</h5><pre><code class="hljs bash">ndd</code></pre><h5 id="删除代码块"><a href="#删除代码块" class="headerlink" title="删除代码块"></a>删除代码块</h5><pre><code class="hljs bash"><span class="hljs-comment"># 在代码块内</span>di&#123;</code></pre><h4 id="剪切操作"><a href="#剪切操作" class="headerlink" title="剪切操作"></a>剪切操作</h4><pre><code class="hljs bash">dd  // 剪切当前行ndd // n表示大于1的数字，剪切n行dw  // 从光标处剪切至一个单词的末尾，包括空格de  // 从光标处剪切至一个单词的末尾，不包括空格d$  // 从当前光标剪切到行末d0  // 从当前光标位置（不包括光标位置）剪切到行首d3l // 从光标位置（包括光标位置）向右剪切3个字符d5G // 将当前行（包括当前行）至第5行（不包括它）剪切d3B // 从当前光标位置（不包括光标位置）反向剪切3个单词dH  // 剪切从当前行至所显示屏幕顶行的全部行dL  // 剪切从当前行至所显示屏幕底的全部行:行号1, 行号2 m 行号3 // 剪切行号1-行号2到行号3之后</code></pre><h4 id="复制－粘贴操作"><a href="#复制－粘贴操作" class="headerlink" title="复制－粘贴操作"></a>复制－粘贴操作</h4><h5 id="复制行内容"><a href="#复制行内容" class="headerlink" title="复制行内容"></a>复制行内容</h5><pre><code class="hljs bash">yy</code></pre><h5 id="至行及其下n行"><a href="#至行及其下n行" class="headerlink" title="至行及其下n行"></a>至行及其下n行</h5><pre><code class="hljs bash">nyy</code></pre><p>至上几行</p><pre><code class="hljs bash"><span class="hljs-comment"># 不包含当前行.</span>nyk</code></pre><h5 id="常用复制操作"><a href="#常用复制操作" class="headerlink" title="常用复制操作"></a>常用复制操作</h5><pre><code class="hljs bash">yw       // 从光标处复制至一个单子/单词的末尾，包括空格ye       // 从光标处复制至一个单子/单词的末尾，不包括空格y$       // 从当前光标复制到行末y0       // 从当前光标位置（不包括光标位置）复制之行首y3l      // 从光标位置（包括光标位置）向右复制3个字符y5G      // 将当前行（包括当前行）至第5行（不包括它）复制y3B      // 从当前光标位置（不包括光标位置）反向复制3个单词:行号1, 行号2 co 行号3  // 复制行号1-行号2到行号3之后ggVG             // 选中所有文本, + y, 复制所有文本. ggV + 行号 + j    // 选中行首到输入行号的内容.</code></pre><h5 id="粘贴操作"><a href="#粘贴操作" class="headerlink" title="粘贴操作"></a>粘贴操作</h5><pre><code class="hljs bash">p // （小写）粘贴到当前光标所在位置的下方P // （大写）粘贴到当前光标所在位置的上方</code></pre><h5 id="单词的复制替换"><a href="#单词的复制替换" class="headerlink" title="单词的复制替换"></a>单词的复制替换</h5><pre><code class="hljs bash"><span class="hljs-comment"># 复制单词（任意位置），替换到第二个单词</span>yiw// 复制viwp// 替换<span class="hljs-comment"># 切换单词（任意位置）</span>ciwcaw</code></pre><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><pre><code class="hljs bash"><span class="hljs-comment"># 向左缩进.</span>:行号&lt;<span class="hljs-comment"># 向右缩进.</span>:行号&gt;<span class="hljs-comment"># 大范围整体缩进.1~20向右缩进</span>:1, 20 &gt;</code></pre><h4 id="折叠与展开"><a href="#折叠与展开" class="headerlink" title="折叠与展开"></a>折叠与展开</h4><pre><code class="hljs bash"><span class="hljs-comment"># 在vim中执行该命令,设置折叠.</span>:<span class="hljs-built_in">set</span> fdm=marker<span class="hljs-comment"># 打开所有折叠.</span>zR<span class="hljs-comment"># 关闭所有折叠.</span>zM<span class="hljs-comment"># 关闭光标下的折叠.</span>zc<span class="hljs-comment"># 打开光标下的折叠.</span>zo<span class="hljs-comment"># 关闭光标下的折叠，以及嵌套的折叠.</span>zC<span class="hljs-comment"># 打开光标下的折叠，以及嵌套的折叠.</span>zO<span class="hljs-comment"># 当光标在关闭折叠上时，打开之。在打开折叠上时，关闭之.</span>za</code></pre><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><pre><code class="hljs bash"><span class="hljs-comment"># 选中当前光标所在内联块.</span>viBvib<span class="hljs-comment"># 选中整行.</span>V<span class="hljs-comment"># 选中&#123;&#125;块.</span>在&#123;&#125;的 &#123; 或者 &#125;上 v%<span class="hljs-comment"># 选中&#123;&#125;块内的内容.</span>在&#123;&#125;块内, v i&#123;  或者 v i&#125;<span class="hljs-comment"># 选中[]块内的内容.</span>在[]块内, v i[  或者 v i]</code></pre><h4 id="文本查找操作"><a href="#文本查找操作" class="headerlink" title="文本查找操作"></a>文本查找操作</h4><h5 id="向文件头部查找"><a href="#向文件头部查找" class="headerlink" title="向文件头部查找"></a>向文件头部查找</h5><pre><code class="hljs bash">?查找文本n 　　　　　　　 // 按n键查找上一个查找文本<span class="hljs-built_in">shift</span>　＋　n　　// 按n键查找下一个查找文本</code></pre><h5 id="向文件尾部查找"><a href="#向文件尾部查找" class="headerlink" title="向文件尾部查找"></a>向文件尾部查找</h5><pre><code class="hljs bash">/查找文本n             // 按n键查找下个查找文本<span class="hljs-built_in">shift</span> ＋ n    // 按n键查找下一个查找文本</code></pre><h4 id="替换操作"><a href="#替换操作" class="headerlink" title="替换操作"></a>替换操作</h4><h5 id="全局替换"><a href="#全局替换" class="headerlink" title="全局替换"></a>全局替换</h5><pre><code class="hljs bash">:% s/查找文本/替换文本/gc// 强制每个替换要确认</code></pre><h5 id="指定行范围"><a href="#指定行范围" class="headerlink" title="指定行范围"></a>指定行范围</h5><pre><code class="hljs bash">// 强制每个替换要确认:行号1, 行号2 s/查找文本/替换文本/gc// 从指定行至文本末查找替换文本:行号, <span class="hljs-variable">$s</span>/查找文本/替换文本/gc</code></pre><h4 id="多窗口操作"><a href="#多窗口操作" class="headerlink" title="多窗口操作"></a>多窗口操作</h4><pre><code class="hljs bash">:sp filename         // vim将分割出一个横向窗口，并在该窗口中打开新文件:vsp filename        // vim将在右边分割出一个窗口，并在该窗口中打开新文件vim -o file1 file2   // 打开的两个文件上下窗口分布vim -O file1 file2   // 打开的两个文件左右窗口分布ctrl + w             // 来在vim打开的多个窗口中切换:close               // 关闭当前窗口</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>hot-key</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hive-view处理</title>
    <link href="/2020/03/08/hive-view/"/>
    <url>/2020/03/08/hive-view/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Hive-view处理"><a href="#Hive-view处理" class="headerlink" title="Hive-view处理"></a>Hive-view处理</h2><h3 id="Hadoop启动"><a href="#Hadoop启动" class="headerlink" title="Hadoop启动"></a>Hadoop启动</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sbin/start-dfs.sh</span><span class="hljs-meta">$</span><span class="bash"> sbin/start-yarn.sh</span><span class="hljs-meta">$</span><span class="bash"> sbin/mr-jobhistory-daemon.sh start historyserver</span></code></pre><p>​    hadoop启动过程：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sbin/start-dfs.sh </span>Starting namenodes on [ip-172-31-33-221.hadoop.com]ip-172-31-33-221.hadoop.com: starting namenode, logging to /home/ec2-user/hadoop/hadoop-2.2.0/logs/hadoop-ec2-user-namenode-ip-172-31-33-221.ap-northeast-1.compute.internal.outip-172-31-43-90.hadoop.com: starting datanode, logging to /home/ec2-user/hadoop/hadoop-2.2.0/logs/hadoop-ec2-user-datanode-ip-172-31-43-90.outip-172-31-39-57.hadoop.com: starting datanode, logging to /home/ec2-user/hadoop/hadoop-2.2.0/logs/hadoop-ec2-user-datanode-ip-172-31-39-57.ap-northeast-1.compute.internal.outStarting secondary namenodes [ip-172-31-33-221.hadoop.com]ip-172-31-33-221.hadoop.com: starting secondarynamenode, logging to /home/ec2-user/hadoop/hadoop-2.2.0/logs/hadoop-ec2-user-secondarynamenode-ip-172-31-33-221.ap-northeast-1.compute.internal.out[ec2-user@ip-172-31-33-221 hadoop-2.2.0]$ sbin/start-yarn.sh starting yarn daemonsstarting resourcemanager, logging to /home/ec2-user/hadoop/hadoop-2.2.0/logs/yarn-ec2-user-resourcemanager-ip-172-31-33-221.ap-northeast-1.compute.internal.outip-172-31-43-90.hadoop.com: starting nodemanager, logging to /home/ec2-user/hadoop/hadoop-2.2.0/logs/yarn-ec2-user-nodemanager-ip-172-31-43-90.outip-172-31-39-57.hadoop.com: starting nodemanager, logging to /home/ec2-user/hadoop/hadoop-2.2.0/logs/yarn-ec2-user-nodemanager-ip-172-31-39-57.ap-northeast-1.compute.internal.out[ec2-user@ip-172-31-33-221 hadoop-2.2.0]$ sbin/mr-jobhistory-daemon.sh start historyserverstarting historyserver, logging to /home/ec2-user/hadoop/hadoop-2.2.0/logs/mapred-ec2-user-historyserver-ip-172-31-33-221.ap-northeast-1.compute.internal.out</code></pre><h3 id="Hive启动"><a href="#Hive启动" class="headerlink" title="Hive启动"></a>Hive启动</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hive --service metastore &amp;</span><span class="hljs-meta">$</span><span class="bash"> hive --service hiveserver2 &amp;</span><span class="hljs-meta">$</span><span class="bash"> jps</span>28147 Jps27528 RunJar24332 SecondaryNameNode23907 NameNode27911 RunJar24804 ResourceManager27005 JobHistoryServer</code></pre><p>​    进入Hive：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hive</span>20/03/08 08:16:32 INFO Configuration.deprecation: mapred.reduce.tasks is deprecated. Instead, use mapreduce.job.reduces20/03/08 08:16:32 INFO Configuration.deprecation: mapred.min.split.size is deprecated. Instead, use mapreduce.input.fileinputformat.split.minsize20/03/08 08:16:32 INFO Configuration.deprecation: mapred.reduce.tasks.speculative.execution is deprecated. Instead, use mapreduce.reduce.speculative20/03/08 08:16:32 INFO Configuration.deprecation: mapred.min.split.size.per.node is deprecated. Instead, use mapreduce.input.fileinputformat.split.minsize.per.node20/03/08 08:16:32 INFO Configuration.deprecation: mapred.input.dir.recursive is deprecated. Instead, use mapreduce.input.fileinputformat.input.dir.recursive20/03/08 08:16:32 INFO Configuration.deprecation: mapred.min.split.size.per.rack is deprecated. Instead, use mapreduce.input.fileinputformat.split.minsize.per.rack20/03/08 08:16:32 INFO Configuration.deprecation: mapred.max.split.size is deprecated. Instead, use mapreduce.input.fileinputformat.split.maxsize20/03/08 08:16:32 INFO Configuration.deprecation: mapred.committer.job.setup.cleanup.needed is deprecated. Instead, use mapreduce.job.committer.setup.cleanup.neededLogging initialized using configuration in jar:file:/home/ec2-user/apache-hive-1.2.2-bin/lib/hive-common-1.2.2.jar!/hive-log4j.properties<span class="hljs-meta">hive&gt;</span><span class="bash"> </span></code></pre><h3 id="Hive-view视图处理"><a href="#Hive-view视图处理" class="headerlink" title="Hive view视图处理"></a>Hive view视图处理</h3><p>​    基础数据准备：</p><pre><code class="hljs shell"><span class="hljs-meta">hive&gt;</span><span class="bash"> show tables;</span>OKrecords2Time taken: 1.19 seconds, Fetched: 1 row(s)<span class="hljs-meta">hive&gt;</span><span class="bash"> DESCRIBE records2;</span>OKyear                    string                                      temperature             int                                         quality                 int                                         Time taken: 0.335 seconds, Fetched: 3 row(s)<span class="hljs-meta">hive&gt;</span><span class="bash"> select * from records2;</span>OK1950    0       11950    22      11950    -11     11949    111     11949    78      1</code></pre><p>​    视图处理：<br>​        视图是一种用select语句定义的“虚表”。视图可以用来以一种不同于磁盘实际存储形式把数据呈现给用户。<br>​        在Hive中，创建视图时并不把视图“物化”存储到磁盘上。相反，视图的select语句只是在执行引用视图的语句时才执行。</p><h4 id="Hive视图命令"><a href="#Hive视图命令" class="headerlink" title="Hive视图命令"></a>Hive视图命令</h4><pre><code class="hljs shell"><span class="hljs-meta">hive&gt;</span><span class="bash"> create view valid_records</span>    &gt; as    &gt; select *    &gt; from records2    &gt; where temperature != 9999    &gt;   and (quality == 0 or quality == 1 or quality == 4 or quality == 5 or quality == 9);OKTime taken: 0.445 seconds<span class="hljs-meta">hive&gt;</span><span class="bash"> show tables;</span>OKrecords2valid_recordsTime taken: 0.024 seconds, Fetched: 2 row(s)</code></pre><p>​    创建视图时并不执行查询，查询只是存储在metastore中。show tables命令的输出结果里包括视图。</p><h4 id="基于视图创建视图"><a href="#基于视图创建视图" class="headerlink" title="基于视图创建视图"></a>基于视图创建视图</h4><pre><code class="hljs shell"><span class="hljs-meta">hive&gt;</span><span class="bash"> create view max_temperatures (year, max_temperature)</span>    &gt; as    &gt; select year, max(temperature) from valid_records    &gt; group by year;OKTime taken: 0.194 seconds</code></pre><p>​        执行视图查询：</p><pre><code class="hljs shell"><span class="hljs-meta">hive&gt;</span><span class="bash"> select year, avg(max_temperature)</span>    &gt; from max_temperatures    &gt; group by year;Query ID = ec2-user_20200308082637_09c36617-e7b1-472b-9bdb-6dbd5bc6cc45Total jobs = 1Launching Job 1 out of 1Number of reduce tasks not specified. Estimated from input data size: 1In order to change the average load for a reducer (in bytes):  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;In order to limit the maximum number of reducers:  set hive.exec.reducers.max=&lt;number&gt;In order to set a constant number of reducers:  set mapreduce.job.reduces=&lt;number&gt;Starting Job = job_1583654397381_0001, Tracking URL = http://ip-172-31-33-221.hadoop.com:8088/proxy/application_1583654397381_0001/Kill Command = /home/ec2-user/hadoop/hadoop-2.2.0/bin/hadoop job  -kill job_1583654397381_0001Hadoop job information for Stage-1: number of mappers: 1; number of reducers: 12020-03-08 08:27:07,873 Stage-1 map = 100%,  reduce = 100%, Cumulative CPU 3.01 secMapReduce Total cumulative CPU time: 3 seconds 10 msecEnded Job = job_1583654397381_0001MapReduce Jobs Launched: Stage-Stage-1: Map: 1  Reduce: 1   Cumulative CPU: 3.01 sec   HDFS Read: 9696 HDFS Write: 21 SUCCESSTotal MapReduce CPU Time Spent: 3 seconds 10 msecOK1949    111.01950    22.0Time taken: 30.676 seconds, Fetched: 2 row(s)</code></pre><h3 id="Hive子查询"><a href="#Hive子查询" class="headerlink" title="Hive子查询"></a>Hive子查询</h3><p>​    子查询是内嵌在另一个SQL语句中的SELECT语句。Hive对子查询的支持很有限。它只允许子查询出现在SELECT语句的FROM子句中。</p><pre><code class="hljs shell"><span class="hljs-meta">hive&gt;</span><span class="bash"> select year, avg(max_temperature)</span>    &gt; from (    &gt;   select year, max(temperature) as max_temperature    &gt;   from records2    &gt;   where temperature != 9999    &gt;     and (quality == 0 or quality == 1 or quality == 4 or quality == 5 or quality == 9)    &gt;   group by year    &gt; ) mt    &gt; group by year;Query ID = ec2-user_20200308091212_69c1fb51-255a-46fb-87e0-261456dcf0d8Total jobs = 1Launching Job 1 out of 1Number of reduce tasks not specified. Estimated from input data size: 1In order to change the average load for a reducer (in bytes):  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;In order to limit the maximum number of reducers:  set hive.exec.reducers.max=&lt;number&gt;In order to set a constant number of reducers:  set mapreduce.job.reduces=&lt;number&gt;Starting Job = job_1583654397381_0002, Tracking URL = http://ip-172-31-33-221.hadoop.com:8088/proxy/application_1583654397381_0002/Kill Command = /home/ec2-user/hadoop/hadoop-2.2.0/bin/hadoop job  -kill job_1583654397381_0002Hadoop job information for Stage-1: number of mappers: 1; number of reducers: 12020-03-08 09:12:36,282 Stage-1 map = 100%,  reduce = 100%, Cumulative CPU 2.9 secMapReduce Total cumulative CPU time: 2 seconds 900 msecEnded Job = job_1583654397381_0002MapReduce Jobs Launched: Stage-Stage-1: Map: 1  Reduce: 1   Cumulative CPU: 2.9 sec   HDFS Read: 9827 HDFS Write: 21 SUCCESSTotal MapReduce CPU Time Spent: 2 seconds 900 msecOK1949    111.01950    22.0Time taken: 23.871 seconds, Fetched: 2 row(s)</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>hive</tag>
      
      <tag>view</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins打包jar发布流程</title>
    <link href="/2020/03/08/jenkins-jar-start/"/>
    <url>/2020/03/08/jenkins-jar-start/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="jenkins打包jar发布流程"><a href="#jenkins打包jar发布流程" class="headerlink" title="jenkins打包jar发布流程"></a>jenkins打包jar发布流程</h2><h3 id="jenkins配置"><a href="#jenkins配置" class="headerlink" title="jenkins配置"></a>jenkins配置</h3><h4 id="新建jenkins任务"><a href="#新建jenkins任务" class="headerlink" title="新建jenkins任务"></a>新建jenkins任务</h4><p>​        jenkins -&gt; 新建任务 -&gt; 输入任务 -&gt; 构建一个自由风格的软件项目</p><p><img src="/2020/03/08/jenkins-jar-start/1.png" alt="Jenkins任务"></p><h4 id="jenkins任务配置"><a href="#jenkins任务配置" class="headerlink" title="jenkins任务配置"></a>jenkins任务配置</h4><p>​        任务 -&gt; General -&gt; 源码管理</p><p><img src="/2020/03/08/jenkins-jar-start/2.png" alt="源码管理"></p><p>​        Git的权限可以通过：添加 按钮来添加，可以是Username with password，也可以是SSH Username with private key类型</p><h4 id="添加Maven目标"><a href="#添加Maven目标" class="headerlink" title="添加Maven目标"></a>添加Maven目标</h4><p>​        增加构建步骤 -&gt; 调用顶层Maven目标。<strong>（jenkins服务器中要事先安装好Maven）</strong><br>​        目标：clean install<br>​        POM：指向工程中的pom.xml文件。<strong>（pom.xml路径要对！）</strong></p><p><img src="/2020/03/08/jenkins-jar-start/3.png" alt="maven属性配置"></p><h4 id="添加执行Shell"><a href="#添加执行Shell" class="headerlink" title="添加执行Shell"></a>添加执行Shell</h4><p>​        增加构建步骤 -&gt; 执行Shell</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>cd /home/jenkins/shell/microservice-discovery-eureka./jar-stop.sh./jar-replace.shecho &quot;Execute shell Finish&quot;BUILD_ID=dontKillMe nohup /home/jenkins/shell/microservice-discovery-eureka/jar-start.sh &amp;</code></pre><p>​        在jenkins服务器中相应目录中建立相应文件，注意 *.sh文件权限要修改</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> chmod 777 *.sh</span></code></pre><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /home/jenkins/shell/microservice-discovery-eureka</span>[root@VM_0_16_centos microservice-discovery-eureka]# ll总用量 12-rwxrwxrwx 1 root root 237 3月   5 18:47 jar-replace.sh-rwxrwxrwx 1 root root  78 3月   5 18:03 jar-start.sh-rwxrwxrwx 1 root root 253 3月   5 18:44 jar-stop.sh</code></pre><p>​        jar-stop.sh：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> vim jar-stop.sh</span>echo &quot;Stopping microservice-discovery-eureka webapp&quot;pid=`ps -ef | grep microservice-discovery-eureka*.jar | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`echo &quot;pid:&quot; $pidif [ -n &quot;$pid&quot; ]then  echo &quot;kill -9 pid:&quot; $pid  kill -9 $pidecho &quot;webapp jar stopped!&quot;fi</code></pre><p>​        jar-replace.sh：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> vim jar-replace.sh</span>cp /home/jenkins/jenkins/workspace/github-tasks/adv-springcloud/spring-cloud-microservice-study/microservice-discovery-eureka/target/microservice-discovery-eureka-1.0-SNAPSHOT.jar /home/jenkins/webappecho &quot;webapp jar replaced success!&quot;</code></pre><p>​        jar-start.sh：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> vim jar-start.sh</span>java -jar /home/jenkins/webapp/microservice-discovery-eureka-1.0-SNAPSHOT.jar</code></pre><h3 id="jenkins发布操作"><a href="#jenkins发布操作" class="headerlink" title="jenkins发布操作"></a>jenkins发布操作</h3><p>​    任务 -&gt; 立即构建<br>​        该jenkins任务开始构建</p><p>​    Build History -&gt; 构建历史 ：可以查看当前正常构建的jenkins任务</p><img src="/2020/03/08/jenkins-jar-start/4.png" alt="jenkins构建" style="zoom:80%;"><p>​    点击构建历史：进入日志控制台，查看当前任务执行日志</p><img src="/2020/03/08/jenkins-jar-start/5.png" alt="jenkins日志" style="zoom:80%;"><p>​    进入服务器查看jar启动情况</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /home/jenkins/webapp</span>[root@VM_0_16_centos webapp]# ll总用量 40088-rw-r--r-- 1 root root 41047268 3月   8 11:17 microservice-discovery-eureka-1.0-SNAPSHOT.jar[root@VM_0_16_centos webapp]# jps1344 jenkins.war4916 microservice-discovery-eureka-1.0-SNAPSHOT.jar26791 Jps[root@VM_0_16_centos webapp]# ps -ef | grep jarroot      1344     1  3 3月07 ?       00:53:33 /usr/local/soft/jdk1.8.0_212/bin/java -Dcom.sun.akuma.Daemon=daemonized -Djava.awt.headless=true -DJENKINS_HOME=/home/jenkins/jenkins -jar /usr/lib/jenkins/jenkins.war --logfile=/var/log/jenkins/jenkins.log --webroot=/var/cache/jenkins/war --daemon --httpPort=8190 --debug=5 --handlerCountMax=100 --handlerCountMaxIdle=20root      4915     1  0 11:17 ?        00:00:00 /bin/sh /home/jenkins/shell/microservice-discovery-eureka/jar-start.shroot      4916  4915  1 11:17 ?        00:00:28 java -jar /home/jenkins/webapp/microservice-discovery-eureka-1.0-SNAPSHOT.jarroot     26945   323  0 12:00 pts/0    00:00:00 grep --color=auto jar</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>jenkins</tag>
      
      <tag>jar</tag>
      
      <tag>spring cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用命令</title>
    <link href="/2020/03/07/hexo-info/"/>
    <url>/2020/03/07/hexo-info/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><h3 id="Hexo-themes"><a href="#Hexo-themes" class="headerlink" title="Hexo themes"></a>Hexo themes</h3><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/dusign/hexo-theme-snail.git themes/snail</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>command</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jenkins-linux环境搭建</title>
    <link href="/2020/03/07/jenkins-linux-install/"/>
    <url>/2020/03/07/jenkins-linux-install/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="jenkins-linux环境搭建"><a href="#jenkins-linux环境搭建" class="headerlink" title="jenkins-linux环境搭建"></a>jenkins-linux环境搭建</h2><h3 id="jenkins安装"><a href="#jenkins安装" class="headerlink" title="jenkins安装"></a>jenkins安装</h3><p>下载地址：</p><pre><code class="hljs http"><span class="hljs-attribute">https://pkg.jenkins.io/redhat-stable/</span></code></pre><p>安装jenkins：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> rpm -ivh jenkins-2.164.3-1.1.noarch.rpm</span></code></pre><p>查看jenkins默认安装路径：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> rpm -ql jenkins</span>[root@VM_0_16_centos ~]# rpm -ql jenkins/etc/init.d/jenkins/etc/logrotate.d/jenkins/etc/sysconfig/jenkins/usr/lib/jenkins/usr/lib/jenkins/jenkins.war/usr/sbin/rcjenkins/var/cache/jenkins/var/lib/jenkins/var/log/jenkins</code></pre><h3 id="jenkins启动相关配置"><a href="#jenkins启动相关配置" class="headerlink" title="jenkins启动相关配置"></a>jenkins启动相关配置</h3><p>​    修改jenkins默认工作目录：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> vim /etc/sysconfig/jenkins</span><span class="hljs-meta">#</span><span class="bash"> JENKINS_HOME=<span class="hljs-string">&quot;/var/lib/jenkins&quot;</span></span>JENKINS_HOME=&quot;/home/jenkins/jenkins&quot;</code></pre><p>​    修改jenkins默认用户以及端口号：</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">JENKINS_USER=<span class="hljs-string">&quot;jenkins&quot;</span></span>JENKINS_USER=&quot;root&quot;<span class="hljs-meta">#</span><span class="bash"> Port Jenkins is listening on.</span><span class="hljs-meta">#</span><span class="bash"> Set to -1 to <span class="hljs-built_in">disable</span></span><span class="hljs-meta">#</span>JENKINS_PORT=&quot;8190&quot;</code></pre><p>​    修改jenkins所需要的jdk：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> vim /etc/init.d/jenkins</span><span class="hljs-meta">#</span><span class="bash"> see http://www.nabble.com/guinea-pigs-wanted-----Hudson-RPM-for-RedHat-Linux-td25673707.html</span>candidates=&quot;/usr/local/soft/jdk1.8.0_212/bin/java/etc/alternatives/java/usr/lib/jvm/java-1.8.0/bin/java/usr/lib/jvm/jre-1.8.0/bin/java/usr/lib/jvm/java-1.7.0/bin/java/usr/lib/jvm/jre-1.7.0/bin/java/usr/bin/java&quot;</code></pre><p>​    启动jenkins：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> service jenkins start</span></code></pre><h3 id="访问jenkins"><a href="#访问jenkins" class="headerlink" title="访问jenkins"></a>访问jenkins</h3><h4 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h4><pre><code class="hljs http"><span class="hljs-attribute">http://152.136.104.216:8190/</span></code></pre><p>​    解锁jenkins：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cat /home/jenkins/jenkins/secrets/initialAdminPassword</span></code></pre><p>​    第一次解锁后，<u><strong>设置jenkins登录用户与密码（牢记！）</strong></u></p><p>​    第一次安装必须插件过慢时，停止jenkins服务，进入jenkins工作目录，修改jenkins镜像源</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /home/jenkins/jenkins/updates</span>sed -i &#x27;s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27; default.json</code></pre><p>​    然后启动jenkins服务，进入jenkins后，手动安装插件：</p><p>​    如：系统管理 -&gt; 插件管理 -&gt; 过滤搜索：git</p><p><img src="/2020/03/07/jenkins-linux-install/1.png" alt="jenkins插件"></p><h3 id="jenkins必要工具配置"><a href="#jenkins必要工具配置" class="headerlink" title="jenkins必要工具配置"></a>jenkins必要工具配置</h3><p>​    安装git：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> yum install git</span><span class="hljs-meta">$</span><span class="bash"> whereis git</span>git: /usr/bin/git /usr/share/man/man1/git.1.gz</code></pre><h4 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h4><p><img src="/2020/03/07/jenkins-linux-install/2.png" alt="git全局配置"></p><h4 id="jdk配置"><a href="#jdk配置" class="headerlink" title="jdk配置"></a>jdk配置</h4><p><img src="/2020/03/07/jenkins-linux-install/3.png" alt="jdk配置"></p><h4 id="Maven安装"><a href="#Maven安装" class="headerlink" title="Maven安装"></a>Maven安装</h4><p><img src="/2020/03/07/jenkins-linux-install/4.png" alt="Maven配置"></p>]]></content>
    
    
    
    <tags>
      
      <tag>jenkins linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo-github搭建博客</title>
    <link href="/2020/03/06/hexo-github-markdown-install/"/>
    <url>/2020/03/06/hexo-github-markdown-install/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo-github搭建博客"><a href="#hexo-github搭建博客" class="headerlink" title="hexo-github搭建博客"></a>hexo-github搭建博客</h2><p>[TOC]</p><h3 id="下载安装npm、hexo"><a href="#下载安装npm、hexo" class="headerlink" title="下载安装npm、hexo"></a>下载安装npm、hexo</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm install -g hexo</span></code></pre><p>​    进入hexo工作路径:</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /Users/xxx/Documents/hexo</span><span class="hljs-meta">$</span><span class="bash"> hexo init</span></code></pre><p>​    hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p><p><img src="/2020/03/06/hexo-github-markdown-install/1.png" alt="hexo目录路径"></p><h3 id="配置github"><a href="#配置github" class="headerlink" title="配置github"></a>配置github</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> ~/.ssh/</span><span class="hljs-meta">$</span><span class="bash"> cat id_rsa.pub</span></code></pre><p>​    将ssh的密钥内容拷贝到github中配置好密钥信息</p><p><img src="/2020/03/06/hexo-github-markdown-install/2.png" alt="ssh密钥github配置"></p><h4 id="测试ssh是否成功"><a href="#测试ssh是否成功" class="headerlink" title="测试ssh是否成功"></a>测试ssh是否成功</h4><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ssh -T git@github.com</span>`Hi xxxxx! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.`</code></pre><h4 id="配置用户名"><a href="#配置用户名" class="headerlink" title="配置用户名"></a>配置用户名</h4><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git config --global user.name <span class="hljs-string">&quot;liuxianan&quot;</span>// 你的github用户名，非昵称</span><span class="hljs-meta">$</span><span class="bash"> git config --global user.email <span class="hljs-string">&quot;xxx@qq.com&quot;</span>// 填写你的github注册邮箱</span></code></pre><h4 id="创建代码仓库"><a href="#创建代码仓库" class="headerlink" title="创建代码仓库"></a>创建代码仓库</h4><p>​    仓库地址为：<a href="https://github.com/LingChenBill/LingChenBill.github.io.git">https://github.com/LingChenBill/LingChenBill.github.io.git</a></p><p>​    Hexo中配置github（在hexo工作路径中）</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> vim _config.yml</span></code></pre><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:LingChenBill/LingChenBill.github.io.git</span>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span></code></pre><p>​    为了能够提交代码至github中，还需要安装插件</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></code></pre><p>​    输入<code>hexo d</code>就会将本次有改动的代码全部提交</p><h3 id="配置Hexo主题"><a href="#配置Hexo主题" class="headerlink" title="配置Hexo主题"></a>配置Hexo主题</h3><p>​    点击官方hexo主题:<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>​    进入Hexo工作路径中，下载主题到themes文件夹中</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span></code></pre><p><img src="/2020/03/06/hexo-github-markdown-install/3.png" alt="主题路径"></p><p>​    更换主题需要修改配置文件</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> vim _config.yml</span></code></pre><pre><code class="hljs yaml"><span class="hljs-comment"># Extensions</span><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><span class="hljs-attr">theme:</span> <span class="hljs-number">3</span><span class="hljs-string">-hexo</span></code></pre><h3 id="创建Hexo博客"><a href="#创建Hexo博客" class="headerlink" title="创建Hexo博客"></a>创建Hexo博客</h3><pre><code class="hljs shell">hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）hexo deploy #部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本</code></pre><p>​    缩写命令</p><pre><code class="hljs shell">hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy</code></pre><p>​    新建文章后，可以运行</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo clean</span><span class="hljs-meta">$</span><span class="bash"> hexo g</span><span class="hljs-meta">$</span><span class="bash"> hexo s</span></code></pre><p>​    再浏览器端：</p><p>​    <code>http://localhost:4000/</code></p><p>​    进行预览md文件效果</p><p>​    ps: 编写md类型的博客，可以使用Typora编辑器。效果更佳。</p><h3 id="hexo图片无法显示解决方案"><a href="#hexo图片无法显示解决方案" class="headerlink" title="hexo图片无法显示解决方案"></a>hexo图片无法显示解决方案</h3><p>​    <code>$ vim _config.yml</code></p><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span></code></pre><p>​    下载图片插件</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm install hexo-asset-image --save</span></code></pre><p>​    当使用 hexo new title 创建文章时，将同时在 source/_post 文件夹中生成一个与 title 同名的文件夹，我们只需将图片    放进此文件夹中，然后在文章中通过 Markdown 语法进行引用即可。</p><p>​    例如，在资源文件夹（就是那个与 title 同名的文件夹）中添加图片 example.PNG，则可以在对应的文章中使用以下语    句添加图片</p><p>​    <code>![示例图片](title/example.PNG &quot;示例图片&quot;) </code></p><p>​    修改图片插件的index.js</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /Users/xxxx/Documents/hexo/node_modules/hexo-asset-image/</span></code></pre><p>​    将index.js文件内容替换为以下:</p><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<span class="hljs-keyword">var</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<span class="hljs-comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPosition</span>(<span class="hljs-params">str, m, i</span>) </span>&#123;<span class="hljs-keyword">return</span> str.split(m, i).join(m).length;&#125;<span class="hljs-keyword">var</span> version = <span class="hljs-built_in">String</span>(hexo.version).split(<span class="hljs-string">&#x27;.&#x27;</span>);hexo.extend.filter.register(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<span class="hljs-keyword">var</span> config = hexo.config;<span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params">config.post_asset_folder</span>)</span>&#123;    <span class="hljs-keyword">var</span> link = data.permalink;<span class="hljs-keyword">if</span>(version.length &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">Number</span>(version[<span class="hljs-number">0</span>]) == <span class="hljs-number">3</span>)    <span class="hljs-keyword">var</span> beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<span class="hljs-keyword">else</span>    <span class="hljs-keyword">var</span> beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><span class="hljs-keyword">var</span> endPos = link.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;link = link.substring(beginPos, endPos);<span class="hljs-keyword">var</span> toprocess = [<span class="hljs-string">&#x27;excerpt&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>];<span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-params"><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; toprocess.length; i++</span>)</span>&#123;    <span class="hljs-keyword">var</span> key = toprocess[i];    <span class="hljs-keyword">var</span> $ = cheerio.load(data[key], &#123;    ignoreWhitespace: <span class="hljs-literal">false</span>,    xmlMode: <span class="hljs-literal">false</span>,    lowerCaseTags: <span class="hljs-literal">false</span>,    decodeEntities: <span class="hljs-literal">false</span>    &#125;);    $(<span class="hljs-string">&#x27;img&#x27;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">if</span> ($(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>))&#123;        <span class="hljs-comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span>        <span class="hljs-keyword">var</span> src = $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);        <span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;            !<span class="hljs-regexp">/^\s*\//</span>.test(src)) &#123;            <span class="hljs-comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span>            <span class="hljs-comment">// In addition, to support multi-level local directory.</span>            <span class="hljs-keyword">var</span> linkArray = link.split(<span class="hljs-string">&#x27;/&#x27;</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)</span>&#123;            <span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span>;            &#125;);            <span class="hljs-keyword">var</span> srcArray = src.split(<span class="hljs-string">&#x27;/&#x27;</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)</span>&#123;            <span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="hljs-string">&#x27;.&#x27;</span>;            &#125;);            <span class="hljs-keyword">if</span>(srcArray.length &gt; <span class="hljs-number">1</span>)            srcArray.shift();            src = srcArray.join(<span class="hljs-string">&#x27;/&#x27;</span>);            $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>, config.root + link + src);            <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);        &#125;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;no src attr, skipped...&quot;</span>);        <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info($(<span class="hljs-built_in">this</span>));    &#125;    &#125;);    data[key] = $.html();&#125;&#125;&#125;);</code></pre><h3 id="将新建的hexo博客上传到github中"><a href="#将新建的hexo博客上传到github中" class="headerlink" title="将新建的hexo博客上传到github中"></a>将新建的hexo博客上传到github中</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo d -g</span></code></pre><p><img src="/2020/03/06/hexo-github-markdown-install/4.png" alt="github上传工作目录"></p><p>​    再在浏览器访问:</p><p>​    <a href="https://lingchenbill.github.io/">https://lingchenbill.github.io/</a></p><p><img src="/2020/03/06/hexo-github-markdown-install/5.png" alt="浏览器地址"></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
