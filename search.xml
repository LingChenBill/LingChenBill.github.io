<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ECS知识记录</title>
      <link href="2021/11/15/ecs-started/"/>
      <url>2021/11/15/ecs-started/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="ECS记录"><a href="#ECS记录" class="headerlink" title="ECS记录"></a>ECS记录</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>Amazon Elastic Container Service (Amazon ECS)是一项高度可扩展且快速的容器管理服务，可轻松运行、停止和管理集群上的容器.<br>借助 Amazon ECS，您可以轻松部署、管理和扩展运行应用程序、服务和批处理流程的 Docker 容器.</p><p>Web 应用程序 : 可以构建可自动向上和向下扩展的 Web 应用程序，并在多个可用区之间在高可用性配置中运行该应用程序.<br>通过在 Amazon ECS 上运行，您的 Web 应用程序将受益于 AWS 的性能、规模、可靠性和可用性.<br>此外，默认情况下，您的服务还与多个 AWS 网络和安全服务集成，包括用于 Web 应用程序负载分配的 Application Load Balancer 和用于联网的 VPC.</p><p>Amazon ECS是一项区域服务，可在区域内的多个可用区中以高度可用的方式简化容器的运行.<br>您可以在新的或现有的 VPC 中创建 Amazon ECS 集群.<br>在群集启动并运行后，您可以创建用于定义在群集中运行的容器映像的任务定义.<br>您的任务定义用于运行任务或创建服务。容器映像将在容器注册表中存储和提取，例如，<a href="https://docs.aws.amazon.com/ecr">Amazon Elastic Container Registry</a>.</p><p>下图演示了Amazon ECS环境运行于AWS Fargate</p><img src="/2021/11/15/ecs-started/001.png" alt="ecs-001" style="zoom:50%;margin-left: 0;"><h4 id="2-容器和映像"><a href="#2-容器和映像" class="headerlink" title="2.容器和映像"></a>2.容器和映像</h4><p>容器 : 一种软件开发的标准化单位，包含您的软件应用程序需要运行的一切，包括相关代码、运行时、系统工具和系统库.<br>从称为<em>映像</em> 的只读模板中创建容器.</p><p>映像 : 映像通常由 Dockerfile 构建，后者是一个明文文件，指定了容器中包含的所有组件.<br>构建后，这些映像将存储在<em>注册表</em>在那里可以下载它们并在您的群集中运行.</p><img src="/2021/11/15/ecs-started/002.png" alt="ecs-002" style="zoom:50%;margin-left: 0;"><h4 id="3-任务定义"><a href="#3-任务定义" class="headerlink" title="3.任务定义"></a>3.任务定义</h4><p>为了准备要在上运行的应用程序Amazon ECS，您必须<u>创建<em>任务定义</em></u>.<br>任务定义是一个文本文件（JSON 格式），描述了构成应用程序的一个或多个容器（最多为 10 个）.<br>任务定义可以被视为**<u>应用程序的蓝图</u>**. 它为您的应用程序指定各种参数.<br>例如，这些参数可用于指示应使用哪些容器，应为应用程序打开哪些端口，应与任务中的容器一起使用哪些数据卷。可用于任务定义的特定参数取决于您的特定应用程序的需求.</p><p>以下是指定使用 Fargate 启动运行 NGINX Web 服务器的单个容器的任务定义的示例 (Fargate) : </p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;family&quot;</span>: <span class="hljs-string">&quot;webserver&quot;</span>,    <span class="hljs-attr">&quot;containerDefinitions&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;web&quot;</span>,            <span class="hljs-attr">&quot;image&quot;</span>: <span class="hljs-string">&quot;nginx&quot;</span>,            <span class="hljs-attr">&quot;memory&quot;</span>: <span class="hljs-string">&quot;100&quot;</span>,            <span class="hljs-attr">&quot;cpu&quot;</span>: <span class="hljs-string">&quot;99&quot;</span>        &#125;,    ],    <span class="hljs-attr">&quot;requiresCompatibilities&quot;</span>: [        <span class="hljs-string">&quot;FARGATE&quot;</span>    ],    <span class="hljs-attr">&quot;networkMode&quot;</span>: <span class="hljs-string">&quot;awsvpc&quot;</span>,    <span class="hljs-attr">&quot;memory&quot;</span>: <span class="hljs-string">&quot;512&quot;</span>,    <span class="hljs-attr">&quot;cpu&quot;</span>: <span class="hljs-string">&quot;256&quot;</span>,&#125;</code></pre><h4 id="4-任务和计划"><a href="#4-任务和计划" class="headerlink" title="4.任务和计划"></a>4.任务和计划</h4><p><em>任务</em> 是集群内的任务定义的实例化.<br>在为您的应用程序创建任务定义Amazon ECS，您可以指定要在您的群集上运行的任务数量.</p><p>Amazon ECS 任务计划程序负责将任务放置到您的集群中. 有多种不同的计划选项可供选择.</p><img src="/2021/11/15/ecs-started/003.png" alt="ecs-003" style="zoom:50%;margin-left: 0;"><h4 id="5-集群-Clusters"><a href="#5-集群-Clusters" class="headerlink" title="5.集群(Clusters)"></a>5.集群(Clusters)</h4><p>Amazon ECS <em>集群</em> 是任务或服务的逻辑分组.<br>您可以注册一个或多个Amazon EC2实例（也称为<em>容器实例</em>），以便在其上运行任务.或者，您可以使用Fargate提供运行任务.</p><p>当您第一次使用Amazon ECS，则会为您创建一个默认集群. 您可以在账户中创建其他集群以保持您的资源独立.</p><h4 id="6-容器代理"><a href="#6-容器代理" class="headerlink" title="6.容器代理"></a>6.容器代理</h4><p>这些区域有：<em>容器代理</em>在每个容器实例上运行Amazon ECS集群.<br>代理向发送有关资源的当前正在运行的任务和资源使用率的信息Amazon ECS. 它会启动和停止任务，只要它收到来自Amazon ECS.</p><img src="/2021/11/15/ecs-started/004.png" alt="ecs-004" style="zoom:50%;margin-left: 0;"><h4 id="7-相关服务"><a href="#7-相关服务" class="headerlink" title="7.相关服务"></a>7.相关服务</h4><ul><li>IAM(<strong>AWS Identity and Access Management</strong>) : 一项访问管理服务，可帮助您安全地控制对AWS资源的费用. 您可以使用 IAM 控制对哪个用户进行身份验证 (登录) 和授权 (具有权限) 以查看或执行对资源的特定操作.</li><li><strong>Amazon EC2 Auto Scaling</strong> : Auto Scaling是一项服务，可用于根据用户定义的策略、运行状况检查和时间表自动扩展或扩展任务.<br>您可以对服务内的 Fargate 任务使用 Auto Scaling，从而根据多个指标进行扩展，或对 EC2 任务使用来扩展集群中的容器实例.</li><li><strong>Elastic Load Balancing</strong> : Elastic Load Balancing服务在您的任务间自动分配应用程序的传入流量Amazon ECS服务.<br>它可以让您实现更高水平的应用程序<u>容错性能</u>，同时无缝提供分配应用程序流量所需的<u>负载均衡容量</u>。您可以使用 Elastic Load Balancing 创建一个使集群中的服务流量达到均衡的终端节点.</li><li><strong>Amazon Elastic Container Registry</strong> : Amazon ECR 是一项托管 AWS Docker 注册表服务，安全、可扩展且可靠.<br>通过使用 IAM，Amazon ECR 支持具有基于资源的权限的私有 Docker 存储库，以便特定用户或任务可以访问存储库和映像.</li><li><strong>AWS CloudFormation</strong> : AWS CloudFormation为开发人员和系统管理员提供了一种创建和管理相关AWS资源的费用.<br>更具体地说，它使资源的配置和更新更加有序和可预测. 您可以在 AWS CloudFormation 脚本中将集群、任务定义和服务定义为实体.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
            <tag> ecs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.net-on-aws-started</title>
      <link href="2021/11/08/net-on-aws-started/"/>
      <url>2021/11/08/net-on-aws-started/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="net-on-aws-started"><a href="#net-on-aws-started" class="headerlink" title=".net-on-aws-started"></a>.net-on-aws-started</h3><p><a href="https://explore.skillbuilder.aws/learn/course/8913/play/29096/getting-started-with-net-on-aws-japanese">课程名称: Getting Started with .NET on AWS (Japanese)</a></p><h4 id="1-AWS服务"><a href="#1-AWS服务" class="headerlink" title="1.AWS服务"></a>1.AWS服务</h4><p>如果使用无服务器计算选项，则可集中在核心应用程序上的时间变长。没有必要担心基础设施的管理和运用.</p><img src="/2021/11/08/net-on-aws-started/001_1.png" alt="net-001_1" style="zoom:50%;margin-left: 0;"><p>使用AWS的话，可以使用对应.NET应用程序的所有需求，广泛用途专用的存储和数据库解决方案.<br>强烈推荐根据应用程序所需的数据类型、访问模型、可扩展性类型选择合适的数据库.</p><img src="/2021/11/08/net-on-aws-started/001_2.png" alt="net-001_2" style="zoom:50%;margin-left: 0;"><p>使用身份服务的话，对于AWS云环境内的.NET应用，可以在适当的时机安全地给予适当的用户适当的访问.<br>使用监控和审计服务，可以获取应用程序和基础设施状态的细节，并评估定义的商业指标的性能.</p><img src="/2021/11/08/net-on-aws-started/001_3.png" alt="net-001_3" style="zoom:50%;margin-left: 0;"><h4 id="2-工具"><a href="#2-工具" class="headerlink" title="2.工具"></a>2.工具</h4><p>AWS的口号之一是“大楼的场所”「ビルダーのための場所」.<br>用户最熟悉的.NET开发工具提供扩展和整合.<br>这些工具是免费的，会定期更新。如果您有与AWS账户相关的认证信息，您可以使用这些工具.</p><img src="/2021/11/08/net-on-aws-started/001.png" alt="net-001" style="zoom:50%;margin-left: 0;"><ul><li><p>AWS SDK for .NET : AWS服务的呼叫变得和调用对象的方法一样简单</p></li><li><p><strong><u>AWS Toolkit for Visual Studio</u></strong> : 提供若干AWS服务和一些易用向导的资源管理视图</p><p>​    AWS Toolkit for Visual Studio是微软Visual Studio的扩展功能。这样一来，就可以使用AWS开发.NET应用程序，方便调试、部署.</p></li><li><p>AWS CDK for .NET : 允许云基础设施定义为代码</p></li><li><p>AWS Tools for PowerShell : 从命令行控制AWS服务</p></li></ul><h4 id="3-实践"><a href="#3-实践" class="headerlink" title="3.实践"></a>3.实践</h4><p>使用AWS Toolkit for Visual Studio，将NET Web应用的样品抽取到AWS云端.</p><p>架构图</p><img src="/2021/11/08/net-on-aws-started/0002.png" alt="net-0002" style="zoom:50%;margin-left: 0;"><h5 id="1-设置AWS"><a href="#1-设置AWS" class="headerlink" title="1.设置AWS"></a>1.设置AWS</h5><p>​        a) AWS用户, 权限, 凭证</p><p>​        b)  制作Visual Studio配置文件的话，可以在Visual Studio上注册IAM用户，知道认证的方法</p><img src="/2021/11/08/net-on-aws-started/002.png" alt="net-002" style="zoom:50%;margin-left: 0;"><img src="/2021/11/08/net-on-aws-started/003.png" alt="net-003" style="zoom:50%;margin-left: 0;"><img src="/2021/11/08/net-on-aws-started/004.png" alt="net-004" style="zoom:50%;margin-left: 0;"><h5 id="2-设置微软VS的代码环境"><a href="#2-设置微软VS的代码环境" class="headerlink" title="2.设置微软VS的代码环境"></a>2.设置微软VS的代码环境</h5><p>​        我们提供了一种可以在这个活动中使用的名叫UrlRedirector的样品ASP.NET Core网络应用.<br>​        示例是ASP.NET Core应用程序，用于创建短URL，将用户重定向到原来的长URL.</p><p>​        下载样本UrlRedirector.NET应用程序解冻，并在Visual Studio中打开</p><p>​    2.创建Amazon RDS数据库实例</p><p>​    <img src="/2021/11/08/net-on-aws-started/005.png" alt="net-005" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/007.png" alt="net-006" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/008.png" alt="net-008" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/009.png" alt="net-009" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/010.png" alt="net-010" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/011.png" alt="net-011" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/012.png" alt="net-012" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/013.png" alt="net-013" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/014.png" alt="net-014" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/015.png" alt="net-015" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/016.png" alt="net-016" style="zoom:50%;">    </p><p>​    <img src="/2021/11/08/net-on-aws-started/017.png" alt="net-017" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/018.png" alt="net-018" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/019.png" alt="net-019" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/020.png" alt="net-020" style="zoom:50%;"></p><p>​    强烈推荐根据NET应用程序所需的数据类型、访问模型、可扩展性类型选择合适的数据库.<br>​    在AWS中，可以简单地更改数据库引擎。例如，可以使用以下代替活动中使用的微软SQL Server</p><pre><code class="hljs bash">Amazon AuroraAurora具有高端商务数据库的处理速度和可靠性，以及开放源数据库的简单性和成本效益.Amazon DynamoDBAmazon DynamoDB是非关系或NoSQL数据库选项，对于总是需要低延时数据访问的应用来说是理想的.在这个样本应用程序中，DynamoDB最适合保存URL重定向。您也可以使用全局辅助索引来保存关于每个URL重定向所有者的信息.</code></pre><h4 id="3-将NET应用程序部署到AWS"><a href="#3-将NET应用程序部署到AWS" class="headerlink" title="3.将NET应用程序部署到AWS"></a>3.将NET应用程序部署到AWS</h4><p>​    <img src="/2021/11/08/net-on-aws-started/021.png" alt="net-021" style="zoom:50%;"></p><p>​    <img src="/2021/11/08/net-on-aws-started/022.png" alt="net-022" style="zoom:50%"></p><p>​    <img src="/2021/11/08/net-on-aws-started/023.png" alt="net-023" style="zoom:50%"></p><p>​    <img src="/2021/11/08/net-on-aws-started/024.png" alt="net-024" style="zoom:50%"></p><p>​    <img src="/2021/11/08/net-on-aws-started/025.png" alt="net-025" style="zoom:50%">    </p><p>​    <img src="/2021/11/08/net-on-aws-started/026.png" alt="net-026" style="zoom:50%"></p><p>​    <img src="/2021/11/08/net-on-aws-started/027.png" alt="net-027" style="zoom:50%"></p><p>​    <img src="/2021/11/08/net-on-aws-started/028.png" alt="net-028" style="zoom:50%"></p><p>​    <img src="/2021/11/08/net-on-aws-started/029.png" alt="net-029" style="zoom:50%"></p><p>​    <img src="/2021/11/08/net-on-aws-started/030.png" alt="net-030" style="zoom:50%"></p><p>4.清理资源</p><p>​    清理和删除所有资源，以避免进一步产生成本.<br>​    删除Amazon RDS数据库实例.<br>​    在Visual Studio的AWS资源管理器中，打开Amazon RDS节点，访问该实例.<br>​    右键单击实例，选择“Delete Instance”（删除实例）。这样，Amazon RDS数据库实例将从AWS云中删除.</p><p>​    <img src="/2021/11/08/net-on-aws-started/031.png" alt="net-031" style="zoom:50%"></p><p>​    删除AWS Elastic Beanstalk应用程序.<br>​    在Visual Studio的AWS资源管理器中，打开AWS Elastic Beanstalk节点访问实例.<br>​    右键单击实例，选择[Delete]（删除）。因此，Elastic Beanstalk的环境及其相关的所有资源将从AWS云中删除.</p><p>​    <img src="/2021/11/08/net-on-aws-started/032.png" alt="net-032" style="zoom:50%">    </p>]]></content>
      
      
      
        <tags>
            
            <tag> net </tag>
            
            <tag> aws </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aws中的Elastic-Beanstalk记录</title>
      <link href="2021/11/07/aws-elastic-beanstalk/"/>
      <url>2021/11/07/aws-elastic-beanstalk/</url>
      
        <content type="html"><![CDATA[<h3 id="Aws中的Elastic-Beanstalk记录"><a href="#Aws中的Elastic-Beanstalk记录" class="headerlink" title="Aws中的Elastic-Beanstalk记录"></a>Aws中的Elastic-Beanstalk记录</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>借助 Elastic Beanstalk，您可以在AWS云中快速部署和管理应用程序，而不必了解运行这些应用程序的基础设施.<br>Elastic Beanstalk 可降低管理的复杂性，但不会影响选择或控制。<br>您只需上传应用程序，Elastic Beanstalk 将自动处理有关容量预配置、负载均衡、扩展和应用程序运行状况监控的部署细节.</p><p>Elastic Beanstalk 支持在 Go、Java、.NET、Node.js、PHP、Python 和 Ruby 中开发的应用程序.<br>在部署应用程序时，Elastic Beanstalk 会构建选定的受支持的平台版本，并预配置一个或多个AWS资源（如 Amazon EC2 实例）来运行应用程序.</p><p>工具 : </p><ul><li>Elastic Beanstalk 控制台</li><li>AWS Command Line Interface (AWS CLI) </li><li><strong>eb</strong>（专为 Elastic Beanstalk 设计的高级 CLI）</li></ul><p>工作流程 : </p><img src="/2021/11/07/aws-elastic-beanstalk/001.png" alt="eb-001" style="zoom:50%;margin-left: 0;"><h4 id="2-开始使用-Elastic-Beanstalk"><a href="#2-开始使用-Elastic-Beanstalk" class="headerlink" title="2.开始使用 Elastic Beanstalk"></a>2.开始使用 Elastic Beanstalk</h4><p>创建示例程序时，Elastic Beanstalk 创建以下AWS资源 : </p><ul><li><p><strong>EC2 实例</strong> - 配置来在您选择的平台上运行 Web 应用程序的 Amazon EC2 虚拟机。</p><p>各平台运行一组不同的软件、配置文件和脚本以支持特定的语言版本、框架、Web 容器或其组合。大多数平台使用 Apache 或 nginx 作为在 Web 应用程序前处理 Web 流量的反向代理，向其转发请求、提供静态资产以及生成访问和错误日志。</p></li><li><p><strong>实例安全组</strong> - 配置为<u>允许端口 80 上的传入流量的 Amazon EC2 安全组</u>。<br>通过此资源，HTTP 流量可以从负载均衡器到达运行您的 Web 应用程序的 EC2 实例。<br><u>默认情况下，其他端口不允许流量进入。</u></p></li><li><p><strong>Amazon S3 存储桶</strong> - 使用 Elastic Beanstalk 时创建的源代码、日志和其他构件的存储位置。</p></li><li><p><strong>Amazon CloudWatch 警报</strong> - 用于监控环境中的实例负载的两个 CloudWatch 警报，它们将在负载过高或过低时触发。警报触发后，您的 Auto Scaling 组会扩展或收缩以进行响应。</p></li><li><p><strong>AWS CloudFormation 堆栈</strong> – Elastic Beanstalk 使用 AWS CloudFormation 启动您环境中的资源并传播配置更改。这些资源在您可通过 <a href="https://console.aws.amazon.com/cloudformation">AWS CloudFormation 控制台</a>查看的模板中定义。</p></li><li><p><strong>域名</strong> - 一个域名，它以下面的形式路由到您的 Web 应用程序：*<code>subdomain</code>.<code>region</code>.elasticbeanstalk.com*。</p></li></ul><img src="/2021/11/07/aws-elastic-beanstalk/002.png" alt="eb-002" style="zoom:50%;"><p>环境概述窗格显示有关您的环境的顶级信息.<br>这包括其名称、URL、当前运行状况、当前部署的应用程序版本的名称以及运行应用程序的平台版本.<br>在概述窗格的下方，您会看到最新的五个环境事件.</p><ul><li><strong>Configuration (配置)</strong> - 显示为此环境预配置的资源，如托管应用程序的 Amazon Elastic Compute Cloud (Amazon EC2) 实例。您可以在此页面上配置某些已预配置的资源。</li><li><strong>Health (运行状况)</strong> - 显示有关运行应用程序的 Amazon EC2 实例的状态和详细运行状况信息。</li><li><strong>Monitoring (监控)</strong> - 显示环境的统计数据（如平均延迟和 CPU 使用率）。可以使用此页面为所监控的指标创建警报。</li><li><strong>Events (事件)</strong> - 显示来自 Elastic Beanstalk 服务以及此环境使用其资源的其他服务的信息或错误消息。</li><li><strong>Tags (标签)</strong> - 显示环境标签，并允许您对其进行管理。标签是应用于您的环境的密钥值对。</li></ul><h4 id="3-上传新版本"><a href="#3-上传新版本" class="headerlink" title="3.上传新版本"></a>3.上传新版本</h4><ol><li>打开 <a href="https://console.aws.amazon.com/elasticbeanstalk">Elastic Beanstalk 控制台</a>，然后在 **Regions (区域)**列表中选择您的AWS区域。</li><li>在导航窗格中，选择 **Environments (环境)**，然后从列表中选择环境的名称。</li><li>在环境概述页面上，选择 **Upload and deploy (上传和部署)**。</li></ol><img src="/2021/11/07/aws-elastic-beanstalk/003.png" alt="eb-003" style="zoom:50%; margin-left: 0;"><p>当 Elastic Beanstalk 将文件部署到 Amazon EC2 实例时，您可以在环境概述中查看部署状态.<br>应用程序版本更新时，<strong>Environment Health (环境运行状况)</strong> 状态为灰色.<br>部署完成时，Elastic Beanstalk 会执行应用程序运行状况检查.<br>当应用程序对运行状况检查进行响应时，它被视为运行状况良好，状态会变回<u><strong>绿色</strong></u>.<br>环境概述显示新的 <strong>Running Version (运行版本)</strong> - 您作为 <strong>Version label (版本标签)</strong> 提供的名称.</p><p>Elastic Beanstalk 也会上传您的新应用程序版本并将其添加到应用程序版本表.<br>要查看此表，请选择导航窗格上的 <strong>getting-started-app</strong> 下的 **Application versions (应用程序版本)**。</p><h4 id="4-修改配置"><a href="#4-修改配置" class="headerlink" title="4.修改配置"></a>4.修改配置</h4><ol><li><p>在导航窗格中，选择 **Configuration (配置)**。</p></li><li><p>在 <strong>Capacity (容量)</strong> 配置类别中，选择 **Edit (编辑)**。</p></li><li><p>在 <strong>Auto Scaling group (Auto Scaling 组)</strong> 部分中，将 <strong>Environment type (环境类型)</strong> 更改为 **Load balanced (负载均衡)**。</p></li><li><p>在<strong>实例</strong>行上，将<strong>最大</strong>更改为 <code>4</code>，然后将<strong>最小</strong>更改为 **<u><code>2</code></u>**。</p></li><li><p>选择 <strong>Apply</strong>。</p></li><li><p>将显示警告信息，告诉您此更新将替换您当前的所有实例。选择 <strong>Confirm</strong>。</p></li><li><p>在导航窗格中，选择 <strong>Events</strong>。</p><p>环境更新可能需要几分钟的时间。要确定它已完成，请在事件列表中查找事件 **Successfully deployed new configuration to environment (已成功将新配置部署到环境)**。这确认了 Auto Scaling 实例的最少数目已经设置为 2。Elastic Beanstalk 将自动启动第二个实例</p></li></ol><p><img src="/2021/11/07/aws-elastic-beanstalk/004.png" alt="eb-004"></p><h4 id="5-验证配置更改"><a href="#5-验证配置更改" class="headerlink" title="5.验证配置更改"></a>5.验证配置更改</h4><p>启用增强型运行状况报告 : </p><ol><li>在导航窗格中，选择 <strong>Configuration (配置)</strong>.</li><li>在 <strong>Monitoring (监控)</strong> 配置类别中，选择 <strong>Edit (编辑)</strong>.</li><li>在<strong>运行状况报告</strong>下，为<strong>系统</strong>选择<strong>增强型</strong>.</li></ol><img src="/2021/11/07/aws-elastic-beanstalk/005.png" alt="eb-004" style="zoom:50%;margin-left: 0;"><img src="/2021/11/07/aws-elastic-beanstalk/006.png" alt="eb-006" style="zoom:50%;"><p>查看结果 : </p><img src="/2021/11/07/aws-elastic-beanstalk/007.png" alt="eb-007" style="zoom:50%;"><h4 id="6-清除资源"><a href="#6-清除资源" class="headerlink" title="6.清除资源"></a>6.清除资源</h4><p>已成功地将示例应用程序部署到AWS云、上传了新版本并修改了配置以添加第二个 Auto Scaling 实例.<br>为确保您不用为未使用的任何服务付费，请删除所有应用程序版本并终止环境.<br>这也会删除环境为您创建的AWS资源.</p><img src="/2021/11/07/aws-elastic-beanstalk/008.png" alt="eb-008" style="zoom:50%;"><img src="/2021/11/07/aws-elastic-beanstalk/009.png" alt="eb-009" style="zoom:50%; margin-left: 0;"><h4 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a>后续步骤</h4><ul><li><a href="https://docs.aws.amazon.com/zh_cn/elasticbeanstalk/latest/dg/eb-cli3-install.html">EB CLI</a></li><li><a href="https://docs.aws.amazon.com/zh_cn/elasticbeanstalk/latest/dg/GettingStarted.Next.html"><strong>WS Toolkit for Visual Studio</strong></a></li><li><a href="https://docs.aws.amazon.com/zh_cn/elasticbeanstalk/latest/dg/create_deploy_NET.html"><strong>AWS Toolkit for Visual Studio</strong></a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> aws </tag>
            
            <tag> eb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PMP-关键词记录</title>
      <link href="2021/11/03/pmp-keywords-starts/"/>
      <url>2021/11/03/pmp-keywords-starts/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="PMP-关键词记录"><a href="#PMP-关键词记录" class="headerlink" title="PMP-关键词记录"></a>PMP-关键词记录</h3><h4 id="1-监控项目工作"><a href="#1-监控项目工作" class="headerlink" title="1.监控项目工作"></a>1.监控项目工作</h4><pre><code class="hljs bash">备选方案分析: 用于在出现偏差时选择要执行的纠正措施或纠正措施和预防措施的组合.成本效益分析: 有助于确定最节约成本的纠正措施.挣值分析: 对范围, 进度和成本绩效进行了综合分析.根本原因分析: 可用于识别出现偏差的原因.趋势分析: 根据以往结果预测未来绩效.偏差分析: 审查目标绩效与实际绩效之间的差异.</code></pre><p>趋势分析是一种分析技术, 它使用数学模型根据历史结果预测未来结果.<br>趋势分析根据以往结果预测未来绩效, 它可以预测项目的进度延迟, 提前让项目经理意识到, 按照既定趋势发展, 后期进度可能出现的问题.<br>趋势分析旨在<u>审查项目绩效</u>随时间的变化情况, 以判断绩效是正在改善还是正在恶化.</p><p><img src="https://raw.githubusercontent.com/LingChenBill/imgs/main/pmp-keywords-starts-001.png" alt="001"></p><p>问题:</p><pre><code class="hljs bash">一个项目正在实施将为组织提供竞争优势的技术.项目经理了解到, 一项刚推出的新技术可以导致计划推出的技术过时.项目经理应该怎么做?A. 忽略这技术的发展, 并关注项目的原始范围B. 建议使用新技术来跟上最新的技术发展C. 执行成本效益分析, 以确定升级是否合理D. 完成影响评估并为项目建议最佳可选方案<span class="hljs-comment"># D</span>根据当时的初步信息, 商业案例中的财务预测数量级较高. 在项目规划期间, 现在很清楚, 需要完成若干其他扶持活动才能交付项目.这意味着项目预算至少比商业认证中所述的要增加50%.你接下来应该怎么做?A. 在项目范围中包括活动, 在产品预算中包括新的估算值B. 对项目执行成本/收益分析C. 将此记录为项目风险并夸大应急储备D. 发出变更请求以增加时间和预算<span class="hljs-comment"># B</span>你最近向客户交付了一款产品, 你花了18个月的时间才构建产品. 该产品是根据具有特定产品规格的合同专门为该客户制造的.因测试遗漏了一项缺陷, 产品投入生产, 引起了客户投诉. 产品符合合同中的规范, 因为合同只规定了高层级产品要求, 没有指定设计细节.你应该先做什么?A. 调查问题并确定根本原因B. 发出变更请求以修复缺陷C. 通知客户产品符合要求, 但你愿意考虑解决此问题D. 修复问题, 但向客户收取任何额外费用<span class="hljs-comment"># A</span>以下所有选项都是有效变更控制过程的组成部分, 除了: A. 偏差分析B. 专家判断C. 变更控制D. 会议<span class="hljs-comment"># A</span>你正在参加一个由项目经理展示其项目的项目评审会议. 到目前为止, 他的项目受到了良好控制, 在成本和进度基准方面表现良好.在此基础上, 项目经理预测了项目完成日期和最终成本估算. 项目经理应用了哪种技术?A. 历史分析B. 趋势分析C. 参数化分析D. 帕累托分析<span class="hljs-comment"># B</span>在审查一个长期项目期间, 相关方对项目经理关于项目绩效已随时间转移而得到改善的主张表示不认同.他们要求提交详细的报告. 项目经理应该怎么做?A. 完成趋势分析, 并报告结果B. 确定进度绩效指数(SPI), 以显示团队的工作效率C. 计算完工尚需估算(ETC), 以显示潜在的新完成日期D. 执行偏差分析, 并报告结果<span class="hljs-comment"># A</span>在一个项目中途, 一名新项目经理加入团队. 在审查项目管理计划后, 项目经理意识到项目需求存在差距. 项目经理下一步应该做什么?A. 要求项目发起人提供所有遗漏的需求B. 与项目团队合作以收集所有遗漏的需求C. 与关键相关方开会, 以识别与遗漏需求相关的风险D. 安排一次与关键相关方的需求澄清会议<span class="hljs-comment"># D</span>在项目执行中, 项目经理发现了严重成本超支问题. 在进行根本原因分析后, 项目经理确定批准的预算与原始估算不一致.若要避免这个问题, 项目经理应该事先做什么?A. 注意在每次挣值审查期间的趋势, 并在第一次出现超支迹象时重新估算B. 预测成本超支, 并请求提供更高的应急储备以解决潜在的差距C. 在创建成本管理计划期间识别这种差异, 并增加预算D. 减少团队估算的小时数以与原始项目预算保持一致<span class="hljs-comment"># A</span>你正在开发一个实时跟踪公司开支的解决方案. 在详细设计过程中, 团队发现软件体系结构依赖于第三方开源组件, 该组件会导致某些负载的稳定性问题.此组件对整个系统的设计至关重要, 但给项目带来重大风险. 你应该先做什么?A. 雇用程序员来定制和增强第三方组件B. 从头开始开发组件C. 与第三方接触, 共同处理稳定性问题D. 执行备选方案分析<span class="hljs-comment"># D</span></code></pre><h4 id="2-结束项目或阶段"><a href="#2-结束项目或阶段" class="headerlink" title="2.结束项目或阶段"></a>2.结束项目或阶段</h4><p><strong>中止</strong> : 项目中止, 先要调查原因, 再更新经验教训, 调查原因的目的是经验教训.</p><pre><code class="hljs bash">一个关键项目相关方撤回对项目的财务支持. 项目现在资金不足, 可能会取消, 项目经理应该怎么做?A. 与该项目相关方开会, 确定撤回财务支持的原因B. 与团队一起头脑风暴成本节约方案C. 寻找愿意提供财务支持的新项目相关方D. 与项目发起人开会, 建议取消项目<span class="hljs-comment"># A</span></code></pre><p> <strong>移交</strong> : 交付所有权, 转交给运营团队</p><pre><code class="hljs bash">项目经理成功地将空调采购从 A 供应商转向 B 供应商. 新产品检验完毕, 并交付了所有项目可交付成果. 项目经理下一步应该怎么做?A. 将所有权移交采购部, 以便再次订购B. 向供应商 B 授予成本加激励费用采购合同C. 作出自制或外购决定D. 审查采购工作说明书<span class="hljs-comment"># A</span></code></pre><h4 id="3-塔克曼阶梯理论"><a href="#3-塔克曼阶梯理论" class="headerlink" title="3.塔克曼阶梯理论"></a>3.塔克曼阶梯理论</h4><p>团队建设通常要经过五个阶段</p><p><img src="https://raw.githubusercontent.com/LingChenBill/imgs/main/pmp-keywords-starts-002.png" alt="002"></p><ul><li><p>形成阶段: 团队成员刚刚加入团队, 对项目的任务和分工通常都不甚了解, 需要项目经理直截了当, 清晰明确地指明工作内容和要求.<br>在这个阶段, 处于了解项目情况中, 完成的<u>工作量是最小的</u>.项目经理需要指导团队, 并将他们从这个阶段推进到执行阶段.<br>团队成员<u>独立工作</u>.</p></li><li><p>震荡阶段: 团队成员之间爆发冲突, 土气低落, 项目应该通过斡旋, 调解, 利用自己的影响力引导团队走出冲突的旋涡.</p><p>团队开始<u>了解项目工作</u>.</p></li><li><p>规范阶段: 团队成员已经开始互相认可, 彼此适应, 项目应该适度接后撤, 需要参与时再参与, 主要起到帮助和促进团队建设的作用.<br>团队开始<u>相互学习</u>.</p></li><li><p>表现阶段/成熟阶段: 团队已经配合默契, 项目经理应该充分信任团队, 给团队成员更充分的授权, 为团队提供必要的支持.<br>在成熟阶段, 他们作为一个组织良好的单位工作, 达到最大的性能.</p></li></ul><p>团队不同发展阶段项目经理的领导风格:</p><ul><li>形成阶段 —- 指令型/指导式</li><li>震荡阶段 —- 影响型/教练式</li><li>规范阶段 —- 参与型</li><li>表现阶段/成熟阶段 —- 授权型/委任式</li></ul><p><img src="https://raw.githubusercontent.com/LingChenBill/imgs/main/pmp-keywords-starts-009.png" alt="009"></p><pre><code class="hljs bash">项目经理观察到这段时间团队冲突在减少, 团队成员开始彼此接受并主动配合对方. 这时项目经理应该采取以下哪种领导风格?A. 指令型B. 影响型C. 参与型D. 授权型<span class="hljs-comment"># C</span>项目经理发现项目团队成员之间缺乏信任, 冲突不断, 土气低落. 团队可能进入了什么阶段? 此时项目经理应该采取哪种类型的领导风格?A. 震荡阶段, 指导型B. 规范阶段, 参与型C. 规范阶段, 授权型D. 震荡阶段, 影响型<span class="hljs-comment"># D</span>团队经历不同的发展阶段, 根据塔克曼发展阶梯, 完成工作量最小的阶段通常是: A. 震荡阶段B. 形成阶段C. 规范阶段D. 成熟阶段<span class="hljs-comment"># B</span>你正在与高级经理会面, 他正在帮助你组织和管理来自不同背景的IT人员团队. 在讨论团队现在展示的创造力和突破性表现时, 你的高级经理表示你的团队已经从震荡阶段转移到了成熟阶段. 以下哪一项描述了成熟阶段的特征?A. 在成熟阶段, 团队开始一起工作并调整他们的行为B. 在成熟阶段, 团队作为一个组织良好的单位发挥作用C. 在成熟阶段, 团队完成工作并作为项目团队解散D. 在成熟阶段, 团队成员不协作<span class="hljs-comment"># B</span></code></pre><h4 id="4-引导式研讨会"><a href="#4-引导式研讨会" class="headerlink" title="4.引导式研讨会"></a>4.引导式研讨会</h4><p>引导与主题研讨会结合使用, 把主要相关方召集在一起定义产品需求.<br>研讨会可用于快速定义跨职能需求并协调相关方的需求差异.</p><p>引导式研讨会可用于快速定义跨职能需求并协同相关方的需求差异.<br>因为具有群体互动的特点, 有效引导的研讨会有助于参与之间建立信任, 改进关系, 改善沟通, 从而有利于相关方达成一致意见.<br>此外, 分别召开会议相比, 研讨会能够更早发现并解决问题.</p><p>keywords : 需求不同, 需求差异, 需求不一致</p><pre><code class="hljs bash">项目团队在项目规划阶段收集需求. 客户的信息技术团队所提交的某些需求与客户的商务部提出的需求相冲突.应该用下列哪一项来与相关方解决这个问题?A. 开展访谈B. 引导式研讨会C. 召集焦点小组会议D. 执行需求头脑风暴<span class="hljs-comment"># B</span>引导式研讨会 -&gt; 专门用于解决需求不一致的工具在收集需求过程的中途, 项目经理发现有许多与产品需求有关未解决的问题, 以下哪一项通常是发现和解决问题的最佳方法?A. 面谈B. 使用相关方登记册C. 问卷调查D. 研讨会<span class="hljs-comment"># D</span>在位于不同地区的众多相关方验收可交付成果后, 项目经理希望衡量他们的满意度. 项目经理该使用哪种工具?A. 头脑风暴B. 焦点小组C. 访谈D. 调研<span class="hljs-comment"># D</span></code></pre><h4 id="5-需求跟踪矩阵"><a href="#5-需求跟踪矩阵" class="headerlink" title="5.需求跟踪矩阵"></a>5.需求跟踪矩阵</h4><p>需求跟踪矩阵是收集需求过程的输出, 它用于跟踪需求到<u>项目范围</u>, <u>目标</u>和<u>测试策略</u>. 将需求跟踪到项目风险是无效的.</p><p>需求跟踪矩阵提供了在整个项目生命周期中跟踪需求的一种方法.<br>把每个需求与业务目标或项目目标联系起来.</p><p>keywords : 相关方对可交付成果所有权有争议; 如何跟踪需求; 可交付成果的变更过程; 与业务目标联系</p><pre><code class="hljs bash">项目经理正与两名都声称对某一特定可交付成果拥有所有权的职能经理交涉. 项目经理可以查阅哪一份说明该问题的文件?A. 工作分析结构B. 需求跟踪矩阵C. 工作说明书D. 责任分配矩阵<span class="hljs-comment"># B</span>你最近被聘为复杂流程数字化项目的项目经理. 该项目是目前正在使用瀑布式实践进行管理的更大项目的一部分.你希望在项目上尝试敏捷方法, 但需要维护需求可追溯性矩阵以符合计划治理需求.需求跟踪矩阵有助于跟踪以下所有情况, 但以下情况除外: A. 项目目标的要求B. 测试策略的要求C. 项目风险要求D. 项目范围的要求<span class="hljs-comment"># C</span></code></pre><h4 id="6-范围说明书"><a href="#6-范围说明书" class="headerlink" title="6.范围说明书"></a>6.范围说明书</h4><p>项目范围说明书提供产品描述, 验收标准, 关键可交付成果, 项目边界, 假设和有关项目的制约因素.<br>项目范围说明书是对项目范围, 主要可交付成果, 假设条件和制约因素的描述</p><ul><li>产品范围描述</li><li>可交付成果</li><li>验收标准</li><li>项目除外责任</li></ul><p>keywords : 可交付成果, 不知道如何满足需求, 验收标准</p><pre><code class="hljs bash">项目经理被任命管理一个现有项目, 需求了解项目可交付成果, 项目经理应该参考下列哪一份文件?A. 项目章程B. 项目需求规范C. 项目范围说明书D. 项目进度表<span class="hljs-comment"># C</span>一家公司将更换使用了10年, 不再符合市场需求基于旧平台的集成系统. 在项目规划期间, 管理人员将一个更灵活的价格结构作为关键需求.高级管理人员还未决定如何满足这项需求, 但是同意该需求的战略正确性. 在项目执行期间, 价格结构的变更将要求频繁的返工和重新测试.下列哪项项目计划元素能够系统的解决这些问题?A. 项目变更需要获得高级管理人员批准的质量政策B. 能够从新需求中识别风险的风险应对计划C. 实施价格结构变更的人员增加计划D. 具有详细实施需求的范围说明书<span class="hljs-comment"># D</span>在收集需求过程中, 各种工具和技术决定了项目需求. 这些要求构成了定义项目范围的基础.项目经理的职责之一是在这个过程中确定关键的项目可交付成果.关键项目可交付成果记录在哪里?A. 范围管理计划B. 需求管理计划C. 项目范围说明书D. 验收的可交付成果<span class="hljs-comment"># C</span>你最近接手了一个陷入困境的项目, 担任新的项目经理. 你发现以前的项目经理不太注重风险管理过程, 因此现在出现了一些问题,而你没有制定对应的应急计划. 你想要开始详细的调查, 现在正在寻找与项目关联的特定假设的详细说明.哪一个文档应该包含此内容?A. 项目章程B. 项目范围说明书C. 项目配置文档D. 变更管理计划<span class="hljs-comment"># B</span></code></pre><h4 id="7-WBS"><a href="#7-WBS" class="headerlink" title="7.WBS"></a>7.WBS</h4><p>WBS : 100%原则, 滚动式规划, 唯一编码</p><p>滚动式规划 : 在项目生命周期的不同阶段, 工作的详细程度会有所不同. 在早期的战略规划阶段, 信息尚不够明确, 工作包只能分解到已知的详细水平;<br>而后, 随着了解到更多的信息, 近期即将实施的工作包就可以分解到具体的活动.<br>keywords : 无法继续分解, 信息不够明确, 后期规划</p><p>项目范围根据项目范围基准进行测量, 该基准由项目范围声明, 其关联的 WBS 和 WBS 词典组成.</p><p>**<u>范围基准</u>**是创建 WBS 流程的输出.</p><p>创建WBS的输入包括 : </p><ul><li>范围管理计划</li><li>项目范围说明书</li><li>需求文件</li><li>事业环境因素</li><li>组织过程资产</li></ul><p><strong><u>自下而上估算</u></strong> : 当活动很复杂且无法准确估计时, 将活动分解为<u>较小的组件</u>进行估算. 然后<u>汇总</u>这些单独的组件估算, 以获取活动的成本估算. </p><p><u><strong>组织分解结构(OBS)</strong></u> : 与WBS类似, 不是根据项目交付成果的细目来安排的, 而是根据组织现有的部门, 单位或团队来安排的.</p><pre><code class="hljs bash">进行自制或外购分析后, 项目经理将已经包含工作分解结构(WBS)中的内容进行外包, 项目经理应该采取下列哪一项措施?A. 将需要外包的可交付成果从WBS中移除B. 将需要外包的可交付成果保留在WBS中C. 创建另一个WBS, 仅包含将需要外包的可交付成果D. 等到选定外包供应商后才对WBS进行更改<span class="hljs-comment"># B</span>项目管理团队等到可交付成果或子项目澄清后才能制定详细的工作分解结构, 这种情况下, 该选择下面哪项技术?A. 叠加式规划B. 自上而下规划C. 滚动式规划D. 自下而上规划<span class="hljs-comment"># C</span>你正在领导一个业务过程自动化项目, 业务分析师正在帮助你满足业务需求. 你作为项目经理负责整个项目范围, 而业务分析师负责产品范围.产品范围是根据产品要求来衡量的, 而项目范围是根据: A. WBS 和 WBS 词典B. 项目范围说明书及其关联的 WBS 和 WBS 词典C. 项目要求和 WBSD. 验收标准<span class="hljs-comment"># B</span>在一场正在给城市建造赌场的承包商的分包投标中, 你的组织成功中标. 中标工程范围包括在项目现场采购和安装闭路电视摄像机.你现在正在为此项目开发WBS. 在创建WBS结构时, 你不应使用以下哪荐作为输入?A. 物料清单B. 项目范围说明书C. 组织过程资产D. 需求文件<span class="hljs-comment"># A</span><span class="hljs-comment"># 物料清单(BOM) : 是生产制造中产品的原材料组成清单, 不用作创建WBS过程中的输入.</span>一个项目团队目前正在规划一个网站开发项目. 所有客户的要求都已经收集, 记录并由客户验证.团队现在已经准备好整合项目的工作分解结构. 以下哪一项是创建 WBS 过程的输出?A. 分解B. 项目范围说明书C. 需求文件D. 范围基准<span class="hljs-comment"># D</span>在纺织制造项目中, 一个团队将项目工作分成35个工作包, 并分配了几个工作包到设计部门进行审核.审核后, 设计部门的经理要求团队进一步将工作包划分为更易于管理的工作组件, 以便估算和调度资源, 团队应使用以下哪种技术来满足经理的要求?A. 分解B. 参数估算C. 优先级绘制图表方法D. 自下而上估算<span class="hljs-comment"># A</span>你最近启动了一个机器人过程自动化项目. 项目进度计划的初稿已经制定, 现在你已经把注意力转移到了估算项目成本上.你要求项目团队将项目活动分解为较小的组件, 以便获得更准确的成本估计, 然后将较低级别组件的这些成本估算聚合到总体项目预算中.这是哪种估算技术?A. 工作分解结构B. 自下而上估算C. 类比估算D. 分解<span class="hljs-comment"># B</span>你最近完成了项目管理计划的初稿. 现在, 你希望召开高级相关方会议, 说服他们为该项目提供最佳可用资源.你希望一目了然地显示分配给各个组织部门的所有工作包或项目活动. 你应该使用以下哪些工具?A. 组织分解结构(OBS)B. RACI矩阵C. 工作分解结构(WBS)D. 角色和责任图表<span class="hljs-comment"># A</span></code></pre><h4 id="8-范围基准"><a href="#8-范围基准" class="headerlink" title="8.范围基准"></a>8.范围基准</h4><p>范围基准是经过批准的范围说明书, WBS和相应的WBS词典, 只有通过正式的变更控制程序才能进行变更, 它被用作比较的基础.</p><ul><li>范围说明书</li><li>WBS</li><li>WBS词典</li></ul><p>keywords : 变更程序, 包含三项, 验收标准</p><pre><code class="hljs bash">在项目实施期间, 一些团队成员抱怨说他们对项目可交付成果不确定. 若要确保项目团队按照项目范围工作, 项目经理应该怎么做?A. 审查执行, 负责, 咨询和知情(RACI)矩阵B. 更新沟通管理计划, 澄清期望C. 与团队分享项目章程D. 将工作分解结构(WBS)分发给团队<span class="hljs-comment"># D</span></code></pre><h4 id="9-范围蔓延"><a href="#9-范围蔓延" class="headerlink" title="9.范围蔓延"></a>9.范围蔓延</h4><p>范围蔓延 : 未经控制的产品或项目范围的扩大(未对时间, 成本和资源做相应调整)</p><ul><li>客户或相关方变更范围</li><li>团队成员主动变更范围</li></ul><p>是否实施整体变更控制,是 -&gt; 蔓延; 否 -&gt; 镀金</p><p>keywords : 团队包含了; 项目经理增加了; 主动增加了; 成员按照要求执行;</p><pre><code class="hljs bash">在为一家公司开发软件时, 供应商收到几个新的客户请求, 这些请求都包含在系统中, 软件按时交付, 但因为高级管理人员认为软件不符合要求而拒收该软件.若要避免这个问题, 供应商的项目经理应该事先做什么?A. 审查需求跟踪矩阵B. 请求高级管理层参与客户高级管理层一起讨论需求C. 执行实施整体变更控制过程, 并更新项目文件和基准D. 核实项目范围<span class="hljs-comment"># C</span>你当前正在审核组织的项目管理实践, 你已经意识到, 尽管大多数项目都有已批准的范围声明, 但范围蔓延是所有组织项目中的常见问题.现在, 你已经将注意力转移到了这些范围蔓延的内容上, 以确定此问题的根本原因.项目范围说明书的以下哪个组件在减少范围蔓延方面很有用?A. 除外条款B. 范围描述C. 验收标准D. 可交付成果<span class="hljs-comment"># A</span>你正在为你所在国家的一家大型快递公司管理一个运输管理系统开发项目.这个项目有大量的相关方, 到目前为止, 你们一直在努力定义系统开发所需的详细项目需求.因此, 你决定尝试敏捷方法进行系统开发. 在没有定义详细的系统需求的情况下, 以下哪项是项目的主要风险之一?A. 范围蔓延B. 确认范围C. 增值范围D. 范围控制<span class="hljs-comment"># A</span>一个项目已经失控, 项目经理正试图重新控制它并对项目范围进行了一些更改.其中一些变更导致进一步的变化, 项目成本上升, 项目进度也超出计划. 这称为: A. 项目蠕变B. 范围上升C. 范围蔓延D. 范围控制<span class="hljs-comment"># C</span>你正在管理组织重新设计项目. 尽管更高级别的运营模式得到了首席执行官的批准, 但高管们正努力设想未来的状态.这给你项目的成功带来了很大的不确定性. 以下哪一项是现阶段的主要项目风险?A. 变更控制B. 范围蔓延C. 项目的战略调整D. 员工流动率<span class="hljs-comment"># B</span></code></pre><h4 id="10-预防措施"><a href="#10-预防措施" class="headerlink" title="10.预防措施"></a>10.预防措施</h4><p>预防措施 : 如何采取行动以确保今后的遵守</p><ul><li>纠正措施 : 为使项目工作绩效重新与项目管理计划一致, 而进行的有目的的活动</li><li>预防措施 : 为确保项目工作的<u><strong>未来绩效</strong></u>符合项目管理计划, 而进行的有目的的活动</li><li>缺陷补救 : 为了修正不一致产品或产品组件的有目的的活动</li><li>更新 : 对正式受控的项目文件或计划等进行的变更, 以反映修改或增加的意见或内容</li></ul><pre><code class="hljs bash">你管理过一个联邦公路建设项目, 该项目旨在改善该国南北地区之间的交通. 在执行阶段, 你收到了许多相关方的投诉, 包括公路运输机构.这些投诉至少有一半是关于道路微观结构的质量, 以及不符合项目质量管理计划的质量水平.到目前为止, 你已成功修复了所有报告的问题, 但你担心此重复事件. 你应该怎么做来避免将来出现类似的问题?A. 启动缺陷补救以修复道路或完全铺平新道路B. 采取预防措施, 减少与道路质量有关的负面后果的可能性C. 启动变更请求以更新项目质量管理计划D. 采取纠正措施, 使道路的未来质量符合项目管理计划<span class="hljs-comment"># B</span>朱莉娅正在管理一个软件开发项目. 最近, 一个意外事件把项目推迟了15天. 朱莉娅召集了一个团队会议, 以确定采取哪些措施使项目如期进行.为使结果与项目计划保持一致, 最好采取的措施为?A. 变更请求B. 预防措施C. 纠正措施D. 缺陷补救<span class="hljs-comment"># C</span>你被要求审计一个项目的项目绩效, 这个项目偏离成本基准并且难以满足进度计划.你希望先从项目范围开始审计, 以确定是否真的是那些没经过变更控制的变更行为造成了项目的范围变化.对项目范围本身的分析得出了变更请求可能会引起范围基准的变化变更请求可以包括以下所有内容, 除了: A. 纠正措施B. 支持行动C. 缺陷修复D. 预防措施<span class="hljs-comment"># B</span></code></pre><h4 id="11-合同"><a href="#11-合同" class="headerlink" title="11.合同"></a>11.合同</h4><p>合同是对双方都有约束力的协议. 它强制卖方提供规定的产品, 服务或成果, 强制买方向卖方支付相应的报酬.<br>合同建立了受法律保护的买卖双方的关系.</p><p>PMI道德与职业行为准则<br>项目经理应该按照合同做事, <u>超出合同的部分不应该谈判或接受</u>.</p><p>当发现项目有范围重复, 由于你是根据客户组织的**<u>合同</u>**执行此项目, 因此出现这个问题, 你需要根据合同上报此事.</p><p>处理合同相关的情景问题 : </p><ul><li>首先查阅合同中是否对此进行约定</li><li>如未约定, 对合同进行变更, 将检查标准纳入合同范围</li><li>根据新增加的合同条款监督合同的执行</li></ul><p>协议 : 协议包含了工作说明书, 验收标准, 绩效报告, 奖惩措施等.<br>当项目为外部客户执行时, 正式交付成果验收的要求以及如何处理不符合要求的交付成果通常在**<u>项目协议</u>**中定义.</p><pre><code class="hljs bash">你最近为市政府开发了一种新的交通监控系统. 该产品在测试环境中通过了用户验收. 但是, 当系统迁移到生产环境时, 你发现现有基础结构不符合目标.你现在应该怎么做?A. 将项目置于保留状态, 直到客户端升级基础结构B. 检查有关现有基础结构升级的合同职责C. 向客户组织提交损害赔偿要求D. 发出升级基础结构的变更请求<span class="hljs-comment"># B</span>你正在管理客户端组织的业务过程优化项目. 在项目的早期, 你发现客户的IT部门已经启动了业务工作过程自动化项目, 而自动化的过程之一就是你的团队正在尝试优化的过程. 你关注到了此重叠的项目范围. 你现在应该怎么做?A. 发出变更请求以提供额外的时间和预算B. 将问题上报到变更控制委员会C. 根据你的合同上报问题D. 等待IT完成过程的自动化, 然后进行差距分析<span class="hljs-comment"># C</span>正处于执行阶段的某项目收到了一个装配组件, 生产该组件需要更多的原材料, 超过了与供应商所立合同的规定.供应商要求为所使用的额外材料付款. 项目经理应该如何处理这种情况?A. 接受该额外成本, 向供应商支付该成本B. 接收这批材料, 但将付款延迟至项目结束C. 就降低该批额外材料的价格展开谈判D. 拒绝该额外成本, 让供应商承担该成本<span class="hljs-comment"># D</span>在交付服务过程中某外包项目报告存在几个人为错误, 包括未完成程序, 未得到正确遵循的程序以及未执行的一般性检查,总经理发现了这些问题, 要求尽快提高服务质量. 项目经理首先应该做什么?A. 将惩罚条款纳入合同, 以迫使该外包公司提高服务交付人员的水平B. 提交变更请求, 将资源的技能质量标准纳入与该外包公司签订的合同C. 要求该外包公司制定相关过程并对服务交付人员进行培训D. 如果外包公司未提高服务的交付质量, 则与该公司终止合同<span class="hljs-comment"># B</span>若干可交付成果作为项目的一部分提交给了买方. 项目经理在哪里可以找到有关正式交付成果接受要求以及如何处理不符合交付成果的文档?A. 在经验教训文件中B. 在可交付发布说明中C. 在工作说明书中D. 在协议中<span class="hljs-comment"># D</span></code></pre><h4 id="12-文化问题"><a href="#12-文化问题" class="headerlink" title="12.文化问题"></a>12.文化问题</h4><p>因为文化问题, 项目进度受到影响, 并存在重大风险, 将影响进度和成本的基准.</p><p>在采取任何应对措施之前, 需要遵循**<u>整体变更控制流程</u>**</p><pre><code class="hljs bash">你正在一个发展中国家开展一个电信网络项目, 由于一些文化问题, 目前在与分包商的有效协作方面, 陷入了困境.这已经给项目造成了一些小的延误. 然而, 如果这一趋势继续下去, 延迟不仅会变大, 还会导致成本下滑.如果你控制不了这个问题, 下一个最好的做法是什么?A. 终止合同并找到新的分包商B. 接受风险, 继续前进C. 继续与分包商谈判D. 评估对成本和进度的影响并发出变更请求<span class="hljs-comment"># D</span></code></pre><h4 id="13-项目章程"><a href="#13-项目章程" class="headerlink" title="13.项目章程"></a>13.项目章程</h4><p>项目章程 : 明确项目与组织战略目标之间的直接联系,确立项目的正式地位, 并展示组织对项目的承诺.</p><p>项目章程一旦被批准, 就标志着项目的正式启动.</p><p>项目章程对项目经理有**<u>明确授权</u>**, 项目资源的调配和工作的分配是项目经理的权力, 发起人无权越俎代庖, 直接指挥团队成员.</p><p>项目章程在获得关键项目相关方确认的过程中, 如果发现存在问题, 要及时<u>修订</u>, 并获得项目相关方的<u>再次确认</u>.</p><pre><code class="hljs bash">你目前正在启动生产过程改造项目, 并代表项目发起人起草项目章程. 项目章程最终确定并授权后, 你作为项目经理可以将组织资源应用于项目.通常, 以下哪一项不是制定项目章程过程的输入?A. 协议B. 商业认证C. 效益管理计划D. 相关方登记册<span class="hljs-comment"># D</span>项目经理范围已有明确定义, 且项目团队之前做过此类工作. 进度绩效指数为0.7.在调查完差异之后, 项目经理了解到, 项目发起人要求在现场工作的一名团队成员去执行他认为对项目很重要的额外的活动.若要避免这种情况发生, 项目经理应该如何做?A. 改进项目沟通, 确保所有需求都得到满足B. 根据新的需求对项目范围进行变更C. 跟这位同事明确说明停止范围蔓延D. 对于必须完成的变更, 与变更控制委员会进行沟通<span class="hljs-comment"># C</span>在指派项目经理前, 公司营销团队批准了新项目的项目章程, 当发送项目章程给项目经理审查时, 项目经理发现了几个问题,包括缺失和不正确的假设. 项目经理接下来该做什么?A. 将观察结果记录在假设日志, 问题日志和风险登记册中B. 将观察结果上报给项目发起人, 并请求安排时间审查和修改项目章程C. 联系客户, 并请求时间审查和修改项目章程D. 参照项目章程中的假设, 继续推进规划阶段<span class="hljs-comment"># B</span></code></pre><h4 id="14-混合模型"><a href="#14-混合模型" class="headerlink" title="14.混合模型"></a>14.混合模型</h4><p>混合模型 :  预测 + 敏捷</p><pre><code class="hljs bash">你负责设计一种即将向市场大规模推出的新手持设备. 该项目被视为公司的蓝海战略, 如果成功, 将创建自己的市场.然而, 围绕需求存在的高度不确定性, 这只能通过原型设计来实现.下列哪一种方法最有可能成功?A. 使用混合模型, 设计阶段采用敏捷方法, 推出阶段采用预测法B. 设计和推出阶段都使用预测法C. 使用混合模型, 设计阶段采用预测法, 推出阶段采用敏捷方法D. 设计和推出阶段都使用敏捷方法<span class="hljs-comment"># A</span></code></pre><h4 id="15-配置控制和变更控制"><a href="#15-配置控制和变更控制" class="headerlink" title="15.配置控制和变更控制"></a>15.配置控制和变更控制</h4><p>配置控制 : 侧重于交付成果和过程的规范</p><p>变更控制 : 侧重于识别, 记录和控制项目变更</p><p><u>变更请求的过程</u> : </p><p>除非已确定修复程序, 否则没有必要发出变更请求. 同样, 除非找到根本原因, 否则无法找到修复程序的方法. 只有在分析报告的漏洞时, 才能确定根本原因.</p><p><code>分析漏洞 -&gt; 确定根本原因 -&gt; 确定修复程序 -&gt; 发出变更请求</code></p><pre><code class="hljs bash">Rob是一名初级项目经理, 最近加入了你的咨询公司. Rob已被分配到一个客户端组织. 该客户端组织目前正在转换其某些核心过程.作为首次担任项目的Rob目前正在为配置控制和变更控制之间的差别而苦苦挣扎. 区别在于:A. 配置控制侧重于交付成果和过程的规范, 但变更控制侧重于识别, 记录和控制对项目的变更B. 配置控制的重点是确保所有变更都记录在案, 而变更控制侧重于审批过程C. 变更控制侧重于可交付成果和过程的规范, 而配置控制侧重于识别, 记录和控制对项目的变更D. 变更控制的重点是确保记录和控制已批准的变更, 而配置控制侧重于确保变更控制委员会正确识别和批准变更<span class="hljs-comment"># A</span>你正在管理对业务具有高价值的产品的开发. 产品发布日期已经确定, 到时目前为止一切都进展顺利.在发布前几天, 产品中发现严重的安全漏洞. 以下哪一项是接下来需要进行的活动正确顺序?A. 分析漏洞, 确定根本原因, 确定修复程序并发出变更请求B. 发出变更请求, 分析漏洞, 确定根本原因并确定修复程序C. 确定根本原因, 发出变更请求, 确定修复程序并分析漏洞D. 确定修复程序, 发出变更请求, 分析漏洞并确定根本原因<span class="hljs-comment"># A</span></code></pre><h4 id="16-应急计划"><a href="#16-应急计划" class="headerlink" title="16.应急计划"></a>16.应急计划</h4><ul><li>应急计划 : 对风险提前做出了应对计划, 发生了启用了这个应对计划</li><li>权变措施 : 事先没有计划, 当有情况发生时需要随机应变, 临时想办法</li><li>弹回计划 : 放弃项目原目标, 尽量减少损失, 体面收场, 属于撤退计划</li></ul><p>应急计划, 弹回计划, 权变措施(除了紧急情况下的已授权的自动权变之外)在实施前都需要经过<u>变更控制程序</u>, 并获得批准. </p><pre><code class="hljs bash">在监督和控制风险时, 项目经理在看过月度项目绩效报告后发现, 需要实施应急计划. 项目经理接下来应该怎么做?A. 更新项目进度计划和预算, 以配合应急计划的实施B. 提出变更请求, 在应急计划实施前获得批准C. 记录因实施应急计划而获得的经验教训D. 将实施应急计划的信息通知所有相关方<span class="hljs-comment"># B</span></code></pre><h4 id="17-决策树分析"><a href="#17-决策树分析" class="headerlink" title="17.决策树分析"></a>17.决策树分析</h4><p>通过决策树分析, 分别计算每个方案成功的收益和失败的损失. 省的钱就是收益, 取正值; 增加的钱就是损失, 取负值.</p><p>最终选择预期货币价值(EMV)高的方案.</p><p><strong><u>预期货币价值(EMV)分析</u>**是一个统计概念, 又称为</strong><u>决策树分析</u>**, 用于计算未来可能发生的情况或可能不会发生的情况时不同分支组合的收益与成本.<br>机会的EMV通常是正值, 而风险会导致负值.</p><pre><code class="hljs bash">项目经理正在为项目准备两个备选方案.方案一成功的概率是80%, 如果成功, 可以为项目节省100万美元, 但是如果失败, 就要增加100万美元的成本.方案二成功的概率是50%, 如果成功, 可以为项目节省200万美元, 但是如果失败, 就要增加100万美元的成本.那么项目经理应该推荐哪个方案? 理由是什么?A. 方案一, 因为预期货币价值(EMV)比方案二多10万美元B. 方案二, 因为方案如果成功, 方案二可以比方案一多节省100万美元C. 方案一, 因为方案一成功的概率比方案二高30%D. 方案二, 因为预期货币价值(EMV)比方案一多20万美元<span class="hljs-comment"># A</span>Joe正在管理一家大型制造公司的发电厂设计和建设项目. 由于市场条件不稳定和环境法规不明确, 该项目存在重大风险.Joe目前正在尝试计算未来一些不确定情景可能带来的财务影响. 他可以使用什么方法?A. 帕累托图B. 挣值分析C. 偏差分析D. 预期货币价值分析(EMV)<span class="hljs-comment"># D</span></code></pre><h4 id="18-凸显模型"><a href="#18-凸显模型" class="headerlink" title="18.凸显模型"></a>18.凸显模型</h4><p>凸显模型就是综合分析相关方权力, 紧迫性和合法性, 确定相关方需要**<u>被关注的优先级</u>**, 以及管理相关方参与的策略.</p><pre><code class="hljs bash">项目经理已经识别出一个新项目的许多相关方, 但每个相关方的权力大小, 需要被关注的紧迫性和参与项目的合法性都不同.项目经理应该使用以下哪个工具来确定相关方应该被关注的优先级, 以便确定合适的相关方管理策略?A. 相关方参与度评估矩阵B. 权力/利益方格C. 相关方立方体D. 凸显模型<span class="hljs-comment"># D</span></code></pre><h4 id="19-质量功能展开-QFD"><a href="#19-质量功能展开-QFD" class="headerlink" title="19.质量功能展开(QFD)"></a>19.质量功能展开(QFD)</h4><p>制造业产品研发项目一般用<u>质量功能展开</u>(QFD, 一种引导技术)来识别相关方对产品的需求.</p><pre><code class="hljs bash">在某个电动大客车的研发项目中, 项目经理从收集客户需求开始, 然后客观地对这些需求进行分析, 并一步步地将这些需求转化为设计, 开发和生产指标.他用的是下列哪种技术?A. 联合应用设计和开发(JAD)B. 质量功能展开(QFD)C. 用户故事D. 待办事项列表<span class="hljs-comment"># B</span></code></pre><h4 id="20-敏感性分析"><a href="#20-敏感性分析" class="headerlink" title="20.敏感性分析"></a>20.敏感性分析</h4><p>根据敏感性进行**<u>从高到低排序</u>**就是敏感性分析.</p><p>风险的变化对项目最终绩效的影响程度是指因变量(项目最终绩效)对自变量(各种风险)的敏感性.</p><pre><code class="hljs bash">项目团队识别出很多个风险, 项目经理说在接下来的风险评审会上, 必须向项目相关方汇报哪些风险的变化对项目最终绩效的影响最大,而且应该由从高到低排出顺序. 项目团队需要用到下面哪一种技术?A. 敏感性分析B. 决策树分析C. 挣值分析D. 蒙特卡洛分析<span class="hljs-comment"># A</span></code></pre><h4 id="21-活动属性"><a href="#21-活动属性" class="headerlink" title="21.活动属性"></a>21.活动属性</h4><p>活动属性可能包括活动描述, 紧前活动, 紧后活动, <strong>逻辑关系</strong>, 提前量和滞后量, 资源需求, 强制日期, 制约因素和假设条件</p><p>keywords : 逻辑关系, 关于活动的详细描述, 资源需求</p><pre><code class="hljs bash">项目经理在制定项目进度计划时, 希望按照符合逻辑的方式排列任务顺序, 并使用至少有高级的承包商. 项目经理应该查阅哪份文件?A. 里程碑清单B. 项目范围说明书C. 活动清单D. 活动属性<span class="hljs-comment"># D</span></code></pre><h4 id="22-进度网络分析"><a href="#22-进度网络分析" class="headerlink" title="22.进度网络分析"></a>22.进度网络分析</h4><p> 进度网络分析是创建项目进度模型的一种综合技术, 它采用了其他几种技术.</p><ul><li>关键路径法</li><li>资源优化技术 : 资源平衡 和 资源平滑</li><li>建模技术 : 蒙特卡洛分析 和 进度压缩技术</li></ul><p>keywords : 综合技术, 反复过程</p><p>赶工是通过<u>增加资源</u>, 以最小的成本代价来压缩进度工期的一种技术.<br>赶工的例子: 批准加班, 增加额外资源或支付加急费用, 来加快关键路径上的活动.</p><p>快速跟进: 一种将正常情况下按顺序进行的活动或阶段改为至少是部分<u>并行开展</u>的进度压缩技术.</p><p>进度压缩技术 : 在不缩减项目范围的前提下, 缩短或加快进度工期, 以满足进度制约因素, 强制日期或其他进度目标.</p><p>“上线的日期是固定的” : 要以上线日期进行分析, 根据分析的结果调整项目管理计划, 譬如缩小项目范围, 追加资源投入等.</p><p><img src="https://raw.githubusercontent.com/LingChenBill/imgs/main/pmp-keywords-starts-003.png" alt="003"></p><pre><code class="hljs bash">项目发起人批准项目里程碑进度计划并任命一名项目经理. 评审进度计划之后, 项目经理得出日期不现实的结论.项目经理下一步应该怎么做?A. 创建一份因果图B. 产生进度计划网络图C. 对批准的进度计划赶工D. 执行进度网络分析<span class="hljs-comment"># D</span>一名项目经理成员被要求支持另一个职能部门三天时间. 项目经理识别到这将会让项目延期五天.项目经理应使用什么技术来确定这一点?A. 进度网络分析B. 关键路径法(CPM)C. 关键链法(CCM)D. 资源平衡<span class="hljs-comment"># A</span>Jane担心她的项目, 因为她许多的任务进展缓慢, 两个关键任务可能会延迟之后. 她进行了彻底的资源分析, 发现下周有5个人有空.她希望指派这些提前完成她的任务, 并防止项目完成日期延后. 这是使用什么工具技术?A. 赶工B. 管理储备C. 快速跟进D. 资源平衡<span class="hljs-comment"># A</span>由于竞争对手意外发布了类似产品, Widgets国际执行团队加大了对产品团队的压力, 要求他们提前三个月发布Widget产品.项目经理可以使用什么技术来缩短计划, 但保持项目范围?A. 滚动式规划B. 进度网络分析C. 进度压缩D. 进度管理计划<span class="hljs-comment"># C</span>由于监管要求, 项目的上线日期是固定的, 项目经理在规划阶段运行了关键路径这种方法, 结果显示该项目预计会比规定时间晚两个月完成.项目经理该做什么来纠正这种情况?A. 更新成本管理计划, 为该项目分配更多资源B. 包含进度计划储备或紧急情况, 并分析新的关键路径C. 进行反向排程, 以重新定义所需的时间和资源D. 通过剔除某些活动和缩短期限来缩减项目范围<span class="hljs-comment"># C</span></code></pre><h4 id="23-敏捷发布规划"><a href="#23-敏捷发布规划" class="headerlink" title="23.敏捷发布规划"></a>23.敏捷发布规划</h4><p>基于项目路线图和产品发展愿景, 提供了高度概括的发布进度时间轴(通常是3到6个月).<br>同时, 敏捷发布规划还确定了发布的迭代或冲刺次数</p><p>keywords : 确定迭代的冲刺次数, 敏捷规划, 基于产品愿景</p><p><img src="https://raw.githubusercontent.com/LingChenBill/imgs/main/pmp-keywords-starts-004.png" alt="004"></p><pre><code class="hljs bash">你正在创建在你的公司部署一个新的ERP软件的时间表. 该公司目前正在进行敏捷转型, 因此决定迭代开发新的ERP.ERP的第一个版本应该在四个月内推出, 你知道另一个全公司范围操作系统升级的项目计划在三个月内推出.随着升级项目影响你的进度, 你应该评估以下哪一项以确定在推出前的迭代次数?A. 发布规划B. 产品路线图C. 迭代待办事项列表D. 项目章程<span class="hljs-comment"># A</span></code></pre><h4 id="24-储备分析"><a href="#24-储备分析" class="headerlink" title="24.储备分析"></a>24.储备分析</h4><p>应急储备用于 <strong>已知 - 未知风险</strong><br>管理储备用于 <strong>未知 - 未知风险</strong><br>若要使用管理储备, 则需要走正式的变更流程, 将管理储备纳入到基准中<br><u>不管什么储备</u>, 都是为项目预留的, 项目经理可以使用, 需要正式的变更流程</p><p>储备分析用于确定项目所需的应急储备量和管理储备.<br>在进行持续时间估算时, 需考虑应急储备, 以应对进度方面的不确定性<br>keywords : 剩余资金应对风险, 风险变化, 剩余储备时间</p><p><img src="https://raw.githubusercontent.com/LingChenBill/imgs/main/pmp-keywords-starts-005.png" alt="005"></p><pre><code class="hljs bash">项目经理确定项目已超出预算, 并将需要管理储备来完成项目, 为完成项目, 项目经理应该怎么做?A. 获得项目发起人批准使用管理储备B. 修改成本基准并使用管理储备C. 获得项目发起人的批准, 包含额外资金D. 执行实施整体变更控制过程, 并修改成本基准<span class="hljs-comment"># D</span>离完成分配的任务只剩30天时, 一名项目团队成员离开公司, 可惜的是, 没有可用的替代资源.项目经理在项目进度计划中包含一个应急储备金. 为了计算剩余的应急储备金, 项目经理应该使用什么技术?A. 风险审计B. 趋势分析C. 储备分析D. 技术绩效衡量<span class="hljs-comment"># C</span></code></pre><h4 id="25-三点估算"><a href="#25-三点估算" class="headerlink" title="25.三点估算"></a>25.三点估算</h4><p>从未做过的项目, 意味着存在着较大的不确定性和风险, 这种时候通过**<u>三点估算</u>**来估算成本.</p><p>三角分布 : cE = (cO + cM + cP) / 3</p><p>贝塔分布(PERT加权分析法) : cE = (cO + 4 * cM + cP) / 6</p><p>keywords : 三个数字, PERT, 最小最大最可能</p><pre><code class="hljs bash">项目经理估算开发新产品的价格. 在最可能情景中, 成本将会是10,000美元; 在最好情况下, 成本将会是9,000美元; 在最坏情况下, 成本将会是17,000美元;如果利用PERT加权分析法, 项目的预期成本将会是多少?A. 9,000美元B. 10,000美元C. 11,000美元D. 12,000美元<span class="hljs-comment"># C</span>(9 + 4 * 10 + 17) / 6 = 11项目经理正在估算其组织之前从未从事过的一类项目的成本. 应该使用什么方法来估算成本?A. 参数估算B. 自下而上估算C. 自上而下估算D. 三点估算<span class="hljs-comment"># D</span></code></pre><h4 id="26-质量成本"><a href="#26-质量成本" class="headerlink" title="26.质量成本"></a>26.质量成本</h4><ul><li>一致性成本<ul><li>预防成本(打造某种高质量产品) : 培训; 文件过程; 设备; 完成时间</li><li>评估成本(评估质量) : 测试; 破坏性试验损失; 检查<br>破坏性测试, 归于评估成本下, 与其他测试和检查一起, 它有助于评估产品质量.</li></ul></li><li>不一致成本<ul><li>内部失败成本(项目中发现的失败) : 返工; 报废</li><li>外部失败成本(客户发现的成本) : 债务; 保修工作; 失去业务<br>正在执行保修工作以纠正制造缺陷. 这些缺陷**<u>由外部客户识别</u>**, 成本称为外部故障成本.<br>由于产品<u>不符合质量要求</u>, 因此这些成本也称为非一致性成本.</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/LingChenBill/imgs/main/pmp-keywords-starts-006.png" alt="006"></p><pre><code class="hljs bash">客户识别到一个新实践产品的性能问题, 项目经理应使用哪一个质量成本(COQ)类别来估算这项成本?A. 预防成本B. 外部失败成本C. 评估成本D. 内部失败成本<span class="hljs-comment"># B</span>Cindy曾在制造业担任项目经理. 这个项目的目的是生产用于计算机的高质量半导体.由于半导体是用硅片生产的, 她与一家公司签约, 为该项目持续提供硅片. 由于未知原因, 承包商向该项目提供了低质量的晶片, 损害了半导体的电气性能.由于受到计算机部门的投诉, Cindy现在有义务纠正制造缺陷, 以避免将来承担责任. 在这种情况下, Cindy产生的成本为: A. 外部失败成本或非一致性成本B. 预防成本或一致性成本C. 评估成本或非一致性成本D. 内部故障成本或一致性成本<span class="hljs-comment"># A</span>一个项目涉及高速硬盘的开发. 作为测试的一部分, 硬盘在高速和高温下连续运行.在测试结束时, 硬盘被销毁, 无法使用. 此类测试的成本通常分为: A. 评估成本B. 预防成本C. 非一致性成本D. 内部失败成本<span class="hljs-comment"># A</span></code></pre><h4 id="27-成本效益分析-质量"><a href="#27-成本效益分析-质量" class="headerlink" title="27.成本效益分析(质量)"></a>27.成本效益分析(质量)</h4><p>成本效益分析是用来估算备选方案优势和劣势的财务分析工具, 以确定可以创造最佳效益的备选方案.</p><p>keywords : <strong><u>相关方不想投资质量</u></strong>, 质量经理要求增加质量调试</p><pre><code class="hljs bash">在项目规划阶段, 质量保证经理建议实现三重测试环境以确保产品质量, 项目经理确定这会增加成本, 而且开发和认证环境足以保证质量.项目经理应使用什么来影响质量保证经理?A. 质量成本(COQ)B. 实施设计(DOE)C. 成本效益分析D. 质量标杆对照<span class="hljs-comment"># C</span></code></pre><h4 id="28-审计"><a href="#28-审计" class="headerlink" title="28.审计"></a>28.审计</h4><p>审计是用于确定项目活动是否遵循了组织和项目的政策, 过程与程序的一种结构化且独立的过程</p><p>keywords : 过程, 有效性, 降低质量成本, 纠正措施</p><p>采购审计 : 是**<u>控制采购</u>**过程中的一个工具, 进行采购审计, 以确定值得承认的成功和失败. 使用此工具时, 将彻底检查所有采购过程, 并检查相应的文档是否出现问题.</p><pre><code class="hljs bash">项目已完成并获得客户批准, IT部门计划对项目进行未规划的审计. 项目经理应该怎么做?A. 请求审查IT部门的质量保证政策B. 告知项目发起人IT审计不是质量管理计划的一部分C. 审查公司政策并通知涉及项目的相关方D. 允许审计, 因为可以为项目提供更多价值<span class="hljs-comment"># D</span>迪娜是一个硬件项目的项目经理, 正在对采购过程进行结构化的审查. 她想检查从计划采购管理过程到控制采购过程的每一份文件, 以确定失败之处.迪娜应该用什么工具?A. 控制采购过程中的采购审计B. 实施采购过程中的绩效报告C. 控制采购过程中的谈判结算D. 实施采购过程中采购审计<span class="hljs-comment"># A</span></code></pre><h4 id="29-项目资源管理"><a href="#29-项目资源管理" class="headerlink" title="29.项目资源管理"></a>29.项目资源管理</h4><p>建设团队提升项目绩效</p><p>管理团队优化项目绩效</p><p><img src="https://raw.githubusercontent.com/LingChenBill/imgs/main/pmp-keywords-starts-007.png" alt="007"></p><pre><code class="hljs bash">一个项目正在多个国家执行, 虚拟团队中共有七名区域项目经理. 其中一名区域项目经理收到一份报告, 显示他们团队的绩效低于平均水平.项目经理应使用什么工具或技术来提高团队绩效和项目绩效?A. 团队建设活动B. 质量审计C. 偏差分析D. 过程分析<span class="hljs-comment"># A</span></code></pre><h4 id="30-团队章程"><a href="#30-团队章程" class="headerlink" title="30.团队章程"></a>30.团队章程</h4><p>团队价值观; 沟通指南; 决策标准和过程冲突处理过程; 会议指南; 团队共识</p><p>keywords : 纪律问题; 不认真开会; 团队的最佳实践</p><pre><code class="hljs bash">在团队会议期间, 项目经理不能保持项目团队的注意力, 团队成员不断查看电子邮件, 并讨论不相关的话题, 发生这种问题的原因是什么?A. 项目经理没有准备会议议程B. 项目经理没有沟通基本原则C. 项目经理处于一个弱矩阵型组织D. 项目经理的领导力不足<span class="hljs-comment"># B</span></code></pre><h4 id="31-谈判"><a href="#31-谈判" class="headerlink" title="31.谈判"></a>31.谈判</h4><p>在资源分配谈判中, 项目管理团队影响他人的能力很重要, 如同在组织中的政治能力一样重要</p><p>keywords : 确认资源可用性, 获取资源, 资源被人调走</p><pre><code class="hljs bash">项目需要一名熟练的工程师来执行某个特定任务, 但由于工作量大, 该工程师不能参与这个项目.项目经理应该下一步应该怎么做?A. 修改进度计划, 以适应该资源B. 与职能经理谈判该资源的参与C. 培训项目团队去执行需要的活动D. 向发起人请求更多时间去寻找另一名资源执行该任务<span class="hljs-comment"># B</span></code></pre><h4 id="32-建设团队的工具"><a href="#32-建设团队的工具" class="headerlink" title="32.建设团队的工具"></a>32.建设团队的工具</h4><ul><li><p>集中办公 : 作战室</p></li><li><p>虚拟团队 : 适用于不同工作地点的项目团队成员<br>在虚拟团队的环境中, **<u>沟通规划</u>**变得日益重要. 可能需要花更多时间, 来设定明确的期望, 促进沟通, 制定冲突解决方法, 召集人员参与决策, 理解文化差异, 以及共享成功喜悦.</p></li><li><p>沟通技术 : 解决集中办公和虚拟团队的信息交互, 沟通技术至关重要.</p></li><li><p>团队建设 : 工作内 -&gt; 共同完成WBS, 项目计划; 工作外 -&gt; 举办活动.</p></li><li><p>认可与奖励 : 只有满足成员重要需求的奖励才是有效的; 应在项目生命周期中考虑奖励, 而不是完成后.</p></li><li><p>培训 : 对技能的培训; 培训可以做为计划的一部分, 包含在进度与成本计划中.</p><p>培训包括旨在提高项目团队成员能力的全部活动, 可以是正式或非正式的.</p><ul><li>计划培训 : 如人力资源计划所述, 可以包括在在线培训; <u>课程</u>; 工作等.</li><li>计划外培训 : 谈话; 观察; 项目绩效评估</li></ul></li></ul><p><img src="https://raw.githubusercontent.com/LingChenBill/imgs/main/pmp-keywords-starts-008.png" alt="008"></p><pre><code class="hljs bash">在即将到来的敏捷项目中, 执行组织雇佣了来自不同国家但使用相同语言的开发人员. 团队将被安排在同一地点, 并且项目经理理解在文化多样性的情况下,提供一个有效沟通和协作的环境将是项目成功的一个重要因素. 对项目经理来说, 最好的行动方案是什么?A. 设置虚拟沟通工具B. 为团队提供作战室C. 只配置私人办公区域不设立公共办公区域D. 结合使用Scrum of Scrums<span class="hljs-comment"># B</span>一个项目需要在技术部门之间进行详细信息交流, 项目团队位于不同位置. 一些团队成员对提议的沟通系统没有经验.项目经理应该使用什么来解决这个问题?A. 沟通管理计划B. 沟通技能C. 项目沟通渠道D. 沟通技术<span class="hljs-comment"># D</span>意料之外的技术问题需要添加三个新的项目资源. 现有团队表现良好, 但由于没有跟团队新资源分享关键信息, 导致落后于进度.项目经理应该怎么做?A. 指示所有团队成员查看沟通管理计划B. 与新资源开会, 说明基本规则并要求妥协C. 要求职能经理指示新团队成员遵循相关方管理计划D. 开展团队建设活动, 鼓励人际关系纽带<span class="hljs-comment"># D</span>开发一款银行零售业务新产品的项目正在进行中, 由于团队成员缺乏激励, 该项目落后于进度.项目经理应该如何激励项目团队?A. 提供认可与奖励B. 使用教练和指导技能C. 授权D. 应用创造性的问题解决方法<span class="hljs-comment"># A</span>在编制人力资源计划时, 项目经理发现来自职能部门的一名成员需要经过3天的培训, 才能具备某种特定的技能, 来完成某个特定的工作包, 由于专业的限制, 项目团队中没有其他人可以替代该成员.项目经理应该怎么做?A. 在项目进度计划中增加3天时间B. 要求他利用业余时间完成这3天的培训C. 把该培训作为项目工作之一, 加入项目计划中, 并进行风险分析D. 要求用一个不需培训的成员来替换该成员<span class="hljs-comment"># C</span>一个项目的项目团队成员分别位于亚利桑那州, 内布拉斯加州, 纽约和爱尔兰. 在这样的团队环境中, 以下哪些活动变得至关重要?A. 团队建设B. 状态报告C. 冲突解决D. 沟通规划<span class="hljs-comment"># D</span>一位项目经理为他的团队安排了一些培训计划. 然而, 他知道, 除了计划的培训外, 计划外培训也以多种方式进行.哪些不是计划外培训的进行方式之一?A. 课程B. 观察C. 项目绩效评估D. 谈话<span class="hljs-comment"># A</span></code></pre><h4 id="33-事业环境因素"><a href="#33-事业环境因素" class="headerlink" title="33.事业环境因素"></a>33.事业环境因素</h4><p>事业环境因素(EEFs) : 是指项目团队不能控制的, 将对项目产生影响, 限制或指令作用的各种条件.</p><p>组织过程资产 : 执行组织所特有并使用的计划, 过程, 政策和知识库, 会影响对具体项目的管理.</p><p>已发布的<u>商业信息</u>被视为影响估算成本过程的事业环境因素的一部分.<br>“新的质量标准”是对当前项目的<u>制约</u>, 属于事业环境因素.</p><pre><code class="hljs bash">你们目前正在启动一个发电厂扩容升级项目, 目标是将产量提高50%. 在开始项目计划之前, 你希望确保已经考虑并记录了该项目所有适用的事业环境因素.以下哪项是你项目的事业环境因素?A. 配置管理知识库B. 变更控制程序C. 商业数据库D. 历史信息<span class="hljs-comment"># C</span>作为估算成本过程的一部分, 项目经理获得了某些商业数据库的访问权限, 以获取资源成本费率信息.此类公布的商业信息被视为什么类型的输入?A. 事业环境因素B. 历史信息C. 组织过程资产D. 人力资源<span class="hljs-comment"># A</span>在项目执行期间, 监管合规团队公布了新的质量标准. 更新质量管理计划时, 项目经理应考虑什么?A. 经验教训登记册B. 成本效益分析C. 风险登记册D. 事业环境因素<span class="hljs-comment"># D</span></code></pre><h4 id="34-阶段关口"><a href="#34-阶段关口" class="headerlink" title="34.阶段关口"></a>34.阶段关口</h4><p>阶段关口设立在阶段结束点, 在该时点, 把项目的绩效及进展与各种项目文件及业务文件进行比较. 这些文件包括</p><ul><li>项目商业认证</li><li>项目章程</li><li>项目管理计划</li><li>效益管理计划</li></ul><pre><code class="hljs bash">你正在为外部客户管理一个复杂的软件开发项目. 你按照合同要求使用瀑布式方法来管理项目.但是, 你不习惯这种方法. 你相信客户并不真正知道他们想要什么; 相反, 他们想要的是在项目过程中不断重复的双向交互.在你当前的情况下, 瀑布式方法强调的是预先的需求捕获和设计, 然后是产品开发, 最后是系统测试. 客户只会在需求收集和系统测试阶段参与, 而在开发活动期间将会完全失去联系.以下哪一项可以帮助你减轻瀑布式方法所带来的风险?A. 采用混合生命周期B. 采用增量型生命周期C. 将项目划分为多个阶段, 并组织阶段关口D. 采用迭代型生命周期<span class="hljs-comment"># C</span></code></pre><h4 id="35-技术项目管理技能"><a href="#35-技术项目管理技能" class="headerlink" title="35.技术项目管理技能"></a>35.技术项目管理技能</h4><p>技术项目管理技能指有效运用项目管理知识实现项目集或项目的预期成果的能力.<br>顶尖的项目经理会具备几种关键技能, 包括针对每个项目裁剪传统或敏捷工具, 技术和方法.</p><pre><code class="hljs bash">一个熟练的项目经理应该有必要的专业知识来识别合适的项目管理方法(传统的还是敏捷的), 并为每个项目定制工具, 技术和方法这些技能叫什么?A. 战略和商业管理技能B. 技术项目管理技能C. 领导能力D. 软技能<span class="hljs-comment"># B</span></code></pre><h4 id="36-问题日志"><a href="#36-问题日志" class="headerlink" title="36.问题日志"></a>36.问题日志</h4><p>问题日志是一种记录和跟进所有问题的项目文件, 问题日志可以帮助项目经理有效跟进和管理问题, 确保它们得到调查和解决.</p><pre><code class="hljs bash">你正在管理企业解决方案部署项目, 最终用户对解决方案不满意. 你决定与最终用户会面, 并发现他们尚未接受有关新系统的适当培训.你应该先做什么?A. 更新问题日志B. 安排其他培训C. 进一步调查问题并确定根本原因D. 使用必要的变更更新项目管理计划<span class="hljs-comment"># A</span>在第一次回顾期间, 项目经理识别到并记录了几个问题. 在第二次回顾期间, 这些问题依然存在. 项目经理在第一次回顾期间本应采取什么措施?A. 与团队分享问题日志B. 根据所记录的问题制定行动计划C. 请求团队跟进所有问题D. 用行动项目清晰定义问题日志中的问题<span class="hljs-comment"># B</span></code></pre><h4 id="37-亲和图"><a href="#37-亲和图" class="headerlink" title="37.亲和图"></a>37.亲和图</h4><p>**<u>亲和图</u>**用来对大量创意进行分组分类的技术, 以便进一步审查和分析. 是一种群体创新技术, 是收集需求的工具和技术一种.<br>亲和图可以对潜在<u>缺陷成因进行分类</u>, 展示最应关注的领域.</p><p>**<u>控制图</u>**按时间顺序展示过程数据, 并将这些数据与既定的控制界限相比较的一种图形. 控制图有一条中心线, 有助于观察图中的数据点向两边控制界限偏移的趋势.是控制质量的技术和工具之一.</p><p>**<u>文氏图</u>**或译Venn图, 是表示集合的一种草图. 它们用于展示在不同的事物群组(集合)之间的数学或逻辑联系, 尤其适用用来表示集合之间的”大致关系”, 它也常常被用来帮助推导关于集合运算的一些规律. 不是收集需求的工具和技术.</p><p>**<u>头脑风暴</u>**是一种数据收集和创意技术, 主要用于在短时间内获得大量创意, 适用于团队环境.</p><pre><code class="hljs bash">需求获取团队在会议期间产生了大量的想法来收集产品和项目需求. 以下哪种技术最适合将这些想法分组进行回顾和分析?A. 控制图B. 文氏图C. 亲和图D. 头脑风暴<span class="hljs-comment"># C</span>一所大学有一个项目, 为新录取的学生实施新的在线申请系统, 试验解决方案显示, 大量申请捕捉到不完整和不准确的数据.项目团队, 主题专家(SME)和关键相关方召开了一次研讨会, 以调查这些错误的原因.若要专注于正确的领域进行变更, 从而提高数据捕捉流程的质量, 项目经理应该与团队一起使用下列哪一项技术?A. 因果图B. 亲和图C. 影响图D. 鱼骨图<span class="hljs-comment"># B</span>你加入了一个以其风险管理技能为荣的团队. 在与团队成员进行了几次会议之后, 你认为团队对他们的能力过于自信, 并且正在应用不必要的严格性来分析每个项目的风险. 以下哪项不是常用的定量风险分析技术?A. 敏感性分析B. 模拟C. 控制图D. 决策树分析<span class="hljs-comment"># C</span></code></pre><h4 id="38-会议"><a href="#38-会议" class="headerlink" title="38.会议"></a>38.会议</h4><p>管理相关方参与是与相关方进行沟通和协作以满足其需求与期望, 处理问题, 并促进相关方合理参与的过程.<br>本过程的主要作用是, 让项目经理能够提高相关方的支持, 并尽可能降低相关方的抵制. 本过程需要在整个项目期间展开.</p><ul><li>专家判断</li><li>沟通技术</li><li>人际关系与团队技能<ul><li>冲突管理</li><li>文化意识 : 有助于项目经理和团队通过考虑文化差异和相关方需求, 来实现在效沟通.</li><li>谈判</li><li>观察和交谈 : 通过观察和交谈, 及时了解项目团队成员和其他相关方的工作和态度.</li><li>政治意识 : 通过了解项目内外的权力关系, 建立政治意识</li></ul></li><li>基本规则</li><li>会议</li></ul><pre><code class="hljs bash">你的项目团队正在尝试将手工业务流程数字化. 这个项目已经花了好几年的时间, 没有任何重要的发布.由于对项目的进展感到沮丧, 用户部门已经开始开发他们自己的工具来支持他们的手工流程.随着用户部门引入的每一个新工具, 你的项目范围增加, 因为现在你必须将这个新添加的功能纳入你的设计, 这就产生了一个永无休止的范围蔓延问题.你该如何处理这种情况?A. 提出延长时间的变更请求B. 与用户部门会面, 了解他们的关注点, 并就前进的方向达成一致C. 将问题上报给发起人, 因为这可能会危及整个项目D. 恢复到原始项目范围, 忽略任何新功能<span class="hljs-comment"># B</span>你正在领导一个复杂的组织过程自动化项目, 并且很难收集和验证需求. 你最近组建了一个中小企业团队, 帮助你进行需求收集和文档收集.中小型企业现已提供了一系列不同的要求. 为了在专家之间达成共识, 可以应用哪项技术?A. 三角洲技术B. 偏差分析C. 蒙特卡罗法D. 引导<span class="hljs-comment"># D</span>某项目经理的团队成员位于三大洲. 项目经理发现, 某些项目团队成员无法及时收到重要信息.项目经理该做什么?A. 对所有进度计划做出调整, 以便每个人都能同时工作. 从而实现实时沟通和决策B. 轮流安排电话会议和视频会议, 以便顾及每个人的日程安排, 使团队成员能够进行互动C. 在分散工作团队之间仅使用电子邮件和书面通信, 以便团队成员保留书面记录D. 启用各团队内的一个中心人物, 限制分散工作团队之间的沟通, 从而减少错误传达的发生<span class="hljs-comment"># B</span>在制定范围管理计划期间, 相关方要求将实验技术添加到项目范围内, 以协助产品营销. 项目经理应该做什么?A. 将项目储备用于支付试验技术的成本B. 根据试验技术的成本增加项目预算C. 将相关方包含在范围规划会议中D. 与相关方一起审查范围基准<span class="hljs-comment"># C</span>一个项目的工作说明书(SOW)要求在六个月内交付项目. 项目经理担心时间表不合理.为解决这种情况, 项目经理应该怎么做?A. 按照SOW制定项目管理计划B. 请求额外的资源C. 与主题专家(SMEs)和发起人会面, 以设定可实现的期望D. 通知项目发起人不能满足时间表<span class="hljs-comment"># C</span></code></pre><h4 id="39-项目发起人"><a href="#39-项目发起人" class="headerlink" title="39.项目发起人"></a>39.项目发起人</h4><p>在项目过程中, 项目经理应与项目发起人持续合作, 使业务战略和项目策略, 项目目标与业务目标保持一致.</p><pre><code class="hljs bash">你正在管理公司计费系统的升级. 在项目进行到一半时, 你已经意识到业务需求已经改变, 并且需要一个新的问题解决方案,这个问题最初被认为是由目前项目的结果来解决的. 你已经在此项目上消耗了大量资源. 你应该怎么做?A. 终止项目B. 通知发起人并讨论你的忧虑C. 提出变更请求以变更项目上的方向D. 除非发起人提出变更请求, 否则请按照批准的计划继续<span class="hljs-comment"># B</span></code></pre><h4 id="40-开工会议"><a href="#40-开工会议" class="headerlink" title="40.开工会议"></a>40.开工会议</h4><p>项目开工会议通常意味着规划阶段结束和执行阶段开始.<br>旨在传达项目目标、获得团队对项目的承诺，以及阐明每个相关方的角色和职责.<br>开工会议不仅仅是传递信息，要拿到关键**<u>相关方的承诺</u>**.<br>对相关方的管理是项目经理的责任.</p><pre><code class="hljs bash">某大型项目的项目经理两周前举行了开工会议。会议邀请未发送给其中一位关键相关方，造成了一些误解.项目经理该做什么来应对这种情况？A将启动会议演示文稿和摘要发送给相关方B请项目发起人与相关方会面，确定他们对项目的目标及期望C与未受邀参加启动会议的相关方举行审查会议D让相关方相信这是错误，但了解项目的目标非常重要<span class="hljs-comment"># C</span></code></pre><h4 id="41-确认范围"><a href="#41-确认范围" class="headerlink" title="41.确认范围"></a>41.确认范围</h4><p>获得相关方验收的可交付成果是确认范围这一过程的重要输出.</p><pre><code class="hljs bash">你在一家制造厂设立了一个项目管理办公室, 并倡导在所有内部组织项目上进行标准化项目管理.由于业务的性质, 员工非常了解质量管理过程, 但不知道范围管理过程.以下哪一项最能描述确认范围过程的作用?A. 验证项目质量是否满足要求B. 控制对项目范围的变更C. 获得相关方对项目可交付成果的正式接受D. 验证项目的所有目标都已实现<span class="hljs-comment"># C</span></code></pre><h4 id="42-沟通模型"><a href="#42-沟通模型" class="headerlink" title="42.沟通模型"></a>42.沟通模型</h4><p>沟通: 发送方发送 -&gt; 接收方反馈</p><p>沟通活动可按多种维度进行分类: </p><ul><li>内部 : 针对项目内部或组织内部的相关方</li><li>外部 : 针对外部相关方, 如客户, 供应商, 其他项目, 组织, 政府, 公众和环保倡导者</li><li>正式 : 报告; 正式会议(定期或临时); 会议议程和记录, 相关方简报和演示</li><li>非正式 : 电子邮件; 社交媒体; 网站, 以及非正式临时讨论的一般沟通活动</li><li>层级沟通 : 相关方或相关方群体相对于项目团队的位置将会以如下影响信息传递的形式和内容<ul><li>向上沟通</li><li>向下沟通</li><li>横向沟通</li></ul></li><li>官方沟通 : 年报</li><li>非官方沟通 : 非正式的手段</li><li>书面与口头沟通</li></ul><p><strong><u>电子邮件</u>**通常被视为</strong>非正式<strong>的</strong>书面沟通**. 电子邮件是一个书面的沟通形式.<br>非正式书面沟通的另一个例子是**<u>社交媒体</u>**.</p><pre><code class="hljs bash">项目经理把发起人的指示函件通过电子邮件转发给了异地的团队成员, 该团队成员收到该邮件后及时发送了邮件回执, 并开始采取行动.然而项目经理到项目上去检查时, 对项目团队成员的工作非常不满意, 坚持说他曲解了邮件的内容.这可能是沟通中哪个环节出了问题?A. 项目经理编码错误B. 不应该采取电子邮件来传递信息C. 缺乏信息反馈D. 没有及时告知收到信息<span class="hljs-comment"># C</span>你是项目团队的成员, 项目经理经常通过电子邮件向你详细说明, 他对你在项目中的工作进展情况的看法.哪种沟通形式的描述最准确?A. 非正式的语言B. 正式的书面C. 正式的语言D. 非正式的书面<span class="hljs-comment"># D</span></code></pre><h4 id="43-文化意识"><a href="#43-文化意识" class="headerlink" title="43.文化意识"></a>43.文化意识</h4><p>文化意识指理解个人, 群体和组织之间的差异, 并据此调整项目的<u>沟通策略</u>.<br>具有文化意识并采取后续行动, 能够最小化因项目相关方社区内的文化差异而导致的理解错误和沟通错误.</p><p>keywords : 两拨人的背景不同, 文化差异, 风格差异</p><pre><code class="hljs bash">项目团队由前军事和非军事小组成员组成. 没有军事背景的团队成员认为前军事团队成员在他们的项目方法中过于结构化和僵化.前军事成员认为其他团队成员更随意的方式表明他们对该项目不太投入.什么样的工具或技术对项目经理和团队成员进行有效沟通最有用?A. 政治意识B. 团队章程C. 冲突管理D. 文化意识<span class="hljs-comment"># D</span></code></pre><h4 id="44-沟通管理计划"><a href="#44-沟通管理计划" class="headerlink" title="44.沟通管理计划"></a>44.沟通管理计划</h4><p>沟通管理计划描述将如何规划, 结构化, 执行与监督项目沟通, 以提高沟通的有效性.</p><p>keywords : 信息, 报告, 项目状态, 误解, 通知, 开会, 上报步骤, 术语表</p><p>撤退/回避 : 从实际或潜在冲突中退出, 将问题推迟到准备充分的时候, 或者将问题推给其他人解决.</p><p>缓和/包容 : 强调一致而非差异; 为维持和谐与关系而退让一步, 考虑其他方的需要.</p><p>妥协/调解 : 为了暂时或部分解决冲突, 寻找能让各方都在一定程度上满意的方案, 但这种方法有时会导致”双输”局面.<br>妥协 : 需要寻找使各方满意一定程度的选项. 以便暂时或部分解决冲突. 这将是处理当前情况的最佳方法.</p><p>强迫/命令 : 以牺牲其他方为代价, 推行某一方的观点; 只提供赢 - 输 方案. 通常是利用权力来强行解决紧急问题, 这种方法通常会导致”赢输”局面.</p><p>合作/解决 : 综合考虑不同的观点和意见, 采用合作的态度和开放式对话引导各方达成共识和承诺, 这种方法可以带来”双赢”局面.</p><pre><code class="hljs bash">相关方感觉他们收到的信息十分复杂, 难以理解, 因此, 不能正确做出决定. 若要解决这个问题, 应该怎么做?A. 审查沟通需求B. 减少报告数量C. 包含一个常用术语表D. 添加解释性附件<span class="hljs-comment"># A</span>为了应对一些计划任务上的延误, 项目经理重新安排了一些后续任务的优先级以解决这个问题.重新确定优先级并没有使项目回到正轨, 现在项目经理需要将问题上报给项目相关方.为了上报问题, 项目经理首先应该做什么?A. 查阅沟通管理计划B. 审查相关方参与计划C. 查阅变更管理计划D. 审查风险管理计划<span class="hljs-comment"># A</span>一个项目团队正在不同时区工作, 团队成员之间经常出现误解, 尽管项目经理试图解决这个问题, 但这个问题一直没有得到解决.若要改善这种情况, 项目经理应该怎么做?A. 在团队会议上解决这个问题B. 与每位团队成员分别解决这个问题C. 修订沟通管理计划D. 审查相关方的需求<span class="hljs-comment"># C</span>在季度管理会议期间, 发现项目的完成日期将延期. 尽管影响这一延期的问题始于项目早期阶段, 但之前的多次季度会议纪要都显示项目进展正常.项目经理应该做什么?A. 更新项目进度计划并证明延期的正当理由B. 审查沟通管理计划, 以改善沟通的准确性C. 确保使用有效的方法来沟通项目的状态D. 增加项目状态沟通的频率<span class="hljs-comment"># B</span>项目经理在一个全球项目中使用某个地理位置的特定术语. 由于对这些术语的理解有限, 一些相关方拒绝了项目计划.项目经理下一步应该做什么?A. 使用在线翻译工具将该计划翻译成各种相关方的语言并重新分发B. 要求拒绝该计划的相关方使用专业翻译人员来帮助他们理解C. 与相关方讨论术语问题, 并在该计划中添加词汇表以供将来参与D. 修改术语使其更加适用化, 以便所有相关方能普遍理解并统一该计划<span class="hljs-comment"># C</span>一个项目相关方抱怨收到太多信息, 另一个相关方却抱怨收到的信息太少, 项目经理应该做什么?A. 标记报告的不同部分, 并要求相关方仅关注属于他们的部分B. 制定一份执行, 负责, 咨询和知情(RACI)图, 以确保满足相关方的沟通需求C. 安排召开两个相关方之间的会议以达成妥协D. 进行沟通需求分析以制定一份整体沟通管理计划<span class="hljs-comment"># D</span>项目经理管理一个分布式团队, 团队成员位于五个国家. 由于时区差异, 他找不到所有团队成员都能接受的时间.哪种冲突解决技术最适合这种情况?A. 妥协B. 回避C. 强迫D. 撤退<span class="hljs-comment"># A</span></code></pre><h4 id="45-项目管理计划"><a href="#45-项目管理计划" class="headerlink" title="45.项目管理计划"></a>45.项目管理计划</h4><p>根据作为项目管理计划中的**<u>范围基准</u>**衡量项目范围过程的完成.<br>范围基准是经过批准的<u>范围说明书</u>, <u>WBS</u> 和相应的<u>WBS词典</u>, 只有通过正式的变更控制程序才能进行变更, 它被用作比较的基础.</p><p>项目管理计划是说明<u>项目执行</u>, 监控和收尾方式的一份文件, 它整合并综合了所有子管理计划和基准, 以及管理项目所需的其他信息.</p><pre><code class="hljs bash">你为人力资源部门管理一个简单的网站开发项目. 所有项目要求都是在项目早期收集的, 到目前为止, 它们保持不变.作为跟踪项目的一部分, 你现在正在验证项目范围的完成. 你会用什么来衡量这个问题?A. 需求跟踪矩阵B. 项目章程C. 需求管理计划D. 项目管理计划<span class="hljs-comment"># D</span>某公司的设施经理负责组织的一场年度会议必须于每年八月在公司总部召开, 在该年度会议期间, 总部不得进行任何施工作业,今年项目经理安排全年在总部开展施工工作. 7月, 设施经理要求项目经理停工, 以便为年度会议准备会议室.项目经理本应在项目早期阶段采取什么措施来避免发生这种情况?A. 让设施经理另寻备选会议地点B. 让设施经理重新安排今年的开会日期C. 请求某些相关方支持全年进行施工作业D. 将项目管理计划告知所有相关方<span class="hljs-comment"># D</span></code></pre><h4 id="46-信息邀请书"><a href="#46-信息邀请书" class="headerlink" title="46.信息邀请书"></a>46.信息邀请书</h4><p>信息邀请书(RFI) : 如果需要卖方提供关于拟采购货物和服务的更多信息, 就使用信息邀请书.</p><p>报价邀请书(RFQ) : 如果需要供应商提供关于将如何满足需求和(或)将需要多少成本的更多信息, 就使用报价邀请书.</p><p>建议邀请书(RFP) : 如果项目中出现问题且解决问题难以确定,  就使用建议邀请书. 这是最正式的”邀请书”文件, 需要遵守与内容, 时间表, 以及卖方应答有关的严格的采购规则.</p><pre><code class="hljs bash">项目团队需要获得市场上提供的其他数据, 以明确范围中的产品规格. 在这种情况下应该使用哪种类型的投标文件?A. 建议邀请书(RFP)B. 报价邀请书(RFQ)C. 信息邀请书(RFI)D. 解决方案邀请书(RFS)<span class="hljs-comment"># C</span>采购部门要求项目经理提供一个项目的招标文件. 这文件中应该包含哪些内容?A. 变更请求B. 选择的卖方C. 质量测量指标D. 建议邀请书<span class="hljs-comment"># D</span></code></pre><h4 id="47-投标人会议"><a href="#47-投标人会议" class="headerlink" title="47.投标人会议"></a>47.投标人会议</h4><p>投票人会议 : 目的是确保所有潜在投标人对采购要求都有清楚且一致的理解.</p><pre><code class="hljs bash">某开发商按合同为某公司建设和运营一个工厂, 合同采用一次性付清钱款的全包式合同. 该合同将采购该工厂生产的所有产品.该公司不熟悉此类合同安排, 要求在项目实施前必须提供保证. 项目经理应该做什么?A. 将情况告知变更控制委员会(CCB), 并征得其批准B. 安排与该开发商开会讨论合同条款C. 将该合同上报给投资委员会, 待其审批D. 将范围管理计划和质量管理计划提交给投资委员会, 待其审批<span class="hljs-comment"># B</span></code></pre><h4 id="48-工料"><a href="#48-工料" class="headerlink" title="48.工料"></a>48.工料</h4><p>工料合同 : <u>无法快速编制出准确的工作说明书</u>, 往往使用于聘用专家或外部资源.<br>工料合同是一种买方和卖方就<u>单位人工费率</u>和<u>材料</u>实际成本达到一致的合同.</p><p>总价合同 : 此类合同为既定产品, 服务或成果的采购设定一个总价.这类合同应在已<u>明确定义需求</u>, 且不会出现重大范围变更的情况下使用</p><ul><li>固定总价(FFP) : 货物价格在一开始就已经确定, 并且不允许改变(除非工作范围发生变更).<br>若工作类型是可预测的, 并且需求定义良好且不太可能变更, 那么<strong>总价合同</strong>是最合适的.</li><li>总价加激励费用(FPIF) : 设置一定程度的财务奖励, 并<u>设置价格上限</u>, 高于价格上限的成本由卖方承担.</li><li>总价加经济价格调整(FPEPA) : 跨跃时间年限长, 将以不同货币支付. 允许通化膨胀, 成本增加.</li></ul><p>成本补偿合同 : 此类合同向卖方支付为完成工作而发生的全部合法实际成本(可报销成本), 外加一笔费用作为卖方的利润.这类合同适用于工作范围预计会在合同执行期间<u>重大变更</u>.<br>**<u>成本补偿合同</u>**使项目具有灵活性, 在项目开始时无法精确确定工作范围, 需要变更, 或者当工作中可能存在高风险时, 可以灵活的向卖方支付成本.</p><ul><li>成本加固定费用(CPFF) : 一切可列支成本 + 固定费用(百分比计列).</li><li>成本加激励费用(CPIF) : 一切可列支成本 + 激励费用(事先商定的百分比). 如80/20比例分担.</li><li>成本加奖励费用(CPAF) : 报销一切成本, 奖励费用(主观决定), 不允许申诉.</li></ul><pre><code class="hljs bash">由于某项目所需求的专业知识超出了公司的能力. 公司与以在该领域的专业知识著称的供应商签约, 但在项目进行过程中.公司却无法为精确的工作说明书(SOW)获得足够的详细信息. 公司应采用哪种合同?A. 工料(T&amp;M)B. 成本加奖励费用(CPAS)C. 固定总价(FFP)D. 成本加固定费用(CPF)<span class="hljs-comment"># A</span>一家公司决定启动一个战略性项目, 这项目将提供有竞争力的技术进步, 该项目需要某个特定性技术的专家, 但组织无法提供准确的工作说明书(SOW).应该使用什么类型的合同?A. 工料合同(T&amp;M)B. 固定总价合同(FFP)C. 成本加固定费用合同(CPFF)D. 成本加激励费用合同(CPIF)<span class="hljs-comment"># A</span>由于商品价格上涨, 分包商希望增加其月度发票, 项目经理拒绝该请求. 什么类型的合同会证明这一行为的合理性?A. 固定总价合同(FFP)B. 总价加经济价格调整合同(FPEPA)C. 工料会同(T&amp;M)D. 成本加固定费用合同(CPFF)<span class="hljs-comment"># A</span>无法明确界定项目工作范围, 且项目范围在过程中很有可能发生变化. 哪种类型的合同适合这种情况?A. 总价加经济价格调整合同B. 总价合同C. 成本补偿合同D. 总价加激励费用合同<span class="hljs-comment"># C</span>你已收到发送给供应商的 RFP 建议书, 其中一家供应商提议以12,500美元完成该项目. 该项目的成本为10,000美元, 其利润为2,500美元.如果工作类型是可预测的, 并且需求定义明确且不太可能变更, 那么哪种合同最适合?A. 成本加固定费用B. 成本加成本百分比C. 固定价格D. 成本加奖励费<span class="hljs-comment"># C</span></code></pre><h4 id="49-采购工作说明书"><a href="#49-采购工作说明书" class="headerlink" title="49.采购工作说明书"></a>49.采购工作说明书</h4><p>采购工作说明书会充分的描述拟采购的产品, 服务或成果, 以便潜在的卖方确定是否有能力提供此产品, 服务或成果.<br>工作说明书的内容包括: 规格, 所需数量, <u>质量水平</u>, 绩效数据, 履约期间, 工作地点和其他要求.</p><p><strong><u>供方选择标准</u></strong> : 是规划采购管理过程的输出.</p><pre><code class="hljs bash">项目的混凝土准时到达, 但项目经理发现混凝土的成分不正确. 项目经理应审查哪一份文件来确认混凝土的性能和质量要求?A. 质量管理计划B. 采购管理计划C. 建议邀请书D. 采购工作说明书(SOW)<span class="hljs-comment"># D</span>某项目从一个新供应商订购了大量计算机备件. 项目经理如何在达到项目时间表的同时确保产品质量?A. 确保提供商在发货前执行质量检查B. 咨询主题专家(SME)应采用哪些标准C. 根据故障率进行抽样检查D. 为客户购买更多备件<span class="hljs-comment"># B</span>你正在审核一个涉及大量采购活动的项目, 令人吃惊的是, 项目团队没有预先定义该采购活动的供方选择标准.项目中采购活动的供方选择标准在以下哪个过程中制定的?A. 控制采购B. 规划采购管理C. 实施采购D. 监控项目<span class="hljs-comment"># B</span></code></pre><h4 id="50-变更日志"><a href="#50-变更日志" class="headerlink" title="50.变更日志"></a>50.变更日志</h4><p>变更日志用于记录项目期间发生的变更. 当前相关方对变更请求存在争议, 首先查看变更日志中的审批记录</p><pre><code class="hljs bash">在项目审查会议期间, 相关方A指出已更新一项可交付成果来反映来自相关方B的新需求. 但是,相关方A未获知并且不同意这一变更. 项目经理下一步应该做什么?A. 检查变更日志以确认相关方A的主张B. 从项目中删除新需求C. 要求相关方A和B之间召开会议以解决冲突D. 将新需求升级上报给项目发起人<span class="hljs-comment"># A</span></code></pre><h4 id="51-假设情景分析"><a href="#51-假设情景分析" class="headerlink" title="51.假设情景分析"></a>51.假设情景分析</h4><p>假设情景分析, 是对各种情景进行评估, 预测它们对项目目标的影响(积极或消极的). 假设情景分析就是对”如果情景X出现, 情况会怎样?” 这样的问题进行分析, 即基于已有的进度计划, 考虑各种各样的情景.<br>可以根据假设情景分析的结果, 评估项目进度计划在不同条件下的可行性, 以及为应对意外情况的影响而<u>编制进度储备</u>和<u>应对计划</u>.</p><pre><code class="hljs bash">项目管理团队预计, 在项目过程中, 由于罢工, 许可过程变更或特定工程工期延长, 组件交付可能会出现延误.什么分析可能有助于制定应急和响应计划来缓解这些问题?A. 应急分析B. 偏差分析C. 假设情景分析D. 进度压缩<span class="hljs-comment"># C</span></code></pre><h4 id="52-定义范围"><a href="#52-定义范围" class="headerlink" title="52.定义范围"></a>52.定义范围</h4><p>相关方对于项目的期望不确定, 所以会频繁的提出变更请求, 那么此时要求项目的相关方多想一想, 想清楚了再做决定有助于减少类似问题的发生.</p><pre><code class="hljs bash">项目经理经常收到关于某项目的变更请求, 但他确保变更控制过程适当地应用中. 项目经理本应采用什么措施来防止频繁的变更请求?A. 确保项目范围获得相关方批准B. 在项目开始时定义项目范围C. 完成责任分配矩阵(RAM)D. 更新需求矩阵<span class="hljs-comment"># A</span></code></pre><h4 id="53-定义活动"><a href="#53-定义活动" class="headerlink" title="53.定义活动"></a>53.定义活动</h4><p>定义活动是识别和记录为完成项目可交付成果而须采取的具体行动的过程.<br>本过程的主要作用是, 将工作包分解为进度活动, 作为对项目工作进行进度估算, 规划, 执行, 监督和控制的基础.</p><p>详细里程碑列表创建为定义活动流程的输出, 并包含有关里程碑是强制性还是可选的信息.<br>请注意, 项目章程还包含里程碑信息, 但级别较高. 此外, 尚未启动排列活动顺序和制定进度计划流程.</p><pre><code class="hljs bash">你的建设项目正处于规划阶段, 项目团队刚刚敲定了项目的详细里程碑列表. 你现在正计划开始对这些活动确定逻辑关系, 并最终确定项目进度.你刚刚完成了哪个项目管理过程?A. 制定进度计划B. 定义活动C. 排列活动顺序D. 制定项目章程<span class="hljs-comment"># B</span></code></pre><h4 id="54-计算题"><a href="#54-计算题" class="headerlink" title="54.计算题"></a>54.计算题</h4><p>EV(挣值) : 对已完成工作的测量, 用该工作的批准预算来表示. 某时间点(通常为数据日期)所有已完成工作的计划价值(挣值), 与实际成本无关.<br>EV代表<u><strong>已完成的工作的价值</strong></u>.</p><p>PV (计划价值) : 为计划工作分配的经批准的预算. 某时间点(通常为数据日期或项目完成日期)计划完成的工作的价值. </p><p>AC(实际成本) : 在给定的时间段内, 因执行项目活动而实际发生的成本. 某时间点(通常为数据日期)所有已完成工作的实际成本.</p><p>CV(成本偏差) CV = EV - AC : 在某个给定时间点, 预算亏空或盈余量, 表示为挣值与实际成本之差.<br>为了应付现金流突发情况, 在必要考虑做储备. 做储备的前提是要知道<u>挣值与实际成本之间的差距</u>, 才好做储备规划.<br>CV就是指出了<u>实际绩效与成本支出</u>之间的关系.</p><p>SV(进度偏差)  SV = EV - PV : 在某个给定时间点, 项目与计划交付日期相比的亏空或盈余量, 表示为挣值与计划价值之差.</p><p><u>最初的计划不再有效</u>, 意味着CPI和SPI都不能对后续的工作产生影响.完工估算(EAC) = AC + ETC</p><p>按计划完成 : TCPI = (BAC - EV) / (BAC - AC)</p><pre><code class="hljs bash">你是项目经理, 负责贵公司的重要项目. 该项目在三个月后完成 40%, 耗资35万美元. 该项目的预算为950 000美元, 计划持续8个月.项目的执行情况如何?A. 项目进度落后, 超出预算B. 该项目提前完成, 低于预算C. 该项目进度落后, 低于预算D. 该项目提前完成, 超出预算<span class="hljs-comment"># B</span><span class="hljs-comment"># CPI = EV/AC = (95 * 40%) / 35 = 1.09(预算内)</span><span class="hljs-comment"># SPI = EV/PV = (95 * 40%) / (95 * 3/8) = 1.07(提前)</span>你是威克快车公司的项目经理. 你正在为人力资源部的一个项目工作, 计划用一年时间. 项目实施三个月后, 计算出的EV为35000美元, PV为45000美元.下面哪个选项表示SV的值?A. -10000B. 1.29C. 0.78D. 10000<span class="hljs-comment"># A</span><span class="hljs-comment"># SV = EV - PV = 35000 - 45000 = -10000 </span>随着项目临近尾声, 公司高层管理人员询问迄今已完成的工作的价值, 项目经理提供该信息时应使用以下哪种衡量标准?A. 完成预算(BAC)B. 完工偏差(VAC)C. 实际成本(AC)D. 挣值(EV)<span class="hljs-comment"># D</span>某经验丰富的项目经理最近被指派管理某经历破产正在复苏的城市的多个项目. 该城市预算紧张. 在计算非预期预算以便为项目的现金流突发情况作出调整时,项目经理规划预算时应将哪个成本要素考虑在内?A. 实际成本(AC)B. 挣值(EV)C. 计划价值(PV)D. 成本偏差(CV)<span class="hljs-comment"># D</span>一个项目已经支出350万美元, 现在已经完成400万美元的工作. 该项目的计划价值(PV)为800万美元.主题专家(SME)估算还需要600万美元来完成该项目. 完成该项目的技术方法不再有效. 当前的完工估算(EAC)是多少?A. 800万美元B. 950万美元C. 1000万美元D. 1150万美元<span class="hljs-comment"># B</span><span class="hljs-comment"># EAC = AC + ETC = 350 + 600 = 950</span>一个正在执行的项目的成本绩效指数(CPI)为1.25, 进度绩效指数(SPI)为0.8, 计划价值(PV)为10,000美元, 完工预算(BAC)为100,000美元.为了让项目按计划完成, 必须保持的效率是多少?A. 0.728B. 0.983C. 1.017D. 1.563<span class="hljs-comment"># B</span><span class="hljs-comment"># EV = SPI * PV = 0.8 * 10 = 8</span><span class="hljs-comment"># AC = EV / CPI = 8 / 1.25 = 6.4</span><span class="hljs-comment"># TCPI = (BAC - EV) / (BAC - AC) = (100 - 8) / (100 - 6.4) = 0.983</span></code></pre><h4 id="55-参数估算"><a href="#55-参数估算" class="headerlink" title="55.参数估算"></a>55.参数估算</h4><p>参数估算使用历史数据与项目之间的统计关系来<strong>确定相关性</strong>, 从而确定当前项目的成本估算.</p><pre><code class="hljs bash">你的组织是著名的ERP系统设计和实施公司. 你最近被雇用到这个组织, 并给你分配了一个为本地制造设施实施ERP系统的项目.你目前正在估算你的项目成本. 如果你希望将项目成本估算建立在历史数据的基础上, 并在一定程序上依赖于估算的准确性.那么你将使用哪种成本估算技术?A. 参数估算B. 类比估算C. 卖方投标分析D. 自下而上估算<span class="hljs-comment"># A</span></code></pre><h4 id="56-控制成本"><a href="#56-控制成本" class="headerlink" title="56.控制成本"></a>56.控制成本</h4><p>控制成本 : 监督项目状态, 以更新项目成本和管理**<u>成本基准变更</u>**的过程.<br>本过程的主要作用是, 在整个项目期间保持对成本基准的维护.</p><p>估算成本 : 对完成项目工作所需资源成本进行近拟估算的过程.<br>本过程的主要作用是, 确定项目所需的资金. 本过程应根据需要在整个项目期间定期开展.</p><pre><code class="hljs bash">你是铁路建设项目的项目经理, 该项目相对直截了当, 一切按计划进行, 直到政府宣布有关外派员工的新规定.这将对你的项目产生重大成本影响, 因为该项目的25%的员工是从国外雇佣的.如果要管理对项目成本基准的变更, 你使用哪个过程?A. 谈判成本B. 估算成本C. 控制成本D. 制定预算<span class="hljs-comment"># C</span></code></pre><h4 id="57-规划质量管理"><a href="#57-规划质量管理" class="headerlink" title="57.规划质量管理"></a>57.规划质量管理</h4><p>质量测量指标是用非常具体的术语描述项目或产品属性的操作定义. 它们还定义了质量控制过程如何衡量它.<br>这些指标是**<u>规划质量管理过程</u>**的输出.</p><pre><code class="hljs bash">你最近接手了一个目前正在管理可交付成果质量方面而苦苦挣扎的项目. 团队现在建议使用一些质量测量指标来控制一切.你想知道在此项目上已经就哪些质量指标达成一致. 在控制质量过程中使用的质量指标是在哪个过程中定义的?A. 规划质量管理B. 定义范围C. 收集需求D. 管理质量<span class="hljs-comment"># A</span></code></pre><h4 id="58-经验教训登记册"><a href="#58-经验教训登记册" class="headerlink" title="58.经验教训登记册"></a>58.经验教训登记册</h4><p>规划风险管理 : 制定风险管理计划的输入, 经验教训登记册</p><pre><code class="hljs bash">一位初级项目经理必须为一个新项目制定全面的风险管理计划. 项目经理详细审查了项目管理计划.项目经理应该参考哪一份文件?A. 质量管理计划B. 资源管理计划C. 经验教训登记册D. 工作分解结构(WBS)<span class="hljs-comment"># C</span></code></pre><h4 id="59-风险登记册"><a href="#59-风险登记册" class="headerlink" title="59.风险登记册"></a>59.风险登记册</h4><p>风险登记册 : 识别出来的风险要首先按记录到风险登记册, 然后对风险进行分析评估, 制定应对策略.</p><p>监督风险 : “新风险”直接未识别出, 要首先更新到风险登记册, 然后针对风险进行评估, 根据评估的结果制定风险应对计划.</p><p>监督风险 - 输出 - 项目文件更新 - 风险登记册 : “审核期间, 识别的风险已通过审核”表明风险应对<u>已实施, 可以关闭</u>, 并将结果更新到风险登记册上.<br>风险关闭而释放的<u>应急储备应该释放给组织</u>, 而不是在项目内继续使用.<br><u>风险重新评估</u>作为<u>监控风险</u>过程的一部分进行. 此类项目风险重新评估应定期进行, 并可能导致过期风险的关闭.</p><pre><code class="hljs bash">项目经理所在的大型公司正在启动一个与之前项目截然不同的新项目. 项目经理根据该公司的经验识别了一个高概率风险.项目经理向外部专家征求意见, 这些专家发现了其他风险. 项目经理应该做什么?A. 为专家识别的新风险指派一名风险责任人B. 登记专家识别的的风险C. 登记旨在控制新识别风险的行动D. 为专家识别的新风险编制风险管理计划<span class="hljs-comment"># B</span>一位经验丰富的项目团队成员通知项目经理, 一个新风险未在风险登记册中列出. 项目经理首先应该做什么?A. 与整个团队开会, 讨论项目可能遇到的其他潜在风险B. 更新风险登记册C. 告诉成员继续进行项目工作, 因为风险可能不会对项目产生重要影响D. 分析风险<span class="hljs-comment"># B</span>项目技术团队审核期间, 先前识别的一个风险现已通过审核. 根据这些信息, 项目经理应采取哪些措施?A. 在风险登记册中关闭该风险, 但要将相关的应急储备作为未来风险的缓冲B. 继续监督该风险, 直到项目完成, 因为未来还可能会发生该风险C. 利用相关的风险储备分配额外资源, 从而加速项目的推进D. 在风险登记册中将该风险标记为已关闭, 并减少相关的应急储备<span class="hljs-comment"># D</span>在项目进行时, 一位项目经理意识到团队的技能专长是有限的, 这给项目带来风险. 在项目进行到一半时, 项目经理认为这不再是一种风险,并认为它过期了. 作为哪一个过程的一部分, 他会进行风险重新评估?A. 执行风险评估B. 实施定量风险分析C. 监督风险D. 实施定性风险分析<span class="hljs-comment"># C</span></code></pre><h4 id="60-实施风险应对"><a href="#60-实施风险应对" class="headerlink" title="60.实施风险应对"></a>60.实施风险应对</h4><p>实施风险应对 : “风险已经成为问题”, 风险被触发, 查阅风险登记册, 实施预设的风险应对计划.</p><p>实施风险应对 - 输出 - 项目团队派工单 : 风险已被识别, 应当规划并实施应对, 其中实施应对的一个关键措施就是<strong>分配资源以应对风险</strong>.</p><p>项目风险管理 : 已识别的风险 -&gt; 定性分析 -&gt; 定量分析 -&gt; 规划应对.<br>定量分析是在定性分析的基础上, 对优先级较高的风险进行<u>定量分析</u>. 对于小型的项目, 风险的类型和数量可能没有大型项目那么多, 因此从成本的角度考虑,有可能会取消<u>定量分析</u>这个过程.</p><p><strong><u>定性分析</u></strong> : 检查风险登记册中的风险, 并分析每个风险发生的概率, 以及如果确实发生风险, 对项目可交付成果的影响.<br>它通过评估其发生概率和影响来排名未来行动或分析的风险. </p><p>风险分解结构(RBS) : 是按风险类别和子类别排列的已识别项目风险的分层组织描述.<br>这可能基于以前编写的分类框架.RBS用于提醒参与风险识别的参与者, 以识别项目风险可能产生的不同来源.</p><pre><code class="hljs bash">一个之前识别到的项目风险已成为一个问题, 有可能导致所有项目工作立即停止, 且停止时长未知. 项目经理应该做什么?A. 使用实施风险应对流程B. 暂停项目, 并解散所有项目团队成员, 直到另行通知C. 召开一次紧急指导委员会会议, 征求如何最好地解决问题的指导D. 请求质量管理团队帮助解决该问题<span class="hljs-comment"># A</span>在某项目执行阶段, 项目经理获悉, 某项目需求可能会发生变更, 这可能会对该项目的成本和进度产生重大影响.在这种情况下, 项目经理应该做什么?A. 将对该需求的潜在变更增加到项目章程中, 然后立即调整项目成本和进度计划文件B. 对风险登记册不作修改, 但就对项目成本和进度计划的影响征得项目发起人批准C. 分配必要人员应对该潜在变更, 尽管该应对措施未在风险应对计划中获批D. 提出针对潜在变更的变更请求, 并征得变更控制委员会(CCB)批准<span class="hljs-comment"># C</span>项目经理刚刚完成风险管理计划, 其中包括已识别的风险, 项目经理下一步应该做什么?A. 执行优势, 劣势, 机会和威胁(SWOT)分析B. 执行定性风险分析C. 实施风险应对D. 更新假设日志<span class="hljs-comment"># B</span>你已被分配一个新项目来部署新的员工考勤管理系统. 你的初始项目计划已被指导委员会拒绝, 并且要求你进一步消减项目成本.为了降低成本, 可以取消此项目的以下哪些流程?A. 实施定量风险分析B. 规划风险管理C. 实施定性风险分析D. 识别风险<span class="hljs-comment"># A</span>你正在管理一个涉及许多不确定性和风险的建筑翻新项目. 这要求你特别注意风险管理流程. 作为风险分析的一部分, 大多数风险都可以在高层次分析中被识别,而一些关键风险需要更详细地分析. 哪种风险类型是基于评估它们发生和影响的概率的结果来确定未来行动优先级和对风险排名?A. 假设分析B. 风险分解结构(RBS)C. 定性分析D. 定量分析<span class="hljs-comment"># C</span>你是项目的项目经理, 几天后将进行风险识别工作. 你希望事先提醒练习的参与者项目中可能出现的各种风险来源. 你能用什么来帮助你做到这一点?A. 风险分解结构(RBS)B. 影响矩阵C. 风险登记册D. 风险模拟结构<span class="hljs-comment"># A</span></code></pre><h4 id="61-质量审计"><a href="#61-质量审计" class="headerlink" title="61.质量审计"></a>61.质量审计</h4><p>质量审计 : “似乎存在同样的缺陷”, 属于<u>大面积出现的共性问题</u>, 此时要从流程上和标准上去分析导致质量问题发生的根源.<br>若针对的是<u>孤立的个案</u>, 宜采用根本原因分析.</p><pre><code class="hljs bash">在某项目中, 需要为某连锁药店生产一系列健康补充品, 客户向项目经理报告称某些产品未达到质量要求, 他们似乎存在同样的缺陷.项目经理该做什么?A. 加强检查B. 进行根本原因分析C. 审视各个过程D. 增加统计抽样<span class="hljs-comment"># C</span></code></pre><h4 id="62-资源直方图"><a href="#62-资源直方图" class="headerlink" title="62.资源直方图"></a>62.资源直方图</h4><p>资源直方图 : 是绘制人力资源图的工具. 说明了在项目过程中, 个人, 部门或整个项目团队每周或每月需要的小时数.<br>图表可以表示来自特定资源的最大小时数的水平线. 这可用于资源优化策略.</p><pre><code class="hljs bash">一家新的电信网络运营商正计划在你所在的地区推进其服务. 你的组织已赢得建设其网络的合同, 并且已指定你为此项目的项目经理.在项目执行初期, 一些关键工作人员抱怨项目任务分配过多. 为了对此进行调查, 以下哪些工具可以帮助你识别过度分配的资源?A. 资源分配矩阵B. 网络图C. 资源直方图D. 资源分解结构(RBS)<span class="hljs-comment"># C</span></code></pre><h4 id="63-资源日历"><a href="#63-资源日历" class="headerlink" title="63.资源日历"></a>63.资源日历</h4><p>资源日历 : 识别了每种具体资源可用时的工作日, 班次, 正常上下班时间, 周末和公共假期.<br>在规划活动期间, 潜在的可用资源信息(如团队资源, 设备和材料)用于估算资源可用性.<br>资源日历**<u>通常不包含成本信息</u>**, 资源的可用性, 人力资源技能和人力资源能力是资源日历的有效内容.<br>如果团队成员因为<u>分配过度</u>而无法为此类活动找到时间, 则可能是<u>日历计划不周</u>.</p><pre><code class="hljs bash">作为你与客户的合同协议的一部分, 你必须在项目启动后30天内向客户端提交符合项目资源日历.你刚刚创建了资源日历的初稿, 但不确定是否包含某些内容. 以下哪一项不太可能成为资源日历的一部分?A. 资源的可用性B. 人力资源技能C. 资源成本D. 人力资源能力<span class="hljs-comment"># C</span>项目团队成员的土气非常低落. 团队成员觉得由于对项目任务的分配过度, 他们没有得到参与组织团队开发活动的机会,因此, 他们错失了发展的机会. 以下哪一项是造成这种情况的最可能原因?A. 在项目中使用零和奖励B. 定义不清的资源日历C. 高级团队成员太多D. 团队人际交往能力差<span class="hljs-comment"># B</span></code></pre><h4 id="64-资源管理计划"><a href="#64-资源管理计划" class="headerlink" title="64.资源管理计划"></a>64.资源管理计划</h4><p>资源管理计划 : 提供了关于如何分类, 分配, 管理和释放项目资源的指南.<br>资源管理计划可以根据项目的具体情况分为团队管理计划和实物资源管理计划.</p><ul><li>识别资源</li><li>获取资源</li><li>角色与职责<ul><li>角色 : 在项目中, 某人承担的职务或分配给某人的职务.</li><li>职权 : 使用项目资源, 做出决策, 签字批准, <u>验收可交付成果</u>并影响他人开展项目工作的权力.</li></ul></li></ul><pre><code class="hljs bash">在编制资源管理计划时, 项目经理指定了团队中一名高级程序员来确定可交付成果的质量是否符合项目记录的标准.这涉及资源管理计划的以下哪些方面?A. 能力B. 责任C. 职权D. 角色<span class="hljs-comment"># C</span></code></pre><h4 id="65-控制进度"><a href="#65-控制进度" class="headerlink" title="65.控制进度"></a>65.控制进度</h4><p>“无法轻松报告进度绩效指数”, 问题出在对数据的定义和测量上, 特别是第一个阶段的成本计入了第二个阶段, 需要对绩效测量指标进行明确.</p><pre><code class="hljs bash">项目团队正在执行一个分两阶段开展的项目. 该项目目前处于第一阶段, 第一阶段不涉及任何成本, 因为成本均计入下一阶段.某位团队成员在此阶段无法轻松报告进度绩效指数(SPI). 项目经理应该做什么?A. 审查项目管理计划, 以便将成本分配到两个阶段, 并计算挣值(EV)B. 使用挣值和计划值(PV)指标监控进度计划C. 将该阶段无法报告进度绩效指数这一情况报告给项目管理办公室(PMO)D. 将项目分成多个部分并选择替代指标<span class="hljs-comment"># D</span>负责跟踪项目文件的团队成员被指派到另一个项目, 项目经理现在正在寻求项目文件, 以便帮助制定进度计划.项目经理应使用哪些项目文件?A. 经验教训登记册, 里程碑列表, 项目团队任务分配表B. 里程碑列表, 资源需求和项目章程C. 范围基准, 里程碑列表和活动清单D. 活动清单, 假设日志和进度基准<span class="hljs-comment"># C</span></code></pre><h4 id="66-外部依赖关系"><a href="#66-外部依赖关系" class="headerlink" title="66.外部依赖关系"></a>66.外部依赖关系</h4><p>确定和整合依赖关系-外部依赖关系 : 外部依赖关系是项目活动与非项目活动之间的依赖关系, 这些依赖关系往往不在项目团队的控制范围内.</p><pre><code class="hljs bash">项目经理负责管理一个涉及与多个外部供应商合作的客户项目. 该项目的最终结果是由某家印刷供应商印刷信件以履行项目.在集成测试期间, 项目经理得知该印刷供应商尚未准备好进行印刷, 这影响到项目的签字批准. 在规划期间需要明确定义什么?A. 信件模板任务需要在规划期间确定B. 履行项目的印刷商需要在规划期间识别C. 需要与印刷供应商分享项目和交付计划D. 在此阶段准备的进度计划应包括外部依赖关系<span class="hljs-comment"># D</span></code></pre><h4 id="67-管理沟通"><a href="#67-管理沟通" class="headerlink" title="67.管理沟通"></a>67.管理沟通</h4><p>管理沟通 : 确保项目信息及时且恰当地收集, 生成, 发布, 存储, 检索, 管理和最终处置的过程.<br>主要作用是促成项目团队与相关方之间的有效信息流动. 本过程需要在整个项目期间展开.<br>不局限于发布相关信息, 它还设法确保信息以适当的格式正确**<u>生成和送达</u>**目标受众.</p><p>监督沟通 : 确保满足项目及其相关方的信息需求的过程.<br>主要作用是按沟通管理计划和相关方参与计划的要求优化信息传递过程. 本过程需要在整个项目期间展开.<br><u><strong>变更请求</strong></u>是监督沟通的输出. 监督沟通过程将生成变更请求, 实施整体变更控制过程将得到批准, 然后规划沟通管理过程将进行必要的更新.</p><pre><code class="hljs bash">以下哪个过程不局限于分发相关信息, 还力求确保向项目相关方传达的信息得到适当生成以及接收和理解?A. 管理沟通B. 监督沟通C. 管理相关方参与D. 监督相关方参与<span class="hljs-comment"># A</span>詹姆斯正在管理一个购物中心建设项目. 在项目执行过程中, 他了解到项目沟通管理计划无效, 需要进行重大更新.以下哪个过程将发出所需更新的变更请求?A. 规划沟通管理B. 管理沟通C. 实施整体变更控制D. 监督沟通<span class="hljs-comment"># D</span></code></pre><h4 id="68-项目管理信息系统"><a href="#68-项目管理信息系统" class="headerlink" title="68.项目管理信息系统"></a>68.项目管理信息系统</h4><p>项目管理信息系统 : 能够确保相关方及时便利地获取所需信息.<br>用来管理和分发项目信息的工具很多, 包括电子项目管理工具. 在线数据库是项目管理信息系统的一个示例.</p><ul><li>电子项目管理工具<br>项目管理软件, 会议, 虚拟办公支持软件, 网络界面, 专门的项目门户网站和状态仪表盘, 以及协同工作管理工具.(<u>在线数据库</u>)</li><li>电子沟通管理<br>电子邮件, 传真和语音邮件, 音频, 视频和网络会议, 以及网站和网络发布.</li><li>社交媒体管理<br>网站和网络发布, 以及促进相关方参与和形成在线社区而建立博客和应用程序.</li></ul><pre><code class="hljs bash">你是项目经理, 负责购物中心的发展. 与任何建筑项目一样, 蓝图和工程图纸将进行多次迭代.因此, 你已决定创建一个在线数据库, 可用于按名称, 类型, 日期等查询文档.这是什么类型的沟通工具的示例?A. 项目管理信息系统B. 经验教训C. 项目记录D. 配置管理系统<span class="hljs-comment"># A</span></code></pre><h4 id="69-拉式沟通"><a href="#69-拉式沟通" class="headerlink" title="69.拉式沟通"></a>69.拉式沟通</h4><p>拉式沟通 : 它用于大量信息或大量访问群体, 并要求相关方自行决定访问沟通内容.</p><ul><li>门户网站; 企业内网; 电子在线课程; 经验教训数据库或知识库</li></ul><p>推式沟通 : 向需要接收信息的特定接收方发送或发布信息. 这种方法可以确保信息的发送, 但不能确保信息送达目标受众或被目标受众理解.</p><ul><li>信件; 备忘录; 报告; 电子邮件; 传真; 语音邮件; 博客; 新闻稿</li></ul><p>互动沟通 : 在两方或多方之间进行的实时多向信息交换.</p><ul><li>会议; 电话; 即时信息; 社交媒体和视频会议</li></ul><pre><code class="hljs bash">Sheila是一位项目经理, 负责管理一个全球项目. 她在全球各地拥有相关方. 由于项目的性质, 她还需要与收件人分享大量信息.为此, 她应该选择哪种沟通方式?A. 交互式沟通B. 基于请求的沟通C. 推式沟通D. 拉式沟通<span class="hljs-comment"># D</span></code></pre><h4 id="70-应对策略"><a href="#70-应对策略" class="headerlink" title="70.应对策略"></a>70.应对策略</h4><p>针对威胁, 有五种备选策略:</p><ul><li><p>上报 : 威胁不在项目范围内, 超出了项目经理的权限</p></li><li><p>规避 : 项目团队采取行动来消除威胁, 或保护项目免受威胁的影响.它可能适用于发生概率较高, 且具有严重负面影响的高优先级威胁.<br>风险规避涉及变更项目管理计划以消除风险. 虽然情况极端, 但关闭项目是一种激进但合法的回避策略.</p></li><li><p>转移 : 对威胁的责任转移给第三方, 让第三方管理风险并承担威胁发生的影响.</p><ul><li>购买保险; 使用履约保函; 使用担保书; 使用保证书; 签订协议; <u>绩效债券</u>; <u>担保</u>; <u>固定价格合同</u></li></ul></li><li><p>减轻 : 采取措施来降低威胁发生的概率和影响</p><ul><li>采用较简单的流程, 进行更多次的测试, 或者选用更可靠的卖方(供应商); 原型开发; </li></ul></li><li><p>接受 : 承认威胁的存在, 但不主动采取措施, 用于低优先级威胁</p><ul><li><p>建立应急储备(主动); 定期对威胁进行审查(被动)</p><p>项目计划不修改, 但建立应急措施, 是**<u>主动接受</u>**<br>项目计划不修改, 且不建立应急措施, 是**<u>被动接受</u>**. 项目计划修改, 是<u>规避</u></p></li></ul></li></ul><pre><code class="hljs bash">在项目早期就发生了许多之前识别到的风险. 这导致了大多数项目目标都陷入了危险之中.项目经理决定向管理层提出关闭该项目的建议. 这是哪种风险应对策略的示例?A. 风险接受B. 风险减轻C. 风险规避D. 风险转移<span class="hljs-comment"># C</span>作为处理负风险策略的一部分, 项目经理决定采用不太复杂的过程, 进行更多的测试, 并选择一个更稳定的供应商.这将归类为什么策略?A. 接受B. 转移C. 减轻D. 避免<span class="hljs-comment"># C</span>你的项目已经被识别出很多风险. 项目团队决定不修改项目计划, 而通过建立应急储备来应对这些可能发生的风险.这是哪种风险应对策略的实例?A. 规避B. 被动接受C. 主动接受D. 应急应对策略<span class="hljs-comment"># C</span>你正在分析与最近确定的一些即将进行的项目采购相关的几个项目风险. 组织的风险承受能力较低, 风险管理的首选方法是转移风险.该组织在市场上享有良好声誉, 以公平透明著称. 以下哪项不是风险转移的有效实例?A. 履约保证金B. 使用成本补偿合同C. 固定总价合同D. 担保<span class="hljs-comment"># B</span></code></pre><h4 id="71-技术绩效分析"><a href="#71-技术绩效分析" class="headerlink" title="71.技术绩效分析"></a>71.技术绩效分析</h4><p>技术绩效分析 : 监督风险流程的工具和技术, 用于比较计划内和实际的技术成果, 进度和其他绩效标准.</p><pre><code class="hljs bash">你知道成本和进度风险在你的项目中很普遍. 你希望将项目期间的技术成就与技术成果进度表进行比较, 并确定偏差. 你应该执行什么来提供此信息?A. 风险评估B. 技术绩效分析C. 风险审计D. 储备分析<span class="hljs-comment"># B</span></code></pre><h4 id="72-采购谈判"><a href="#72-采购谈判" class="headerlink" title="72.采购谈判"></a>72.采购谈判</h4><p>采购谈判 : 有助于澄清采购的结构, 要求和其他条款, 以便买方和卖方在签订合同之前达成相互协议. </p><p>投标人会议在此阶段之前举行, 这些会议助于确保所有潜在卖方对采购要求有明确和共同的理解. 广告和独立估算跟题目内容无关.</p><pre><code class="hljs bash">以下哪种技术有助于澄清采购的结构, 要求和其他条款, 以便买方和卖方在签订合同之前达成相互协议?A. 独立估算B. 广告C. 投标人会议D. 采购谈判<span class="hljs-comment"># D</span></code></pre><h4 id="73-相关方参与计划"><a href="#73-相关方参与计划" class="headerlink" title="73.相关方参与计划"></a>73.相关方参与计划</h4><p>相关方参与计划 : 包含相关方的识别, 分类和评估信息, 也记录相关方参与战略.<br>相关方参与计划是项目管理计划的组成部分. 它确定用于促进相关方有效参与决策和执行的策略和行动. 基于项目的需要和相关方的期望, 相关方参与计划可以是正式或非正式的, 非常详细或高度概括的.</p><p>相关方登记册 : 登记相关方, <u>不记录相关方参与战略</u>.<br>变更申请表 : 用于启动项目基准中的变更.</p><pre><code class="hljs bash">James目前正在管理一个软件升级项目. 他最近确定并分析了他的关键项目相关方. 他现在正在搜索他的组织过程资产, 寻找一个模板,利用该模版更新此分析的结果以及有效与相关方互动所需的计划策略. 他应该搜索以下哪一项?A. 风险管理计划B. 变更申请表C. 相关方登记册D. 相关方参与计划<span class="hljs-comment"># D</span></code></pre><h4 id="74-规划相关方参与"><a href="#74-规划相关方参与" class="headerlink" title="74.规划相关方参与"></a>74.规划相关方参与</h4><p>规划相关方参与 : 根据相关方的需求, 期望, 利益和对项目的潜在影响, 制定项目相关方参与项目的方法的过程.<br>本过程的主要作用是, 提供与相关方进行有效互动的可行计划. 本过程应根据需要在整个项目期间定期开展.</p><ul><li>专家判断</li><li>数据收集 : 标杆对照</li><li>数据分析<ul><li>假设条件和制约因素</li><li>根本原因分析 : 识别什么根本原因导致了相关方对项目的某种支持水平, 以便选择适当策略来改进其参与水平</li></ul></li><li>决策 : 优先级排序或分级</li><li>数据表现<ul><li>思维导图</li><li>相关方参与度评估矩阵<ul><li>不了解型</li><li>抵制型 : 把抵制型 -&gt; 支持型项目相关方, 做相关方分析, 找到可能改变或影响他想法的方案.</li><li>中立型</li><li>支持型</li><li>领导型</li></ul></li></ul></li><li>会议</li></ul><pre><code class="hljs bash">詹妮弗最近被要求管理一个办公室翻新项目. 她发现公司的首席财务官正在抵制这个项目.首席财务官是关键的项目相关方. 詹妮弗必须先做什么?A. 寻求项目发起人的专家判断B. 寻求项目发起人的支持, 以推动项目决策C. 召开团队会议讨论此问题D. 分析可能改变或影响首席财务官想法的方案<span class="hljs-comment"># D</span>对于你当前为最负盛名的客户端之一执行的项目, 客户端的组织分配了专门的项目协调员.与客户端的所有项目沟通都需要通过此协调员. 项目团队发现协调员似乎不太关心项目, 对项目的成功也不关心. 你需要先做什么?A. 与协调员会面, 讨论团队提出的问题B. 与团队会面, 了解团队为何认为协调员已脱离项目C. 请团队针对协调员的情况准备书面案例D. 根据合同条款和条件上报问题<span class="hljs-comment"># B</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> pmp </tag>
            
            <tag> keywords </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django命令学习</title>
      <link href="2021/08/27/django-started/"/>
      <url>2021/08/27/django-started/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Django命令学习"><a href="#Django命令学习" class="headerlink" title="Django命令学习"></a>Django命令学习</h3><h4 id="1-安装命令列表"><a href="#1-安装命令列表" class="headerlink" title="1) 安装命令列表"></a>1) 安装命令列表</h4><pre><code class="hljs bash"><span class="hljs-comment"># 查看python版本.</span>py --version<span class="hljs-comment"># 建立虚拟环境.</span>py -m venv project-name<span class="hljs-comment"># 激活虚拟环境.</span>project-name\Scripts\activate.bat<span class="hljs-comment"># 升级pip. </span>python -m pip install --upgrade pip<span class="hljs-comment"># 安装Django.</span>py -m pip install Django<span class="hljs-comment"># 检查Django版本.</span>django-admin --versionpython -m django --version<span class="hljs-comment"># 安装colorama,cmd的颜色.</span>py -m pip install colorama</code></pre><h4 id="2-创建工程"><a href="#2-创建工程" class="headerlink" title="2) 创建工程"></a>2) 创建工程</h4><pre><code class="hljs bash"><span class="hljs-comment"># 创建工程.</span>django-admin startproject fi_app<span class="hljs-comment"># 启动工程.</span>python manage.py runserver<span class="hljs-comment"># 应用更改.</span>python manage.py migrate</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Final-cut-x-noting学习记录一</title>
      <link href="2021/06/13/final-cut-x-noting/"/>
      <url>2021/06/13/final-cut-x-noting/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h3 id="Final-cut-x-noting学习记录一"><a href="#Final-cut-x-noting学习记录一" class="headerlink" title="Final-cut-x-noting学习记录一"></a>Final-cut-x-noting学习记录一</h3><h4 id="1-拍摄的角度"><a href="#1-拍摄的角度" class="headerlink" title="1.拍摄的角度"></a>1.拍摄的角度</h4><p>从拍摄者的角度来看:</p><ul><li><p>平拍: 眼睛的正常视角</p><p>客观,真实,有秩序感,但也显得呆板,乏味,无趣</p></li><li><p>抑拍: 呈现出比较宏大遥远的视角</p><p>将事物的大小,形状,位置打乱,从而延长或放大某些元素的视觉效果</p></li><li><p>俯拍: 对微观进行拍摄的视角</p><p>可以拍摄出居高临下或开启微观世界的效果,从而传递某些特殊的情绪</p></li></ul><h4 id="2-特写"><a href="#2-特写" class="headerlink" title="2.特写"></a>2.特写</h4><p>主要目的为了增强画面丰富性,展现层第关系,改变单一的镜头效果</p><p>画面元素的远近关系</p><ul><li><p>不能单纯拍摄主体目标</p><p>而是要展现多维度的视角,使环境和主体人物的互动关系更为明朗<br>在画面中借助多种元素,突出远近关系,可以增强透视效果,极大地提升画面的丰富性</p></li></ul><h4 id="3-跟随和牵引拍摄"><a href="#3-跟随和牵引拍摄" class="headerlink" title="3.跟随和牵引拍摄"></a>3.跟随和牵引拍摄</h4><p>配合良好的构图元素,可以将主体和环境更好地融合在一起<br>呈现出具有律动性的画面,建立情绪或情感上的连接关系</p><h4 id="4-旋转拍摄"><a href="#4-旋转拍摄" class="headerlink" title="4.旋转拍摄"></a>4.旋转拍摄</h4><p>通过快速的旋转</p><p>来调动环境中的所有元素,全方位地展现主体人物当前的处境或感情<br>是一种主动和主体人物进行沟通的拍摄方式,可以表达悠远,深邃,离别,沉默等复杂情绪</p><h4 id="5-空镜头和固定镜头"><a href="#5-空镜头和固定镜头" class="headerlink" title="5.空镜头和固定镜头"></a>5.空镜头和固定镜头</h4><p>采用静止或悬停的方式</p><p>拍摄没有实际意义,或者没有运动或运动迹象的镜头<br>在特殊的场景中可以制造出寂静,轻悠,停滞,顿悟等特殊的效果</p><h4 id="6-留白的艺术"><a href="#6-留白的艺术" class="headerlink" title="6.留白的艺术"></a>6.留白的艺术</h4><p>采用大量留白的方式</p><p>弱化主体在画面中的地位,只给主体留下很少的生存空间<br>制造出一种空灵,悠扬,宁静的环境感受</p><p>留白考验着一个人的创作能力<br>需要去想像,体会,感受画面和要表达的情绪情感之间微妙的关联</p><h4 id="7-构图技巧-黄金分割比例"><a href="#7-构图技巧-黄金分割比例" class="headerlink" title="7.构图技巧-黄金分割比例"></a>7.构图技巧-黄金分割比例</h4><p>黄金分割比例-0.618</p><p>每个画面的左右上下,其附近都有黄金分割线<br>为了便于拍摄,可以粗略地理解为黄金分割线位于画面五分之三的位置</p><h4 id="8-构图技巧"><a href="#8-构图技巧" class="headerlink" title="8.构图技巧"></a>8.构图技巧</h4><ul><li>线条关系</li></ul><p>所谓线条,是指在画面中那些具有延长性质的元素<br>如弯曲的山路,凹凸的海湾,笔直的桥梁,横切的山脉等</p><p>线条包含曲线和直线</p><p>除了明显的线条元素之外,还有隐藏的线条元素<br>如栅栏,桅杆,墙檐,墙体等</p><p>运用线条元素,可以使画面变得丰富,趣味,多变</p><ul><li>边框,层级和遮挡</li></ul><p>使主体目标处于一个”画中画”的场景<br>使人物处于半忽略的状态,约束观看者的目光视线,从而进一步强化人物的情绪和状态<br>一般都会采用诸如窗户,孔洞,树丛,枝叶,栏杆等具有空间形状的元素</p><p>P15</p>]]></content>
      
      
      
        <tags>
            
            <tag> fcxp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Final-cut-pro-x-学习记录_01</title>
      <link href="2021/06/11/final-cut-pro-x-started/"/>
      <url>2021/06/11/final-cut-pro-x-started/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Final-cut-pro-x-学习记录-01"><a href="#Final-cut-pro-x-学习记录-01" class="headerlink" title="Final-cut-pro-x-学习记录_01"></a>Final-cut-pro-x-学习记录_01</h3><h4 id="1-导入素材"><a href="#1-导入素材" class="headerlink" title="1.导入素材"></a>1.导入素材</h4><p>导入素材时,要将素材拷贝到资源库里,防止素材被删除后,资源库不能使用.</p><pre><code class="hljs bash">l: 播放素材k: 暂停j: 往后播放空格: 播放/暂停左/右键: 选中不同的素材(黄色边框线)</code></pre><h4 id="2-粗剪素材"><a href="#2-粗剪素材" class="headerlink" title="2.粗剪素材"></a>2.粗剪素材</h4><pre><code class="hljs bash">l: 播放i: 视频入点k: 暂停o: 视频出点f: 加入收藏(视频上方出现绿色横条)u: 撤销收藏backspace: 删除素材(素材上出现黄线横线)u: 撤销删除素材(黄线消失)q: 连接 -&gt; 将所选素材片段放置到当前时间轴所处的位置,不抢占任何片段的位置w: 插入 -&gt; 将所选素材片段插入到当前时间轴所处的位置,原有的片段会被自动切割开来e: 附加 -&gt; 将所选素材片段附加到当前时间轴最末尾的位置,不抢占任何片段的位置d: 覆盖 -&gt; 将所选素材片段覆盖到当前时间轴所处的位置,原有片段的位置不变,但内容会被裁切并覆盖^ + f/ctrl + f: 素材只显示收藏过的素材片段^ + c/ctrl + c: 素材显示所有的素材片段</code></pre><h4 id="3-精剪和磁性时间线"><a href="#3-精剪和磁性时间线" class="headerlink" title="3.精剪和磁性时间线"></a>3.精剪和磁性时间线</h4><pre><code class="hljs bash">b: 切割 -&gt; 对任何素材片段进行切割,方便对片段进行分割调整a: 选择 -&gt; 分割完成后,按a键回到正常的<span class="hljs-string">&quot;选择工具&quot;</span>模式Option/Alt + g: 将几个片段同时选定,然后右键<span class="hljs-string">&quot;新建复合片段&quot;</span>,可以几段片段变成一个普通片段Command(cmd) + Option(Alt): 按住键,并拖动音频可以改变音频与视频的连接点p + Option(Alt) + w: 按p键切换到[位置]选择时,按Option(Alt) + w, 就会在所选位置上插入一个占位的空白的素材,方便以后在此插入新的视频素材</code></pre><h4 id="4-多轨道剪辑"><a href="#4-多轨道剪辑" class="headerlink" title="4.多轨道剪辑"></a>4.多轨道剪辑</h4><p>将多个片段重叠在一起进行剪辑</p><p>主序列上的片段是所有片段的核心<br>其它轨道上的片段都依靠着主序列片段<br>每一条片段都和主序列片段之间都有一条连接线,表示存在着连接与对应关系<br>在移动和删除主序列时片段时,要注意其它片段可能出现的移动和删除情况</p><pre><code class="hljs bash">Command(cmd) + Option(Alt) + 上: 将所选素材片段移动上主故事线上方Command(cmd) + g: 将主故事线上方的素材转换成次故事线Command(cmd) + Option(Alt) + 下: 将次故事线上的素材移到到主故事线上方转场: 将主故事线上方的两个素材中间添加一个转场效果后,会将这两个素材转换成一个次故事线</code></pre><h4 id="5-关键帧和渐进运动"><a href="#5-关键帧和渐进运动" class="headerlink" title="5.关键帧和渐进运动"></a>5.关键帧和渐进运动</h4><p>关键帧, 可以理解为片段中”做下标记”的那一帧<br>两个以上的关键帧才能互相配合使用,实现某种运动或变化<br>关键帧的作用就是记录片段属性,每个关键帧都记录一种属性</p><h4 id="6-卡点视频"><a href="#6-卡点视频" class="headerlink" title="6.卡点视频"></a>6.卡点视频</h4><p>将音乐收藏素材插入时间线</p><pre><code class="hljs bash"><span class="hljs-built_in">shift</span> + z: 扩展片段至合适的时间线m: 音乐打点(双击可以删除mark点)t: 可以在时间片段中左右拖动视频慢速: 可以调节视频片段的播放速度防抖动: 全选视频片段,可以去除视频的抖动</code></pre><p>音频</p><pre><code class="hljs bash">Option(Alt): 在音频片段时,按Option(Alt),点击两个间隔的点,再将音频向下拉,可以做一个音频逐渐降低的效果.</code></pre><h4 id="7-调色"><a href="#7-调色" class="headerlink" title="7.调色"></a>7.调色</h4><p>颜色版</p><ul><li>颜色</li><li>饱和度</li><li>曝光</li></ul><p>可以拖动圆点,可以修改视频片段的显示效果</p><h4 id="8-聚焦-抠像-遮罩"><a href="#8-聚焦-抠像-遮罩" class="headerlink" title="8.聚焦/抠像/遮罩"></a>8.聚焦/抠像/遮罩</h4><pre><code class="hljs bash">聚焦: 可以制造出一个整体模糊而局部清晰的效果     从而实现某种程度的伪<span class="hljs-string">&quot;景深&quot;</span>效果,弥补在画面拍摄中留下的遗憾与不足     聚焦效果本身可以极大地提升画面的通透感,凸显画面主体,营造艺术性氛围抠像: 一种抠像器,一种是高度抠像器     抠像的本质是从画面中抠选出一部分,而将其它部分从画面中抹去遮罩: 将一段视频遮罩一部分,凸显在下部的视频当中</code></pre><h4 id="8-转场-特效-文件输出"><a href="#8-转场-特效-文件输出" class="headerlink" title="8.转场/特效/文件输出"></a>8.转场/特效/文件输出</h4><p>转场:<br>两段没有编辑过的视频素材中间添加[转场]时,会出现[片段边缘之外没有足够的额外媒体可用来创建转场]的弹框.<br>添加转场后,整个视频的时长会改变.<br>这是因为转场要替换掉一定的左右边素材的时长.编辑过的素材中间添加转场后,则不会出现些弹框.</p><p>双击转场效果中间的按钮: 可以查看精确度编辑器,可以方便的查看转场所占用的左右素材时长</p><pre><code class="hljs bash">光流: 视频效果 -&gt; 光流(慢速视频可以设置)分离音频: 选中视频片段 -&gt; 分离音频(可以删除视频中声音,拍摄时可以有噪音)转场: 可以在视频的开始与结尾添加合适的转场,可以让片段平滑地过渡,减少观看者的视觉不适感添加字幕: 可以视频开始时添加合适的字幕(可以在字幕中添加转场)输出: 可以输出为Apple设备720p或者Apple设备1080p(设备标签页中:H.264编码)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hotkey </tag>
            
            <tag> fcpx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql_Binlog命令记录</title>
      <link href="2021/05/15/mysql-binlog-started/"/>
      <url>2021/05/15/mysql-binlog-started/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><p>Mysql_Binlog命令记录</p><h3 id="1-Binlog的相关变量"><a href="#1-Binlog的相关变量" class="headerlink" title="1.Binlog的相关变量"></a>1.Binlog的相关变量</h3><p><code>log_bin</code> -&gt; Binlog开关.<br><code>binlog-format</code> -&gt; Binlog日志的格式.</p><pre><code class="hljs mysql">mysql&gt; show variables like &#39;log_bin&#39;;+---------------+-------+| Variable_name | Value |+---------------+-------+| log_bin       | ON    |+---------------+-------+1 row in set (0.04 sec)mysql&gt; show variables like &#39;binlog-format&#39;;Empty set (0.01 sec)</code></pre><h3 id="2-管理Binlog相关的SQL语句"><a href="#2-管理Binlog相关的SQL语句" class="headerlink" title="2.管理Binlog相关的SQL语句"></a>2.管理Binlog相关的SQL语句</h3><p><code>show master logs</code>  :  查看所有Binlog的日志列表.<br><code>show master status</code>  :  查看最后一个Binlog日志的编号名称,及最后一个事件结束的位置(pos).<br><strong><code>flush logs</code></strong>  :  刷新Binlog,此刻开始产生一个新编号的Binlog日志文件. -&gt; 慎用<br>**<code>reset master</code>**  :  清空所有的Binlog日志. -&gt; 慎用.</p><pre><code class="hljs mysql">mysql&gt; show master logs;+---------------+-----------+| Log_name      | File_size |+---------------+-----------+| binlog.000036 |       155 || binlog.000037 |       155 || binlog.000038 |       155 || binlog.000039 |       155 || binlog.000040 |      6231 || binlog.000041 |       155 || binlog.000042 |       155 |+---------------+-----------+7 rows in set (0.00 sec)mysql&gt; show master status;+---------------+----------+--------------+------------------+-------------------+| File          | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |+---------------+----------+--------------+------------------+-------------------+| binlog.000042 |      155 |              |                  |                   |+---------------+----------+--------------+------------------+-------------------+1 row in set (0.00 sec)</code></pre><p><code>show binlog events</code>  :  查看第一个Binlog日志.<br><code>show binlog events in &#39;binlog.000036&#39;</code>  :  查看指定的Binlog日志.</p><img src="/2021/05/15/mysql-binlog-started/001.png" alt="binlog_events" style="zoom:50%;"><pre><code class="hljs mysql">mysql&gt; show binlog events;+---------------+-----+----------------+-----------+-------------+-----------------------------------+| Log_name      | Pos | Event_type     | Server_id | End_log_pos | Info                              |+---------------+-----+----------------+-----------+-------------+-----------------------------------+| binlog.000036 |   4 | Format_desc    |         1 |         124 | Server ver: 8.0.13, Binlog ver: 4 || binlog.000036 | 124 | Previous_gtids |         1 |         155 |                                   |+---------------+-----+----------------+-----------+-------------+-----------------------------------+2 rows in set (0.00 sec)mysql&gt; show binlog events in &#39;binlog.000036&#39;;+---------------+-----+----------------+-----------+-------------+-----------------------------------+| Log_name      | Pos | Event_type     | Server_id | End_log_pos | Info                              |+---------------+-----+----------------+-----------+-------------+-----------------------------------+| binlog.000036 |   4 | Format_desc    |         1 |         124 | Server ver: 8.0.13, Binlog ver: 4 || binlog.000036 | 124 | Previous_gtids |         1 |         155 |                                   |+---------------+-----+----------------+-----------+-------------+-----------------------------------+2 rows in set (0.00 sec)</code></pre><p><strong>Binlog中的Event_type:</strong></p><img src="/2021/05/15/mysql-binlog-started/002.png" alt="event_type" style="zoom:50%;"><h3 id="3-Binlog监听"><a href="#3-Binlog监听" class="headerlink" title="3.Binlog监听"></a>3.Binlog监听</h3><p>pom.xml</p><pre><code class="hljs xml">   <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mysqlbinlog.version</span>&gt;</span>0.13.0<span class="hljs-tag">&lt;/<span class="hljs-name">mysqlbinlog.version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><span class="hljs-comment">&lt;!-- binlog 监听与解析: https://github.com/shyiko/mysql-binlog-connector-java. --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.shyiko<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-binlog-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mysqlbinlog.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>java测试类.</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.ad.service;<span class="hljs-keyword">import</span> com.github.shyiko.mysql.binlog.BinaryLogClient;<span class="hljs-keyword">import</span> com.github.shyiko.mysql.binlog.event.DeleteRowsEventData;<span class="hljs-keyword">import</span> com.github.shyiko.mysql.binlog.event.EventData;<span class="hljs-keyword">import</span> com.github.shyiko.mysql.binlog.event.UpdateRowsEventData;<span class="hljs-keyword">import</span> com.github.shyiko.mysql.binlog.event.WriteRowsEventData;<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * BinLog使用的测试类.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/5/15</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Slf4j</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinlogServiceTest</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// BinLog客户端创建.</span>        BinaryLogClient client = <span class="hljs-keyword">new</span> BinaryLogClient(                <span class="hljs-string">&quot;127.0.0.1&quot;</span>,                <span class="hljs-number">3306</span>,                <span class="hljs-string">&quot;root&quot;</span>,                <span class="hljs-string">&quot;xxxxxxx&quot;</span>        );        <span class="hljs-comment">// 设置binlog文件.</span>        <span class="hljs-comment">// client.setBinlogFilename(&quot;&quot;);</span>        <span class="hljs-comment">// 设置binlog位置.</span>        <span class="hljs-comment">// client.setBinlogPosition();</span>        client.registerEventListener(event -&gt; &#123;            EventData data = event.getData();            <span class="hljs-comment">// 更新,添加,删除Event.</span>            <span class="hljs-keyword">if</span> (data <span class="hljs-keyword">instanceof</span> UpdateRowsEventData) &#123;                log.info(<span class="hljs-string">&quot;Update---------------------&quot;</span>);                log.info(data.toString());            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data <span class="hljs-keyword">instanceof</span> WriteRowsEventData) &#123;                log.info(<span class="hljs-string">&quot;Add---------------------&quot;</span>);                log.info(data.toString());            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data <span class="hljs-keyword">instanceof</span> DeleteRowsEventData) &#123;                log.info(<span class="hljs-string">&quot;Delete---------------------&quot;</span>);                log.info(data.toString());            &#125;        &#125;);        <span class="hljs-comment">// 创建连接.</span>        client.connect();    &#125;&#125;</code></pre><p>启动监听:</p><pre><code class="hljs bash">五月 15, 2021 11:42:17 上午 com.github.shyiko.mysql.binlog.BinaryLogClient connect</code></pre><p>在mysql命令窗口执行数据的增,删,改,查操作.</p><pre><code class="hljs mysql">mysql&gt; desc ad_unit_keyword;+---------+-------------+------+-----+---------+----------------+| Field   | Type        | Null | Key | Default | Extra          |+---------+-------------+------+-----+---------+----------------+| id      | int(11)     | NO   | PRI | NULL    | auto_increment || unit_id | int(11)     | NO   |     | NULL    |                || keyword | varchar(30) | NO   |     | NULL    |                |+---------+-------------+------+-----+---------+----------------+3 rows in set (0.00 sec)mysql&gt; select * from ad_unit_keyword;Empty set (0.01 sec)mysql&gt; insert into &#96;ad_unit_keyword&#96; (&#96;unit_id&#96;, &#96;keyword&#96;) values (10, &#39;奥迪&#39;);Query OK, 1 row affected (0.08 sec)mysql&gt; select * from ad_unit_keyword;+----+---------+---------+| id | unit_id | keyword |+----+---------+---------+| 10 |      10 | 奥迪    |+----+---------+---------+1 row in set (0.00 sec)mysql&gt; update &#96;ad_unit_keyword&#96; set &#96;keyword&#96; &#x3D; &#39;奔驰&#39; where &#96;keyword&#96; &#x3D; &#39;奥迪&#39;;Query OK, 1 row affected (0.03 sec)Rows matched: 1  Changed: 1  Warnings: 0mysql&gt; delete from &#96;ad_unit_keyword&#96; where &#96;keyword&#96; &#x3D; &#39;奔驰&#39;;Query OK, 1 row affected (0.03 sec)</code></pre><p>控制台查看日志:</p><pre><code class="hljs bash">信息: Connected to 127.0.0.1:3306 at binlog.000042/155 (sid:65535, cid:11)11:44:25.216 [main] INFO com.iplume.ad.service.BinlogServiceTest - Add---------------------11:44:25.221 [main] INFO com.iplume.ad.service.BinlogServiceTest - WriteRowsEventData&#123;tableId=72, includedColumns=&#123;0, 1, 2&#125;, rows=[    [10, 10, 奥迪]]&#125;11:46:20.808 [main] INFO com.iplume.ad.service.BinlogServiceTest - Update---------------------11:46:20.809 [main] INFO com.iplume.ad.service.BinlogServiceTest - UpdateRowsEventData&#123;tableId=72, includedColumnsBeforeUpdate=&#123;0, 1, 2&#125;, includedColumns=&#123;0, 1, 2&#125;, rows=[    &#123;before=[10, 10, 奥迪], after=[10, 10, 奔驰]&#125;]&#125;11:48:26.920 [main] INFO com.iplume.ad.service.BinlogServiceTest - Delete---------------------11:48:26.920 [main] INFO com.iplume.ad.service.BinlogServiceTest - DeleteRowsEventData&#123;tableId=72, includedColumns=&#123;0, 1, 2&#125;, rows=[    [10, 10, 奔驰]]&#125;</code></pre><p>此时查看Binlog的Event的信息.</p><pre><code class="hljs mysql">mysql&gt; show binlog events in &#39;binlog.000042&#39;;+---------------+------+----------------+-----------+-------------+------------------------------------------+| Log_name      | Pos  | Event_type     | Server_id | End_log_pos | Info                                     |+---------------+------+----------------+-----------+-------------+------------------------------------------+| binlog.000042 |    4 | Format_desc    |         1 |         124 | Server ver: 8.0.13, Binlog ver: 4        || binlog.000042 |  124 | Previous_gtids |         1 |         155 |                                          || binlog.000042 |  155 | Anonymous_Gtid |         1 |         230 | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;     || binlog.000042 |  230 | Query          |         1 |         312 | BEGIN                                    || binlog.000042 |  312 | Table_map      |         1 |         385 | table_id: 72 (iplume_ad.ad_unit_keyword) || binlog.000042 |  385 | Write_rows     |         1 |         436 | table_id: 72 flags: STMT_END_F           || binlog.000042 |  436 | Xid            |         1 |         467 | COMMIT &#x2F;* xid&#x3D;35 *&#x2F;                      || binlog.000042 |  467 | Anonymous_Gtid |         1 |         542 | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;     || binlog.000042 |  542 | Query          |         1 |         633 | BEGIN                                    || binlog.000042 |  633 | Table_map      |         1 |         706 | table_id: 72 (iplume_ad.ad_unit_keyword) || binlog.000042 |  706 | Update_rows    |         1 |         774 | table_id: 72 flags: STMT_END_F           || binlog.000042 |  774 | Xid            |         1 |         805 | COMMIT &#x2F;* xid&#x3D;37 *&#x2F;                      || binlog.000042 |  805 | Anonymous_Gtid |         1 |         880 | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;     || binlog.000042 |  880 | Query          |         1 |         962 | BEGIN                                    || binlog.000042 |  962 | Table_map      |         1 |        1035 | table_id: 72 (iplume_ad.ad_unit_keyword) || binlog.000042 | 1035 | Delete_rows    |         1 |        1086 | table_id: 72 flags: STMT_END_F           || binlog.000042 | 1086 | Xid            |         1 |        1117 | COMMIT &#x2F;* xid&#x3D;40 *&#x2F;                      |+---------------+------+----------------+-----------+-------------+------------------------------------------+17 rows in set (0.00 sec)</code></pre><h3 id="4-表字段索引与字段位置映射"><a href="#4-表字段索引与字段位置映射" class="headerlink" title="4.表字段索引与字段位置映射"></a>4.表字段索引与字段位置映射</h3><pre><code class="hljs mysql">mysql&gt; select table_schema, table_name, column_name, ordinal_position from information_schema.columns where table_schema &#x3D; &#39;iplume_ad&#39; and table_name &#x3D; &#39;ad_unit_keyword&#39;;+--------------+-----------------+-------------+------------------+| TABLE_SCHEMA | TABLE_NAME      | COLUMN_NAME | ORDINAL_POSITION |+--------------+-----------------+-------------+------------------+| iplume_ad    | ad_unit_keyword | id          |                1 || iplume_ad    | ad_unit_keyword | keyword     |                3 || iplume_ad    | ad_unit_keyword | unit_id     |                2 |+--------------+-----------------+-------------+------------------+3 rows in set (0.00 sec)</code></pre><p><strong><u>PS: 本文仅为学习记录,仅供参考与学习.</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> springcloud </tag>
            
            <tag> binlog </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>photoshop学习快捷键记录</title>
      <link href="2021/03/29/photoshop-started/"/>
      <url>2021/03/29/photoshop-started/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="photoshop学习快捷键记录"><a href="#photoshop学习快捷键记录" class="headerlink" title="photoshop学习快捷键记录"></a>photoshop学习快捷键记录</h3><h4 id="1-图层"><a href="#1-图层" class="headerlink" title="1.图层"></a>1.图层</h4><p>a) 文件 -&gt; 打开 -&gt; 背景图片<br>b) 文件 -&gt; 置入嵌入对象 -&gt; 对勾 -&gt; 设置图层的混合模式</p><pre><code class="hljs bash"><span class="hljs-comment"># 设置图层的混合模式</span>Shift + +/-</code></pre><p><img src="/2021/03/29/photoshop-started/001.jpg" alt="图层的混合模式"></p><h4 id="2-笔刷"><a href="#2-笔刷" class="headerlink" title="2.笔刷"></a>2.笔刷</h4><p>a) 文件 -&gt; 打开 -&gt; 背景图片<br>b) 文件 -&gt; 置入嵌入对象 -&gt; 对勾<br>c) 图层 -&gt; 栅格化 -&gt; 图层<br>d) 图层 -&gt; 蒙板 -&gt; 笔刷 -&gt; 黑色(hidden)/白色(visible)</p><pre><code class="hljs bash"><span class="hljs-comment"># 设置笔刷大小</span>Shift + &#125;/&#123;</code></pre><p><img src="/2021/03/29/photoshop-started/002.jpg" alt="layer-mask"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hotkey </tag>
            
            <tag> photoshop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Emmet快捷记录</title>
      <link href="2021/03/12/emmet-html-css-started/"/>
      <url>2021/03/12/emmet-html-css-started/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Emmet快捷记录"><a href="#Emmet快捷记录" class="headerlink" title="Emmet快捷记录"></a>Emmet快捷记录</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><p>Emmet (前身为 Zen Coding) 是一个能大幅度提高前端开发效率的工具，能够实现 HTML、CSS 的快速编写.<br>通常大多数的文本编辑器都会允许我们存储和重用一些代码块，我们称之为“片段”.虽然片段能很好地推动我们的生产力，但大多数的实现都有这样一个缺点：我们必须先定义代码片段，并且不能再运行时进行拓展.<br>而 <strong>Emmet</strong> 把片段这个概念提高到了一个新的层次：我们可以设置 <strong>CSS</strong> 形式的能够动态被解析的表达式，然后根据输入的缩写来得到相应的内容。<br><strong>Emmet</strong> 很成熟的并且非常适用于编写 <strong>HTML</strong>/<strong>XML</strong> 和 <strong>CSS</strong> 代码的前端开发人员，但也可以用于编程语言.</p><h4 id="2-简写"><a href="#2-简写" class="headerlink" title="2.简写"></a>2.简写</h4><p>书写简写标签,加Tab键.自动补全代码.</p><h5 id="2-1-类名"><a href="#2-1-类名" class="headerlink" title="2.1.类名"></a>2.1<code>.类名</code></h5><pre><code class="hljs bash"><span class="hljs-comment"># .类名</span>div.jumbotron-&gt;&lt;div class=<span class="hljs-string">&quot;jumbotron&quot;</span>&gt;&lt;/div&gt;<span class="hljs-comment"># 多个类名.</span>div.panel.panel-default-&gt;&lt;div class=<span class="hljs-string">&quot;panel panel-default&quot;</span>&gt;&lt;/div&gt;</code></pre><h5 id="2-2a"><a href="#2-2a" class="headerlink" title="2.2a"></a>2.2<code>a</code></h5><pre><code class="hljs bash"><span class="hljs-comment"># 链接.</span>a-&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;&lt;/a&gt;<span class="hljs-comment"># 链接加内容.</span>a&#123;Register an account&#125;-&gt;&lt;a href=<span class="hljs-string">&quot;&quot;</span>&gt;Register an account&lt;/a&gt;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> emmet </tag>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式学习记录</title>
      <link href="2021/02/16/regex-started/"/>
      <url>2021/02/16/regex-started/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="正则表达式学习记录"><a href="#正则表达式学习记录" class="headerlink" title="正则表达式学习记录"></a>正则表达式学习记录</h3><h4 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h4><pre><code class="hljs bash"><span class="hljs-comment"># 匹配一个换行符。等价于 \x0a 和 \cJ.</span>\n<span class="hljs-comment"># 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符.</span>\s<span class="hljs-comment"># 匹配任何非空白字符。等价于 [^ \f\n\r\t\v].</span>\S<span class="hljs-comment"># 匹配一个制表符。等价于 \x09 和 \cI.</span>\t<span class="hljs-comment"># 匹配一个垂直制表符。等价于 \x0b 和 \cK.</span>\v</code></pre><h4 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h4><p>所谓特殊字符，就是一些有特殊含义的字符.</p><pre><code class="hljs bash"><span class="hljs-comment"># 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 &#x27;\n&#x27; 或 &#x27;\r&#x27;。要匹配 $ 字符本身，请使用 \$.</span>$<span class="hljs-comment"># 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \).</span>( )<span class="hljs-comment"># 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*.</span>*<span class="hljs-comment"># 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+.</span>+<span class="hljs-comment"># 匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \.</span>.<span class="hljs-comment"># 标记一个中括号表达式的开始。要匹配 [，请使用 \[.</span>[<span class="hljs-comment"># 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?.</span>?<span class="hljs-comment"># 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。</span><span class="hljs-comment"># 例如， &#x27;n&#x27; 匹配字符 &#x27;n&#x27;。&#x27;\n&#x27; 匹配换行符。序列 &#x27;\\&#x27; 匹配 &quot;\&quot;，而 &#x27;\(&#x27; 则匹配 &quot;(&quot;.</span>\<span class="hljs-comment"># 匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。</span><span class="hljs-comment"># 要匹配 ^ 字符本身，请使用 \^.</span>^<span class="hljs-comment"># 标记限定符表达式的开始。要匹配 &#123;，请使用 \&#123;.</span>&#123;<span class="hljs-comment"># 指明两项之间的一个选择。要匹配 |，请使用 \|.</span>|</code></pre><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 *<strong>** 或 **+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种.</p><pre><code class="hljs bash"><span class="hljs-comment"># 匹配前面的子表达式零次或多次.例如，zo* 能匹配 &quot;z&quot; 以及 &quot;zoo&quot;。* 等价于&#123;0,&#125;.</span>*<span class="hljs-comment"># 匹配前面的子表达式一次或多次.例如，&#x27;zo+&#x27; 能匹配 &quot;zo&quot; 以及 &quot;zoo&quot;，但不能匹配 &quot;z&quot;。+ 等价于 &#123;1,&#125;.</span>+<span class="hljs-comment"># 匹配前面的子表达式零次或一次.例如，&quot;do(es)?&quot; 可以匹配 &quot;do&quot; 、 &quot;does&quot; 中的 &quot;does&quot; 、 &quot;doxy&quot; 中的 &quot;do&quot; 。? 等价于 &#123;0,1&#125;.</span>?<span class="hljs-comment"># n 是一个非负整数。匹配确定的 n 次.例如，&#x27;o&#123;2&#125;&#x27; 不能匹配 &quot;Bob&quot; 中的 &#x27;o&#x27;，但是能匹配 &quot;food&quot; 中的两个 o.</span>&#123;n&#125;<span class="hljs-comment"># n 是一个非负整数。至少匹配n 次.</span><span class="hljs-comment"># 例如，&#x27;o&#123;2,&#125;&#x27; 不能匹配 &quot;Bob&quot; 中的 &#x27;o&#x27;，但能匹配 &quot;foooood&quot; 中的所有 o。&#x27;o&#123;1,&#125;&#x27; 等价于 &#x27;o+&#x27;。&#x27;o&#123;0,&#125;&#x27; 则等价于 &#x27;o*&#x27;.</span>&#123;n,&#125;<span class="hljs-comment"># m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次.</span><span class="hljs-comment"># 例如，&quot;o&#123;1,3&#125;&quot; 将匹配 &quot;fooooood&quot; 中的前三个 o。&#x27;o&#123;0,1&#125;&#x27; 等价于 &#x27;o?&#x27;。请注意在逗号和两个数之间不能有空格。</span>&#123;n,m&#125;</code></pre><h4 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h4><p>定位符使您能够将正则表达式固定到行首或行尾.<br>它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾.</p><pre><code class="hljs bash"><span class="hljs-comment"># 匹配输入字符串开始的位置.如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配.</span>^<span class="hljs-comment"># 匹配输入字符串结尾的位置.如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配.</span>$<span class="hljs-comment"># 匹配一个单词边界，即字与空格间的位置.</span>\b<span class="hljs-comment"># 非单词边界匹配.</span>\B</code></pre><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><p>用圆括号 <strong>()</strong> 将所有选择项括起来，相邻的选择项之间用 <strong>|</strong> 分隔.<br><strong>()</strong> 表示捕获分组，**()** 会把每个分组里的匹配的值保存起来，多个匹配值可以通过数字 n 来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容).</p><p>但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用 <strong>?:</strong> 放在第一个选项前来消除这种副作用.<br>其中 <strong>?:</strong> 是非捕获元之一，还有两个非捕获元是 <strong>?=</strong> 和 **?!**，这两个还有更多的含义，<br>前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，<br>后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串.</p><pre><code class="hljs bash"><span class="hljs-comment"># 查找 exp2 前面的 exp1.</span>exp1(?=exp2)<span class="hljs-comment"># 查找 exp2 后面的 exp1.</span>(?&lt;=exp2)exp1<span class="hljs-comment"># 查找后面不是 exp2 的 exp1.</span>exp1(?!exp2)<span class="hljs-comment"># 查找前面不是 exp2 的 exp1.</span>(?&lt;!exp2)exp1</code></pre><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><h5 id="数字带有”千位分隔符”"><a href="#数字带有”千位分隔符”" class="headerlink" title="数字带有”千位分隔符”"></a>数字带有”千位分隔符”</h5><pre><code class="hljs bash"><span class="hljs-comment"># 1234567 -&gt; 1,234,567</span>\B(?=(\d&#123;3&#125;)+$),</code></pre><h5 id="数字验证"><a href="#数字验证" class="headerlink" title="数字验证"></a>数字验证</h5><pre><code class="hljs javascript"><span class="hljs-comment">// 正则校验.</span>(^-?[<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]+\.&#123;<span class="hljs-number">1</span>&#125;\d+$)|(^-?[<span class="hljs-number">1</span>-<span class="hljs-number">9</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]*$)|(^-?<span class="hljs-number">0</span>&#123;<span class="hljs-number">1</span>&#125;$)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValueNumber</span>(<span class="hljs-params">value</span>) </span>&#123;  <span class="hljs-keyword">return</span> (<span class="hljs-regexp">/(^-?[0-9]+\.&#123;1&#125;\d+$)|(^-?[1-9][0-9]*$)|(^-?0&#123;1&#125;$)/</span>).test(value + <span class="hljs-string">&#x27;&#x27;</span>)&#125;</code></pre><p><strong><u>PS:本文仅为学习记录,仅供参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> regex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink整合Redis</title>
      <link href="2021/01/24/flink-redis-started/"/>
      <url>2021/01/24/flink-redis-started/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Flink整合Redis"><a href="#Flink整合Redis" class="headerlink" title="Flink整合Redis"></a>Flink整合Redis</h3><h4 id="1-安装Redis"><a href="#1-安装Redis" class="headerlink" title="1.安装Redis"></a>1.安装Redis</h4><pre><code class="hljs sh"><span class="hljs-comment"># docker环境安装redis.</span><span class="hljs-comment"># docker run -d -p 6379:6379 redis:6.0.9</span><span class="hljs-comment"># 查看已经存在的images</span>% docker imagesREPOSITORY                                          TAG                 IMAGE ID            CREATED             SIZEredis                                               6.0.9               62f1d3402b78        2 months ago        104MB......% docker ps -a | grep redis558f08da4eda        redis:6.0.9                                                <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   2 months ago        Exited (0) 4 weeks ago                            priceless_brattain<span class="hljs-comment"># 启动redis.</span>% docker start 558558% docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES558f08da4eda        redis:6.0.9         <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   2 months ago        Up 3 seconds        0.0.0.0:6379-&gt;6379/tcp   priceless_brattain</code></pre><h4 id="2-pom依赖"><a href="#2-pom依赖" class="headerlink" title="2.pom依赖"></a>2.pom依赖</h4><p><code>flink-connector-redis_2.11</code></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lc-flink-started<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">flink.version</span>&gt;</span>1.10.1<span class="hljs-tag">&lt;/<span class="hljs-name">flink.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">flink.redis.version</span>&gt;</span>1.0<span class="hljs-tag">&lt;/<span class="hljs-name">flink.redis.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--flink-java config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--flink streaming java config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-streaming-java_2.12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--flink kafka config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-connector-kafka_2.12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--flink redis config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.bahir<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-connector-redis_2.11<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.redis.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>java程序:</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.api.sink;<span class="hljs-keyword">import</span> com.lc.api.beans.SensorReading;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.redis.RedisSink;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.redis.common.config.FlinkJedisPoolConfig;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.redis.common.mapper.RedisCommand;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.redis.common.mapper.RedisCommandDescription;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.redis.common.mapper.RedisMapper;<span class="hljs-comment">/**</span><span class="hljs-comment"> * sink与reids连接.</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/1/23</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sink2_Redis</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 执行环境.</span>        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();        <span class="hljs-comment">// 并行度.</span>        env.setParallelism(<span class="hljs-number">1</span>);        <span class="hljs-comment">// 读入数据.</span>        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="hljs-string">&quot;src/main/resources/sensor.txt&quot;</span>);        <span class="hljs-comment">// 转换成SensorReading类型.</span>        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;            String[] fields = line.split(<span class="hljs-string">&quot;,&quot;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SensorReading(fields[<span class="hljs-number">0</span>], <span class="hljs-keyword">new</span> Long(fields[<span class="hljs-number">1</span>]), <span class="hljs-keyword">new</span> Double(fields[<span class="hljs-number">2</span>]));        &#125;);        <span class="hljs-comment">// jedis连接器.</span>        FlinkJedisPoolConfig jedisConfig = <span class="hljs-keyword">new</span> FlinkJedisPoolConfig.Builder()                .setHost(<span class="hljs-string">&quot;localhost&quot;</span>)                .setPort(<span class="hljs-number">6379</span>)                .build();        <span class="hljs-comment">// redis sink连接.</span>        dataStream.addSink(<span class="hljs-keyword">new</span> RedisSink&lt;&gt;(jedisConfig, <span class="hljs-keyword">new</span> MyRedisMapper()));        <span class="hljs-comment">// 执行.</span>        env.execute();    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 自定义RedisMapper.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyRedisMapper</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">RedisMapper</span>&lt;<span class="hljs-title">SensorReading</span>&gt; </span>&#123;        <span class="hljs-comment">/**</span><span class="hljs-comment">         * 定义保存数据到redis的命令,存成Hash表,hset sensor_temp id, temperature.</span><span class="hljs-comment">         * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">         */</span>        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> RedisCommandDescription <span class="hljs-title">getCommandDescription</span><span class="hljs-params">()</span> </span>&#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RedisCommandDescription(RedisCommand.HSET, <span class="hljs-string">&quot;sensor_temp&quot;</span>);        &#125;        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getKeyFromData</span><span class="hljs-params">(SensorReading data)</span> </span>&#123;            <span class="hljs-keyword">return</span> data.getId();        &#125;        <span class="hljs-meta">@Override</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getValueFromData</span><span class="hljs-params">(SensorReading data)</span> </span>&#123;            <span class="hljs-keyword">return</span> data.getTemperature().toString();        &#125;    &#125;&#125;</code></pre><p>数据文件: <code>sensor.txt</code></p><pre><code class="hljs bash">sensor_1,1547718199,35.8sensor_2,1547718201,15.4sensor_3,1547718202,6.7sensor_4,1547718205,38.1sensor_1,1547718105,36.3sensor_1,1547717225,35.1sensor_1,1547718195,38.3</code></pre><h4 id="3-测试sink连接"><a href="#3-测试sink连接" class="headerlink" title="3.测试sink连接"></a>3.测试sink连接</h4><p>启动<code>Sink2_Redis</code>程序.<br>通过RDM来查看redis中是否有输出结果.</p><img src="/2021/01/24/flink-redis-started/001.png" alt="flink-redis-output" style="zoom:50%;"><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考!</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> flink </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka安装配置</title>
      <link href="2021/01/22/kafka-started/"/>
      <url>2021/01/22/kafka-started/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Kafka安装配置"><a href="#Kafka安装配置" class="headerlink" title="Kafka安装配置"></a>Kafka安装配置</h3><h4 id="1-前提"><a href="#1-前提" class="headerlink" title="1.前提"></a>1.前提</h4><p>环境准备</p><ul><li>三个虚拟节点(Host名设定, 免密登录)</li><li>与主机网络互通</li><li>Zookeeper版本:zookeeper-3.4.14</li><li>Kafka版本:kafka_2.11-2.1.0</li></ul><h4 id="2-启动zookeeper"><a href="#2-启动zookeeper" class="headerlink" title="2.启动zookeeper"></a>2.启动zookeeper</h4><p>在三个节点上都启动zookeeper.</p><pre><code class="hljs bash">[root@hdss7-71 opt]<span class="hljs-comment"># cd /opt/zookeeper</span>[root@hdss7-71 zookeeper]<span class="hljs-comment"># bin/zkServer.sh start</span><span class="hljs-comment"># 查看启动状态.</span>[root@hdss7-71 zookeeper]<span class="hljs-comment"># bin/zkServer.sh status</span>ZooKeeper JMX enabled by defaultUsing config: /opt/zookeeper/bin/../conf/zoo.cfgMode: follower</code></pre><h4 id="3-解压kafka"><a href="#3-解压kafka" class="headerlink" title="3.解压kafka"></a>3.解压kafka</h4><pre><code class="hljs bash"><span class="hljs-comment"># 解压.</span>[root@hdss7-71 src]<span class="hljs-comment"># tar -zxvf kafka_2.11-2.1.0.tgz -C /opt/</span>[root@hdss7-71 src]<span class="hljs-comment"># cd /opt/</span><span class="hljs-comment"># 建立软链接.</span>[root@hdss7-71 opt]<span class="hljs-comment"># ln -s /opt/kafka_2.11-2.1.0/ /opt/kafka</span>[root@hdss7-71 opt]<span class="hljs-comment"># ll</span>......lrwxrwxrwx  1 root root   22 1月  22 03:51 kafka -&gt; /opt/kafka_2.11-2.1.0/drwxr-xr-x  7 root root  101 1月  22 04:22 kafka_2.11-2.1.0......</code></pre><h4 id="4-配置kafka"><a href="#4-配置kafka" class="headerlink" title="4.配置kafka"></a>4.配置kafka</h4><p><code>broker.id=1</code>在不同的节点设置不同的值.</p><pre><code class="hljs bash">[root@hdss7-71 opt]<span class="hljs-comment"># cd /opt/kafka</span>[root@hdss7-71 kafka]<span class="hljs-comment"># vi config/server.properties</span>broker.id=1host.name=hdss7-71port=9092listeners=PLAINTEXT://hdss7-71:9092advertised.listeners=PLAINTEXT://hdss7-71:9092log.dirs=/opt/datas/kafka/logsnum.partitions=4zookeeper.connect=hdss7-71:2181,hdss7-72:2181,hdss7-73:2181</code></pre><p>配置kafka的zookeeper.</p><pre><code class="hljs bash">[root@hdss7-71 kafka]<span class="hljs-comment"># vi config/zookeeper.properties</span>clientPort=2181<span class="hljs-comment"># disable the per-ip limit on the number of connections since this is a non-production config</span>maxClientCnxns=0dataDir=/opt/datas/zookeeper/data</code></pre><p>创建日志文件</p><pre><code class="hljs bash">[root@hdss7-71 kafka]<span class="hljs-comment"># mkdir -p /opt/datas/kafka/logs</span>[root@hdss7-72 kafka]<span class="hljs-comment"># mkdir -p /opt/datas/kafka/logs</span>[root@hdss7-73 kafka]<span class="hljs-comment"># mkdir -p /opt/datas/kafka/logs</span></code></pre><h4 id="5-分发kafka"><a href="#5-分发kafka" class="headerlink" title="5.分发kafka"></a>5.分发kafka</h4><pre><code class="hljs bash">[root@hdss7-71 opt]<span class="hljs-comment"># rsync -av /opt/kafka_2.11-2.1.0/ hdss7-72:/opt/kafka_2.11-2.1.0/</span>[root@hdss7-71 opt]<span class="hljs-comment"># rsync -av /opt/kafka_2.11-2.1.0/ hdss7-73:/opt/kafka_2.11-2.1.0/</span><span class="hljs-comment"># 建立软链接.</span>[root@hdss7-72 opt]<span class="hljs-comment"># ln -s /opt/kafka_2.11-2.1.0/ /opt/kafka</span>[root@hdss7-73 opt]<span class="hljs-comment"># ln -s /opt/kafka_2.11-2.1.0/ /opt/kafka</span></code></pre><p>修改<code>config/server.properties</code>中的<code>broker.id=2,broker.id=3</code></p><h4 id="6-启动kafka"><a href="#6-启动kafka" class="headerlink" title="6.启动kafka"></a>6.启动kafka</h4><pre><code class="hljs bash"><span class="hljs-comment"># 在三个节点中都启动.</span>[root@hdss7-71 kafka]<span class="hljs-comment"># bin/kafka-server-start.sh config/server.properties</span>[root@hdss7-72 kafka]<span class="hljs-comment"># bin/kafka-server-start.sh config/server.properties</span>[root@hdss7-73 kafka]<span class="hljs-comment"># bin/kafka-server-start.sh config/server.properties</span><span class="hljs-comment"># 或者,在后台启动.</span>[root@hdss7-71 kafka]<span class="hljs-comment"># bin/kafka-server-start.sh -daemon config/server.properties</span>[root@hdss7-71 kafka]<span class="hljs-comment"># jps</span>25522 QuorumPeerMain53337 Kafka116488 Jps</code></pre><p>7.准备Flink程序,从kafka中读取数据.</p><p>启动程序:</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.api.source;<span class="hljs-keyword">import</span> org.apache.flink.api.common.serialization.SimpleStringSchema;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 从Kafka中读取数据.</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/1/21</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Source3_Kafka</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 执行环境.</span>        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();        <span class="hljs-comment">// 设置并行度.</span>        env.setParallelism(<span class="hljs-number">1</span>);        <span class="hljs-comment">// 从Kafka中读取数据.</span>        Properties properties = <span class="hljs-keyword">new</span> Properties();        <span class="hljs-comment">// properties.setProperty(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span>        properties.setProperty(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, <span class="hljs-string">&quot;hdss7-71:9092&quot;</span>);        properties.setProperty(<span class="hljs-string">&quot;group.id&quot;</span>, <span class="hljs-string">&quot;consumer-group&quot;</span>);        properties.setProperty(<span class="hljs-string">&quot;auto.offset.reset&quot;</span>, <span class="hljs-string">&quot;latest&quot;</span>);        DataStream&lt;String&gt; dataStream = env.addSource(<span class="hljs-keyword">new</span> FlinkKafkaConsumer&lt;String&gt;(                <span class="hljs-string">&quot;sensor&quot;</span>, <span class="hljs-keyword">new</span> SimpleStringSchema(), properties));        <span class="hljs-comment">// 打印数据.</span>        dataStream.print();        <span class="hljs-comment">// 执行.</span>        env.execute();    &#125;&#125;</code></pre><p>在kafka中发送信息</p><pre><code class="hljs bash">[root@hdss7-71 kafka]<span class="hljs-comment"># bin/kafka-console-producer.sh --broker-list hdss7-71:9092 --topic sensor</span>&gt;sensor_1,1547718199L,35.8&gt;sensor_2,1547718201L,15.4&gt;sensor_3,1547718202L,6.7&gt;sensor_4,1547718205L,38.1</code></pre><p>在程序输出容器中会打印出信息结果:</p><p><img src="/2021/01/22/kafka-started/001.png" alt="flink-console" style="zoom:50%;"></p><h4 id="7-kafka消息消费"><a href="#7-kafka消息消费" class="headerlink" title="7.kafka消息消费"></a>7.kafka消息消费</h4><p>java程序:</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.api.sink;<span class="hljs-keyword">import</span> com.lc.api.beans.SensorReading;<span class="hljs-keyword">import</span> org.apache.flink.api.common.serialization.SimpleStringSchema;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer;<span class="hljs-comment">/**</span><span class="hljs-comment"> * sink与kafka连接.</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/1/23</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sink1_Kafka</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 执行环境.</span>        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();        env.setParallelism(<span class="hljs-number">4</span>);        <span class="hljs-comment">// 读入数据.</span>        DataStream&lt;String&gt; inputStream = env.readTextFile(<span class="hljs-string">&quot;src/main/resources/sensor.txt&quot;</span>);        <span class="hljs-comment">// 转换成SensorReading类型.</span>        DataStream&lt;String&gt; dataStream = inputStream.map(line -&gt; &#123;            String[] fields = line.split(<span class="hljs-string">&quot;,&quot;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SensorReading(fields[<span class="hljs-number">0</span>], <span class="hljs-keyword">new</span> Long(fields[<span class="hljs-number">1</span>]), <span class="hljs-keyword">new</span> Double(fields[<span class="hljs-number">2</span>])).toString();        &#125;);        <span class="hljs-comment">// kafka sink连接.</span>        dataStream.addSink(<span class="hljs-keyword">new</span> FlinkKafkaProducer&lt;String&gt;(                <span class="hljs-string">&quot;hdss7-71:9092&quot;</span>,                <span class="hljs-string">&quot;sink_kafka&quot;</span>,                <span class="hljs-keyword">new</span> SimpleStringSchema()        ));        <span class="hljs-comment">// 执行.</span>        env.execute();    &#125;&#125;</code></pre><p>kafka主题监听:</p><pre><code class="hljs bash"><span class="hljs-comment"># 后台启动kafka(加上参数:-daemon).</span>[root@hdss7-71 kafka]<span class="hljs-comment"># bin/kafka-server-start.sh -daemon config/server.properties </span>[root@hdss7-71 kafka]<span class="hljs-comment"># jps</span>8386 Jps8067 Kafka4644 QuorumPeerMain[root@hdss7-71 kafka]<span class="hljs-comment"># bin/kafka-console-consumer.sh --bootstrap-server hdss7-71:9092 --topic sink_kafka</span></code></pre><p>执行java程序后,在kafka输出中会监听到消息</p><pre><code class="hljs bash">[root@hdss7-71 kafka]<span class="hljs-comment"># bin/kafka-console-consumer.sh --bootstrap-server hdss7-71:9092 --topic sink_kafka</span>[2021-01-23 21:30:11,561] WARN [Consumer clientId=consumer-1, groupId=console-consumer-9131] Error <span class="hljs-keyword">while</span> fetching metadata with correlation id 2 : &#123;sink_kafka=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_3&#x27;</span>, timestamp=1547718202, temperature=6.7&#125;SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_4&#x27;</span>, timestamp=1547718205, temperature=38.1&#125;SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_1&#x27;</span>, timestamp=1547718199, temperature=35.8&#125;SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_2&#x27;</span>, timestamp=1547718201, temperature=15.4&#125;SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_1&#x27;</span>, timestamp=1547718105, temperature=36.3&#125;SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_1&#x27;</span>, timestamp=1547717225, temperature=35.1&#125;SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_1&#x27;</span>, timestamp=1547718195, temperature=38.3&#125;</code></pre><p>修改java程序为,在kafka中输入,并在kafka中输出,相当于kafka做了一个ETL的作用.</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.api.sink;<span class="hljs-keyword">import</span> com.lc.api.beans.SensorReading;<span class="hljs-keyword">import</span> org.apache.flink.api.common.serialization.SimpleStringSchema;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.kafka.FlinkKafkaProducer;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-comment">/**</span><span class="hljs-comment"> * sink与kafka连接, 输入与输出.</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/1/23</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sink1_Kafka_InOut</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 执行环境.</span>        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();        env.setParallelism(<span class="hljs-number">4</span>);        <span class="hljs-comment">// 从Kafka中读取数据.</span>        Properties properties = <span class="hljs-keyword">new</span> Properties();        <span class="hljs-comment">// properties.setProperty(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);</span>        properties.setProperty(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, <span class="hljs-string">&quot;hdss7-71:9092&quot;</span>);        properties.setProperty(<span class="hljs-string">&quot;group.id&quot;</span>, <span class="hljs-string">&quot;consumer-group&quot;</span>);        properties.setProperty(<span class="hljs-string">&quot;auto.offset.reset&quot;</span>, <span class="hljs-string">&quot;latest&quot;</span>);        DataStream&lt;String&gt; inputStream = env.addSource(<span class="hljs-keyword">new</span> FlinkKafkaConsumer&lt;String&gt;(                <span class="hljs-string">&quot;sensor&quot;</span>, <span class="hljs-keyword">new</span> SimpleStringSchema(), properties));        <span class="hljs-comment">// 转换成SensorReading类型.</span>        DataStream&lt;String&gt; dataStream = inputStream.map(line -&gt; &#123;            String[] fields = line.split(<span class="hljs-string">&quot;,&quot;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SensorReading(fields[<span class="hljs-number">0</span>], <span class="hljs-keyword">new</span> Long(fields[<span class="hljs-number">1</span>]), <span class="hljs-keyword">new</span> Double(fields[<span class="hljs-number">2</span>])).toString();        &#125;);        <span class="hljs-comment">// kafka sink连接.</span>        dataStream.addSink(<span class="hljs-keyword">new</span> FlinkKafkaProducer&lt;String&gt;(                <span class="hljs-string">&quot;hdss7-71:9092&quot;</span>,                <span class="hljs-string">&quot;sink_kafka&quot;</span>,                <span class="hljs-keyword">new</span> SimpleStringSchema()        ));        <span class="hljs-comment">// 执行.</span>        env.execute();    &#125;&#125;</code></pre><p>在kafka中发送消息主题与监听主题:</p><pre><code class="hljs bash"><span class="hljs-comment"># 监听主题.</span>[root@hdss7-71 kafka]<span class="hljs-comment"># bin/kafka-console-consumer.sh --bootstrap-server hdss7-71:9092 --topic sink_kafka</span>[2021-01-23 21:30:11,561] WARN [Consumer clientId=consumer-1, groupId=console-consumer-9131] Error <span class="hljs-keyword">while</span> fetching metadata with correlation id 2 : &#123;sink_kafka=LEADER_NOT_AVAILABLE&#125; (org.apache.kafka.clients.NetworkClient)<span class="hljs-comment"># 发送消息.</span>[root@hdss7-71 kafka]<span class="hljs-comment"># bin/kafka-console-producer.sh --broker-list hdss7-71:9092 --topic sensor</span>&gt;sensor_1,1547718199,35.8&gt;sensor_4,1547718205,38.1&gt;sensor_3,1547718202,6.7&gt;<span class="hljs-comment"># 在监听窗口中看到结果.</span>SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_1&#x27;</span>, timestamp=1547718199, temperature=35.8&#125;SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_4&#x27;</span>, timestamp=1547718205, temperature=38.1&#125;SensorReading&#123;id=<span class="hljs-string">&#x27;sensor_3&#x27;</span>, timestamp=1547718202, temperature=6.7&#125;</code></pre><h4 id="8-kafka单点使用"><a href="#8-kafka单点使用" class="headerlink" title="8.kafka单点使用"></a>8.kafka单点使用</h4><pre><code class="hljs bash">[root@hdss7-81 ~]<span class="hljs-comment"># cd /opt/src</span><span class="hljs-comment"># 解压.</span>[root@hdss7-81 src]<span class="hljs-comment"># tar -zxvf kafka_2.12-2.1.0.tgz -C /opt/</span><span class="hljs-comment"># 建立软链接.</span>[root@hdss7-81 opt]<span class="hljs-comment"># ln -s /opt/kafka_2.12-2.1.0/ /opt/kafka</span><span class="hljs-comment"># 配置kafka.</span>[root@hdss7-81 opt]<span class="hljs-comment"># cd kafka</span>[root@hdss7-81 kafka]<span class="hljs-comment"># vi config/server.properties </span>broker.id=1log.dirs=/usr/tmp/kafka-logsnum.partitions=1<span class="hljs-comment"># 配置zookeeper.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># vi config/zookeeper.properties </span>dataDir=/opt/datas/kafka/zookeeper<span class="hljs-comment"># 启动kafka自带的zookeeper.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</span>[root@hdss7-81 kafka]<span class="hljs-comment"># jps</span>28818 QuorumPeerMain28899 Jps<span class="hljs-comment"># 启动kafka(命令行方式).</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-server-start.sh config/server.properties </span><span class="hljs-comment"># 后台方式启动(-daemon)</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-server-start.sh -daemon config/server.properties </span><span class="hljs-comment"># 创建消息主题.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic iplume-ad-test-01</span>Created topic <span class="hljs-string">&quot;iplume-ad-test-01&quot;</span>.<span class="hljs-comment"># 查看消息主题.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-topics.sh --list --zookeeper localhost:2181</span>iplume-ad-test-01<span class="hljs-comment"># 发送消息.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-console-producer.sh --broker-list localhost:9092 --topic iplume-ad-test-01 </span>&gt;hello kafka&gt;hello iplume-ad<span class="hljs-comment"># 监听消息</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic iplume-ad-test-01 --from-beginning</span>hello kafkahello iplume-ad<span class="hljs-comment"># 查看进程.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># jps</span>28818 QuorumPeerMain31977 Kafka47321 ConsoleConsumer100972 Jps<span class="hljs-comment"># 关闭zookeeper.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/zookeeper-server-stop.sh</span><span class="hljs-comment"># 关闭kafka.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-server-stop.sh</span>[root@hdss7-81 kafka]<span class="hljs-comment"># jps</span>111428 Jps</code></pre><h4 id="9-kafka的producer"><a href="#9-kafka的producer" class="headerlink" title="9.kafka的producer."></a>9.kafka的producer.</h4><h5 id="1-原生发送消息"><a href="#1-原生发送消息" class="headerlink" title="1) 原生发送消息"></a>1) 原生发送消息</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.kafkastudy;<span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;<span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-comment">/**</span><span class="hljs-comment"> * kafka的消息产生类.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/5/27</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyProducer</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * kafkai消息生产.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> KafkaProducer&lt;String, String&gt; producer;    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-comment">// kafka的属性设置.</span>        Properties properties = <span class="hljs-keyword">new</span> Properties();        properties.put(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, <span class="hljs-string">&quot;hdss7-81:9092&quot;</span>);        <span class="hljs-comment">// key和value的键序列化方式(StringSerializer).</span>        properties.put(<span class="hljs-string">&quot;key.serializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);        properties.put(<span class="hljs-string">&quot;value.serializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);        <span class="hljs-comment">// 构建消息生产者.</span>        producer = <span class="hljs-keyword">new</span> KafkaProducer&lt;String, String&gt;(properties);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 发送kafka消息.</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessageForgetResult</span><span class="hljs-params">()</span> </span>&#123;        ProducerRecord&lt;String, String&gt; record = <span class="hljs-keyword">new</span> ProducerRecord&lt;&gt;(                <span class="hljs-string">&quot;iplume-kafka-study&quot;</span>,                <span class="hljs-string">&quot;name&quot;</span>,                <span class="hljs-string">&quot;ForgetResult&quot;</span>        );        producer.send(record);        producer.close();    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        sendMessageForgetResult();    &#125;&#125;</code></pre><p>执行上述程序.查看监视窗口.</p><pre><code class="hljs bash">[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic iplume-kafka-study --from-beginning</span>ForgetResult</code></pre><h5 id="2-同步消息"><a href="#2-同步消息" class="headerlink" title="2) 同步消息"></a>2) 同步消息</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">  * 同步发送消息.</span><span class="hljs-comment">  */</span> <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessageSync</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;     ProducerRecord&lt;String, String&gt; record = <span class="hljs-keyword">new</span> ProducerRecord&lt;&gt;(             <span class="hljs-string">&quot;iplume-kafka-study&quot;</span>,             <span class="hljs-string">&quot;name&quot;</span>,             <span class="hljs-string">&quot;Sync&quot;</span>     );     RecordMetadata result = producer.send(record).get();     System.out.println(result.topic());     System.out.println(result.partition());     System.out.println(result.offset());     producer.close(); &#125; <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;     <span class="hljs-comment">// sendMessageForgetResult();</span>     sendMessageSync(); &#125;</code></pre><p>查看消费窗口</p><pre><code class="hljs bash">[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic iplume-kafka-study --from-beginning</span>Sync</code></pre><p>运行窗口</p><pre><code class="hljs bash">iplume-kafka-study02</code></pre><h5 id="3-异步消息"><a href="#3-异步消息" class="headerlink" title="3) 异步消息"></a>3) 异步消息</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">   * 异步发送消息.</span><span class="hljs-comment">   */</span>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessageCallback</span><span class="hljs-params">()</span> </span>&#123;      ProducerRecord&lt;String, String&gt; record = <span class="hljs-keyword">new</span> ProducerRecord&lt;&gt;(              <span class="hljs-string">&quot;iplume-kafka-study&quot;</span>,              <span class="hljs-string">&quot;name&quot;</span>,              <span class="hljs-string">&quot;Callback&quot;</span>      );      <span class="hljs-comment">// 发送消息.</span>      producer.send(record, <span class="hljs-keyword">new</span> MyProducerCallback());      producer.close();  &#125;  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 异步发送消息的回调处理类.</span><span class="hljs-comment">   */</span>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyProducerCallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callback</span> </span>&#123;      <span class="hljs-meta">@Override</span>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompletion</span><span class="hljs-params">(RecordMetadata recordMetadata, Exception e)</span> </span>&#123;          <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123;              e.printStackTrace();              <span class="hljs-keyword">return</span>;          &#125;          System.out.println(recordMetadata.topic());          System.out.println(recordMetadata.partition());          System.out.println(recordMetadata.offset());          System.out.println(<span class="hljs-string">&quot;Coming in MyProducerCallback&quot;</span>);      &#125;  &#125;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;      <span class="hljs-comment">// sendMessageForgetResult();</span>      <span class="hljs-comment">// sendMessageSync();</span>      sendMessageCallback();  &#125;</code></pre><p>查看消费窗口</p><pre><code class="hljs bash">[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic iplume-kafka-study --from-beginning</span>ForgetResultForgetResultSyncCallback</code></pre><p>运行窗口</p><pre><code class="hljs bash">iplume-kafka-study03Coming <span class="hljs-keyword">in</span> MyProducerCallback</code></pre><h5 id="4-自定义分区配置"><a href="#4-自定义分区配置" class="headerlink" title="4) 自定义分区配置"></a>4) 自定义分区配置</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.kafkastudy;<span class="hljs-keyword">import</span> org.apache.kafka.clients.producer.Partitioner;<span class="hljs-keyword">import</span> org.apache.kafka.common.Cluster;<span class="hljs-keyword">import</span> org.apache.kafka.common.PartitionInfo;<span class="hljs-keyword">import</span> org.apache.kafka.common.record.InvalidRecordException;<span class="hljs-keyword">import</span> org.apache.kafka.common.utils.Utils;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 自定义分区分配类.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/5/27</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomPartitioner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Partitioner</span> </span>&#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String KEY_NAME = <span class="hljs-string">&quot;name&quot;</span>;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(String topic, Object key, <span class="hljs-keyword">byte</span>[] keyBytes, Object value, <span class="hljs-keyword">byte</span>[] valueBytes, Cluster cluster)</span> </span>&#123;        List&lt;PartitionInfo&gt; partitionInfos = cluster.partitionsForTopic(topic);        <span class="hljs-keyword">int</span> partitions = partitionInfos.size();        <span class="hljs-keyword">if</span> (keyBytes == <span class="hljs-keyword">null</span> || !(key <span class="hljs-keyword">instanceof</span> String)) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InvalidRecordException(<span class="hljs-string">&quot;Kafka message must have key.&quot;</span>);        &#125;        <span class="hljs-keyword">if</span> (partitions == <span class="hljs-number">1</span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">if</span> (KEY_NAME.equals(key)) &#123;            <span class="hljs-keyword">return</span> partitions - <span class="hljs-number">1</span>;        &#125;        <span class="hljs-keyword">return</span> Math.abs(Utils.murmur2(keyBytes) % (partitions - <span class="hljs-number">1</span>));    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(Map&lt;String, ?&gt; configs)</span> </span>&#123;    &#125;&#125;</code></pre><p>运行类修改:</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">   * 异步发送消息.</span><span class="hljs-comment">   */</span>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sendMessageCallback</span><span class="hljs-params">()</span> </span>&#123;      ProducerRecord&lt;String, String&gt; record = <span class="hljs-keyword">new</span> ProducerRecord&lt;&gt;(              <span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>,              <span class="hljs-string">&quot;name&quot;</span>,              <span class="hljs-string">&quot;Callback&quot;</span>      );      <span class="hljs-comment">// 发送消息.</span>      producer.send(record, <span class="hljs-keyword">new</span> MyProducerCallback());      record = <span class="hljs-keyword">new</span> ProducerRecord&lt;&gt;(              <span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>,              <span class="hljs-string">&quot;name_x&quot;</span>,              <span class="hljs-string">&quot;Callback_x&quot;</span>      );      producer.send(record, <span class="hljs-keyword">new</span> MyProducerCallback());      record = <span class="hljs-keyword">new</span> ProducerRecord&lt;&gt;(              <span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>,              <span class="hljs-string">&quot;name_y&quot;</span>,              <span class="hljs-string">&quot;Callback_y&quot;</span>      );      producer.send(record, <span class="hljs-keyword">new</span> MyProducerCallback());      producer.close();  &#125;  <span class="hljs-comment">/**</span><span class="hljs-comment">   * 异步发送消息的回调处理类.</span><span class="hljs-comment">   */</span>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyProducerCallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Callback</span> </span>&#123;      <span class="hljs-meta">@Override</span>      <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onCompletion</span><span class="hljs-params">(RecordMetadata recordMetadata, Exception e)</span> </span>&#123;          <span class="hljs-keyword">if</span> (e != <span class="hljs-keyword">null</span>) &#123;              e.printStackTrace();              <span class="hljs-keyword">return</span>;          &#125;          System.out.println(<span class="hljs-string">&quot;Topic: &quot;</span> + recordMetadata.topic());          System.out.println(<span class="hljs-string">&quot;Partition: &quot;</span> + recordMetadata.partition());          System.out.println(<span class="hljs-string">&quot;Offset: &quot;</span> + recordMetadata.offset());          System.out.println(<span class="hljs-string">&quot;Coming in MyProducerCallback&quot;</span>);      &#125;  &#125;  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;      sendMessageCallback();  &#125;</code></pre><p>运行程序后,消息监听窗口:</p><pre><code class="hljs bash"><span class="hljs-comment"># 设置topic的分区数为3.</span>[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 3 --topic iplume-kafka-study-x</span>Created topic <span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>.[root@hdss7-81 kafka]<span class="hljs-comment"># bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic iplume-kafka-study-x --from-beginning</span>Callback_xCallback_yCallback</code></pre><p>程序窗口:</p><pre><code class="hljs bash">Topic: iplume-kafka-study-xPartition: 1Offset: 0Coming <span class="hljs-keyword">in</span> MyProducerCallbackTopic: iplume-kafka-study-xPartition: 0Offset: 0Coming <span class="hljs-keyword">in</span> MyProducerCallbackTopic: iplume-kafka-study-xPartition: 2Offset: 0Coming <span class="hljs-keyword">in</span> MyProducerCallback</code></pre><h4 id="10-kafka的Consumer"><a href="#10-kafka的Consumer" class="headerlink" title="10.kafka的Consumer"></a>10.kafka的Consumer</h4><h5 id="1-自动提交位移"><a href="#1-自动提交位移" class="headerlink" title="1) 自动提交位移"></a>1) 自动提交位移</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.iplume.kafkastudy;<span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;<span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;<span class="hljs-keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;<span class="hljs-keyword">import</span> java.util.Collections;<span class="hljs-keyword">import</span> java.util.Properties;<span class="hljs-comment">/**</span><span class="hljs-comment"> * kafka的消费类.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/5/28</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyConsumer</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * kafka消费者.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> KafkaConsumer&lt;String, String&gt; consumer;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 属性.</span><span class="hljs-comment">     */</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Properties properties;    <span class="hljs-keyword">static</span> &#123;        properties = <span class="hljs-keyword">new</span> Properties();        properties.put(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, <span class="hljs-string">&quot;hdss7-81:9092&quot;</span>);        <span class="hljs-comment">// key 与 value的反序列化.</span>        properties.put(<span class="hljs-string">&quot;key.deserializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);        properties.put(<span class="hljs-string">&quot;value.deserializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span>);        <span class="hljs-comment">// kafka不同组也可以消费全量的消息.</span>        properties.put(<span class="hljs-string">&quot;group.id&quot;</span>, <span class="hljs-string">&quot;KafkaStudy&quot;</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 消息消费方式: 自动提交位移.</span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">generalConsumerMessageAutoCommit</span><span class="hljs-params">()</span> </span>&#123;        properties.put(<span class="hljs-string">&quot;enable.auto.commit&quot;</span>, <span class="hljs-keyword">true</span>);        consumer = <span class="hljs-keyword">new</span> KafkaConsumer&lt;&gt;(properties);        consumer.subscribe(Collections.singleton(<span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>));        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;                <span class="hljs-keyword">boolean</span> flg = <span class="hljs-keyword">true</span>;                <span class="hljs-comment">// 拉取消息.</span>                ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="hljs-number">100</span>);                <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;                    System.out.println(String.format(<span class="hljs-string">&quot;&quot;</span> +                            <span class="hljs-string">&quot;Topic: %s, Partition: %s, Key: %s, Value: %s&quot;</span>,                            record.topic(),                            record.partition(),                            record.key(),                            record.value()));                    <span class="hljs-keyword">if</span> (record.value().equals(<span class="hljs-string">&quot;done&quot;</span>)) &#123;                        flg = <span class="hljs-keyword">false</span>;                    &#125;                &#125;                <span class="hljs-keyword">if</span> (!flg) &#123;                    <span class="hljs-keyword">break</span>;                &#125;            &#125;        &#125; <span class="hljs-keyword">finally</span> &#123;            consumer.close();        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">// 自动提交位移.</span>        generalConsumerMessageAutoCommit();    &#125;&#125;</code></pre><p>运行消费者与生产者.查看运行窗口.</p><pre><code class="hljs bash"><span class="hljs-comment"># MyProducer.</span>Topic: iplume-kafka-study-xPartition: 1Offset: 1Coming <span class="hljs-keyword">in</span> MyProducerCallbackTopic: iplume-kafka-study-xPartition: 0Offset: 1Coming <span class="hljs-keyword">in</span> MyProducerCallbackTopic: iplume-kafka-study-xPartition: 2Offset: 1Coming <span class="hljs-keyword">in</span> MyProducerCallback<span class="hljs-comment"># MyConsumer.</span>Topic: iplume-kafka-study-x, Partition: 1, Key: name_x, Value: Callback_xTopic: iplume-kafka-study-x, Partition: 0, Key: name_y, Value: Callback_yTopic: iplume-kafka-study-x, Partition: 2, Key: name, Value: Callback</code></pre><h5 id="2-同步提交消息"><a href="#2-同步提交消息" class="headerlink" title="2) 同步提交消息"></a>2) 同步提交消息</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">   * 手动提交当前位移(同步提交).</span><span class="hljs-comment">   */</span>  <span class="hljs-meta">@SuppressWarnings(&quot;DuplicatedCode&quot;)</span>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">generalConsumeMessageSyncCommit</span><span class="hljs-params">()</span> </span>&#123;      <span class="hljs-comment">// 设置自动提交为false.</span>      properties.put(<span class="hljs-string">&quot;auto.commit.offset&quot;</span>, <span class="hljs-keyword">false</span>);      <span class="hljs-comment">// 消费者实例化.</span>      consumer = <span class="hljs-keyword">new</span> KafkaConsumer&lt;&gt;(properties);      <span class="hljs-comment">// 订阅消息主题.</span>      consumer.subscribe(Collections.singleton(<span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>));      <span class="hljs-keyword">try</span> &#123;          <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;              <span class="hljs-keyword">boolean</span> flg = <span class="hljs-keyword">true</span>;              ConsumerRecords&lt;String, String&gt; recordss = consumer.poll(<span class="hljs-number">100</span>);              <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : recordss) &#123;                  System.out.println(String.format(<span class="hljs-string">&quot;&quot;</span> +                                  <span class="hljs-string">&quot;Topic: %s, Partition: %s, Key: %s, Value: %s&quot;</span>,                          record.topic(),                          record.partition(),                          record.key(),                          record.value()));                  <span class="hljs-keyword">if</span> (record.value().equals(<span class="hljs-string">&quot;done&quot;</span>)) &#123;                      flg = <span class="hljs-keyword">false</span>;                  &#125;              &#125;              <span class="hljs-keyword">try</span> &#123;                  <span class="hljs-comment">// 同步提交发生消息堵塞.直到消费消息或者是发生异常为止.</span>                  consumer.commitSync();              &#125; <span class="hljs-keyword">catch</span> (CommitFailedException ex) &#123;                  System.out.println(<span class="hljs-string">&quot;Commit fail error: &quot;</span> + ex.getMessage());              &#125;              <span class="hljs-keyword">if</span> (!flg) &#123;                  <span class="hljs-keyword">break</span>;              &#125;          &#125;      &#125; <span class="hljs-keyword">finally</span> &#123;          consumer.close();      &#125;  &#125;</code></pre><h5 id="3-异步提交消息"><a href="#3-异步提交消息" class="headerlink" title="3) 异步提交消息"></a>3) 异步提交消息</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 异步消费消息.</span><span class="hljs-comment"> */</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">generalConsumerMessageAsyncCommit</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">// 设置自动提交为false.</span>    properties.put(<span class="hljs-string">&quot;auto.commit.offset&quot;</span>, <span class="hljs-keyword">false</span>);    <span class="hljs-comment">// 消费者实例化.</span>    consumer = <span class="hljs-keyword">new</span> KafkaConsumer&lt;&gt;(properties);    <span class="hljs-comment">// 订阅消息主题.</span>    consumer.subscribe(Collections.singleton(<span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>));    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;            <span class="hljs-keyword">boolean</span> flg = <span class="hljs-keyword">true</span>;            ConsumerRecords&lt;String, String&gt; recordss = consumer.poll(<span class="hljs-number">100</span>);            <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : recordss) &#123;                System.out.println(String.format(<span class="hljs-string">&quot;&quot;</span> +                                <span class="hljs-string">&quot;Topic: %s, Partition: %s, Key: %s, Value: %s&quot;</span>,                        record.topic(),                        record.partition(),                        record.key(),                        record.value()));                <span class="hljs-keyword">if</span> (record.value().equals(<span class="hljs-string">&quot;done&quot;</span>)) &#123;                    flg = <span class="hljs-keyword">false</span>;                &#125;            &#125;            <span class="hljs-comment">// 异步提交消息不会发行堵塞,但不能保证能正确消费消息.</span>            consumer.commitAsync();            <span class="hljs-keyword">if</span> (!flg) &#123;                <span class="hljs-keyword">break</span>;            &#125;        &#125;    &#125; <span class="hljs-keyword">finally</span> &#123;        consumer.close();    &#125;&#125;</code></pre><h5 id="4-手动异步提交消息带回调"><a href="#4-手动异步提交消息带回调" class="headerlink" title="4) 手动异步提交消息带回调"></a>4) 手动异步提交消息带回调</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 手动异步提交消息带回调.</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SuppressWarnings(&quot;AlibabaRemoveCommentedCode&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">generalConsumeMessageAsyncCommitWithCallback</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">// 设置自动提交为false.</span>    properties.put(<span class="hljs-string">&quot;auto.commit.offset&quot;</span>, <span class="hljs-keyword">false</span>);    <span class="hljs-comment">// 消费者实例化.</span>    consumer = <span class="hljs-keyword">new</span> KafkaConsumer&lt;&gt;(properties);    <span class="hljs-comment">// 订阅消息主题.</span>    consumer.subscribe(Collections.singleton(<span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>));    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;            <span class="hljs-keyword">boolean</span> flg = <span class="hljs-keyword">true</span>;            ConsumerRecords&lt;String, String&gt; recordss = consumer.poll(<span class="hljs-number">100</span>);            <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : recordss) &#123;                System.out.println(String.format(<span class="hljs-string">&quot;&quot;</span> +                                <span class="hljs-string">&quot;Topic: %s, Partition: %s, Key: %s, Value: %s&quot;</span>,                        record.topic(),                        record.partition(),                        record.key(),                        record.value()));                <span class="hljs-keyword">if</span> (record.value().equals(<span class="hljs-string">&quot;done&quot;</span>)) &#123;                    flg = <span class="hljs-keyword">false</span>;                &#125;            &#125;            <span class="hljs-comment">// 正常写法.</span>            <span class="hljs-comment">// consumer.commitAsync(new OffsetCommitCallback() &#123;</span>            <span class="hljs-comment">//     @Override</span>            <span class="hljs-comment">//     public void onComplete(Map&lt;TopicPartition, OffsetAndMetadata&gt; offsets, Exception exception) &#123;</span>            <span class="hljs-comment">//         // 异步提交失败后的回调,查看错误信息.</span>            <span class="hljs-comment">//         if (exception != null) &#123;</span>            <span class="hljs-comment">//             System.out.println(&quot;Commit failed for offsets: &quot; + exception.getMessage());</span>            <span class="hljs-comment">//         &#125;</span>            <span class="hljs-comment">//     &#125;</span>            <span class="hljs-comment">// &#125;);</span>            <span class="hljs-comment">// lambda语法糖.</span>            consumer.commitAsync((offsets, exception) -&gt; &#123;                <span class="hljs-comment">// 异步提交失败后的回调,查看错误信息.</span>                <span class="hljs-keyword">if</span> (exception != <span class="hljs-keyword">null</span>) &#123;                    System.out.println(<span class="hljs-string">&quot;Commit failed for offsets: &quot;</span> + exception.getMessage());                &#125;            &#125;);            <span class="hljs-keyword">if</span> (!flg) &#123;                <span class="hljs-keyword">break</span>;            &#125;        &#125;    &#125; <span class="hljs-keyword">finally</span> &#123;        consumer.close();    &#125;&#125;</code></pre><h5 id="5-混合异步与同步提交位移"><a href="#5-混合异步与同步提交位移" class="headerlink" title="5) 混合异步与同步提交位移"></a>5) 混合异步与同步提交位移</h5><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * 混合异步与同步提交位移.</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SuppressWarnings(&quot;DuplicatedCode&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mixAsyncAndSyncCommit</span><span class="hljs-params">()</span> </span>&#123;    <span class="hljs-comment">// 设置自动提交为false.</span>    properties.put(<span class="hljs-string">&quot;auto.commit.offset&quot;</span>, <span class="hljs-keyword">false</span>);    <span class="hljs-comment">// 消费者实例化.</span>    consumer = <span class="hljs-keyword">new</span> KafkaConsumer&lt;&gt;(properties);    <span class="hljs-comment">// 订阅消息主题.</span>    consumer.subscribe(Collections.singleton(<span class="hljs-string">&quot;iplume-kafka-study-x&quot;</span>));    <span class="hljs-keyword">try</span> &#123;        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;            <span class="hljs-keyword">boolean</span> flg = <span class="hljs-keyword">true</span>;            ConsumerRecords&lt;String, String&gt; recordss = consumer.poll(<span class="hljs-number">100</span>);            <span class="hljs-keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : recordss) &#123;                System.out.println(String.format(<span class="hljs-string">&quot;&quot;</span> +                                <span class="hljs-string">&quot;Topic: %s, Partition: %s, Key: %s, Value: %s&quot;</span>,                        record.topic(),                        record.partition(),                        record.key(),                        record.value()));                <span class="hljs-keyword">if</span> (record.value().equals(<span class="hljs-string">&quot;done&quot;</span>)) &#123;                    flg = <span class="hljs-keyword">false</span>;                &#125;            &#125;            <span class="hljs-comment">// 异步提交.</span>            consumer.commitAsync();            <span class="hljs-keyword">if</span> (!flg) &#123;                <span class="hljs-keyword">break</span>;            &#125;        &#125;    &#125; <span class="hljs-keyword">catch</span> (Exception ex) &#123;        System.out.println(<span class="hljs-string">&quot;Commit async error: &quot;</span> + ex.getMessage());    &#125; <span class="hljs-keyword">finally</span> &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 同步提交.</span>            consumer.commitSync();        &#125; <span class="hljs-keyword">finally</span> &#123;            consumer.close();        &#125;    &#125;&#125;</code></pre><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考!</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> flink </tag>
            
            <tag> zookeeper </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink的yarn模式</title>
      <link href="2021/01/19/flink-yarn-started/"/>
      <url>2021/01/19/flink-yarn-started/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Flink的yarn模式"><a href="#Flink的yarn模式" class="headerlink" title="Flink的yarn模式"></a>Flink的yarn模式</h3><h4 id="1-前提"><a href="#1-前提" class="headerlink" title="1.前提"></a>1.前提</h4><p>环境准备:</p><ul><li>三个虚拟节点(Host名设定, 免密登录)</li><li>与主机网络互通</li><li>Flink版本:flink-1.10.1-bin-scala_2.12</li><li>Hadoop版本:hadoop-3.2.1</li><li>wordcount的jar包</li><li>flink-shaded-hadoop-2-uber-2.8.3-10.0.jar(路径:/opt/flink/lib)</li></ul><h4 id="2-启动hadoop"><a href="#2-启动hadoop" class="headerlink" title="2.启动hadoop"></a>2.启动hadoop</h4><pre><code class="hljs bash">[root@hdss7-71 hadoop]<span class="hljs-comment"># sbin/start-all.sh </span>Starting namenodes on [hdss7-71]上一次登录：三 1月 20 05:00:03 CST 2021从 10.4.7.1pts/1 上Starting datanodes上一次登录：三 1月 20 05:03:58 CST 2021pts/0 上Starting secondary namenodes [hdss7-72]上一次登录：三 1月 20 05:04:00 CST 2021pts/0 上Starting resourcemanager上一次登录：三 1月 20 05:04:04 CST 2021pts/0 上Starting nodemanagers上一次登录：三 1月 20 05:04:08 CST 2021pts/0 上[root@hdss7-71 hadoop]<span class="hljs-comment"># jps</span>6386 NameNode7240 NodeManager6555 DataNode7676 Jps7054 ResourceManager[root@hdss7-72 ~]<span class="hljs-comment"># jps</span>6552 NodeManager6381 SecondaryNameNode7037 Jps6222 DataNode[root@hdss7-73 ~]<span class="hljs-comment"># jps</span>7088 Jps6132 DataNode6381 NodeManager</code></pre><p>web浏览器访问:</p><p><code>http://hdss7-71:50070/</code></p><img src="/2021/01/19/flink-yarn-started/001.png" alt="hadoop-datanode" style="zoom:50%;"><h4 id="3-Flink的Yarn模式"><a href="#3-Flink的Yarn模式" class="headerlink" title="3.Flink的Yarn模式"></a>3.Flink的Yarn模式</h4><p>Flink 提供了两种在 yarn 上运行的模式，分别为 Session-Cluster 和 Per-Job-Cluster 模式.</p><h5 id="Session-Cluster-模式"><a href="#Session-Cluster-模式" class="headerlink" title="Session-Cluster 模式"></a><strong>Session-Cluster 模式</strong></h5><p>需要先启动集群，然后再提交作业，接着会向 yarn 申请一块空间后，资源永远保持不变。<br>如果资源满了，下一个作业就无法提交，只能等到 yarn 中的其中一个作业执行完成后，释放了资源，下个作业才会正常提交。<br>所有作业共享 Dispatcher 和 ResourceManager,共享资源<br>适合规模小执行时间短的作业。</p><p>在 yarn 中初始化一个 flink 集群，开辟指定的资源，以后提交任务都向这里提 交。这个 flink 集群会常驻在 yarn 集群中，除非手工停止。</p><h6 id="启动yarn-session"><a href="#启动yarn-session" class="headerlink" title="启动yarn-session"></a><strong>启动yarn-session</strong></h6><pre><code class="hljs shell">[root@hdss7-71 flink]# cd /opt/flink[root@hdss7-71 flink]# bin/yarn-session.sh -n 2 -s 2 -jm 1024 -tm 1024 -nm test -d......JobManager Web Interface: http://hdss7-71:40486</code></pre><p>-n(–container):TaskManager 的数量。<br>-s(–slots): 每个 TaskManager 的 slot 数量，默认一个 slot 一个 core，默认每个 taskmanager 的 slot 的个数为 1，有时可以多一些 taskmanager，做冗余。<br>-jm:JobManager 的内存(单位 MB)。<br>-tm:每个 taskmanager 的内存(单位 MB)。 -nm:yarn 的 appName(现在 yarn 的 ui 上的名字)。 -d:后台执行。</p><h6 id="开启sock监听"><a href="#开启sock监听" class="headerlink" title="开启sock监听"></a><strong>开启sock监听</strong></h6><pre><code class="hljs bash">[root@hdss7-71 ~]<span class="hljs-comment"># nc -lk 7777</span></code></pre><h6 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a><strong>执行任务</strong></h6><pre><code class="hljs bash">[root@hdss7-71 flink]<span class="hljs-comment"># bin/flink run -c com.lc.wc.StreamWordCount -p 3 /opt/src/lc-flink-started-1.0-SNAPSHOT.jar --host localhost --port 7777</span>......2021-01-20 05:18:29,533 INFO  org.apache.flink.yarn.YarnClusterDescriptor                   - Found Web Interface hdss7-71:40486 of application <span class="hljs-string">&#x27;application_1611090252419_0001&#x27;</span>.Job has been submitted with JobID 551da29180b940b1e8f633bd5979f04b</code></pre><h6 id="查看任务状态"><a href="#查看任务状态" class="headerlink" title="查看任务状态"></a><strong>查看任务状态</strong></h6><p><code>http://hdss7-71:8088/</code></p><img src="/2021/01/19/flink-yarn-started/002.png" alt="yarn-web-ui" style="zoom:50%;"><p>在sock端输入文字”Hello Flink”</p><pre><code class="hljs bash">[root@hdss7-71 ~]<span class="hljs-comment"># nc -lk 7777</span>Hello FlinkHello SparkHello Flink</code></pre><h6 id="查看统计结果"><a href="#查看统计结果" class="headerlink" title="查看统计结果"></a>查看统计结果</h6><p>在Flink的Task中的输出中可以看到字符统计结果</p><img src="/2021/01/19/flink-yarn-started/003.png" alt="flink-stdout" style="zoom:50%;"><p>在另一个任务的输出中可以看到其余的统计结果</p><img src="/2021/01/19/flink-yarn-started/004.png" alt="task-stdout" style="zoom:50%;"><h6 id="取消yarn-session"><a href="#取消yarn-session" class="headerlink" title="取消yarn-session"></a><strong>取消yarn-session</strong></h6><pre><code class="hljs bash">[root@hdss7-71 ~]<span class="hljs-comment"># cd /opt/hadoop</span>[root@hdss7-71 hadoop]<span class="hljs-comment"># ls</span>bin  etc  include  lib  libexec  LICENSE.txt  logs  NOTICE.txt  README.txt  sbin  share[root@hdss7-71 hadoop]<span class="hljs-comment"># bin/yarn application --kill application_1611090252419_0001</span>2021-01-20 05:31:02,359 INFO client.RMProxy: Connecting to ResourceManager at /0.0.0.0:8032Killing application application_1611090252419_00012021-01-20 05:31:03,003 INFO impl.YarnClientImpl: Killed application application_1611090252419_0001</code></pre><h5 id="Per-Job-Cluster模式"><a href="#Per-Job-Cluster模式" class="headerlink" title="Per Job Cluster模式"></a><strong>Per Job Cluster</strong>模式</h5><p>一个 Job 会对应一个集群，每提交一个作业会根据自身的情况，都会单独向 yarn 申请资源，直到作业执行完成.<br>一个作业的失败与否并不会影响下一个作业的正常 提交和运行。<br>独享 Dispatcher 和 ResourceManager，按需接受资源申请;适合规模大长时间运行的作业。</p><p>每次提交都会创建一个新的 flink 集群，任务之间互相独立，互不影响，方便管理。<br>任务执行完成之后创建的集群也会消失。</p><pre><code class="hljs bash">[root@hdss7-71 hadoop]<span class="hljs-comment"># cd /opt/flink</span>[root@hdss7-71 flink]<span class="hljs-comment"># bin/flink run –m yarn-cluster -c com.lc.wc.StreamWordCount /opt/src/lc-flink-started-1.0-SNAPSHOT.jar --host lcoalhost –port 7777</span></code></pre><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考!</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> yarn </tag>
            
            <tag> Flink </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink的Standalone模式安装</title>
      <link href="2021/01/17/Flink-standalone-started/"/>
      <url>2021/01/17/Flink-standalone-started/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Flink的Standalone模式安装"><a href="#Flink的Standalone模式安装" class="headerlink" title="Flink的Standalone模式安装"></a>Flink的Standalone模式安装</h3><h4 id="1-前提"><a href="#1-前提" class="headerlink" title="1.前提"></a>1.前提</h4><p>环境准备:</p><ul><li>三个虚拟节点(Host名设定, 免密登录)</li><li>与主机网络互通</li><li>Flink版本:flink-1.10.1-bin-scala_2.12</li></ul><h4 id="2-Flink安装"><a href="#2-Flink安装" class="headerlink" title="2.Flink安装"></a>2.Flink安装</h4><p>解压文件:</p><pre><code class="hljs bash">[root@hdss7-71 src]<span class="hljs-comment"># tar -zxvf flink-1.10.1-bin-scala_2.12.tgz -C /opt/</span>[root@hdss7-71 src]<span class="hljs-comment"># cd /opt/</span>[root@hdss7-71 opt]<span class="hljs-comment"># ln -s /opt/flink-1.10.1/ /opt/flink</span>[root@hdss7-71 opt]<span class="hljs-comment"># ll</span>lrwxrwxrwx  1 root root   18 1月  17 23:44 flink -&gt; /opt/flink-1.10.1/drwxr-xr-x 10 root root  156 5月   7 2020 flink-1.10.1</code></pre><p>修改Flink配置文件:</p><pre><code class="hljs bash">[root@hdss7-71 ~]<span class="hljs-comment"># vi /opt/flink/conf/flink-conf.yaml</span><span class="hljs-comment"># jobmanager.rpc.address: localhost</span>jobmanager.rpc.address: hdss7-71</code></pre><p>修改slaves文件:</p><pre><code class="hljs bash">[root@hdss7-71 ~]<span class="hljs-comment"># vi /opt/flink/conf/slaves</span><span class="hljs-comment"># localhost</span>hdss7-72hdss7-73</code></pre><p>分发Flink文件夹到另外两个节点:</p><pre><code class="hljs bash">[root@hdss7-71 opt]<span class="hljs-comment"># rsync -av /opt/flink-1.10.1/ hdss7-72:/opt/flink-1.10.1/</span>[root@hdss7-71 opt]<span class="hljs-comment"># rsync -av /opt/flink-1.10.1/ hdss7-73:/opt/flink-1.10.1/</span><span class="hljs-comment"># 建立软链接.</span>[root@hdss7-72 opt]<span class="hljs-comment"># ln -s /opt/flink-1.10.1/ /opt/flink</span>[root@hdss7-73 opt]<span class="hljs-comment"># ln -s /opt/flink-1.10.1/ /opt/flink</span></code></pre><h4 id="3-启动Flink"><a href="#3-启动Flink" class="headerlink" title="3.启动Flink"></a>3.启动Flink</h4><pre><code class="hljs bash">[root@hdss7-71 opt]<span class="hljs-comment"># cd flink</span>[root@hdss7-71 flink]<span class="hljs-comment"># bin/start-cluster.sh </span>Starting cluster.Starting standalonesession daemon on host hdss7-71.host.com.Starting taskexecutor daemon on host hdss7-72.host.com.Starting taskexecutor daemon on host hdss7-73.host.com.</code></pre><p>主机浏览器访问</p><pre><code class="hljs bash"><span class="hljs-comment"># 设置host名.</span>% sudo vi /etc/hosts<span class="hljs-comment"># flink.</span>10.4.7.71   hdss7-71 hdss7-71.host.com10.4.7.72   hdss7-72 hdss7-72.host.com10.4.7.73   hdss7-73 hdss7-73.host.com</code></pre><img src="/2021/01/17/Flink-standalone-started/001.png" alt="Flink-web-UI" style="zoom:50%;"><h4 id="4-提交应用"><a href="#4-提交应用" class="headerlink" title="4.提交应用"></a>4.提交应用</h4><p>Flink的java版本的流处理字符统计程序:</p><p>pom.xml</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lc-flink-started<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">flink.version</span>&gt;</span>1.10.1<span class="hljs-tag">&lt;/<span class="hljs-name">flink.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--flink-java config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--flink streaming java config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.flink<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>flink-streaming-java_2.12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;flink.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>java程序:</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.wc;<span class="hljs-keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;<span class="hljs-keyword">import</span> org.apache.flink.api.java.utils.ParameterTool;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 流处理字符统计.</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2021/1/17</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StreamWordCount</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 创建流处理执行环境.</span>        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();        <span class="hljs-comment">// 设置并行度.</span>        <span class="hljs-comment">// env.setParallelism(4);</span>        <span class="hljs-comment">// 从文件中读取数据. -&gt; 有界流.</span>        <span class="hljs-comment">// String inputPath = &quot;src/main/resources/wordcount.txt&quot;;</span>        <span class="hljs-comment">// DataStream&lt;String&gt; inputDataStream = env.readTextFile(inputPath);</span>        <span class="hljs-comment">// 用Parameter Tool来提取host和端口.</span>        <span class="hljs-comment">// 在启动参数中设置: --host localhost --port 7777.</span>        ParameterTool parameterTool = ParameterTool.fromArgs(args);        String host = parameterTool.get(<span class="hljs-string">&quot;host&quot;</span>);        <span class="hljs-keyword">int</span> port = parameterTool.getInt(<span class="hljs-string">&quot;port&quot;</span>);        <span class="hljs-comment">// 从socket文本流读取数据. -&gt; 无界流.</span>        <span class="hljs-comment">// % nc -lk 7777</span>        <span class="hljs-comment">// DataStream&lt;String&gt; inputDataStream = env.socketTextStream(&quot;localhost&quot;, 7777);</span>        DataStream&lt;String&gt; inputDataStream = env.socketTextStream(host, port);        <span class="hljs-comment">// 基于数据流进行转换计算.</span>        DataStream&lt;Tuple2&lt;String, Integer&gt;&gt; resultStream = inputDataStream.flatMap(<span class="hljs-keyword">new</span> WordCount.MyFlatMapper())                .keyBy(<span class="hljs-number">0</span>)                .sum(<span class="hljs-number">1</span>);        <span class="hljs-comment">// 此操作并没有执行任务.</span>        resultStream.print();        <span class="hljs-comment">// 执行任务.</span>        env.execute();    &#125;&#125;</code></pre><p>将程序打包成jar包:lc-flink-started-1.0-SNAPSHOT.jar</p><p>提交应用:</p><pre><code class="hljs bash"><span class="hljs-comment"># 启动入口类.</span>com.lc.wc.StreamWordCount<span class="hljs-comment"># 程序参数:host与端口.</span><span class="hljs-comment"># --host localhost --port 7777</span>--host hdss7-71 --port 7777</code></pre><p>页面提交:</p><img src="/2021/01/17/Flink-standalone-started/002.png" alt="submit-job" style="zoom:50%;"><p>在hdss7-71上设置socket端口监听:</p><pre><code class="hljs bash">[root@hdss7-71 ~]<span class="hljs-comment"># nc -lk 7777</span>Hello FlinkHello Spark</code></pre><p>在TaskManagers中查看log:</p><img src="/2021/01/17/Flink-standalone-started/003.png" alt="Task-log" style="zoom:50%;"><h4 id="5-命令行提交应用"><a href="#5-命令行提交应用" class="headerlink" title="5.命令行提交应用"></a>5.命令行提交应用</h4><pre><code class="hljs bash">[root@hdss7-71 flink]<span class="hljs-comment"># bin/flink run -c com.lc.wc.StreamWordCount -p 3 /opt/src/lc-flink-started-1.0-SNAPSHOT.jar --host hdss7-71 --port 7777</span>Job has been submitted with JobID 1525ec6847925c666bd4a816e521889d</code></pre><p>命令行查看job</p><pre><code class="hljs bash">[root@hdss7-71 ~]<span class="hljs-comment"># cd /opt/flink</span><span class="hljs-comment"># 查看job列表.</span>[root@hdss7-71 flink]<span class="hljs-comment"># bin/flink list</span>Waiting <span class="hljs-keyword">for</span> response...------------------ Running/Restarting Jobs -------------------18.01.2021 00:08:45 : ff65da7c60adf119abac48b9c6e276cf : Flink Streaming Job (RUNNING)18.01.2021 00:33:55 : 1525ec6847925c666bd4a816e521889d : Flink Streaming Job (RUNNING)--------------------------------------------------------------No scheduled <span class="hljs-built_in">jobs</span>.<span class="hljs-comment"># 停止job.</span>[root@hdss7-71 flink]<span class="hljs-comment"># bin/flink cancel ff65da7c60adf119abac48b9c6e276cf</span>Cancelling job ff65da7c60adf119abac48b9c6e276cf.Cancelled job ff65da7c60adf119abac48b9c6e276cf.[root@hdss7-71 flink]<span class="hljs-comment"># bin/flink list</span>Waiting <span class="hljs-keyword">for</span> response...------------------ Running/Restarting Jobs -------------------18.01.2021 00:33:55 : 1525ec6847925c666bd4a816e521889d : Flink Streaming Job (RUNNING)--------------------------------------------------------------No scheduled <span class="hljs-built_in">jobs</span>.</code></pre><p>在hdss7-71上节点上输入:</p><pre><code class="hljs bash">[root@hdss7-71 ~]<span class="hljs-comment"># nc -lk 7777</span>Hello Flink<span class="hljs-comment"># web-ui中log结果:</span>(Hello,1)(Flink,1)</code></pre><h4 id="6-停止Flink"><a href="#6-停止Flink" class="headerlink" title="6.停止Flink"></a>6.停止Flink</h4><pre><code class="hljs bash">[root@hdss7-71 flink]<span class="hljs-comment"># bin/stop-cluster.sh </span>Stopping taskexecutor daemon (pid: 12045) on host hdss7-72.host.com.Stopping taskexecutor daemon (pid: 11921) on host hdss7-73.host.com.Stopping standalonesession daemon (pid: 12230) on host hdss7-71.host.com.</code></pre><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考!</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Flink </tag>
            
            <tag> linux </tag>
            
            <tag> rsync </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark的yarn模式</title>
      <link href="2021/01/08/spark-yarn-start/"/>
      <url>2021/01/08/spark-yarn-start/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Spark的yarn模式"><a href="#Spark的yarn模式" class="headerlink" title="Spark的yarn模式"></a>Spark的yarn模式</h3><h4 id="1-前提"><a href="#1-前提" class="headerlink" title="1.前提"></a>1.前提</h4><p>Spark主要是计算框架,而不是资源调度框架.<br>在Yarn环境下Spark的如何工作的(Yarn使用非常多), 需要的环境如下:</p><ul><li>三个虚拟节点(免密登录)</li><li>hadoop-3.2.1</li><li>zookeeper-3.4.14</li></ul><h4 id="2-安装Spark"><a href="#2-安装Spark" class="headerlink" title="2.安装Spark"></a>2.安装Spark</h4><pre><code class="hljs bash">[root@hdss7-61 src]<span class="hljs-comment"># mkdir /opt/spark-yarn</span>[root@hdss7-61 src]<span class="hljs-comment"># tar -zxvf spark-3.0.0-bin-hadoop3.2.tgz -C /opt/spark-yarn/</span>[root@hdss7-61 spark-yarn]<span class="hljs-comment"># ln -s /opt/spark-yarn/spark-3.0.0-bin-hadoop3.2/ /opt/spark-yarn/spark</span></code></pre><p>修改yarn-site.xml文件:</p><p><code>vi /opt/hadoop/etc/hadoop/yarn-site.xml</code></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!-- Site specific YARN configuration properties --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.application.classpath<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>            /opt/hadoop/etc/hadoop,            /opt/hadoop/share/hadoop/common/*,            /opt/hadoop/share/hadoop/common/lib/*,            /opt/hadoop/share/hadoop/hdfs/*,            /opt/hadoop/share/hadoop/hdfs/lib/*,            /opt/hadoop/share/hadoop/mapreduce/*,            /opt/hadoop/share/hadoop/mapreduce/lib/*,            /opt/hadoop/share/hadoop/yarn/*,            /opt/hadoop/share/hadoop/yarn/lib/*        <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>配置spark文件:</p><pre><code class="hljs sh">$ vi /opt/spark-yarn/spark/conf/$ cp spark-env.sh.template spark-env.sh$ vi spark-env.sh<span class="hljs-comment"># 在文件末尾添加.</span><span class="hljs-built_in">export</span> SPARK_DAEMON_JAVA_OPTS=<span class="hljs-string">&quot;-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=hdss7-61:2181,hdss7-62:2181,hdss7-63:2181 -Dspark.deploy.zookeeper.dir=/spark&quot;</span><span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/soft/jdk1.8.0_221SPARK_CONF_DIR=/opt/hadoop/etc/hadoop[root@hdss7-61 conf]<span class="hljs-comment"># cp slaves.template slaves</span>[root@hdss7-61 conf]<span class="hljs-comment"># vi slaves</span><span class="hljs-comment"># localhost</span>hdss7-61hdss7-62hdss7-63</code></pre><p>分发文件到名节点:</p><pre><code class="hljs bash">[root@hdss7-61 opt]<span class="hljs-comment"># rsync -av /opt/spark-yarn/ hdss7-62:/opt/spark-yarn/</span>[root@hdss7-61 opt]<span class="hljs-comment"># rsync -av /opt/spark-yarn/ hdss7-63:/opt/spark-yarn/</span>[root@hdss7-61 opt]<span class="hljs-comment"># rsync -av /opt/hadoop/etc/hadoop/ hdss7-62:/opt/hadoop/etc/hadoop/</span>[root@hdss7-61 opt]<span class="hljs-comment"># rsync -av /opt/hadoop/etc/hadoop/ hdss7-63:/opt/hadoop/etc/hadoop/</span></code></pre><h4 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h4><p>hdfs与spark的yarn:</p><pre><code class="hljs bash"><span class="hljs-comment"># 启动hadoop.</span>[root@hdss7-63 opt]<span class="hljs-comment"># cd /opt/hadoop</span>[root@hdss7-63 hadoop]<span class="hljs-comment"># sbin/start-yarn.sh</span>[root@hdss7-63 hadoop]<span class="hljs-comment"># sbin/start-dfs.sh</span><span class="hljs-comment"># 启动zookeeper.</span>[root@hdss7-63 zookeeper]<span class="hljs-comment"># bin/zkServer.sh start</span></code></pre><h4 id="4-提交应用"><a href="#4-提交应用" class="headerlink" title="4.提交应用"></a>4.提交应用</h4><pre><code class="hljs bash">[root@hdss7-63 opt]<span class="hljs-comment"># cd /opt/spark-yarn/spark</span>[root@hdss7-63 spark]<span class="hljs-comment"># </span>bin/spark-submit \--class org.apache.spark.examples.SparkPi \--master yarn \./examples/jars/spark-examples_2.12-3.0.0.jar \10......2021-01-09 04:17:47,718 INFO yarn.Client:          client token: N/A         diagnostics: AM container is launched, waiting <span class="hljs-keyword">for</span> AM container to Register with RM         ApplicationMaster host: N/A         ApplicationMaster RPC port: -1         queue: default         start time: 1610137066438         final status: UNDEFINED         tracking URL: http://hdss7-63:8088/proxy/application_1610136712974_0002/         user: root......</code></pre><p>访问网址:</p><pre><code class="hljs bash">http://10.4.7.63:8088/</code></pre><p><img src="/2021/01/08/spark-yarn-start/001.png" alt="hadoop"></p><h4 id="5-配置历史服务器"><a href="#5-配置历史服务器" class="headerlink" title="5.配置历史服务器"></a>5.配置历史服务器</h4><pre><code class="hljs sh">[root@hdss7-63 conf]<span class="hljs-comment"># cd /opt/spark-yarn/spark/conf</span>[root@hdss7-63 conf]<span class="hljs-comment"># vi spark-env.sh</span><span class="hljs-built_in">export</span> SPARK_HISTORY_OPTS=<span class="hljs-string">&quot;-Dspark.history.ui.port=18080 -Dspark.history.fs.logDirectory=hdfs://hdss7-61:9000/directory -Dspark.history.retainedApplications=30&quot;</span><span class="hljs-built_in">export</span> SPARK_DAEMON_JAVA_OPTS=<span class="hljs-string">&quot;-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=hdss7-61:2181,hdss7-62:2181,hdss7-63:2181 -Dspark.deploy.zookeeper.dir=/spark&quot;</span><span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/soft/jdk1.8.0_221SPARK_CONF_DIR=/opt/hadoop/etc/hadoop[root@hdss7-63 conf]<span class="hljs-comment"># vi spark-env.sh</span>spark.yarn.historyServer.address=hdss7-61:18080spark.history.ui.port=18080spark.eventLog.enabled           <span class="hljs-literal">true</span>spark.eventLog.dir               hdfs://hdss7-61:9000/directory[root@hdss7-63 conf]<span class="hljs-comment"># rsync -av /opt/spark-yarn/spark/conf/ hdss7-61:/opt/spark-yarn/spark/conf/</span>[root@hdss7-63 conf]<span class="hljs-comment"># rsync -av /opt/spark-yarn/spark/conf/ hdss7-62:/opt/spark-yarn/spark/conf/</span></code></pre><p>启动历史服务</p><pre><code class="hljs bash">[root@hdss7-63 spark]<span class="hljs-comment"># sbin/start-history-server.sh </span>starting org.apache.spark.deploy.history.HistoryServer, logging to /opt/spark-yarn/spark/logs/spark-root-org.apache.spark.deploy.history.HistoryServer-1-hdss7-63.host.com.out</code></pre><p>提交应用</p><pre><code class="hljs less"># 以客户端的方式来提交,会打印出<span class="hljs-selector-tag">PI</span>结果.<span class="hljs-selector-attr">[root@hdss7-63 spark]</span># <span class="hljs-selector-tag">bin</span>/<span class="hljs-selector-tag">spark-submit</span> \<span class="hljs-selector-tag">--class</span> <span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.spark</span><span class="hljs-selector-class">.examples</span><span class="hljs-selector-class">.SparkPi</span> \<span class="hljs-selector-tag">--master</span> <span class="hljs-selector-tag">yarn</span> \<span class="hljs-selector-tag">--deploy-mode</span> <span class="hljs-selector-tag">client</span> \./<span class="hljs-selector-tag">examples</span>/<span class="hljs-selector-tag">jars</span>/<span class="hljs-selector-tag">spark-examples_2</span><span class="hljs-selector-class">.12-3</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.jar</span> \<span class="hljs-selector-tag">10</span>......<span class="hljs-selector-tag">2021-01-09</span> <span class="hljs-selector-tag">04</span><span class="hljs-selector-pseudo">:45</span><span class="hljs-selector-pseudo">:50</span>,<span class="hljs-selector-tag">783</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">scheduler</span><span class="hljs-selector-class">.DAGScheduler</span>: <span class="hljs-selector-tag">Job</span> <span class="hljs-selector-tag">0</span> <span class="hljs-selector-tag">is</span> <span class="hljs-selector-tag">finished</span>. <span class="hljs-selector-tag">Cancelling</span> <span class="hljs-selector-tag">potential</span> <span class="hljs-selector-tag">speculative</span> <span class="hljs-selector-tag">or</span> <span class="hljs-selector-tag">zombie</span> <span class="hljs-selector-tag">tasks</span> <span class="hljs-selector-tag">for</span> <span class="hljs-selector-tag">this</span> <span class="hljs-selector-tag">job</span><span class="hljs-selector-tag">2021-01-09</span> <span class="hljs-selector-tag">04</span><span class="hljs-selector-pseudo">:45</span><span class="hljs-selector-pseudo">:50</span>,<span class="hljs-selector-tag">792</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">cluster</span><span class="hljs-selector-class">.YarnScheduler</span>: <span class="hljs-selector-tag">Killing</span> <span class="hljs-keyword">all</span> <span class="hljs-selector-tag">running</span> <span class="hljs-selector-tag">tasks</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">stage</span> <span class="hljs-selector-tag">0</span>: <span class="hljs-selector-tag">Stage</span> <span class="hljs-selector-tag">finished</span><span class="hljs-selector-tag">2021-01-09</span> <span class="hljs-selector-tag">04</span><span class="hljs-selector-pseudo">:45</span><span class="hljs-selector-pseudo">:50</span>,<span class="hljs-selector-tag">795</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">scheduler</span><span class="hljs-selector-class">.DAGScheduler</span>: <span class="hljs-selector-tag">Job</span> <span class="hljs-selector-tag">0</span> <span class="hljs-selector-tag">finished</span>: <span class="hljs-selector-tag">reduce</span> <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">SparkPi</span><span class="hljs-selector-class">.scala</span><span class="hljs-selector-pseudo">:38</span>, <span class="hljs-selector-tag">took</span> <span class="hljs-selector-tag">2</span><span class="hljs-selector-class">.217045</span> <span class="hljs-selector-tag">s</span><span class="hljs-selector-tag">Pi</span> <span class="hljs-selector-tag">is</span> <span class="hljs-selector-tag">roughly</span> <span class="hljs-selector-tag">3</span><span class="hljs-selector-class">.1424191424191426</span><span class="hljs-selector-tag">2021-01-09</span> <span class="hljs-selector-tag">04</span><span class="hljs-selector-pseudo">:45</span><span class="hljs-selector-pseudo">:50</span>,<span class="hljs-selector-tag">857</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">server</span><span class="hljs-selector-class">.AbstractConnector</span>: <span class="hljs-selector-tag">Stopped</span> <span class="hljs-selector-tag">Spark</span>@<span class="hljs-selector-tag">615f972</span>&#123;<span class="hljs-selector-tag">HTTP</span>/<span class="hljs-selector-tag">1</span><span class="hljs-selector-class">.1</span>,<span class="hljs-selector-attr">[http/1.1]</span>&#125;&#123;<span class="hljs-selector-tag">0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-pseudo">:4040</span>&#125;<span class="hljs-selector-tag">2021-01-09</span> <span class="hljs-selector-tag">04</span><span class="hljs-selector-pseudo">:45</span><span class="hljs-selector-pseudo">:50</span>,<span class="hljs-selector-tag">869</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">ui</span><span class="hljs-selector-class">.SparkUI</span>: <span class="hljs-selector-tag">Stopped</span> <span class="hljs-selector-tag">Spark</span> <span class="hljs-selector-tag">web</span> <span class="hljs-selector-tag">UI</span> <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//hdss7-63:4040</span>......</code></pre><p>访问网址</p><p><code>http://10.4.7.63:8088/</code></p><p><img src="/2021/01/08/spark-yarn-start/002.png" alt="spark-history" style="zoom:50%;"></p><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark高可用配置</title>
      <link href="2021/01/07/spark-high-availability/"/>
      <url>2021/01/07/spark-high-availability/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Spark高可用配置"><a href="#Spark高可用配置" class="headerlink" title="Spark高可用配置"></a>Spark高可用配置</h3><h4 id="1-前提"><a href="#1-前提" class="headerlink" title="1.前提"></a>1.前提</h4><p>准备环境</p><ul><li>三个节点虚拟机(免密登录)</li><li>安装hadoop-3.2.1</li><li>安装spark-3.0.0</li><li>安装zookeeper-3.4.14</li></ul><h4 id="2-集群规划"><a href="#2-集群规划" class="headerlink" title="2.集群规划"></a>2.集群规划</h4><img src="/2021/01/07/spark-high-availability/001.png" alt="spark-ha" style="zoom:50%;"><h4 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h4><pre><code class="hljs sh">$ vi /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/conf/spark-env.sh<span class="hljs-built_in">export</span> SPARK_HISTORY_OPTS=<span class="hljs-string">&quot;-Dspark.history.ui.port=18080 -Dspark.history.fs.logDirectory=hdfs://hdss7-61:9000/directory -Dspark.history.retainedApplications=30&quot;</span><span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/soft/jdk1.8.0_221<span class="hljs-comment"># SPARK_MASTER_HOST=hdss7-61</span><span class="hljs-comment"># SPARK_MASTER_PORT=7077</span>SPARK_MASTER_WEBUI_PORT=8989<span class="hljs-built_in">export</span> SPARK_DAEMON_JAVA_OPTS=<span class="hljs-string">&quot;-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=hdss7-61:2181,hdss7-62:2181,hdss7-63:2181 -Dspark.deploy.zookeeper.dir=/spark&quot;</span><span class="hljs-comment"># 分发文件到hdss7-62和hdss7-63节点上.</span>$ rsync -av /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/conf hdss7-62:/opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/$ rsync -av /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/conf hdss7-63:/opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/</code></pre><h4 id="4-启动spark"><a href="#4-启动spark" class="headerlink" title="4.启动spark"></a>4.启动spark</h4><pre><code class="hljs bash">[root@hdss7-61 conf]<span class="hljs-comment"># cd /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/</span>[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># sbin/start-all.sh </span>starting org.apache.spark.deploy.master.Master, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.master.Master-1-hdss7-61.host.com.outhdss7-62: starting org.apache.spark.deploy.worker.Worker, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.worker.Worker-1-hdss7-62.host.com.outhdss7-63: starting org.apache.spark.deploy.worker.Worker, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.worker.Worker-1-hdss7-63.host.com.outhdss7-61: starting org.apache.spark.deploy.worker.Worker, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.worker.Worker-1-hdss7-61.host.com.out[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># </span>[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># sbin/start-history-server.sh </span>starting org.apache.spark.deploy.history.HistoryServer, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.history.HistoryServer-1-hdss7-61.host.com.out[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># </span></code></pre><img src="/2021/01/07/spark-high-availability/002.png" alt="spark-master" style="zoom:50%;"><p>启动备用节点上的master:</p><pre><code class="hljs bash">[root@hdss7-62 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># sbin/start-master.sh </span>starting org.apache.spark.deploy.master.Master, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.master.Master-1-hdss7-62.host.com.out</code></pre><p><img src="/2021/01/07/spark-high-availability/003.png" alt="spark-standby"></p><h4 id="5-提交应用"><a href="#5-提交应用" class="headerlink" title="5.提交应用"></a>5.提交应用</h4><pre><code class="hljs less"><span class="hljs-selector-attr">[root@hdss7-62 spark-3.0.0-bin-hadoop3.2]</span># <span class="hljs-selector-tag">bin</span>/<span class="hljs-selector-tag">spark-submit</span> \<span class="hljs-selector-tag">--class</span> <span class="hljs-selector-tag">org</span><span class="hljs-selector-class">.apache</span><span class="hljs-selector-class">.spark</span><span class="hljs-selector-class">.examples</span><span class="hljs-selector-class">.SparkPi</span> \<span class="hljs-selector-tag">--master</span> <span class="hljs-selector-tag">spark</span>:<span class="hljs-comment">//hdss7-61:7077,hdss7-62:7077 \</span>./<span class="hljs-selector-tag">examples</span>/<span class="hljs-selector-tag">jars</span>/<span class="hljs-selector-tag">spark-examples_2</span><span class="hljs-selector-class">.12-3</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.jar</span> \<span class="hljs-selector-tag">10</span>......<span class="hljs-selector-tag">2021-01-08</span> <span class="hljs-selector-tag">05</span><span class="hljs-selector-pseudo">:16</span><span class="hljs-selector-pseudo">:22</span>,<span class="hljs-selector-tag">025</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">scheduler</span><span class="hljs-selector-class">.DAGScheduler</span>: <span class="hljs-selector-tag">ResultStage</span> <span class="hljs-selector-tag">0</span> (reduce at SparkPi.<span class="hljs-attribute">scala</span>:<span class="hljs-number">38</span>) <span class="hljs-selector-tag">finished</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">2</span><span class="hljs-selector-class">.068</span> <span class="hljs-selector-tag">s</span><span class="hljs-selector-tag">2021-01-08</span> <span class="hljs-selector-tag">05</span><span class="hljs-selector-pseudo">:16</span><span class="hljs-selector-pseudo">:22</span>,<span class="hljs-selector-tag">032</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">scheduler</span><span class="hljs-selector-class">.DAGScheduler</span>: <span class="hljs-selector-tag">Job</span> <span class="hljs-selector-tag">0</span> <span class="hljs-selector-tag">is</span> <span class="hljs-selector-tag">finished</span>. <span class="hljs-selector-tag">Cancelling</span> <span class="hljs-selector-tag">potential</span> <span class="hljs-selector-tag">speculative</span> <span class="hljs-selector-tag">or</span> <span class="hljs-selector-tag">zombie</span> <span class="hljs-selector-tag">tasks</span> <span class="hljs-selector-tag">for</span> <span class="hljs-selector-tag">this</span> <span class="hljs-selector-tag">job</span><span class="hljs-selector-tag">2021-01-08</span> <span class="hljs-selector-tag">05</span><span class="hljs-selector-pseudo">:16</span><span class="hljs-selector-pseudo">:22</span>,<span class="hljs-selector-tag">034</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">scheduler</span><span class="hljs-selector-class">.TaskSchedulerImpl</span>: <span class="hljs-selector-tag">Killing</span> <span class="hljs-keyword">all</span> <span class="hljs-selector-tag">running</span> <span class="hljs-selector-tag">tasks</span> <span class="hljs-selector-tag">in</span> <span class="hljs-selector-tag">stage</span> <span class="hljs-selector-tag">0</span>: <span class="hljs-selector-tag">Stage</span> <span class="hljs-selector-tag">finished</span><span class="hljs-selector-tag">2021-01-08</span> <span class="hljs-selector-tag">05</span><span class="hljs-selector-pseudo">:16</span><span class="hljs-selector-pseudo">:22</span>,<span class="hljs-selector-tag">054</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">scheduler</span><span class="hljs-selector-class">.DAGScheduler</span>: <span class="hljs-selector-tag">Job</span> <span class="hljs-selector-tag">0</span> <span class="hljs-selector-tag">finished</span>: <span class="hljs-selector-tag">reduce</span> <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">SparkPi</span><span class="hljs-selector-class">.scala</span><span class="hljs-selector-pseudo">:38</span>, <span class="hljs-selector-tag">took</span> <span class="hljs-selector-tag">2</span><span class="hljs-selector-class">.306221</span> <span class="hljs-selector-tag">s</span><span class="hljs-selector-tag">Pi</span> <span class="hljs-selector-tag">is</span> <span class="hljs-selector-tag">roughly</span> <span class="hljs-selector-tag">3</span><span class="hljs-selector-class">.1417591417591417</span><span class="hljs-selector-tag">2021-01-08</span> <span class="hljs-selector-tag">05</span><span class="hljs-selector-pseudo">:16</span><span class="hljs-selector-pseudo">:22</span>,<span class="hljs-selector-tag">094</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">server</span><span class="hljs-selector-class">.AbstractConnector</span>: <span class="hljs-selector-tag">Stopped</span> <span class="hljs-selector-tag">Spark</span>@<span class="hljs-selector-tag">62f87c44</span>&#123;<span class="hljs-selector-tag">HTTP</span>/<span class="hljs-selector-tag">1</span><span class="hljs-selector-class">.1</span>,<span class="hljs-selector-attr">[http/1.1]</span>&#125;&#123;<span class="hljs-selector-tag">0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-pseudo">:4040</span>&#125;<span class="hljs-selector-tag">2021-01-08</span> <span class="hljs-selector-tag">05</span><span class="hljs-selector-pseudo">:16</span><span class="hljs-selector-pseudo">:22</span>,<span class="hljs-selector-tag">110</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">ui</span><span class="hljs-selector-class">.SparkUI</span>: <span class="hljs-selector-tag">Stopped</span> <span class="hljs-selector-tag">Spark</span> <span class="hljs-selector-tag">web</span> <span class="hljs-selector-tag">UI</span> <span class="hljs-selector-tag">at</span> <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//hdss7-62:4040</span><span class="hljs-selector-tag">2021-01-08</span> <span class="hljs-selector-tag">05</span><span class="hljs-selector-pseudo">:16</span><span class="hljs-selector-pseudo">:22</span>,<span class="hljs-selector-tag">130</span> <span class="hljs-selector-tag">INFO</span> <span class="hljs-selector-tag">cluster</span><span class="hljs-selector-class">.StandaloneSchedulerBackend</span>: <span class="hljs-selector-tag">Shutting</span> <span class="hljs-selector-tag">down</span> <span class="hljs-keyword">all</span> <span class="hljs-selector-tag">executors</span>......</code></pre><h4 id="6-测试高可用"><a href="#6-测试高可用" class="headerlink" title="6.测试高可用"></a>6.测试高可用</h4><p>停止spark的master节点进程</p><pre><code class="hljs bash">[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># jps</span>28369 NameNode28530 DataNode63187 Jps54037 HistoryServer25318 QuorumPeerMain52902 Master53037 Worker[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># kill -9 52902</span></code></pre><p>访问网站</p><p><code>http://10.4.7.61:8989/</code>, 不能访问</p><p><code>http://10.4.7.62:8989/</code>, 还能访问,从STANDBY -&gt; ALIVE状态.</p><img src="/2021/01/07/spark-high-availability/004.png" alt="spark-ha-test" style="zoom:50%;"><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> hadoop </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zookeeper集群配置</title>
      <link href="2021/01/07/zookeeper-started/"/>
      <url>2021/01/07/zookeeper-started/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Zookeeper集群配置"><a href="#Zookeeper集群配置" class="headerlink" title="Zookeeper集群配置"></a>Zookeeper集群配置</h3><h4 id="1-解压文件"><a href="#1-解压文件" class="headerlink" title="1.解压文件"></a>1.解压文件</h4><pre><code class="hljs bash"><span class="hljs-comment"># 解压.</span>$ tar -zxvf /opt/src/zookeeper-3.4.14.tar.gz -C /opt/$ <span class="hljs-built_in">cd</span> /opt/<span class="hljs-comment"># 建立软链接.</span>$ ln -s /opt/zookeeper-3.4.14/ /opt/zookeeper[root@hdss7-61 opt]<span class="hljs-comment"># ll</span>lrwxrwxrwx  1 root root   22 1月   8 04:18 zookeeper -&gt; /opt/zookeeper-3.4.14/drwxr-xr-x 14 2002 2002 4096 3月   7 2019 zookeeper-3.4.14</code></pre><h4 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h4><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /opt/zookeeper/conf/<span class="hljs-comment"># 拷贝文件.</span>$ cp zoo_sample.cfg zoo.cfg<span class="hljs-comment"># 在zoo.cfg末尾添加.</span>$ vi zoo.cfgdataDir=/opt/datas/zookeeper/datadataLogDir=/opt/datas/zookeeper/<span class="hljs-built_in">log</span>clientPort=2181server.1=hdss7-61:2888:3888server.2=hdss7-62:2888:3888server.3=hdss7-63:2888:3888<span class="hljs-comment"># 建立zookeeper数据与日志文件夹.</span>$ mkdir -p /opt/datas/zookeeper/data$ mkdir -p /opt/datas/zookeeper/<span class="hljs-built_in">log</span><span class="hljs-comment"># 添加myid文件，各个节点中的myid　与上述中的server.x　id一致</span>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;1&quot;</span> &gt; /opt/datas/zookeeper/data/myid$ cat /opt/datas/zookeeper/data/myid1</code></pre><h4 id="3-分发文件"><a href="#3-分发文件" class="headerlink" title="3.分发文件"></a>3.分发文件</h4><pre><code class="hljs bash"><span class="hljs-comment"># 拷贝文件夹.</span>$ rsync -av /opt/zookeeper-3.4.14/ hdss7-62:/opt/zookeeper-3.4.14/$ rsync -av /opt/zookeeper-3.4.14/ hdss7-63:/opt/zookeeper-3.4.14/<span class="hljs-comment"># 在hdss7-62和hdss7-63节点上创建文件夹.</span>$ mkdir -p /opt/datas/zookeeper/data$ mkdir -p /opt/datas/zookeeper/<span class="hljs-built_in">log</span><span class="hljs-comment"># 在hdss7-62和hdss7-63节点上修改配置.</span>[root@hdss7-62 conf]<span class="hljs-comment"># echo &quot;2&quot; &gt; /opt/datas/zookeeper/data/myid</span>[root@hdss7-63 opt]<span class="hljs-comment"># echo &quot;3&quot; &gt; /opt/datas/zookeeper/data/myid</span></code></pre><h4 id="4-启动zookeeper"><a href="#4-启动zookeeper" class="headerlink" title="4.启动zookeeper"></a>4.启动zookeeper</h4><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /opt/zookeeper[root@hdss7-61 zookeeper]<span class="hljs-comment"># bin/zkServer.sh start</span>ZooKeeper JMX enabled by defaultUsing config: /opt/zookeeper/bin/../conf/zoo.cfgStarting zookeeper ... STARTED[root@hdss7-61 zookeeper]<span class="hljs-comment"># jps</span>25318 QuorumPeerMain25414 Jps<span class="hljs-comment"># 在hdss7-62和hdss7-63节点上也运行上述命令,启动zookeeper.</span></code></pre><h4 id="5-停止zookeeper"><a href="#5-停止zookeeper" class="headerlink" title="5.停止zookeeper"></a>5.停止zookeeper</h4><pre><code class="hljs bash">[root@hdss7-61 zookeeper]<span class="hljs-comment"># bin/zkServer.sh stop</span>ZooKeeper JMX enabled by defaultUsing config: /opt/zookeeper/bin/../conf/zoo.cfgStopping zookeeper ... STOPPED[root@hdss7-61 zookeeper]<span class="hljs-comment"># jps</span>73850 Jps</code></pre><h4 id="6-问题记录"><a href="#6-问题记录" class="headerlink" title="6.问题记录"></a>6.问题记录</h4><p>启动错误</p><pre><code class="hljs bash">[root@hdss7-71 zookeeper]<span class="hljs-comment"># bin/zkServer.sh status</span>ZooKeeper JMX enabled by defaultUsing config: /opt/zookeeper/bin/../conf/zoo.cfgError contacting service. It is probably not running<span class="hljs-comment"># 日志:</span>[root@hdss7-71 zookeeper]<span class="hljs-comment"># vi zookeeper.out</span>[WorkerSender[myid=1]:QuorumCnxManager@584] - Cannot open channel to 2 at election address hdss7-72/10.4.7.72:3888java.net.ConnectException: 拒绝连接 (Connection refused)......</code></pre><p>1.查看端口是否被占用</p><pre><code class="hljs bash">netstat -tunlp | grep 2181netstat -tunlp | grep 3888</code></pre><p>2.查看<code>conf/zoo.cfg</code>中是否有重复的配置项.</p><pre><code class="hljs bash"><span class="hljs-comment"># 自己新加入的配置项,原文件中是否在重复.</span>vi conf/zoo.cfgdataDir=/opt/datas/zookeeper/datadataLogDir=/opt/datas/zookeeper/<span class="hljs-built_in">log</span>clientPort=2181server.1=hdss7-71:2888:3888server.2=hdss7-72:2888:3888server.3=hdss7-73:2888:3888</code></pre><p>3.server.1与本机节点myid是否匹配.</p><pre><code class="hljs bash">[root@hdss7-71 zookeeper]<span class="hljs-comment"># cat /opt/datas/zookeeper/data/myid </span>1</code></pre><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> centos </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop-3.2.1安装</title>
      <link href="2021/01/05/hadoop-3-2-1-start/"/>
      <url>2021/01/05/hadoop-3-2-1-start/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Hadoop-3-2-1安装"><a href="#Hadoop-3-2-1安装" class="headerlink" title="Hadoop-3.2.1安装"></a>Hadoop-3.2.1安装</h3><h4 id="1-前提"><a href="#1-前提" class="headerlink" title="1.前提"></a>1.前提</h4><p>配置前提</p><ul><li>centos7三个虚拟节点</li><li>主机名配置(/etc/hosts)</li><li>节点间免密登录</li><li>jdk环境配置</li></ul><pre><code class="hljs bash">$ vi /etc/hosts10.4.7.61 hdss7-61 hdss7-61.host.com10.4.7.62 hdss7-62 hdss7-62.host.com10.4.7.63 hdss7-63 hdss7-63.host.com<span class="hljs-comment"># 节点间免密登录.</span>$ <span class="hljs-built_in">cd</span> ~/.ssh/ssh-keygenssh-copy-id hdss7-61ssh-copy-id hdss7-62ssh-copy-id hdss7-63<span class="hljs-comment"># jdk环境配置.</span>$ /etc/profile.d/java.sh<span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/soft/jdk1.8.0_221<span class="hljs-built_in">export</span> CLASSPATH=.:<span class="hljs-variable">$JAVA_HOME</span>/lib/dt.jar:<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar</code></pre><h4 id="2-hadoop安装"><a href="#2-hadoop安装" class="headerlink" title="2.hadoop安装"></a>2.hadoop安装</h4><p>国内镜像节点:</p><pre><code class="hljs bash">https://mirror.bit.edu.cn/apache/hadoop/common/</code></pre><p>此处选择hadoop-3.2.1版本.</p><pre><code class="hljs bash">tar -zxvf hadoop-3.2.1.tar.gz -C /opt/hadoop-3.2.1<span class="hljs-comment"># 创建软链接.</span>ln -s /opt/hadoop-3.2.1/ /opt/hadoop[root@hdss7-61 opt]<span class="hljs-comment"># ll</span>总用量 0lrwxrwxrwx  1 root root  18 1月   6 03:03 hadoop -&gt; /opt/hadoop-3.2.1/drwxr-xr-x 10 1001 1001 161 1月   6 03:47 hadoop-3.2.1</code></pre><h4 id="3-环境变量配置"><a href="#3-环境变量配置" class="headerlink" title="3.环境变量配置"></a>3.环境变量配置</h4><pre><code class="hljs bash">vi /etc/profile.d/hadoop.sh<span class="hljs-built_in">export</span> HADOOP_HOME=/opt/hadoop<span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HADOOP_HOME</span>/bin:<span class="hljs-variable">$HADOOP_HOME</span>/sbin<span class="hljs-built_in">export</span> HADOOP_COMMON_HOME=<span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-built_in">export</span> HADOOP_HDFS_HOME=<span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-built_in">export</span> HADOOP_MAPRED_HOME=<span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-built_in">export</span> HADOOP_YARN_HOME=<span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-built_in">export</span> HADOOP_INSTALL=<span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-built_in">export</span> HADOOP_COMMON_LIB_NATIVE_DIR=<span class="hljs-variable">$HADOOP_HOME</span>/lib/native<span class="hljs-built_in">export</span> HADOOP_CONF_DIR=<span class="hljs-variable">$HADOOP_HOME</span><span class="hljs-built_in">export</span> HADOOP_LIBEXEC_DIR=<span class="hljs-variable">$HADOOP_HOME</span>/libexec<span class="hljs-built_in">export</span> JAVA_LIBRARY_PATH=<span class="hljs-variable">$HADOOP_HOME</span>/lib/native:<span class="hljs-variable">$JAVA_LIBRARY_PATH</span><span class="hljs-built_in">export</span> HADOOP_CONF_DIR=<span class="hljs-variable">$HADOOP_HOME</span>/etc/hadoop<span class="hljs-built_in">export</span> HDFS_DATANODE_USER=root<span class="hljs-comment"># 下方注释掉.</span><span class="hljs-comment"># export HDFS_DATANODE_SECURE_USER=root</span><span class="hljs-built_in">export</span> HDFS_SECONDARYNAMENODE_USER=root<span class="hljs-built_in">export</span> HDFS_NAMENODE_USER=root<span class="hljs-built_in">export</span> YARN_RESOURCEMANAGER_USER=root<span class="hljs-built_in">export</span> YARN_NODEMANAGER_USER=root</code></pre><p>使环境变量生效.</p><pre><code class="hljs bash">$ <span class="hljs-built_in">source</span> /etc/profile</code></pre><p>给hadoop建立文件夹</p><pre><code class="hljs bash">$ mkdir -p /opt/datas/hadoop</code></pre><h4 id="4-hadoop文件配置"><a href="#4-hadoop文件配置" class="headerlink" title="4.hadoop文件配置"></a>4.hadoop文件配置</h4><p><strong>修改<code>$HADOOP_HOME/etc/hadoop/core-site.xml</code>,</strong><br>HADOOP_HOME目录为: <code>/opt/hadoop</code></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><span class="hljs-comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.default.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://hdss7-61:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hadoop.tmp.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/datas/hadoop/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p><strong>修改<code>$HADOOP_HOME/etc/hadoop/hdfs-site.xml</code>，</strong><br>配置副本个数以及数据存放的路径</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><span class="hljs-comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.replication<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.name.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/datas/hadoop/hdfs/name<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.data.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/datas/hadoop/hdfs/data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdss7-61:50070<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdss7-62:50090<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.permissions<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>注意: <code>/opt/datas/hadoop</code>已经创建好.</p><p><strong>修改<code>$HADOOP_HOME/etc/hadoop/mapred-site.xml</code></strong><br>配置使用yarn框架执行mapreduce处理程序，与之前版本多了后面两步,<br>不配置mapreduce.application.classpath这个参数mapreduce运行时会报错： Error: Could not find or load main class org.apache.hadoop.mapreduce.v2.app.MRAppMaster</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><span class="hljs-meta">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><span class="hljs-comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.application.classpath<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>            /opt/hadoop/etc/hadoop,            /opt/hadoop/share/hadoop/common/*,            /opt/hadoop/share/hadoop/common/lib/*,            /opt/hadoop/share/hadoop/hdfs/*,            /opt/hadoop/share/hadoop/hdfs/lib/*,            /opt/hadoop/share/hadoop/mapreduce/*,            /opt/hadoop/share/hadoop/mapreduce/lib/*,            /opt/hadoop/share/hadoop/yarn/*,            /opt/hadoop/share/hadoop/yarn/lib/*        <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p><strong>修改<code>$HADOOP_HOME/etc/hadoop/yarn-site.xml</code></strong></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><span class="hljs-comment">&lt;!-- Site specific YARN configuration properties --&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.framework.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>yarn<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>mapreduce.application.classpath<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>            /opt/hadoop/etc/hadoop,            /opt/hadoop/share/hadoop/common/*,            /opt/hadoop/share/hadoop/common/lib/*,            /opt/hadoop/share/hadoop/hdfs/*,            /opt/hadoop/share/hadoop/hdfs/lib/*,            /opt/hadoop/share/hadoop/mapreduce/*,            /opt/hadoop/share/hadoop/mapreduce/lib/*,            /opt/hadoop/share/hadoop/yarn/*,            /opt/hadoop/share/hadoop/yarn/lib/*        <span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>注意:上述中的<code>/opt/hadoop/</code>,是因为加了一个软链接.<br><code>ln -s /opt/hadoop-3.2.1/ /opt/hadoop</code></p><p><strong>worker文件里面添加</strong></p><pre><code class="hljs bash">$ vi /opt/hadoop/etc/hadoop/workershdss7-61hdss7-62hdss7-63</code></pre><h4 id="5-分发文件到节点"><a href="#5-分发文件到节点" class="headerlink" title="5.分发文件到节点"></a>5.分发文件到节点</h4><p>把环境变量文件<code>/etc/profile.d/hadoop.sh</code>，<code>/opt/hadoop-3.2.0</code>拷贝到hdss7-62和hdss7-63</p><pre><code class="hljs bash"><span class="hljs-comment"># java脚本.</span>$ rsync -av /etc/profile.d/java.sh hdss7-62:/etc/profile.d/java.sh$ rsync -av /etc/profile.d/java.sh hdss7-63:/etc/profile.d/java.sh<span class="hljs-comment"># hadoop.sh脚本.</span>$ rsync -av /etc/profile.d/hadoop.sh hdss7-62:/etc/profile.d/hadoop.sh$ rsync -av /etc/profile.d/hadoop.sh hdss7-63:/etc/profile.d/hadoop.sh<span class="hljs-comment"># hadoop文件夹.</span>$ rsync -av /opt/hadoop-3.2.1/ hdss7-62:/opt/hadoop-3.2.1/$ rsync -av /opt/hadoop-3.2.1/ hdss7-63:/opt/hadoop-3.2.1/<span class="hljs-comment"># 在hdss7-62和hdss7-63节点上使环境生效.</span>$ <span class="hljs-built_in">source</span> /etc/profile<span class="hljs-comment"># 在hdss7-62和hdss7-63节点上创建hadoop文件夹.</span>$ mkdir -p /opt/datas/hadoop</code></pre><h4 id="6-启动hadoop"><a href="#6-启动hadoop" class="headerlink" title="6.启动hadoop"></a>6.启动hadoop</h4><p>初始化hadoop data</p><pre><code class="hljs bash">$ hdfs namenode -format</code></pre><p>启动和停止命令</p><pre><code class="hljs bash">[root@hdss7-61 opt]<span class="hljs-comment"># cd /opt/hadoop/</span>$ sbin/start-all.sh$ sbin/stop-all.sh</code></pre><p>访问网址查看hadoop:</p><pre><code class="hljs bash">http://10.4.7.61:50070/</code></pre><img src="/2021/01/05/hadoop-3-2-1-start/001.png" alt="Datanode-info" style="zoom:50%;"><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark的Standalone模式配置</title>
      <link href="2021/01/04/spark-standalone/"/>
      <url>2021/01/04/spark-standalone/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Spark的Standalone模式配置"><a href="#Spark的Standalone模式配置" class="headerlink" title="Spark的Standalone模式配置"></a>Spark的Standalone模式配置</h3><h4 id="1-主机环境配置"><a href="#1-主机环境配置" class="headerlink" title="1.主机环境配置"></a>1.主机环境配置</h4><ul><li>Linux环境3个节点</li><li>3个节点网络互通</li><li>3个节点均可连接外网</li></ul><pre><code class="hljs bash">$ vi /etc/hosts10.4.7.61 hdss7-61 hdss7-61.host.com10.4.7.62 hdss7-62 hdss7-62.host.com10.4.7.63 hdss7-63 hdss7-63.host.com</code></pre><h4 id="2-master节点配置"><a href="#2-master节点配置" class="headerlink" title="2.master节点配置"></a>2.master节点配置</h4><pre><code class="hljs bash">[root@hdss7-61 opt]<span class="hljs-comment"># cd /opt/</span><span class="hljs-comment"># 创建spark安装目录.</span>[root@hdss7-61 opt]<span class="hljs-comment"># mkdir spark-standalone</span>[root@hdss7-61 opt]<span class="hljs-comment"># cd src/</span>[root@hdss7-61 src]<span class="hljs-comment"># ls</span>jdk-8u221-linux-x64.tar.gz  spark-3.0.0-bin-hadoop3.2.tgz<span class="hljs-comment"># 解压spark包.</span>[root@hdss7-61 src]<span class="hljs-comment"># tar -zxvf spark-3.0.0-bin-hadoop3.2.tgz -C /opt/spark-standalone/</span>......[root@hdss7-61 src]<span class="hljs-comment"># cd /opt/spark-standalone/</span>[root@hdss7-61 spark-standalone]<span class="hljs-comment"># ls</span>spark-3.0.0-bin-hadoop3.2</code></pre><p>修改配置文件</p><pre><code class="hljs bash">[root@hdss7-61 spark-standalone]<span class="hljs-comment"># cd spark-3.0.0-bin-hadoop3.2/</span>[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># ls</span>bin  conf  data  examples  jars  kubernetes  LICENSE  licenses  NOTICE  python  R  README.md  RELEASE  sbin  yarn[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># cd conf/</span>[root@hdss7-61 conf]<span class="hljs-comment"># ls</span>fairscheduler.xml.template  log4j.properties.template  metrics.properties.template  slaves.template  spark-defaults.conf.template  spark-env.sh.template<span class="hljs-comment"># 将slaves.template文件拷贝一份成 -&gt; slaves</span>[root@hdss7-61 conf]<span class="hljs-comment"># cp slaves.template slaves</span>[root@hdss7-61 conf]<span class="hljs-comment"># ll</span>总用量 40-rw-r--r-- 1 1000 1000 1105 6月   6 2020 fairscheduler.xml.template-rw-r--r-- 1 1000 1000 2023 6月   6 2020 log4j.properties.template-rw-r--r-- 1 1000 1000 9141 6月   6 2020 metrics.properties.template-rw-r--r-- 1 root root  865 1月   5 03:48 slaves-rw-r--r-- 1 1000 1000  865 6月   6 2020 slaves.template-rw-r--r-- 1 1000 1000 1292 6月   6 2020 spark-defaults.conf.template-rwxr-xr-x 1 1000 1000 4344 6月   6 2020 spark-env.sh.template[root@hdss7-61 conf]<span class="hljs-comment"># vi slaves</span><span class="hljs-comment"># A Spark Worker will be started on each of the machines listed below.</span><span class="hljs-comment"># localhost</span>hdss7-61hdss7-62hdss7-63</code></pre><p>配置master节点</p><pre><code class="hljs bash">[root@hdss7-61 conf]<span class="hljs-comment"># cp spark-env.sh.template spark-env.sh</span><span class="hljs-comment"># 在spark-env.sh最的加上如下配置.</span>[root@hdss7-61 conf]<span class="hljs-comment"># vi spark-env.sh</span><span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/soft/jdk1.8.0_221SPARK_MASTER_HOST=hdss7-61SPARK_MASTER_PORT=7077</code></pre><h4 id="3-从节点配置"><a href="#3-从节点配置" class="headerlink" title="3.从节点配置"></a>3.从节点配置</h4><pre><code class="hljs bash"><span class="hljs-comment"># 在3个节点都安装rsync.</span><span class="hljs-comment"># sudo yum install rsync</span><span class="hljs-comment"># 从主节点分发spark文件到从节点.</span><span class="hljs-comment"># rsync -av spark-standalone/ hdss7-62:/opt/spark-standalone/</span><span class="hljs-comment"># rsync -av spark-standalone/ hdss7-63:/opt/spark-standalone/</span></code></pre><h4 id="4-配置免密登录"><a href="#4-配置免密登录" class="headerlink" title="4.配置免密登录"></a>4.配置免密登录</h4><pre><code class="hljs bash">[root@hdss7-61 ~]<span class="hljs-comment"># cd ~/.ssh/</span>[root@hdss7-61 .ssh]<span class="hljs-comment"># ssh-keygen -t rsa</span>[root@hdss7-61 .ssh]<span class="hljs-comment"># ssh-copy-id hdss7-61</span>[root@hdss7-61 .ssh]<span class="hljs-comment"># ssh-copy-id hdss7-62</span>[root@hdss7-61 .ssh]<span class="hljs-comment"># ssh-copy-id hdss7-63</span></code></pre><h4 id="4-启动集群"><a href="#4-启动集群" class="headerlink" title="4.启动集群"></a>4.启动集群</h4><pre><code class="hljs bash">[root@hdss7-61 opt]<span class="hljs-comment"># cd spark-standalone/spark-3.0.0-bin-hadoop3.2/</span><span class="hljs-comment"># 启动命令.</span>[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># sbin/start-all.sh </span>starting org.apache.spark.deploy.master.Master, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.master.Master-1-hdss7-61.host.com.outhdss7-62: starting org.apache.spark.deploy.worker.Worker, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.worker.Worker-1-hdss7-62.host.com.outhdss7-63: starting org.apache.spark.deploy.worker.Worker, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.worker.Worker-1-hdss7-63.host.com.outhdss7-61: starting org.apache.spark.deploy.worker.Worker, logging to /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/logs/spark-root-org.apache.spark.deploy.worker.Worker-1-hdss7-61.host.com.out<span class="hljs-comment"># 查看进程.</span>[root@hdss7-61 spark-3.0.0-bin-hadoop3.2]<span class="hljs-comment"># jps</span>54805 Worker54682 Master55630 Jps</code></pre><p>查看UI控制台</p><pre><code class="hljs bash">http://10.4.7.61:8080/</code></pre><img src="/2021/01/04/spark-standalone/001.png" alt="master-slave-ui" style="zoom:50%;"><h4 id="5-提交应用"><a href="#5-提交应用" class="headerlink" title="5.提交应用"></a>5.提交应用</h4><pre><code class="hljs bash">[root@hdss7-61 ~]<span class="hljs-comment"># cd /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2</span><span class="hljs-comment"># 提交应用命令(注意jar相对路径).</span><span class="hljs-comment"># --class: Spark程序中包含主函数的类.</span><span class="hljs-comment"># --master: Spark程序运行的模式(环境).</span><span class="hljs-comment"># [application-jar]: 打包好的应用jar.</span><span class="hljs-comment"># [application-arguments]: 命令行参数(这里是10).</span>bin/spark-submit \--class org.apache.spark.examples.SparkPi \--master spark://hdss7-61:7077 \./examples/jars/spark-examples_2.12-3.0.0.jar \10......21/01/05 04:36:33 INFO DAGScheduler: ResultStage 0 (reduce at SparkPi.scala:38) finished <span class="hljs-keyword">in</span> 3.819 s21/01/05 04:36:33 INFO DAGScheduler: Job 0 is finished. Cancelling potential speculative or zombie tasks <span class="hljs-keyword">for</span> this job21/01/05 04:36:33 INFO TaskSchedulerImpl: Removed TaskSet 0.0, whose tasks have all completed, from pool 21/01/05 04:36:33 INFO TaskSchedulerImpl: Killing all running tasks <span class="hljs-keyword">in</span> stage 0: Stage finished21/01/05 04:36:33 INFO DAGScheduler: Job 0 finished: reduce at SparkPi.scala:38, took 4.022366 sPi is roughly 3.141883141883141721/01/05 04:36:33 INFO SparkUI: Stopped Spark web UI at http://hdss7-61:404021/01/05 04:36:33 INFO StandaloneSchedulerBackend: Shutting down all executors.......<span class="hljs-comment"># 执行结果:</span>Pi is roughly 3.1418831418831417</code></pre><h4 id="6-配置历史服务"><a href="#6-配置历史服务" class="headerlink" title="6.配置历史服务"></a>6.配置历史服务</h4><p>修改文件<code>spark-defaults.conf</code>:</p><pre><code class="hljs xml">$ vi /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/conf/spark-defaults.confspark.eventLog.enabled           truespark.eventLog.dir               hdfs://hdss7-61:9000/directory</code></pre><p>端口号是<code>$HADOOP_HOME/etc/hadoop/core-site.xml</code>文件中的配置的端口号:</p><pre><code class="hljs xaml">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;?xml-stylesheet type&#x3D;&quot;text&#x2F;xsl&quot; href&#x3D;&quot;configuration.xsl&quot;?&gt;&lt;!-- Put site-specific property overrides in this file. --&gt;&lt;configuration&gt;    &lt;property&gt;        &lt;name&gt;fs.default.name&lt;&#x2F;name&gt;        &lt;value&gt;hdfs:&#x2F;&#x2F;hdss7-61:9000&lt;&#x2F;value&gt;    &lt;&#x2F;property&gt;    &lt;property&gt;        &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;        &lt;value&gt;&#x2F;opt&#x2F;datas&#x2F;hadoop&#x2F;tmp&lt;&#x2F;value&gt;    &lt;&#x2F;property&gt;&lt;&#x2F;configuration&gt;</code></pre><p>此时,要启动hadoop集群,在hdfs中创建 <code>directory</code>文件夹.</p><pre><code class="hljs bash">$ sbin/start-all.sh<span class="hljs-comment"># 或者</span>$ sbin/start-dfs.sh$ hadoop fs -mkdir /directory</code></pre><p>修改<code>vi /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/conf/spark-env.sh</code></p><pre><code class="hljs sh"><span class="hljs-built_in">export</span> SPARK_HISTORY_OPTS=<span class="hljs-string">&quot;-Dspark.history.ui.port=18080 -Dspark.history.fs.logDirectory=hdfs://hdss7-61:9000/directory -Dspark.history.retainedApplications=30&quot;</span><span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/soft/jdk1.8.0_221SPARK_MASTER_HOST=hdss7-61SPARK_MASTER_PORT=7077</code></pre><p>分发上述修改文件到节点hdss7-62和hdss7-63上.</p><p>重启启动spark集群和历史服务.</p><pre><code class="hljs bash">$ sbin/start-all.sh$ sbin/start-history-server.sh</code></pre><p>重新执行任务</p><pre><code class="hljs bash">bin/spark-submit \--class org.apache.spark.examples.SparkPi \--master spark://hdss7-61:7077 \./examples/jars/spark-examples_2.12-3.0.0.jar \10</code></pre><p>访问网址</p><pre><code class="hljs bash">http://10.4.7.61:18080/</code></pre><img src="/2021/01/04/spark-standalone/002.png" alt="spark-history" style="zoom:50%;"><h4 id="7-关闭服务"><a href="#7-关闭服务" class="headerlink" title="7.关闭服务"></a>7.关闭服务</h4><pre><code class="hljs bash"><span class="hljs-comment"># 关闭spark.</span>$ <span class="hljs-built_in">cd</span> /opt/spark-standalone/spark-3.0.0-bin-hadoop3.2/$ sbin/stop-all.sh$ sbin/stop-history-server.sh<span class="hljs-comment"># 关闭hadoop.</span>$ <span class="hljs-built_in">cd</span> /opt/hadoop$ sbin/stop-all.sh<span class="hljs-comment"># 查看进程.</span>$ jps66601 Jps</code></pre><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> standalone </tag>
            
            <tag> master </tag>
            
            <tag> slave </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark的local环境安装</title>
      <link href="2021/01/03/spark-centos-started/"/>
      <url>2021/01/03/spark-centos-started/</url>
      
        <content type="html"><![CDATA[<h3 id="Spark的local环境安装"><a href="#Spark的local环境安装" class="headerlink" title="Spark的local环境安装"></a>Spark的local环境安装</h3><h4 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h4><p>前提</p><ul><li>macOS Big Sur 11.1(主机环境)</li><li>VMware Fusion12以上版本(与macOS Big Sur 11.1兼容)</li><li>centos7虚拟环境</li></ul><h4 id="2-jdk安装"><a href="#2-jdk安装" class="headerlink" title="2.jdk安装"></a>2.jdk安装</h4><pre><code class="hljs bash">$ tar -zxvf /opt/src/jdk-8u221-linux-x64.tar.gz -C /usr/<span class="hljs-built_in">local</span>/soft/</code></pre><p>配置JAVA_HOME环境变量</p><pre><code class="hljs bash">$ vi .bash_profile<span class="hljs-built_in">export</span> JAVA_HOME=/usr/<span class="hljs-built_in">local</span>/soft/jdk1.8.0_221PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$HOME</span>/binPATH=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="hljs-variable">$PATH</span><span class="hljs-built_in">export</span> PATH</code></pre><p>使jdk生效</p><pre><code class="hljs bash"><span class="hljs-built_in">source</span> .bash_profile<span class="hljs-comment"># 查看版本.</span>$ java -versionjava version <span class="hljs-string">&quot;1.8.0_221&quot;</span>Java(TM) SE Runtime Environment (build 1.8.0_221-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode)</code></pre><h4 id="3-spark安装"><a href="#3-spark安装" class="headerlink" title="3.spark安装"></a>3.spark安装</h4><pre><code class="hljs bash">$ tar -zxvf src/spark-3.0.0-bin-hadoop3.2.tgz -C /opt/<span class="hljs-comment"># 建立软连接.</span>$ ln -s /opt/spark-3.0.0-bin-hadoop3.2/ /opt/spark-local$ ll /opt/总用量 0drwxr-xr-x  2 root root  22 1月   4 06:26 datasdrwxr-xr-x 13 1000 1000 211 6月   6 2020 spark-3.0.0-bin-hadoop3.2lrwxrwxrwx  1 root root  31 1月   4 06:08 spark-local -&gt; /opt/spark-3.0.0-bin-hadoop3.2/drwxr-xr-x  2 root root  77 1月   4 06:18 src<span class="hljs-comment"># 启动spark.</span><span class="hljs-comment"># cd /opt/spark-local/</span>[root@hdss7-61 spark-local]<span class="hljs-comment"># bin/spark-shell </span>21/01/04 06:22:25 WARN NativeCodeLoader: Unable to load native-hadoop library <span class="hljs-keyword">for</span> your platform... using builtin-java classes <span class="hljs-built_in">where</span> applicableUsing Spark<span class="hljs-string">&#x27;s default log4j profile: org/apache/spark/log4j-defaults.properties</span><span class="hljs-string">Setting default log level to &quot;WARN&quot;.</span><span class="hljs-string">To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).</span><span class="hljs-string">Spark context Web UI available at http://10.4.7.61:4040</span><span class="hljs-string">Spark context available as &#x27;</span>sc<span class="hljs-string">&#x27; (master = local[*], app id = local-1609712551595).</span><span class="hljs-string">Spark session available as &#x27;</span>spark<span class="hljs-string">&#x27;.</span><span class="hljs-string">Welcome to</span><span class="hljs-string">      ____              __</span><span class="hljs-string">     / __/__  ___ _____/ /__</span><span class="hljs-string">    _\ \/ _ \/ _ `/ __/  &#x27;</span>_/   /___/ .__/\_,_/_/ /_/\_\   version 3.0.0      /_/         Using Scala version 2.12.10 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_221)Type <span class="hljs-keyword">in</span> expressions to have them evaluated.Type :<span class="hljs-built_in">help</span> <span class="hljs-keyword">for</span> more information.</code></pre><h4 id="4-spark程序验证"><a href="#4-spark程序验证" class="headerlink" title="4.spark程序验证"></a>4.spark程序验证</h4><p>建立数据文件</p><pre><code class="hljs bash">$ vi /opt/datas/word.txt Hello sparkHello scalaHello sparkHello scalaHello spark</code></pre><p>在spark的命令行中输入:</p><pre><code class="hljs scala"><span class="hljs-comment">// 测试spark是否可用.</span>scala&gt; <span class="hljs-keyword">var</span> i = <span class="hljs-number">10</span>i: <span class="hljs-type">Int</span> = <span class="hljs-number">10</span><span class="hljs-comment">// 统计word.txt中的单词个数.</span>scala&gt; sc.textFile(<span class="hljs-string">&quot;/opt/datas/word.txt&quot;</span>).flatMap(_.split(<span class="hljs-string">&quot; &quot;</span>)).map((_,<span class="hljs-number">1</span>)).reduceByKey(_+_).collectres0: <span class="hljs-type">Array</span>[(<span class="hljs-type">String</span>, <span class="hljs-type">Int</span>)] = <span class="hljs-type">Array</span>((scala,<span class="hljs-number">2</span>), (<span class="hljs-type">Hello</span>,<span class="hljs-number">5</span>), (spark,<span class="hljs-number">3</span>))</code></pre><h4 id="5-spark-UI"><a href="#5-spark-UI" class="headerlink" title="5.spark UI"></a>5.spark UI</h4><p>访问UI网址:</p><pre><code class="hljs html">http://10.4.7.61:4040/</code></pre><p><img src="/2021/01/03/spark-centos-started/001.png" alt="spark-ui"></p><p><strong><u>Ps: 本文仅为学习记录,仅供学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> centos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Idea中scala配置</title>
      <link href="2021/01/03/scala-idea-config/"/>
      <url>2021/01/03/scala-idea-config/</url>
      
        <content type="html"><![CDATA[<h3 id="Idea中scala配置"><a href="#Idea中scala配置" class="headerlink" title="Idea中scala配置"></a>Idea中scala配置</h3><h4 id="1-scala下载"><a href="#1-scala下载" class="headerlink" title="1.scala下载"></a>1.scala下载</h4><p>访问官网下载</p><pre><code class="hljs bash">https://www.scala-lang.org/download/all.html</code></pre><p>以版本:scala-2.12.11为例</p><p>解压到指定文件夹.</p><pre><code class="hljs bash">tar xf scala-2.12.11.tgz -C ~/Documents/software% <span class="hljs-built_in">cd</span> ~/Documents/software% lsscala-2.12.11</code></pre><h4 id="2-idea配置"><a href="#2-idea配置" class="headerlink" title="2.idea配置"></a>2.idea配置</h4><p>idea -&gt; preferences -&gt; Plugins -&gt; scala(搜索) -&gt; 安装scala插件.</p><img src="/2021/01/03/scala-idea-config/001.png" alt="plugins-scala" style="zoom:50%;"><p>Installed -&gt; 重启Idea.</p><h4 id="3-项目配置scala"><a href="#3-项目配置scala" class="headerlink" title="3.项目配置scala"></a>3.项目配置scala</h4><p>File -&gt; Project Structure -&gt; Global Libraries -&gt; + -&gt; scala sdk</p><img src="/2021/01/03/scala-idea-config/002.png" alt="scala-sdk" style="zoom:50%;"><p>也可以工程中进行如下操作进行添加scala sdk.</p><img src="/2021/01/03/scala-idea-config/003.png" alt="project-structure" style="zoom:50%;"><h4 id="4-scala测试"><a href="#4-scala测试" class="headerlink" title="4.scala测试"></a>4.scala测试</h4><p>创建hello spark测试scala</p><p>New -&gt; Scala Class -&gt; 文件名 + Object</p><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atg.bigdata.spark.core<span class="hljs-comment">/**</span><span class="hljs-comment"> * scala测试.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * @description:</span><span class="hljs-comment"> * @author: lingchen</span><span class="hljs-comment"> * @date: 2021/1/3</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Test</span> </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;    print(<span class="hljs-string">&quot;Hello spark!&quot;</span>)  &#125;&#125;</code></pre><p>右击启动Test文件(Ctrl + Shift + R)</p><pre><code class="hljs bash">Hello spark!Process finished with <span class="hljs-built_in">exit</span> code 0</code></pre><h4 id="5-WordCount程序"><a href="#5-WordCount程序" class="headerlink" title="5.WordCount程序"></a>5.WordCount程序</h4><p>依赖pom:</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>atg-classes<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lc.bigdata<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spark-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">spark.version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">spark.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.spark<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spark-core_2.12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spark.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>数据准备</p><pre><code class="hljs bash"><span class="hljs-comment"># datas/1.txt</span>Hello WorldHello Spark<span class="hljs-comment"># datas/2.txt</span>Hello WorldHello Spark</code></pre><p>程序</p><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atg.bigdata.spark.core.wc<span class="hljs-keyword">import</span> org.apache.spark.rdd.<span class="hljs-type">RDD</span><span class="hljs-keyword">import</span> org.apache.spark.&#123;<span class="hljs-type">SparkConf</span>, <span class="hljs-type">SparkContext</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 文字统计.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * @description:</span><span class="hljs-comment"> * @author: lingchen</span><span class="hljs-comment"> * @date: 2021/1/3</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Spark01_WordCount</span> </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;    <span class="hljs-comment">// application.</span>    <span class="hljs-comment">// Spark框架.</span>    <span class="hljs-comment">// TODO 建立和Spark框架的连接.</span>    <span class="hljs-keyword">val</span> sparkConf = <span class="hljs-keyword">new</span> <span class="hljs-type">SparkConf</span>().setMaster(<span class="hljs-string">&quot;local&quot;</span>).setAppName(<span class="hljs-string">&quot;WordCount&quot;</span>)    <span class="hljs-keyword">val</span> sc = <span class="hljs-keyword">new</span> <span class="hljs-type">SparkContext</span>(sparkConf)    <span class="hljs-comment">// TODO 执行业务操作.</span>    <span class="hljs-comment">// 1. 读取数据文件,获取一行一行的数据.</span>    <span class="hljs-keyword">val</span> lines: <span class="hljs-type">RDD</span>[<span class="hljs-type">String</span>] = sc.textFile(<span class="hljs-string">&quot;datas&quot;</span>)    <span class="hljs-comment">// 2. 将一行数据进行拆分,形成一个一个的单词.</span>    <span class="hljs-comment">// 扁平化操作. -&gt; 将整体拆分成个体的操作.</span>    <span class="hljs-keyword">val</span> words: <span class="hljs-type">RDD</span>[<span class="hljs-type">String</span>] = lines.flatMap(_.split(<span class="hljs-string">&quot; &quot;</span>))    <span class="hljs-comment">// 3. 将数据根据单词进行分组,便于统计.</span>    <span class="hljs-keyword">val</span> wordGroup: <span class="hljs-type">RDD</span>[(<span class="hljs-type">String</span>, <span class="hljs-type">Iterable</span>[<span class="hljs-type">String</span>])] = words.groupBy(word =&gt; word)    <span class="hljs-comment">// 4. 对分组后的数据进行转换.</span>    <span class="hljs-keyword">val</span> wordToCount = wordGroup.map &#123;      <span class="hljs-keyword">case</span> (word, list) =&gt; &#123;        (word, list.size)      &#125;    &#125;    <span class="hljs-comment">// 5. 将转换结果采集到控制台打印出来.</span>    <span class="hljs-keyword">val</span> array: <span class="hljs-type">Array</span>[(<span class="hljs-type">String</span>, <span class="hljs-type">Int</span>)] = wordToCount.collect()    <span class="hljs-comment">// (Hello,4)</span>    <span class="hljs-comment">// (World,2)</span>    <span class="hljs-comment">// (Spark,2)</span>    array.foreach(println)    <span class="hljs-comment">// TODO 关闭连接.</span>    sc.stop()  &#125;&#125;</code></pre><p>运行程序</p><pre><code class="hljs bash">(Hello,4)(World,2)(Spark,2)</code></pre><h4 id="6-Idea变量配置"><a href="#6-Idea变量配置" class="headerlink" title="6.Idea变量配置"></a>6.Idea变量配置</h4><p>在 IDEA 编写 Scala 时，使用 <code>cmd</code> + <code>option</code> + <code>v</code> 自动生成变量时，默认并不会补充变量类型</p><p>cmd + option + v -&gt; setting -&gt; local definition -&gt; 勾上.</p><p>在变量语句后,输入.var + enter -&gt; 自动补全变量名(包括变量类型)</p><h4 id="7-WordCount优化"><a href="#7-WordCount优化" class="headerlink" title="7.WordCount优化"></a>7.WordCount优化</h4><p>Spark方法实现</p><pre><code class="hljs scala"><span class="hljs-keyword">package</span> com.atg.bigdata.spark.core.wc<span class="hljs-keyword">import</span> org.apache.spark.rdd.<span class="hljs-type">RDD</span><span class="hljs-keyword">import</span> org.apache.spark.&#123;<span class="hljs-type">SparkConf</span>, <span class="hljs-type">SparkContext</span>&#125;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 文字统计(Spark优化).</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * @description:</span><span class="hljs-comment"> * @author: lingchen</span><span class="hljs-comment"> * @date: 2021/1/3</span><span class="hljs-comment"> */</span><span class="hljs-class"><span class="hljs-keyword">object</span> <span class="hljs-title">Spark03_WordCount</span> </span>&#123;  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span></span>(args: <span class="hljs-type">Array</span>[<span class="hljs-type">String</span>]): <span class="hljs-type">Unit</span> = &#123;    <span class="hljs-comment">// 建立和Spark框架的连接.</span>    <span class="hljs-keyword">val</span> sparkConf = <span class="hljs-keyword">new</span> <span class="hljs-type">SparkConf</span>().setMaster(<span class="hljs-string">&quot;local&quot;</span>).setAppName(<span class="hljs-string">&quot;WordCount&quot;</span>)    <span class="hljs-keyword">val</span> sc = <span class="hljs-keyword">new</span> <span class="hljs-type">SparkContext</span>(sparkConf)    <span class="hljs-comment">// 执行业务操作.</span>    <span class="hljs-comment">// 1. 读取数据文件,获取一行一行的数据.</span>    <span class="hljs-keyword">val</span> lines: <span class="hljs-type">RDD</span>[<span class="hljs-type">String</span>] = sc.textFile(<span class="hljs-string">&quot;datas&quot;</span>)    <span class="hljs-comment">// 2. 将一行数据进行拆分,形成一个一个的单词.</span>    <span class="hljs-comment">// 扁平化操作. -&gt; 将整体拆分成个体的操作.</span>    <span class="hljs-keyword">val</span> words: <span class="hljs-type">RDD</span>[<span class="hljs-type">String</span>] = lines.flatMap(_.split(<span class="hljs-string">&quot; &quot;</span>))    <span class="hljs-comment">// 3: 将单词次数加入.</span>    <span class="hljs-keyword">val</span> wordToOne = words.map(      word =&gt; (word, <span class="hljs-number">1</span>)    )    <span class="hljs-comment">// spark优化:</span>    <span class="hljs-comment">// 4 Spark框架提供了更多的功能,可以将分组和聚合使用一个方法实现.</span>    <span class="hljs-keyword">val</span> wordToCount: <span class="hljs-type">RDD</span>[(<span class="hljs-type">String</span>, <span class="hljs-type">Int</span>)] = wordToOne.reduceByKey(_ + _)    <span class="hljs-comment">// 5. 将转换结果采集到控制台打印出来.</span>    <span class="hljs-keyword">val</span> array: <span class="hljs-type">Array</span>[(<span class="hljs-type">String</span>, <span class="hljs-type">Int</span>)] = wordToCount.collect()    <span class="hljs-comment">// (Hello,4)</span>    <span class="hljs-comment">// (World,2)</span>    <span class="hljs-comment">// (Spark,2)</span>    array.foreach(println)    <span class="hljs-comment">// 关闭连接.</span>    sc.stop()  &#125;&#125;</code></pre><p>程序运行:</p><pre><code class="hljs bash">(Hello,4)(World,2)(Spark,2)</code></pre><h4 id="8-日志配置"><a href="#8-日志配置" class="headerlink" title="8.日志配置"></a>8.日志配置</h4><p>为了在控制台不显示过多日志<br>配置log4j.properties</p><pre><code class="hljs properties"><span class="hljs-meta">log4j.rootCategory</span>=<span class="hljs-string">ERROR, console</span><span class="hljs-meta">log4j.appender.console</span>=<span class="hljs-string">org.apache.log4j.ConsoleAppender</span><span class="hljs-meta">log4j.appender.console.target</span>=<span class="hljs-string">System.err</span><span class="hljs-meta">log4j.appender.console.layout</span>=<span class="hljs-string">org.apache.log4j.PatternLayout</span><span class="hljs-meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="hljs-string">%d&#123;yy/MM/dd HH:mm:ss&#125; %p %c&#123;1&#125;: %m%n</span><span class="hljs-comment"># Set the default spark-shell log level to ERROR. When running the spark-shell,</span><span class="hljs-comment"># the log level for this class is used to overwrite the root logger&#x27;s log level, so that</span><span class="hljs-comment"># the user can have different defaults for the shell and regular Spark apps.</span><span class="hljs-meta">log4j.logger.org.apache.spark.repl.Main</span>=<span class="hljs-string">ERROR</span><span class="hljs-comment"># Settings to quiet third party logs that are too verbose</span><span class="hljs-meta">log4j.logger.org.spark_project.jetty</span>=<span class="hljs-string">ERROR</span><span class="hljs-meta">log4j.logger.org.spark_project.jetty.util.component.AbstractLifeCycle</span>=<span class="hljs-string">ERROR</span><span class="hljs-meta">log4j.logger.org.apache.spark.repl.SparkIMain$exprTyper</span>=<span class="hljs-string">ERROR</span><span class="hljs-meta">log4j.logger.org.apache.spark.repl.SparkILoop$SparkILoopInterpreter</span>=<span class="hljs-string">ERROR</span><span class="hljs-meta">log4j.logger.org.apache.parquet</span>=<span class="hljs-string">ERROR</span><span class="hljs-meta">log4j.logger.parquet</span>=<span class="hljs-string">ERROR</span><span class="hljs-comment"># SPARK-9183: Settings to avoid annoying messages when looking up nonexistent UDFs in SparkSQL with Hive support</span><span class="hljs-meta">log4j.logger.org.apache.hadoop.hive.metastore.RetryingHMSHandler</span>=<span class="hljs-string">FATAL</span><span class="hljs-meta">log4j.logger.org.apache.hadoop.hive.ql.exec.FunctionRegistry</span>=<span class="hljs-string">ERROR</span></code></pre><p><strong><u>Ps:本文仅为学习记录,仅供学习与参考.</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> idea </tag>
            
            <tag> scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keycloak安装使用</title>
      <link href="2020/12/22/keycloak-getting-started/"/>
      <url>2020/12/22/keycloak-getting-started/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Keycloak安装使用"><a href="#Keycloak安装使用" class="headerlink" title="Keycloak安装使用"></a>Keycloak安装使用</h3><h4 id="1-docker安装"><a href="#1-docker安装" class="headerlink" title="1.docker安装"></a>1.docker安装</h4><pre><code class="hljs bash">% docker run -p 8180:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin quay.io/keycloak/keycloak:12.0.1% docker psCONTAINER ID        IMAGE                              COMMAND                  CREATED             STATUS              PORTS                              NAMES20ae5093ed27        quay.io/keycloak/keycloak:12.0.1   <span class="hljs-string">&quot;/opt/jboss/tools/do…&quot;</span>   17 minutes ago      Up 17 minutes       8443/tcp, 0.0.0.0:8180-&gt;8080/tcp   interesting_gates</code></pre><p>访问网址:</p><pre><code class="hljs bash">http://localhost:8180</code></pre><p>用户名:admin<br>密码:admin</p><h4 id="2-创建realm"><a href="#2-创建realm" class="headerlink" title="2.创建realm"></a>2.创建realm</h4><p>Add realm -&gt; 填入名称:lc-myrealm -&gt; Create</p><p><img src="/2020/12/22/keycloak-getting-started/001.png" alt="realm-create"></p><p>Manager -&gt; Users -&gt; Add User</p><p><img src="/2020/12/22/keycloak-getting-started/002.png" alt="add-user"></p><p>输入用户名:</p><p><img src="/2020/12/22/keycloak-getting-started/003.png" alt="user-info"></p><p>设置新建用户lc-myuser的认证信息</p><ul><li>Credentials</li><li>Set Password (Aa123456)</li><li>Click <code>ON</code> next to <code>Temporary</code> to prevent having to update password on first login</li></ul><p><img src="/2020/12/22/keycloak-getting-started/004.png" alt="credentials"></p><p>访问网址:(网址中的lc-myrealm为上述创建的realm名称)</p><pre><code class="hljs bash">http://localhost:8180/auth/realms/lc-myrealm/account</code></pre><p>输入用户名:lc-myuser<br>密码:Aa123456</p><p><img src="/2020/12/22/keycloak-getting-started/005.png" alt="myuser-login"></p><p>在Personal Info中完善信息,输入邮箱:</p><p><img src="/2020/12/22/keycloak-getting-started/006.png" alt="email"></p><h4 id="3-配置第一个app"><a href="#3-配置第一个app" class="headerlink" title="3.配置第一个app"></a>3.配置第一个app</h4><p>访问地址:</p><pre><code class="hljs bash">http://localhost:8180/auth/admin/</code></pre><p>Clients -&gt; Create</p><p><img src="/2020/12/22/keycloak-getting-started/007.png" alt="client-create"></p><ul><li>Client ID: 随意</li><li>Root URL: 一个服务访问地址<br>该相关服务需要接入keycloak服务,此处使用官方提供的服务接口.</li></ul><p><img src="/2020/12/22/keycloak-getting-started/008.png" alt="client-info"></p><p>保存后,访问<code>https://www.keycloak.org/app/</code></p><p>输入URL, Realm和Client,此处均为上述创建的名称.</p><p><img src="/2020/12/22/keycloak-getting-started/009.png" alt="app-access"></p><p>点击 sign in<br>会出现登录成功后信息.</p><p><img src="/2020/12/22/keycloak-getting-started/010.png" alt="login-in"></p><h4 id="4-spring-boot项目集成"><a href="#4-spring-boot项目集成" class="headerlink" title="4.spring-boot项目集成"></a>4.spring-boot项目集成</h4><h5 id="Pom依赖配置"><a href="#Pom依赖配置" class="headerlink" title="Pom依赖配置"></a>Pom依赖配置</h5><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>eureka<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>eureka<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Eureka project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Hoxton.SR8<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">logback-gelf.version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">logback-gelf.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">keycloak.version</span>&gt;</span>12.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">keycloak.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--eureka server config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--logback gelf config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.siegmar<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-gelf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;logback-gelf.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--keycloak config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.keycloak<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>keycloak-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!--keycloak config.--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.keycloak.bom<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>keycloak-adapter-bom<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;keycloak.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h5 id="访问接口"><a href="#访问接口" class="headerlink" title="访问接口"></a>访问接口</h5><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.eureka.controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-keyword">import</span> java.util.Arrays;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Keycloak controller.</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020/12/23</span><span class="hljs-comment"> */</span><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(&quot;/keycloak&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeycloakController</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * keycloak访问接口.</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@GetMapping(&quot;/index&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title">GetKeycloak</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> Arrays.asList(<span class="hljs-string">&quot;Keycloak&quot;</span>,<span class="hljs-string">&quot;lc-myrealm&quot;</span>,<span class="hljs-string">&quot;lc-myuser&quot;</span>);    &#125;&#125;</code></pre><h5 id="application-xml配置"><a href="#application-xml配置" class="headerlink" title="application.xml配置"></a>application.xml配置</h5><pre><code class="hljs xml">server:  port: 8761spring:  application:    name: eurekaeureka:  client:    service-url:      defaultZone: http://localhost:8761/eureka/,http://localhost:8762/eureka/    register-with-eureka: false    fetch-registry: falsekeycloak:  auth-server-url: http://127.0.0.1:8180/auth  realm: lc-myrealm  public-client: true  resource: lc-eureka  security-constraints:    - authRoles:        - lc-myrole      securityCollections:        - patterns:            - /*</code></pre><h5 id="keycloak配置"><a href="#keycloak配置" class="headerlink" title="keycloak配置"></a>keycloak配置</h5><p>Clients: lc-eureka</p><p><img src="/2020/12/22/keycloak-getting-started/011.png" alt="client-lc-eureka"></p><p>role: lc-myrole</p><p><img src="/2020/12/22/keycloak-getting-started/012.png" alt="role-lc-myrole"></p><p>role绑定用户:</p><p><img src="/2020/12/22/keycloak-getting-started/013.png" alt="role-user"></p><p>访问网址</p><p><code>http://localhost:8761/keycloak/index</code></p><p><img src="/2020/12/22/keycloak-getting-started/014.png" alt="user-login" style="zoom:50%;"></p><p>登录后,可以跳转到正确路径(用户名:lc-myuser, 密码:Aa123456)</p><p><img src="/2020/12/22/keycloak-getting-started/015.png" alt="keycloak-index"></p><p><strong><u>PS:本文仅为学习记录,仅供学习与参考!</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> keycloak </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Graylog安装</title>
      <link href="2020/12/21/graylog-install/"/>
      <url>2020/12/21/graylog-install/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Graylog安装"><a href="#Graylog安装" class="headerlink" title="Graylog安装"></a>Graylog安装</h3><h4 id="1-使用Docker安装Graylog"><a href="#1-使用Docker安装Graylog" class="headerlink" title="1.使用Docker安装Graylog"></a>1.使用Docker安装Graylog</h4><p>安装mongodb:</p><pre><code class="hljs bash">% docker run --name mongo -d mongo:4.2</code></pre><p>安装elasticsearch:</p><pre><code class="hljs bash">% docker run --name elasticsearch \    -e <span class="hljs-string">&quot;http.host=0.0.0.0&quot;</span> \    -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \    -e <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \    -d docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.0</code></pre><p>安装Graylog:</p><pre><code class="hljs bash">% docker run --name graylog --link mongo --link elasticsearch \    -p 9000:9000 -p 12201:12201 -p 1514:1514 \    -e GRAYLOG_HTTP_EXTERNAL_URI=<span class="hljs-string">&quot;http://127.0.0.1:9000/&quot;</span> \    -d graylog/graylog:4.0</code></pre><p>查看启动结果:</p><pre><code class="hljs bash">% docker psCONTAINER ID        IMAGE                                                      COMMAND                  CREATED             STATUS                    PORTS                                                                      NAMESddf0648f5342        graylog/graylog:4.0                                        <span class="hljs-string">&quot;tini -- /docker-ent…&quot;</span>   14 minutes ago      Up 14 minutes (healthy)   0.0.0.0:1514-&gt;1514/tcp, 0.0.0.0:9000-&gt;9000/tcp, 0.0.0.0:12201-&gt;12201/tcp   graylogf158f7cc60ee        docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.0   <span class="hljs-string">&quot;/tini -- /usr/local…&quot;</span>   20 minutes ago      Up 20 minutes             9200/tcp, 9300/tcp                                                         elasticsearch2c4dfc1947b8        mongo:4.2                                                  <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   31 minutes ago      Up 30 minutes             27017/tcp                                                                  mongo</code></pre><p>访问网址:</p><pre><code class="hljs bash">http://127.0.0.1:9000/<span class="hljs-comment"># 或者:</span>http://127.0.0.1:9000/api/<span class="hljs-comment"># 输入admin,admin进入.</span></code></pre><h4 id="2-使用docker-compose安装"><a href="#2-使用docker-compose安装" class="headerlink" title="2.使用docker-compose安装"></a>2.使用docker-compose安装</h4><pre><code class="hljs bash"><span class="hljs-comment"># 停止所有容器.</span>% docker stop $(docker ps -q)<span class="hljs-comment"># 查看容器.</span>% docker ps<span class="hljs-comment"># 创建目录.</span>% mkdir -p ~/Documents/graylog/conf% <span class="hljs-built_in">cd</span> ~/Documents/graylog/conf</code></pre><p>创建docker-compose.yml文件:</p><p><code>% vi docker-compose.yml</code></p><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;2&#x27;</span><span class="hljs-attr">services:</span>  <span class="hljs-comment"># MongoDB: https://hub.docker.com/_/mongo/</span>  <span class="hljs-attr">mongodb:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">mongo:4.2</span>  <span class="hljs-comment"># Elasticsearch: https://www.elastic.co/guide/en/elasticsearch/reference/6.x/docker.html</span>  <span class="hljs-attr">elasticsearch:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.0</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">http.host=0.0.0.0</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">transport.host=localhost</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">network.host=0.0.0.0</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span>    <span class="hljs-attr">ulimits:</span>      <span class="hljs-attr">memlock:</span>        <span class="hljs-attr">soft:</span> <span class="hljs-number">-1</span>        <span class="hljs-attr">hard:</span> <span class="hljs-number">-1</span>    <span class="hljs-attr">mem_limit:</span> <span class="hljs-string">1g</span>  <span class="hljs-comment"># Graylog: https://hub.docker.com/r/graylog/graylog/</span>  <span class="hljs-attr">graylog:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">graylog/graylog:4.0</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-comment"># CHANGE ME (must be at least 16 characters)!</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_PASSWORD_SECRET=somepasswordpepper</span>      <span class="hljs-comment"># Password: admin</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:9000/</span>    <span class="hljs-attr">links:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">mongodb:mongo</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch</span>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span>    <span class="hljs-attr">depends_on:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">mongodb</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">elasticsearch</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-comment"># Graylog web interface and REST API</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">9000</span><span class="hljs-string">:9000</span>      <span class="hljs-comment"># Syslog TCP</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">1514</span><span class="hljs-string">:1514</span>      <span class="hljs-comment"># Syslog UDP</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">1514</span><span class="hljs-string">:1514/udp</span>      <span class="hljs-comment"># GELF TCP</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">12201</span><span class="hljs-string">:12201</span>      <span class="hljs-comment"># GELF UDP</span>      <span class="hljs-bullet">-</span> <span class="hljs-number">12201</span><span class="hljs-string">:12201/udp</span></code></pre><p>创建并启动容器:</p><pre><code class="hljs bash"><span class="hljs-comment"># 命令窗口打印出启动日志信息.</span>% docker-compose up......graylog_1        | 2020-12-21 13:39:11,784 INFO : org.graylog2.bootstrap.ServerBootstrap - Graylog server up and running.mongodb_1        | 2020-12-21T13:39:11.980+0000 I  SHARDING [conn17] Marking collection graylog.sessions as collection version: &lt;unsharded&gt;</code></pre><p>查看启动容器:</p><pre><code class="hljs bash">% docker-compose ps        Name                      Command                  State                                                                 Ports-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------conf_elasticsearch_1   /tini -- /usr/<span class="hljs-built_in">local</span>/bin/<span class="hljs-keyword">do</span> ...   Up             9200/tcp, 9300/tcpconf_graylog_1         tini -- /docker-entrypoint ...   Up (healthy)   0.0.0.0:12201-&gt;12201/tcp, 0.0.0.0:12201-&gt;12201/udp, 0.0.0.0:1514-&gt;1514/tcp, 0.0.0.0:1514-&gt;1514/udp, 0.0.0.0:9000-&gt;9000/tcpconf_mongodb_1         docker-entrypoint.sh mongod      Up             27017/tcp</code></pre><p>访问Graylog站点:</p><pre><code class="hljs bash">http://127.0.0.1:9000<span class="hljs-comment"># 或者:</span>http://127.0.0.1:9000/api/<span class="hljs-comment"># 输入admin,admin进入.</span></code></pre><h4 id="3-配置Input"><a href="#3-配置Input" class="headerlink" title="3.配置Input"></a>3.配置Input</h4><p>System/Input -&gt; udp -&gt; save</p><p><img src="/2020/12/21/graylog-install/001.png" alt="input-udp"></p><h4 id="4-spring-boot集成Graylog"><a href="#4-spring-boot集成Graylog" class="headerlink" title="4.spring-boot集成Graylog"></a>4.spring-boot集成Graylog</h4><p>配置依赖:logback-gelf</p><pre><code class="hljs bash"><span class="hljs-comment"># github地址:</span>https://github.com/osiegmar/logback-gelf<span class="hljs-comment"># maven地址:</span>https://mvnrepository.com/artifact/de.siegmar/logback-gelf/3.0.0</code></pre><p>添加依赖:</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--logback gelf config.--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>de.siegmar<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-gelf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><p>在添加logback.xml文件</p><pre><code class="hljs bash">% <span class="hljs-built_in">cd</span> ~/Documents/fork/springcloud/SpringCloud_Sell/eureka/src/main/resources% vi logback.xml&lt;configuration&gt;    &lt;appender name=<span class="hljs-string">&quot;GELF&quot;</span> class=<span class="hljs-string">&quot;de.siegmar.logbackgelf.GelfUdpAppender&quot;</span>&gt;        &lt;graylogHost&gt;localhost&lt;/graylogHost&gt;        &lt;graylogPort&gt;12201&lt;/graylogPort&gt;    &lt;/appender&gt;    &lt;root level=<span class="hljs-string">&quot;debug&quot;</span>&gt;        &lt;appender-ref ref=<span class="hljs-string">&quot;GELF&quot;</span> /&gt;    &lt;/root&gt;&lt;/configuration&gt;</code></pre><p>启动sample工程.发现控制台日志没有了,但可以在graylog浏览器页面查看.</p><pre><code class="hljs bash">  .   ____          _            __ _ _ /\\ / ___<span class="hljs-string">&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><span class="hljs-string">( ( )\___ | &#x27;</span>_ | <span class="hljs-string">&#x27;_| | &#x27;</span>_ \/ _` | \ \ \ \ \\/  ___)| |_)| | | | | || (_| |  ) ) ) )  <span class="hljs-string">&#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><span class="hljs-string"> =========|_|==============|___/=/_/_/_/</span><span class="hljs-string"> :: Spring Boot ::        (v2.3.5.RELEASE)</span></code></pre><p><img src="/2020/12/21/graylog-install/002.png" alt="graylog-log"></p><h4 id="5-配置spring-boot日志信息"><a href="#5-配置spring-boot日志信息" class="headerlink" title="5.配置spring-boot日志信息"></a>5.配置spring-boot日志信息</h4><p>在logback.xml中配置名称为:consoleLog的appender,并修改日志级别为debug -&gt; info</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;consoleLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>                %d - %msg%n            <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;GELF&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;de.siegmar.logbackgelf.GelfUdpAppender&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">graylogHost</span>&gt;</span>localhost<span class="hljs-tag">&lt;/<span class="hljs-name">graylogHost</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">graylogPort</span>&gt;</span>12201<span class="hljs-tag">&lt;/<span class="hljs-name">graylogPort</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;consoleLog&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GELF&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>重启服务,可以看到控制台打印出启动日志信息.</p><p>如果需要详细的日志信息,则logback.xml配置如下:</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;consoleLog&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>                %d - %msg%n            <span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-comment">&lt;!--simple udp config.--&gt;</span>    <span class="hljs-comment">&lt;!--&lt;appender name=&quot;GELF&quot; class=&quot;de.siegmar.logbackgelf.GelfUdpAppender&quot;&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--    &lt;graylogHost&gt;localhost&lt;/graylogHost&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--    &lt;graylogPort&gt;12201&lt;/graylogPort&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--&lt;/appender&gt;--&gt;</span>    <span class="hljs-comment">&lt;!--advanced udp config.--&gt;</span>    <span class="hljs-comment">&lt;!--https://github.com/osiegmar/logback-gelf/blob/master/examples/advanced_udp.xml--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;GELF&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;de.siegmar.logbackgelf.GelfUdpAppender&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">graylogHost</span>&gt;</span>localhost<span class="hljs-tag">&lt;/<span class="hljs-name">graylogHost</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">graylogPort</span>&gt;</span>12201<span class="hljs-tag">&lt;/<span class="hljs-name">graylogPort</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">maxChunkSize</span>&gt;</span>508<span class="hljs-tag">&lt;/<span class="hljs-name">maxChunkSize</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">useCompression</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">useCompression</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">messageIdSupplier</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;de.siegmar.logbackgelf.MessageIdSupplier&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;de.siegmar.logbackgelf.GelfEncoder&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">originHost</span>&gt;</span>localhost<span class="hljs-tag">&lt;/<span class="hljs-name">originHost</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includeRawMessage</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">includeRawMessage</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includeMarker</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">includeMarker</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includeMdcData</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">includeMdcData</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includeCallerData</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">includeCallerData</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includeRootCauseData</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">includeRootCauseData</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">includeLevelName</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">includeLevelName</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">shortPatternLayout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%m%nopex<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">shortPatternLayout</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">fullPatternLayout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.PatternLayout&quot;</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">fullPatternLayout</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">numbersAsString</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">numbersAsString</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">staticField</span>&gt;</span>app_name:eureka<span class="hljs-tag">&lt;/<span class="hljs-name">staticField</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">staticField</span>&gt;</span>os_arch:$&#123;os.arch&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">staticField</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">staticField</span>&gt;</span>os_name:$&#123;os.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">staticField</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">staticField</span>&gt;</span>os_version:$&#123;os.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">staticField</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;consoleLog&quot;</span> /&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;GELF&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>在Graylog浏览器中可以使用es语法来查询特定的log日志:</p><pre><code class="hljs bash">message:<span class="hljs-string">&quot;port&quot;</span></code></pre><p><img src="/2020/12/21/graylog-install/003.png" alt="es-log-search"></p><p>也可以使用组合查询:</p><pre><code class="hljs bash">message:<span class="hljs-string">&quot;port&quot;</span> AND <span class="hljs-built_in">source</span>:<span class="hljs-string">&quot;localhost&quot;</span></code></pre><h4 id="6-配置graylog时间"><a href="#6-配置graylog时间" class="headerlink" title="6.配置graylog时间"></a>6.配置graylog时间</h4><p>访问官网配置:</p><pre><code class="hljs html">https://docs.graylog.org/en/4.0/pages/configuration/server.conf.html</code></pre><p>可以搜索timezone</p><pre><code class="hljs html">root_timezone = UTCThe time zone setting of the root user. See this list of valid time zones. Default is UTC.</code></pre><p>配置docker-compose.yml</p><p><code>- GRAYLOG_ROOT_TIMEZONE=Asia/Shanghai</code></p><pre><code class="hljs yaml"><span class="hljs-attr">graylog:</span>  <span class="hljs-attr">image:</span> <span class="hljs-string">graylog/graylog:4.0</span>  <span class="hljs-attr">environment:</span>    <span class="hljs-comment"># CHANGE ME (must be at least 16 characters)!</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_PASSWORD_SECRET=somepasswordpepper</span>    <span class="hljs-comment"># Password: admin</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:9000/</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">GRAYLOG_ROOT_TIMEZONE=Asia/Shanghai</span></code></pre><p>重启docker-compose</p><pre><code class="hljs bash">% docker-compose up -dStarting conf_mongodb_1       ... <span class="hljs-keyword">done</span>Starting conf_elasticsearch_1 ... <span class="hljs-keyword">done</span>Recreating conf_graylog_1     ... <span class="hljs-keyword">done</span></code></pre><p>注意:要重新登录graylog,使时间生效.</p><pre><code class="hljs bash">% docker-compose ps        Name                      Command                  State                                                                 Ports-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------conf_elasticsearch_1   /tini -- /usr/<span class="hljs-built_in">local</span>/bin/<span class="hljs-keyword">do</span> ...   Up             9200/tcp, 9300/tcpconf_graylog_1         tini -- /docker-entrypoint ...   Up (healthy)   0.0.0.0:12201-&gt;12201/tcp, 0.0.0.0:12201-&gt;12201/udp, 0.0.0.0:1514-&gt;1514/tcp, 0.0.0.0:1514-&gt;1514/udp, 0.0.0.0:9000-&gt;9000/tcpconf_mongodb_1         docker-entrypoint.sh mongod      Up             27017/tcp</code></pre><p>重启微服务,在Graylog中查看log,查看时间是否正常.</p><p><img src="/2020/12/21/graylog-install/004.png" alt="graylog-timezone"></p><p>关闭Graylog容器.</p><pre><code class="hljs bash"><span class="hljs-comment"># 停止.</span>% docker-compose stopStopping conf_graylog_1       ... <span class="hljs-keyword">done</span>Stopping conf_mongodb_1       ... <span class="hljs-keyword">done</span>Stopping conf_elasticsearch_1 ... <span class="hljs-keyword">done</span><span class="hljs-comment"># 查看.</span>% docker-compose ps        Name                      Command                State     Ports------------------------------------------------------------------------conf_elasticsearch_1   /tini -- /usr/<span class="hljs-built_in">local</span>/bin/<span class="hljs-keyword">do</span> ...   Exit 143conf_graylog_1         tini -- /docker-entrypoint ...   Exit 143conf_mongodb_1         docker-entrypoint.sh mongod      Exit 0</code></pre><p><strong><u>ps:本文仅为学习记录,仅供学习与参考.</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> graylog </tag>
            
            <tag> mongodb </tag>
            
            <tag> es </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个serverless程序</title>
      <link href="2020/12/18/first-serverless-program/"/>
      <url>2020/12/18/first-serverless-program/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="第一个serverless程序"><a href="#第一个serverless程序" class="headerlink" title="第一个serverless程序"></a>第一个serverless程序</h3><h4 id="1-注册用户"><a href="#1-注册用户" class="headerlink" title="1.注册用户"></a>1.注册用户</h4><p>进入阿里云云开发平台,登录用户.</p><pre><code class="hljs html">https://workbench.aliyun.com</code></pre><p>创建空白应用,本例以NodeJs和FC计算服务为例.</p><p><img src="/2020/12/18/first-serverless-program/001.png" alt="app-list"></p><p>点击应用卡片上的开发部署按钮,进入云端CloudIDE.</p><p><img src="/2020/12/18/first-serverless-program/002.png" alt="app-windows"></p><h4 id="2-编辑程序"><a href="#2-编辑程序" class="headerlink" title="2.编辑程序"></a>2.编辑程序</h4><p>查看readme.md,查看帮助<br>编辑helloworld.js</p><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports.handler = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event, context, callback</span>) </span>&#123;    <span class="hljs-keyword">var</span> request = <span class="hljs-built_in">JSON</span>.parse(event);<span class="hljs-comment">// 请求内容都会存储在 event 中，JSON编码后可遍历查看具体的内容</span>    <span class="hljs-comment">// do sth</span>    <span class="hljs-keyword">var</span> msg = <span class="hljs-string">&#x27;你好，世界！&#x27;</span>;    <span class="hljs-comment">// 返回值格式</span>    <span class="hljs-keyword">var</span> responseObject = &#123;        isBase64Encoded: <span class="hljs-literal">false</span>,<span class="hljs-comment">//与 body 内容是否进行 base64 编码保持一致</span>        statusCode: <span class="hljs-number">200</span>,<span class="hljs-comment">//状态码，根据返回值自行决定适合的状态码</span>        headers: &#123;        <span class="hljs-string">&quot;Content-type&quot;</span>: <span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span><span class="hljs-comment">//根据返回值设置正确的 Content-type</span>        &#125;,        body: msg<span class="hljs-comment">//返回值</span>    &#125;;    callback(<span class="hljs-literal">null</span>, responseObject);<span class="hljs-comment">//返回结果</span>&#125;</code></pre><h4 id="3-编辑api接口"><a href="#3-编辑api接口" class="headerlink" title="3.编辑api接口"></a>3.编辑api接口</h4><p>   /api文件夹中的文件提供服务接口,如helloworld</p><ul><li>data主体: msg</li><li>headers: “Content-type”: “application/json; charset=utf-8”</li><li>body: msg</li></ul><pre><code class="hljs js"><span class="hljs-built_in">module</span>.exports.handler = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">event, context, callback</span>) </span>&#123;    <span class="hljs-keyword">var</span> request = <span class="hljs-built_in">JSON</span>.parse(event);<span class="hljs-comment">// 请求内容都会存储在 event 中，JSON编码后可遍历查看具体的内容</span>    <span class="hljs-comment">// do sth</span>    <span class="hljs-keyword">var</span> msg = &#123;      <span class="hljs-string">&quot;to&quot;</span>: <span class="hljs-string">&quot;世界&quot;</span>,      <span class="hljs-string">&quot;from&quot;</span>: <span class="hljs-string">&quot;lingchen&quot;</span>,      <span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;你好啊!&quot;</span>    &#125;;    <span class="hljs-comment">// 返回值格式</span>    <span class="hljs-keyword">var</span> responseObject = &#123;        isBase64Encoded: <span class="hljs-literal">false</span>,<span class="hljs-comment">//与 body 内容是否进行 base64 编码保持一致</span>        statusCode: <span class="hljs-number">200</span>,<span class="hljs-comment">//状态码，根据返回值自行决定适合的状态码</span>        headers: &#123;        <span class="hljs-string">&quot;Content-type&quot;</span>: <span class="hljs-string">&quot;application/json; charset=utf-8&quot;</span><span class="hljs-comment">//根据返回值设置正确的 Content-type</span>        &#125;,        body: msg<span class="hljs-comment">//返回值</span>    &#125;;    callback(<span class="hljs-literal">null</span>, responseObject);<span class="hljs-comment">//返回结果</span>&#125;</code></pre><h4 id="4-编辑index-html"><a href="#4-编辑index-html" class="headerlink" title="4.编辑index.html"></a>4.编辑index.html</h4><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">em</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;to&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">address</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;from&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript">  fetch(<span class="hljs-string">&#x27;/api/helloworld&#x27;</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) </span>&#123;</span><span class="javascript">    <span class="hljs-keyword">return</span> response.json();</span><span class="javascript">  &#125;).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">msg</span>) </span>&#123;</span><span class="javascript">    <span class="hljs-built_in">console</span>.log(msg)</span><span class="javascript">    <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#to&quot;</span>).innerText = <span class="hljs-string">&quot;美丽的: &quot;</span> + msg.to;</span><span class="javascript">    <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#message&quot;</span>).innerText = msg.data;</span><span class="javascript">    <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">&quot;#from&quot;</span>).innerText = <span class="hljs-string">&quot;热爱着你的: &quot;</span> + msg.from;</span>  &#125;)  <span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h4><p>点击 CloudIDE 侧边栏 「WB」插件，打开「测试」标签页，在「用户路径」中输入我们刚刚创建的helloworld.js的访问地址 + /helloworld</p><p><code>https://test1yi9nuhejv6wza3cxh7.workbenchapi.com/helloworld</code></p><pre><code class="hljs html">你好，世界！</code></pre><p>访问地址:每次测试或者发布部署后都不一样.</p><h4 id="6-部署"><a href="#6-部署" class="headerlink" title="6.部署"></a>6.部署</h4><p>部署上线前，请务必配置到 serverless.js 文件的 SAFE 列表进行保护</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> SAFE = [  <span class="hljs-string">&#x27;/api&#x27;</span>,  <span class="hljs-string">&#x27;/helloworld.js&#x27;</span>,  <span class="hljs-string">&#x27;/.workbench&#x27;</span>,  <span class="hljs-string">&#x27;/serverless.js&#x27;</span>];</code></pre><p>打开「WB」插件的「部署」标签页，点击「部署」，会弹出部署信息确认，点击「继续部署」开始构建部署，请耐心等待，直到部署完成.</p><p><code>https://test1yi9nuhejv6wza4nran.workbenchapi.com/</code></p><pre><code class="hljs html">美丽的: 世界你好啊!热爱着你的: lingchen</code></pre><h4 id="7-停止服务"><a href="#7-停止服务" class="headerlink" title="7.停止服务"></a>7.停止服务</h4><p>在应用卡片中,不用应用时,请停止服务,防止流量超过免费限制,产生费用.</p><p><img src="/2020/12/18/first-serverless-program/003.png" alt="stop-app"></p><p><strong><u>PS: 本文仅为学习与记录.仅供参考!</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> aliyun </tag>
            
            <tag> serverless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker微服务镜像推送至阿里云</title>
      <link href="2020/12/11/aliyun-docker-micro/"/>
      <url>2020/12/11/aliyun-docker-micro/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h3 id="Docker微服务镜像推送至阿里云"><a href="#Docker微服务镜像推送至阿里云" class="headerlink" title="Docker微服务镜像推送至阿里云"></a>Docker微服务镜像推送至阿里云</h3><h4 id="1-登录阿里云Docker-Registry"><a href="#1-登录阿里云Docker-Registry" class="headerlink" title="1.登录阿里云Docker Registry"></a>1.登录阿里云Docker Registry</h4><p>前提:</p><ul><li>本机安装docker</li><li>本机安装有maven</li></ul><p>登录阿里云docker镜像</p><pre><code class="hljs bash"><span class="hljs-comment"># 登录.</span>% docker login --username=your_name registry.cn-beijing.aliyuncs.com<span class="hljs-comment"># 输入服务密码.</span></code></pre><h4 id="2-打包微服务"><a href="#2-打包微服务" class="headerlink" title="2.打包微服务"></a>2.打包微服务</h4><pre><code class="hljs bash"><span class="hljs-comment"># 在idea命令窗口.</span>% <span class="hljs-built_in">source</span> ~/.bash_profile % mvn clean package -Dmaven.test.skip=<span class="hljs-literal">true</span>...... % ls target classes                                 eureka-0.0.1-SNAPSHOT.jar.original      maven-archivereureka-0.0.1-SNAPSHOT.jar               generated-sources                       maven-status</code></pre><h4 id="3-编写Dockerfile"><a href="#3-编写Dockerfile" class="headerlink" title="3.编写Dockerfile"></a>3.编写Dockerfile</h4><p>在工程根目录下创建Dockerfile文件:</p><pre><code class="hljs bash"><span class="hljs-comment"># 拉取jdk镜像.</span>FROM openjdk:8-alpine<span class="hljs-comment"># 添加微服务jar,并命名为app.jar.</span>ADD target/*.jar app.jar<span class="hljs-comment"># 暴露端口号.</span>EXPOSE 8761<span class="hljs-comment"># 运行jar.</span>ENTRYPOINT [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/app.jar&quot;</span>]</code></pre><h4 id="4-构建微服务docker镜像"><a href="#4-构建微服务docker镜像" class="headerlink" title="4.构建微服务docker镜像"></a>4.构建微服务docker镜像</h4><pre><code class="hljs bash"><span class="hljs-comment"># 镜像路径:registry.cn-beijing.aliyuncs.com/lcyun/</span><span class="hljs-comment"># 镜像名:eureka</span>% docker build -t registry.cn-beijing.aliyuncs.com/lcyun/eureka .......Successfully tagged registry.cn-beijing.aliyuncs.com/lcyun/eureka:latest<span class="hljs-comment"># 查看该镜像.</span>% docker imagesREPOSITORY                                      TAG                 IMAGE ID            CREATED             SIZEregistry.cn-beijing.aliyuncs.com/lcyun/eureka   latest              7a8fa6abf26e        10 seconds ago      155MB</code></pre><h4 id="5-推送镜像"><a href="#5-推送镜像" class="headerlink" title="5.推送镜像"></a>5.推送镜像</h4><pre><code class="hljs bash">% docker push registry.cn-beijing.aliyuncs.com/lcyun/eureka</code></pre><p>访问阿里云镜像仓库,该镜像已推送.</p><p><img src="/2020/12/11/aliyun-docker-micro/001.png" alt="docker-registry"></p><h4 id="6-编写shell脚本"><a href="#6-编写shell脚本" class="headerlink" title="6.编写shell脚本"></a>6.编写shell脚本</h4><p>在工程根目录下创建build.sh文件:</p><pre><code class="hljs sh"><span class="hljs-meta">#!/usr/bin/env bash</span>mvn clean package -Dmaven.test.skip=<span class="hljs-literal">true</span>docker build -t registry.cn-beijing.aliyuncs.com/lcyun/eureka .docker push registry.cn-beijing.aliyuncs.com/lcyun/eureka</code></pre><p>启动脚本,一键打包,上传微服务镜像到阿里云仓库</p><pre><code class="hljs bash">% bash build.sh</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> aliyun </tag>
            
            <tag> docker </tag>
            
            <tag> micro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac-vmware中Centos7网络连接</title>
      <link href="2020/12/10/vmware-mac-centos7/"/>
      <url>2020/12/10/vmware-mac-centos7/</url>
      
        <content type="html"><![CDATA[<p>[toc]</p><h3 id="Mac-vmware中Centos7网络连接"><a href="#Mac-vmware中Centos7网络连接" class="headerlink" title="Mac-vmware中Centos7网络连接"></a>Mac-vmware中Centos7网络连接</h3><h4 id="1-虚拟机安装"><a href="#1-虚拟机安装" class="headerlink" title="1.虚拟机安装"></a>1.虚拟机安装</h4><p>前提</p><ul><li>VMware Fusion安装</li><li>Centos7虚拟镜像</li></ul><p>导入Centos7虚拟镜像,</p><p>右击 -&gt; 网络适配器 -&gt; 连接网络适配器 -&gt; 与我的Mac共享</p><p>启动Centos7</p><pre><code class="hljs bash"><span class="hljs-comment"># 用户名与密码.</span>% rootroot</code></pre><h4 id="2-设置主机名"><a href="#2-设置主机名" class="headerlink" title="2.设置主机名"></a>2.设置主机名</h4><pre><code class="hljs bash">% hostnamectl set-hostname hdss7-11.host.com<span class="hljs-comment"># 退出重新登录.</span>% <span class="hljs-built_in">logout</span>rootroot<span class="hljs-comment"># 主机名已变成hdss7-50.</span>[root@hdss7-50 ~]<span class="hljs-comment"># </span></code></pre><h4 id="3-关闭防火墙"><a href="#3-关闭防火墙" class="headerlink" title="3.关闭防火墙"></a>3.关闭防火墙</h4><pre><code class="hljs bash">% sestatus% vi /etc/selinux/configSELINUX=disabled<span class="hljs-comment"># 重启.</span>% reboot<span class="hljs-comment"># 查看.</span>getenforce<span class="hljs-comment"># 关闭防火墙.</span>systemctl status firewalldsystemctl stop firewalldsystemctl <span class="hljs-built_in">disable</span> firewalld.service</code></pre><h4 id="4-配置IP地址"><a href="#4-配置IP地址" class="headerlink" title="4.配置IP地址"></a>4.配置IP地址</h4><p>查看mac本机的vmnet8的网关地址，这个对应NAT模式的网络连接.</p><pre><code class="hljs bash">% <span class="hljs-built_in">cd</span> /Library/Preferences/VMware Fusion/vmnet8<span class="hljs-comment"># 查看和修改nat.conf</span>% cat nat.conf<span class="hljs-comment"># NAT gateway address</span>ip = 10.4.7.2netmask = 255.255.255.0</code></pre><p>修改虚拟机中的文件: ifcfg-ens33</p><pre><code class="hljs bash">[root@hdss7-50 ~]<span class="hljs-comment"># vi /etc/sysconfig/network-scripts/ifcfg-ens33</span>TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=ens33UUID=8d71fc45-b8dc-42c4-9f8c-65f17323eb5aDEVICE=ens33ONBOOT=yesIPADDR=10.4.7.50NETMASK=255.255.255.0GATEWAY=10.4.7.2DNS1=10.4.7.2<span class="hljs-comment">#DNS1=114.114.114.114</span><span class="hljs-comment"># 自己设置IP: IPADDR=10.4.7.50</span><span class="hljs-comment"># 修改如下内容:</span><span class="hljs-comment"># BOOTPROTO=static</span><span class="hljs-comment"># NETMASK=255.255.255.0</span><span class="hljs-comment"># GATEWAY=10.4.7.2</span><span class="hljs-comment"># DNS1=10.4.7.2</span></code></pre><p>重启network服务</p><pre><code class="hljs bash">% service network restart<span class="hljs-comment"># 或者</span>% systemctl restart network.service</code></pre><p>查看Mac中的wifi中的dns配置,并配置</p><p>wifi -&gt; 打开网络偏好设置 -&gt; 高级 -&gt; DNS</p><pre><code class="hljs bash"><span class="hljs-comment"># dns可以不设</span>10.4.7.11192.168.0.253192.168.1.1</code></pre><h4 id="5-验证上网"><a href="#5-验证上网" class="headerlink" title="5.验证上网"></a>5.验证上网</h4><pre><code class="hljs bash">[root@hdss7-50 ~]<span class="hljs-comment"># ping baidu.com</span>PING baidu.com (220.181.38.148) 56(84) bytes of data.64 bytes from 220.181.38.148 (220.181.38.148): icmp_seq=1 ttl=128 time=7.13 ms64 bytes from 220.181.38.148 (220.181.38.148): icmp_seq=2 ttl=128 time=130 ms64 bytes from 220.181.38.148 (220.181.38.148): icmp_seq=3 ttl=128 time=10.2 ms</code></pre><h4 id="6-安装必须组件"><a href="#6-安装必须组件" class="headerlink" title="6.安装必须组件"></a>6.安装必须组件</h4><pre><code class="hljs bash">[root@hdss7-50 ~]<span class="hljs-comment"># yum install wget net-tools telnet tree nmap sysstat lrzsz dos2unix bind-utils -y</span><span class="hljs-comment"># 查看ip地址:10.4.7.50</span>[root@hdss7-50 ~]<span class="hljs-comment"># ifconfig</span>ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500        inet 10.4.7.50  netmask 255.255.255.0  broadcast 10.4.7.255        inet6 fe80::3194:9427:e40b:b2a0  prefixlen 64  scopeid 0x20&lt;link&gt;......</code></pre><h4 id="7-安装docker"><a href="#7-安装docker" class="headerlink" title="7.安装docker"></a>7.安装docker</h4><pre><code class="hljs bash"><span class="hljs-comment"># 通过阿里镜像来安装</span>[root@hdss7-50 ~]<span class="hljs-comment"># curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span>.....等待即可.<span class="hljs-comment"># 查看docker版本.</span>[root@hdss7-50 ~]<span class="hljs-comment"># systemctl start docker</span>[root@hdss7-50 ~]<span class="hljs-comment"># systemctl enable docker</span>Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.[root@hdss7-50 ~]<span class="hljs-comment"># docker info</span>Client: Context:    default Debug Mode: <span class="hljs-literal">false</span> Plugins:  app: Docker App (Docker Inc., v0.9.1-beta3)....[root@hdss7-50 ~]<span class="hljs-comment"># docker --version</span>Docker version 20.10.0, build 7287ab3<span class="hljs-comment"># 修改docker镜像源.</span>[root@hdss7-50 docker]<span class="hljs-comment"># mkdir -p /data/docker</span>[root@hdss7-50 docker]<span class="hljs-comment"># vi /etc/docker/daemon.json</span>&#123;  <span class="hljs-string">&quot;graph&quot;</span>: <span class="hljs-string">&quot;/data/docker&quot;</span>,  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://aorfq0az.mirror.aliyuncs.com&quot;</span>]&#125;<span class="hljs-comment"># 重启docker.</span>[root@hdss7-50 docker]<span class="hljs-comment"># systemctl daemon-reload</span>[root@hdss7-50 docker]<span class="hljs-comment"># systemctl restart docker</span><span class="hljs-comment"># 验证镜像.</span>[root@hdss7-50 docker]<span class="hljs-comment"># docker info</span>...... Insecure Registries:  127.0.0.0/8 Registry Mirrors:  https://aorfq0az.mirror.aliyuncs.com/ Live Restore Enabled: <span class="hljs-literal">false</span></code></pre><h4 id="8-安装rancher"><a href="#8-安装rancher" class="headerlink" title="8.安装rancher"></a>8.安装rancher</h4><pre><code class="hljs bash">% sudo docker run -d --restart=unless-stopped -p 8080:8080 -p 443:443 -v /data/rancher/:/var/lib/rancher/ rancher/rancher:stable<span class="hljs-comment"># 查看rancher容器.</span>[root@hdss7-50 rancher]<span class="hljs-comment"># docker ps</span>CONTAINER ID   IMAGE                    COMMAND           CREATED          STATUS                          PORTS     NAMES465eb034c7e6   rancher/rancher:stable   <span class="hljs-string">&quot;entrypoint.sh&quot;</span>   43 seconds ago   Restarting (1) 15 seconds ago             sad_pascal[root@hdss7-50 rancher]<span class="hljs-comment"># sudo vi /etc/hosts</span>127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain610.4.7.50 hdss7-50 hdss7-50.host.com......</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vmware </tag>
            
            <tag> centos7 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile微服务</title>
      <link href="2020/12/10/micro-docker/"/>
      <url>2020/12/10/micro-docker/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="Dockerfile微服务"><a href="#Dockerfile微服务" class="headerlink" title="Dockerfile微服务"></a>Dockerfile微服务</h3><h4 id="1-微服务打包"><a href="#1-微服务打包" class="headerlink" title="1.微服务打包"></a>1.微服务打包</h4><p><strong><u>前提:电脑上要先安装docker和maven</u></strong><br>进入工程, 这里以微服务: eureka为例.</p><pre><code class="hljs bash"><span class="hljs-comment"># 在idea命令行窗口中使maven命令生效.</span>% <span class="hljs-built_in">source</span> ~/.bash_profile<span class="hljs-comment"># 打包微服务eureka.</span>% mvn clean package -Dmaven.test.skip=<span class="hljs-literal">true</span><span class="hljs-comment"># 查看生成的jar.</span>% ls target classes                                 eureka-0.0.1-SNAPSHOT.jar.original      maven-archivereureka-0.0.1-SNAPSHOT.jar               generated-sources                       maven-status</code></pre><h4 id="2-编写Dockerfile文件"><a href="#2-编写Dockerfile文件" class="headerlink" title="2.编写Dockerfile文件"></a>2.编写Dockerfile文件</h4><p>在工程根目录下,新建一个Dockerfile文件</p><pre><code class="hljs dockerfile"><span class="hljs-comment"># 拉取jdk镜像.</span><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span>-alpine<span class="hljs-comment"># 添加微服务jar,并命名为app.jar.</span><span class="hljs-keyword">ADD</span><span class="bash"> target/*.jar app.jar</span><span class="hljs-comment"># 暴露端口号.</span><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8761</span><span class="hljs-comment"># 运行jar.</span><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/app.jar&quot;</span>]</span></code></pre><h4 id="3-构建Dockerfile"><a href="#3-构建Dockerfile" class="headerlink" title="3.构建Dockerfile"></a>3.构建Dockerfile</h4><pre><code class="hljs bash">% docker build -t mrlingchen/eureka .Sending build context to Docker daemon  50.55MBStep 1/4 : FROM openjdk:8-alpine8-alpine: Pulling from library/openjdke7c96db7181b: Pull complete f910a506b6cb: Pull complete c2274a1a0e27: Pull complete Digest: sha256:94792824df2df33402f201713f932b58cb9de94a0cd524164a0f2283343547b3Status: Downloaded newer image <span class="hljs-keyword">for</span> openjdk:8-alpine ---&gt; a3562aa0b991Step 2/4 : ADD target/*.jar app.jar ---&gt; 9376081729ebStep 3/4 : EXPOSE 8761 ---&gt; Running <span class="hljs-keyword">in</span> fb3dbeef160fRemoving intermediate container fb3dbeef160f ---&gt; ddba8d484423Step 4/4 : ENTRYPOINT [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/app.jar&quot;</span>] ---&gt; Running <span class="hljs-keyword">in</span> c1496a14651aRemoving intermediate container c1496a14651a ---&gt; 1265e0271c13Successfully built 1265e0271c13Successfully tagged mrlingchen/eureka:latest</code></pre><h4 id="4-启动容器"><a href="#4-启动容器" class="headerlink" title="4.启动容器"></a>4.启动容器</h4><pre><code class="hljs bash">% docker run -p 18761:8761 -d mrlingchen/eureka2585311480facffe71886253baf9deaf92597542a2f9f6a157dbd9a81a9f1ac1<span class="hljs-comment"># 查看docker容器启动情况.</span>% docker psCONTAINER ID        IMAGE                           COMMAND                  CREATED             STATUS              PORTS                     NAMES2585311480fa        mrlingchen/eureka               <span class="hljs-string">&quot;java -jar /app.jar&quot;</span>     27 seconds ago      Up 26 seconds       0.0.0.0:18761-&gt;8761/tcp   tender_ardinghelli</code></pre><h4 id="5-访问网页"><a href="#5-访问网页" class="headerlink" title="5.访问网页"></a>5.访问网页</h4><p>访问地址: <code>http://localhost:18761</code><br>端口号是docker run命令中映射的端口: 18761</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> dockerfile </tag>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_virtualenv_安装虚拟环境</title>
      <link href="2020/10/05/mac-python-virtualenv/"/>
      <url>2020/10/05/mac-python-virtualenv/</url>
      
        <content type="html"><![CDATA[<h3 id="Python-virtualenv-安装虚拟环境"><a href="#Python-virtualenv-安装虚拟环境" class="headerlink" title="Python virtualenv 安装虚拟环境"></a>Python virtualenv 安装虚拟环境</h3><h4 id="virtualenv安装"><a href="#virtualenv安装" class="headerlink" title="virtualenv安装"></a>virtualenv安装</h4><p>主要是为了解决在同一个系统中存在多个项目的情况， 采用虚拟的方式，为每个项目创建各自的环境，使各个项目不会相互干扰</p><ul><li>正常情况下，我们 pip 和 python 命令所执行的命令都是在系统环境下执行，修改的也是系统下的 python，导致每次的修改都是全局性的</li><li>当一个系统中存在多个项目时，而每个项目的配置需要又不一样，对全局的 python 环境修改又太麻烦</li><li>同样适用了虚拟环境，可以大胆的做各种 python 的实验、测试、开发等等，不用担心对系统全局环境的影响</li></ul><pre><code class="hljs shell">sudo pip install virtualenvsudo pip install virtualenvwrappe</code></pre><p>安装好之后在 /usr/local/bin 下有两者</p><h4 id="虚拟环境安装"><a href="#虚拟环境安装" class="headerlink" title="虚拟环境安装"></a>虚拟环境安装</h4><p>然后新建一个文件夹用来存放虚拟环境</p><pre><code class="hljs shell">例如： cd Desktop<span class="hljs-meta">#</span><span class="bash"> 新建文件夹 myproject</span>mkdir myproject<span class="hljs-meta">#</span><span class="bash"> 进入到文件夹中</span>cd myproject</code></pre><p>命令virtualenv就可以创建一个独立的Python运行环境，我们还加上了参数–no-site-packages，这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。</p><pre><code class="hljs shell">virtualenv 虚拟环境的名称例如：virtualenv venv<span class="hljs-meta">#</span><span class="bash"> 加上--no-site-packages 将不会拷贝系统Python 环境中已经存在的 python 包</span>virtualenv --no-site-packages venv</code></pre><p>这个时候在 venv 下已经创建了一个新的 python 环境 sit-packages 默认安装了 setuptools, pip, wheel</p><p>新建的Python环境被放到当前目录下的venv目录。有了venv这个Python环境，可以用source进入该环境：</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 注意需要使用 <span class="hljs-built_in">source</span> 命令进入此 venv 环境，否则所有的 pip或python均是在系统Python环境下执行</span>source venv/bin/activate</code></pre><p>注意到命令提示符变了，有个(venv)前缀，表示当前环境是一个名为venv的Python环境。</p><p>下面正常安装各种第三方包，并运行python命令：</p><p>现在可以测试安装一个包测试其安装地址</p><pre><code class="hljs shell">pip install jinja2<span class="hljs-meta">#</span><span class="bash"> 这个时候可以发下在 venv/lib/python2.7/sit-packages 目录下面发现 jinja 库</span></code></pre><p>在venv环境下，用pip安装的包都被安装到venv这个环境下，系统Python环境不受任何影响。也就是说，venv环境是专门针对myproject这个应用创建的。</p><p>退出当前的venv环境，使用deactivate命令： <code>deactivate</code> 此时就回到了正常的环境，现在pip或python均是在系统Python环境下执行</p><hr><p><strong><em>virtualenv是如何创建“独立”的Python运行环境的呢？**<br>**原理很简单，就是把系统Python复制一份到virtualenv的环境，用命令source venv/bin/activate进入一个virtualenv环境时，virtualenv会修改相关环境变量，让命令python和pip均指向当前的virtualenv环境。\</em></strong></p><h4 id="requirements文件"><a href="#requirements文件" class="headerlink" title="requirements文件"></a>requirements文件</h4><p>Python项目中必须包含一个requirements.txt文件，用于记录所有依赖包及其精确的版本号，以便在新环境中进行部署操作。</p><p>在虚拟环境使用以下命令将当前虚拟环境中的依赖包以版本号生成至文件中：</p><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash"> pip freeze &gt; requirements.txt</span><span class="hljs-meta">#</span><span class="bash"> 安装或升级包后，最好更新这个文件以保证虚拟环境中的依赖包</span><span class="hljs-meta">#</span><span class="bash"> requirements.txt</span>click==7.1.2Flask==1.1.2itsdangerous==1.1.0Jinja2==2.11.2MarkupSafe==1.1.1Werkzeug==1.0.1</code></pre><p>当需要创建这个虚拟环境的完全副本，可以创建一个新的虚拟环境，并在其上运行以下命令：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> pip install -r requirements.txt</span></code></pre><p><strong><u>PS：本文摘录于腾讯云文档，仅供学习与参考。</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> virtualenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11_可观测性_你的应用健康</title>
      <link href="2020/10/04/k8s-app-status/"/>
      <url>2020/10/04/k8s-app-status/</url>
      
        <content type="html"><![CDATA[<h3 id="11-可观测性-你的应用健康"><a href="#11-可观测性-你的应用健康" class="headerlink" title="11_可观测性_你的应用健康"></a>11_可观测性_你的应用健康</h3><h4 id="一、需求来源"><a href="#一、需求来源" class="headerlink" title="一、需求来源"></a><strong>一、需求来源</strong></h4><p>首先来看一下，整个需求的来源：当把应用迁移到 Kubernetes 之后，要如何去保障应用的健康与稳定呢？其实很简单，可以从两个方面来进行增强： </p><ol><li>首先是提高应用的可观测性。</li><li>提高应用的可恢复能力。</li></ol><p>从可观测性上来讲，可以在三个方面来去做增强：</p><ol><li>首先是应用的健康状态上面，可以实时地进行观测；</li><li>第二个是可以获取应用的资源使用情况；</li><li>第三个是可以拿到应用的实时日志，进行问题的诊断与分析。 </li></ol><p>当出现了问题之后，首先要做的事情是要降低影响的范围，进行问题的调试与诊断。最后当出现问题的时候，理想的状况是：可以通过和 K8s 集成的自愈机制进行完整的恢复。</p><h4 id="二、Liveness-与-Readiness"><a href="#二、Liveness-与-Readiness" class="headerlink" title="二、Liveness 与 Readiness"></a><strong>二、Liveness 与 Readiness</strong></h4><p>本小节为大家介绍 Liveness probe 和 eadiness probe。</p><h5 id="应用健康状态-初识-Liveness-与-Readiness"><a href="#应用健康状态-初识-Liveness-与-Readiness" class="headerlink" title="应用健康状态-初识 Liveness 与 Readiness"></a>应用健康状态-初识 Liveness 与 Readiness</h5><p>Liveness probe 也叫就绪指针，用来判断一个 pod 是否处在就绪状态。<br>当一个 pod 处在就绪状态的时候，它才能够对外提供相应的服务，也就是说接入层的流量才能打到相应的 pod。当这个 pod 不处在就绪状态的时候，接入层会把相应的流量从这个 pod 上面进行摘除。</p><p>来看一下简单的一个例子：<br>如下图其实就是一个 Readiness 就绪的一个例子： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502626536-55fc1ba0-8029-43c3-afaa-e50373ef2fe6.png" alt="image.png"></p><p>当这个 pod 指针判断一直处在失败状态的时候，其实接入层的流量不会打到现在这个 pod 上。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502355185-56dd96d2-9517-4d88-aa4e-b380c053a2c6.png" alt="image.png"></p><p>当这个 pod 的状态从 FAIL 的状态转换成 success 的状态时，它才能够真实地承载这个流量。 </p><p><strong>Liveness 指针也是类似的，它是存活指针，用来判断一个 pod 是否处在存活状态。</strong>当一个 pod 处在不存活状态的时候，会出现什么事情呢？ </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502660561-d1e80682-5919-4704-9b24-dce7dbc62316.png" alt="image.png"></p><p>这个时候会由上层的判断机制来判断这个 pod 是否需要被重新拉起。那如果上层配置的重启策略是 restart always 的话，那么此时这个 pod 会直接被重新拉起。 </p><h5 id="应用健康状态-使用方式"><a href="#应用健康状态-使用方式" class="headerlink" title="应用健康状态-使用方式"></a>应用健康状态-使用方式</h5><p>接下来看一下 Liveness 指针和 Readiness 指针的具体的用法。 </p><h5 id="探测方式"><a href="#探测方式" class="headerlink" title="探测方式"></a>探测方式</h5><p>Liveness 指针和 Readiness 指针支持三种不同的探测方式： </p><ol><li>第一种是 httpGet。它是通过<u>发送 http Get 请求</u>来进行判断的，当返回码是 200-399 之间的状态码时，标识这个应用是健康的；</li><li>第二种探测方式是 Exec。它是通过<u>执行容器中的一个命令</u>来判断当前的服务是否是正常的，当命令行的返回结果是 0，则标识容器是健康的；</li><li>第三种探测方式是 tcpSocket。它是通过<u>探测容器的 IP 和 Port 进行 TCP 健康检查</u>，如果这个 TCP 的链接能够正常被建立，那么标识当前这个容器是健康的。</li></ol><h5 id="探测结果"><a href="#探测结果" class="headerlink" title="探测结果"></a>探测结果</h5><p>从探测结果来讲主要分为三种： </p><ul><li>第一种是 success，当状态是 success 的时候，表示 container 通过了健康检查，也就是 Liveness probe 或 Readiness probe 是正常的一个状态；</li><li>第二种是 Failure，Failure 表示的是这个 container 没有通过健康检查，如果没有通过健康检查的话，那么此时就会进行相应的一个处理，那在 Readiness 处理的一个方式就是通过 service。service 层将没有通过 Readiness 的 pod 进行摘除，而 Liveness 就是将这个 pod 进行重新拉起，或者是删除。</li><li>第三种状态是 Unknown，Unknown 是表示说当前的执行的机制没有进行完整的一个执行，可能是因为类似像超时或者像一些脚本没有及时返回，那么此时 Readiness-probe 或 Liveness-probe 会不做任何的一个操作，会等待下一次的机制来进行检验。</li></ul><p>那在 kubelet 里面有一个叫 <u><strong>ProbeManager 的组件</strong></u>，这个组件里面会包含 Liveness-probe 或 Readiness-probe，这两个 probe 会将相应的 Liveness 诊断和 Readiness 诊断作用在 pod 之上，来实现一个具体的判断。 </p><h5 id="应用健康状态-Pod-Probe-Spec"><a href="#应用健康状态-Pod-Probe-Spec" class="headerlink" title="应用健康状态-Pod Probe Spec"></a>应用健康状态-Pod Probe Spec</h5><p>下面介绍这三种方式不同的检测方式的一个 yaml 文件的使用。</p><p>首先先看一下 exec，exec 的使用其实非常简单。如下图所示，大家可以看到这是一个 Liveness probe，它里面配置了一个 exec 的一个诊断。接下来，它又配置了一个 **<u>command 的字段</u>**，这个 command 字段里面通过 cat 一个具体的文件来判断当前 Liveness probe 的状态，当这个文件里面返回的结果是 0 时，或者说这个命令返回是 0 时，它会认为此时这个 pod 是处在健康的一个状态。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502713702-6b90ff5b-265d-4c2d-a46f-b363ea54c2d7.png" alt="image.png"></p><p>那再来看一下这个 httpGet，**<u>httpGet 里面有一个字段是路径，第二个字段是 port，第三个是 headers</u>**。这个地方有时需要通过类似像 header 头的一个机制做 health 的一个判断时，需要配置这个 header，通常情况下，可能只需要通过 health 和 port 的方式就可以了。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502757691-ece72c57-6446-4796-8e4b-568a1cf6ca74.png" alt="image.png"></p><p>第三种是 tcpSocket，tcpSocket 的使用方式其实也比较简单，你只需要设置一个**<u>检测的端口</u>**，像这个例子里面使用的是 8080 端口，当这个 8080 端口 tcp connect 审核正常被建立的时候，那 tecSocket，Probe 会认为是健康的一个状态。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502777983-dfa814ec-747e-4540-9f6a-46e41912f9bd.png" alt="image.png"></p><p>此外还有如下的五个参数，是 Global 的参数。 </p><ul><li><p>第一个参数叫 initialDelaySeconds，它表示的是说这个 pod 启动延迟多久进行一次检查，比如说现在有一个 Java 的应用，它启动的时间可能会比较长，因为涉及到 jvm 的启动，包括 Java 自身 jar 的加载。所以前期，可能有一段时间是没有办法被检测的，而这个时间又是可预期的，那这时可能要设置一下 initialDelaySeconds；</p></li><li><p>第二个是 periodSeconds，它表示的是检测的时间间隔，正常默认的这个值是 10 秒；</p></li><li><p>第三个字段是 timeoutSeconds，它表示的是检测的超时时间，当超时时间之内没有检测成功，那它会认为是失败的一个状态；</p></li><li><p>第四个是 successThreshold，它表示的是：当这个 pod 从探测失败到再一次判断探测成功，所需要的阈值次数，默认情况下是 1 次，表示原本是失败的，那接下来探测这一次成功了，就会认为这个 pod 是处在一个探针状态正常的一个状态；</p></li><li><p>最后一个参数是 failureThreshold，它表示的是探测失败的重试次数，默认值是 3，表示的是当从一个健康的状态连续探测 3 次失败，那此时会判断当前这个pod的状态处在一个失败的状态。</p></li></ul><h5 id="应用健康状态-Liveness-与-Readiness-总结"><a href="#应用健康状态-Liveness-与-Readiness-总结" class="headerlink" title="应用健康状态-Liveness 与 Readiness 总结"></a>应用健康状态-Liveness 与 Readiness 总结</h5><p>接下来对 Liveness 指针和 Readiness 指针进行一个简单的总结。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502867094-9c716cdd-edd0-4296-98c1-02afab9a5487.png?x-oss-process=image/resize,w_2222" alt="图片1.png"></p><p>介绍</p><p>Liveness 指针是存活指针，它用来判断容器是否存活、判断 pod 是否 running。如果 Liveness 指针判断容器不健康，此时会通过 kubelet 杀掉相应的 pod，并根据重启策略来判断是否重启这个容器。如果默认不配置 Liveness 指针，则默认情况下认为它这个探测默认返回是成功的。 </p><p>Readiness 指针用来判断这个容器是否启动完成，即 pod 的 condition 是否 ready。如果探测的一个结果是不成功，那么此时它会从 pod 上 Endpoint 上移除，也就是说从接入层上面会把前一个 pod 进行摘除，直到下一次判断成功，这个 pod 才会再次挂到相应的 endpoint 之上。 </p><p>检测失败 </p><p>对于检测失败上面来讲 Liveness 指针是直接杀掉这个 pod，而 Readiness 指针是切掉 endpoint 到这个 pod 之间的关联关系，也就是说它把这个流量从这个 pod 上面进行切掉。 </p><p>适用场景 </p><p>Liveness 指针适用场景是支持那些可以重新拉起的应用，而 Readiness 指针主要应对的是启动之后无法立即对外提供服务的这些应用。 </p><p>注意事项 </p><p>在使用 Liveness 指针和 Readiness 指针的时候有一些注意事项。因为不论是 Liveness 指针还是 Readiness 指针都需要配置合适的探测方式，以免被误操作。 </p><ul><li><p>第一个是调大超时的阈值，因为在容器里面执行一个 shell 脚本，它的执行时长是非常长的，平时在一台 ecs 或者在一台 vm 上执行，可能 3 秒钟返回的一个脚本在容器里面需要 30 秒钟。所以这个时间是需要在容器里面事先进行一个判断的，那如果可以调大超时阈值的方式，来防止由于容器压力比较大的时候出现偶发的超时；</p></li><li><p>第二个是调整判断的一个次数，3 次的默认值其实在比较短周期的判断周期之下，不一定是最佳实践，适当调整一下判断的次数也是一个比较好的方式；</p></li><li><p>第三个是 exec，如果是使用 shell 脚本的这个判断，调用时间会比较长，比较建议大家可以使用类似像一些编译性的脚本 Golang 或者一些 C 语言、C++ 编译出来的这个二进制的 binary 进行判断，那这种通常会比 shell 脚本的执行效率高 30% 到 50%；</p></li><li><p>第四个是如果使用 tcpSocket 方式进行判断的时候，如果遇到了 TLS 的服务，那可能会造成后边 TLS 里面有很多这种未健全的 tcp connection，那这个时候需要自己对业务场景上来判断，这种的链接是否会对业务造成影响。</p></li></ul><h4 id="三、问题诊断"><a href="#三、问题诊断" class="headerlink" title="三、问题诊断"></a><strong>三、问题诊断</strong></h4><p>接下来给大家讲解一下在 K8s 中常见的问题诊断。</p><h5 id="应用故障排查-了解状态机制"><a href="#应用故障排查-了解状态机制" class="headerlink" title="应用故障排查-了解状态机制"></a>应用故障排查-了解状态机制</h5><p>首先要了解一下 K8s 中的一个设计理念，就是这个状态机制。因为 **<u>K8s 是整个的一个设计是面向状态机的</u>**，它里面通过 yaml 的方式来定义的是一个期望到达的一个状态，而真正这个 yaml 在执行过程中会由各种各样的 controller来负责整体的状态之间的一个转换。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502911373-048d928b-f606-4503-ac09-ab71505841cf.png" alt="image.png"></p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570502921155-cb806fc8-e90d-4c81-bd1f-8636aa59db66.png" alt="image.png"></p><p>比如说上面的图，实际上是一个 Pod 的一个生命周期。刚开始它处在一个 pending 的状态，那接下来可能会转换到类似像 running，也可能转换到 Unknown，甚至可以转换到 failed。然后，当 running 执行了一段时间之后，它可以转换到类似像 successded 或者是 failed，然后当出现在 unknown 这个状态时，可能由于一些状态的恢复，它会重新恢复到 running 或者 successded 或者是 failed。 </p><p>其实 K8s 整体的一个状态就是基于这种类似像状态机的一个机制进行转换的，而不同状态之间的转化都会在相应的 K8s对象上面留下来类似像 Status 或者像 Conditions 的一些字段来进行表示。</p><p>像下面这张图其实表示的就是说在一个 Pod 上面一些状态位的一些展现。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570503040532-79a6ac60-4106-4f37-87b2-9934856626ca.png" alt="image.png"></p><p>比如说在 Pod 上面有一个字段叫 Status，这个 Status 表示的是 Pod 的一个聚合状态，在这个里面，这个聚合状态处在一个 pending 状态。 </p><p>然后再往下看，因为一个 pod 里面有多个 container，每个 container 上面又会有一个字段叫 State，然后 State 的状态表示当前这个 container 的一个聚合状态。那在这个例子里面，这个聚合状态处在的是 waiting 的状态，那具体的原因是因为什么呢？是因为它的镜像没有拉下来，所以处在 waiting 的状态，是在等待这个镜像拉取。然后这个 ready 的部分呢，目前是 false，因为它这个进行目前没有拉取下来，所以这个 pod 不能够正常对外服务，所以此时 ready 的状态是未知的，定义为 false。如果上层的 endpoint 发现底层这个 ready 不是 true 的话，那么此时这个服务是没有办法对外服务的。 </p><p>再往下是 condition，condition 这个机制表示是说：在 K8s 里面有很多这种比较小的这个状态，而这个状态之间的聚合会变成上层的这个 Status。那在这个例子里面有几个状态，第一个是 Initialized，表示是不是已经初始化完成？那在这个例子里面已经是初始化完成的，那它走的是第二个阶段，是在这个 ready 的状态。因为上面几个 container 没有拉取下来相应的镜像，所以 ready 的状态是 false。</p><p>然后再往下可以看到这个 container 是否 ready，这里可以看到是 false，而这个状态是 PodScheduled，表示说当前这个 pod 是否是处在一个已经被调度的状态，它已经 bound 在现在这个 node 之上了，所以这个状态也是 true。</p><p>那可以通过相应的 condition 是 true 还是 false 来判断整体上方的这个状态是否是正常的一个状态。而在 K8s 里面不同的状态之间的这个转换都会发生相应的事件，而**<u>事件分为两种： 一种叫做 normal 的事件，一种是 warning 事件</u>**。大家可以看见在这第一条的事件是有个 normal 事件，然后它相应的 reason 是 scheduler，表示说这个 pod 已经被默认的调度器调度到相应的一个节点之上，然后这个节点是 cn-beijing192.168.3.167 这个节点之上。</p><p>再接下来，又是一个 normal 的事件，表示说当前的这个镜像在 pull 相应的这个 image。然后再往下是一个 warning 事件，这个 warning 事件表示说 pull 这个镜像失败了。 </p><p>以此类推，这个地方表示的一个状态就是说在 K8s 里面这个状态机制之间这个状态转换会产生相应的事件，而这个事件又通过类似像 normal 或者是 warning 的方式进行暴露。开发者可以通过类似像通过这个事件的机制，可以通过上层 condition Status 相应的一系列的这个字段来判断当前这个应用的具体的状态以及进行一系列的诊断。</p><h5 id="应用故障排查-常见应用异常"><a href="#应用故障排查-常见应用异常" class="headerlink" title="应用故障排查-常见应用异常"></a>应用故障排查-常见应用异常</h5><p>本小节介绍一下常见应用的一些异常。首先是 pod 上面，pod 上面可能会停留几个常见的状态。</p><h6 id="Pod-停留在-Pending"><a href="#Pod-停留在-Pending" class="headerlink" title="Pod 停留在 Pending"></a>Pod 停留在 Pending</h6><p>第一个就是 pending 状态，pending 表示调度器没有进行介入。此时可以通过 <strong><u>kubectl describe pod</u></strong> 来查看相应的事件，如果由于资源或者说端口占用，或者是由于 node selector 造成 pod 无法调度的时候，可以在相应的事件里面看到相应的结果，这个结果里面会表示说有多少个不满足的 node，有多少是因为 CPU 不满足，有多少是由于 node 不满足，有多少是由于 tag 打标造成的不满足。</p><h6 id="Pod-停留在-waiting"><a href="#Pod-停留在-waiting" class="headerlink" title="Pod 停留在 waiting"></a>Pod 停留在 waiting</h6><p>那第二个状态就是 pod 可能会停留在 waiting 的状态，pod 的 states 处在 waiting 的时候，<br>通常表示说这个 pod 的镜像没有正常拉取，原因可能是由于这个镜像是私有镜像，但是没有配置 Pod secret；<br>那第二种是说可能由于这个镜像地址是不存在的，造成这个镜像拉取不下来；<br>还有一个是说这个镜像可能是一个公网的镜像，造成镜像的拉取失败。 </p><h6 id="Pod-不断被拉取并且可以看到-crashing"><a href="#Pod-不断被拉取并且可以看到-crashing" class="headerlink" title="Pod 不断被拉取并且可以看到 crashing"></a>Pod 不断被拉取并且可以看到 crashing</h6><p>第三种是 pod 不断被拉起，而且可以看到类似像 backoff。这个通常表示说 pod 已经被调度完成了，但是启动失败，<br>那这个时候通常要关注的应该是这个应用自身的一个状态，并不是说配置是否正确、权限是否正确，此时需要查看的应该是 pod 的具体日志。</p><h6 id="Pod-处在-Runing-但是没有正常工作"><a href="#Pod-处在-Runing-但是没有正常工作" class="headerlink" title="Pod 处在 Runing 但是没有正常工作"></a>Pod 处在 Runing 但是没有正常工作</h6><p>第四种 pod 处在 running 状态，但是没有正常对外服务。<br>那此时比较常见的一个点就可能是由于一些非常细碎的配置，类似像有一些字段可能拼写错误，造成了 yaml 下发下去了，但是有一段没有正常地生效，从而使得这个 pod 处在 running 的状态没有对外服务，那此时可以通过 apply-validate-f pod.yaml 的方式来进行判断当前 yaml 是否是正常的，如果 yaml 没有问题，那么接下来可能要诊断配置的端口是否是正常的，以及 Liveness 或 Readiness 是否已经配置正确。</p><h6 id="Service-无法正常的工作"><a href="#Service-无法正常的工作" class="headerlink" title="Service 无法正常的工作"></a>Service 无法正常的工作</h6><p>最后一种就是 service 无法正常工作的时候，该怎么去判断呢？那比较常见的 service 出现问题的时候，是自己的使用上面出现了问题。<br>因为 service 和底层的 pod 之间的关联关系是**<u>通过 selector 的方式来匹配的，也就是说 pod 上面配置了一些 label</u>**，然后 service 通过 match label 的方式和这个 pod 进行相互关联。如果这个 label 配置的有问题，可能会造成这个 service 无法找到后面的 endpoint，从而造成相应的 service 没有办法对外提供服务，那如果 service 出现异常的时候，第一个要看的是这个 service 后面是不是有一个真正的 endpoint，其次来看这个 endpoint 是否可以对外提供正常的服务。</p><h4 id="四、应用远程调试"><a href="#四、应用远程调试" class="headerlink" title="四、应用远程调试"></a><strong>四、应用远程调试</strong></h4><p>本节讲解的是在 K8s 里面如何进行应用的远程调试，远程调试主要分为 pod 的远程调试以及 service 的远程调试。还有就是针对一些性能优化的远程调试。</p><h5 id="应用远程调试-Pod-远程调试"><a href="#应用远程调试-Pod-远程调试" class="headerlink" title="应用远程调试 - Pod 远程调试"></a>应用远程调试 - Pod 远程调试</h5><p>首先把一个应用部署到集群里面的时候，发现问题的时候，需要进行快速验证，或者说修改的时候，可能需要类似像登陆进这个容器来进行一些诊断。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570503283791-1688c1e8-032d-4e35-9be0-728101b6663d.png?x-oss-process=image/resize,w_2222" alt="图片2.png"></p><p>比如说可以通过 exec 的方式进入一个 pod。像这条命令里面，通过 <strong><u>kubectl exec-it pod-name</u></strong> 后面再填写一个相应的命令，比如说 /bin/bash，表示希望到这个 pod 里面进入一个交互式的一个 bash。然后在 bash 里面可以做一些相应的命令，比如说修改一些配置，通过 supervisor 去重新拉起这个应用，都是可以的。</p><p>那如果指定这一个 pod 里面可能包含着多个 container，这个时候该怎么办呢？怎么通过 pod 来指定 container 呢？其实这个时候有一个参数叫做 -c，如上图下方的命令所示。-c 后面是一个 container-name，可以通过 pod 在指定 -c 到这个 container-name，具体指定要进入哪个 container，后面再跟上相应的具体的命令，通过这种方式来实现一个多容器的命令的一个进入，从而实现多容器的一个远程调试。 </p><h5 id="应用远程调试-Servic-远程调试"><a href="#应用远程调试-Servic-远程调试" class="headerlink" title="应用远程调试 - Servic 远程调试"></a>应用远程调试 - Servic 远程调试</h5><p>那么 service 的远程调试该怎么做呢？service 的远程调试其实分为两个部分： </p><ul><li>第一个部分是说我想将一个服务暴露到远程的一个集群之内，让远程集群内的一些应用来去调用本地的一个服务，这是一条反向的一个链路；</li><li>还有一种方式是我想让这个本地服务能够去调远程的服务，那么这是一条正向的链路。</li></ul><p>在反向列入上面有这样一个开源组件，叫做 **<u>Telepresence</u>**，它可以将本地的应用代理到远程集群中的一个 service 上面，使用它的方式非常简单。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570503307524-cc111087-301f-4db3-9f29-b8f94345699a.png" alt="image.png"></p><p>首先先将 Telepresence 的一个 Proxy 应用部署到远程的 K8s 集群里面。然后将远程单一个 deployment swap 到本地的一个 application，使用的命令就是 **<u>Telepresence-swap-deployment 然后以及远程的 DEPLOYMENT_NAME</u>**。通过这种方式就可以将本地一个 application 代理到远程的 service 之上、可以将应用在远程集群里面进行本地调试，这个有兴趣的同学可以到 GitHub 上面来看一下这个插件的使用的方式。</p><p>第二个是如果本地应用需要调用远程集群的服务时候，可以通过 port-forward 的方式将远程的应用调用到本地的端口之上。比如说现在远程的里面有一个 API server，这个 API server 提供了一些端口，本地在调试 Code 时候，想要直接调用这个 API server，那么这时，比较简单的一个方式就是通过 port-forward 的方式。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570503322949-7064b86b-cdea-4b70-af98-bbf26e22e27d.png" alt="image.png"></p><p>它的使用方式是 kubectl port-forward，然后 service 加上远程的 service name，再加上相应的 namespace，后面还可以加上一些额外的参数，比如说端口的一个映射，通过这种机制就可以把远程的一个应用代理到本地的端口之上，此时通过访问本地端口就可以访问远程的服务。</p><h5 id="开源的调试工具-kubectl-debug"><a href="#开源的调试工具-kubectl-debug" class="headerlink" title="开源的调试工具 - kubectl-debug"></a>开源的调试工具 - kubectl-debug</h5><p>最后再给大家介绍一个开源的调试工具，它也是 kubectl 的一个插件，叫 kubectl-debug。我们知道在 K8s 里面，底层的容器 runtime 比较常见的就是类似像 docker 或者是 containerd，不论是 docker 还是 containerd，它们使用的一个机制都是基于 Linux namespace 的一个方式进行虚拟化和隔离的。</p><p>通常情况下 ，并不会在镜像里面带特别多的调试工具，类似像 netstat telnet 等等这些 ，因为这个会造成应用整体非常冗余。那么如果想要调试的时候该怎么做呢？其实这个时候就可以依赖类似于像 kubectl-debug 这样一个工具。</p><p>kubectl-debug 这个工具是依赖于 Linux namespace 的方式来去做的，它可以 datash 一个 Linux namespace 到一个额外的 container，然后在这个 container 里面执行任何的 debug 动作，其实和直接去 debug 这个 Linux namespace 是一致的。这里有一个简单的操作，给大家来介绍一下：</p><p>这个地方其实已经安装好了 kubectl-debug，它是 kubectl 的一个插件。所以这个时候，你可以直接通过 kubectl-debug 这条命令来去诊断远程的一个 pod。像这个例子里面，当执行 debug 的时候，实际上它首先会先拉取一些镜像，这个镜像里面实际上会默认带一些诊断的工具。当这个镜像启用的时候，它会把这个 debug container 进行启动。与此同时会把这个 container 和相应的你要诊断的这个 container 的 namespace 进行挂靠，也就说此时这个 container 和你是同 namespace 的，类似像网络站，或者是类似像内核的一些参数，其实都可以在这个 debug container 里面实时地进行查看。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570503431005-d0a56ed2-4a7d-4a71-bdee-65ce5635d829.png" alt="image.png"></p><p>像这个例子里面，去查看类似像 hostname、进程、netstat 等等，这些其实都是和这个需要 debug 的 pod 是在同一个环境里面的，所以你之前这三条命令可以看到里面相关的信息。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570503480829-fe86c647-228f-486e-9f24-edb3a0e202d5.png" alt="image.png"></p><p>如果此时进行 logout 的话，相当于会把相应的这个 debug pod 杀掉，然后进行退出，此时对应用实际上是没有任何的影响的。那么通过这种方式可以不介入到容器里面，就可以实现相应的一个诊断。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1570503514061-af6ea2ab-4539-41ef-bfd9-530e2ac3a5fd.png" alt="image.png"></p><p> 此外它还支持额外的一些机制，比如说我给设定一些 image，然后类似像这里面安装了的是 htop，然后开发者可以通过这个机制来定义自己需要的这个命令行的工具，并且通过这种 image 的方式设置进来。那么这个时候就可以通过这种机制来调试远程的一个 pod。</p><h4 id="本节总结"><a href="#本节总结" class="headerlink" title="本节总结"></a><strong>本节总结</strong></h4><ul><li><p>关于 Liveness 和 Readiness 的指针。Liveness probe 就是保活指针，它是用来看 pod 是否存活的，而 Readiness probe 是就绪指针，它是判断这个 pod 是否就绪的，如果就绪了，就可以对外提供服务。这个就是 Liveness 和 Readiness 需要记住的部分；</p></li><li><p>应用诊断的三个步骤：</p><p>首先 describe 相应的一个状态；</p><p>然后提供状态来排查具体的一个诊断方向；</p><p>最后来查看相应对象的一个 event 获取更详细的一个信息；</p></li><li><p>提供 pod 一个日志来定位应用的自身的一个状态；</p></li><li><p>远程调试的一个策略，如果想把本地的应用代理到远程集群，此时可以通过 Telepresence 这样的工具来实现，如果想把远程的应用代理到本地，然后在本地进行调用或者是调试，可以用类似像 port-forward 这种机制来实现。</p></li></ul><p><strong><u>PS：本文摘录于阿里云公开课，仅供学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> status </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10_应用存储和持久化数据卷：存储快照与拓扑调度</title>
      <link href="2020/10/02/k8s-snap-topology/"/>
      <url>2020/10/02/k8s-snap-topology/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="10-应用存储和持久化数据卷：存储快照与拓扑调度"><a href="#10-应用存储和持久化数据卷：存储快照与拓扑调度" class="headerlink" title="10_应用存储和持久化数据卷：存储快照与拓扑调度"></a>10_应用存储和持久化数据卷：存储快照与拓扑调度</h3><h4 id="一、基本知识"><a href="#一、基本知识" class="headerlink" title="一、基本知识"></a><strong>一、基本知识</strong></h4><h5 id="存储快照产生背景"><a href="#存储快照产生背景" class="headerlink" title="存储快照产生背景"></a><strong>存储快照产生背景</strong></h5><p>在使用存储时，为了提高数据操作的容错性，我们通常有需要对线上数据进行snapshot，以及能快速restore的能力。<br>另外，当需要对线上数据进行快速的复制以及迁移等动作，如进行环境的复制、数据开发等功能时，都可以通过存储快照来满足需求，而 K8s 中通过 CSI Snapshotter controller 来实现存储快照的功能。</p><h5 id="存储快照用户接口-Snapshot"><a href="#存储快照用户接口-Snapshot" class="headerlink" title="存储快照用户接口-Snapshot"></a>存储快照用户接口-Snapshot</h5><p>我们知道，K8s 中通过 pvc 以及 pv 的设计体系来简化用户对存储的使用，而存储快照的设计其实是仿照 pvc &amp; pv 体系的设计思想。<br>当用户需要存储快照的功能时，可以通过 VolumeSnapshot 对象来声明，并指定相应的 VolumeSnapshotClass 对象，之后由集群中的相关组件动态生成存储快照以及存储快照对应的对象 VolumeSnapshotContent。如下对比图所示，动态生成 VolumeSnapshotContent 和动态生成 pv 的流程是非常相似的。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194512-aa6b0073-db0d-4e7a-96a6-7576ceac767c.png" alt="img"></p><h5 id="存储快照用户接口-Restore"><a href="#存储快照用户接口-Restore" class="headerlink" title="存储快照用户接口-Restore"></a>存储快照用户接口-Restore</h5><p>有了存储快照之后，如何将快照数据快速恢复过来呢？如下图所示： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195691-527f012f-8544-48f0-a825-26324596340d.png" alt="img"></p><p>如上所示的流程，可以借助 PVC 对象将其的 dataSource 字段指定为 VolumeSnapshot 对象。这样当 PVC 提交之后，会由集群中的相关组件找到 dataSource 所指向的存储快照数据，然后新创建对应的存储以及 pv 对象，将存储快照数据恢复到新的 pv 中，这样数据就恢复回来了，这就是存储快照的restore用法。</p><h5 id="Topolopy-含义"><a href="#Topolopy-含义" class="headerlink" title="Topolopy-含义"></a>Topolopy-含义</h5><p>首先了解一下拓扑是什么意思：这里所说的拓扑是 <strong>K8s 集群中为管理的 nodes 划分的一种“位置”关系</strong>，意思为：可以通过在 node 的 labels 信息里面填写某一个 node 属于某一个拓扑。 </p><p>常见的有三种，这三种在使用时经常会遇到的： </p><ul><li><p>第一种，在使用云存储服务的时候，经常会遇到 <strong>region</strong>，也就是**<u>地区</u>**的概念，在 K8s 中常通过 label failure-domain.beta.kubernetes.io/region 来标识。这个是为了标识单个 K8s 集群管理的跨 region 的 nodes 到底属于哪个地区； </p></li><li><p>第二种，比较常用的是**<u>可用区</u><strong>，也就是 available **zone</strong>，在 K8s 中常通过 label failure-domain.beta.kubernetes.io/zone 来标识。这个是为了标识单个 K8s 集群管理的跨 zone 的 nodes 到底属于哪个可用区；</p></li><li><p>第三种，是 <strong>hostname，</strong>就是**<u>单机维度</u>**，是拓扑域为 node 范围，在 K8s 中常通过 label kubernetes.io/hostname 来标识，这个在文章的最后讲 local pv 的时候，会再详细描述。</p></li></ul><p>上面讲到的三个拓扑是比较常用的，而拓扑其实是可以自己定义的。**<u>可以定义一个字符串来表示一个拓扑域</u>**，这个 key 所对应的值其实就是拓扑域下不同的拓扑位置。</p><p>举个例子：可以用 <strong>rack，</strong>也就是机房中的机架这个纬度来做一个拓扑域。这样就可以将不同机架 (rack) 上面的机器标记为不同的拓扑位置，也就是说可以将不同机架上机器的位置关系通过 rack 这个纬度来标识。属于 rack1 上的机器，node label 中都添加 rack 的标识，它的 value 就标识成 rack1，即 rack=rack1；另外一组机架上的机器可以标识为 rack=rack2，这样就可以通过机架的纬度就来区分来 K8s 中的 node 所处的位置。</p><p>接下来就一起来看看拓扑在 K8s 存储中的使用。</p><h5 id="存储拓扑调度产生背景"><a href="#存储拓扑调度产生背景" class="headerlink" title="存储拓扑调度产生背景"></a>存储拓扑调度产生背景</h5><p>上一节课我们说过，K8s 中通过 PV 的 PVC 体系将存储资源和计算资源分开管理了。如果创建出来的 PV有”访问位置”的限制，也就是说，它通过 **<u>nodeAffinity 来指定哪些 node 可以访问这个 PV</u>**。为什么会有这个访问位置的限制？</p><p>因为在 K8s 中创建 pod 的流程和创建 PV 的流程，其实可以认为是并行进行的，这样的话，就没有办法来保证 pod 最终运行的 node 是能访问到 有位置限制的 PV 对应的存储，最终导致 pod 没法正常运行。这里来举两个经典的例子：</p><p>首先来看一下 <strong>Local PV 的例子</strong>，Local PV 是将一个 node 上的本地存储封装为 PV，通过使用 PV 的方式来访问本地存储。为什么会有 Local PV 的需求呢？简单来说，<u>刚开始使用 PV 或 PVC 体系的时候，主要是用来针对分布式存储的，分布式存储依赖于网络</u>，如果某些业务对 I/O 的性能要求非常高，可能通过网络访问分布式存储没办法满足它的性能需求。这个时候需要使用本地存储，刨除了网络的 overhead，性能往往会比较高。但是用本地存储也是有坏处的！分布式存储可以通过多副本来保证高可用，但本地存储就需要业务自己用类似 Raft 协议来实现多副本高可用。</p><p>接下来看一下 Local PV 场景可能如果没有对PV做“访问位置”的限制会遇到什么问题？ </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195576-951dd2cc-78ce-4e2c-b52a-0d871609f8cd.png" alt="img"></p><p>当用户在提交完 PVC 的时候，K8s PV controller可能绑定的是 node2 上面的 PV。但是，真正使用这个 PV 的 pod，在被调度的时候，有可能调度在 node1 上，最终导致这个 pod 在起来的时候没办法去使用这块存储，因为 pod 真实情况是要使用 node2 上面的存储。</p><p>第二个(如果不对 PV 做“访问位置”的限制会出问题的)场景：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195664-bfcc77ea-9ad7-4584-86e9-23f8d2b14be5.png" alt="img"></p><p>如果搭建的 K8s 集群管理的 nodes 分布在单个区域多个可用区内。在创建动态存储的时候，创建出来的存储属于可用区 2，但之后在提交使用该存储的 pod，它可能会被调度到可用区 1 了，那就可能没办法使用这块存储。因此像阿里云的云盘，也就是块存储，当前不能跨可用区使用，如果创建的存储其实属于可用区 2，但是 pod 运行在可用区 1，就没办法使用这块存储，这是第二个常见的问题场景。</p><p>接下来我们来看看 K8s 中如何通过存储拓扑调度来解决上面的问题的。</p><h5 id="存储拓扑调度"><a href="#存储拓扑调度" class="headerlink" title="存储拓扑调度"></a>存储拓扑调度</h5><p>首先总结一下之前的两个问题，它们都是 PV 在给 PVC 绑定或者动态生成 PV 的时候，我并不知道后面将使用它的 pod 将调度在哪些 node 上。但 PV 本身的使用，是对 pod 所在的 node 有拓扑位置的限制的，如 Local PV 场景是我要调度在指定的 node 上我才能使用那块 PV，而对第二个问题场景就是说跨可用区的话，必须要在将使用该 PV 的 pod 调度到同一个可用区的 node 上才能使用阿里云云盘服务，那 K8s 中怎样去解决这个问题呢？</p><p>简单来说，在 K8s 中将 PV 和 PVC 的 binding 操作和动态创建 PV 的操作做了 delay，delay 到 pod 调度结果出来之后，再去做这两个操作。这样的话有什么好处？</p><ul><li>首先，如果要是所要使用的 PV 是预分配的，如 Local PV，其实使用这块 PV 的 pod 它对应的 PVC 其实还没有做绑定，就可以通过调度器在调度的过程中，结合 pod 的计算资源需求(如 cpu/mem) 以及 pod 的 PVC 需求，选择的 node 既要满足计算资源的需求又要 pod 使用的 pvc 要能 binding 的 pv 的 nodeaffinity 限制;</li><li>其次对动态生成 PV 的场景其实就相当于是如果知道 pod 运行的 node 之后，就可以根据 node 上记录的拓扑信息来动态的创建这个 PV，也就是保证新创建出来的 PV 的拓扑位置与运行的 node 所在的拓扑位置是一致的，如上面所述的阿里云云盘的例子，既然知道 pod 要运行到可用区 1，那之后创建存储时指定在可用区 1 创建即可。</li></ul><p>为了实现上面所说的延迟绑定和延迟创建 PV，需要在 K8s 中的改动涉及到的相关组件有三个：</p><ul><li>PV Controller 也就是 persistent volume controller，它需要支持延迟 Binding 这个操作。</li><li>另一个是动态生成 PV 的组件，如果 pod 调度结果出来之后，它要根据 pod 的拓扑信息来去动态的创建 PV。</li><li>第三组件，也是最重要的一个改动点就是 kube-scheduler。在为 pod 选择 node 节点的时候，它不仅要考虑 pod 对 CPU/MEM 的计算资源的需求，它还要考虑这个 pod 对存储的需求，也就是根据它的 PVC，它要先去看一下当前要选择的 node，能否满足能和这个 PVC 能匹配的 PV 的 nodeAffinity；或者是动态生成 PV 的过程，它要根据 StorageClass 中指定的拓扑限制来 check 当前的 node 是不是满足这个拓扑限制，这样就能保证调度器最终选择出来的 node 就能满足存储本身对拓扑的限制。 </li></ul><p>这就是存储拓扑调度的相关知识。</p><h4 id="二、用例解读"><a href="#二、用例解读" class="headerlink" title="二、用例解读"></a><strong>二、用例解读</strong></h4><p>接下来通过 yaml 用例来解读一下第一部分的基本知识。</p><h5 id="Volume-Snapshot-Restore示例"><a href="#Volume-Snapshot-Restore示例" class="headerlink" title="Volume Snapshot/Restore示例"></a>Volume Snapshot/Restore示例</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194874-b4683ef0-f4a0-4cc0-b66e-9dea1f31bd99.png" alt="img"></p><p>下面来看一下存储快照如何使用：首先需要集群管理员，在集群中创建 VolumeSnapshotClass 对象，VolumeSnapshotClass 中一个重要字段就是 Snapshot，它是指定真正创建存储快照所使用的卷插件，这个卷插件是需要提前部署的，稍后再说这个卷插件。</p><p>接下来用户他如果要做真正的存储快照，需要声明一个 VolumeSnapshotClass，VolumeSnapshotClass 首先它要指定的是 VolumeSnapshotClassName，接着它要指定的一个非常重要的字段就是 source，这个 source 其实就是指定快照的数据源是啥。这个地方指定 name 为 disk-pvc，也就是说通过这个 pvc 对象来创建存储快照。提交这个 VolumeSnapshot 对象之后，集群中的相关组件它会找到这个 PVC 对应的 PV 存储，对这个 PV 存储做一次快照。</p><p>有了存储快照之后，那接下来怎么去用存储快照恢复数据呢？这个其实也很简单，通过声明一个新的 PVC 对象并在它的 spec 下面的 DataSource 中来声明我的数据源来自于哪个 VolumeSnapshot，这里指定的是 disk-snapshot 对象，当我这个 PVC 提交之后，集群中的相关组件，它会动态生成新的 PV 存储，这个新的 PV 存储中的数据就来源于这个 Snapshot 之前做的存储快照。 </p><h5 id="Local-PV-的示例"><a href="#Local-PV-的示例" class="headerlink" title="Local PV 的示例"></a>Local PV 的示例</h5><p>如下图看一下 Local PV 的 yaml 示例：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195580-5d8a0272-c8d2-480d-b68b-94b9b53ebaa6.png" alt="img"></p><p>Local PV 大部分使用的时候都是通过**<u>静态创建的方式</u>**，也就是要先去声明 PV 对象，既然 Local PV 只能是本地访问，就需要在声明 PV 对象的，在 PV 对象中通过 <u>nodeAffinity 来限制我这个 PV 只能在单 node 上访问，也就是给这个 PV 加上拓扑限制</u>。如上图拓扑的 key 用 kubernetes.io/hostname 来做标记，也就是只能在 node1 访问。如果想用这个 PV，你的 pod 必须要调度到 node1 上。</p><p>既然是静态创建 PV 的方式，这里为什么还需要 storageClassname 呢？<br>前面也说了，在 Local PV 中，如果要想让它正常工作，需要用到<strong>延迟绑定特性</strong>才行，那既然是延迟绑定，当用户在写完 PVC 提交之后，即使集群中有相关的 PV 能跟它匹配，它也暂时不能做匹配，也就是说 PV controller 不能马上去做 binding，这个时候你就要通过一种手段来告诉 PV controller，什么情况下是不能立即做 binding。这里的 storageClass 就是为了起到这个副作用，我们可以看到 storageClass 里面的 provisioner 指定的是 <strong>no-provisioner</strong>，其实就是相当于告诉 K8s 它不会去动态创建 PV，它主要用到 storageclass 的 VolumeBindingMode 字段，叫 <u>WaitForFirstConsumer</u>，可以先简单地认为它是延迟绑定。</p><p>当用户开始提交 PVC 的时候，pv controller 在看到这个 pvc 的时候，它会找到相应的 storageClass，发现这个 BindingMode 是延迟绑定，它就不会做任何事情。</p><p>之后当真正使用这个 pvc 的 pod，在调度的时候，当它恰好调度在符合 pv nodeaffinity 的 node 的上面后，这个 pod 里面所使用的 PVC 才会真正地与 PV 做绑定，这样就保证我 pod 调度到这台 node 上之后，这个 PVC 才与这个 PV 绑定，最终保证的是创建出来的 pod 能访问这块 Local PV，也就是静态 Provisioning 场景下怎么去满足 PV 的拓扑限制。 </p><h5 id="限制-Dynamic-Provisioning-PV-拓扑示例"><a href="#限制-Dynamic-Provisioning-PV-拓扑示例" class="headerlink" title="限制 Dynamic Provisioning PV 拓扑示例"></a>限制 Dynamic Provisioning PV 拓扑示例</h5><p>再看一下动态 Provisioning PV 的时候，怎么去做拓扑限制的？</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194620-720a4fa2-4edb-4f40-9fb3-ef1a55c0f51b.png" alt="img"></p><p>动态就是指动态创建 PV 就有拓扑位置的限制，那怎么去指定？ </p><p>首先在 storageclass 还是需要指定 BindingMode，就是 WaitForFirstConsumer，就是延迟绑定。 </p><p>其次特别重要的一个字段就是 <strong>allowedTopologies</strong>，限制就在这个地方。上图中可以看到拓扑限制是可用区的级别，这里其实有两层意思： </p><ol><li>第一层意思就是说我在动态创建 PV 的时候，创建出来的 PV 必须是在这个可用区可以访问的;</li><li>第二层含义是因为声明的是延迟绑定，那调度器在发现使用它的 PVC 正好对应的是该 storageclass 的时候，调度 pod 就要选择位于该可用区的 nodes。</li></ol><p>总之，就是要从两方面保证，<br>一是动态创建出来的存储时要能被这个可用区访问的，<br>二是我调度器在选择 node 的时候，要落在这个可用区内的，这样的话就保证我的存储和我要使用存储的这个 pod 它所对应的 node，它们之间的拓扑域是在同一个拓扑域，用户在写 PVC 文件的时候，写法是跟以前的写法是一样的，主要是在 storageclass 中要做一些拓扑限制。</p><h4 id="三、操作演示"><a href="#三、操作演示" class="headerlink" title="三、操作演示"></a><strong>三、操作演示</strong></h4><p>本节将在线上环境来演示一下前面讲解的内容。 </p><p>首先来看一下我的阿里云服务器上搭建的 K8s 服务。总共有 3 个 node 节点。一个 master 节点，两个 node。其中 master 节点是不能调度 pod 的。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194849-acd10ee0-b792-4838-a09b-c392b0b94874.png" alt="img"></p><p>再看一下，我已经提前把我需要的插件已经布好了，一个是 snapshot 插件 (csi-external-snapshot*)，一个是动态云盘的插件 (csi-disk*)。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194845-6d83d2dc-c3dc-41c0-b567-5210739e906e.png" alt="img"></p><p>现在开始 snapshot 的演示。首先去动态创建云盘，然后才能做 snapshot。动态创建云盘需要先创建 storageclass，然后去根据 PVC 动态创建 PV，然后再创建一个使用它的 pod 了。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195569-40bb1cca-b35a-41ce-87d5-651c581ff583.png" alt="img"></p><p>有个以上对象，现在就可以做 snapshot 了，首先看一下做 snapshot 需要的第一个配置文件：snapshotclass.yaml。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194835-dbeb8206-5bfa-44b7-83d1-9aab45261251.png" alt="img"></p><p>其实里面就是指定了在做存储快照的时候需要使用的插件，这个插件刚才演示了已经部署好了，就是 csi-external-snapshot-0 这个插件。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195666-f4bbca6b-9613-49de-b8cd-ecc1dcae4252.png" alt="img"></p><p>接下来创建 volume-snapshotclass 文件，创建完之后就开始了 snapshot。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194598-0e4fc921-904d-4ffc-9f41-81c1919c310c.png" alt="img"></p><p>然后看 snapshot.yaml，Volumesnapshot 声明创建存储快照了，这个地方就指定刚才创建的那个 PVC 来做的数据源来做 snapshot，那我们开始创建。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195665-00167b7b-a9a0-4134-8952-dc68af84a4aa.png" alt="img"></p><p>我们看一下 Snapshot 有没有创建好，如下图所示，content 已经在 11 秒之前创建好了。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194555-0c1ea298-ce1f-4db6-bd2f-71f7c14762f5.png" alt="img"></p><p>可以看一下它里面的内容，主要看 volumesnapshotcontent 记录的一些信息，这个是我 snapshot 出来之后，它记录的就是云存储厂商那边返回给我的 snapshot 的 ID。然后是这个 snapshot 数据源，也就是刚才指定的 PVC，可以通过它会找到对应的 PV。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195572-806015e9-fbfd-41e3-adf4-ec5cd3d7f6df.png" alt="img"></p><p>snapshot 的演示大概就是这样，把刚才创建的 snapshot 删掉，还是通过 volumesnapshot 来删掉。然后看一下，动态创建的这个 volumesnapshotcontent 也被删掉。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195577-5f02c4a5-7ba2-4f11-ad04-c3c14b8227ef.png" alt="img"></p><p>接下来看一下动态 PV 创建的过程加上一些拓扑限制，首先将的 storageclass 创建出来，然后再看一下 **<u>storageclass 里面做的限制</u>**，storageclass 首先还是指定它的 BindingMode 为 WaitForFirstConsumer，也就是做延迟绑定，然后是对它的拓扑限制，我这里面在 allowedTopologies 字段中配置了一个可用区级别的限制。  </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195576-5a4485c1-c5f7-4972-99e0-1d4490a309ca.png" alt="img"></p><p>来尝试创建一下的 PVC，PVC 创建出来之后，理论上它应该处在 pending 状态。看一下，它现在因为它要做延迟绑定，由于现在没有使用它的 pod，暂时没办法去做绑定，也没办法去动态创建新的 PV。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194562-57947007-a2bb-471d-87a3-e9c0589bf191.png" alt="img"></p><p>接下来创建使用该 pvc 的 pod 看会有什么效果，看一下 pod，pod 也处在 pending了。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195579-5a101390-ed6f-42f4-83c8-87af76bdcec2.png" alt="img"></p><p>那来看一下 pod 为啥处在 pending 状态，可以看一下是调度失败了，调度失败原因：一个 node 由于 taint 不能调度，这个其实是 master，另外两个 node 也是没有说是可绑定的 PV。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194843-3a326d47-9d36-437c-a760-106eeeb77eea.png" alt="img"></p><p>为什么会有两个 node 出现没有可绑定的 pv 的错误？不是动态创建么？ </p><p>我们来仔细看看 storageclass 中的拓扑限制，通过上面的讲解我们知道，这里限制使用该 storageclass 创建的 PV 存储必须在可用区 cn-hangzhou-d 可访问的，而使用该存储的 pod 也必须调度到 cn-hangzhou-d 的 node 上。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195574-deac570b-5185-4284-aa99-8bb7c5e9ea63.png" alt="img"></p><p>那就来看一下 node 节点上有没有这个拓扑信息，如果它没有当然是不行了。 </p><p>看一下第一个 node 的全量信息吧，主要找它的 <strong>labels 里面的信息</strong>，看 lables 里面的确有一个这样的 key。也就是说有一个这样的拓扑，但是这指定是 cn-hangzhou-b，刚才 storageclass 里面指定的是 cn-hangzhou-d。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194832-08995d91-f4c2-4456-a40f-0a488e389b89.png" alt="img"></p><p>那看一下另外的一个 node 上的这个拓扑信息写的也是 hangzhou-b，但是我们那个 storageclass 里面限制是 d。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195652-2e5b63f0-cb23-4ce6-9ac6-3aa0a321ac65.png" alt="img"></p><p>这就导致最终没办法将 pod 调度在这两个 node 上。现在我们修改一下 storageclass 中的拓扑限制，将 cn-hangzhou-d 改为 cn-hangzhou-b。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195897-0b8dea87-9b32-427b-bebd-b5ad44e0ba9e.png" alt="img"></p><p>改完之后再看一下，其实就是说我动态创建出来的 PV 要能被 hangzhou-b 这个可用区访问的，使用该存储的 pod 要调度到该可用区的 node 上。把之前的 pod 删掉，让它重新被调度看一下有什么结果，好，现在这个已经调度成功了，就是已经在启动容器阶段。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195584-9aeea04e-5b42-4b3e-b554-c8e73d6debf3.png" alt="img"></p><p>说明刚才把 storageclass 它里面的对可用区的限制从 hangzhou-d 改为 hangzhou-b 之后，集群中就有两个 node，它的拓扑关系是和 storageclass 里要求的拓扑关系是相匹配的，这样的话它就能保证它的 pod 是有 node 节点可调度的。上图中最后一点 Pod 已经 Running 了，说明刚才的拓扑限制改动之后可以 work 了。 </p><h4 id="四、处理流程"><a href="#四、处理流程" class="headerlink" title="四、处理流程"></a><strong>四、处理流程</strong></h4><h5 id="kubernetes-对-Volume-Snapshot-Restore-处理流程"><a href="#kubernetes-对-Volume-Snapshot-Restore-处理流程" class="headerlink" title="kubernetes 对 Volume Snapshot/Restore 处理流程"></a>kubernetes 对 Volume Snapshot/Restore 处理流程</h5><p>接下来看一下 K8s 中对存储快照与拓扑调度的具体处理流程。如下图所示：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982194841-767c437e-975a-4eca-ba02-2b53de059698.png" alt="img"></p><p>首先来看一下存储快照的处理流程，这里来首先解释一下 csi 部分。K8s 中对存储的扩展功能都是推荐通过 csi out-of-tree 的方式来实现的。</p><p>csi 实现存储扩展主要包含两部分： </p><ul><li>第一部分是由 K8s 社区推动实现的 **<u>csi controller 部分</u>**，也就是这里的 csi-snapshottor controller 以及 csi-provisioner controller，这些主要是通用的 controller 部分;</li><li>另外一部分是由特定的云存储厂商用自身 OpenAPI 实现的不同的 csi-plugin 部分，也叫存储的 driver 部分。</li></ul><p>两部分部件通过 unix domain socket 通信连接到一起。有这两部分，才能形成一个真正的存储扩展功能。</p><p>如上图所示，当用户提交 VolumeSnapshot 对象之后，会被 csi-snapshottor controller watch 到。之后它会通过 GPPC 调用到 csi-plugin，**<u>csi-plugin 通过 OpenAPI 来真正实现存储快照的动作</u>**，等存储快照已经生成之后，会返回到 csi-snapshottor controller 中，csi-snapshottor controller 会将存储快照生成的相关信息放到 VolumeSnapshotContent 对象中并将用户提交的 VolumeSnapshot 做 bound。这个 bound 其实就有点类似 PV 和 PVC 的 bound 一样。</p><p>有了存储快照，如何去使用存储快照恢复之前的数据呢？前面也说过，通过声明一个新的 PVC 对象，并且指定他的 dataSource 为 Snapshot 对象，当提交 PVC 的时候会被 csi-provisioner watch 到，之后会通过 GRPC 去创建存储。这里创建存储跟之前讲解的 csi-provisioner 有一个不太一样的地方，就是它里面还指定了 Snapshot 的 ID，当去云厂商创建存储时，需要多做一步操作，即将之前的快照数据恢复到新创建的存储中。之后流程返回到 csi-provisioner，它会将新创建的存储的相关信息写到一个新的 PV 对象中，新的 PV 对象被 PV controller watch 到它会将用户提交的 PVC 与 PV 做一个 bound，之后 pod 就可以通过 PVC 来使用 Restore 出来的数据了。这是 K8s 中对存储快照的处理流程。 </p><h5 id="kubernetes-对-Volume-Topology-aware-Scheduling-处理流程"><a href="#kubernetes-对-Volume-Topology-aware-Scheduling-处理流程" class="headerlink" title="kubernetes 对 Volume Topology-aware Scheduling 处理流程"></a><strong>kubernetes</strong> 对 Volume Topology-aware Scheduling 处理流程</h5><p>接下来看一下存储拓扑调度的处理流程：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/225439/1566982195594-a9b23a64-1fbd-48d2-9638-956aaf2ed4b8.png" alt="img"></p><p><strong>第一个步骤</strong>其实就是要去声明延迟绑定，这个通过 StorageClass 来做的，上面已经阐述过，这里就不做详细描述了。 </p><p>接下来看一下调度器，上图中红色部分就是调度器新加的存储拓扑调度逻辑，我们先来看一下不加红色部分时调度器的为一个 pod 选择 node 时，它的大概流程： </p><ul><li>首先用户提交完 pod 之后，会被调度器 watch 到，它就会去首先做**<u>预选</u>**，预选就是说它会将集群中的所有 node 都来与这个 pod 它需要的资源做匹配；</li><li>如果匹配上，就相当于这个 node 可以使用，当然可能不止一个 node 可以使用，最终会选出来一批 node；</li><li>然后再经过第二个阶段优选，优选就相当于我要对这些 node 做一个打分的过程，通过打分找到最匹配的一个 node；</li><li>之后调度器将调度结果写到 pod 里面的 spec.nodeName 字段里面，然后会被相应的 node 上面的 kubelet watch 到，最后就开始创建 pod 的整个流程。</li></ul><p>那现在看一下加上卷相关的调度的时候，筛选 node(<strong>第二个步骤</strong>)又是怎么做的？ </p><ul><li>先就要找到 pod 中使用的所有 PVC，找到已经 bound 的 PVC，以及需要延迟绑定的这些 PVC；</li><li>对于已经 bound 的 PVC，要 check 一下它对应的 PV 里面的 nodeAffinity 与当前 node 的拓扑是否匹配 。如果不匹配， 就说明这个 node 不能被调度。如果匹配，继续往下走，就要去看一下需要延迟绑定的 PVC；</li><li>对于需要延迟绑定的 PVC。先去获取集群中存量的 PV，满足 PVC 需求的，先把它全部捞出来，然后再将它们一一与当前的 node labels 上的拓扑做匹配，如果它们(存量的 PV)都不匹配，那就说明当前的存量的 PV 不能满足需求，就要进一步去看一下如果要动态创建 PV 当前 node 是否满足拓扑限制，也就是还要进一步去 check StorageClass 中的拓扑限制，如果 StorageClass 中声明的拓扑限制与当前的 node 上面已经有的 labels 里面的拓扑是相匹配的，那其实这个 node 就可以使用，如果不匹配，说明该 node 就不能被调度。</li></ul><p>经过这上面步骤之后，就找到了所有即满足 pod 计算资源需求又满足 pod 存储资源需求的所有 nodes。</p><p>当 node 选出来之后，<strong>第三个步骤</strong>就是调度器内部做的一个优化。这里简单过一下，就是更新经过预选和优选之后，pod 的 node 信息，以及 PV 和 PVC 在 scheduler 中做的一些 cache 信息。</p><p><strong>第四个步骤</strong>也是重要的一步，已经选择出来 node 的 Pod，不管其使用的 PVC 是要 binding 已经存在的 PV，还是要做动态创建 PV，这时就可以开始做。由调度器来触发，调度器它就会去更新 PVC 对象和 PV 对象里面的相关信息，然后去触发 PV controller 去做 binding 操作，或者是由 csi-provisioner 去做动态创建流程。 </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>通过对比 PVC&amp;PV 体系讲解了存储快照的相关 K8s 资源对象以及使用方法；</li><li>通过两个实际场景遇到的问题引出存储拓扑调度功能必要性，以及 K8s 中如何通过拓扑调度来解决这些问题；</li><li>通过剖析 K8s 中存储快照和存储拓扑调度内部运行机制，深入理解该部分功能的工作原理。</li></ol><p><strong><u>PS：本文摘录于阿里云公开课，仅供学习与参考。</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> snap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9_应用存储和持久化数据卷-核心知识</title>
      <link href="2020/10/01/k8s-pv-pvc/"/>
      <url>2020/10/01/k8s-pv-pvc/</url>
      
        <content type="html"><![CDATA[<h3 id="9-应用存储和持久化数据卷-核心知识"><a href="#9-应用存储和持久化数据卷-核心知识" class="headerlink" title="9_应用存储和持久化数据卷-核心知识"></a>9_应用存储和持久化数据卷-核心知识</h3><h4 id="一、Volumes-介绍"><a href="#一、Volumes-介绍" class="headerlink" title="一、Volumes 介绍"></a>一、Volumes 介绍</h4><h5 id="Pod-Volumes"><a href="#Pod-Volumes" class="headerlink" title="Pod Volumes"></a>Pod Volumes</h5><p>首先来看一下 Pod Volumes 的使用场景： </p><ul><li>场景一：如果 pod 中的某一个容器在运行时异常退出，被 kubelet 重新拉起之后，如何保证之前容器产生的重要数据没有丢失？</li><li>场景二：如果同一个 pod 中的多个容器想要共享数据，应该如何去做？ </li></ul><p>以上两个场景，其实都可以借助 Volumes 来很好地解决，接下来首先看一下 Pod Volumes 的常见类型： </p><ol><li>本地存储，常用的有 emptydir/hostpath；</li><li>网络存储：网络存储当前的实现方式有两种，一种是 in-tree，它的实现的代码是放在 K8s 代码仓库中的，随着k8s对存储类型支持的增多，这种方式会给k8s本身的维护和发展带来很大的负担；而第二种实现方式是 out-of-tree，它的实现其实是给 K8s 本身解耦的，通过抽象接口将不同存储的driver实现从k8s代码仓库中剥离，因此out-of-tree 是后面社区主推的一种实现网络存储插件的方式；</li><li>Projected Volumes：它其实是将一些配置信息，如 secret/configmap 用卷的形式挂载在容器中，让容器中的程序可以通过POSIX接口来访问配置数据；</li><li>PV 与 PVC 就是今天要重点介绍的内容。 </li></ol><h5 id="Persistent-Volumes"><a href="#Persistent-Volumes" class="headerlink" title="Persistent Volumes"></a>Persistent Volumes</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142680-ff878879-bc0b-4af6-800c-be6a29045595.png" alt="img"></p><p>接下来看一下 PV（Persistent Volumes）。既然已经有了 Pod Volumes，为什么又要引入 PV 呢？我们知道 pod 中声明的 volume 生命周期与 pod 是相同的，以下有几种常见的场景： </p><ul><li>场景一：pod 重建销毁，如用 Deployment 管理的 pod，在做镜像升级的过程中，会产生新的 pod并且删除旧的 pod ，那新旧 pod 之间如何复用数据？</li><li>场景二：宿主机宕机的时候，要把上面的 pod 迁移，这个时候 StatefulSet 管理的 pod，其实已经实现了带卷迁移的语义。这时通过 Pod Volumes 显然是做不到的；</li><li>场景三：多个 pod 之间，如果想要共享数据，应该如何去声明呢？我们知道，同一个 pod 中多个容器想共享数据，可以借助 Pod Volumes 来解决；当多个 pod 想共享数据时，Pod Volumes 就很难去表达这种语义；</li><li>场景四：如果要想对数据卷做一些功能扩展性，如：snapshot、resize 这些功能，又应该如何去做呢？ </li></ul><p>以上场景中，通过 Pod Volumes 很难准确地表达它的复用/共享语义，对它的扩展也比较困难。因此 K8s 中又引入了 <strong>Persistent Volumes</strong> 概念，它可以**<u>将存储和计算分离</u>**，通过不同的组件来管理存储资源和计算资源，然后解耦 pod 和 Volume 之间生命周期的关联。这样，当把 pod 删除之后，它使用的PV仍然存在，还可以被新建的 pod 复用。</p><h5 id="PVC-设计意图"><a href="#PVC-设计意图" class="headerlink" title="PVC 设计意图"></a>PVC 设计意图</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142654-db71605a-3f41-4e3d-a790-15a0548ab69c.png" alt="img"></p><p>了解 PV 后，应该如何使用它呢？ </p><p>用户在使用 PV 时其实是通过 PVC，为什么有了 PV 又设计了 PVC 呢？主要原因是为了**<u>简化K8s用户对存储的使用方式</u>**，做到职责分离。通常用户在使用存储的时候，只用声明所需的存储大小以及访问模式。 </p><p>访问模式是什么？其实就是：我要使用的存储是可以被多个node共享还是只能单node独占访问(注意是node level而不是pod level)？只读还是读写访问？用户只用关心这些东西，与存储相关的实现细节是不需要关心的。</p><p>通过 PVC 和 PV 的概念，将用户需求和实现细节解耦开，用户只用通过 PVC 声明自己的存储需求。PV是有集群管理员和存储相关团队来统一运维和管控，这样的话，就简化了用户使用存储的方式。可以看到，PV 和 PVC 的设计其实有点像面向对象的接口与实现的关系。用户在使用功能时，只需关心用户接口，不需关心它内部复杂的实现细节。</p><p>既然 PV 是由集群管理员统一管控的，接下来就看一下 PV 这个对象是怎么产生的。</p><h5 id="Static-Volume-Provisioning"><a href="#Static-Volume-Provisioning" class="headerlink" title="Static Volume Provisioning"></a>Static Volume Provisioning</h5><p>第一种产生方式：静态产生方式 - 静态 Provisioning。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142697-89ce0f33-57b7-4b02-b4e6-2a860233c87d.png" alt="img"></p><p>静态 Provisioning：由集群管理员事先去规划这个集群中的用户会怎样使用存储，它会先预分配一些存储，也就是预先创建一些 PV；然后用户在提交自己的存储需求（也就是 PVC）的时候，K8s 内部相关组件会帮助它把 PVC 和 PV 做绑定；之后用户再通过 pod 去使用存储的时候，就可以通过 PVC 找到相应的 PV，它就可以使用了。 </p><p>静态产生方式有什么不足呢？可以看到，首先需要集群管理员预分配，预分配其实是很难预测用户真实需求的。举一个最简单的例子：如果用户需要的是 20G，然而集群管理员在分配的时候可能有 80G 、100G 的，但没有 20G 的，这样就很难满足用户的真实需求，也会造成资源浪费。有没有更好的方式呢？ </p><h5 id="Dynamic-Volume-Provisioning"><a href="#Dynamic-Volume-Provisioning" class="headerlink" title="Dynamic Volume Provisioning"></a>Dynamic Volume Provisioning</h5><p>第二种访问方式：动态 Dynamic Provisioning。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142787-97d21240-2e27-4bae-8d7b-116933a7b882.png" alt="img"></p><p>动态供给是什么意思呢？就是说现在集群管理员不预分配 PV，他写了一个模板文件，这个模板文件是用来表示创建某一类型存储（块存储，文件存储等）所需的一些参数，这些参数是用户不关心的，给存储本身实现有关的参数。用户只需要提交自身的存储需求，也就是PVC文件，并在 PVC 中指定使用的存储模板（StorageClass）。 </p><p>K8s 集群中的管控组件，会结合 PVC 和 StorageClass 的信息动态，生成用户所需要的存储（PV），将 PVC 和 PV 进行绑定后，pod 就可以使用 PV 了。通过 StorageClass 配置生成存储所需要的存储模板，再结合用户的需求动态创建 PV 对象，做到按需分配，在没有增加用户使用难度的同时也解放了集群管理员的运维工作。 </p><h4 id="二、用例解读"><a href="#二、用例解读" class="headerlink" title="二、用例解读"></a>二、用例解读</h4><p>接下来看一下 Pod Volumes、PV、PVC 及 StorageClass 具体是如何使用的。 </p><h5 id="Pod-Volumes-的使用"><a href="#Pod-Volumes-的使用" class="headerlink" title="Pod Volumes 的使用"></a>Pod Volumes 的使用</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183143142-6d48cb91-883e-493b-8212-71447b9f8a15.png" alt="img"></p><p>首先来看一下 Pod Volumes 的使用。如上图左侧所示，我们可以在 pod yaml 文件中的 Volumes 字段中，声明我们卷的名字以及卷的类型。声明的两个卷，一个是用的是 emptyDir，另外一个用的是 hostPath，这两种都是本地卷。在容器中应该怎么去使用这个卷呢？它其实可以通过 volumeMounts 这个字段，volumeMounts 字段里面指定的 name 其实就是它使用的哪个卷，mountPath 就是容器中的挂载路径。</p><p>这里还有个 subPath，subPath 是什么？ </p><p>先看一下，这两个容器都指定使用了同一个卷，就是这个 cache-volume。那么，在多个容器共享同一个卷的时候，为了隔离数据，我们可以通过 subPath 来完成这个操作。它会在卷里面建立两个子目录，然后容器 1 往 cache 下面写的数据其实都写在子目录 cache1 了，容器 2 往 cache 写的目录，其数据最终会落在这个卷里子目录下面的 cache2 下。</p><p>还有一个 readOnly 字段，readOnly 的意思其实就是只读挂载，这个挂载你往挂载点下面实际上是没有办法去写数据的。 </p><p>另外emptyDir、hostPath 都是本地存储，它们之间有什么细微的差别呢？<strong>emptyDir 其实是在 pod 创建的过程中会临时创建的一个目录</strong>，这个目录随着 pod 删除也会被删除，里面的数据会被清空掉；hostPath 顾名思义，其实就是宿主机上的一个路径，在 pod 删除之后，这个目录还是存在的，它的数据也不会被丢失。这就是它们两者之间一个细微的差别。 </p><h5 id="静态-PV-使用"><a href="#静态-PV-使用" class="headerlink" title="静态 PV 使用"></a>静态 PV 使用</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142761-292b7d93-794b-4716-a793-5b449f2fdf13.png" alt="img"></p><p>接下来再看一下，PV 和 PVC 是怎么使用的。 </p><p>先看一个静态 PV 创建方式。静态 PV 的话，首先是由管理员来创建的，管理员我们这里以 NAS，就是阿里云文件存储为例。我需要先在阿里云的文件存储控制台上去创建 NAS 存储，然后把 NAS 存储的相关信息要填到 PV 对象中，这个 PV 对象预创建出来后，用户可以通过 PVC 来声明自己的存储需求，然后再去创建 pod。创建 pod 还是通过我们刚才讲解的字段把存储挂载到某一个容器中的某一个挂载点下面。</p><p>那么接下来看一下 yaml 怎么写。集群管理员首先是在云存储厂商那边先去把存储创建出来，然后把相应的信息填写到 PV 对象中。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142686-7af9e7d8-39c9-498f-bc76-309a754cff4f.png" alt="img"></p><p>刚刚创建的阿里云 NAS 文件存储对应的PV，有个比较重要的字段：</p><ul><li>capacity，即创建的这个存储的大小，</li><li>accessModes，创建出来的这个存储它的访问方式，我们后面会讲解总共有几种访问方式。 </li><li>ReclaimPolicy，ReclaimPolicy 的意思就是：这块存储在被使用后，等它的使用方 pod 以及 PVC 被删除之后，这个 PV 是应该被删掉还是被保留呢？其实就是PV的回收策略。</li></ul><p>接下来看看用户怎么去使用该PV对象。用户在使用存储的时候，需要先创建一个 PVC 对象。PVC 对象里面，只需要指定存储需求，不用关心存储本身的具体实现细节。存储需求包括哪些呢？首先是需要的大小，也就是 resources.requests.storage；然后是它的访问方式，即需要这个存储的访问方式，这里声明为ReadWriteMany，也即支持多node读写访问，这也是文件存储的典型特性。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142763-971253d8-0225-4261-bff8-db7b3066e83c.png" alt="img"></p><p>上图中左侧，可以看到这个声明：它的 size 和它的access mode，跟我们刚才静态创建这块 PV 其实是匹配的。这样的话，当用户在提交 PVC 的时候，K8s 集群相关的组件就会把 PV 的 PVC bound 到一起。之后，用户在提交 pod yaml 的时候，可以在卷里面写上 PVC声明，在 PVC声明里面可以通过 claimName 来声明要用哪个 PVC。这时，挂载方式其实跟前面讲的一样，当提交完 yaml 的时候，它可以通过 PVC 找到 bound 着的那个 PV，然后就可以用那块存储了。这是静态 Provisioning到被pod使用的一个过程。 </p><h5 id="动态-PV-使用"><a href="#动态-PV-使用" class="headerlink" title="动态 PV 使用"></a>动态 PV 使用</h5><p>然后再看一下动态 Provisioning。动态 Provisioning 上面提到过，系统管理员不再预分配 PV，而只是创建一个模板文件。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183143140-5f630597-d0c5-4914-942f-b962bb35d0c2.png" alt="img"></p><p>这个模板文件叫 <u><strong>StorageClass</strong></u>，在StorageClass里面，我们需要填的重要信息：第一个是 provisioner，provisioner 是什么？它其实就是说我当时创建 PV 和对应的存储的时候，应该用哪个存储插件来去创建。 </p><p>这些参数是通过k8s创建存储的时候，需要指定的一些细节参数。对于这些参数，用户是不需要关心的，像这里 regionld、zoneld、fsType 和它的类型。ReclaimPolicy跟我们刚才讲解的 PV 里的意思是一样的，就是说动态创建出来的这块 PV,当使用方使用结束、Pod 及 PVC 被删除后，这块 PV 应该怎么处理，我们这个地方写的是 delete，意思就是说当使用方 pod 和 PVC 被删除之后，这个 PV 也会被删除掉。</p><p>接下来看一下，集群管理员提交完 StorageClass，也就是提交创建 PV 的模板之后，用户怎么用，首先还是需要写一个 PVC 的文件。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142742-4e6b6359-5f21-4739-ae56-17e59b50e9a3.png" alt="img"></p><p>PVC 的文件里存储的大小、访问模式是不变的。现在需要新加一个字段，叫 StorageClassName，它的意思是指定动态创建PV的模板文件的名字，这里StorageClassName填的就是上面声明的csi-disk。 </p><p>在提交完 PVC之后，K8s 集群中的相关组件就会根据 PVC 以及对应的 StorageClass 动态生成这块 PV 给这个 PVC 做一个绑定，之后用户在提交自己的 yaml 时，用法和接下来的流程和前面的静态使用方式是一样的，通过 PVC 找到我们动态创建的 PV，然后把它挂载到相应的容器中就可以使用了。 </p><h5 id="PV-Spec-重要字段解析"><a href="#PV-Spec-重要字段解析" class="headerlink" title="PV Spec 重要字段解析"></a>PV Spec 重要字段解析</h5><p>接下来，我们讲解一下 PV 的一些重要字段：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142776-e32f5e5a-183b-4d34-a081-083c6f9d3f7e.png" alt="img"></p><ul><li><p><strong>Capacity</strong>：这个很好理解，就是存储对象的大小；</p></li><li><p><strong>AccessModes：</strong>也是用户需要关心的，就是说我使用这个 PV 的方式。它有三种使用方式。</p></li><li><ul><li>一种是单 node 读写访问；</li><li>第二种是多个 node 只读访问，是常见的一种数据的共享方式；</li><li>第三种是多个 node 上读写访问。</li></ul></li></ul><p>用户在提交 PVC 的时候，最重要的两个字段 —— Capacity 和 AccessModes。在提交 PVC 后，k8s 集群中的相关组件是如何去找到合适的 PV 呢？首先它是通过为 PV 建立的 AccessModes 索引找到所有能够满足用户的 PVC 里面的 AccessModes 要求的 PV list，然后根据PVC的 Capacity，StorageClassName, Label Selector 进一步筛选 PV，如果满足条件的 PV 有多个，选择 PV 的 size 最小的，accessmodes 列表最短的 PV，也即最小适合原则。</p><ul><li><p><strong>ReclaimPolicy</strong>：这个就是刚才提到的，我的用户方 PV 的 PVC 在删除之后，我的 PV 应该做如何处理？常见的有三种方式。</p></li><li><ul><li>第一种方式我们就不说了，现在 K8s 中已经不推荐使用了；</li><li>第二种方式 delete，也就是说 PVC 被删除之后，PV 也会被删除；</li><li>第三种方式 Retain，就是保留，保留之后，后面这个 PV 需要管理员来手动处理。</li></ul></li><li><p><strong>StorageClassName</strong>：StorageClassName 这个我们刚才说了，我们动态 Provisioning 时必须指定的一个字段，就是说我们要指定到底用哪一个模板文件来生成 PV ；</p></li><li><p><strong>NodeAffinity</strong>：就是说我创建出来的 PV，它能被哪些 node 去挂载使用，其实是有限制的。然后通过 NodeAffinity 来声明对node的限制，这样其实对 使用该PV的pod调度也有限制，就是说 pod 必须要调度到这些能访问 PV 的 node 上，才能使用这块 PV，这个字段在我们下一讲讲解存储拓扑调度时在细说。 </p></li></ul><h5 id="PV-状态流转"><a href="#PV-状态流转" class="headerlink" title="PV 状态流转"></a>PV 状态流转</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142771-65951703-fda1-423f-a61c-a1890242e0a5.png" alt="img"></p><p>接下来我们看一下 PV 的状态流转。首先在创建 PV 对象后，它会处在短暂的pending 状态；等真正的 PV 创建好之后，它就处在 available 状态。 </p><p>available 状态意思就是可以使用的状态，用户在提交 PVC 之后，被 K8s 相关组件做完 bound（即：找到相应的 PV），这个时候 PV 和 PVC 就结合到一起了，此时两者都处在 bound 状态。当用户在使用完 PVC，将其删除后，这个 PV 就处在 released 状态，之后它应该被删除还是被保留呢？这个就会依赖我们刚才说的 ReclaimPolicy。 </p><p>这里有一个点需要特别说明一下：当 PV 已经处在 released 状态下，它是没有办法直接回到 available 状态，也就是说接下来无法被一个新的 PVC 去做绑定。如果我们想把已经 released 的 PV 复用，我们这个时候通常应该怎么去做呢？</p><p>第一种方式：我们可以新建一个 PV 对象，然后把之前的 released 的 PV 的相关字段的信息填到新的 PV 对象里面，这样的话，这个 PV 就可以结合新的 PVC 了；<br>第二种是我们在删除 pod 之后，不要去删除 PVC 对象，这样给 PV 绑定的 PVC 还是存在的，下次 pod 使用的时候，就可以直接通过 PVC 去复用。K8s中的 StatefulSet 管理的 Pod 带存储的迁移就是通过这种方式。 </p><h4 id="三、操作演示"><a href="#三、操作演示" class="headerlink" title="三、操作演示"></a>三、操作演示</h4><p>接下来，我会在实际的环境中给大家演示一下，静态 Provisioning 以及动态 Provisioning 具体操作方式。 </p><h5 id="静态-Provisioning-例子"><a href="#静态-Provisioning-例子" class="headerlink" title="静态 Provisioning 例子"></a>静态 Provisioning 例子</h5><p>静态 Provisioning 主要用的是阿里云的 NAS 文件存储；动态 Provisioning 主要用了阿里云的云盘。它们需要相应存储插件，插件我已经提前部署在我的 K8s 集群中了(csi-nasplugin<em>是为了在k8s中使用阿里云NAS所需的插件，csi-disk</em>是为了在k8s中使用阿里云云盘所需要的插件)。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142799-7b1ddb65-7430-4571-a9d9-3e40efad1eca.png" alt="img"></p><p>我们接下来先看一下静态 Provisioning 的 PV 的 yaml 文件。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142922-6098bf94-06c1-4e9a-820e-3acb25e8717a.png" alt="img"></p><p>volumeAttributes是我在阿里云nas控制台预先创建的 NAS 文件系统的相关信息，我们主要需要关心的有 capacity 为5Gi; accessModes 为多node读写访问; reclaimPolicy：Retain，也就是当我使用方的 PVC 被删除之后，我这个 PV 是要保留下来的；以及在使用这个卷的过程中使用的driver。 </p><p>然后我们把对应的 PV 创建出来： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142778-4413c063-dd80-4fa9-b106-b0f8248ed33a.png" alt="img"></p><p>我们看一下上图 PV 的状态，已经处在 Available，也就是说它已经可以被使用了。 </p><p>再创建出来 nas-pvc： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142829-f428ba6b-bdb0-4f09-a897-7aef501c68ae.png" alt="img"></p><p>我们看这个时候 PVC 已经新创建出来了，而且也已经和我们上面创建的PV绑定到一起了。我们看一下 PVC 的 yaml 里面写的什么。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142752-b2e587ba-f211-4476-b674-b46f42b8fc6b.png" alt="img"></p><p>其实很简单 ，就是我需要的大小以及我需要的 accessModes。提交完之后，它就与我们集群中已经存在的 PV 做匹配，匹配成功之后，它就会做 bound。 </p><p>接下来我们去创建使用 nas-fs 的 pod： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142771-8e3b5746-9c5b-42f9-b305-b1f228f7ebe3.png" alt="img"></p><p>上图看到，这两个 Pod 都已经处在 running 状态了。 </p><p>我们先看一下这个 pod yaml： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142775-36251fad-04f0-4308-9f9c-4cc06d60e16e.png" alt="img"></p><p>pod yaml 里面声明了刚才我们创建出来的 PVC 对象，然后把它挂载到 nas-container 容器中的 /data 下面。我们这个 pod 是通过前面课程中讲解 deployment 创建两个副本，通过反亲和性，将两个副本调度在不同的 node 上面。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142793-ef81475d-3a92-450d-adb7-5ad1ac1f736a.png" alt="img"></p><p>上图我们可以看一下，两个Pod所在的宿主机是不一样的。 </p><p>如下图所示：我们登陆到第一个上面，findmnt 看一下它的挂载信息，这个其实就挂载在我声明的 nas-fs 上，那我们再在下面 touch 个 test.test.test 文件，我们也会登陆到另外一个容器看一下，它有没有被共享。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142785-3fa99dab-8a0d-4b24-9f1d-2923f4ec9f37.png" alt="img"></p><p>我们退出再登陆另外一个 pod（刚才登陆的是第一个，现在登陆第二个）。 </p><p>如下图所示：我们也 findmnt 一下，可以看到，这两个 pod 的远程挂载路径一样，也就是说我们用的是同一个 NAS PV，我们再看一下刚才创建出来的那个是否存在。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183143230-195ac117-7898-440c-a4cd-f0473c9b68c4.png" alt="img"></p><p>可以看到，这个也是存在的，就说明这两个运行在不同node上的 pod 共享了同一个 nas 存储。 </p><p>接下来我们看一下把两个 pod 删掉之后的情况。先删Pod，接着再删一下对应的 PVC (K8s 内部对 pvc 对象由保护机制，在删除 pvc 对象时如果发现有 pod 在使用 pvc，pvc 是删除不掉的)，这个可能要稍等一下。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142833-894c08f6-d5ec-47d2-b352-29d4d4bd8d7f.png" alt="img"></p><p>看一下下图对应的 PVC 是不是已经被删掉了。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142924-79551ae3-35d0-41bd-bce9-6290664712b8.png" alt="img"> </p><p>上图显示，它已经被删掉了。再看一下，刚才的 nas PV 还是在的，它的状态是处在 Released 状态，也就是说刚才使用它的 PVC 已经被删掉了，然后它被 released 了。又因为我们 RECLAIN POLICY 是 Retain，所以它这个 PV 是被保留下来的。</p><h5 id="动态-Provisioning-例子"><a href="#动态-Provisioning-例子" class="headerlink" title="动态 Provisioning 例子"></a>动态 Provisioning 例子</h5><p>接下来我们来看第二个例子，动态 Provisioning 的例子。我们先把保留下来的 PV 手动删掉，可以看到集群中没有 PV了。接下来演示一下动态 Provisioning。</p><p>首先，先去创建一个生成 PV 的模板文件，也就是 storageclass。看一下 storageclass 里面的内容，其实很简单。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142849-067f8f3f-362f-4a16-bd96-1b6ce4bf2f98.png" alt="img"></p><p>如上图所示，我事先指定的是我要创建存储的卷插件(阿里云云盘插件，由阿里云团队开发)，这个我们已经提前部署好了；我们可以看到，parameters部分是创建存储所需要的一些参数，但是用户不需要关心这些信息；然后是 reclaimPolicy，也就是说通过这个 storageclass 创建出来的 PV 在给绑定到一起的 PVC 删除之后，它是要保留还是要删除。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183143027-a4adbf5f-8843-46c8-9ef7-de33c7ef8e41.png" alt="img"></p><p>如上图所示：现在这个集群中是没有 PV 的，我们动态提交一个 PVC 文件，先看一下它的 PVC 文件。它的 accessModes-ReadWriteOnce (因为阿里云云盘其实只能是单 node 读写的，所以我们声明这样的方式），它的存储大小需求是 30G，它的 storageClassName 是 csi-disk，就是我们刚才创建的 storageclass，也就是说它指定要通过这个模板去生成 PV。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142941-c8871c9e-533a-494f-9cec-22e1a01e30e6.png" alt="img"></p><p>这个 PVC 此时正处在 pending 状态，这就说明它对应的 PV 还在创建过程中。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142826-e13183e0-37b8-4d49-bf65-7adb2587134b.png" alt="img"></p><p>稍过一会，我们看到已经有一个新的 PV 生成，这个 PV 其实就是根据我们提交的 PVC 以及 PVC 里面指定的storageclass 动态生成的。之后k8s会将生成的 PV 以及我们提交的 PVC，就是这个 disk PVC 做绑定，之后我们就可以通过创建 pod 来使用了。 </p><p>再看一下 pod yaml： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142973-db26a557-8349-4b2e-9129-38523f27b8f2.png" alt="img"></p><p>pod yaml 很简单，也是通过 PVC 声明，表明使用这个 PVC。然后是挂载点，下面我们可以创建看一下。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142865-3b9f7f1d-b8ee-4f69-a945-dac9bdbc1dbb.png" alt="img"></p><p>如下图所示：我们可以大概看一下 Events，首先被调度器调度，调度完之后，接下来会有个 attachdetach controller，它会去做 disk的attach操作，就是把我们对应的 PV 挂载到调度器调度的 node 上，然后Pod对应的容器才能启动，启动容器才能使用对应的盘。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142974-bde37cbb-0098-4d8c-a2f5-553daba2b63f.png" alt="img"></p><p>接下来我会把 PVC 删掉，看一下PV 会不会根据我们的 reclaimPolicy 随之删掉呢？我们先看一下，这个时候 PVC 还是存在的，对应的 PV 也是存在的。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183142822-bfdeb6cd-ef50-4e3a-baa4-30e1a4ea392b.png" alt="img"></p><p>然后删一下 PVC，删完之后再看一下：我们的 PV 也被删了，也就是说根据 reclaimPolicy，我们在删除 PVC 的同时，PV 也会被删除掉。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183143032-f934fd52-657c-49c5-881a-570f1eb37af4.png" alt="img"></p><p><strong><u>PS：本文摘录于阿里云公开课，仅供学习与参考。</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> pv </tag>
            
            <tag> pvc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8_应用配置管理</title>
      <link href="2020/09/30/k8s-config/"/>
      <url>2020/09/30/k8s-config/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="8-应用配置管理"><a href="#8-应用配置管理" class="headerlink" title="8_应用配置管理"></a>8_应用配置管理</h3><h4 id="一、需求来源"><a href="#一、需求来源" class="headerlink" title="一、需求来源"></a>一、需求来源</h4><h5 id="背景问题"><a href="#背景问题" class="headerlink" title="背景问题"></a>背景问题</h5><p>首先一起来看一下需求来源。大家应该都有过这样的经验，就是用一个容器镜像来启动一个 container。要启动这个容器，其实有很多需要配套的问题待解决： </p><ul><li>第一，比如说一些可变的配置。因为我们不可能把一些可变的配置写到镜像里面，当这个配置需要变化的时候，可能需要我们重新编译一次镜像，这个肯定是不能接受的；</li><li>第二就是一些敏感信息的存储和使用。比如说应用需要使用一些密码，或者用一些 token；</li><li>第三就是我们容器要访问集群自身。比如我要访问 kube-apiserver，那么本身就有一个身份认证的问题；</li><li>第四就是容器在节点上运行之后，它的资源需求；</li><li>第五个就是容器在节点上，它们是共享内核的，那么它的一个安全管控怎么办？</li><li>最后一点我们说一下容器启动之前的一个前置条件检验。比如说，一个容器启动之前，我可能要确认一下 DNS 服务是不是好用？又或者确认一下网络是不是联通的？那么这些其实就是一些前置的校验。</li></ul><h5 id="Pod-的配置管理"><a href="#Pod-的配置管理" class="headerlink" title="Pod 的配置管理"></a>Pod 的配置管理</h5><p>在 Kubernetes 里面，它是怎么做这些配置管理的呢？如下图所示：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099813-497a7a72-37dd-4dac-8470-ab3605842537.png" alt="img"></p><ul><li>可变配置就用 ConfigMap；</li><li>敏感信息是用 Secret；</li><li>身份认证是用 ServiceAccount 这几个独立的资源来实现的；</li><li>资源配置是用 Resources；</li><li>安全管控是用 SecurityContext；</li><li>前置校验是用 InitContainers 这几个在 spec 里面加的字段，来实现的这些配置管理。</li></ul><h4 id="二、ConfigMap"><a href="#二、ConfigMap" class="headerlink" title="二、ConfigMap"></a>二、ConfigMap</h4><h5 id="ConfigMap-介绍"><a href="#ConfigMap-介绍" class="headerlink" title="ConfigMap 介绍"></a>ConfigMap 介绍</h5><p>下面我们来介绍第一个部分，就是 ConfigMap。我们先来介绍 ConfigMap 它是用来做什么的、以及它带来的一个好处。它其实主要是管理一些可变配置信息，比如说我们应用的一些配置文件，或者说它里面的一些环境变量，或者一些命令行参数。</p><p>它的好处在于它可以让一些可变配置和容器镜像进行解耦，这样也保证了容器的可移植性。看一下下图中右边的编排文件截图。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099834-c711cac4-c106-49ab-b1f6-44087a7007b9.png" alt="img"></p><p>这是 ConfigMap 本身的一个定义，它包括两个部分：一个是 ConfigMap 元信息，我们关注 name 和 namespace 这两个信息。接下来这个 data 里面，可以看到它管理了两个配置文件。它的结构其实是这样的：从名字看ConfigMap中包含Map单词，Map 其实就是 key:value，key 是一个文件名，value 是这个文件的内容。 </p><h5 id="ConfigMap-创建"><a href="#ConfigMap-创建" class="headerlink" title="ConfigMap 创建"></a>ConfigMap 创建</h5><p>看过介绍之后，再具体看一下它是怎么创建的。我们推荐用 kubectl 这个命令来创建，它带的参数主要有两个：一个是指定 name，第二个是 DATA。其中 DATA 可以通过指定文件或者指定目录，以及直接指定键值对，下面可以看一下这个例子。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099830-822f173a-a7c0-4224-986f-fe0aa1e85a1f.png" alt="img"></p><p>指定文件的话，文件名就是 Map 中的 key，文件内容就是 Map 中的 value。然后指定键值对就是指定数据键值对，即：key:value 形式，直接映射到 Map 的key:value。 </p><h5 id="ConfigMap-使用"><a href="#ConfigMap-使用" class="headerlink" title="ConfigMap 使用"></a>ConfigMap 使用</h5><p>创建完了之后，应该怎么使用呢？ </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099844-08539daa-9d99-4e00-8c00-dd7204e81f6a.png" alt="img"></p><p>如上图所示，主要是在 pod 里来使用 ConfigMap： </p><ul><li>第一种是环境变量。环境变量的话通过 <u>valueFrom</u>，然后 ConfigMapKeyRef 这个字段，下面的 name 是指定 ConfigMap 名，key 是 ConfigMap.data 里面的 key。这样的话，在 busybox 容器启动后容器中执行 env 将看到一个 SPECIAL_LEVEL_KEY 环境变量；</li><li>第二个是命令行参数。命令行参数其实是第一行的环境变量直接拿到 cmd 这个字段里面来用；</li><li>最后一个是通过 volume 挂载的方式直接挂到容器的某一个目录下面去。上面的例子是把 special-config 这个 ConfigMap 里面的内容挂到容器里面的 /etc/config 目录下，这个也是使用的一种方式。 </li></ul><h5 id="ConfigMap-注意要点"><a href="#ConfigMap-注意要点" class="headerlink" title="ConfigMap 注意要点"></a>ConfigMap 注意要点</h5><p>现在对 ConfigMap 的使用做一个总结，以及它的一些注意点，注意点一共列了以下五条：</p><ol><li>ConfigMap 文件的大小。虽然说 ConfigMap 文件没有大小限制，但是在 ETCD 里面，数据的写入是有大小限制的，现在是限制在 1MB 以内；</li><li>第二个注意点是 pod 引入 ConfigMap 的时候，必须是相同的 Namespace 中的 ConfigMap，前面其实可以看到，ConfigMap.metadata 里面是有 namespace 字段的；</li><li>第三个是 pod 引用的 ConfigMap。假如这个 ConfigMap 不存在，那么这个 pod 是无法创建成功的，其实这也表示在创建 pod 前，必须先把要引用的 ConfigMap 创建好；</li><li>第四点就是使用 envFrom 的方式。把 ConfigMap 里面所有的信息导入成环境变量时，如果 ConfigMap 里有些 key 是无效的，比如 key 的名字里面带有数字，那么这个环境变量其实是不会注入容器的，它会被忽略。但是这个 pod 本身是可以创建的。这个和第三点是不一样的方式，是 ConfigMap 文件存在基础上，整体导入成环境变量的一种形式；</li><li>最后一点是：什么样的 pod 才能使用 ConfigMap？这里只有通过 K8s api 创建的 pod 才能使用 ConfigMap，比如说通过用命令行 kubectl 来创建的 pod，肯定是可以使用 ConfigMap 的，但其他方式创建的 pod，比如说 kubelet 通过 manifest 创建的 static pod，它是不能使用 ConfigMap 的。 </li></ol><h4 id="三、Secret"><a href="#三、Secret" class="headerlink" title="三、Secret"></a>三、Secret</h4><h5 id="Secret-介绍"><a href="#Secret-介绍" class="headerlink" title="Secret 介绍"></a>Secret 介绍</h5><p>现在我们讲一下 Secret，Secret 是一个主要用来存储密码 token 等一些敏感信息的资源对象。其中，敏感信息是采用 base-64 编码保存起来的，我们来看下图中 Secret 数据的定义。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099976-da6d07c3-7621-4267-9f12-bd7941140805.png" alt="img"></p><p>元数据的话，里面主要是 name、namespace 两个字段；接下来是 type，它是非常重要的一个字段，是指 Secret 的一个类型。Secret 类型种类比较多，下面列了常用的四种类型： </p><ul><li>第一种是 Opaque，它是普通的 Secret 文件；</li><li>第二种是 service-account-token，是用于 service-account 身份认证用的 Secret；</li><li>第三种是 dockerconfigjson，这是拉取私有仓库镜像的用的一种 Secret；</li><li>第四种是 bootstrap.token，是用于节点接入集群校验用的 Secret。</li></ul><p>再接下来是 data，是存储的 Secret 的数据，它也是 key-value 的形式存储的。</p><h5 id="Secret-创建"><a href="#Secret-创建" class="headerlink" title="Secret 创建"></a>Secret 创建</h5><p>接下来我们看一下 Secret 的创建。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099877-5f114820-2b5d-4bd6-afd5-5316e0fad572.png" alt="img"></p><p>如上图所示，有两种创建方式： </p><ul><li><p>系统创建：比如 K8s 为每一个 namespace 的默认用户（default ServiceAccount）创建 Secret； </p></li><li><p>用户手动创建：手动创建命令，推荐 kubectl 这个命令行工具，它相对 ConfigMap 会多一个 type 参数。其中 data 也是一样，它也是可以指定文件和键值对的。type 的话，要是你不指定的话，默认是 Opaque 类型。 </p></li></ul><p>上图中两个例子。第一个是通过指定文件，创建了一个拉取私有仓库镜像的 Secret，指定的文件是 /root/.docker/config.json。type 的话指定的是 dockerconfigjson，另外一个我们指定键值对，我们 type 没有指定，默认是 Opaque。键值对是 key:value 的形式，其中对 value 内容进行 base64 加密。创建 Secret 就是这么一个情况。</p><h5 id="Secret-使用"><a href="#Secret-使用" class="headerlink" title="Secret 使用"></a>Secret 使用</h5><p>创建完 Secret 之后，再来看一下如何使用它。它主要是被 pod 来使用，一般是通过 volume 形式挂载到容器里指定的目录，然后容器里的业务进程再到目录下读取 Secret 来进行使用。另外在需要访问私有镜像仓库时，也是通过引用 Secret 来实现。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183100059-4f91fb50-2882-456f-bafc-1ab7a462c101.png" alt="img"></p><p>我们先来看一下挂载到用户指定目录的方式： </p><ul><li>第一种方式：如上图左侧所示，用户直接指定，把 mysecret 挂载到容器 /etc/foo 目录下面；</li><li>第二种方式：如上图右侧所示，系统自动生成，把 serviceaccount-secret 自动挂载到容器 /var/run/secrets/kubernetes.io/serviceaccount 目录下，它会生成两个文件，一个是 ca.crt，一个是 token。这是两个保存了认证信息的证书文件。 </li></ul><h5 id="使用私有镜像库"><a href="#使用私有镜像库" class="headerlink" title="使用私有镜像库"></a>使用私有镜像库</h5><p>下面看一下用 Secret 来使用私有镜像仓库。首先，私有镜像仓库的信息是存储在 Secret 里面的(具体参照上述的Secret创建章节)，然后拉取私有仓库镜像，那么通过下图中两种方法的配置就可以： </p><ul><li>第一种方式：如下图左侧所示，直接在 pod 里面，通过 imagePullSecrets 字段来配置；</li><li>第二种方式是自动注入。用户提前在 pod 会使用的 serviceaccount 里配置 imagePullSecrets，Pod创建时系统自动注入这个 imagePullSecrets。 </li></ul><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183100021-7d849ab8-0db9-4136-ae12-538757e15dcf.png" alt="img"></p><h5 id="Secret-使用注意要点"><a href="#Secret-使用注意要点" class="headerlink" title="Secret 使用注意要点"></a>Secret 使用注意要点</h5><p>最后来看一下 Secret 使用的一些注意点，下面列了三点： </p><ol><li>第一个是 Secret 的文件大小限制。这个跟 ConfigMap 一样，也是 1MB；</li><li>第二个是 Secret 采用了 base-64 编码，但是它跟明文也没有太大区别。所以说，如果有一些机密信息要用 Secret 来存储的话，还是要很慎重考虑。也就是说谁会来访问你这个集群，谁会来用你这个 Secret，还是要慎重考虑，因为它如果能够访问这个集群，就能拿到这个 Secret。</li><li>如果是对 Secret 敏感信息要求很高，对加密这块有很强的需求，推荐可以使用 Kubernetes 和开源的 vault做一个解决方案，来解决敏感信息的加密和权限管理。</li><li>第三个就是 Secret 读取的最佳实践，建议不要用 list/watch，如果用 list/watch 操作的话，会把 namespace 下的所有 Secret 全部拉取下来，这样其实暴露了更多的信息。推荐使用 GET 的方法，这样只获取你自己需要的那个 Secret。 </li></ol><h4 id="四、ServiceAccount"><a href="#四、ServiceAccount" class="headerlink" title="四、ServiceAccount"></a>四、ServiceAccount</h4><h5 id="ServiceAccount-介绍"><a href="#ServiceAccount-介绍" class="headerlink" title="ServiceAccount 介绍"></a>ServiceAccount 介绍</h5><p>接下来，我们讲一下 ServiceAccount。ServiceAccount 首先是用于解决 pod 在集群里面的身份认证问题，身份认证信息是存在于 Secret 里面。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099866-ccdbfee9-2885-4fa0-9c64-dd8f87b13986.png" alt="img"></p><p>先看一下上面的左侧截图，可以看到最下面的红框里，有一个 Secret 字段，它指定 ServiceAccount 用哪一个 Secret，这个是 K8s 自动为 ServiceAccount 加上的。</p><p>然后再来看一下上图中的右侧截图，它对应的 Secret 的 data 里有两块数据，一个是 ca.crt，一个是 token。ca.crt 用于对服务端的校验，token 用于 Pod 的身份认证，它们都是用 base64 编码过的。然后可以看到 metadata 即元信息里，其实是有关联 ServiceAccount 信息的（这个 secret 被哪个 ServiceAccount 使用）。最后我们注意一下 type，这个就是 service-account-token 这种类型。</p><h5 id="举例：Pod-里的应用访问它所属的-K8s-集群"><a href="#举例：Pod-里的应用访问它所属的-K8s-集群" class="headerlink" title="举例：Pod 里的应用访问它所属的 K8s 集群"></a>举例：Pod 里的应用访问它所属的 K8s 集群</h5><p>介绍完 ServiceAccount 以及它对应的 secret 后，我们来看一下，pod 是怎么利用 ServiceAccount 或者说它是怎么利用 secret 来访问所属 K8s 集群的。</p><p>其实 pod 创建的时候，首先它会把这个 secret 挂载到容器固定的目录下，这是 K8s 功能上实现的。它要把这个 ca.crt 和 token 这两个文件挂载到固定目录下面。</p><p>pod 要访问集群的时候，它是怎么来利用这个文件的呢？我们看一下下面的代码截图：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/97598/1568601011965-6c5b33b7-a8ba-417b-898c-55a537837f88.png" alt="image.png"></p><p>我们在 Go 里面实现 Pod 访问 K8s 集群时，一般直接会调一个 InClusterConfig 方法，来生成这个访问服务 Client 的一些信息。然后可以看一下，最后这个 Config 里面有两部分信息： </p><ul><li>一个是 tlsClientConfig，这个主要是用于 ca.crt 校验服务端；</li><li>第二个是 Bearer Token，这个就是 pod 的身份认证。在服务端，会利用 token 对 pod 进行一个身份认证。 </li></ul><p>再次回到上图左侧。认证完之后 pod 的身份信息会有两部分：一个是 Group，一个是 User。身份认证是就是认证这两部分信息。接着可以使用 RBAC 功能，对 pod 进行一个授权管理。 </p><p>假如 RBAC 没有配置的话，默认的 pod 具有资源 GET 权限，就是可以从所属的 K8s 集群里 get 数据。如果是需要更多的权限，那么就需要 自行配置 RBAC 。RBAC 的相关知识，我们在后面的课程里面会详细介绍，大家可以关注一下。 </p><h4 id="五、Resource"><a href="#五、Resource" class="headerlink" title="五、Resource"></a>五、Resource</h4><h5 id="容器资源配合管理"><a href="#容器资源配合管理" class="headerlink" title="容器资源配合管理"></a>容器资源配合管理</h5><p>下面介绍一下 Resource，即：容器的一个资源配置管理。 </p><p>目前内部支持类型有三种：CPU、内存，以及临时存储。当用户觉得这三种不够，有自己的一些资源，比如说 GPU，或者其他资源，也可以自己来定义，但配置时，指定的数量<strong>必须为整数</strong>。目前资源配置主要分成 request 和 limit 两种类型，一个是需要的数量，一个是资源的界限。CPU、内存以及临时存储都是在 container 下的 Resource 字段里进行一个声明。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099875-7b9386c5-d1be-4621-9f39-634da356f902.png" alt="img"></p><p>举个例子，wordpress 容器的资源需求，一个是 request ，一个是 limits，它分别对需要的资源和资源临界进行一个声明。 </p><h5 id="Pod-服务质量-QoS-配置"><a href="#Pod-服务质量-QoS-配置" class="headerlink" title="Pod 服务质量 (QoS) 配置"></a>Pod 服务质量 (QoS) 配置</h5><p>根据 CPU 对容器内存资源的需求，我们对 pod 的服务质量进行一个分类，分别是 Guaranteed、Burstable 和 BestEffort。 </p><ul><li>Guaranteed ：pod 里面每个容器都必须有内存和 CPU 的 request 以及 limit 的一个声明，且 request 和 limit 必须是一样的，这就是 Guaranteed；</li><li>Burstable：Burstable 至少有一个容器存在内存和 CPU 的一个 request；</li><li>BestEffort：只要不是 Guaranteed 和 Burstable，那就是 BestEffort。 </li></ul><p>那么这个服务质量是什么样的呢？资源配置好后，当这个节点上 pod 容器运行，比如说节点上 memory 配额资源不足，kubelet会把一些低优先级的，或者说服务质量要求不高的（如：BestEffort、Burstable）pod 驱逐掉。它们是按照先去除 BestEffort，再去除 Burstable 的一个顺序来驱逐 pod 的。 </p><h4 id="六、SecurityContext"><a href="#六、SecurityContext" class="headerlink" title="六、SecurityContext"></a>六、SecurityContext</h4><h5 id="SecurityContext-介绍"><a href="#SecurityContext-介绍" class="headerlink" title="SecurityContext 介绍"></a>SecurityContext 介绍</h5><p>SecurityContext 主要是用于限制容器的一个行为，它能保证系统和其他容器的安全。这一块的能力不是 Kubernetes 或者容器 runtime 本身的能力，而是 Kubernetes 和 runtime 通过用户的配置，最后下传到内核里，再通过内核的机制让 SecurityContext 来生效。所以这里讲的内容，会比较简单或者说比较抽象一点。 </p><p>SecurityContext 主要分为三个级别：</p><ul><li>第一个是容器级别，仅对容器生效；</li><li>第二个是 pod 级别，对 pod 里所有容器生效；</li><li>第三个是集群级别，就是 PSP，对集群内所有 pod 生效。 </li></ul><p>权限和访问控制设置项，现在一共列有七项（这个数量后续可能会变化）： </p><ol><li>第一个就是通过用户 ID 和组 ID 来控制文件访问权限；</li><li>第二个是 SELinux，它是通过策略配置来控制用户或者进程对文件的访问控制；</li><li>第三个是特权容器；</li><li>第四个是 Capabilities，它也是给特定进程来配置一个 privileged 能力；</li><li>第五个是 AppArmor，它也是通过一些配置文件来控制可执行文件的一个访问控制权限，比如说一些端口的读写；</li><li>第六个是一个对系统调用的控制；</li><li>第七个是对子进程能否获取比父亲更多的权限的一个限制。 </li></ol><p>最后其实都是落到内核来控制它的一些权限。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099889-d71fa9b5-2000-4236-ba4d-25c678553bb2.png" alt="img"></p><p> 上图是对 pod 级别和容器级别配置 SecurityContext 的一个例子，如果大家对这些内容有更多的需求，可以根据这些信息去搜索更深入的资料来学习。</p><h4 id="七、InitContainer"><a href="#七、InitContainer" class="headerlink" title="七、InitContainer"></a>七、InitContainer</h4><h5 id="InitContainer-介绍"><a href="#InitContainer-介绍" class="headerlink" title="InitContainer 介绍"></a>InitContainer 介绍</h5><p>接下来看一下 InitContainer，首先介绍 InitContainer 和普通 container 的区别，有以下三点内容：</p><ol><li>InitContainer 首先会比普通 container 先启动，并且直到所有的 InitContainer 执行成功后，普通 container 才会被启动；</li><li>InitContainer 之间是按定义的次序去启动执行的，执行成功一个之后再执行第二个，而普通的 container 是并发启动的；</li><li>InitContainer 执行成功后就结束退出，而普通容器可能会一直在执行。它可能是一个 longtime 的，或者说失败了会重启，这个也是 InitContainer 和普通 container 不同的地方。</li></ol><p>根据上面三点内容，我们看一下 InitContainer 的一个用途。它其实主要为普通 container 服务，比如说它可以为普通 container 启动之前做一个初始化，或者为它准备一些配置文件， 配置文件可能是一些变化的东西。再比如做一些前置条件的校验，如网络是否联通。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183099939-c0f37eaf-d646-4dfe-8e34-49884e24005d.png" alt="img"></p><p>上面的截图是 flannel 组件的 InitContainer 的一个配置，它的 InitContainer 主要是为 kube-flannel 这个普通容器启动之前准备一些网络配置文件。 </p><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><ul><li>ConfigMap 和 Secret: 首先介绍了 ConfigMap 和 Secret 的创建方法和使用场景，然后对 ConfigMap 和 Secret 的常见使用注意点进行了分类和整理。最后介绍了私有仓库镜像的使用和配置；</li><li>Pod 身份认证: 首先介绍了 ServiceAccount 和 Secret 的关联关系，然后从源码角度对 Pod 身份认证流程和实现细节进行剖析，同时引出了 Pod 的权限管理(即 RBAC 的配置管理)；</li><li>容器资源和安全： 首先介绍了容器常见资源类型 (CPU/Memory) 的配置，然后对 Pod 服务质量分类进行详细的介绍。同时对 SecurityContext 有效层级和权限配置项进行简要说明；</li><li>InitContainer: 首先介绍了 InitContainer 和普通 container 的区别以及 InitContainer 的用途。然后基于实际用例对 InitContainer 的用途进行了说明。</li></ul><p><strong><u>PS：本文摘录于阿里公开课，仅为学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> config </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7_应用编排与管理_Job和DaemonSet</title>
      <link href="2020/09/29/k8s-job/"/>
      <url>2020/09/29/k8s-job/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="7-应用编排与管理-Job和DaemonSet"><a href="#7-应用编排与管理-Job和DaemonSet" class="headerlink" title="7_应用编排与管理_Job和DaemonSet"></a>7_应用编排与管理_Job和DaemonSet</h3><h3 id="一、Job"><a href="#一、Job" class="headerlink" title="一、Job"></a>一、Job</h3><h4 id="需求来源"><a href="#需求来源" class="headerlink" title="需求来源"></a>需求来源</h4><h5 id="Job-背景问题"><a href="#Job-背景问题" class="headerlink" title="Job 背景问题"></a>Job 背景问题</h5><p>首先我们来看一下 Job 的需求来源。我们知道 K8s 里面，最小的调度单元是 Pod，我们可以直接通过 Pod 来运行任务进程。这样做将会产生以下几种问题：</p><ul><li>我们如何保证 Pod 内进程正确的结束？</li><li>如何保证进程运行失败后重试？</li><li>如何管理多个任务，且任务之间有依赖关系？</li><li>如何并行地运行任务，并管理任务的队列大小？ </li></ul><h5 id="Job：管理任务的控制器"><a href="#Job：管理任务的控制器" class="headerlink" title="Job：管理任务的控制器"></a>Job：管理任务的控制器</h5><p>我们来看一下 Kubernetes 的 Job 为我们提供了什么功能： </p><ul><li>首先 kubernetes 的 Job 是一个管理任务的控制器，它可以创建一个或多个 Pod 来指定 Pod 的数量，并可以监控它是否成功地运行或终止；</li><li>我们可以根据 Pod 的状态来给 Job 设置重置的方式及重试的次数；</li><li>我们还可以根据依赖关系，保证上一个任务运行完成之后再运行下一个任务；</li><li>同时还可以控制任务的并行度，根据并行度来确保 Pod 运行过程中的并行次数和总体完成大小。 </li></ul><h4 id="用例解读"><a href="#用例解读" class="headerlink" title="用例解读"></a>用例解读</h4><p>我们根据一个实例来看一下Job是如何来完成下面的应用的。 </p><h5 id="Job-语法"><a href="#Job-语法" class="headerlink" title="Job 语法"></a>Job 语法</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/jpeg/168324/1566183042825-25aa6849-ed83-44da-a38b-9f58cb6dc910.jpeg" alt="img"></p><p>上图是 Job 最简单的一个 yaml 格式，这里主要新引入了一个 kind 叫 Job，这个 Job 其实就是 job-controller 里面的一种类型。 然后 metadata 里面的 name 来指定这个 Job 的名称，下面 spec.template 里面其实就是 pod 的 spec。 </p><p>这里面的内容都是一样的，唯一多了两个点： </p><ul><li>第一个是 restartPolicy，在 Job 里面我们可以设置 Never、OnFailure、Always 这三种重试策略。在希望 Job 需要重新运行的时候，我们可以用 Never；希望在失败的时候再运行，再重试可以用 OnFailure；或者不论什么情况下都重新运行时 Alway；</li><li>另外，Job 在运行的时候不可能去无限的重试，所以我们需要一个参数来控制重试的次数。这个 backoffLimit 就是来保证一个 Job 到底能重试多少次。 </li></ul><p>所以在 Job 里面，我们主要重点关注的一个是 <strong>restartPolicy 重启策略</strong>和 <strong>backoffLimit 重试次数限制</strong>。 </p><h5 id="Job-状态"><a href="#Job-状态" class="headerlink" title="Job 状态"></a>Job 状态</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042726-79cd8e9d-dfd3-4c17-a76c-042732f8c4bb.png" alt="img"></p><p>Job 创建完成之后，我们就可以通过 kubectl get jobs 这个命令，来查看当前 job 的运行状态。得到的值里面，基本就有 Job 的名称、当前完成了多少个 Pod，进行多长时间。 </p><p><strong>AGE</strong> 的含义是指这个 Pod 从当前时间算起，减去它当时创建的时间。这个时长主要用来告诉你 Pod 的历史、Pod 距今创建了多长时间。<br><strong>DURATION</strong> 主要来看我们 Job 里面的实际业务到底运行了多长时间，当我们的性能调优的时候，这个参数会非常的有用。<br><strong>COMPLETIONS</strong> 主要来看我们任务里面这个 Pod 一共有几个，然后它其中完成了多少个状态，会在这个字段里面做显示。</p><h5 id="查看-Pod"><a href="#查看-Pod" class="headerlink" title="查看 Pod"></a>查看 Pod</h5><p>下面我们来看一下 Pod，其实 Job 最后的执行单元还是 Pod。我们刚才创建的 Job 会创建出来一个叫“pi”的一个 Pod，这个任务就是来计算这个圆周率，Pod 的名称会以“${job-name}-${random-suffix}”，我们可以看一下下面 Pod 的 yaml 格式。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/jpeg/168324/1566183042458-a850a479-a190-434e-95ad-72c40656a9c8.jpeg" alt="img"></p><p>它比普通的 Pod 多了一个叫 <strong>ownerReferences</strong>，这个东西来声明此 pod 是归哪个上一层 controller 来管理。可以看到这里的 ownerReferences 是归 batch/v1，也就是上一个 Job 来管理的。这里就声明了它的 controller 是谁，然后可以通过 pod 返查到它的控制器是谁，同时也能根据 Job 来查一下它下属有哪些 Pod。 </p><h5 id="并行运行-Job"><a href="#并行运行-Job" class="headerlink" title="并行运行 Job"></a>并行运行 Job</h5><p>我们有时候有些需求：希望 Job 运行的时候可以最大化的并行，并行出 n 个 Pod 去快速地执行。同时，由于我们的节点数有限制，可能也不希望同时并行的 Pod 数过多，有那么一个管道的概念，我们可以希望最大的并行度是多少，Job 控制器都可以帮我们来做到。</p><p>这里主要看两个参数：<strong>一个是 completions，一个是 parallelism。</strong></p><ul><li>首先第一个参数是用来指定本 Pod 队列执行次数。可能这个不是很好理解，其实可以把它认为是这个 Job 指定的可以运行的总次数。比如这里设置成 8，即这个任务一共会被执行 8 次；</li><li>第二个参数代表这个并行执行的个数。所谓并行执行的次数，其实就是一个管道或者缓冲器中缓冲队列的大小，把它设置成 2，也就是说这个 Job 一定要执行 8 次，每次并行 2 个 Pod，这样的话，一共会执行 4 个批次。</li></ul><h5 id="查看并行-Job-运行"><a href="#查看并行-Job-运行" class="headerlink" title="查看并行 Job 运行"></a>查看并行 Job 运行</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042723-d78aa107-1593-400d-9ce7-d74dce9f4865.png" alt="img"></p><p>下面来看一下它的实际运行效果，上图就是当这个 Job 整体运行完毕之后可以看到的效果，首先看到 job 的名字，然后看到它一共创建出来了 8 个 pod，执行了 2 分 23 秒，这是创建的时间。 </p><p>接着来看真正的 pods，pods 总共出来了 8 个 pod，每个 pod 的状态都是完成的，然后来看一下它的 AGE，就是时间。从下往上看，可以看到分别有 73s、40s、110s 和 2m26s。每一组都有两个 pod 时间是相同的，即：时间段是 40s 的时候是最后一个创建、 2m26s 是第一个创建的。也就是说，总是两个 pod 同时创建出来，并行完毕、消失，然后再创建、再运行、再完毕。 </p><p>比如说，刚刚我们其实通过第二个参数来控制了当前 Job 并行执行的次数，这里就可以了解到这个缓冲器或者说管道队列大小的作用。 </p><h5 id="Cronjob-语法"><a href="#Cronjob-语法" class="headerlink" title="Cronjob 语法"></a>Cronjob 语法</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042579-f77a53f0-c9ca-46fa-86a7-60c4290cb3d5.png" alt="img"></p><p>下面来介绍另外一个 Job，叫做 CronJob，其实也可以叫定时运行 Job。CronJob 其实和 Job 大体是相似的，唯一的不同点就是它可以设计一个时间。比如说可以定时在几点几分执行，特别适合晚上做一些清理任务，还有可以几分钟执行一次，几小时执行一次等等，这就叫定时任务。 </p><p>定时任务和 Job 相比会多几个不同的字段： </p><ul><li><p><strong>schedule</strong>：schedule 这个字段主要是设置时间格式，它的时间格式和 Linux 的 crontime 是一样的，所以直接根据 Linux 的 crontime 书写格式来书写就可以了。举个例子： */1 指每分钟去执行一下 Job，这个 Job 需要做的事情就是打印出大约时间，然后打印出“Hello from the kubernetes cluster” 这一句话； </p></li><li><p><strong>startingDeadlineSeconds：</strong>即：每次运行 Job 的时候，它最长可以等多长时间，有时这个 Job 可能运行很长时间也不会启动。所以这时，如果超过较长时间的话，CronJob 就会停止这个 Job； </p></li><li><p><strong>concurrencyPolicy</strong>：就是说是否允许并行运行。所谓的并行运行就是，比如说我每分钟执行一次，但是这个 Job 可能运行的时间特别长，假如两分钟才能运行成功，也就是第二个 Job 要到时间需要去运行的时候，上一个 Job 还没完成。如果这个 policy 设置为 true 的话，那么不管你前面的 Job 是否运行完成，每分钟都会去执行；如果是 false，它就会等上一个 Job 运行完成之后才会运行下一个； </p></li><li><p><strong>JobsHistoryLimit：</strong>这个就是每一次 CronJob 运行完之后，它都会遗留上一个 Job 的运行历史、查看时间。当然这个额不能是无限的，所以需要设置一下历史存留数，一般可以设置默认 10 个或 100 个都可以，这主要取决于每个人集群不同，然后根据每个人的集群数来确定这个时间。 </p></li></ul><h4 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h4><h5 id="Job-的编排文件"><a href="#Job-的编排文件" class="headerlink" title="Job 的编排文件"></a>Job 的编排文件</h5><p>下面看一下具体如何使用 Job。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042589-7ac855b5-a0ce-4a0a-98ae-5605ec2be58d.png" alt="img"> </p><h5 id="Job-的创建及运行验证"><a href="#Job-的创建及运行验证" class="headerlink" title="Job 的创建及运行验证"></a>Job 的创建及运行验证</h5><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubectl creat-f job.yaml</span><span class="hljs-meta">$</span><span class="bash"> kubectl get <span class="hljs-built_in">jobs</span></span><span class="hljs-meta">$</span><span class="bash"> kubectl get pods</span><span class="hljs-meta">$</span><span class="bash"> kubectl logs pods pi-zxnmx</span></code></pre><p>首先看一下 job.yaml。这是一个非常简单的计算 pi 的一个任务。使用 kubectl creat-f job.yaml，这样 job 就能提交成功了。来看一下 kubectl.get.jobs，可以看到这个 job 正在运行；get pods 可以看到这个 pod 应该是运行完成了，那么接下来 logs 一下这个 job 以及 pod。可以看到下图里面打印出来了圆周率。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042679-2578b891-b60f-4b71-8bc4-fdf68a1b501a.png" alt="img"></p><h5 id="并行-Job-的编排文件"><a href="#并行-Job-的编排文件" class="headerlink" title="并行 Job 的编排文件"></a>并行 Job 的编排文件</h5><p>下面再来看第二个例子： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183043579-d4b0dde4-423b-4c4b-b5f3-625e89b5b00a.png" alt="img"></p><h5 id="并行-Job-的创建及运行验证"><a href="#并行-Job-的创建及运行验证" class="headerlink" title="并行 Job 的创建及运行验证"></a>并行 Job 的创建及运行验证</h5><p>这个例子就是指刚才的并行运行 Job 创建之后，可以看到有第二个并行的 Job。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042546-cb13960a-ce7d-4002-971a-d6f7b4d8df0e.png" alt="img"></p><p>现在已经有两个 Pod 正在 running，可以看到它大概执行了快到 30s </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/jpeg/168324/1566183042438-0605f7c9-200f-4f2b-8bd8-86ec2cb7e176.jpeg" alt="img"></p><p> 30s 之后它应该会起第二个。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/jpeg/168324/1566183042516-8827a10c-daa2-4e30-a36e-57ede10ec041.jpeg" alt="img"></p><p> 第一批的 pod 已经执行完毕，第二批的 pod 正在 running，每批次分别是两个Pod。也就是说后面每隔 40s 左右，就会有两个 pod 在并行执行，它一共会执行 4 批，共 8 个 pod，等到所有的 pod 执行完毕，就是刚才所说的并行执行的缓冲队列功能。</p><p>过一段时间再看这个 pods，可以发现第二批已经执行结束，接下来开始创建第三批······</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/jpeg/168324/1566183043133-04147f3b-b2ef-40c4-89a4-8c51a922fc6f.jpeg" alt="img"></p><h5 id="Cronjob-的编排文件"><a href="#Cronjob-的编排文件" class="headerlink" title="Cronjob 的编排文件"></a>Cronjob 的编排文件</h5><p>下面来看第三个例子 —— CronJob。 CronJob 是每分钟执行一次，每次一个 job。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042681-bd4c357a-54bf-4551-83a8-51826ab1bbd2.png" alt="img"></p><h5 id="Cronjob-的创建及运行验证"><a href="#Cronjob-的创建及运行验证" class="headerlink" title="Cronjob 的创建及运行验证"></a>Cronjob 的创建及运行验证</h5><p>如下图 CronJob 已经创建了，可以通过 get cronjob 来看到当前有一个 CronJob，这个时候再来看 jobs，由于它是每分钟执行一次，所以得稍微等一下。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042935-effcc286-cdbb-4953-83b4-eda9be40537e.png" alt="img"></p><p> 同时可以看到，上一个 job 还在运行，它的时间是 2m12s 左右，它的完成度是 7/8、6/8，刚刚看到 7/8 到 8/8，也就是说我们上一个任务执行了最后一步，而且每次都是两个两个地去运行。每次两个运行的 job 都会让我们在运行一些大型工作流或者工作任务的时候感到特别的方便。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/jpeg/168324/1566183042512-64012961-7a78-40b9-b762-a085bd618110.jpeg" alt="img"></p><p>上图中可以看到突然出现了一个 job，“hello-xxxx”这个 job 就是刚才所说的 CronJob。它距离刚才 CronJob 提交已经过去 1 分钟了，这样就会自动创建出来一个 job，如果不去干扰它的话，它以后大概每一分钟都会创建出来这么一个 job，除非等我们什么时候指定它不可以再运行的时候它才会停止创建。</p><p>在这里 CronJob 其实主要是用来运作一些清理任务或者说执行一些定时任务。比如说 Jenkins 构建等方面的一些任务，会特别有效。</p><h4 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h4><h5 id="Job-管理模式"><a href="#Job-管理模式" class="headerlink" title="Job 管理模式"></a>Job 管理模式</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042825-583168d6-ae09-4912-b9e9-169e26a16981.png" alt="img"></p><p>我们来看一下 job 的架构设计。Job Controller 其实还是主要去创建相对应的 pod，然后 Job Controller 会去跟踪 Job 的状态，及时地根据我们提交的一些配置重试或者继续创建。同时我们刚刚也提到，每个 pod 会有它对应的 label，来跟踪它所属的 Job Controller，并且还去配置并行的创建， 并行或者串行地去创建 pod。</p><h5 id="Job-控制器"><a href="#Job-控制器" class="headerlink" title="Job 控制器"></a>Job 控制器</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/jpeg/168324/1566183042675-20af4dc0-b870-4761-9f5b-dfa131c1b15a.jpeg" alt="img"></p><p>上图是一个 Job 控制器的主要流程。所有的 job 都是一个 controller，它会 watch 这个 API Server，我们每次提交一个 Job 的 yaml 都会经过 api-server 传到 ETCD 里面去，然后 Job Controller 会注册几个 Handler，每当有添加、更新、删除等操作的时候，它会通过一个内存级的消息队列，发到 controller 里面。 </p><p>通过 Job Controller 检查当前是否有运行的 pod，如果没有的话，通过 Scale up 把这个 pod 创建出来；如果有的话，或者如果大于这个数，对它进行 Scale down，如果这时 pod 发生了变化，需要及时 Update 它的状态。 </p><p>同时要去检查它是否是并行的 job，或者是串行的 job，根据设置的配置并行度、串行度，及时地把 pod 的数量给创建出来。最后，它会把 job 的整个的状态更新到 API Server 里面去，这样我们就能看到呈现出来的最终效果了。 </p><h3 id="二、DaemonSet"><a href="#二、DaemonSet" class="headerlink" title="二、DaemonSet"></a>二、DaemonSet</h3><h4 id="需求来源-1"><a href="#需求来源-1" class="headerlink" title="需求来源"></a>需求来源</h4><h5 id="DaemonSet-背景问题"><a href="#DaemonSet-背景问题" class="headerlink" title="DaemonSet 背景问题"></a>DaemonSet 背景问题</h5><p>下面介绍第二个控制器：<strong>DaemonSet。</strong>同样的问题：如果我们没有 DaemonSet 会怎么样？下面有几个需求： </p><ul><li>首先如果希望每个节点都运行同样一个 pod 怎么办？</li><li>如果新节点加入集群的时候，想要立刻感知到它，然后去部署一个 pod，帮助我们初始化一些东西，这个需求如何做？</li><li>如果有节点退出的时候，希望对应的 pod 会被删除掉，应该怎么操作？</li><li>如果 pod 状态异常的时候，我们需要及时地监控这个节点异常，然后做一些监控或者汇报的一些动作，那么这些东西运用什么控制器来做？</li></ul><h4 id="DaemonSet：守护进程控制器"><a href="#DaemonSet：守护进程控制器" class="headerlink" title="DaemonSet：守护进程控制器"></a>DaemonSet：守护进程控制器</h4><p>DaemonSet 也是 Kubernetes 提供的一个 default controller，它实际是做一个守护进程的控制器，它能帮我们做到以下几件事情：</p><ul><li>首先能保证集群内的每一个节点都运行一组相同的 pod；</li><li>同时还能根据节点的状态保证新加入的节点自动创建对应的 pod；</li><li>在移除节点的时候，能删除对应的 pod；</li><li>而且它会跟踪每个 pod 的状态，当这个 pod 出现异常、Crash 掉了，会及时地去 recovery 这个状态。</li></ul><h4 id="用例解读-1"><a href="#用例解读-1" class="headerlink" title="用例解读"></a>用例解读</h4><h5 id="DaemonSet-语法"><a href="#DaemonSet-语法" class="headerlink" title="DaemonSet 语法"></a>DaemonSet 语法</h5><p>下面举个例子来看一下，DaemonSet.yaml 会稍微长一些。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042532-fc9caf15-6ed8-440a-9d91-7c953fee4964.png" alt="img"></p><p>首先是 kind:DaemonSet。如果前面学过 deployment 后，其实我们再看这个 yaml 会比较简单。例如它会有 matchLabel，通过 matchLabel 去管理对应所属的 pod，这个 pod.label 也要和这个 DaemonSet.controller.label 想匹配，它才能去根据 label.selector 去找到对应的管理 Pod。下面 spec.container 里面的东西都是一致的。</p><p>这里用 fluentd 来做例子。DaemonSet 最常用的点在于以下几点内容：</p><ul><li><p>首先是存储，GlusterFS 或者 Ceph 之类的东西，需要每台节点上都运行一个类似于 Agent 的东西，DaemonSet 就能很好地满足这个诉求；</p></li><li><p>另外，对于日志收集，比如说 logstash 或者 fluentd，这些都是同样的需求，需要每台节点都运行一个 Agent，这样的话，我们可以很容易搜集到它的状态，把各个节点里面的信息及时地汇报到上面；</p></li><li><p>还有一个就是，需要每个节点去运行一些监控的事情，也需要每个节点去运行同样的事情，比如说 Promethues 这些东西，也需要 DaemonSet 的支持。</p></li></ul><h5 id="查看-DaemonSet-状态"><a href="#查看-DaemonSet-状态" class="headerlink" title="查看 DaemonSet 状态"></a>查看 DaemonSet 状态</h5><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubectl get ds</span><span class="hljs-meta">$</span><span class="bash"> kubectl get pods</span></code></pre><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042743-6306ecaa-6148-4e3a-b156-0788b3fe1ce6.png" alt="img"></p><p>创建完 DaemonSet 之后，我们可以使用 kubectl get DaemonSet（DaemonSet 缩写为 ds）。可以看到 DaemonSet 返回值和 deployment 特别像，即它当前一共有正在运行的几个，然后我们需要几个，READY 了几个。当然这里面，READY 都是只有 Pod，所以它最后创建出来所有的都是 pod。 </p><p>这里有几个参数，分别是：需要的 pod 个数、当前已经创建的 pod 个数、就绪的个数，以及所有可用的、通过健康检查的 pod；还有 NODE SELECTOR，因为 NODE SELECTOR 在 DaemonSet 里面非常有用。有时候我们可能希望只有部分节点去运行这个 pod 而不是所有的节点，所以有些节点上被打了标的话，DaemonSet 就只运行在这些节点上。比如，我只希望 master 节点运行某些 pod，或者只希望 Worker 节点运行某些 pod，就可以使用这个 NODE SELECTOR。</p><h5 id="更新-DaemonSet"><a href="#更新-DaemonSet" class="headerlink" title="更新 DaemonSet"></a>更新 DaemonSet</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042821-0e3ca01e-a376-47a0-9b78-ea330a6564a8.png" alt="img"></p><p>其实 DaemonSet 和 deployment 特别像，它也有两种更新策略：一个是 <strong>RollingUpdate</strong>，另一个是 <strong>OnDelete</strong>。 </p><ul><li><p>RollingUpdate 其实比较好理解，就是会一个一个的更新。先更新第一个 pod，然后老的 pod 被移除，通过健康检查之后再去见第二个 pod，这样对于业务上来说会比较平滑地升级，不会中断；</p></li><li><p>OnDelete 其实也是一个很好的更新策略，就是模板更新之后，pod 不会有任何变化，需要我们手动控制。我们去删除某一个节点对应的 pod，它就会重建，不删除的话它就不会重建，这样的话对于一些我们需要手动控制的特殊需求也会有特别好的作用。 </p></li></ul><h4 id="操作演示-1"><a href="#操作演示-1" class="headerlink" title="操作演示"></a>操作演示</h4><h5 id="DaemonSet-的编排"><a href="#DaemonSet-的编排" class="headerlink" title="DaemonSet 的编排"></a>DaemonSet 的编排</h5><p>下面举一个例子。比如说我们去改了些 DaemonSet 的镜像，然后看到了它的状态，它就会去一个一个地更新。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042684-afb3b2d0-62d9-4f18-a4a5-d64f5765b583.png" alt="img"></p><p>上图这个就是刚才 DaemonSet 的 yaml，会比刚才会多一些， 我们做一些资源的限制，这个都不影响。 </p><h5 id="DaemonSet-的创建与运行验证"><a href="#DaemonSet-的创建与运行验证" class="headerlink" title="DaemonSet 的创建与运行验证"></a>DaemonSet 的创建与运行验证</h5><p>下面我们创建一下 DaemonSet ，然后再看一下它的状态。下图就是我们刚才看到的 DaemonSet 在 ready 里打出来的状态。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183043020-5fb55ae3-0072-4fc0-b759-46ae46b45b99.png" alt="img"></p><p>从下图中可以看到，一共有 4 个 pod 被创建出来。为什么是 4 个 pod呢？因为只有 4 个节点，所以每个节点上都会运行一个对应的 pod。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042672-9a942427-2f83-4799-ab73-8d67033a526e.png" alt="img"></p><h5 id="DaemonSet-的更新"><a href="#DaemonSet-的更新" class="headerlink" title="DaemonSet 的更新"></a>DaemonSet 的更新</h5><p>这时，我们来更新 DaemonSet， 执行完了kubectl apply -f 后，它的 DaemonSet 就已经更新了。接下来我们去查看 DaemonSet 的更新状态。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042497-2e922696-1752-4045-ad08-cbbde1cd0c58.png" alt="img"></p><p>上图中可以看到：DaemonSet 默认这个是 RollingUpdate 的，我们看到是 0-4，现在是 1-4，也就是说它在更新第一个，第一个更新完成会去更新第二个，第二个更新完，就更新第三个······这个就是 RollingUpdate。<br>RollingUpdate 可以做到全自动化的更新，不用有人值守，而是一个一个地去自动更新，更新的过程也比较平滑，这样可以有利于我们在现场发布或者做一些其他操作。 </p><p>上图结尾处可以看到，整个的 DaemonSet 已经 RollingUpdate 完毕。 </p><h4 id="架构设计-1"><a href="#架构设计-1" class="headerlink" title="架构设计"></a>架构设计</h4><h5 id="DaemonSet-管理模式"><a href="#DaemonSet-管理模式" class="headerlink" title="DaemonSet 管理模式"></a>DaemonSet 管理模式</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042721-6ee21e8e-2dc7-4568-9fc1-5ded56d718b2.png" alt="img"></p><p>接下来看一下 DaemonSet 架构设计。DaemonSet 还是一个 controller，它最后真正的业务单元也是 Pod，DaemonSet 其实和 Job controller 特别相似，它也是通过 controller 去 watch API Server 的状态，然后及时地添加 pod。<br>唯一不同的是，它会监控节点的状态，节点新加入或者消失的时候会在节点上创建对应的 pod，然后同时根据你配置的一些 affinity 或者 label 去选择对应的节点。</p><h5 id="DaemonSet-控制器"><a href="#DaemonSet-控制器" class="headerlink" title="DaemonSet 控制器"></a>DaemonSet 控制器</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1566183042590-cf9ad525-cdbc-4f22-8cdc-ac909e6ba498.png" alt="img"></p><p>最后我们来看一下 DaemonSet 的控制器，DaemonSet 其实和 Job controller 做的差不多：两者都需要根据 watch 这个 API Server 的状态。现在 DaemonSet 和 Job controller 唯一的不同点在于，DaemonsetSet Controller需要去 <strong>watch node 的状态</strong>，但其实这个 node 的状态还是通过 API Server 传递到 ETCD 上。 </p><p>当有 node 状态节点发生变化时，它会通过一个内存消息队列发进来，然后DaemonSet controller 会去 watch 这个状态，看一下各个节点上是都有对应的 Pod，如果没有的话就去创建。当然它会去做一个对比，如果有的话，它会比较一下版本，然后加上刚才提到的是否去做 RollingUpdate？如果没有的话就会重新创建，Ondelete 删除 pod 的时候也会去做 check 它做一遍检查，是否去更新，或者去创建对应的 pod。 </p><p>当然最后的时候，如果全部更新完了之后，它会把整个 DaemonSet 的状态去更新到 API Server 上，完成最后全部的更新。 </p><h4 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h4><p>我们本期的所有的讲解都已经完毕，请大家后面再去看一下课后的习题和实验！ </p><h3 id="本节总结"><a href="#本节总结" class="headerlink" title="本节总结"></a>本节总结</h3><ul><li>Job &amp; CronJobs 基础操作与概念解析：本节详细介绍了 Job 和 CronJob 的概念，并通过两个实际的例子介绍了 Job 和 CronJob 的使用，对于 Job 和 CronJob 内的各种功能便签都进行了详细的演示；</li><li>DaemonSet 基础操作与概念解析：通过类比 Deployment 控制器，我们理解了一下 DaemonSet 控制器的工作流程与方式，并且通过对 DaemonSet 的更新了解了滚动更新的概念和相对应的操作方式。</li></ul><p><strong><u>PS: 本文摘录于阿里云公开课，仅供学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> job </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6_应用编排与管理:Deployment</title>
      <link href="2020/09/28/6-k8s-deployment/"/>
      <url>2020/09/28/6-k8s-deployment/</url>
      
        <content type="html"><![CDATA[<h3 id="6-应用编排与管理-Deployment"><a href="#6-应用编排与管理-Deployment" class="headerlink" title="6_应用编排与管理:Deployment"></a>6_应用编排与管理:Deployment</h3><h4 id="一、需求来源"><a href="#一、需求来源" class="headerlink" title="一、需求来源"></a>一、需求来源</h4><h5 id="背景问题"><a href="#背景问题" class="headerlink" title="背景问题"></a>背景问题</h5><p>首先，我们来看一下背景问题。如下图所示：如果我们直接管理集群中所有的 Pod，应用 A、B、C 的 Pod，其实是散乱地分布在集群中。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231799-a515128f-0628-46a2-89e4-f289d1c4629b.png" alt="img"></p><p>现在有以下的问题： </p><ul><li>首先，如何保证集群内可用 Pod 的数量？也就是说我们应用 A 四个 Pod 如果出现了一些宿主机故障，或者一些网络问题，如何能保证它可用的数量？</li><li>如何为所有 Pod 更新镜像版本？我们是否要某一个 Pod 去重建新版本的 Pod？</li><li>然后在更新过程中，如何保证服务的可用性？</li><li>以及更新过程中，如果发现了问题，如何快速回滚到上一个版本？ </li></ul><h5 id="Deployment：管理部署发布的控制器"><a href="#Deployment：管理部署发布的控制器" class="headerlink" title="Deployment：管理部署发布的控制器"></a>Deployment：管理部署发布的控制器</h5><p>这里就引入了我们今天课程的主题：Deployment 管理部署发布的控制器。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231795-7b63e09c-a13b-4dc3-a378-2095ad4314f0.png" alt="img"> </p><p>可以看到我们通过 Deployment 将应用 A、B、C 分别规划到不同的 Deployment 中，每个 Deployment 其实是管理的一组相同的应用 Pod，这组 Pod 我们认为它是相同的一个副本，那么 Deployment 能帮我们做什么事情呢？ </p><ol><li>首先，Deployment 定义了一种 Pod 期望数量，比如说应用 A，我们期望 Pod 数量是四个，那么这样的话，controller 就会持续维持 Pod 数量为期望的数量。当我们与 Pod 出现了网络问题或者宿主机问题的话，controller 能帮我们恢复，也就是新扩出来对应的 Pod，来保证可用的 Pod 数量与期望数量一致；</li><li>配置 Pod 发布方式，也就是说 controller 会按照用户给定的策略来更新 Pod，而且更新过程中，也可以设定不可用 Pod 数量在多少范围内；</li><li>如果更新过程中发生问题的话，即所谓“一键”回滚，也就是说你通过一条命令或者一行修改能够将 Deployment 下面所有 Pod 更新为某一个旧版本 。</li></ol><h4 id="二、用例解读"><a href="#二、用例解读" class="headerlink" title="二、用例解读"></a>二、用例解读</h4><h5 id="Deployment-语法"><a href="#Deployment-语法" class="headerlink" title="Deployment 语法"></a>Deployment 语法</h5><p>下面我们用一个简单的用例来解读一下如何操作 Deployment。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231825-f5bcf887-996e-4e18-923a-3c889bd01e77.png" alt="img"></p><p> 上图可以看到一个最简单的 Deployment 的 yaml 文件。</p><p>“apiVersion：apps/v1”，也就是说 Deployment 当前所属的组是 apps，版本是 v1。“metadata”是我们看到的 Deployment 元信息，也就是往期回顾中的 Labels、Selector、Pod.image，这些都是在往期中提到的知识点。</p><p>Deployment 作为一个 K8s 资源，它有自己的 metadata 元信息，这里我们定义的 Deployment.name 是 nginx.Deployment。Deployment.spec 中首先要有一个核心的字段，即 replicas，这里定义期望的 Pod 数量为三个；selector 其实是 Pod 选择器，那么所有扩容出来的 Pod，它的 Labels 必须匹配 selector 层上的 image.labels，也就是 app.nginx。</p><p>就如上面的 Pod 模板 template 中所述，这个 template 它其实包含了两部分内容：</p><ul><li><p>一部分是我们期望 Pod 的 metadata，其中包含了 labels，即跟 selector.matchLabels 相匹配的一个 Labels；</p></li><li><p>第二部分是 template 包含的一个 Pod.spec。这里 Pod.spec 其实是 Deployment 最终创建出来 Pod 的时候，它所用的 Pod.spec，这里定义了一个 container.nginx，它的镜像版本是 nginx:1.7.9。</p></li></ul><p>下面是遇到的新知识点：</p><ul><li>第一个是 replicas，就是 Deployment 中期望的或者终态数量；</li><li>第二个是 template，也就是 Pod 相关的一个模板。</li></ul><h5 id="查看-Deployment-状态"><a href="#查看-Deployment-状态" class="headerlink" title="查看 Deployment 状态"></a>查看 Deployment 状态</h5><pre><code class="hljs shell">kubectl get deployment</code></pre><p>当我们创建出一个 Deployment 的时候，可以通过 kubectl get deployment，看到 Deployment 总体的一个状态。如下图所示：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231829-230d2b94-e828-481e-bbc1-c078f2989ebb.png" alt="img"></p><p>上图中可以看到：</p><ul><li><strong>DESIRED</strong>：期望的 Pod 数量是 3 个；</li><li><strong>CURRENT</strong>：当前实际 Pod 数量是 3 个；</li><li><strong>UP-TO-DATE</strong>：其实是到达最新的期望版本的 Pod 数量；</li><li><strong>AVAILABLE</strong>：这个其实是运行过程中可用的 Pod 数量。后面会提到，这里 AVAILABLE 并不简单是可用的，也就是 Ready 状态的，它其实包含了一些可用超过一定时间长度的 Pod；</li><li><strong>AGE</strong>：deployment 创建的时长，如上图 Deployment 就是已经创建了 80 分钟。</li></ul><h5 id="查看-Pod"><a href="#查看-Pod" class="headerlink" title="查看 Pod"></a>查看 Pod</h5><pre><code class="hljs shell">kubectl get pod</code></pre><p>最后我们可以查看一下 Pod。如下图所示：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231858-bebfc22d-f60a-408f-a130-4e915e18abe2.png" alt="img"> </p><p>上图中有三个 Pod，Pod 名字格式我们不难看到。</p><p>最前面一段：nginx-deployment，其实是 Pod 所属 Deployment.name；中间一段：template-hash，这里三个 Pod 是一样的，因为这三个 Pod 其实都是同一个 template 中创建出来的。</p><p>最后一段，是一个 random 的字符串，我们通过 get.pod 可以看到，Pod 的 ownerReferences 即 Pod 所属的 controller 资源，并不是 Deployment，而是一个 ReplicaSet。这个 ReplicaSet 的 name，其实是 nginx-deployment 加上 pod.template-hash，后面会提到。所有的 Pod 都是 ReplicaSet 创建出来的，而 ReplicaSet 它对应的某一个具体的 Deployment.template 版本。</p><h5 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h5><p>接下来我们可以看一下，如何对一个给定的 Deployment 更新它所有Pod的镜像版本呢？这里我们可以执行一个 kubectl 命令：</p> <pre><code class="hljs shell">kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.9.1</code></pre><p>首先 kubectl 后面有一个 set image 固定写法，这里指的是设定镜像；其次是一个 deployment.v1.apps，这里也是一个固定写法，写的是我们要操作的资源类型，deployment 是资源名、v1 是资源版本、apps 是资源组，这里也可以简写为 deployment 或者 deployment.apps，比如说写为 deployment 的时候，默认将使用 apps 组 v1 版本。 </p><p>第三部分是要更新的 deployment 的 name，也就是我们的 nginx-deployment；再往后的 nginx 其实指的是 template，也就是 Pod 中的 container.name；这里我们可以注意到：一个 Pod 中，其实可能存在多个 container，而我们指定想要更新的镜像的 container.name，就是 nginx。</p><p>最后，指定我们这个容器期望更新的镜像版本，这里指的是 nginx: 1.9.1。如下图所示：当执行完这条命令之后，可以看到 deployment 中的 template.spec 已经更新为 nginx: 1.9.1。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231820-2c74c5c8-be4e-4dc4-8c77-8edf92f1f792.png" alt="img"></p><h5 id="快速回滚"><a href="#快速回滚" class="headerlink" title="快速回滚"></a>快速回滚</h5><pre><code class="hljs shell">kubectl rollout undo deployment/nginx-deployment</code></pre><p>如果我们在发布过程中遇到了问题，也支持快速回滚。通过 kubectl 执行的话，其实是“kubectl rollout undo”这个命令，可以回滚到 Deployment 上一版本；通过“rollout undo”加上“to-revision”来指定可以回滚到某一个具体的版本。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231866-c2024e6d-1c86-45dd-b668-49174c42611a.png" alt="img"> </p><h5 id="DeploymeStatus"><a href="#DeploymeStatus" class="headerlink" title="DeploymeStatus"></a>DeploymeStatus</h5><p>最后我们来看一下 DeploymeStatus。前面的课程我们学习到，每一个资源都有它的 spec.Status。这里可以看一下，deploymentStatus 中描述的三个其实是它的 conversion 状态，也就是 Processing、Complete 以及 Failed。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231814-939d6edb-61a5-4c2f-baed-16e493984cd1.png" alt="img"></p><p>以 Processing 为例：Processing 指的是 Deployment 正在处于扩容和发布中。比如说 Processing 状态的 deployment，它所有的 replicas 及 Pod 副本全部达到最新版本，而且是 available，这样的话，就可以进入 complete 状态。而 complete 状态如果发生了一些扩缩容的话，也会进入 processing 这个处理工作状态。 </p><p>如果在处理过程中遇到一些问题：比如说拉镜像失败了，或者说 readiness probe 检查失败了，就会进入 failed 状态；如果在运行过程中即 complete 状态，中间运行时发生了一些 pod readiness probe 检查失败，这个时候 deployment 也会进入 failed 状态。进入 failed 状态之后，除非所有点 replicas 均变成 available，而且是 updated 最新版本，deployment 才会重新进入 complete 状态。 </p><h4 id="三、操作演示"><a href="#三、操作演示" class="headerlink" title="三、操作演示"></a>三、操作演示</h4><h5 id="Deployment-创建及状态"><a href="#Deployment-创建及状态" class="headerlink" title="Deployment 创建及状态"></a>Deployment 创建及状态</h5><pre><code class="hljs shell">kubectl get node</code></pre><p>下面我们来进行操作演示：这里连接一个阿里云服务集群。我们可以看到当前集群已经有几个可用的 node。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231861-eb2722bf-0e99-45a3-a7ab-2e0e6fb865ad.png" alt="img"></p><p> 首先创建对应的 deployment。可以看到 deployment 中的 desired、current、up-to-date 以及 available 已经都达到了可用的期望状态。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231818-008962ad-26a3-43a2-af9e-9a88484b78cc.png" alt="img"> </p><h5 id="Deployment-的结构"><a href="#Deployment-的结构" class="headerlink" title="Deployment 的结构"></a>Deployment 的结构</h5><p>这里看到 spec 中的 replicas 是三个，selector 以及 template labels中定义的标签都是 app：nginx，spec 中的 image 是我们期望的 nginx: 1.7.9；status 中的 available.replicas，readReplicas 以及 updatedReplicas 都是 3 个。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231889-a81cdef3-fe77-44e4-9997-c7218f441981.png" alt="img"></p><h5 id="Pod-状态"><a href="#Pod-状态" class="headerlink" title="Pod 状态"></a>Pod 状态</h5><p>我们可以再选择一个 Pod 看一下状态： </p><p>可以看到：Pod 中 ownerReferences 的功能是 ReplicaSet；pod.spec.container 里的镜像是 1.7.9。这个 Pod 已经是 Running 状态，而且它的 conditions.status 是“true”，表示它的服务已经可用了。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231867-d53b54ce-8458-4b72-8eae-82bb9a266ddf.png" alt="img"></p><h5 id="更新升级"><a href="#更新升级" class="headerlink" title="更新升级"></a>更新升级</h5><p>当前只有最新版本的 replicaset，那么现在尝试对 deployment 做一次升级。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231858-54bb1384-9edb-4d22-b6e6-9a55e1c72138.png" alt="img"></p><p>“kubectl set image”这个操作命令，后面接 “deployment”，加 deployment.name，最后指定容器名，以及我们期望升级的镜像版本。</p><pre><code class="hljs shell">kubectl set image deployment nginx-deployment nginx=nginx:1.9.1</code></pre><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231800-62b39855-cf76-4e0c-8b15-e233492c9e56.png" alt="img"></p><p>接下来我们看下 deployment 中的 template 中的 image 已经更新为 1.9.1。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231821-3f15849f-5bdd-4f26-9366-09c4a5ea71ba.png" alt="img"></p><p>这个时候我们再 get pod 看一下状态。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231888-f40b5d61-4996-4fa1-b218-3747f2c7ae57.png" alt="img"></p><p>三个 pod 已经升级为新版本，pod 名字中的 pod-template-hash 也已更新。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231935-fa9c72d8-f771-4bde-94e6-254636bf5076.png" alt="img"></p><p>可以看到：旧版本 replicaset 的 spec 数量以及 pod 数量是都是 0，新版本的 pod 数量是 3 个。 </p><p>假设又做了一次更新，这个时候 get.pod 其实可以看到：当前的 pod 其实是有两个旧版本的处于 running，另一个旧版本是在删除中；而两个新版本的 pod，一个已经进入 running，一个还在 creating 中。 </p><p>这时我们可用的 pod 数量即非删除状态的 pod 数量，其实是 4 个，已经超过了 replica 原先在 deployment 设置的数量 3 个。这个原因是我们在 deployment 中有 maxavailable 和 maxsugar 两个操作，这两个配置可以限制我们在发布过程中的一些策略。在后面架构设计中会讲到这个问题。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231914-96217074-a9cb-42a4-8eb3-b1e05ca8aa00.png" alt="img"></p><h5 id="历史版本保留-revisionHistoryLimit"><a href="#历史版本保留-revisionHistoryLimit" class="headerlink" title="历史版本保留 revisionHistoryLimit"></a>历史版本保留 revisionHistoryLimit</h5><p>上图看到，我们当前最新版本的 replicaset 是 3 个 pod，另外还有两个历史版本的 replicaset，那么会不会存在一种情况：就是随着 deployment 持续的更新，这个旧版本的 replicaset 会越积越多呢？其实 deployment 提供了一个机制来避免这个问题：在 deployment spec 中，有一个 revisionHistoryLimit，它的默认值为 10，它其实保证了保留历史版本的 replicaset 的数量，我们尝试把它改为 1。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231940-fbfaffaf-000a-4c61-88e5-53041eaa851e.png" alt="img"></p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231840-eefb1499-fa04-42d4-9b0d-ee0108004e05.png" alt="img"></p><p>由上面第二张图，可以看到两个 replicaset，也就是说，除了当前版本的 replicaset 之外，旧版本的 replicaset 其实只保留了一个。</p><h5 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h5><p>最后再尝试做一下回滚。首先再来看一下 replicaset，这时发现旧版本的 replicaset 数量从 0 个增到 2 个，而新版本的 replicaset 数量从 3 个削减为 1 个，表示它已经开始在做回滚的操作。然后再观察一下， 旧版本的数量已经是 3 个，即已经回滚成功，而新版本的 pod 数量变为 0 个。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231823-4faf799b-cf35-4b1f-857b-c57288a3c874.png" alt="img"></p><p> 我们最后再 get pod 看一下：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231937-3d87925c-7e00-4f2a-87d6-6f5b6b230573.png" alt="img"></p><p> 这时，3 个 pod.template-hash 已经更新为旧版本的 hash，但其实这 3 个 pod 都是重新创建出来的，而并非我们在前一版本中创建的 3 个 pod。换句话说，也就是我们回滚的时候，其实是创建了 3 个旧版本的 pod，而并非把先前的 3 个 pod 找回来。</p><h4 id="四、架构设计"><a href="#四、架构设计" class="headerlink" title="四、架构设计"></a>四、架构设计</h4><h5 id="管理模式"><a href="#管理模式" class="headerlink" title="管理模式"></a>管理模式</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231851-fade1c70-d09f-4e47-85f7-5ed0f44c6f16.png" alt="img"> </p><p>我们来看一下架构设计。首先简单看一下管理模式：Deployment 只负责管理不同版本的 ReplicaSet，由 ReplicaSet 来管理具体的 Pod 副本数，每个 ReplicaSet 对应 Deployment template 的一个版本。在上文的例子中可以看到，每一次修改 template，都会生成一个新的 ReplicaSet，这个 ReplicaSet 底下的 Pod 其实都是相同的版本。 </p><p>如上图所示：Deployment 创建 ReplicaSet，而 ReplicaSet 创建 Pod。他们的 OwnerRef 其实都对应了其控制器的资源。 </p><h5 id="Deployment-控制器"><a href="#Deployment-控制器" class="headerlink" title="Deployment 控制器"></a>Deployment 控制器</h5><p>我们先简单看一下控制器实现原理。 </p><p>首先，我们所有的控制器都是通过 Informer 中的 Event 做一些 Handler 和 Watch。这个地方 Deployment 控制器，其实是关注 Deployment 和 ReplicaSet 中的 event，收到事件后会加入到队列中。而 Deployment controller 从队列中取出来之后，它的逻辑会判断 Check Paused，这个 Paused 其实是 Deployment 是否需要新的发布，如果 Paused 设置为 true 的话，就表示这个 Deployment 只会做一个数量上的维持，不会做新的发布。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231894-a9f476ac-1f97-4e2b-b976-8c7d9831136c.png" alt="img"></p><p>如上图，可以看到如果 Check paused 为 Yes 也就是 true 的话，那么只会做 Sync replicas。也就是说把 replicas sync 同步到对应的 ReplicaSet 中，最后再 Update Deployment status，那么 controller 这一次的 ReplicaSet 就结束了。</p><p>那么如果 paused 为 false 的话，它就会做 Rollout，也就是通过 Create 或者是 Rolling 的方式来做更新，更新的方式其实也是通过 Create/Update/Delete 这种 ReplicaSet 来做实现的。 </p><h5 id="ReplicaSet-控制器"><a href="#ReplicaSet-控制器" class="headerlink" title="ReplicaSet 控制器"></a>ReplicaSet 控制器</h5><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231827-f235ad37-09c5-4e8c-bdea-6be50738d438.png" alt="img"></p><p>当 Deployment 分配 ReplicaSet 之后，ReplicaSet 控制器本身也是从 Informer 中 watch 一些事件，这些事件包含了 ReplicaSet 和 Pod 的事件。从队列中取出之后，ReplicaSet controller 的逻辑很简单，就只管理副本数。也就是说如果 controller 发现 replicas 比 Pod 数量大的话，就会扩容，而如果发现实际数量超过期望数量的话，就会删除 Pod。 </p><p>上面 Deployment 控制器的图中可以看到，Deployment 控制器其实做了更复杂的事情，包含了版本管理，而它把每一个版本下的数量维持工作交给 ReplicaSet 来做。 </p><h5 id="扩-缩容模拟"><a href="#扩-缩容模拟" class="headerlink" title="扩/缩容模拟"></a>扩/缩容模拟</h5><p>下面来看一些操作模拟，比如说扩容模拟。这里有一个 Deployment，它的副本数是 2，对应的 ReplicaSet 有 Pod1 和 Pod2。这时如果我们修改 Deployment replicas， controller 就会把 replicas 同步到当前版本的 ReplicaSet 中，这个 ReplicaSet 发现当前有 2 个 Pod，不满足当前期望 3 个，就会创建一个新的 Pod3。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231905-7992eb8e-afe5-41c0-a091-ac1e91f68441.png" alt="img"></p><h5 id="发布模拟"><a href="#发布模拟" class="headerlink" title="发布模拟"></a>发布模拟</h5><p>我们再模拟一下发布，发布的情况会稍微复杂一点。这里可以看到 Deployment 当前初始的 template，比如说 template1 这个版本。template1 这个 ReplicaSet 对应的版本下有三个 Pod：Pod1，Pod2，Pod3。</p><p>这时修改 template 中一个容器的 image， Deployment controller 就会新建一个对应 template2 的 ReplicaSet。创建出来之后 ReplicaSet 会逐渐修改两个 ReplicaSet 的数量，比如它会逐渐增加 ReplicaSet2 中 replicas 的期望数量，而逐渐减少 ReplicaSet1 中的 Pod 数量。</p><p>那么最终达到的效果是：新版本的 Pod 为 Pod4、Pod5和Pod6，旧版本的 Pod 已经被删除了，这里就完成了一次发布。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231967-edfb9438-3f9b-417b-8415-7924578ed639.png" alt="img"></p><h5 id="回滚模拟"><a href="#回滚模拟" class="headerlink" title="回滚模拟"></a>回滚模拟</h5><p>来看一下回滚模拟，根据上面的发布模拟可以知道 Pod4、Pod5、Pod6 已经发布完成。这时发现当前的业务版本是有问题的，如果做回滚的话，不管是通过 rollout 命令还是通过回滚修改 template，它其实都是把 template 回滚为旧版本的 template1。</p><p>这个时候 Deployment 会重新修改 ReplicaSet1 中 Pod 的期望数量，把期望数量修改为 3 个，且会逐渐减少新版本也就是 ReplicaSet2 中的 replica 数量，最终的效果就是把 Pod 从旧版本重新创建出来。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231838-2c6928ff-09bb-4d90-8dba-612cf06ab7f9.png" alt="img"></p><p>发布模拟的图中可以看到，其实初始版本中 Pod1、Pod2、Pod3 是旧版本，而回滚之后其实是 Pod7、Pod8、Pod9。就是说它的回滚并不是把之前的 Pod 重新找出来，而是说重新创建出符合旧版本 template 的 Pod。 </p><h5 id="spec-字段解析"><a href="#spec-字段解析" class="headerlink" title="spec 字段解析"></a>spec 字段解析</h5><p>最后再来简单看一些 Deployment 中的字段解析。首先看一下 Deployment 中其他的 spec 字段：</p><ul><li><p>MinReadySeconds：Deployment 会根据 Pod ready 来看 Pod 是否可用，但是如果我们设置了 MinReadySeconds 之后，比如设置为 30 秒，那 Deployment 就一定会等到 Pod ready 超过 30 秒之后才认为 Pod 是 available 的。Pod available 的前提条件是 Pod ready，但是 ready 的 Pod 不一定是 available 的，它一定要超过 MinReadySeconds 之后，才会判断为 available； </p></li><li><p>revisionHistoryLimit：保留历史 revision，即保留历史 ReplicaSet 的数量，默认值为 10 个。这里可以设置为一个或两个，如果回滚可能性比较大的话，可以设置数量超过 10；</p></li><li><p>paused：paused 是标识，Deployment 只做数量维持，不做新的发布，这里在 Debug 场景可能会用到；</p></li><li><p>progressDeadlineSeconds：前面提到当 Deployment 处于扩容或者发布状态时，它的 condition 会处于一个 processing 的状态，processing 可以设置一个超时时间。如果超过超时时间还处于 processing，那么 controller 将认为这个 Pod 会进入 failed 的状态。</p></li></ul><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231895-e105b999-2394-489a-808e-dabd623c4cf9.png" alt="img"></p><h5 id="升级策略字段解析"><a href="#升级策略字段解析" class="headerlink" title="升级策略字段解析"></a>升级策略字段解析</h5><p>最后来看一下升级策略字段解析。 </p><p>Deployment 在 RollingUpdate 中主要提供了两个策略，一个是 MaxUnavailable，另一个是 MaxSurge。这两个字段解析的意思，可以看下图中详细的 comment，或者简单解释一下： </p><ul><li>MaxUnavailable：滚动过程中最多有多少个 Pod 不可用；</li><li>MaxSurge：滚动过程中最多存在多少个 Pod 超过预期 replicas 数量。 </li></ul><p>上文提到，ReplicaSet 为 3 的 Deployment 在发布的时候可能存在一种情况：新版本的 ReplicaSet 和旧版本的 ReplicaSet 都可能有两个 replicas，加在一起就是 4 个，超过了我们期望的数量三个。这是因为我们默认的 MaxUnavailable 和 MaxSurge 都是 25%，默认 Deployment 在发布的过程中，可能有 25% 的 replica 是不可用的，也可能超过 replica 数量 25% 是可用的，最高可以达到 125% 的 replica 数量。 </p><p>这里其实可以根据用户实际场景来做设置。比如当用户的资源足够，且更注重发布过程中的可用性，可设置 MaxUnavailable 较小、MaxSurge 较大。但如果用户的资源比较紧张，可以设置 MaxSurge 较小，甚至设置为 0，这里要注意的是 <strong>MaxSurge 和 MaxUnavailable 不能同时为 0</strong>。 </p><p>理由不难理解，当 MaxSurge 为 0 的时候，必须要删除 Pod，才能扩容 Pod；如果不删除 Pod 是不能新扩 Pod 的，因为新扩出来的话，总共的 Pod 数量就会超过期望数量。而两者同时为 0 的话，MaxSurge 保证不能新扩 Pod，而 MaxUnavailable 不能保证 ReplicaSet 中有 Pod 是 available 的，这样就会产生问题。所以说这两个值不能同时为 0。用户可以根据自己的实际场景来设置对应的、合适的值。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386231898-9b7daa8c-a271-4a5b-86d6-2cc5b5d50253.png" alt="img"></p><h4 id="本节总结"><a href="#本节总结" class="headerlink" title="本节总结"></a>本节总结</h4><p>本节课的主要内容就到此为止了，这里为大家简单总结一下。 </p><ul><li>Deployment 是 Kubernetes 中常见的一种 Workload，支持部署管理多版本的 Pod；</li><li>Deployment 管理多版本的方式，是针对每个版本的 template 创建一个 ReplicaSet，由 ReplicaSet 维护一定数量的 Pod 副本，而 Deployment 只需要关心不同版本的 ReplicaSet 里要指定多少数量的 Pod；</li><li>因此，Deployment 发布部署的根本原理，就是 Deployment 调整不同版本 ReplicaSet 里的终态副本数，以此来达到多版本 Pod 的升级和回滚。</li></ul><p><strong><u>PS: 本文摘录于阿里云公开课，仅供学习与参考。</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> deployment </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5_应用编排与管理：核心原理</title>
      <link href="2020/09/27/app-arrange-theory/"/>
      <url>2020/09/27/app-arrange-theory/</url>
      
        <content type="html"><![CDATA[<h3 id="5-应用编排与管理：核心原理"><a href="#5-应用编排与管理：核心原理" class="headerlink" title="5_应用编排与管理：核心原理"></a>5_应用编排与管理：核心原理</h3><h4 id="一、资源元信息"><a href="#一、资源元信息" class="headerlink" title="一、资源元信息"></a>一、资源元信息</h4><h5 id="1-Kubernetes-资源对象"><a href="#1-Kubernetes-资源对象" class="headerlink" title="1. Kubernetes 资源对象"></a>1. Kubernetes 资源对象</h5><p>首先，我们来回顾一下 Kubernetes 的资源对象组成：主要包括了 Spec、Status 两部分。其中 Spec 部分用来描述期望的状态，Status 部分用来描述观测到的状态。</p><p>今天我们将为大家介绍 K8s 的另外一个部分，即元数据部分。该部分主要包括了用来识别资源的标签：Labels， 用来描述资源的注解；Annotations， 用来描述多个资源之间相互关系的 OwnerReference。这些元数据在 K8s 运行中有非常重要的作用。后续课程中将会反复讲到。</p><h5 id="2-labels"><a href="#2-labels" class="headerlink" title="2. labels"></a>2. labels</h5><p>第一个元数据，也是最重要的一个元数据是：资源标签。资源标签是一种具有标识型的 Key：Value 元数据，这里展示了几个常见的标签。</p><p>前三个标签都打在了 Pod 对象上，分别标识了对应的应用环境、发布的成熟度和应用的版本。从应用标签的例子可以看到，标签的名字包括了一个域名的前缀，用来描述打标签的系统和工具， 最后一个标签打在 Node 对象上，还在域名前增加了版本的标识 beta 字符串。</p><p>标签主要用来筛选资源和组合资源，可以使用类似于 SQL 查询 select，来根据 Label 查询相关的资源。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187567-726bb2ec-a600-4fa2-86b8-f53a3a3ffd23.png?x-oss-process=image/resize,w_1500" alt="img"></p><h5 id="3-Selector"><a href="#3-Selector" class="headerlink" title="3. Selector"></a>3. Selector</h5><p>最常见的 Selector 就是相等型 Selector。现在举一个简单的例子： </p><p>假设系统中有四个 Pod，每个 Pod 都有标识系统层级和环境的标签，我们通过 Tie：front 这个标签，可以匹配左边栏的 Pod，相等型 Selector 还可以包括多个相等条件，多个相等条件之间是逻辑”与“的关系。 </p><p>在刚才的例子中，通过 Tie=front,Env=dev 的Selector，我们可以筛选出所有 Tie=front，而且 Env=dev 的 Pod，也就是下图中左上角的 Pod。另外一种 Selector 是集合型 Selector，在例子中，Selector 筛选所有环境是 test 或者 gray 的 Pod。 </p><p>除了 in 的集合操作外，还有 notin 集合操作，比如 tie notin（front,back），将会筛选所有 tie 不是 front 且不是 back 的 Pod。另外，也可以根据是否存在某 lable 的筛选，如：Selector release，筛选所有带 release 标签的 Pod。集合型和相等型的 Selector，也可以用“，”来连接，同样的标识逻辑”与“的关系。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187528-0f9b4a0d-267b-4d22-bd44-2b4e681b61f7.png?x-oss-process=image/resize,w_1500" alt="img"></p><h5 id="4-Annotations"><a href="#4-Annotations" class="headerlink" title="4. Annotations"></a>4. Annotations</h5><p>另外一种重要的元数据是：annotations。一般是系统或者工具用来存储资源的非标示性信息，可以用来扩展资源的 spec/status 的描述，这里给了几个 annotations 的例子：</p><p>第一个例子，存储了阿里云负载器的证书 ID，我们可以看到 annotations 一样可以拥有域名的前缀，标注中也可以包含版本信息。第二个 annotation存储了 nginx 接入层的配置信息，我们可以看到 annotations 中包括“，”这样无法出现在 label 中的特殊字符。第三个 annotations 一般可以在 kubectl apply 命令行操作后的资源中看到， annotation 值是一个结构化的数据，实际上是一个 json 串，标记了上一次 kubectl 操作的资源的 json 的描述。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187521-d6090de5-3f4f-4ad3-b41c-56159d58a652.png?x-oss-process=image/resize,w_1500" alt="img"></p><h5 id="5-Ownereference"><a href="#5-Ownereference" class="headerlink" title="5. Ownereference"></a>5. Ownereference</h5><p>我们当时讲到最后一个元数据叫做 Ownereference，所谓所有者，一般就是指集合类的资源，比如说 Pod 集合，就有 replicaset、statefulset，这个将在后序的课程中讲到。</p><p>集合类资源的控制器会创建对应的归属资源。比如：replicaset 控制器在操作中会创建 Pod，被创建 Pod 的 Ownereference 就指向了创建 Pod 的 replicaset，Ownereference 使得用户可以方便地查找一个创建资源的对象，另外，还可以用来实现级联删除的效果。</p><h4 id="二、操作演示"><a href="#二、操作演示" class="headerlink" title="二、操作演示"></a>二、操作演示</h4><p>这里通过 kubectl 命令去连接我们 ACK 中已经创建好的一个 K8s 集群，然后来展示一下怎么查看和修改 K8s 对象中的元数据，主要就是 Pod 的一个标签、注解，还有对应的 Ownerference。</p><p>首先我们看一下集群里现在的配置情况：</p><p>查看 Pod，现在没有任何的一个 Pod；</p><ul><li><strong>kubectl get pods</strong></li></ul><p>然后用事先准备好的一个 Pod 的 yaml，创建一个 Pod 出来；</p><ul><li><strong>kubectl apply -f pod1.yaml</strong></li><li><strong>kubectl apply -f pod2.yaml</strong></li></ul><p>现在查看一下 Pod 打的标签，我们用 –show-labels 这个选项，可以看到这两个 Pod 都打上了一个部署环境和层级的标签；</p><ul><li><strong>kubectl get pods —show-labels</strong></li></ul><p>我们也可以通过另外一种方式来查看具体的资源信息。首先查看 nginx1 第一个 Pod 的一个信息，用 -o yaml 的方式输出，可以看到这个 Pod 元数据里面包括了一个 lables 的字段，里面有两个 lable；</p><ul><li><strong>kubectl get pods nginx1 -o yaml | less</strong></li></ul><p>现在再想一下，怎么样对 Pod 已有的 lable 进行修改？我们先把它的部署环境，从开发环境改成测试环境，然后指定 Pod 名字，在环境再加上它的一个值 test ，看一下能不能成功。 这里报了一个错误，可以看到，它其实是说现在这个 label 已经有值了；</p><ul><li><strong>kubectl label pods nginx1 env=test</strong></li></ul><p>如果想覆盖掉它的话，得额外再加上一个覆盖的选项。加上之后呢，我们应该可以看到这个打标已经成功了；</p><ul><li><strong>kubectl label pods nginx1 env=test —overwrite</strong></li></ul><p>我们再看一下现在集群的 lable 设置情况，首先可以看到 nginx1 的确已经加上了一个部署环境 test 标签；</p><ul><li><strong>kubectl get pods —show-labels</strong></li></ul><p>如果想要对 Pod 去掉一个标签，也是跟打标签一样的操作，但是 env 后就不是等号了。只加上 label 名字，后面不加等号，改成用减号表示去除 label 的 k:v；</p><ul><li><strong>kubectl label pods nginx tie-</strong></li></ul><p>可以看到这个 label，去标已经完全成功；</p><ul><li><strong>kubectl get pods —show-labels</strong></li></ul><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187641-41eee660-5197-4e71-92c1-921e1ab18ec2.png" alt="img"></p><p>下面来看一下配置的 label 值，的确能看到 nginx1 的这个 Pod 少了一个 tie=front 的标签。有了这个 Pod 标签之后，可以看一下怎样用 label Selector 进行匹配？首先 label Selector 是通过 -l 这个选项来进行指定的 ，指定的时候，先试一下用相等型的一个 label 来筛选，所以我们指定的是部署环境等于测试的一个 Pod，我们可以看到能够筛选出一台；</p><ul><li><strong>kubectl get pods —show-labels -l env=test</strong></li></ul><p>假如说有多个相等的条件需要指定的，实际上这是一个与的关系，假如说 env 再等于 dev，我们实际上是一个 Pod 都拿不到的；</p><ul><li><strong>kubectl get pods —show-labels -l env=test,env=dev</strong></li></ul><p>然后假如说 env=dev，但是 tie=front，我们能够匹配到第二个 Pod，也就是 nginx2；</p><ul><li><strong>kubectl get pods —show-labels -l env=dev,tie=front</strong></li></ul><p>我们还可以再试一下怎么样用集合型的 label Selector 来进行筛选。这一次我们还是想要匹配出所有部署环境是 test 或者是 dev 的一个 Pod，所以在这里加上一个引号，然后在括号里面指定所有部署环境的一个集合。这次能把两个创建的 Pod 都筛选出来；</p><ul><li><strong>kubectl get pods —show-labels -l ’env in (dev,test)’</strong></li></ul><p>我们再试一下怎样对 Pod 增加一个注解，注解的话，跟打标是一样的操作，但是把 label 命令改成 annotate 命令；然后，一样指定类型和对应的名字。后面就不是加上 label 的 k:v 了，而是加上 annotation 的 k:v。这里我们可以指定一个任意的字符串，比如说加上空格、加上逗号都可以；</p><ul><li><strong>kubectl annotate pods nginx1 my-annotate=‘my annotate,ok’</strong></li></ul><p>然后，我们再看一下这个 Pod 的一些元数据，我们这边能够看到这个 Pod 的元数据里面 annotations，这是有一个 my-annotate 这个 Annotations；</p><ul><li><strong>kubectl get pods nging1 -o yaml | less</strong></li></ul><p>然后我们这里其实也能够看到有一个 kubectl apply 的时候，kubectl 工具增加了一个 annotation，这也是一个 json 串。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187628-36ad6780-3f60-4d16-850d-ca8565ca8cdf.png?x-oss-process=image/resize,w_1500" alt="img"></p><p>然后我们再演示一下看 Pod 的 Ownereference 是怎么出来的。原来的 Pod 都是直接通过创建 Pod 这个资源方式来创建的，这次换一种方式来创建：通过创建一个 ReplicaSet 对象来创建 Pod 。首先创建一个 ReplicaSet 对象，这个 ReplicaSet 对象可以具体查看一下；</p><ul><li><strong>kubectl apply -f rs.yaml</strong></li><li><strong>kubectl get replicasets  nginx-replicasets -o yaml |less</strong></li></ul><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187637-41e6df02-3d01-4038-ac67-ef62502a0420.png?x-oss-process=image/resize,w_1500" alt="img"></p><p>我们可以关注一下这个 ReplicaSet 里面 spec 里面，提到会创建两个 Pod，然后 selector 通过匹配部署环境是 product 生产环境的这个标签来进行匹配。所以我们可以看一下，现在集群中的 Pod 情况；</p><ul><li><strong>kubectl get pods</strong></li></ul><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187677-7c5eb8fb-d484-4303-b801-1f9f9a755a25.png" alt="img"></p><p>将会发现多了两个 Pod，仔细查看这两个 Pod，可以看到 ReplicaSet 创建出来的 Pod 有一个特点，即它会带有 Ownereference，然后 Ownereference 里面指向了是一个 replicasets 类型，名字就叫做 nginx-replicasets；</p><ul><li><strong>kubectl get pods nginx-replicasets-rhd68 -o yaml | less</strong></li></ul><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187603-89bfe25e-0202-4c41-b98f-0f4624b37a11.png?x-oss-process=image/resize,w_1500" alt="img"> </p><h4 id="三、控制器模式"><a href="#三、控制器模式" class="headerlink" title="三、控制器模式"></a>三、控制器模式</h4><h5 id="1、控制循环"><a href="#1、控制循环" class="headerlink" title="1、控制循环"></a>1、控制循环</h5><p>控制型模式最核心的就是控制循环的概念。在控制循环中包括了控制器，被控制的系统，以及能够观测系统的传感器，三个逻辑组件。</p><p>当然这些组件都是逻辑的，外界通过修改资源 spec 来控制资源，控制器比较资源 spec 和 status，从而计算一个 diff，diff 最后会用来决定执行对系统进行什么样的控制操作，控制操作会使得系统产生新的输出，并被传感器以资源 status 形式上报，控制器的各个组件将都会是独立自主地运行，不断使系统向 spec 表示终态趋近。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187643-740fba96-5b4b-401c-80dd-f0d7717f306c.png?x-oss-process=image/resize,w_1500" alt="img"></p><h5 id="2、Sensor"><a href="#2、Sensor" class="headerlink" title="2、Sensor"></a>2、Sensor</h5><p>控制循环中逻辑的传感器主要由 Reflector、Informer、Indexer 三个组件构成。</p><p>Reflector 通过 List 和 Watch K8s server 来获取资源的数据。List 用来在 Controller 重启以及 Watch 中断的情况下，进行系统资源的全量更新；而 Watch 则在多次 List 之间进行增量的资源更新；Reflector 在获取新的资源数据后，会在 Delta 队列中塞入一个包括资源对象信息本身以及资源对象事件类型的 Delta 记录，Delta 队列中可以保证同一个对象在队列中仅有一条记录，从而避免 Reflector 重新 List 和 Watch 的时候产生重复的记录。</p><p>Informer 组件不断地从 Delta 队列中弹出 delta 记录，然后把资源对象交给 indexer，让 indexer 把资源记录在一个缓存中，缓存在默认设置下是用资源的命名空间来做索引的，并且可以被 Controller Manager 或多个 Controller 所共享。之后，再把这个事件交给事件的回调函数</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187734-9865063f-c9ee-466a-a767-f2962169e7b3.png?x-oss-process=image/resize,w_1500" alt="img"></p><p>控制循环中的控制器组件主要由事件处理函数以及 worker 组成，事件处理函数之间会相互关注资源的新增、更新、删除的事件，并根据控制器的逻辑去决定是否需要处理。对需要处理的事件，会把事件关联资源的命名空间以及名字塞入一个工作队列中，并且由后续的 worker 池中的一个 Worker 来处理，工作队列会对存储的对象进行去重，从而避免多个 Woker 处理同一个资源的情况。 </p><p>Worker 在处理资源对象时，一般需要用资源的名字来重新获得最新的资源数据，用来创建或者更新资源对象，或者调用其他的外部服务，Worker 如果处理失败的时候，一般情况下会把资源的名字重新加入到工作队列中，从而方便之后进行重试。 </p><h5 id="3、控制循环例子-扩容"><a href="#3、控制循环例子-扩容" class="headerlink" title="3、控制循环例子-扩容"></a>3、控制循环例子-扩容</h5><p>这里举一个简单的例子来说明一下控制循环的工作原理。 </p><p>ReplicaSet 是一个用来描述无状态应用的扩缩容行为的资源， ReplicaSet controler 通过监听 ReplicaSet 资源来维持应用希望的状态数量，ReplicaSet 中通过 selector 来匹配所关联的 Pod，在这里考虑 ReplicaSet rsA 的，replicas 从 2 被改到 3 的场景。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187510-d58a5fa0-d4af-41c3-838c-81845285c018.png?x-oss-process=image/resize,w_1500" alt="img"></p><p>首先，Reflector 会 watch 到 ReplicaSet 和 Pod 两种资源的变化，为什么我们还会 watch pod 资源的变化稍后会讲到。发现 ReplicaSet 发生变化后，在 delta 队列中塞入了对象是 rsA，而且类型是更新的记录。</p><p>Informer 一方面把新的 ReplicaSet 更新到缓存中，并与 Namespace nsA 作为索引。另外一方面，调用 Update 的回调函数，ReplicaSet 控制器发现 ReplicaSet 发生变化后会把字符串的 nsA/rsA 字符串塞入到工作队列中，工作队列后的一个 Worker 从工作队列中取到了 nsA/rsA 这个字符串的 key，并且从缓存中取到了最新的 ReplicaSet 数据。</p><p>Worker 通过比较 ReplicaSet 中 spec 和 status 里的数值，发现需要对这个 ReplicaSet 进行扩容，因此 ReplicaSet 的 Worker 创建了一个 Pod，这个 pod 中的 Ownereference 取向了 ReplicaSet rsA。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187602-f3238b0b-fe1e-4276-97ba-7ce6f56d0503.png?x-oss-process=image/resize,w_1500" alt="img"></p><p>然后 Reflector Watch 到的 Pod 新增事件，在 delta 队列中额外加入了 Add 类型的 deta 记录，一方面把新的 Pod 记录通过 Indexer 存储到了缓存中，另一方面调用了 ReplicaSet 控制器的 Add 回调函数，Add 回调函数通过检查 pod ownerReferences 找到了对应的 ReplicaSet，并把包括 ReplicaSet 命名空间和字符串塞入到了工作队列中。 </p><p>ReplicaSet 的 Woker 在得到新的工作项之后，从缓存中取到了新的 ReplicaSet 记录，并得到了其所有创建的 Pod，因为 ReplicaSet 的状态不是最新的，也就是所有创建 Pod 的数量不是最新的。因此在此时 ReplicaSet 更新 status 使得 spec 和 status 达成一致。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187623-7e3b818f-9376-457f-829f-a2be2a620ade.png?x-oss-process=image/resize,w_1500" alt="img"></p><h4 id="四、控制器模式总结"><a href="#四、控制器模式总结" class="headerlink" title="四、控制器模式总结"></a>四、控制器模式总结</h4><h5 id="1、两种-API-设计方法"><a href="#1、两种-API-设计方法" class="headerlink" title="1、两种 API 设计方法"></a>1、两种 API 设计方法</h5><p>Kubernetes 控制器模式依赖声明式的 API。另外一种常见的 API 类型是命令式 API。为什么 Kubernetes 采用声明式 API，而不是命令式 API 来设计整个控制器呢？ </p><p>首先，比较两种 API 在交互行为上的差别。在生活中，常见的命令式的交互方式是家长和孩子交流方式，因为孩子欠缺目标意识，无法理解家长期望，家长往往通过一些命令，教孩子一些明确的动作，比如说：吃饭、睡觉类似的命令。我们在容器编排体系中，命令式 API 就是通过向系统发出明确的操作来执行的。 </p><p>而常见的声明式交互方式，就是老板对自己员工的交流方式。老板一般不会给自己的员工下很明确的决定，实际上可能老板对于要操作的事情本身，还不如员工清楚。因此，老板通过给员工设置可量化的业务目标的方式，来发挥员工自身的主观能动性。比如说，老板会要求某个产品的市场占有率达到 80%，而不会指出要达到这个市场占有率，要做的具体操作细节。 </p><p>类似的，在容器编排体系中，我们可以执行一个应用实例副本数保持在 3 个，而不用明确的去扩容 Pod 或是删除已有的 Pod，来保证副本数在三个。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187617-16756dca-a91f-404a-b641-8cd639b984f7.png?x-oss-process=image/resize,w_1500" alt="img"></p><h5 id="2、命令式-API-的问题"><a href="#2、命令式-API-的问题" class="headerlink" title="2、命令式 API 的问题"></a>2、命令式 API 的问题</h5><p>在理解两个交互 API 的差别后，可以分析一下命令式 API 的问题。 </p><ul><li>命令 API 最大的一个问题在于错误处理； </li></ul><p>在大规模的分布式系统中，错误是无处不在的。一旦发出的命令没有响应，调用方只能通过反复重试的方式来试图恢复错误，然而盲目的重试可能会带来更大的问题。 </p><p>假设原来的命令，后台实际上已经执行完成了，重试后又多执行了一个重试的命令操作。为了避免重试的问题，系统往往还需要在执行命令前，先记录一下需要执行的命令，并且在重启等场景下，重做待执行的命令，而且在执行的过程中，还需要考虑多个命令的先后顺序、覆盖关系等等一些复杂的逻辑情况。 </p><ul><li>实际上许多命令式的交互系统后台往往还会做一个巡检的系统，用来修正命令处理超时、重试等一些场景造成数据不一致的问题； </li></ul><p>然而，因为巡检逻辑和日常操作逻辑是不一样的，往往在测试上覆盖不够，在错误处理上不够严谨，具有很大的操作风险，因此往往很多巡检系统都是人工来触发的。 </p><ul><li>最后，命令式 API 在处理多并发访问时，也很容易出现问题； </li></ul><p>假如有多方并发的对一个资源请求进行操作，并且一旦其中有操作出现了错误，就需要重试。那么最后哪一个操作生效了，就很难确认，也无法保证。很多命令式系统往往在操作前会对系统进行加锁，从而保证整个系统最后生效行为的可预见性，但是加锁行为会降低整个系统的操作执行效率。 </p><ul><li>相对的，声明式 API 系统里天然地记录了系统现在和最终的状态。 </li></ul><p>不需要额外的操作数据。另外因为状态的幂等性，可以在任意时刻反复操作。在声明式系统运行的方式里，正常的操作实际上就是对资源状态的巡检，不需要额外开发巡检系统，系统的运行逻辑也能够在日常的运行中得到测试和锤炼，因此整个操作的稳定性能够得到保证。 </p><p>最后，因为资源的最终状态是明确的，我们可以合并多次对状态的修改。可以不需要加锁，就支持多方的并发访问。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187533-52fd8d0f-ec0a-465d-a8cd-a45744b86d37.png?x-oss-process=image/resize,w_1500" alt="img"></p><h5 id="3、控制器模式总结"><a href="#3、控制器模式总结" class="headerlink" title="3、控制器模式总结"></a>3、控制器模式总结</h5><p>最后我们总结一下：</p><ol><li>Kubernetes 所采用的控制器模式，是由声明式 API 驱动的。确切来说，是基于对 Kubernetes 资源对象的修改来驱动的；</li><li>Kubernetes 资源之后，是关注该资源的控制器。这些控制器将异步的控制系统向设置的终态驱近；</li><li>这些控制器是自主运行的，使得系统的自动化和无人值守成为可能；</li><li>因为 Kubernetes 的控制器和资源都是可以自定义的，因此可以方便的扩展控制器模式。特别是对于有状态应用，我们往往通过自定义资源和控制器的方式，来自动化运维操作。这个也就是后续会介绍的 operator 的场景。</li></ol><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386187601-8d979d5f-004c-4165-ad38-9b85c78a085b.png?x-oss-process=image/resize,w_1500" alt="img"></p><h4 id="本节总结"><a href="#本节总结" class="headerlink" title="本节总结"></a>本节总结</h4><p>本节课的主要内容就到此为止了，这里为大家简单总结一下： </p><ul><li>Kubernetes 资源对象中的元数据部分，主要包括了用来识别资源的标签：Labels， 用来描述资源的注解；Annotations， 用来描述多个资源之间相互关系的 OwnerReference。这些元数据在 K8s 运行中有非常重要的作用；</li><li>控制型模式中最核心的就是控制循环的概念；</li><li>两种 API 设计方法：声明式 API 和命令式 API ；Kubernetes 所采用的控制器模式，是由声明式 API 驱动的；</li></ul><p><strong><u>PS：本文摘录于阿里云公开课，仅为学习与参考。</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> theroy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s_理解Pod和容器设计模式</title>
      <link href="2020/09/25/k8s-pod/"/>
      <url>2020/09/25/k8s-pod/</url>
      
        <content type="html"><![CDATA[<h3 id="k8s-理解Pod和容器设计模式"><a href="#k8s-理解Pod和容器设计模式" class="headerlink" title="k8s_理解Pod和容器设计模式"></a>k8s_理解Pod和容器设计模式</h3><h4 id="一、为什么需要-Pod"><a href="#一、为什么需要-Pod" class="headerlink" title="一、为什么需要 Pod"></a>一、为什么需要 Pod</h4><h5 id="容器的基本概念"><a href="#容器的基本概念" class="headerlink" title="容器的基本概念"></a>容器的基本概念</h5><p>现在来看第一个问题：为什么需要 Pod？我们知道 Pod 是 Kubernetes 项目里面一个非常重要的概念，也是非常重要的一个原子调度单位，但是为什么我们会需要这样一个概念呢？我们在使用容器 Docker 的时候，也没有这个说法。其实如果要理解 Pod，我们首先要理解容器，所以首先来回顾一下容器的概念：</p><p><strong>容器的本质实际上是一个进程，是一个视图被隔离，资源受限的进程。</strong></p><p>容器里面 PID=1 的进程就是应用本身，这意味着管理虚拟机等于管理基础设施，因为我们是在管理机器，但管理容器却等于直接管理应用本身。这也是之前说过的不可变基础设施的一个最佳体现，这个时候，你的应用就等于你的基础设施，它一定是不可变的。</p><p>在以上面的例子为前提的情况下，Kubernetes 又是什么呢？我们知道，很多人都说 Kubernetes 是云时代的操作系统，这个非常有意思，因为如果以此类推，容器镜像就是这个操作系统的软件安装包，它们之间是这样的一个类比关系。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134387-3d59f173-6d5d-422d-87de-9e3581af5c91.png" alt="img"></p><p>真实操作系统里的例子</p><p>如果说 Kubernetes 就是操作系统的话，那么我们不妨看一下真实的操作系统的例子。</p><p>例子里面有一个程序叫做 Helloworld，这个 Helloworld 程序实际上是由一组进程组成的，需要注意一下，这里说的进程实际上等同于 Linux 中的线程。</p><p>因为 Linux 中的线程是轻量级进程，所以如果从 Linux 系统中去查看 Helloworld 中的 pstree，将会看到这个 Helloworld 实际上是由四个线程组成的，分别是 **{api、main、log、compute}**。也就是说，四个这样的线程共同协作，共享 Helloworld 程序的资源，组成了 Helloworld 程序的真实工作情况。</p><p>这是操作系统里面进程组或者线程组中一个非常真实的例子，以上就是进程组的一个概念。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134417-da3e675b-647c-4004-930f-f36a659c913b.png" alt="img"></p><p>那么大家不妨思考一下，在真实的操作系统里面，一个程序往往是根据进程组来进行管理的。Kubernetes 把它类比为一个操作系统，比如说 Linux。针对于容器我们前面提到可以类比为进程，就是前面的 Linux 线程。那么 Pod 又是什么呢？实际上 Pod 就是我们刚刚提到的进程组，也就是 Linux 里的线程组。</p><h5 id="进程组概念"><a href="#进程组概念" class="headerlink" title="进程组概念"></a>进程组概念</h5><p>说到进程组，首先建议大家至少有个概念上的理解，然后我们再详细的解释一下。</p><p>还是前面那个例子：Helloworld 程序由四个进程组成，这些进程之间会共享一些资源和文件。那么现在有一个问题：假如说现在把 Helloworld 程序用容器跑起来，你会怎么去做？</p><p>当然，最自然的一个解法就是，我现在就启动一个 Docker 容器，里面运行四个进程。可是这样会有一个问题，这种情况下容器里面 PID=1 的进程该是谁? 比如说，它应该是我的 main 进程，那么问题来了，“谁”又负责去管理剩余的 3 个进程呢？ </p><p>这个核心问题在于，容器的设计本身是一种“单进程”模型，不是说容器里只能起一个进程，由于容器的应用等于进程，所以只能去管理 PID=1 的这个进程，其他再起来的进程其实是一个托管状态。 所以说服务应用进程本身就具有“进程管理”的能力。</p><p>比如说 Helloworld 的程序有 system 的能力，或者直接把容器里 PID=1 的进程直接改成 systemd，否则这个应用，或者是容器是没有办法去管理很多个进程的。因为 PID=1 进程是应用本身，如果现在把这个 PID=1 的进程给 kill 了，或者它自己运行过程中死掉了，那么剩下三个进程的资源就没有人回收了，这个是非常非常严重的一个问题。</p><p>而反过来真的把这个应用本身改成了 systemd，或者在容器里面运行了一个 systemd，将会导致另外一个问题：使得管理容器，不再是管理应用本身了，而等于是管理 systemd，这里的问题就非常明显了。比如说我这个容器里面 run 的程序或者进程是 systemd，那么接下来，这个应用是不是退出了？是不是 fail 了？是不是出现异常失败了？实际上是没办法直接知道的，因为容器管理的是 systemd。这就是为什么在容器里面运行一个复杂程序往往比较困难的一个原因。 </p><p>这里再帮大家梳理一下：<strong>由于容器实际上是一个“单进程”模型</strong>，所以如果你在容器里启动多个进程，只有一个可以作为 PID=1 的进程，而这时候，如果这个 PID=1 的进程挂了，或者说失败退出了，那么其他三个进程就会自然而然的成为孤儿，没有人能够管理它们，没有人能够回收它们的资源，这是一个非常不好的情况。 </p><blockquote><p>注意：Linux 容器的“单进程”模型，指的是容器的生命周期等同于 PID=1 的进程（容器应用进程）的生命周期，而不是说容器里不能创建多进程。当然，一般情况下，容器应用进程并不具备进程管理能力，所以你通过 exec 或者 ssh 在容器里创建的其他进程，一旦异常退出（比如 ssh 终止）是很容易变成孤儿进程的。</p></blockquote><p>反过来，其实可以在容器里面 run 一个 systemd，用它来管理其他所有的进程。这样会产生第二个问题：实际上没办法直接管理我的应用了，因为我的应用被 systemd 给接管了，那么这个时候应用状态的生命周期就不等于容器生命周期。这个管理模型实际上是非常非常复杂的。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134437-b2d02bac-7803-435a-9b13-606eb878d74e.png" alt="img"></p><h5 id="Pod-“进程组”"><a href="#Pod-“进程组”" class="headerlink" title="Pod = “进程组”"></a>Pod = “进程组”</h5><p>在 kubernetes 里面，Pod 实际上正是 kubernetes 项目为你抽象出来的一个可以类比为进程组的概念。</p><p>前面提到的，由四个进程共同组成的一个应用 Helloworld，在 Kubernetes 里面，实际上会被定义为一个拥有四个容器的 Pod，这个概念大家一定要非常仔细的理解。</p><p>就是说现在有四个职责不同、相互协作的进程，需要放在容器里去运行，在 Kubernetes 里面并不会把它们放到一个容器里，因为这里会遇到两个问题。那么在 Kubernetes 里会怎么去做呢？它会把四个独立的进程分别用四个独立的容器启动起来，然后把它们定义在一个 Pod 里面。 </p><p>所以当 Kubernetes 把 Helloworld 给拉起来的时候，你实际上会看到四个容器，它们共享了某些资源，这些资源都属于 Pod，所以我们说 Pod 在 Kubernetes 里面只有一个逻辑单位，没有一个真实的东西对应说这个就是 Pod，不会有的。真正起来在物理上存在的东西，就是四个容器。这四个容器，或者说是多个容器的组合就叫做 Pod。并且还有一个概念一定要非常明确，Pod 是 Kubernetes 分配资源的一个单位，因为里面的容器要共享某些资源，所以 Pod 也是 Kubernetes 的原子调度单位。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134420-11fc8a1b-71be-45ff-8970-a6397fb0f24c.png" alt="img"></p><p>上面提到的 Pod 设计，也不是 Kubernetes 项目自己想出来的， 而是早在 Google 研发 Borg 的时候，就已经发现了这样一个问题。这个在 Borg paper 里面有非常非常明确的描述。简单来说 Google 工程师发现在 Borg 下面部署应用时，很多场景下都存在着类似于“进程与进程组”的关系。更具体的是，这些应用之前往往有着密切的协作关系，使得它们必须部署在同一台机器上并且共享某些信息。</p><p>以上就是进程组的概念，也是 Pod 的用法。 </p><h5 id="为什么-Pod-必须是原子调度单位？"><a href="#为什么-Pod-必须是原子调度单位？" class="headerlink" title="为什么 Pod 必须是原子调度单位？"></a>为什么 Pod 必须是原子调度单位？</h5><p>可能到这里大家会有一些问题：虽然了解这个东西是一个进程组，但是为什么要把 Pod 本身作为一个概念抽象出来呢？或者说能不能通过调度把 Pod 这个事情给解决掉呢？为什么 Pod 必须是 Kubernetes 里面的原子调度单位？ </p><p>下面我们通过一个例子来解释。</p><p>假如现在有两个容器，它们是紧密协作的，所以它们应该被部署在一个 Pod 里面。具体来说，第一个容器叫做 App，就是业务容器，它会写日志文件；第二个容器叫做 LogCollector，它会把刚刚 App 容器写的日志文件转发到后端的 ElasticSearch 中。 </p><p>两个容器的资源需求是这样的：App 容器需要 1G 内存，LogCollector 需要 0.5G 内存，而当前集群环境的可用内存是这样一个情况：Node_A：1.25G 内存，Node_B：2G 内存。 </p><p>假如说现在没有 Pod 概念，就只有两个容器，这两个容器要紧密协作、运行在一台机器上。可是，如果调度器先把 App 调度到了 Node_A 上面，接下来会怎么样呢？这时你会发现：LogCollector 实际上是没办法调度到 Node_A 上的，因为资源不够。其实此时整个应用本身就已经出问题了，调度已经失败了，必须去重新调度。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134483-2edd851a-cc15-4f83-8d23-fd9810a6e460.png" alt="img"></p><p>以上就是一个非常典型的成组调度失败的例子。英文叫做：Task co-scheduling 问题，这个问题不是说不能解，在很多项目里面，这样的问题都有解法。</p><p>比如说在 Mesos 里面，它会做一个事情，叫做资源囤积（resource hoarding）：即当所有设置了 Affinity 约束的任务都达到时，才开始统一调度，这是一个非常典型的成组调度的解法。</p><p>所以上面提到的“App”和“LogCollector”这两个容器，在 Mesos 里面，他们不会说立刻调度，而是等两个容器都提交完成，才开始统一调度。这样也会带来新的问题，首先调度效率会损失，因为需要等待。由于需要等还会有外一个情况会出现，就是产生死锁，就是互相等待的一个情况。这些机制在 Mesos 里都是需要解决的，也带来了额外的复杂度。</p><p>另一种解法是 Google 的解法。它在 Omega 系统（就是 Borg 下一代）里面，做了一个非常复杂且非常厉害的解法，叫做乐观调度。比如说：不管这些冲突的异常情况，先调度，同时设置一个非常精妙的回滚机制，这样经过冲突后，通过回滚来解决问题。这个方式相对来说要更加优雅，也更加高效，但是它的实现机制是非常复杂的。这个有很多人也能理解，就是悲观锁的设置一定比乐观锁要简单。</p><p>而像这样的一个 Task co-scheduling 问题，在 Kubernetes 里，就直接通过 Pod 这样一个概念去解决了。因为在 Kubernetes 里，这样的一个 App 容器和 LogCollector 容器一定是属于一个 Pod 的，它们在调度时必然是以一个 Pod 为单位进行调度，所以这个问题是根本不存在的。 </p><h5 id="再次理解-Pod"><a href="#再次理解-Pod" class="headerlink" title="再次理解 Pod"></a>再次理解 Pod</h5><p>在讲了前面这些知识点之后，我们来再次理解一下 Pod，首先 Pod 里面的容器是“超亲密关系”。</p><p>这里有个“超”字需要大家理解，正常来说，有一种关系叫做亲密关系，这个亲密关系是一定可以通过调度来解决的。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134426-2b1f7331-c998-434d-b932-dbdcfdffbc37.png" alt="img"></p><p>比如说现在有两个 Pod，它们需要运行在同一台宿主机上，那这样就属于亲密关系，调度器一定是可以帮助去做的。但是对于超亲密关系来说，有一个问题，即它必须通过 Pod 来解决。因为如果超亲密关系赋予不了，那么整个 Pod 或者说是整个应用都无法启动。</p><p>什么叫做超亲密关系呢？大概分为以下几类：</p><ul><li>比如说两个进程之间会发生文件交换，前面提到的例子就是这样，一个写日志，一个读日志；</li><li>两个进程之间需要通过 localhost 或者说是本地的 Socket 去进行通信，这种本地通信也是超亲密关系；</li><li>这两个容器或者是微服务之间，需要发生非常频繁的 RPC 调用，出于性能的考虑，也希望它们是超亲密关系；</li><li>两个容器或者是应用，它们需要共享某些 Linux Namespace。最简单常见的一个例子，就是我有一个容器需要加入另一个容器的 Network Namespace。这样我就能看到另一个容器的网络设备，和它的网络信息。</li></ul><p>像以上几种关系都属于超亲密关系，它们都是在 Kubernetes 中会通过 Pod 的概念去解决的。</p><p>现在我们理解了 Pod 这样的概念设计，理解了为什么需要 Pod。它解决了两个问题：</p><ol><li>我们怎么去描述超亲密关系；</li><li>我们怎么去对超亲密关系的容器或者说是业务去做统一调度，这是 Pod 最主要的一个诉求。</li></ol><h4 id="二、Pod-的实现机制"><a href="#二、Pod-的实现机制" class="headerlink" title="二、Pod 的实现机制"></a>二、Pod 的实现机制</h4><h5 id="Pod-要解决的问题"><a href="#Pod-要解决的问题" class="headerlink" title="Pod 要解决的问题"></a>Pod 要解决的问题</h5><p>像 Pod 这样一个东西，本身是一个逻辑概念。那在机器上，它究竟是怎么实现的呢？这就是我们要解释的第二个问题。</p><p>既然说 Pod 要解决这个问题，核心就在于如何让一个 Pod 里的多个容器之间最高效的共享某些资源和数据。</p><p>因为容器之间原本是被 Linux Namespace 和 cgroups 隔开的，所以现在实际要解决的是怎么去打破这个隔离，然后共享某些事情和某些信息。这就是 Pod 的设计要解决的核心问题所在。</p><p><strong>所以说具体的解法分为两个部分：网络和存储。</strong></p><h5 id="1-共享网络"><a href="#1-共享网络" class="headerlink" title="1.共享网络"></a>1.共享网络</h5><p>第一个问题是 Pod 里的多个容器怎么去共享网络？下面是个例子：</p><p>比如说现在有一个 Pod，其中包含了一个容器 A 和一个容器 B，它们两个就要共享 Network Namespace。在 Kubernetes 里的解法是这样的：它会在每个 Pod 里，额外起一个 Infra container 小容器来共享整个 Pod 的 Network Namespace。</p><p>Infra container 是一个非常小的镜像，大概 100~200KB 左右，是一个汇编语言写的、永远处于“暂停”状态的容器。由于有了这样一个 Infra container 之后，其他所有容器都会通过 Join Namespace 的方式加入到 Infra container 的 Network Namespace 中。</p><p>所以说一个 Pod 里面的所有容器，它们看到的网络视图是完全一样的。即：它们看到的网络设备、IP地址、Mac地址等等，跟网络相关的信息，其实全是一份，这一份都来自于 Pod 第一次创建的这个 Infra container。这就是 Pod 解决网络共享的一个解法。</p><p>在 Pod 里面，一定有一个 IP 地址，是这个 Pod 的 Network Namespace 对应的地址，也是这个 Infra container 的 IP 地址。所以大家看到的都是一份，而其他所有网络资源，都是一个 Pod 一份，并且被 Pod 中的所有容器共享。这就是 Pod 的网络实现方式。</p><p>由于需要有一个相当于说中间的容器存在，所以整个 Pod 里面，必然是 Infra container 第一个启动。并且整个 Pod 的生命周期是等同于 Infra container 的生命周期的，与容器 A 和 B 是无关的。这也是为什么在 Kubernetes 里面，它是允许去单独更新 Pod 里的某一个镜像的，即：做这个操作，整个 Pod 不会重建，也不会重启，这是非常重要的一个设计。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134460-bae9e9c3-8e1d-4d79-8cd2-f0b3aff3d2e4.png" alt="img"></p><h5 id="2-共享存储"><a href="#2-共享存储" class="headerlink" title="2.共享存储"></a>2.共享存储</h5><p>第二问题：Pod 怎么去共享存储？Pod 共享存储就相对比较简单。</p><p>比如说现在有两个容器，一个是 Nginx，另外一个是非常普通的容器，在 Nginx 里放一些文件，让我能通过 Nginx 访问到。所以它需要去 share 这个目录。我 share 文件或者是 share 目录在 Pod 里面是非常简单的，实际上就是把 volume 变成了 Pod level。然后所有容器，就是所有同属于一个 Pod 的容器，他们共享所有的 volume。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134394-2f04efd5-8188-434b-a033-b4a2b09547f0.png" alt="img"></p><p> 比如说上图的例子，这个 volume 叫做 shared-data，它是属于 Pod level 的，所以在每一个容器里可以直接声明：要挂载 shared-data 这个 volume，只要你声明了你挂载这个 volume，你在容器里去看这个目录，实际上大家看到的就是同一份。这个就是 Kubernetes 通过 Pod 来给容器共享存储的一个做法。</p><p>所以在之前的例子中，应用容器 App 写了日志，只要这个日志是写在一个 volume 中，只要声明挂载了同样的 volume，这个 volume 就可以立刻被另外一个 LogCollector 容器给看到。以上就是 Pod 实现存储的方式。</p><h4 id="三、详解容器设计模式"><a href="#三、详解容器设计模式" class="headerlink" title="三、详解容器设计模式"></a>三、详解容器设计模式</h4><p>现在我们知道了为什么需要 Pod，也了解了 Pod 这个东西到底是怎么实现的。最后，以此为基础，详细介绍一下 Kubernetes 非常提倡的一个概念，叫做容器设计模式。</p><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><p>接下来将会用一个例子来给大家进行讲解。</p><p>比如我现在有一个非常常见的一个诉求：我现在要发布一个应用，这个应用是 JAVA 写的，有一个 WAR 包需要把它放到 Tomcat 的 web APP 目录下面，这样就可以把它启动起来了。可是像这样一个 WAR 包或 Tomcat 这样一个容器的话，怎么去做，怎么去发布？这里面有几种做法。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134433-e9168bca-f622-4519-afc0-08ab3466cc52.png" alt="img"></p><ul><li><p>第一种方式：可以把 WAR 包和 Tomcat 打包放进一个镜像里面。但是这样带来一个问题，就是现在这个镜像实际上揉进了两个东西。那么接下来，无论是我要更新 WAR 包还是说我要更新 Tomcat，都要重新做一个新的镜像，这是比较麻烦的；</p></li><li><p>第二种方式：就是镜像里面只打包 Tomcat。它就是一个 Tomcat，但是需要使用数据卷的方式，比如说 hostPath，从宿主机上把 WAR 包挂载进我们 Tomcat 容器中，挂到我的 web APP 目录下面，这样把这个容器启用起来之后，里面就能用了。</p></li></ul><p>但是这时会发现一个问题：这种做法一定需要维护一套分布式存储系统。因为这个容器可能第一次启动是在宿主机 A 上面，第二次重新启动就可能跑到 B 上去了，容器它是一个可迁移的东西，它的状态是不保持的。所以必须维护一套分布式存储系统，使容器不管是在 A 还是在 B 上，都可以找到这个 WAR 包，找到这个数据。</p><blockquote><p>注意，即使有了分布式存储系统做 Volume，你还需要负责维护 Volume 里的 WAR 包。比如：你需要单独写一套 Kubernetes Volume 插件，用来在每次 Pod 启动之前，把应用启动所需的 WAR 包下载到这个 Volume 里，然后才能被应用挂载使用到。</p></blockquote><p>这样操作带来的复杂程度还是比较高的，且这个容器本身必须依赖于一套持久化的存储插件（用来管理 Volume 里的 WAR 包内容）。</p><h5 id="InitContainer"><a href="#InitContainer" class="headerlink" title="InitContainer"></a>InitContainer</h5><p>所以大家有没有考虑过，像这样的组合方式，有没有更加通用的方法？哪怕在本地 Kubernetes 上，没有分布式存储的情况下也能用、能玩、能发布。</p><p>实际上方法是有的，在 Kubernetes 里面，像这样的组合方式，叫做 Init Container。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134496-9a5efe9f-ef17-4af6-b59a-507291e74212.png" alt="img"></p><p>还是同样一个例子：在上图的 yaml 里，首先定义一个 Init Container，它只做一件事情，就是把 WAR 包从镜像里拷贝到一个 Volume 里面，它做完这个操作就退出了，所以 Init Container 会比用户容器先启动，并且严格按照定义顺序来依次执行。 </p><p>然后，这个关键在于刚刚拷贝到的这样一个目的目录：APP 目录，实际上是一个 Volume。而我们前面提到，一个 Pod 里面的多个容器，它们是可以共享 Volume 的，所以现在这个 Tomcat 容器，只是打包了一个 Tomcat 镜像。但在启动的时候，要声明使用 APP 目录作为我的 Volume，并且要把它们挂载在 Web APP 目录下面。</p><p>而这个时候，由于前面已经运行过了一个 Init Container，已经执行完拷贝操作了，所以这个 Volume 里面已经存在了应用的 WAR 包：就是 sample.war，绝对已经存在这个 Volume 里面了。等到第二步执行启动这个 Tomcat 容器的时候，去挂这个 Volume，一定能在里面找到前面拷贝来的 sample.war。</p><p>所以可以这样去描述：这个 Pod 就是一个自包含的，可以把这一个 Pod 在全世界任何一个 Kubernetes 上面都顺利启用起来。不用担心没有分布式存储、Volume 不是持久化的，它一定是可以公布的。</p><p>所以这是一个通过组合两个不同角色的容器，并且按照这样一些像 Init Container 这样一种编排方式，统一的去打包这样一个应用，把它用 Pod 来去做的非常典型的一个例子。像这样的一个概念，在 Kubernetes 里面就是一个非常经典的容器设计模式，叫做：“Sidecar”。</p><h5 id="容器设计模式：Sidecar"><a href="#容器设计模式：Sidecar" class="headerlink" title="容器设计模式：Sidecar"></a>容器设计模式：Sidecar</h5><p>什么是 Sidecar？就是说其实在 Pod 里面，可以定义一些专门的容器，来执行主业务容器所需要的一些辅助工作，比如我们前面举的例子，其实就干了一个事儿，这个 Init Container，它就是一个 Sidecar，它只负责把镜像里的 WAR 包拷贝到共享目录里面，以便被 Tomcat 能够用起来。</p><p>其它有哪些操作呢？比如说：</p><ul><li><p>原本需要在容器里面执行 SSH 需要干的一些事情，可以写脚本、一些前置的条件，其实都可以通过像 Init Container 或者另外像 Sidecar 的方式去解决；</p></li><li><p>当然还有一个典型例子就是我的日志收集，日志收集本身是一个进程，是一个小容器，那么就可以把它打包进 Pod 里面去做这个收集工作；</p></li><li><p>还有一个非常重要的东西就是 Debug 应用，实际上现在 Debug 整个应用都可以在应用 Pod 里面再次定义一个额外的小的 Container，它可以去 exec 应用 pod 的 namespace；</p></li><li><p>查看其他容器的工作状态，这也是它可以做的事情。不再需要去 SSH 登陆到容器里去看，只要把监控组件装到额外的小容器里面就可以了，然后把它作为一个 Sidecar 启动起来，跟主业务容器进行协作，所以同样业务监控也都可以通过 Sidecar 方式来去做。</p></li></ul><p>这种做法一个非常明显的优势就是在于其实将辅助功能从我的业务容器解耦了，所以我就能够独立发布 Sidecar 容器，并且更重要的是这个能力是可以重用的，即同样的一个监控 Sidecar 或者日志 Sidecar，可以被全公司的人共用的。这就是设计模式的一个威力。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134438-219fd80c-b393-425d-a8b8-64f8cded2515.png" alt="img"></p><h5 id="Sidecar：应用与日志收集"><a href="#Sidecar：应用与日志收集" class="headerlink" title="Sidecar：应用与日志收集"></a>Sidecar：应用与日志收集</h5><p>接下来，我们再详细细化一下 Sidecar 这样一个模式，它还有一些其他的场景。</p><p>比如说前面提到的应用日志收集，业务容器将日志写在一个 Volume 里面，而由于 Volume 在 Pod 里面是被共享的，所以日志容器 —— 即 Sidecar 容器一定可以通过共享该 Volume，直接把日志文件读出来，然后存到远程存储里面，或者转发到另外一个例子。现在业界常用的 Fluentd 日志进程或日志组件，基本上都是这样的工作方式。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134493-3703f96a-47de-4b4c-b6a3-f2c94ec29478.png" alt="img"></p><h5 id="Sidecar：代理容器"><a href="#Sidecar：代理容器" class="headerlink" title="Sidecar：代理容器"></a>Sidecar：代理容器</h5><p>Sidecar 的第二个用法，可以称作为代理容器 Proxy。什么叫做代理容器呢？</p><p>假如现在有个 Pod 需要访问一个外部系统，或者一些外部服务，但是这些外部系统是一个集群，那么这个时候如何通过一个统一的、简单的方式，用一个 IP 地址，就把这些集群都访问到？有一种方法就是：修改代码。因为代码里记录了这些集群的地址；另外还有一种解耦的方法，即通过 Sidecar 代理容器。</p><p>简单说，单独写一个这么小的 Proxy，用来处理对接外部的服务集群，它对外暴露出来只有一个 IP 地址就可以了。所以接下来，业务容器主要访问 Proxy，然后由 Proxy 去连接这些服务集群，这里的关键在于 Pod 里面多个容器是通过 localhost 直接通信的，因为它们同属于一个 network Namespace，网络视图都一样，所以它们俩通信 localhost，并没有性能损耗。</p><p>所以说代理容器除了做了解耦之外，并不会降低性能，更重要的是，像这样一个代理容器的代码就又可以被全公司重用了。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134402-1486b924-7358-411f-9c82-57b29c8ff7bc.png" alt="img"></p><h5 id="Sidecar：适配器容器"><a href="#Sidecar：适配器容器" class="headerlink" title="Sidecar：适配器容器"></a>Sidecar：适配器容器</h5><p>Sidecar 的第三个设计模式 —— 适配器容器 Adapter，什么叫 Adapter 呢？</p><p>现在业务暴露出来的 API，比如说有个 API 的一个格式是 A，但是现在有一个外部系统要去访问我的业务容器，它只知道的一种格式是 API B ,所以要做一个工作，就是把业务容器怎么想办法改掉，要去改业务代码。但实际上，你可以通过一个 Adapter 帮你来做这层转换。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386134457-42f87216-b8ce-42c7-b8a1-3695cc283e4d.png" alt="img"></p><p>现在有个例子：现在业务容器暴露出来的监控接口是 /metrics，访问这个这个容器的 metrics 的这个 URL 就可以拿到了。可是现在，这个监控系统升级了，它访问的 URL 是 /health，我只认得暴露出 health 健康检查的 URL，才能去做监控，metrics 不认识。那这个怎么办？那就需要改代码了，但可以不去改代码，而是额外写一个 Adapter，用来把所有对 health 的这个请求转发给 metrics 就可以了，所以这个 Adapter 对外暴露的是 health 这样一个监控的 URL，这就可以了，你的业务就又可以工作了。</p><p>这样的关键还在于 Pod 之中的容器是通过 localhost 直接通信的，所以没有性能损耗，并且这样一个 Adapter 容器可以被全公司重用起来，这些都是设计模式给我们带来的好处。 </p><h5 id="本节总结"><a href="#本节总结" class="headerlink" title="本节总结"></a><strong>本节总结</strong></h5><ul><li>Pod 是 Kubernetes 项目里实现“容器设计模式”的核心机制；</li><li>“容器设计模式”是 Google Borg 的大规模容器集群管理最佳实践之一，也是 Kubernetes 进行复杂应用编排的基础依赖之一；</li><li>所有“设计模式”的本质都是：解耦和重用。</li></ul><p><strong><u>PS：本文摘录于阿里云公开课，仅供学习与参考。</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> pod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes核心概念</title>
      <link href="2020/09/23/k8s-core-concepts/"/>
      <url>2020/09/23/k8s-core-concepts/</url>
      
        <content type="html"><![CDATA[<h3 id="Kubernetes核心概念"><a href="#Kubernetes核心概念" class="headerlink" title="Kubernetes核心概念"></a>Kubernetes核心概念</h3><h3 id="一、什么是-Kubernetes"><a href="#一、什么是-Kubernetes" class="headerlink" title="一、什么是 Kubernetes"></a>一、什么是 Kubernetes</h3><p> Kubernetes，从官方网站上可以看到，它是一个工业级的容器编排平台。Kubernetes 这个单词是希腊语，它的中文翻译是“舵手”或者“飞行员”。在一些常见的资料中也会看到“ks”这个词，也就是“k8s”，它是通过将8个字母“ubernete ”替换为“8”而导致的一个缩写。</p><p>Kubernetes 为什么要用“舵手”来命名呢？大家可以看一下这张图： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045845-c3b67c67-bc42-4853-95bb-d0769b04d6aa.png" alt="img"></p><p> 这是一艘载着一堆集装箱的轮船，轮船在大海上运着集装箱奔波，把集装箱送到它们该去的地方。我们之前其实介绍过一个概念叫做 container，container 这个英文单词也有另外的一个意思就是“集装箱”。Kubernetes 也就借着这个寓意，希望成为运送集装箱的一个轮船，来帮助我们管理这些集装箱，也就是管理这些容器。</p><p>这个就是为什么会选用 Kubernetes 这个词来代表这个项目的原因。更具体一点地来说：Kubernetes 是一个自动化的容器编排平台，它负责应用的部署、应用的弹性以及应用的管理，这些都是基于容器的。 </p><h3 id="二、Kubernetes-核心功能"><a href="#二、Kubernetes-核心功能" class="headerlink" title="二、Kubernetes 核心功能"></a>二、Kubernetes 核心功能</h3><ul><li><p>服务的发现与负载的均衡；</p></li><li><p>容器的自动装箱，我们也会把它叫做 scheduling，就是“调度”，把一个容器放到一个集群的某一个机器上，Kubernetes 会帮助我们去做存储的编排，让存储的声明周期与容器的生命周期能有一个连接；</p></li><li><p>Kubernetes 会帮助我们去做自动化的容器的恢复。在一个集群中，经常会出现宿主机的问题或者说是 OS 的问题，导致容器本身的不可用，Kubernetes 会自动地对这些不可用的容器进行恢复；</p></li><li><p>Kubernetes 会帮助我们去做应用的自动发布与应用的回滚，以及与应用相关的配置密文的管理；</p></li><li><p>对于 job 类型任务，Kubernetes 可以去做批量的执行；</p></li><li><p>为了让这个集群、这个应用更富有弹性，Kubernetes 也支持水平的伸缩。</p></li></ul><p>下面，我们希望以三个例子跟大家更切实地介绍一下 Kubernetes 的能力。</p><h5 id="1、调度"><a href="#1、调度" class="headerlink" title="1、调度"></a>1、调度</h5><p>Kubernetes 可以把用户提交的容器放到 Kubernetes 管理的集群的某一台节点上去。Kubernetes 的调度器是执行这项能力的组件，它会观察正在被调度的这个容器的大小、规格。</p><p>比如说它所需要的 CPU以及它所需要的 memory，然后在集群中找一台相对比较空闲的机器来进行一次 placement，也就是一次放置的操作。在这个例子中，它可能会把红颜色的这个容器放置到第二个空闲的机器上，来完成一次调度的工作。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045845-a2365a59-409f-4cc2-a52f-61cfd639e0cf.png" alt="img"> </p><h5 id="2、自动修复"><a href="#2、自动修复" class="headerlink" title="2、自动修复"></a>2、自动修复</h5><p>Kubernetes 有一个节点健康检查的功能，它会监测这个集群中所有的宿主机，当宿主机本身出现故障，或者软件出现故障的时候，这个节点健康检查会自动对它进行发现。 </p><p>下面 Kubernetes 会把运行在这些失败节点上的容器进行自动迁移，迁移到一个正在健康运行的宿主机上，来完成集群内容器的一个自动恢复。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046023-ae1f453d-cee9-48b5-8a02-97e87b4079f4.png" alt="img"></p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045645-8a9b5997-6a16-46c7-9e0c-dfa785e7de23.png" alt="img"></p><h5 id="3、水平伸缩"><a href="#3、水平伸缩" class="headerlink" title="3、水平伸缩"></a>3、水平伸缩</h5><p>Kubernetes 有业务负载检查的能力，它会监测业务上所承担的负载，如果这个业务本身的 CPU 利用率过高，或者响应时间过长，它可以对这个业务进行一次扩容。</p><p>比如说在下面的例子中，黄颜色的过度忙碌，Kubernetes 就可以把黄颜色负载从一份变为三份。接下来，它就可以通过负载均衡把原来打到第一个黄颜色上的负载平均分到三个黄颜色的负载上去，以此来提高响应的时间。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045804-c048afec-af4a-479d-9277-afe04485f998.png" alt="img">    </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045899-02fccbac-10f9-417a-96a2-c7d9db754971.png" alt="img"> </p><p>以上就是 Kubernetes 三个核心能力的简单介绍。 </p><h3 id="三、Kubernetes-的架构"><a href="#三、Kubernetes-的架构" class="headerlink" title="三、Kubernetes 的架构"></a>三、Kubernetes 的架构</h3><p>Kubernetes 架构是一个比较典型的二层架构和 server-client 架构。Master 作为中央的管控节点，会去与 Node 进行一个连接。</p><p>所有 UI 的、clients、这些 user 侧的组件，只会和 Master 进行连接，把希望的状态或者想执行的命令下发给 Master，Master 会把这些命令或者状态下发给相应的节点，进行最终的执行。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045915-952fbe85-c90f-4396-9a7c-040b949c4265.png" alt="img"> </p><p>Kubernetes 的 Master 包含四个主要的组件：API Server、Controller、Scheduler 以及 etcd。如下图所示： </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046026-e89cd0ef-a9d3-4393-895e-f9e3de0ea6ef.png" alt="img"></p><ul><li><p><strong>API Server：</strong>顾名思义是用来处理 API 操作的，Kubernetes 中所有的组件都会和 API Server 进行连接，组件与组件之间一般不进行独立的连接，都依赖于 API Server 进行消息的传送；</p></li><li><p><strong>Controller：</strong>是控制器，它用来完成对集群状态的一些管理。比如刚刚我们提到的两个例子之中，第一个自动对容器进行修复、第二个自动进行水平扩张，都是由 Kubernetes 中的 Controller 来进行完成的；</p></li><li><p><strong>Scheduler：</strong>是调度器，“调度器”顾名思义就是完成调度的操作，就是我们刚才介绍的第一个例子中，把一个用户提交的 Container，依据它对 CPU、对 memory 请求大小，找一台合适的节点，进行放置；</p></li><li><p><strong>etcd：</strong>是一个分布式的一个存储系统，API Server 中所需要的这些原信息都被放置在 etcd 中，etcd 本身是一个高可用系统，通过 etcd 保证整个 Kubernetes 的 Master 组件的高可用性。</p></li></ul><p>我们刚刚提到的 API Server，它本身在部署结构上是一个可以水平扩展的一个部署组件；Controller 是一个可以进行热备的一个部署组件，它只有一个 active，它的调度器也是相应的，虽然只有一个 active，但是可以进行热备。</p><h4 id="Kubernetes-的架构：Node"><a href="#Kubernetes-的架构：Node" class="headerlink" title="Kubernetes 的架构：Node"></a><strong>Kubernetes 的架构：Node</strong></h4><p>Kubernetes 的 Node 是真正运行业务负载的，每个业务负载会以 Pod 的形式运行。等一下我会介绍一下 Pod 的概念。一个 Pod 中运行的一个或者多个容器，真正去运行这些 Pod 的组件的是叫做 <strong>kubelet</strong>，也就是 Node 上最为关键的组件，它通过 API Server 接收到所需要 Pod 运行的状态，然后提交到我们下面画的这个 Container Runtime 组件中。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045894-314cdcb7-a039-4b0e-81b8-174215dd322a.png" alt="img"></p><p>在 OS 上去创建容器所需要运行的环境，最终把容器或者 Pod 运行起来，也需要对存储跟网络进行管理。Kubernetes 并不会直接进行网络存储的操作，他们会靠 Storage Plugin 或者是网络的 Plugin 来进行操作。用户自己或者云厂商都会去写相应的 <strong>Storage Plugin</strong> 或者 <strong>Network Plugin</strong>，去完成存储操作或网络操作。</p><p>在 Kubernetes 自己的环境中，也会有 Kubernetes 的 Network，它是为了提供 Service network 来进行搭网组网的。（等一下我们也会去介绍“service”这个概念。）真正完成 service 组网的组件的是 <strong>Kube-proxy</strong>，它是利用了 iptable 的能力来进行组建 Kubernetes 的 Network，就是 cluster network，以上就是 Node 上面的四个组件。</p><p>Kubernetes 的 Node 并不会直接和 user 进行 interaction，它的 interaction 只会通过 Master。而 User 是通过 Master 向节点下发这些信息的。Kubernetes 每个 Node 上，都会运行我们刚才提到的这几个组件。</p><p>下面我们以一个例子再去看一下 Kubernetes 架构中的这些组件，是如何互相进行 interaction 的。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045902-c7effd6a-85c9-4fc0-a64c-d7245e5c2976.png" alt="img"></p><p>用户可以通过 UI 或者 CLI 提交一个 Pod 给 Kubernetes 进行部署，这个 Pod 请求首先会通过 CLI 或者 UI 提交给 Kubernetes API Server，下一步 API Server 会把这个信息写入到它的存储系统 etcd，之后 Scheduler 会通过 API Server 的 watch 或者叫做 notification 机制得到这个信息：有一个 Pod 需要被调度。</p><p>这个时候 Scheduler 会根据它的内存状态进行一次调度决策，在完成这次调度之后，它会向 API Server report 说：“OK！这个 Pod 需要被调度到某一个节点上。”</p><p>这个时候 API Server 接收到这次操作之后，会把这次的结果再次写到 etcd 中，然后 API Server 会通知相应的节点进行这次 Pod 真正的执行启动。相应节点的 kubelet 会得到这个通知，kubelet 就会去调 Container runtime 来真正去启动配置这个容器和这个容器的运行环境，去调度 Storage Plugin 来去配置存储，network Plugin 去配置网络。</p><p>这个例子我们可以看到：这些组件之间是如何相互沟通相互通信，协调来完成一次Pod的调度执行操作的。</p><h3 id="四、Kubernetes-的核心概念与它的-API"><a href="#四、Kubernetes-的核心概念与它的-API" class="headerlink" title="四、Kubernetes 的核心概念与它的 API"></a>四、Kubernetes 的核心概念与它的 API</h3><h4 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h4><h5 id="第一个概念：Pod"><a href="#第一个概念：Pod" class="headerlink" title="第一个概念：Pod"></a>第一个概念：Pod</h5><p>Pod 是 Kubernetes 的一个最小调度以及资源单元。用户可以通过 Kubernetes 的 Pod API 生产一个 Pod，让 Kubernetes 对这个 Pod 进行调度，也就是把它放在某一个 Kubernetes 管理的节点上运行起来。一个 Pod 简单来说是对一组容器的抽象，它里面会包含一个或多个容器。</p><p>比如像下面的这幅图里面，它包含了两个容器，每个容器可以指定它所需要资源大小。比如说，一个核一个 G，或者说 0.5 个核，0.5 个 G。</p><p>当然在这个 Pod 中也可以包含一些其他所需要的资源：比如说我们所看到的 Volume 卷这个存储资源；比如说我们需要 100 个 GB 的存储或者 20GB 的另外一个存储。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045754-a311ee41-3ff7-42d0-be1f-98a7c5f24595.png" alt="img"></p><p>在 Pod 里面，我们也可以去定义容器所需要运行的方式。比如说运行容器的 Command，以及运行容器的环境变量等等。Pod 这个抽象也给这些容器提供了一个共享的运行环境，它们会共享同一个网络环境，这些容器可以用 localhost 来进行直接的连接。而 Pod 与 Pod 之间，是互相有 isolation 隔离的。</p><h5 id="第二个概念：Volume"><a href="#第二个概念：Volume" class="headerlink" title="第二个概念：Volume"></a>第二个概念：Volume</h5><p>Volume 就是卷的概念，它是用来管理 Kubernetes 存储的，是用来声明在 Pod 中的容器可以访问文件目录的，一个卷可以被挂载在 Pod 中一个或者多个容器的指定路径下面。</p><p>而 Volume 本身是一个抽象的概念，一个 Volume 可以去支持多种的后端的存储。比如说 Kubernetes 的 Volume 就支持了很多存储插件，它可以支持本地的存储，可以支持分布式的存储，比如说像 ceph，GlusterFS ；它也可以支持云存储，比如说阿里云上的云盘、AWS 上的云盘、Google 上的云盘等等。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045937-5b074370-75ed-4843-9ce8-ea896cb1b39c.png" alt="img"></p><h5 id="第三个概念：Deployment"><a href="#第三个概念：Deployment" class="headerlink" title="第三个概念：Deployment"></a>第三个概念：Deployment</h5><p>Deployment 是在 Pod 这个抽象上更为上层的一个抽象，它可以定义一组 Pod 的副本数目、以及这个 Pod 的版本。一般大家用 Deployment 这个抽象来做应用的真正的管理，而 Pod 是组成 Deployment 最小的单元。</p><p>Kubernetes 是通过 Controller，也就是我们刚才提到的控制器去维护 Deployment 中 Pod 的数目，它也会去帮助 Deployment 自动恢复失败的 Pod。</p><p>比如说我可以定义一个 Deployment，这个 Deployment 里面需要两个 Pod，当一个 Pod 失败的时候，控制器就会监测到，它重新把 Deployment 中的 Pod 数目从一个恢复到两个，通过再去新生成一个 Pod。通过控制器，我们也会帮助完成发布的策略。比如说进行滚动升级，进行重新生成的升级，或者进行版本的回滚。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045678-29db8062-161a-4407-950b-e6a4ad060aac.png" alt="img"></p><h5 id="第四个概念：Service"><a href="#第四个概念：Service" class="headerlink" title="第四个概念：Service"></a>第四个概念：Service</h5><p>Service 提供了一个或者多个 Pod 实例的稳定访问地址。</p><p>比如在上面的例子中，我们看到：一个 Deployment 可能有两个甚至更多个完全相同的 Pod。对于一个外部的用户来讲，访问哪个 Pod 其实都是一样的，所以它希望做一次负载均衡，在做负载均衡的同时，我只想访问某一个固定的 VIP，也就是 Virtual IP 地址，而不希望得知每一个具体的 Pod 的 IP 地址。</p><p>我们刚才提到，这个 pod 本身可能 terminal go（终止），如果一个 Pod 失败了，可能会换成另外一个新的。</p><p>对一个外部用户来讲，提供了多个具体的 Pod 地址，这个用户要不停地去更新 Pod 地址，当这个 Pod 再失败重启之后，我们希望有一个抽象，把所有 Pod 的访问能力抽象成一个第三方的一个 IP 地址，实现这个的 Kubernetes 的抽象就叫 Service。</p><p>实现 Service 有多种方式，Kubernetes 支持 Cluster IP，上面我们讲过的 kuber-proxy 的组网，它也支持 nodePort、 LoadBalancer 等其他的一些访问的能力。 </p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045956-d771cfae-11eb-4205-b1f7-8f72dcd8ec72.png" alt="img"> </p><h5 id="第五个概念：Namespace"><a href="#第五个概念：Namespace" class="headerlink" title="第五个概念：Namespace"></a>第五个概念：Namespace</h5><p>Namespace 是用来做一个集群内部的逻辑隔离的，它包括鉴权、资源管理等。Kubernetes 的每个资源，比如刚才讲的 Pod、Deployment、Service 都属于一个 Namespace，同一个 Namespace 中的资源需要命名的唯一性，不同的 Namespace 中的资源可以重名。 </p><p>Namespace 一个用例，比如像在阿里巴巴，我们内部会有很多个 business units，在每一个 business units 之间，希望有一个视图上的隔离，并且在鉴权上也不一样，在 cuda 上面也不一样，我们就会用 Namespace 来去给每一个 BU 提供一个他所看到的这么一个看到的隔离的机制。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045715-00efb568-5006-4a21-b566-11e2eb8615ee.png" alt="img"></p><h4 id="Kubernetes-的-API"><a href="#Kubernetes-的-API" class="headerlink" title="Kubernetes 的 API"></a><strong>Kubernetes</strong> 的 <strong>API</strong></h4><p>下面我们介绍一下 Kubernetes 的 API 的基础知识。从 high-level 上看，Kubernetes API 是由 <strong>HTTP+JSON</strong> 组成的：用户访问的方式是 HTTP，访问的 API 中 content 的内容是 JSON 格式的。<br>Kubernetes 的 kubectl 也就是 command tool，Kubernetes UI，或者有时候用 curl，直接与 Kubernetes 进行沟通，都是使用 HTTP + JSON 这种形式。</p><p>下面有个例子：比如说，对于这个 Pod 类型的资源，它的 HTTP 访问的路径，就是 API，然后是 apiVesion: V1, 之后是相应的 Namespaces，以及 Pods 资源，最终是 Podname，也就是 Pod 的名字。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046039-7af9e406-4a18-4c90-9fd0-baa30913cff5.png" alt="img"></p><p>如果我们去提交一个 Pod，或者 get 一个 Pod 的时候，它的 content 内容都是用 JSON 或者是 YAML 表达的。上图中有个 yaml 的例子，在这个 yaml file 中，对 Pod 资源的描述也分为几个部分。</p><p>第一个部分，一般来讲会是 API 的 <strong>version</strong>。比如在这个例子中是 V1，它也会描述我在操作哪个资源；比如说我的 <strong>kind</strong> 如果是 pod，在 Metadata 中，就写上这个 Pod 的名字；比如说 nginx，我们也会给它打一些 <strong>label</strong>，我们等下会讲到 label 的概念。在 Metadata 中，有时候也会去写 <strong>annotation</strong>，也就是对资源的额外的一些用户层次的描述。</p><p>比较重要的一个部分叫做 <strong>Spec</strong>，Spec 也就是我们希望 Pod 达到的一个预期的状态。比如说它内部需要有哪些 container 被运行；比如说这里面有一个 nginx 的 container，它的 image 是什么？它暴露的 port 是什么？</p><p>当我们从 Kubernetes API 中去获取这个资源的时候，一般来讲在 Spec 下面会有一个项目叫 <strong>status</strong>，它表达了这个资源当前的状态；比如说一个 Pod 的状态可能是正在被调度、或者是已经 running、或者是已经被 terminates，就是被执行完毕了。</p><p>刚刚在 API 之中，我们讲了一个比较有意思的 metadata 叫做“<strong>label</strong>”，这个 label 可以是一组 KeyValuePair。</p><p>比如下图的第一个 pod 中，label 就可能是一个 color 等于 red，即它的颜色是红颜色。当然你也可以加其他 label，比如说 size: big 就是大小，定义为大的，它可以是一组 label。</p><p>这些 label 是可以被 selector，也就是选择器所查询的。这个能力实际上跟我们的 sql 类型的 select 语句是非常相似的，比如下图中的三个 Pod 资源中，我们就可以进行 select。name color 等于 red，就是它的颜色是红色的，我们也可以看到，只有两个被选中了，因为只有他们的 label 是红色的，另外一个 label 中写的 color 等于 yellow，也就是它的颜色是黄色，是不会被选中的。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045814-dfc674c5-f325-4119-ac27-a163a443a5b3.png" alt="img"></p><p>通过 label，kubernetes 的 API 层就可以对这些资源进行一个筛选，那这些筛选也是 kubernetes 对资源的集合所表达默认的一种方式。 </p><p>例如说，我们刚刚介绍的 Deployment，它可能是代表一组的 Pod，它是一组 Pod 的抽象，一组 Pod 就是通过 label selector 来表达的。当然我们刚才讲到说 service 对应的一组 Pod，就是一个 service 要对应一个或者多个的 Pod，来对它们进行统一的访问，这个描述也是通过 label selector 来进行 select 选取的一组 Pod。</p><p>所以可以看到 label 是一个非常核心的 kubernetes API 的概念，我们在接下来的课程中也会着重地去讲解和介绍 label 这个概念，以及如何更好地去使用它。</p><h3 id="五、以一个-demo-结尾"><a href="#五、以一个-demo-结尾" class="headerlink" title="五、以一个 demo 结尾"></a>五、以一个 demo 结尾</h3><p>最后一部分，我想以一个例子来结束，让大家跟我一起来尝试一个 kubernetes，在尝试 Kubernetes 之前，我希望大家能在本机上安装一下 Kubernetes，安装一个 Kubernetes 沙箱环境。</p><p>安装这个沙箱环境，主要有三个步骤：</p><ul><li>首先需要安装一个虚拟机，来在虚拟机中启动 Kubernetes。我们会推荐大家利用 virtualbox 来作为虚拟机的运行环境；</li></ul><p>安装 VirtualBox： <a href="https://www.virtualbox.org/wiki/Downloads">https://www.virtualbox.org/wiki/Downloads</a></p><ul><li>其次我们需要在虚拟机中启动 Kubernetes，Kubernetes 有一个非常有意思的项目，叫 minikube，也就是启动一个最小的 local 的 Kubernetes 的一个环境。</li></ul><p>minikube 我们推荐使用下面写到的阿里云的版本，它和官方 minikube 的主要区别就是把 minikube 中所需要的 Google 上的依赖换成国内访问比较快的一些镜像，这样就方便了大家的安装工作； </p><p>安装 MiniKube（中国版）: <a href="https://yq.aliyun.com/articles/221687">https://yq.aliyun.com/articles/221687</a></p><ul><li>最后在安装完 virtualbox 和 minikube 之后，大家可以对 minikube 进行启动，也就是下面这个命令。</li></ul><h5 id="Minikube安装（mac）"><a href="#Minikube安装（mac）" class="headerlink" title="Minikube安装（mac）"></a>Minikube安装（mac）</h5><p>下载Minikube</p><pre><code class="hljs shell">curl -Lo minikube https://kubernetes.oss-cn-hangzhou.aliyuncs.com/minikube/releases/v1.13.0/minikube-darwin-amd64 &amp;&amp; chmod +x minikube &amp;&amp; sudo mv minikube /usr/local/bin/</code></pre><p>安装minikube，缺省驱动</p><pre><code class="hljs shell">minikube start --cpus=4 --memory=4096mb</code></pre><p>升级kubectl</p><pre><code class="hljs shell">/usr/local/bin/kubectl is version 1.15.5, which may have incompatibilites with Kubernetes 1.19.0.💡  Want kubectl v1.19.0? Try &#x27;minikube kubectl -- get pods -A&#x27;</code></pre><pre><code class="hljs shell">minikube kubectl -- get pods -A</code></pre><h5 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h5><p>查看状态</p><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash"> minikube status</span>minikubetype: Control Planehost: Runningkubelet: Runningapiserver: Runningkubeconfig: Configured</code></pre><p>查看节点</p><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash"> kubectl get nodes</span>NAME       STATUS   ROLES    AGE     VERSIONminikube   Ready    master   5m24s   v1.19.0<span class="hljs-meta">%</span><span class="bash"> kubectl get deployments</span>No resources found.</code></pre><p>启动</p><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash"> kubectl apply -f deployment.yaml </span>deployment.apps/nginx-deployment created<span class="hljs-meta">%</span><span class="bash"> kubectl describe deployment nginx-deployment</span>Name:                   nginx-deploymentNamespace:              defaultCreationTimestamp:      Wed, 23 Sep 2020 22:42:07 +0800Labels:                 &lt;none&gt;Annotations:            deployment.kubernetes.io/revision: 1                        kubectl.kubernetes.io/last-applied-configuration:                          &#123;&quot;apiVersion&quot;:&quot;apps/v1&quot;,&quot;kind&quot;:&quot;Deployment&quot;,&quot;metadata&quot;:&#123;&quot;annotations&quot;:&#123;&#125;,&quot;name&quot;:&quot;nginx-deployment&quot;,&quot;namespace&quot;:&quot;default&quot;&#125;,&quot;spec&quot;:&#123;&quot;replica...Selector:               app=nginxReplicas:               2 desired | 2 updated | 2 total | 0 available | 2 unavailableStrategyType:           RollingUpdateMinReadySeconds:        0RollingUpdateStrategy:  25% max unavailable, 25% max surgePod Template:  Labels:  app=nginx  Containers:   nginx:    Image:        nginx:1.14.2    Port:         80/TCP    Host Port:    0/TCP    Environment:  &lt;none&gt;    Mounts:       &lt;none&gt;  Volumes:        &lt;none&gt;Conditions:  Type           Status  Reason  ----           ------  ------  Available      False   MinimumReplicasUnavailable  Progressing    True    ReplicaSetUpdatedOldReplicaSets:  &lt;none&gt;NewReplicaSet:   nginx-deployment-66b6c48dd5 (2/2 replicas created)Events:  Type    Reason             Age   From                   Message  ----    ------             ----  ----                   -------  Normal  ScalingReplicaSet  59s   deployment-controller  Scaled up replica set nginx-deployment-66b6c48dd5 to 2</code></pre><p>删除</p><pre><code class="hljs shell"><span class="hljs-meta">%</span><span class="bash"> kubectl delete deployment nginx-deployment</span>deployment.apps &quot;nginx-deployment&quot; deleted<span class="hljs-meta">%</span><span class="bash"> kubectl get deployments</span>No resources found.</code></pre><p>启动命令：minikube start —vm-driver virtualbox</p><p>如果大家不是 Mac 系统，其他操作系统请访问下面这个链接，查看其它操作系统如何安装 minikube 沙箱环境。</p><p><a href="https://kubernetes.io/docs/tasks/tools/install-minikube%EF%BC%8C">https://kubernetes.io/docs/tasks/tools/install-minikube/</a></p><p>当大家安装好之后，我会跟大家一起做一个例子，来做三件事情：</p><ol><li>提交一个 nginx deployment；</li></ol><p><code>kubectl apply  -f  https://k8s.io/examples/application/deployment.yaml</code></p><ol><li>升级 nginx deployment；</li></ol><p><code>kubectl apply -f  https://k8s.io/examples/application/deployment-update.yaml</code></p><ol><li>扩容 nginx deployment。</li></ol><p><code>kubectl apply -f  https://k8s.io/examples/application/deployment-scale.yaml</code></p><p>第一步，我们提交一个 nginx 的 Deployment，然后对这个 Deployment 进行一次版本升级，也就是改变它中间 Pod 的版本。最后我们也会尝试对 nginx 进行一次扩容，进行一次水平的伸缩，下面就让大家一起跟我来尝试这三个操作吧。</p><p>首先，我们先看一下 minikube 的 status，可以看到 kubelet master 和 kubectl 都是配置好的。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046057-b61d751d-c51a-4864-aec7-c4dd7d8dea09.png" alt="img"></p><p>下一步我们利用 kubectl 来看一下这个集群中节选的状态，可以看到这个master 的节点已经是running状态：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046101-c2b5f9ff-6704-4889-9ab2-5b8dae48edc3.png" alt="img"></p><p>我们就以这个为节点，下面我们尝试去看一下现在集群中 Deployment 这个资源：</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046019-e95ed3ca-513c-4fb8-b491-adb3dec7dd6a.png" alt="img"></p><p>可以看到集群中没有任何的 Deployment，我们可以利用 watch 这个语义去看集群中 Deployment 这个资源的变化情况。</p><p>下面我们去做刚才想要的三个操作：第一个操作是去创建一个 Deployment。可以看到下面第一个图，这是一个 API 的 content，它的 kind 是 Deployment，name 是 nginx-deployment, 有图中它的 replicas 数目是2，它的镜像版本是 1.7.9。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046039-12c5b5d6-0c39-4029-9fac-a56f95999fc0.png" alt="img"><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046103-5f491536-2800-4dad-aec7-a4865820f5a5.png" alt="img"></p><p>我们下面还是回到 kubectl 这个 commnd 来执行这次 Deployment 的真正的操作。我们可以看到一个简单的操作，就会去让 Deployment 不停地生成副本。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045897-d7ee5ccc-8ba9-4c40-8e0c-76e4379b5ab7.png" alt="img"></p><p>Deployment 副本数目是 2 个，下面也可以 describe 一下现在的 Deployment 的状态。我们知道之前是没有这个 Deployment 的，现在我们去 describe 这个 nginx-deployment。</p><p>下图中可以看到：有一个 nginx-deployment 已经被生成了，它的 replicas 数目也是我们想要的、selector 也是我们想要的、它的 image 的版本也是 1.7.9。还可以看到，里面的 deployment-controller 这种版本控制器也是在管理它的生成。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046101-f6fe24aa-b78c-4c07-94a9-a27db717bd5e.png" alt="img"></p><p>下面我们去升级这个 Deployment 版本，首先下载另外一个 yaml 文件 deployment-update.yaml，可以看到这里面的 image 本身的版本号从 1.7.9 升级到 1.8。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045965-4e76c1e8-fdbb-40eb-989a-6b68bf9f4404.png" alt="img"></p><p>接下来我们重新 apply 新的 deployment-update 这个 yaml 文件。</p><p>可以看到，在另一边的屏幕上显示出了这个 Deployment 升级的一些操作，最终它的 up-to-date 值从 0 变成了 2，也就是说所有的容器都是最新版本的，所有的 Pod 都是最新版本的。我们也可以 discribe 具体去看一下是不是所有 Pod 的版本都被更新了，可以看到这个 image 的版本由 1.7.9 真正更新到了 1.8。</p><p>最后，我们也可以看到 controller 又执行了几次新的操作，这个控制器维护了整个 Deployment 和 Pod 状态。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046007-4d425be4-645d-4d7c-8524-34b52824c160.png" alt="img"></p><p>最后我们演示一下给 Deployment 做水平扩张，下载另一个 yaml 文件 deployment-scale.yaml，这里面的 replicas 数目已经从 2 改成了 4。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046074-fa0c81f8-d369-44ea-82f6-c7914133a858.png" alt="img"></p><p>回到最开始的窗口，用 kubectl 去 apply 这个新的 deployment-scale.yaml 文件，在另外一个窗口上可以看到，当我们执行了 deployment-scale 操作之后，它的容器 Pod 数目从 2 变成了 4。我们可以再一次 describ 一下当前集群中的 deployment 的情况，可以看到它的 replicas 的数目从 2 变到了 4，同时也可以看到 controller 又做了几次新的操作，这个 scale up 成功了。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386045906-bcaa2618-a6ac-45af-ac84-130151dafe35.png" alt="img"></p><p>最后，让我们利用 delete 操作把我们刚才生成的 Deployment 给删除掉。kubectl delete deployment，也是刚才我们本身的 deployment name，当我们把它删除掉之后，我们今天所有的操作就完成了。 </p><p>我们再去重新 get 这个 Deployment，也会显示这个资源不再存在，这个集群又回到了最开始干净的状态。</p><p><img src="https://intranetproxy.alipay.com/skylark/lark/0/2019/png/168324/1564386046042-0c34c311-be33-41c1-a4ff-9dff0fb76dc1.png" alt="img"></p><h3 id="本节总结"><a href="#本节总结" class="headerlink" title="本节总结"></a>本节总结</h3><ul><li>Kubernetes 是一个自动化的容器编排平台，它负责应用的部署、应用的弹性以及应用的管理，这些都是基于容器的；</li><li>Kubernetes 架构是一个比较典型的二层架构和 server-client 架构；</li></ul><p><u><strong>PS：本文摘录于阿里云技术公开课，仅为学习与参考</strong></u></p>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jquery选择器</title>
      <link href="2020/08/16/jquery-selector/"/>
      <url>2020/08/16/jquery-selector/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Jquery选择器"><a href="#Jquery选择器" class="headerlink" title="Jquery选择器"></a>Jquery选择器</h2><h3 id="1、基本选择器"><a href="#1、基本选择器" class="headerlink" title="1、基本选择器"></a>1、基本选择器</h3><pre><code class="hljs js">*：$(<span class="hljs-string">&quot;*&quot;</span>)所有元素#id：$(<span class="hljs-string">&quot;#lastname&quot;</span>)id=<span class="hljs-string">&quot;lastname&quot;</span> 的元素.class：$(<span class="hljs-string">&quot;.intro&quot;</span>)<span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;intro&quot;</span> 的所有元素注意不能级联$(<span class="hljs-string">&quot;div.p.intro&quot;</span>).class,.class：$(&quot;.intro,.demo&quot;)class 为 &quot;intro&quot; 或 &quot;demo&quot; 的所有元素element：$(<span class="hljs-string">&quot;p&quot;</span>)所有 &lt;p&gt; 元素el1,el2,el3：$(<span class="hljs-string">&quot;h1,div,p&quot;</span>)所有 &lt;h1&gt;、&lt;div&gt; 和 &lt;p&gt; 元素:first：$(<span class="hljs-string">&quot;p:first&quot;</span>)第一个 &lt;p&gt; 元素:last ：$(<span class="hljs-string">&quot;p:last&quot;</span>)最后一个 &lt;p&gt; 元素:even：$(<span class="hljs-string">&quot;tr:even&quot;</span>)所有偶数 &lt;tr&gt; 元素(对于index而言，从<span class="hljs-number">0</span>开始):odd：$(<span class="hljs-string">&quot;tr:odd&quot;</span>)所有奇数 &lt;tr&gt; 元素(对于index而言，从<span class="hljs-number">0</span>开始):parent：$(<span class="hljs-string">&quot;:parent&quot;</span>)匹配所有含有子元素或者文本的父元素:root：$(<span class="hljs-string">&quot;:root&quot;</span>)文档的根元素:lang(language)：$(<span class="hljs-string">&quot;p:lang(de)&quot;</span>)所有 lang 属性值为 <span class="hljs-string">&quot;de&quot;</span> 的 &lt;p&gt; 元素</code></pre><h3 id="2、层次选择器"><a href="#2、层次选择器" class="headerlink" title="2、层次选择器"></a>2、层次选择器</h3><pre><code class="hljs js">parent &gt; child：$(<span class="hljs-string">&quot;div &gt; p&quot;</span>)&lt;div&gt; 元素的直接子元素的所有 &lt;p&gt; 元素parent descendant：$(<span class="hljs-string">&quot;div p&quot;</span>)&lt;div&gt; 元素的后代的所有 &lt;p&gt; 元素element + next：$(<span class="hljs-string">&quot;div + p&quot;</span>)每个 &lt;div&gt; 元素相邻的下一个 &lt;p&gt; 元素element ~ siblings：$(<span class="hljs-string">&quot;div ~ p&quot;</span>)&lt;div&gt; 元素同级的所有 &lt;p&gt; 元素</code></pre><h3 id="3、过滤选择器"><a href="#3、过滤选择器" class="headerlink" title="3、过滤选择器"></a>3、过滤选择器</h3><pre><code class="hljs js">:first-child：$(<span class="hljs-string">&quot;p:first-child&quot;</span>)属于其父元素的第一个子元素的所有 &lt;p&gt; 元素（取第一个元素，有父元素作为参照物）:first-<span class="hljs-keyword">of</span>-type：$(<span class="hljs-string">&quot;p:first-of-type&quot;</span>)属于其父元素的第一个 &lt;p&gt; 元素的所有 &lt;p&gt;（取所有的p元素）:last-child ：$(<span class="hljs-string">&quot;p:last-child&quot;</span>)属于其父元素的最后一个子元素的所有 &lt;p&gt; 元素:last-<span class="hljs-keyword">of</span>-type ：$(<span class="hljs-string">&quot;p:last-of-type&quot;</span>)属于其父元素的最后一个 &lt;p&gt; 元素的所有 &lt;p&gt; 元素:nth-child(n)：$(<span class="hljs-string">&quot;p:nth-child(2)&quot;</span>)属于其父元素的第二个子元素的所有 &lt;p&gt; 元素:nth-last-child(n)：$(<span class="hljs-string">&quot;p:nth-last-child(2)&quot;</span>)属于其父元素的第二个子元素的所有 &lt;p&gt; 元素，从最后一个子元素开始计数:nth-<span class="hljs-keyword">of</span>-type(n)：$(<span class="hljs-string">&quot;p:nth-of-type(2)&quot;</span>)属于其父元素的第二个 &lt;p&gt; 元素的所有 &lt;p&gt; 元素:nth-last-<span class="hljs-keyword">of</span>-type(n)：$(<span class="hljs-string">&quot;p:nth-last-of-type(2)&quot;</span>)属于其父元素的第二个 &lt;p&gt; 元素的所有 &lt;p&gt; 元素，从最后一个子元素开始计数:only-child：$(<span class="hljs-string">&quot;p:only-child&quot;</span>)属于其父元素的唯一子元素的所有 &lt;p&gt; 元素:only-<span class="hljs-keyword">of</span>-type：$(<span class="hljs-string">&quot;p:only-of-type&quot;</span>)属于其父元素的特定类型的唯一子元素的所有 &lt;p&gt; 元素:eq(index)：$(<span class="hljs-string">&quot;ul li:eq(3)&quot;</span>)列表中的第四个元素（index 值从 <span class="hljs-number">0</span> 开始）:gt(no)：$(<span class="hljs-string">&quot;ul li:gt(3)&quot;</span>)列举 index 大于 <span class="hljs-number">3</span> 的元素:lt(no)：$(<span class="hljs-string">&quot;ul li:lt(3)&quot;</span>)列举 index 小于 <span class="hljs-number">3</span> 的元素:not(selector)：$(<span class="hljs-string">&quot;input:not(:empty)&quot;</span>)所有不为空的输入元素</code></pre><h3 id="4、内容过滤选择器"><a href="#4、内容过滤选择器" class="headerlink" title="4、内容过滤选择器"></a>4、内容过滤选择器</h3><pre><code class="hljs js">:header：$(<span class="hljs-string">&quot;:header&quot;</span>)所有标题元素 &lt;h1&gt;, &lt;h2&gt; ...:animated：$(<span class="hljs-string">&quot;:animated&quot;</span>)所有动画元素:focus：$(<span class="hljs-string">&quot;:focus&quot;</span>)当前具有焦点的元素:contains(text)：$(<span class="hljs-string">&quot;:contains(&#x27;Hello&#x27;)&quot;</span>)所有包含文本 <span class="hljs-string">&quot;Hello&quot;</span> 的元素:has(selector)：$(<span class="hljs-string">&quot;div:has(p)&quot;</span>)所有包含有 &lt;p&gt; 元素在其内的 &lt;div&gt; 元素:empty：$(<span class="hljs-string">&quot;:empty&quot;</span>)所有空元素例：$(<span class="hljs-string">&quot;#tbl tr:lt(7) &gt; td:empty&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;yellow&quot;</span>);   获取tbl表格中小于<span class="hljs-number">8</span>行内的空td，修改背景色黄色</code></pre><h3 id="5、可见性过滤选择器"><a href="#5、可见性过滤选择器" class="headerlink" title="5、可见性过滤选择器"></a>5、可见性过滤选择器</h3><pre><code class="hljs js">:hidden：$(<span class="hljs-string">&quot;p:hidden&quot;</span>)所有隐藏的 &lt;p&gt; 元素:visible：$(<span class="hljs-string">&quot;table:visible&quot;</span>)所有可见的表格</code></pre><h3 id="6、属性过滤选择器"><a href="#6、属性过滤选择器" class="headerlink" title="6、属性过滤选择器"></a>6、属性过滤选择器</h3><pre><code class="hljs js">[attribute]：$(<span class="hljs-string">&quot;[href]&quot;</span>)所有带有 href 属性的元素[attribute=value]：$(<span class="hljs-string">&quot;[href=&#x27;default.htm&#x27;]&quot;</span>)所有带有 href 属性且值等于 <span class="hljs-string">&quot;default.htm&quot;</span> 的元素[attribute!=value]：$(<span class="hljs-string">&quot;[href!=&#x27;default.htm&#x27;]&quot;</span>)所有带有 href 属性且值不等于 <span class="hljs-string">&quot;default.htm&quot;</span> 的元素例：$(<span class="hljs-string">&quot;p[class!=&#x27;intro&#x27;]&quot;</span>).css(<span class="hljs-string">&quot;background-color&quot;</span>,<span class="hljs-string">&quot;yellow&quot;</span>);[attribute$=value]：$(<span class="hljs-string">&quot;[href$=&#x27;.jpg&#x27;]&quot;</span>)所有带有 href 属性且值以 <span class="hljs-string">&quot;.jpg&quot;</span> 结尾的元素[attribute|=value]：$(<span class="hljs-string">&quot;[title|=&#x27;Tomorrow&#x27;]&quot;</span>)所有带有 title 属性且值等于 <span class="hljs-string">&#x27;Tomorrow&#x27;</span> 或者以 <span class="hljs-string">&#x27;Tomorrow&#x27;</span> 后跟连接符作为开头的字符串[attribute^=value]：$(<span class="hljs-string">&quot;[title^=&#x27;Tom&#x27;]&quot;</span>)所有带有 title 属性且值以 <span class="hljs-string">&quot;Tom&quot;</span> 开头的元素[attribute~=value]：$(<span class="hljs-string">&quot;[title~=&#x27;hello&#x27;]&quot;</span>)所有带有 title 属性且值包含单词 <span class="hljs-string">&quot;hello&quot;</span> 的元素[attribute*=value]：$(<span class="hljs-string">&quot;[title*=&#x27;hello&#x27;]&quot;</span>)所有带有 title 属性且值包含字符串 <span class="hljs-string">&quot;hello&quot;</span> 的元素[name=value][name2=value2]：$( <span class="hljs-string">&quot;input[id][name$=&#x27;man&#x27;]&quot;</span> )带有 id 属性，并且 name 属性以 man 结尾的输入框</code></pre><h3 id="7、状态过滤选择器"><a href="#7、状态过滤选择器" class="headerlink" title="7、状态过滤选择器"></a>7、状态过滤选择器</h3><pre><code class="hljs js">:enabled：$(<span class="hljs-string">&quot;:enabled&quot;</span>)所有启用的元素:disabled：$(<span class="hljs-string">&quot;:disabled&quot;</span>)所有禁用的元素:selected：$(<span class="hljs-string">&quot;:selected&quot;</span>)所有选定的下拉列表元素:checked：$(<span class="hljs-string">&quot;:checked&quot;</span>)所有选中的复选框选项:target：$( <span class="hljs-string">&quot;p:target&quot;</span>)选择器将选中ID和URI中一个格式化的标识符相匹配的&lt;p&gt;元素</code></pre><h3 id="8、表单选择器"><a href="#8、表单选择器" class="headerlink" title="8、表单选择器"></a>8、表单选择器</h3><pre><code class="hljs js">:input：$(<span class="hljs-string">&quot;:input&quot;</span>)所有 input 元素:text：$(<span class="hljs-string">&quot;:text&quot;</span>)所有带有 type=<span class="hljs-string">&quot;text&quot;</span> 的 input 元素:password：$(<span class="hljs-string">&quot;:password&quot;</span>)所有带有 type=<span class="hljs-string">&quot;password&quot;</span> 的 input 元素:radio：$(<span class="hljs-string">&quot;:radio&quot;</span>)所有带有 type=<span class="hljs-string">&quot;radio&quot;</span> 的 input 元素:checkbox：$(<span class="hljs-string">&quot;:checkbox&quot;</span>)所有带有 type=<span class="hljs-string">&quot;checkbox&quot;</span> 的 input 元素:submit：$(<span class="hljs-string">&quot;:submit&quot;</span>)所有带有 type=<span class="hljs-string">&quot;submit&quot;</span> 的 input 元素:reset：$(<span class="hljs-string">&quot;:reset&quot;</span>)所有带有 type=<span class="hljs-string">&quot;reset&quot;</span> 的 input 元素:button：$(<span class="hljs-string">&quot;:button&quot;</span>)所有带有 type=<span class="hljs-string">&quot;button&quot;</span> 的 input 元素:image：$(<span class="hljs-string">&quot;:image&quot;</span>)所有带有 type=<span class="hljs-string">&quot;image&quot;</span> 的 input 元素:file：$(<span class="hljs-string">&quot;:file&quot;</span>)所有带有 type=<span class="hljs-string">&quot;file&quot;</span> 的 input 元素</code></pre><p><strong><u>ps: 本文仅为学习笔记，仅供学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> jquery </tag>
            
            <tag> selector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Finalcut-Pro快捷键记录</title>
      <link href="2020/07/26/finalcut-hotkey/"/>
      <url>2020/07/26/finalcut-hotkey/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Finalcut-Pro快捷键记录"><a href="#Finalcut-Pro快捷键记录" class="headerlink" title="Finalcut-Pro快捷键记录"></a>Finalcut-Pro快捷键记录</h2><h3 id="1、播放"><a href="#1、播放" class="headerlink" title="1、播放"></a>1、播放</h3><p>j：后退（连续按，几倍速后退）<br>k：暂停<br>l：前进（连续按，几倍速前进）</p><h3 id="2、编辑"><a href="#2、编辑" class="headerlink" title="2、编辑"></a>2、编辑</h3><p>i：入口点<br>o：出口点</p><p>使用i、l 和 o 将视频中的片段标记好后，该片段会被黄色框起来。</p><p>f：将标记的视频片段收藏，片段上方会出现绿色横框<br>双击：用鼠标双击收藏好的绿线，可以选中该收藏视频片段<br>del/back：拒绝选中的视频，选择工具栏中的[所有片段] -&gt; [隐藏被拒绝的]，该视频不可见<br>Ctrl + c：显示所有视频片段<br>Ctrl + h：隐藏被拒绝的的视频片段<br>Ctrl + f：显示收藏的视频片段<br>u：撤销操作</p><p>Command + n：新建项目（时间线）<br>d：将选中的音频加入到项目（时间线）中<br>Shift + z：将音乐片段放大，填充整个时间线，好控制<br>电影片段按钮：更改片段在时间线中的外观<br><img src="/2020/07/26/finalcut-hotkey/1.png" alt="audio-shape"></p><p>空格键：播放与暂停<br>m：音乐打点（一般在波峰位置打点）</p><p><img src="/2020/07/26/finalcut-hotkey/2.png" alt="mark-point"></p><p>双击打点：可以选择删除，删除打点<br>q：双击视频片段后，按q键可以将视频加入到时间线中<br>w：双击视频片段后，按w键可以将视频插入到时间线中<br>e：双击视频片段后，按e键可以将视频追加到时间线的末尾<br>d：双击视频片段后，按d键可以将视频覆盖到选择的时间点上<br>Command + k：视频加入关键词，便于查找，打过关键词的视频上方会有一条蓝色线<br><img src="/2020/07/26/finalcut-hotkey/3.png" alt="keyword"></p><p>t：在时间线可以修剪视频（前后拖拉），与a键联合使用，选择与修剪<br>p: 位置工具，拖拉片段可以在时间线中产生黑场<br>Command + +/-：放大与缩小时间线<br>Shift + z：快速的将时间线缩放到大小合适<br>s：打开或关闭视频/音频实时预览（鼠标拖拉预览）<br>n：吸附，打点，拖拉视频片段时使用</p><pre><code class="hljs bash"><span class="hljs-comment"># 剪辑开始点</span>Option/Alt + [<span class="hljs-comment"># 剪辑结束点</span>Option/Alt + ]</code></pre><h3 id="3、资源库"><a href="#3、资源库" class="headerlink" title="3、资源库"></a>3、资源库</h3><p>资源库是视频工作的场所。可以保存在本机，也可以保存在外置SSD上。<br>正在剪切的视频资源要放在本机，加快剪切视频流畅度。<br>已经完成的视频资源尽量放在外置SSD上。节省本机硬盘空间。</p><p>资源库中的 <strong>整合</strong>，可以将外置的视频整合到资源库中，方便资源库的整体移动。</p><p><img src="/2020/07/26/finalcut-hotkey/4.png" alt="compatable"></p><h3 id="4、视频格式"><a href="#4、视频格式" class="headerlink" title="4、视频格式"></a>4、视频格式</h3><p>视频一般格式如下</p><p><img src="/2020/07/26/finalcut-hotkey/5.png" alt="file-type"></p><p>帧率：每秒包含或者播放的照片数。<br><img src="/2020/07/26/finalcut-hotkey/6.png" alt="p-speed"></p><p>码率的计算公式：</p><p>码流 = 文件大小（兆位）/ 视频持续时间（秒）<br>例：200MB * 8 / 40 秒 = 40Mbps</p><p>分辨率：<br><img src="/2020/07/26/finalcut-hotkey/7.png" alt="mbps"> </p><p>Quicker Time player查看文件检查器：<strong>Command + i</strong><br><img src="/2020/07/26/finalcut-hotkey/8.png" alt="file-inspect"></p><h3 id="5、关键帧"><a href="#5、关键帧" class="headerlink" title="5、关键帧"></a>5、关键帧</h3><p>在视频的开始点和结束点可以加入关键帧，加入关键帧动画。<br><img src="/2020/07/26/finalcut-hotkey/9.png" alt="key-second"></p><p>Ctrl + v：可以查看关键帧信息<br>关键帧可以配合效果实现不同的特效。</p>]]></content>
      
      
      
        <tags>
            
            <tag> finalcut </tag>
            
            <tag> hotkey </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker之mysql安装</title>
      <link href="2020/07/03/docker-mysql-ssh/"/>
      <url>2020/07/03/docker-mysql-ssh/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker之mysql安装"><a href="#Docker之mysql安装" class="headerlink" title="Docker之mysql安装"></a>Docker之mysql安装</h2><h3 id="Dockerfile下载"><a href="#Dockerfile下载" class="headerlink" title="Dockerfile下载"></a>Dockerfile下载</h3><p>将github中的mysql的Dockerfile下载下来，地址如下：</p><p><code>https://github.com/DockerPool/mysql.git</code></p><pre><code class="hljs bash">mysql_sshd % lsDockerfileLICENSEREADME.mdcreate_db.shimport_sql.shmy.cnfmysqld_charset.cnfrun.shzhuyangze@localhost mysql_sshd % cat Dockerfile <span class="hljs-comment">#本文参考了「tutum」的 Dockerfile</span>FROM sshdMAINTAINER Waitfish &lt;dwj_zz@163.com&gt;<span class="hljs-comment">#安装软件 </span>ENV DEBIAN_FRONTEND noninteractiveRUN apt-get update &amp;&amp; \  apt-get -yq install mysql-server-5.6 pwgen &amp;&amp; \  rm -rf /var/lib/apt/lists/*<span class="hljs-comment"># 删除预安装的数据库文件</span>RUN rm -rf /var/lib/mysql/*<span class="hljs-comment"># 添加文件夹下的 MYSQL 配置文件</span>ADD my.cnf /etc/mysql/conf.d/my.cnfADD mysqld_charset.cnf /etc/mysql/conf.d/mysqld_charset.cnf<span class="hljs-comment"># 添加 MYSQL 的脚本</span>ADD import_sql.sh /import_sql.shADD run.sh /run.shRUN chmod 755 /*.sh<span class="hljs-comment"># 设置环境变量，用户名以及秘密</span>ENV MYSQL_USER adminENV MYSQL_PASS **Random**<span class="hljs-comment"># 设置主从复制模式下的环境变量</span>ENV REPLICATION_MASTER **False**ENV REPLICATION_SLAVE **False**ENV REPLICATION_USER replicaENV REPLICATION_PASS replica<span class="hljs-comment"># 设置可以允许挂载的卷，可以用来备份数据库和配置文件</span>VOLUME  [<span class="hljs-string">&quot;/etc/mysql&quot;</span>, <span class="hljs-string">&quot;/var/lib/mysql&quot;</span>]<span class="hljs-comment"># 设置可以映射的端口，如果是从我们的 sshd 镜像继承的话，默认还会开启 22 端口</span>EXPOSE 3306CMD [<span class="hljs-string">&quot;/run.sh&quot;</span>]</code></pre><h3 id="Mysql镜像安装"><a href="#Mysql镜像安装" class="headerlink" title="Mysql镜像安装"></a>Mysql镜像安装</h3><p>参考本地的Docker images镜像名称，修改如下：</p><pre><code class="hljs bash">% docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEsshd                dockerfile          5a0d9e4740fa        8 days ago          249MBsshd                ubuntu              6943898c8bac        9 days ago          235MBzhuyangze@localhost mysql_sshd % vim Dockerfile</code></pre><p>Dockerfile的继承镜像如下：sshd   -&gt; shd:dockerfile</p><pre><code class="hljs dockerfile"><span class="hljs-comment">#本文参考了「tutum」的 Dockerfile</span><span class="hljs-keyword">FROM</span> sshd:dockerfile<span class="hljs-keyword">MAINTAINER</span> <span class="hljs-keyword">from</span> www.lc-ling.com by lingchen (lingchen1316@<span class="hljs-number">163</span>.com)<span class="hljs-comment">#安装软件 </span><span class="hljs-keyword">ENV</span> DEBIAN_FRONTEND noninteractive<span class="hljs-keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; \</span><span class="bash">  apt-get -yq install mysql-server-5.6 pwgen &amp;&amp; \</span><span class="bash">  rm -rf /var/lib/apt/lists/*</span><span class="hljs-comment"># 删除预安装的数据库文件</span><span class="hljs-keyword">RUN</span><span class="bash"> rm -rf /var/lib/mysql/*</span><span class="hljs-comment"># 添加文件夹下的 MYSQL 配置文件</span><span class="hljs-keyword">ADD</span><span class="bash"> my.cnf /etc/mysql/conf.d/my.cnf</span><span class="hljs-keyword">ADD</span><span class="bash"> mysqld_charset.cnf /etc/mysql/conf.d/mysqld_charset.cnf</span><span class="hljs-comment"># 添加 MYSQL 的脚本</span><span class="hljs-keyword">ADD</span><span class="bash"> import_sql.sh /import_sql.sh</span><span class="hljs-keyword">ADD</span><span class="bash"> run.sh /run.sh</span><span class="hljs-keyword">RUN</span><span class="bash"> chmod 755 /*.sh</span><span class="hljs-comment"># 设置环境变量，用户名以及秘密</span><span class="hljs-keyword">ENV</span> MYSQL_USER admin<span class="hljs-keyword">ENV</span> MYSQL_PASS **Random**<span class="hljs-comment"># 设置主从复制模式下的环境变量</span><span class="hljs-keyword">ENV</span> REPLICATION_MASTER **False**<span class="hljs-keyword">ENV</span> REPLICATION_SLAVE **False**<span class="hljs-keyword">ENV</span> REPLICATION_USER replica<span class="hljs-keyword">ENV</span> REPLICATION_PASS replica<span class="hljs-comment"># 设置可以允许挂载的卷，可以用来备份数据库和配置文件</span><span class="hljs-keyword">VOLUME</span><span class="bash">  [<span class="hljs-string">&quot;/etc/mysql&quot;</span>, <span class="hljs-string">&quot;/var/lib/mysql&quot;</span>]</span><span class="hljs-comment"># 设置可以映射的端口，如果是从我们的 sshd 镜像继承的话，默认还会开启 22 端口</span><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">3306</span><span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;/run.sh&quot;</span>]</span></code></pre><p>构建镜像：<code>% docker build -t mysql:latest .</code></p><pre><code class="hljs bash">% docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEmysql               latest              a668adc70858        42 seconds ago      534MBsshd                dockerfile          5a0d9e4740fa        8 days ago          249MB</code></pre><h3 id="Mysql镜像启动"><a href="#Mysql镜像启动" class="headerlink" title="Mysql镜像启动"></a>Mysql镜像启动</h3><pre><code class="hljs bash">% docker run -d -P mysql137c211eadcdcd710833895786d15090af3a25eb2eddae3601fbe7c033691823zhuyangze@localhost mysql_sshd % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                            NAMES137c211eadcd        mysql               <span class="hljs-string">&quot;/run.sh&quot;</span>           5 seconds ago       Up 4 seconds        0.0.0.0:32769-&gt;22/tcp, 0.0.0.0:32768-&gt;3306/tcp   nervous_northcutt</code></pre><h4 id="通过ssh连接mysql容器"><a href="#通过ssh连接mysql容器" class="headerlink" title="通过ssh连接mysql容器"></a>通过ssh连接mysql容器</h4><pre><code class="hljs bash"><span class="hljs-comment"># 查看本机ip</span>% ifconfig% ssh root@192.168.0.107 -p 32769The authenticity of host <span class="hljs-string">&#x27;[192.168.0.107]:32769 ([192.168.0.107]:32769)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">ECDSA key fingerprint is SHA256:byz56n6ggX89uz39PZnFnS40Vkn4Ry5omVoAqi4UNZI.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><span class="hljs-string">Warning: Permanently added &#x27;</span>[192.168.0.107]:32769<span class="hljs-string">&#x27; (ECDSA) to the list of known hosts.</span><span class="hljs-string">Welcome to Ubuntu 14.04 LTS (GNU/Linux 4.4.0-170-generic x86_64)</span><span class="hljs-string"></span><span class="hljs-string"> * Documentation:  https://help.ubuntu.com/</span><span class="hljs-string"></span><span class="hljs-string">The programs included with the Ubuntu system are free software;</span><span class="hljs-string">the exact distribution terms for each program are described in the</span><span class="hljs-string">individual files in /usr/share/doc/*/copyright.</span><span class="hljs-string"></span><span class="hljs-string">Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by</span><span class="hljs-string">applicable law.</span><span class="hljs-string"></span><span class="hljs-string">root@137c211eadcd:~# ps -ef | grep mysql</span><span class="hljs-string">root         1     0  0 12:05 ?        00:00:00 /bin/sh /usr/bin/mysqld_safe</span><span class="hljs-string">mysql     1958     1  0 12:05 ?        00:00:03 /usr/sbin/mysqld --basedir=/usr --datadir=/var/lib/mysql --plugin-dir=/usr/lib/mysql/plugin --user=mysql --log-error=/var/log/mysql/error.log --pid-file=/var/run/mysqld/mysqld.pid --socket=/var/run/mysqld/mysqld.sock --port=3306</span><span class="hljs-string">root      2003  1991  0 12:30 pts/0    00:00:00 grep --color=auto mysql</span><span class="hljs-string">root@137c211eadcd:~# </span></code></pre><p>连接Mysql，查看Mysql的root用户的密码</p><p><code>docker logs 137</code></p><pre><code class="hljs bash">% docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                            NAMES137c211eadcd        mysql               <span class="hljs-string">&quot;/run.sh&quot;</span>           37 minutes ago      Up 37 minutes       0.0.0.0:32769-&gt;22/tcp, 0.0.0.0:32768-&gt;3306/tcp   nervous_northcuttzhuyangze@localhost mysql_sshd % docker logs 137=&gt; An empty or uninitialized MySQL volume is detected <span class="hljs-keyword">in</span> /var/lib/mysql=&gt; Installing MySQL ...=&gt; Done!=&gt; Creating admin user ...=&gt; Waiting <span class="hljs-keyword">for</span> confirmation of MySQL service startup, trying 0/13 ...=&gt; Creating MySQL user admin with random password=&gt; Done!========================================================================You can now connect to this MySQL Server using:    mysql -uadmin -pdWVMh7V1nDUa -h&lt;host&gt; -P&lt;port&gt;Please remember to change the above password as soon as possible!MySQL user <span class="hljs-string">&#x27;root&#x27;</span> has no password but only allows <span class="hljs-built_in">local</span> connections========================================================================200703 12:05:26 mysqld_safe Can<span class="hljs-string">&#x27;t log to error log and syslog at the same time.  Remove all --log-error configuration options for --syslog to take effect.</span><span class="hljs-string">200703 12:05:26 mysqld_safe Logging to &#x27;</span>/var/<span class="hljs-built_in">log</span>/mysql/error.log<span class="hljs-string">&#x27;.</span><span class="hljs-string">200703 12:05:26 mysqld_safe Starting mysqld daemon with databases from /var/lib/mysql</span></code></pre><h4 id="指定用户与密码登录"><a href="#指定用户与密码登录" class="headerlink" title="指定用户与密码登录"></a>指定用户与密码登录</h4><pre><code class="hljs bash">% docker run -d -P -e MYSQL_PASS=<span class="hljs-string">&quot;Aa123456&quot;</span> mysqlb3662485a106c4311a8f052a6c4a49f1ec17bb3abaae1aabb7e76e19e41a0167zhuyangze@localhost mysql_sshd % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                            NAMESb3662485a106        mysql               <span class="hljs-string">&quot;/run.sh&quot;</span>           4 seconds ago       Up 3 seconds        0.0.0.0:32771-&gt;22/tcp, 0.0.0.0:32770-&gt;3306/tcp   eloquent_visvesvaraya137c211eadcd        mysql               <span class="hljs-string">&quot;/run.sh&quot;</span>           14 hours ago        Up 14 hours         0.0.0.0:32769-&gt;22/tcp, 0.0.0.0:32768-&gt;3306/tcp   nervous_northcutt</code></pre><h4 id="挂载目录到Mysql容器"><a href="#挂载目录到Mysql容器" class="headerlink" title="挂载目录到Mysql容器"></a>挂载目录到Mysql容器</h4><pre><code class="hljs bash"><span class="hljs-comment"># 没有操作权限</span>% docker run -d -P -v /opt/docker_mysqldb:/var/lib/mysql mysql0715cabfa557a54b325e0ad02f1f3717a8f3fc38fa9dc1d6a300337b3c4b2a3ddocker: Error response from daemon: Mounts denied: The path /opt/docker_mysqldbis not shared from OS X and is not known to Docker.You can configure shared paths from Docker -&gt; Preferences... -&gt; File Sharing.See https://docs.docker.com/docker-for-mac/osxfs/<span class="hljs-comment">#namespaces for more info.</span></code></pre><p>指定到可访问可操作的目录，（建议挂载本地目录到容器，便于数据迁移，备份等管理）</p><pre><code class="hljs bash">% docker run -d -P -v /Users/zhuyangze/Documents/docker/volumes/mysqldb:/var/lib/mysql mysql8b1e7b9d1a90ed063714938ea03dc753f9fd9dd2cc5337d63d2ee8e3bc2a6cadzhuyangze@localhost mysqldb % lsib_logfile0ib_logfile1ibdata1mysqlperformance_schema<span class="hljs-built_in">test</span>zhuyangze@localhost mysqldb % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                            NAMES8b1e7b9d1a90        mysql               <span class="hljs-string">&quot;/run.sh&quot;</span>           14 seconds ago      Up 10 seconds       0.0.0.0:32773-&gt;22/tcp, 0.0.0.0:32772-&gt;3306/tcp   brave_hofstadter<span class="hljs-comment"># docker logs 8b1</span><span class="hljs-comment"># mysql -uadmin -ptxqo9GN5NyE0 -h&lt;host&gt; -P&lt;port&gt;</span></code></pre><h4 id="启用主从模式"><a href="#启用主从模式" class="headerlink" title="启用主从模式"></a>启用主从模式</h4><p>主Mysql服务器的名称必须为mysql</p><pre><code class="hljs bash"><span class="hljs-comment"># 主mysql容器</span>% sudo docker run -d -e REPLICATION_MASTER=<span class="hljs-literal">true</span> -P -v /Users/zhuyangze/Documents/docker/volumes/mysqldb_master:/var/lib/mysql --name mysql mysqlPassword:c472c728713bf1133e13dd6395d786718c610c8070c5afff34c880e27ce7b4fczhuyangze@localhost mysqldb_master % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                            NAMESc472c728713b        mysql               <span class="hljs-string">&quot;/run.sh&quot;</span>           6 seconds ago       Up 5 seconds        0.0.0.0:32775-&gt;22/tcp, 0.0.0.0:32774-&gt;3306/tcp   mysql<span class="hljs-comment"># 从mysql容器</span>% sudo docker run -d -e REPLICATION_SLAVE=<span class="hljs-literal">true</span> -P -v /Users/zhuyangze/Documents/docker/volumes/mysqldb_slave:/var/lib/mysql --link mysql:mysql mysql a50026556cbc9d42434149ff1a87104923e1a39f63e6535e3c74242742a24d73zhuyangze@localhost mysqldb_master % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                            NAMESa50026556cbc        mysql               <span class="hljs-string">&quot;/run.sh&quot;</span>           3 seconds ago       Up 2 seconds        0.0.0.0:32777-&gt;22/tcp, 0.0.0.0:32776-&gt;3306/tcp   epic_tereshkovac472c728713b        mysql               <span class="hljs-string">&quot;/run.sh&quot;</span>           2 minutes ago       Up 2 minutes        0.0.0.0:32775-&gt;22/tcp, 0.0.0.0:32774-&gt;3306/tcp   mysql<span class="hljs-comment"># mysql -uadmin -p9WtBLQrXGB22 -h&lt;host&gt; -P&lt;port&gt;</span><span class="hljs-comment"># mysql -uadmin -p19gtHyf8fbt2 -h&lt;host&gt; -P&lt;port&gt;</span></code></pre><p><strong><u>ps: 本文仅为学习记录，仅为学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker之Web服务器与应用</title>
      <link href="2020/06/25/docker-webapp/"/>
      <url>2020/06/25/docker-webapp/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker之Web服务器与应用"><a href="#Docker之Web服务器与应用" class="headerlink" title="Docker之Web服务器与应用"></a>Docker之Web服务器与应用</h2><h3 id="1、Apache服务搭建"><a href="#1、Apache服务搭建" class="headerlink" title="1、Apache服务搭建"></a>1、Apache服务搭建</h3><p>使用Dockerfile来创建带apache服务的Docker镜像的容器</p><pre><code class="hljs bash">xxx@localhost docker % mkdir apache_ubuntuxxx@localhost docker % <span class="hljs-built_in">cd</span> apache_ubuntu xxx@localhost apache_ubuntu % lsxxx@localhost apache_ubuntu % touch Dockerfile run.shxxx@localhost apache_ubuntu % lsDockerfilerun.shxxx@localhost apache_ubuntu % mkdir samplexxx@localhost apache_ubuntu % lsDockerfilerun.shsamplexxx@localhost apache_ubuntu % vim Dockerfile <span class="hljs-comment"># Dockerfile文件</span><span class="hljs-comment"># 继承镜像</span>FROM sshd:dockerfile<span class="hljs-comment"># 提供一些作者的信息</span>MAINTAINER from www.lc-ling.com by lingchen (lingchen1316@163.com)<span class="hljs-comment"># 设置环境变量，所有操作都是非交互式的</span>ENV DEBIAN_FRONTEND noninteractive<span class="hljs-comment"># 安装</span>RUN apt-get -yq install apache2&amp;&amp;\    rm -rf /var/lib/apt/lists/*RUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone &amp;&amp; \    dpkg-reconfigure -f noninteractive tzdata<span class="hljs-comment"># 注意这里要更改系统的时区设置，因为在Web应用中经常会用到时区这个系统变量，</span><span class="hljs-comment"># 默认的ubuntu会让你的应用程序发生不可思议的效果哦</span><span class="hljs-comment"># 添加脚本，并设置权限，这会覆盖之前放在这个位置的脚本</span>ADD run.sh /run.shRUN chmod 755 /*.sh<span class="hljs-comment"># 添加一个示例的Web站点，删掉默认安装在apache文件夹下面的文件</span><span class="hljs-comment"># 并将我们添加的示例用软链接链到/var/www/html目录下面</span>RUN mkdir -p /var/lock/apache2 &amp;&amp; mkdir -p /app &amp;&amp; rm -fr /var/www/html &amp;&amp; ln -s /app /var/www/htmlCOPY sample/ /app<span class="hljs-comment"># 设置apache相关的一些变量，在容器启动的时候可以使用-e参数替代</span>ENV APACHE_RUN_USER www-dataENV APACHE_RUN_GROUP www-dataENV APACHE_LOG_DIR /var/<span class="hljs-built_in">log</span>/apache2ENV APACHE_PID_FILE /var/run/apache2.pidENV APACHE_RUN_DIR /var/run/apache2ENV APACHE_LOCK_DIR /var/lock/apache2ENV APACHE_SERVERADMIN admin@localhostENV APACHE_SERVERNAME localhostENV APACHE_SERVERALIAS docker.localhostENV APACHE_DOCUMENTROOT /var/wwwEXPOSE 80WORKDIR /appCMD [<span class="hljs-string">&quot;/run.sh&quot;</span>]</code></pre><p>在sample文件夹中新建index.html</p><pre><code class="hljs bash">% <span class="hljs-built_in">cd</span> sample% vim index.html</code></pre><p>index.html：</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Hello, Docker!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>编辑run.sh</p><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><span class="hljs-built_in">exec</span> apache2 -D FOREGROUND</code></pre><p>创建镜像</p><pre><code class="hljs bash">xxx@localhost apache_ubuntu % docker build -t apache:ubuntu ....Successfully tagged apache:ubuntu<span class="hljs-comment"># 查看镜像</span>xxx@localhost apache_ubuntu % docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEapache              ubuntu              fb3d56d54d11        7 seconds ago       262MBsshd                dockerfile          5a0d9e4740fa        5 hours ago         249MB<span class="hljs-comment"># 启动容器（-P：端口自动分配）</span>xxx@localhost apache_ubuntu % docker run -d -P apache:ubuntu4018616a748cb7add25e8a9eb0d785e14f4722a4c9fd50f7329212a62da2961fxxx@localhost apache_ubuntu % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                          NAMES4018616a748c        apache:ubuntu       <span class="hljs-string">&quot;/run.sh&quot;</span>           4 seconds ago       Up 3 seconds        0.0.0.0:32769-&gt;22/tcp, 0.0.0.0:32768-&gt;80/tcp   compassionate_benz<span class="hljs-comment"># 验证apache服务</span>xxx@localhost apache_ubuntu % curl 192.168.0.107:32768&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;body&gt;    &lt;p&gt;Hello, Docker!&lt;/p&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><p>或者访问<code>http://192.168.0.107:32768/</code></p><p><img src="/2020/06/25/docker-webapp/1.png" alt="docker_webapp"></p><p>在使用Dockerfile镜像时，会继承父镜像开放的端口，但却不会继承启动命令。</p><pre><code class="hljs bash"><span class="hljs-comment"># 访问22端口</span>xxx@localhost apache_ubuntu % ssh root@192.168.0.107 -p 32769kex_exchange_identification: Connection closed by remote host<span class="hljs-comment"># 解决：</span>xxx@localhost apache_ubuntu % vim run.sh <span class="hljs-meta">#!/bin/bash</span>/usr/sbin/sshd &amp;<span class="hljs-built_in">exec</span> apache2 -D FOREGROUND<span class="hljs-comment"># 重新构建镜像</span>% docker build -t apache:ubuntu .xxx@localhost apache_ubuntu % docker run -d -P apache:ubuntu16537d326eed465be3ddd058c477d319df5df1977f2884af6737f11eaeb99878xxx@localhost apache_ubuntu % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                          NAMES16537d326eed        apache:ubuntu       <span class="hljs-string">&quot;/run.sh&quot;</span>           6 seconds ago       Up 5 seconds        0.0.0.0:32771-&gt;22/tcp, 0.0.0.0:32770-&gt;80/tcp   unruffled_lamarr<span class="hljs-comment"># 测试ssh</span>xxx@localhost apache_ubuntu % ssh root@192.168.0.107 -p 32771The authenticity of host <span class="hljs-string">&#x27;[192.168.0.107]:32771 ([192.168.0.107]:32771)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">ECDSA key fingerprint is SHA256:byz56n6ggX89uz39PZnFnS40Vkn4Ry5omVoAqi4UNZI.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><span class="hljs-string">Warning: Permanently added &#x27;</span>[192.168.0.107]:32771<span class="hljs-string">&#x27; (ECDSA) to the list of known hosts.</span><span class="hljs-string">Welcome to Ubuntu 14.04 LTS (GNU/Linux 4.4.0-170-generic x86_64)</span><span class="hljs-string"></span><span class="hljs-string"> * Documentation:  https://help.ubuntu.com/</span><span class="hljs-string"></span><span class="hljs-string">The programs included with the Ubuntu system are free software;</span><span class="hljs-string">the exact distribution terms for each program are described in the</span><span class="hljs-string">individual files in /usr/share/doc/*/copyright.</span><span class="hljs-string"></span><span class="hljs-string">Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by</span><span class="hljs-string">applicable law.</span><span class="hljs-string"></span><span class="hljs-string">root@16537d326eed:~# </span></code></pre><h3 id="2、Nginx搭建"><a href="#2、Nginx搭建" class="headerlink" title="2、Nginx搭建"></a>2、Nginx搭建</h3><p>Nginx是一个高性能的Web和反向代理服务器。一个Nginx实例能够轻松支持高达50000个并发连接数的响应。</p><pre><code class="hljs bash">xxx@localhost docker % mkdir nginx_ubuntuxxx@localhost docker % cp apache_ubuntu/* nginx_ubuntu cp: apache_ubuntu/sample is a directory (not copied).xxx@localhost docker % cp apache_ubuntu/*.* nginx_ubuntuxxx@localhost docker % <span class="hljs-built_in">cd</span> nginx_ubuntu xxx@localhost nginx_ubuntu % lsDockerfilerun.sh</code></pre><p>编辑Dockerfile文件：<code>% vim Dockerfile </code></p><pre><code class="hljs dockerfile"><span class="hljs-comment"># 继承镜像sshd:dockerfile</span><span class="hljs-keyword">FROM</span> sshd:dockerfile<span class="hljs-comment"># 提供一些作者的信息</span><span class="hljs-keyword">MAINTAINER</span> <span class="hljs-keyword">from</span> www.lc-ling.com by lingchen (lingchen1316@<span class="hljs-number">163</span>.com)<span class="hljs-comment"># 设置环境变量，所有操作都是非交互式的</span><span class="hljs-keyword">ENV</span> DEBIAN_FRONTEND noninteractive<span class="hljs-comment"># 安装nginx，以非daemon启动</span><span class="hljs-keyword">RUN</span><span class="bash"> \</span><span class="bash">   apt-get install -y nginx &amp;&amp; \</span><span class="bash">   rm -rf /var/lib/apt/lists/* &amp;&amp; \</span><span class="bash">   <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\ndaemon off;&quot;</span> &gt;&gt; /etc/nginx/nginx.conf &amp;&amp; \</span><span class="bash">   chown -R www-data:www-data /var/lib/nginx</span><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone &amp;&amp; \</span><span class="bash">    dpkg-reconfigure -f noninteractive tzdata</span><span class="hljs-comment"># 注意这里要更改系统的时区设置，因为在Web应用中经常会用到时区这个系统变量，</span><span class="hljs-comment"># 默认的ubuntu会让你的应用程序发生不可思议的效果哦</span><span class="hljs-comment"># 添加脚本，并设置权限，这会覆盖之前放在这个位置的脚本</span><span class="hljs-keyword">ADD</span><span class="bash"> run.sh /run.sh</span><span class="hljs-keyword">RUN</span><span class="bash"> chmod 755 /*.sh</span><span class="hljs-comment"># 定义可以被挂载的目录，分别是虚拟主机的挂载目录，证书目录，配置目录和日志目录</span><span class="hljs-keyword">VOLUME</span><span class="bash"> [<span class="hljs-string">&quot;/etc/nginx/sites-enabled&quot;</span>, <span class="hljs-string">&quot;/etc/nginx/certs&quot;</span>, <span class="hljs-string">&quot;/etc/nginx/conf.d&quot;</span>, <span class="hljs-string">&quot;/var/log/nginx&quot;</span>] </span><span class="hljs-comment"># 定义工作目录</span><span class="hljs-keyword">WORKDIR</span><span class="bash"> /etc/nginx</span><span class="hljs-comment"># 定义输出命令</span><span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;/run.sh&quot;</span>]</span><span class="hljs-comment"># 定义暴露端口</span><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">443</span></code></pre><p>编辑run.sh <code>vim run.sh</code></p><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span>/usr/sbin/sshd &amp;/usr/sbin/nginx</code></pre><p>创建镜像</p><pre><code class="hljs bash">xxx@localhost nginx_ubuntu % docker build -t nginx:stable .....Successfully built 99a2f2008406Successfully tagged nginx:stable<span class="hljs-comment"># 查看镜像</span>xxx@localhost nginx_ubuntu % docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEnginx               stable              99a2f2008406        16 seconds ago      270MBapache              ubuntu              ffac826ee6f2        17 hours ago        262MB</code></pre><p>基于nginx镜像，启动新的容器</p><pre><code class="hljs bash">% docker run -d -P nginx:stable89a2b5971b5718669feb099cdff6c5c35b99eac2c4fc2d74e1b3543b1f41945dxxx@localhost nginx_ubuntu % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                                                  NAMES89a2b5971b57        nginx:stable        <span class="hljs-string">&quot;/run.sh&quot;</span>           8 seconds ago       Up 7 seconds        0.0.0.0:32770-&gt;22/tcp, 0.0.0.0:32769-&gt;80/tcp, 0.0.0.0:32768-&gt;443/tcp   busy_dubinsky<span class="hljs-comment"># 测试nginx是否成功</span>xxx@localhost nginx_ubuntu % curl 192.168.0.107:32769&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;/title&gt;&lt;style&gt;    body &#123;        width: 35em;        margin: 0 auto;        font-family: Tahoma, Verdana, Arial, sans-serif;    &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;&lt;p&gt;If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.&lt;/p&gt;&lt;p&gt;For online documentation and support please refer to&lt;a href=<span class="hljs-string">&quot;http://nginx.org/&quot;</span>&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;Commercial support is available at&lt;a href=<span class="hljs-string">&quot;http://nginx.com/&quot;</span>&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you <span class="hljs-keyword">for</span> using nginx.&lt;/em&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>访问地址：<code>http://192.168.0.107:32769/</code></p><p><img src="/2020/06/25/docker-webapp/2.png" alt="nginx-stable"></p><h3 id="3、Tengine镜像"><a href="#3、Tengine镜像" class="headerlink" title="3、Tengine镜像"></a>3、Tengine镜像</h3><p>Dockerfile文件：</p><pre><code class="hljs dockerfile"><span class="hljs-comment"># 继承镜像sshd:dockerfile</span><span class="hljs-keyword">FROM</span> sshd:dockerfile<span class="hljs-comment"># 提供一些作者的信息</span><span class="hljs-keyword">MAINTAINER</span> <span class="hljs-keyword">from</span> www.lc-ling.com by lingchen (lingchen1316@<span class="hljs-number">163</span>.com)<span class="hljs-comment"># 安装编译环境</span><span class="hljs-keyword">RUN</span><span class="bash"> apt-get install -y build-essential debhelper make autoconf automake patch</span><span class="hljs-keyword">RUN</span><span class="bash"> apt-get install -y dpkg-dev fakeroot pbuilder gnupg dh-make libssl-dev libpcre3-dev git-core</span><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Asia/Shanghai&quot;</span> &gt; /etc/timezone &amp;&amp; \</span><span class="bash">    dpkg-reconfigure -f noninteractive tzdata</span><span class="hljs-comment"># 注意这里要更改系统的时区设置，因为在Web应用中经常会用到时区这个系统变量，</span><span class="hljs-comment"># 默认的ubuntu会让你的应用程序发生不可思议的效果哦</span><span class="hljs-comment"># 创建Nginx用户</span><span class="hljs-keyword">RUN</span><span class="bash"> adduser --disabled-login --gecos <span class="hljs-string">&#x27;Tengine&#x27;</span> nginx</span><span class="hljs-comment"># tengine安装的shell脚本</span><span class="hljs-keyword">WORKDIR</span><span class="bash"> /home/nginx</span><span class="hljs-keyword">RUN</span><span class="bash"> su nginx -c <span class="hljs-string">&#x27;git clone https://github.com/alibaba/tengine.git&#x27;</span></span><span class="hljs-keyword">WORKDIR</span><span class="bash"> /home/nginx/tengine</span><span class="hljs-keyword">RUN</span><span class="bash"> su nginx -c <span class="hljs-string">&#x27;mv packages/debian .&#x27;</span></span><span class="hljs-keyword">ENV</span> DEB_BUILD_OPTIONS nocheck<span class="hljs-keyword">RUN</span><span class="bash"> su nginx -c <span class="hljs-string">&#x27;dpkg-buildpackage -rfakeroot -uc -b&#x27;</span></span><span class="hljs-keyword">WORKDIR</span><span class="bash"> /home/nginx</span><span class="hljs-keyword">RUN</span><span class="bash"> dpkg -i tengine_2.0.2-1_amd64.deb</span><span class="hljs-comment"># 定义挂载的目录</span><span class="hljs-keyword">VOLUME</span><span class="bash"> [<span class="hljs-string">&quot;/data&quot;</span>, <span class="hljs-string">&quot;/etc/nginx/sites-enabled&quot;</span>, <span class="hljs-string">&quot;/var/log/nginx&quot;</span>]</span><span class="hljs-comment"># 让nginx运行在非Daemon模式</span><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\ndaemon off;&quot;</span> &gt;&gt; /etc/nginx/nginx.conf</span><span class="hljs-comment"># 定义工作目录</span><span class="hljs-keyword">WORKDIR</span><span class="bash"> /etc/nginx</span><span class="hljs-comment"># 添加脚本，并设置权限，这会覆盖之前放在这个位置的脚本</span><span class="hljs-keyword">ADD</span><span class="bash"> run.sh /run.sh</span><span class="hljs-keyword">RUN</span><span class="bash"> chmod 755 /*.sh</span><span class="hljs-comment"># 定义输出命令</span><span class="hljs-keyword">CMD</span><span class="bash"> [<span class="hljs-string">&quot;/run.sh&quot;</span>]</span><span class="hljs-comment"># 定义暴露端口</span><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">443</span></code></pre><p>run.sh：</p><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span>/usr/sbin/sshd &amp;/usr/sbin/nginx</code></pre><p><code>docker build -t nginx:alibaba .</code></p><h3 id="4、Tomcat"><a href="#4、Tomcat" class="headerlink" title="4、Tomcat"></a>4、Tomcat</h3><p>Tomcat服务器是一个免费开放源代码的Web应用服务器，属于轻量级的应用服务器</p><h3 id="5、LAMP"><a href="#5、LAMP" class="headerlink" title="5、LAMP"></a>5、LAMP</h3><p>LAMP指的是Linux（操作系统）、ApacheHTTP服务器、MySQL（有时也指MariaDB，数据库软件）和PHP（有时也指Perl和Python）的组合方案，一般也适用来建立Web服务环境。</p><pre><code class="hljs bash">% docker pull tutum/lampxxx@localhost lamp % docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEtutum/lamp          latest              3d49e175ec00        4 years ago         427MB<span class="hljs-comment"># 启动lamp容器（3306端口已被mysql占用，改为3316）</span>% docker run -d -p 8080:80 -p 3316:3306 tutum/lampcc28860af6210e7d9ce97bd62cf5a68b238bcf0bf1459bb748a174901b3141faxxx@localhost lamp % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                                          NAMEScc28860af621        tutum/lamp          <span class="hljs-string">&quot;/run.sh&quot;</span>           2 minutes ago       Up 2 minutes        0.0.0.0:8080-&gt;80/tcp, 0.0.0.0:3316-&gt;3306/tcp   great_clarke</code></pre><p>访问<code>http://127.0.0.1:8080/</code></p><p><img src="/2020/06/25/docker-webapp/3.png" alt="lamp-acess"></p><h3 id="6、CMS"><a href="#6、CMS" class="headerlink" title="6、CMS"></a>6、CMS</h3><p>内容管理系统（Content Management System, CMS）指的是提供内容编辑服务的平台程序。CMS可以让不懂编程的人方便又轻松地发布、更改和管理各类数字内容（主要以文本和图片为主）</p><p>WordPress是风靡全球的免费开源的内容管理系统。WordPress是博客、企业官网、产品首页等内容相关平台的主流实现方案之一。</p><pre><code class="hljs bash">% docker pull wordpress% docker run --name some-wordpress --link some-mysql:mysql -d wordpress</code></pre><p><code>--link some-mysql:mysql</code>，连接到mysql的容器</p><p>若没有相应的mysql容器</p><pre><code class="hljs bash">% docker run --name some-wordpress --link some-mysql:mysql -d wordpressdocker: Error response from daemon: could not get container <span class="hljs-keyword">for</span> some-mysql: No such container: some-mysql.</code></pre><p><strong><u>ps：本文为学习记录，仅供学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> webapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker之操作系统学习(SSH容器搭建)</title>
      <link href="2020/06/23/docker-os/"/>
      <url>2020/06/23/docker-os/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker之操作系统学习"><a href="#Docker之操作系统学习" class="headerlink" title="Docker之操作系统学习"></a>Docker之操作系统学习</h2><h3 id="1、BusyBox"><a href="#1、BusyBox" class="headerlink" title="1、BusyBox"></a>1、BusyBox</h3><p>Busybox是一个集成了一百多个最常用的Linux命令和工具的软件工具箱，它在单一的可执行文件中提供了精简的Unix的工具集。</p><pre><code class="hljs bash">% docker search busybox% docker pull busyboxUsing default tag: latestlatest: Pulling from library/busybox76df9210b28c: Pull complete Digest: sha256:95cf004f559831017cdf4628aaf1bb30133677be8702a8c5f2994629f637a209Status: Downloaded newer image <span class="hljs-keyword">for</span> busybox:latestdocker.io/library/busybox:latest% docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEbusybox             latest              1c35c4412082        2 weeks ago         1.22MB<span class="hljs-comment"># 启动busybox容器</span>% docker run -it busybox<span class="hljs-comment"># 运行grep命令</span>/ <span class="hljs-comment"># grep</span>BusyBox v1.31.1 (2020-06-02 02:36:36 UTC) multi-call binary.Usage: grep [-HhnlLoqvsriwFE] [-m N] [-A/B/C N] PATTERN/-e PATTERN.../-f FILE [FILE]...Search <span class="hljs-keyword">for</span> PATTERN <span class="hljs-keyword">in</span> FILEs (or stdin)-HAdd <span class="hljs-string">&#x27;filename:&#x27;</span> prefix-hDo not add <span class="hljs-string">&#x27;filename:&#x27;</span> prefix-nAdd <span class="hljs-string">&#x27;line_no:&#x27;</span> prefix-lShow only names of files that match-LShow only names of files that don<span class="hljs-string">&#x27;t match</span><span class="hljs-string">-cShow only count of matching lines</span><span class="hljs-string">-oShow only the matching part of line</span><span class="hljs-string">-qQuiet. Return 0 if PATTERN is found, 1 otherwise</span><span class="hljs-string">-vSelect non-matching lines</span><span class="hljs-string">-sSuppress open and read errors</span><span class="hljs-string">-rRecurse</span><span class="hljs-string">-iIgnore case</span><span class="hljs-string">-wMatch whole words only</span><span class="hljs-string">-xMatch whole lines only</span><span class="hljs-string">-FPATTERN is a literal (not regexp)</span><span class="hljs-string">-EPATTERN is an extended regexp</span><span class="hljs-string">-m NMatch up to N times per file</span><span class="hljs-string">-A NPrint N lines of trailing context</span><span class="hljs-string">-B NPrint N lines of leading context</span><span class="hljs-string">-C NSame as &#x27;</span>-A N -B N<span class="hljs-string">&#x27;</span><span class="hljs-string">-e PTRNPattern to match</span><span class="hljs-string">-f FILERead pattern from file</span><span class="hljs-string"></span><span class="hljs-string"># 查看容器内的挂载信息</span><span class="hljs-string">/ # mount</span><span class="hljs-string">overlay on / type overlay (rw,relatime,lowerdir=/var/lib/docker/overlay2/l/CI4ZX3GGYIARAQBCPDSWXFDIVK:/var/lib/docker/overlay2/l/PXT5LRJGKYW2STZOH4DLZRYCD4,upperdir=/var/lib/docker/overlay2/4b6cb63e4a6b00292b57ae981a1c23c812418e68aa02c10c959cdbd7bd4f5332/diff,workdir=/var/lib/docker/overlay2/4b6cb63e4a6b00292b57ae981a1c23c812418e68aa02c10c959cdbd7bd4f5332/work)</span><span class="hljs-string">proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)</span><span class="hljs-string">tmpfs on /dev type tmpfs (rw,nosuid,size=65536k,mode=755)</span><span class="hljs-string">devpts on /dev/pts type devpts (rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=666)</span><span class="hljs-string">sysfs on /sys type sysfs (ro,nosuid,nodev,noexec,relatime)</span><span class="hljs-string">tmpfs on /sys/fs/cgroup type tmpfs (ro,nosuid,nodev,noexec,relatime,mode=755)</span><span class="hljs-string">cpuset on /sys/fs/cgroup/cpuset type cgroup (ro,nosuid,nodev,noexec,relatime,cpuset)</span><span class="hljs-string">cpu on /sys/fs/cgroup/cpu type cgroup (ro,nosuid,nodev,noexec,relatime,cpu)</span><span class="hljs-string">cpuacct on /sys/fs/cgroup/cpuacct type cgroup (ro,nosuid,nodev,noexec,relatime,cpuacct)</span></code></pre><p>busybox虽然小巧，但是它提供了常见的Linux命令，可以用来练习和熟悉Linux命令。</p><h3 id="2、Ubuntu"><a href="#2、Ubuntu" class="headerlink" title="2、Ubuntu"></a>2、Ubuntu</h3><p>Debian和Ubuntu都是目前较为流行的Debian系的服务器操作系统。</p><pre><code class="hljs bash">% docker search -s 10 ubuntuFlag --stars has been deprecated, use --filter=stars=3 insteadNAME                                                      DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDubuntu                                                    Ubuntu is a Debian-based Linux operating sys…   11031               [OK]                dorowu/ubuntu-desktop-lxde-vnc                            Docker image to provide HTML5 VNC interface …   441                                     [OK]rastasheep/ubuntu-sshd                                    Dockerized SSH service, built on top of offi…   244                                     [OK]consol/ubuntu-xfce-vnc                                    Ubuntu container with <span class="hljs-string">&quot;headless&quot;</span> VNC session…   220                                     [OK]ubuntu-upstart                                            Upstart is an event-based replacement <span class="hljs-keyword">for</span> th…   110                 [OK]                ansible/ubuntu14.04-ansible                               Ubuntu 14.04 LTS with ansible                   98                                      [OK]neurodebian                                               NeuroDebian provides neuroscience research s…   68                  [OK]                1and1internet/ubuntu-16-nginx-php-phpmyadmin-mysql-5      ubuntu-16-nginx-php-phpmyadmin-mysql-5          50                                      [OK]ubuntu-debootstrap                                        debootstrap --variant=minbase --components=m…   44                  [OK]                nuagebec/ubuntu                                           Simple always updated Ubuntu docker images w…   24                                      [OK]i386/ubuntu                                               Ubuntu is a Debian-based Linux operating sys…   21                                      1and1internet/ubuntu-16-apache-php-5.6                    ubuntu-16-apache-php-5.6                        14                                      [OK]1and1internet/ubuntu-16-apache-php-7.0                    ubuntu-16-apache-php-7.0                        13                                      [OK]eclipse/ubuntu_jdk8                                       Ubuntu, JDK8, Maven 3, git, curl, nmap, mc, …   12                                      [OK]1and1internet/ubuntu-16-nginx-php-phpmyadmin-mariadb-10   ubuntu-16-nginx-php-phpmyadmin-mariadb-10       11                                      [OK]<span class="hljs-comment"># 使用Ubuntu 14.04，查看其版本号</span>% docker run -it ubuntu:14.04 /bin/bashUnable to find image <span class="hljs-string">&#x27;ubuntu:14.04&#x27;</span> locally14.04: Pulling from library/ubuntu2e6e20c8e2e6: Pull complete 30bb187ac3fc: Pull complete b7a5bcc4a58a: Pull complete Digest: sha256:ffc76f71dd8be8c9e222d420dc96901a07b61616689a44c7b3ef6a10b7213de4Status: Downloaded newer image <span class="hljs-keyword">for</span> ubuntu:14.04root@d3bc90968ea7:/<span class="hljs-comment"># lsb_release -a</span>No LSB modules are available.Distributor ID:UbuntuDescription:Ubuntu 14.04.6 LTSRelease:14.04Codename:trusty<span class="hljs-comment"># 安装curl</span>root@d3bc90968ea7:/<span class="hljs-comment"># apt-get install curl</span>root@d3bc90968ea7:/<span class="hljs-comment"># curl</span>curl: try <span class="hljs-string">&#x27;curl --help&#x27;</span> or <span class="hljs-string">&#x27;curl --manual&#x27;</span> <span class="hljs-keyword">for</span> more information<span class="hljs-comment"># 安装apache2</span>root@d3bc90968ea7:/<span class="hljs-comment"># apt-get install apache2</span><span class="hljs-comment"># 启动apache2服务</span>root@d3bc90968ea7:/<span class="hljs-comment"># service apache2 start</span> * Starting web server apache2                                                                                                                                                                              AH00558: apache2: Could not reliably determine the server<span class="hljs-string">&#x27;s fully qualified domain name, using 172.17.0.2. Set the &#x27;</span>ServerName<span class="hljs-string">&#x27; directive globally to suppress this message</span><span class="hljs-string"> * </span><span class="hljs-string"></span><span class="hljs-string"># 访问apache2服务</span><span class="hljs-string">root@d3bc90968ea7:/# curl 127.0.0.1</span><span class="hljs-string"></span><span class="hljs-string">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span><span class="hljs-string">&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</span><span class="hljs-string">  &lt;!--</span><span class="hljs-string">    Modified from the Debian original for Ubuntu</span><span class="hljs-string">    Last updated: 2014-03-19</span><span class="hljs-string">    See: https://launchpad.net/bugs/1288690</span><span class="hljs-string">  --&gt;</span><span class="hljs-string">  &lt;head&gt;</span><span class="hljs-string">    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;</span><span class="hljs-string">    &lt;title&gt;Apache2 Ubuntu Default Page: It works&lt;/title&gt;</span><span class="hljs-string">    &lt;style type=&quot;text/css&quot; media=&quot;screen&quot;&gt;</span><span class="hljs-string">......</span></code></pre><h3 id="3、Centos-Fedora"><a href="#3、Centos-Fedora" class="headerlink" title="3、Centos/Fedora"></a>3、Centos/Fedora</h3><p>Centos和Fedora都是基于Redhat的Linux发行版。前者以兼容Redhat软件而闻名，Centos是企业级服务器的常用选型。后者则主要面向个人用户。</p><h3 id="4、创建支持SSH服务的镜像"><a href="#4、创建支持SSH服务的镜像" class="headerlink" title="4、创建支持SSH服务的镜像"></a>4、创建支持SSH服务的镜像</h3><h4 id="基于commit命令创建"><a href="#基于commit命令创建" class="headerlink" title="基于commit命令创建"></a>基于commit命令创建</h4><p>Docker提供的docker commit命令，支持用户提交自己对容器的修改，并生成新的镜像。<br>命令格式为<code>docker commit CONTAINER [REPOSITORY[:TAG]]</code>。</p><pre><code class="hljs bash">xxx@bogon ~ % docker run -it ubuntu:14.04 /bin/bashroot@8d0c91836292:/<span class="hljs-comment"># sshd</span>bash: sshd: <span class="hljs-built_in">command</span> not found<span class="hljs-comment"># 安装sshd</span>root@8d0c91836292:/<span class="hljs-comment"># apt-get install openssh-server</span><span class="hljs-comment"># 查看容器的22端口，处于监听状态</span>root@8d0c91836292:/<span class="hljs-comment"># netstat -tunlp</span>Active Internet connections (only servers)Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program nametcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      579/sshd        tcp6       0      0 :::22                   :::*                    LISTEN      579/sshd    <span class="hljs-comment"># 修改SSH服务的安全登录配置，取消pam登录限制</span>root@8d0c91836292:/<span class="hljs-comment"># sed -ri &#x27;s/session required pam_loginuid.so/#session required pam_loginuid.so/g&#x27; /etc/pam.d/sshd</span><span class="hljs-comment"># 在root用户目录下创建．ssh目录，并复制需要登录的公钥信息</span><span class="hljs-comment"># (一般为本地主机用户目录下的．ssh/id_rsa.pub文件，可由ssh-keygen -t rsa命令生成)到authorized_keys文件中</span>root@8d0c91836292:/<span class="hljs-comment"># mkdir root/.ssh</span>root@8d0c91836292:/<span class="hljs-comment"># vi /root/.ssh/authorized_keys</span><span class="hljs-comment"># 创建自动启动ssh服务的脚本</span>root@8d0c91836292:/<span class="hljs-comment"># vi /run.sh</span><span class="hljs-meta">#! /bin/bash</span>/usr/sbin/sshd -D<span class="hljs-comment"># 添加执行权限</span>root@8d0c91836292:/<span class="hljs-comment"># chmod +x run.sh </span>root@8d0c91836292:/<span class="hljs-comment"># ls -l</span>-rwxr-xr-x   1 root root   31 Jun 23 14:44 run.sh<span class="hljs-comment"># 退出容器</span>root@8d0c91836292:/<span class="hljs-comment"># exit</span><span class="hljs-built_in">exit</span>xxx@bogon ~ % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<span class="hljs-comment"># 保存（创建新的镜像）</span><span class="hljs-comment"># 命令格式为`docker commit CONTAINER [REPOSITORY[:TAG]]`</span>xxx@bogon ~ % docker commit 8d0c91836292 sshd:ubuntusha256:6943898c8bac0f6968878ba7f8ce9bbcb974f43d483ceb118ae254aed1bbb4f9<span class="hljs-comment"># 查看新的镜像</span>xxx@bogon ~ % docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEsshd                ubuntu              6943898c8bac        6 seconds ago       235MBbusybox             latest              1c35c4412082        2 weeks ago         1.22MBubuntu              14.04               6e4f1fe62ff1        6 months ago        197MB<span class="hljs-comment"># 启动新的容器</span><span class="hljs-comment"># 添加22端口映射10022 -&gt; 22，10022为宿主主机的端口，22为容器的端口</span>xxx@bogon ~ % docker run -p 10022:22 -d sshd:ubuntu /run.sh982bbb0c883bb01a4b3c91dc659b1f6b34b5408369e332164ad794d302b60544xxx@bogon ~ % docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                   NAMES982bbb0c883b        sshd:ubuntu         <span class="hljs-string">&quot;/run.sh&quot;</span>           4 seconds ago       Up 3 seconds        0.0.0.0:10022-&gt;22/tcp   hungry_haibt<span class="hljs-comment"># 连接之前要将本机的.ssh 目录下的id_rsa.pub内容拷贝到docker容器中的root目录下.ssh/authorized_keys中</span><span class="hljs-comment"># 连接容器(一定要指定root名，因为本地mac用户为自己的用户名)</span>xxx@bogon ~ % ssh root@192.168.0.107 -p 10022Welcome to Ubuntu 14.04 LTS (GNU/Linux 4.4.0-170-generic x86_64) * Documentation:  https://help.ubuntu.com/The programs included with the Ubuntu system are free software;the exact distribution terms <span class="hljs-keyword">for</span> each program are described <span class="hljs-keyword">in</span> theindividual files <span class="hljs-keyword">in</span> /usr/share/doc/*/copyright.Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted byapplicable law.root@982bbb0c883b:~<span class="hljs-comment">#</span></code></pre><h4 id="使用Dockerfile创建"><a href="#使用Dockerfile创建" class="headerlink" title="使用Dockerfile创建"></a>使用Dockerfile创建</h4><pre><code class="hljs bash">xxx@localhost docker % mkdir sshd_ubuntuxxx@localhost docker % <span class="hljs-built_in">cd</span> sshd_ubuntu xxx@localhost sshd_ubuntu % lsxxx@localhost sshd_ubuntu % touch Dockerfile run.shxxx@localhost sshd_ubuntu % lsDockerfilerun.sh<span class="hljs-comment"># 编写run.sh</span><span class="hljs-meta">#!/bin/bash</span>/usr/sbin/sshd -D<span class="hljs-comment"># 生成ssh密钥对</span>% ssh-keygen -t rsa% cat ~/.ssh/id_rsa.pub &gt; authorized_keys% lsDockerfileauthorized_keysrun.sh<span class="hljs-comment"># 编写Dockerfile</span><span class="hljs-comment"># 设置继承镜像</span>FROM ubuntu:14.04<span class="hljs-comment"># 提供一些作者的信息</span>MAINTAINER from www.lc-ling.com by lingchen (lingchen1316@163.com)<span class="hljs-comment"># 下面开始运行命令，此处更改ubuntu的源为国内163的源</span>RUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.163.com/ubuntu/ trusty main restricted universe multiverse&quot;</span> &gt; /etc/apt/sources.listRUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.163.com/ubuntu/ trusty-security main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.listRUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.163.com/ubuntu/ trusty-updates main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.listRUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.163.com/ubuntu/ trusty-proposed main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.listRUN <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://mirrors.163.com/ubuntu/ trusty-backports main restricted universe multiverse&quot;</span> &gt;&gt; /etc/apt/sources.listRUN apt-get update<span class="hljs-comment"># 安装ssh服务</span>RUN apt-get install -y openssh-serverRUN mkdir -p /var/run/sshdRUN mkdir -p /root/.ssh<span class="hljs-comment"># 取消pam限制</span>RUN sed -ri <span class="hljs-string">&#x27;s/session required pam_loginuid.so/#session required pam_loginuid.so/g&#x27;</span> /etc/pam.d/sshd<span class="hljs-comment"># 复制配置文件到相应位置，并赋予脚本可执行权限</span>ADD authorized_keys /root/.ssh/authorized_keysADD run.sh /run.shRUN chmod 755 /run.sh<span class="hljs-comment"># 开放端口</span>EXPOSE 22<span class="hljs-comment"># 设置自启动命令</span>CMD [<span class="hljs-string">&quot;/run.sh&quot;</span>]<span class="hljs-comment"># 创建镜像 (有 . 号)</span>xxx@localhost sshd_ubuntu % sudo docker build -t sshd:dockerfile .<span class="hljs-comment"># 查看docker images</span>xxx@localhost sshd_ubuntu % docker imagesREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEsshd                dockerfile          44638bb2f804        10 seconds ago      249MB<span class="hljs-comment"># 使用sshd:dockerfile镜像，创建容器，测试自定义镜像</span>% docker run -d -p 10122:22 sshd:dockerfile<span class="hljs-comment"># 错误一：</span>b5f645724ce1d19b85228e401bbfda008a13c39da9f9452b09754ffab4816e9fdocker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused <span class="hljs-string">&quot;exec: \&quot;/run.sh\&quot;: permission denied&quot;</span>: unknown.<span class="hljs-comment"># Dockerfile文件中没有设置run.sh的执行权限</span>RUN chmod 755 /run.sh<span class="hljs-comment"># ssh连接自定义容器</span>xxx@localhost sshd_ubuntu % ssh root@192.168.0.107 -p 10122The authenticity of host <span class="hljs-string">&#x27;[192.168.0.107]:10122 ([192.168.0.107]:10122)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">ECDSA key fingerprint is SHA256:byz56n6ggX89uz39PZnFnS40Vkn4Ry5omVoAqi4UNZI.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><span class="hljs-string">Warning: Permanently added &#x27;</span>[192.168.0.107]:10122<span class="hljs-string">&#x27; (ECDSA) to the list of known hosts.</span><span class="hljs-string">Welcome to Ubuntu 14.04 LTS (GNU/Linux 4.4.0-170-generic x86_64)</span><span class="hljs-string"></span><span class="hljs-string"> * Documentation:  https://help.ubuntu.com/</span><span class="hljs-string"></span><span class="hljs-string">The programs included with the Ubuntu system are free software;</span><span class="hljs-string">the exact distribution terms for each program are described in the</span><span class="hljs-string">individual files in /usr/share/doc/*/copyright.</span><span class="hljs-string"></span><span class="hljs-string">Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by</span><span class="hljs-string">applicable law.</span><span class="hljs-string"></span><span class="hljs-string">root@9e9b7f178cce:~# </span><span class="hljs-string"></span></code></pre><p><strong><u>ps：本文为学习记录，仅为学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> ssh </tag>
            
            <tag> os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker之Dockfile的nginx构建</title>
      <link href="2020/06/22/docker-dockfile-nginx/"/>
      <url>2020/06/22/docker-dockfile-nginx/</url>
      
        <content type="html"><![CDATA[<p>Docker之Dockfile的nginx构建</p><p>Dockerfile由一行行命令语句组成，并且支持以#开头的注释行。<br>Dockerfile分为四个部分：</p><ul><li>基础镜像信息</li><li>维护者信息</li><li>镜像操作指令</li><li>容器启动时执行指令</li></ul><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>指令的一般格式是INSTRUCTION arguments</p><p>1、FROM</p><p>格式为<code>FROM &lt;image&gt;</code>或 <code>FROM &lt;image&gt;:&lt;tag&gt;</code>，指定基础镜像。</p><p>2、MAINTAINER</p><p>格式为<code>MAINTAINER &lt;name&gt;</code>，指定维护者信息。</p><p>3、RUN</p><p>格式为<code>RUN &lt;command&gt;</code> 或者 <code>RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>，每条RUN指令将在当前镜像基础上执行指定指令，并提交为新的镜像。</p><p>4、CMD</p><p>格式为<code>CMD [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code>使用exec执行，推荐方式。指定启动容器时的运行命令，每个Dockerfile只能有一条CMD命令。</p><p>5、EXPOSE</p><p>格式为<code>EXPOSE &lt;port&gt; [&lt;port&gt;...]</code>，告诉Docker服务端暴露的端口号，供互联系统使用。</p><p>6、ENV</p><p>格式为<code>ENV &lt;key&gt; &lt;value&gt;</code>。指定一个环境变量，会被后续RUN指令使用，并在容器运行时保持。</p><p>7、ADD</p><p>格式为<code>ADD &lt;src&gt; &lt;dest&gt;</code>，将复制指定的<code>&lt;src&gt;</code> 到容器中的<code>&lt;dest&gt;</code>，其中的<code>&lt;src&gt;</code>可以是Dockerfile所在目录的一个相对路径（文件或目录）。</p><p>8、COPY</p><p>格式为<code>COPY &lt;src&gt; &lt;dest&gt;</code>，复制本地主机的<code>&lt;src&gt;</code>为容器中的<code>&lt;dest&gt;</code>，其中的<code>&lt;src&gt;</code>可以是Dockerfile所在目录的一个相对路径。当使用本地目录时，推荐使用COPY。</p><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><p>编写完Dockerfile完，可以通过docker build命令来创建镜像。一般建议放置Dockerfile文件目录为空目录。</p><p>示例Dockerfile：</p><pre><code class="hljs dockerfile"><span class="hljs-number">1</span> <span class="hljs-comment"># This dockerfile uses the ubuntu image </span> <span class="hljs-number">2</span> <span class="hljs-comment"># VERSION 2 - EDITION 1</span> <span class="hljs-number">3</span> <span class="hljs-comment"># Author: lingchen</span> <span class="hljs-number">4</span> <span class="hljs-comment"># Command format: Instruction [arguments / command] ...</span> <span class="hljs-number">5</span>   <span class="hljs-number">6</span> <span class="hljs-comment"># 第一行必须指定基础镜像</span> <span class="hljs-number">7</span> <span class="hljs-keyword">FROM</span> ubuntu <span class="hljs-number">8</span>   <span class="hljs-number">9</span> <span class="hljs-comment"># 维护者信息</span><span class="hljs-number">10</span> <span class="hljs-keyword">MAINTAINER</span> lingchen docker@email.com <span class="hljs-number">11</span>  <span class="hljs-number">12</span> <span class="hljs-comment"># 镜像的操作指令</span><span class="hljs-number">13</span> <span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb http://archive.ubuntu.com/ubuntu/ raring main universe&quot;</span> &gt;&gt; /etc/apt/sources.list</span><span class="hljs-number">14</span> <span class="hljs-number">15</span> <span class="hljs-keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y nginx</span><span class="hljs-number">16</span> <span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;\ndaemon off;&quot;</span> &gt;&gt; /etc/nginx/nginx.conf</span><span class="hljs-number">17</span> <span class="hljs-number">18</span> <span class="hljs-comment"># 容器启动时执行指令</span><span class="hljs-number">19</span> <span class="hljs-keyword">CMD</span><span class="bash"> /usr/sbin/nginx</span></code></pre><p>运行指令：</p><p>使用当前目录的 Dockerfile 创建镜像，标签为 docker_nginx:v1。</p><pre><code class="hljs bash">% docker build -t docker_nginx:v1 .</code></pre><p><strong><u>ps：本文为学习记录，仅为学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> dockerfile </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建MVC的WebApp</title>
      <link href="2020/06/04/net-mvc-webapp/"/>
      <url>2020/06/04/net-mvc-webapp/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="创建MVC的WebApp"><a href="#创建MVC的WebApp" class="headerlink" title="创建MVC的WebApp"></a>创建MVC的WebApp</h2><h3 id="１、MVC新規"><a href="#１、MVC新規" class="headerlink" title="１、MVC新規"></a>１、MVC新規</h3><p><img src="/2020/06/04/net-mvc-webapp/1.png" alt="mvc-create"></p><p>OK ー＞　MVC　－＞　次へ、工程自動生成成功。<br>起動工程（F5），可能會報錯如下：</p><pre><code class="hljs html">&#x27;/&#x27; アプリケーションでサーバー エラーが発生しました。ファイルまたはアセンブリ &#x27;Newtonsoft.Json&#x27;、またはその依存関係の 1 つが読み込めませんでした。見つかったアセンブリのマニフェスト定義はアセンブリ参照に一致しません。 (HRESULT からの例外:0x80131040)  説明: 現在の Web 要求を実行中に、ハンドルされていない例外が発生しました。エラーに関する詳細および例外の発生場所については、スタック トレースを参照してください。</code></pre><p>解決案：<br>在NuGet包管理器中將Newtonsoft.Json升級即可</p><p><img src="/2020/06/04/net-mvc-webapp/2.png" alt="Nuget-management"></p><p><img src="/2020/06/04/net-mvc-webapp/3.png" alt="Newtonsoft.Json-update"></p><p>再次起動工程，MVC正常運行。如下：<br><img src="/2020/06/04/net-mvc-webapp/4.png" alt="MVC-init"></p><h3 id="２、站點風格"><a href="#２、站點風格" class="headerlink" title="２、站點風格"></a>２、站點風格</h3><p>修改ContosoUniversity\ContosoUniversity\Views\Shared_Layout.cshtml文件如下：</p><pre><code class="hljs php+HTML">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&#x2F;&gt;    &lt;meta charset&#x3D;&quot;utf-8&quot; &#x2F;&gt;    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;    &lt;title&gt;@ViewBag.Title - Contoso University&lt;&#x2F;title&gt;    @Styles.Render(&quot;~&#x2F;Content&#x2F;css&quot;)    @Scripts.Render(&quot;~&#x2F;bundles&#x2F;modernizr&quot;)&lt;&#x2F;head&gt;&lt;body&gt;    &lt;div class&#x3D;&quot;navbar navbar-inverse navbar-fixed-top&quot;&gt;        &lt;div class&#x3D;&quot;container&quot;&gt;            &lt;div class&#x3D;&quot;navbar-header&quot;&gt;                &lt;button type&#x3D;&quot;button&quot; class&#x3D;&quot;navbar-toggle&quot; data-toggle&#x3D;&quot;collapse&quot; data-target&#x3D;&quot;.navbar-collapse&quot;&gt;                    &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;                    &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;                    &lt;span class&#x3D;&quot;icon-bar&quot;&gt;&lt;&#x2F;span&gt;                &lt;&#x2F;button&gt;                @Html.ActionLink(&quot;Contoso University&quot;, &quot;Index&quot;, &quot;Home&quot;, new &#123; area &#x3D; &quot;&quot; &#125;, new &#123; @class &#x3D; &quot;navbar-brand&quot; &#125;)            &lt;&#x2F;div&gt;            &lt;div class&#x3D;&quot;navbar-collapse collapse&quot;&gt;                &lt;ul class&#x3D;&quot;nav navbar-nav&quot;&gt;                    &lt;li&gt;@Html.ActionLink(&quot;Home&quot;, &quot;Index&quot;, &quot;Home&quot;)&lt;&#x2F;li&gt;                    &lt;li&gt;@Html.ActionLink(&quot;About&quot;, &quot;About&quot;, &quot;Home&quot;)&lt;&#x2F;li&gt;                    &lt;li&gt;@Html.ActionLink(&quot;Students&quot;, &quot;Index&quot;, &quot;Student&quot;)&lt;&#x2F;li&gt;                    &lt;li&gt;@Html.ActionLink(&quot;Courses&quot;, &quot;Index&quot;, &quot;Course&quot;)&lt;&#x2F;li&gt;                    &lt;li&gt;@Html.ActionLink(&quot;Instructors&quot;, &quot;Index&quot;, &quot;Instructor&quot;)&lt;&#x2F;li&gt;                    &lt;li&gt;@Html.ActionLink(&quot;Departments&quot;, &quot;Index&quot;, &quot;Department&quot;)&lt;&#x2F;li&gt;                &lt;&#x2F;ul&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;div&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;container body-content&quot;&gt;        @RenderBody()        &lt;hr &#x2F;&gt;        &lt;footer&gt;            &lt;p&gt;&amp;copy; @DateTime.Now.Year - Contoso University&lt;&#x2F;p&gt;        &lt;&#x2F;footer&gt;    &lt;&#x2F;div&gt;    @Scripts.Render(&quot;~&#x2F;bundles&#x2F;jquery&quot;)    @Scripts.Render(&quot;~&#x2F;bundles&#x2F;bootstrap&quot;)    @RenderSection(&quot;scripts&quot;, required: false)&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>修改ContosoUniversity\ContosoUniversity\Views\Home\Index.cshtml</p><pre><code class="hljs php+HTML">@&#123;    ViewBag.Title &#x3D; &quot;Home Page&quot;;&#125;&lt;div class&#x3D;&quot;jumbotron&quot;&gt;    &lt;h1&gt;Contoso University&lt;&#x2F;h1&gt;&lt;&#x2F;div&gt;&lt;div class&#x3D;&quot;row&quot;&gt;    &lt;div class&#x3D;&quot;col-md-4&quot;&gt;        &lt;h2&gt;Welcome to Contoso University&lt;&#x2F;h2&gt;        &lt;p&gt;            Contoso University is a sample application that            demonstrates how to use Entity Framework 6 in an            ASP.NET MVC 5 web application.        &lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;col-md-4&quot;&gt;        &lt;h2&gt;Build it from scratch&lt;&#x2F;h2&gt;        &lt;p&gt;            You can build the application by following the steps in the tutorial series on the ASP.NET site.        &lt;&#x2F;p&gt;        &lt;p&gt;&lt;a class&#x3D;&quot;btn btn-default&quot; href&#x3D;&quot;http:&#x2F;&#x2F;www.asp.net&#x2F;mvc&#x2F;tutorials&#x2F;getting-started-withef-using-mvc&#x2F;&quot;&gt;See the tutorial &amp;raquo;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;    &lt;div class&#x3D;&quot;col-md-4&quot;&gt;        &lt;h2&gt;Download it&lt;&#x2F;h2&gt;        &lt;p&gt;You can download the completed project.&lt;&#x2F;p&gt;        &lt;p&gt;&lt;a class&#x3D;&quot;btn btn-default&quot; href&#x3D;&quot;https:&#x2F;&#x2F;webpifeed.blob.core.windows.net&#x2F;webpifeed&#x2F;Partners&#x2F;ASP.NET%20MVC%20Application%20Using%20Entity%20Framework%20Code%20First.zip&quot;&gt;Download &amp;raquo;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;div&gt;</code></pre><p>效果如下：<br><img src="/2020/06/04/net-mvc-webapp/5.png" alt="contoso-nav"></p><h3 id="３、安裝Entity-Framework-6"><a href="#３、安裝Entity-Framework-6" class="headerlink" title="３、安裝Entity Framework 6"></a>３、安裝Entity Framework 6</h3><p>ツール　－＞　NuGetパッケージマネージャー　－＞　パッケージマネージャーコンソール<br>‘Install-Package EntityFramework‘</p><pre><code class="hljs bash">PM&gt; Install-Package EntityFramework<span class="hljs-string">&#x27;.NETFramework,Version=v4.6.1&#x27;</span> を対象とするプロジェクト <span class="hljs-string">&#x27;ContosoUniversity&#x27;</span> に関して、パッケージ <span class="hljs-string">&#x27;EntityFramework.6.4.4&#x27;</span> の依存関係情報の収集を試行しています依存関係情報の収集に 34.99 ms かかりましたDependencyBehavior <span class="hljs-string">&#x27;Lowest&#x27;</span> でパッケージ <span class="hljs-string">&#x27;EntityFramework.6.4.4&#x27;</span> の依存関係の解決を試行しています依存関係情報の解決に 0 ms かかりましたパッケージ <span class="hljs-string">&#x27;EntityFramework.6.4.4&#x27;</span> をインストールするアクションを解決していますパッケージ <span class="hljs-string">&#x27;EntityFramework.6.4.4&#x27;</span> をインストールするアクションが解決されました<span class="hljs-string">&#x27;nuget.org&#x27;</span> からパッケージ <span class="hljs-string">&#x27;EntityFramework 6.4.4&#x27;</span> を取得しています。パッケージ <span class="hljs-string">&#x27;EntityFramework.6.4.4&#x27;</span> をフォルダー <span class="hljs-string">&#x27;D:\research\test\ContosoUniversity\packages&#x27;</span> に追加していますパッケージ <span class="hljs-string">&#x27;EntityFramework.6.4.4&#x27;</span> をフォルダー <span class="hljs-string">&#x27;D:\research\test\ContosoUniversity\packages&#x27;</span> に追加しましたパッケージ <span class="hljs-string">&#x27;EntityFramework.6.4.4&#x27;</span> を <span class="hljs-string">&#x27;packages.config&#x27;</span> に追加しましたスクリプト ファイル <span class="hljs-string">&#x27;D:\research\test\ContosoUniversity\packages\EntityFramework.6.4.4\tools\init.ps1&#x27;</span> を実行しています<span class="hljs-string">&#x27;EntityFramework 6.4.4&#x27;</span> が ContosoUniversity に正常にインストールされましたNuGet の操作の実行に 2.02 sec かかりました経過した時間: 00:00:04.5800281</code></pre><h3 id="４、建立數據模型"><a href="#４、建立數據模型" class="headerlink" title="４、建立數據模型"></a>４、建立數據模型</h3><p>Course &lt;-&gt; Enrollment &lt;-&gt; Student<br>Course to Enrollment       ＜ー＞    One-to-many<br>Student to Enrollment      ＜ー＞    One-to-many</p><p>建立Model（Student.cs）<br><img src="/2020/06/04/net-mvc-webapp/6.png" alt="Model-create">Students内容：</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<span class="hljs-keyword">using</span> System.Collections.Generic;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.Models</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Student</span>    &#123;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> ID &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Lastname &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> FirstMidName &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> DateTime EnrollmentDate &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> ICollection&lt;Enrollment&gt; Enrollments &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;    &#125;&#125;</code></pre><p>ID：主鍵<br>virtual：支持嬾加載（lazy loading）<br>ICollection  ： 列表集合（Student和Enrollment是一對多的關係）</p><p>Enrollment内容：</p><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.Models</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">enum</span> Grade    &#123;        A, B, C, D, F    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Enrollment</span>    &#123;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> EnrollmentID &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> CourseID &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> StudentID &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> Grade? Grade &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> Course Course &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> Student Student &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;    &#125;&#125;</code></pre><p>EnrollmentID：主鍵<br>Grade：學分字段，枚舉型，可為空<br>StudentID：外鍵ID，關連Student<br>CourseID：外鍵ID，關連Course</p><p>Course内容：</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Collections.Generic;<span class="hljs-keyword">using</span> System.ComponentModel.DataAnnotations.Schema;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.Models</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Course</span>    &#123;        [<span class="hljs-meta">DatabaseGenerated(DatabaseGeneratedOption.None)</span>]        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> CourseID &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Title &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Credits &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-keyword">virtual</span> ICollection&lt;Enrollment&gt; Enrollments &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;    &#125;&#125;</code></pre><p>DatabaseGenerated：自己生成主鍵<br>Enrollments：Course和Enrollment是一對多的關係</p><h3 id="５、創建數據庫上下文"><a href="#５、創建數據庫上下文" class="headerlink" title="５、創建數據庫上下文"></a>５、創建數據庫上下文</h3><p>an entity set typically corresponds to a database table, and an entity corresponds to a row in the table.</p><p>Solution Explorer　ー＞　Add　－＞　New Folder  ー＞    DAL (for Data Access Layer)<br>SchoolContext.cs</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> ContosoUniversity.Models;<span class="hljs-keyword">using</span> System.Data.Entity;<span class="hljs-keyword">using</span> System.Data.Entity.ModelConfiguration.Conventions;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.DAL</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SchoolContext</span> : <span class="hljs-title">DbContext</span>    &#123;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SchoolContext</span>(<span class="hljs-params"></span>) : <span class="hljs-title">base</span>(<span class="hljs-params"><span class="hljs-string">&quot;SchoolContext&quot;</span></span>)</span><span class="hljs-function"></span>        &#123;        &#125;        <span class="hljs-keyword">public</span> DbSet&lt;Student&gt; Students &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> DbSet&lt;Enrollment&gt; Enrollments &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> DbSet&lt;Course&gt; Courses &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnModelCreating</span>(<span class="hljs-params">DbModelBuilder modelBuilder</span>)</span><span class="hljs-function"></span>        &#123;            modelBuilder.Conventions.Remove&lt;PluralizingTableNameConvention&gt;();        &#125;    &#125;&#125;</code></pre><p>modelBuilder.Conventions.Remove<PluralizingTableNameConvention>()：<br>聲明將數據表生成為單數形式：Student、Enrollment、Course 而不是Students、Enrollments、Courses</PluralizingTableNameConvention></p><p>數據庫啓動文件（初始化表）</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> ContosoUniversity.Models;<span class="hljs-keyword">using</span> System;<span class="hljs-keyword">using</span> System.Collections.Generic;<span class="hljs-keyword">using</span> System.Data.Entity;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.DAL</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SchoolInitializer</span> : <span class="hljs-title">DropCreateDatabaseIfModelChanges</span>&lt;<span class="hljs-title">SchoolContext</span>&gt;    &#123;        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Seed</span>(<span class="hljs-params">SchoolContext context</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">var</span> students = <span class="hljs-keyword">new</span> List&lt;Student&gt;            &#123;                <span class="hljs-keyword">new</span> Student&#123;FirstMidName=<span class="hljs-string">&quot;Carson&quot;</span>, LastName=<span class="hljs-string">&quot;Alexander&quot;</span>, EnrollmentDate=DateTime.Parse(<span class="hljs-string">&quot;2005-09-01&quot;</span>)&#125;,                <span class="hljs-keyword">new</span> Student&#123;FirstMidName=<span class="hljs-string">&quot;Meredith&quot;</span>,LastName=<span class="hljs-string">&quot;Alonso&quot;</span>,EnrollmentDate=DateTime.Parse(<span class="hljs-string">&quot;2002-09-01&quot;</span>)&#125;,                <span class="hljs-keyword">new</span> Student&#123;FirstMidName=<span class="hljs-string">&quot;Arturo&quot;</span>,LastName=<span class="hljs-string">&quot;Anand&quot;</span>,EnrollmentDate=DateTime.Parse(<span class="hljs-string">&quot;2003-09-01&quot;</span>)&#125;,                <span class="hljs-keyword">new</span> Student&#123;FirstMidName=<span class="hljs-string">&quot;Gytis&quot;</span>,LastName=<span class="hljs-string">&quot;Barzdukas&quot;</span>,EnrollmentDate=DateTime.Parse(<span class="hljs-string">&quot;2002-09-01&quot;</span>)&#125;,                <span class="hljs-keyword">new</span> Student&#123;FirstMidName=<span class="hljs-string">&quot;Yan&quot;</span>,LastName=<span class="hljs-string">&quot;Li&quot;</span>,EnrollmentDate=DateTime.Parse(<span class="hljs-string">&quot;2002-09-01&quot;</span>)&#125;,                <span class="hljs-keyword">new</span> Student&#123;FirstMidName=<span class="hljs-string">&quot;Peggy&quot;</span>,LastName=<span class="hljs-string">&quot;Justice&quot;</span>,EnrollmentDate=DateTime.Parse(<span class="hljs-string">&quot;2001-09-01&quot;</span>)&#125;,                <span class="hljs-keyword">new</span> Student&#123;FirstMidName=<span class="hljs-string">&quot;Laura&quot;</span>,LastName=<span class="hljs-string">&quot;Norman&quot;</span>,EnrollmentDate=DateTime.Parse(<span class="hljs-string">&quot;2003-09-01&quot;</span>)&#125;,                <span class="hljs-keyword">new</span> Student&#123;FirstMidName=<span class="hljs-string">&quot;Nino&quot;</span>,LastName=<span class="hljs-string">&quot;Olivetto&quot;</span>,EnrollmentDate=DateTime.Parse(<span class="hljs-string">&quot;2005-09-01&quot;</span>)&#125;            &#125;;            students.ForEach(s =&gt; context.Students.Add(s));            context.SaveChanges();            <span class="hljs-keyword">var</span> courses = <span class="hljs-keyword">new</span> List&lt;Course&gt;            &#123;                <span class="hljs-keyword">new</span> Course&#123;CourseID=<span class="hljs-number">1050</span>,Title=<span class="hljs-string">&quot;Chemistry&quot;</span>,Credits=<span class="hljs-number">3</span>,&#125;,                <span class="hljs-keyword">new</span> Course&#123;CourseID=<span class="hljs-number">4022</span>,Title=<span class="hljs-string">&quot;Microeconomics&quot;</span>,Credits=<span class="hljs-number">3</span>,&#125;,                <span class="hljs-keyword">new</span> Course&#123;CourseID=<span class="hljs-number">4041</span>,Title=<span class="hljs-string">&quot;Macroeconomics&quot;</span>,Credits=<span class="hljs-number">3</span>,&#125;,                <span class="hljs-keyword">new</span> Course&#123;CourseID=<span class="hljs-number">1045</span>,Title=<span class="hljs-string">&quot;Calculus&quot;</span>,Credits=<span class="hljs-number">4</span>,&#125;,                <span class="hljs-keyword">new</span> Course&#123;CourseID=<span class="hljs-number">3141</span>,Title=<span class="hljs-string">&quot;Trigonometry&quot;</span>,Credits=<span class="hljs-number">4</span>,&#125;,                <span class="hljs-keyword">new</span> Course&#123;CourseID=<span class="hljs-number">2021</span>,Title=<span class="hljs-string">&quot;Composition&quot;</span>,Credits=<span class="hljs-number">3</span>,&#125;,                <span class="hljs-keyword">new</span> Course&#123;CourseID=<span class="hljs-number">2042</span>,Title=<span class="hljs-string">&quot;Literature&quot;</span>,Credits=<span class="hljs-number">4</span>,&#125;            &#125;;            courses.ForEach(c =&gt; context.Courses.Add(c));            context.SaveChanges();            <span class="hljs-keyword">var</span> enrollments = <span class="hljs-keyword">new</span> List&lt;Enrollment&gt;            &#123;                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">1</span>,CourseID=<span class="hljs-number">1050</span>,Grade=Grade.A&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">1</span>,CourseID=<span class="hljs-number">4022</span>,Grade=Grade.C&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">1</span>,CourseID=<span class="hljs-number">4041</span>,Grade=Grade.B&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">2</span>,CourseID=<span class="hljs-number">1045</span>,Grade=Grade.B&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">2</span>,CourseID=<span class="hljs-number">3141</span>,Grade=Grade.F&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">2</span>,CourseID=<span class="hljs-number">2021</span>,Grade=Grade.F&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">3</span>,CourseID=<span class="hljs-number">1050</span>&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">4</span>,CourseID=<span class="hljs-number">1050</span>,&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">4</span>,CourseID=<span class="hljs-number">4022</span>,Grade=Grade.F&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">5</span>,CourseID=<span class="hljs-number">4041</span>,Grade=Grade.C&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">6</span>,CourseID=<span class="hljs-number">1045</span>&#125;,                <span class="hljs-keyword">new</span> Enrollment&#123;StudentID=<span class="hljs-number">7</span>,CourseID=<span class="hljs-number">3141</span>,Grade=Grade.A&#125;            &#125;;            enrollments.ForEach(e =&gt; context.Enrollments.Add(e));            context.SaveChanges();        &#125;    &#125;&#125;</code></pre><p>DropCreateDatabaseIfModelChanges：表示只有儅Model類發生變化（如增加字段），DB才會重新創建來相應改變</p><p>web.config配置如下：</p><pre><code class="hljs php+HTML">&lt;entityFramework&gt;  &lt;contexts&gt;    &lt;context type&#x3D;&quot;ContosoUniversity.DAL.SchoolContext, ContosoUniversity&quot;&gt;      &lt;databaseInitializer type&#x3D;&quot;ContosoUniversity.DAL.SchoolInitializer, ContosoUniversity&quot; &#x2F;&gt;    &lt;&#x2F;context&gt;  &lt;&#x2F;contexts&gt;  &lt;defaultConnectionFactory type&#x3D;&quot;System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework&quot;&gt;    &lt;parameters&gt;      &lt;parameter value&#x3D;&quot;v11.0&quot; &#x2F;&gt;    &lt;&#x2F;parameters&gt;  &lt;&#x2F;defaultConnectionFactory&gt;  &lt;providers&gt;    &lt;provider invariantName&#x3D;&quot;System.Data.SqlClient&quot; type&#x3D;&quot;System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer&quot; &#x2F;&gt;  &lt;&#x2F;providers&gt;&lt;&#x2F;entityFramework&gt;</code></pre><h3 id="６、使用LocalDB"><a href="#６、使用LocalDB" class="headerlink" title="６、使用LocalDB"></a>６、使用LocalDB</h3><p>LocalDB是一種輕量級的SQL Server數據庫，適合開發環境使用。强烈不建議生產環境使用。默認與VS一同安裝好了<br>web.config配置如下：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">connectionStrings</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">add</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SchoolContext&quot;</span> <span class="hljs-attr">connectionString</span>=<span class="hljs-string">&quot;Data Source=(LocalDb)\MSSQLLocalDB;Initial Catalog=ContosoUniversity1;Integrated Security=SSPI;AttachDBFilename=|DataDirectory|\ContosoUniversity1.mdf&quot;</span> <span class="hljs-attr">providerName</span>=<span class="hljs-string">&quot;System.Data.SqlClient&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">connectionStrings</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">appSettings</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">add</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;webpages:Version&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3.0.0.0&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">add</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;webpages:Enabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;false&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">add</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ClientValidationEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">add</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;UnobtrusiveJavaScriptEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">appSettings</span>&gt;</span></code></pre><h3 id="７、創建Controller和View"><a href="#７、創建Controller和View" class="headerlink" title="７、創建Controller和View"></a>７、創建Controller和View</h3><p><img src="/2020/06/04/net-mvc-webapp/7.png" alt="controller-add"></p><p><img src="/2020/06/04/net-mvc-webapp/8.png" alt="controller-select"></p><p>選擇項設置：</p><p><img src="/2020/06/04/net-mvc-webapp/9.png" alt="controller-model-relatived"></p><p>生成StudentController和一些view文件：</p><p><img src="/2020/06/04/net-mvc-webapp/10.png" alt="controller-student"></p><p>訪問Student頁面如下：</p><p><img src="/2020/06/04/net-mvc-webapp/11.png" alt="student-web"></p><h3 id="８、定制基本的CRUD功能"><a href="#８、定制基本的CRUD功能" class="headerlink" title="８、定制基本的CRUD功能"></a>８、定制基本的CRUD功能</h3><p>修改學生的詳細頁面：</p><pre><code class="hljs php+HTML">@model ContosoUniversity.Models.Student@&#123;    ViewBag.Title &#x3D; &quot;Details&quot;;&#125;&lt;h2&gt;Details&lt;&#x2F;h2&gt;&lt;div&gt;    &lt;h4&gt;Student&lt;&#x2F;h4&gt;    &lt;hr &#x2F;&gt;    &lt;dl class&#x3D;&quot;dl-horizontal&quot;&gt;        &lt;dt&gt;            @Html.DisplayNameFor(model &#x3D;&gt; model.LastName)        &lt;&#x2F;dt&gt;        &lt;dd&gt;            @Html.DisplayFor(model &#x3D;&gt; model.LastName)        &lt;&#x2F;dd&gt;        &lt;dt&gt;            @Html.DisplayNameFor(model &#x3D;&gt; model.FirstMidName)        &lt;&#x2F;dt&gt;        &lt;dd&gt;            @Html.DisplayFor(model &#x3D;&gt; model.FirstMidName)        &lt;&#x2F;dd&gt;        &lt;dt&gt;            @Html.DisplayNameFor(model &#x3D;&gt; model.EnrollmentDate)        &lt;&#x2F;dt&gt;        &lt;dd&gt;            @Html.DisplayFor(model &#x3D;&gt; model.EnrollmentDate)        &lt;&#x2F;dd&gt;        &lt;dt&gt;            @Html.DisplayNameFor(model &#x3D;&gt; model.Enrollments)        &lt;&#x2F;dt&gt;        &lt;dd&gt;            &lt;table class&#x3D;&quot;table&quot;&gt;                &lt;tr&gt;                    &lt;th&gt;Course Title&lt;&#x2F;th&gt;                    &lt;th&gt;Grade&lt;&#x2F;th&gt;                &lt;&#x2F;tr&gt;                @foreach (var item in Model.Enrollments)                &#123;                    &lt;tr&gt;                        &lt;td&gt;                            @Html.DisplayFor(modelItem &#x3D;&gt; item.Course.Title)                        &lt;&#x2F;td&gt;                        &lt;td&gt;                            @Html.DisplayFor(modelItem &#x3D;&gt; item.Grade)                        &lt;&#x2F;td&gt;                    &lt;&#x2F;tr&gt;                &#125;            &lt;&#x2F;table&gt;        &lt;&#x2F;dd&gt;    &lt;&#x2F;dl&gt;&lt;&#x2F;div&gt;&lt;p&gt;    @Html.ActionLink(&quot;Edit&quot;, &quot;Edit&quot;, new &#123; id &#x3D; Model.ID &#125;) |    @Html.ActionLink(&quot;Back to List&quot;, &quot;Index&quot;)&lt;&#x2F;p&gt;</code></pre><p>通過嬾加載的方式訪問了Student中的Enrollments信息。</p><p><img src="/2020/06/04/net-mvc-webapp/12.png" alt="enrollments-details"></p><p>修改StudentController中的Create()方法</p><pre><code class="hljs csharp"><span class="hljs-comment">// POST: Student/Create</span>      <span class="hljs-comment">// 過多ポスティング攻撃を防止するには、バインド先とする特定のプロパティを有効にしてください。</span>      <span class="hljs-comment">// 詳細については、https://go.microsoft.com/fwlink/?LinkId=317598 を参照してください。</span>      [<span class="hljs-meta">HttpPost</span>]      [<span class="hljs-meta">ValidateAntiForgeryToken</span>]      <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">Create</span>(<span class="hljs-params">[Bind(Include = <span class="hljs-string">&quot;LastName,FirstMidName,EnrollmentDate&quot;</span></span>)] Student student)</span><span class="hljs-function"></span>      &#123;          <span class="hljs-keyword">try</span>          &#123;              <span class="hljs-keyword">if</span> (ModelState.IsValid)              &#123;                  db.Students.Add(student);                  db.SaveChanges();                  <span class="hljs-keyword">return</span> RedirectToAction(<span class="hljs-string">&quot;Index&quot;</span>);              &#125;          &#125;          catch (DataException <span class="hljs-comment">/* e */</span>)          &#123;              ModelState.AddModelError(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;Unable to save changes. Try again, and if the problem persists see your system administrator.&quot;</span>);          &#125;          <span class="hljs-keyword">return</span> View(student);      &#125;</code></pre><p>去掉Bind-Include中的ID，加了Try-catch捕捉DataException</p><p>修改編輯方法，防止黑客overposting。</p><pre><code class="hljs csharp"><span class="hljs-comment">// GET: Student/Edit/5</span>      <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">Edit</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>? id</span>)</span><span class="hljs-function"></span>      &#123;          <span class="hljs-keyword">if</span> (id == <span class="hljs-literal">null</span>)          &#123;              <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HttpStatusCodeResult(HttpStatusCode.BadRequest);          &#125;          Student student = db.Students.Find(id);          <span class="hljs-keyword">if</span> (student == <span class="hljs-literal">null</span>)          &#123;              <span class="hljs-keyword">return</span> HttpNotFound();          &#125;          <span class="hljs-keyword">return</span> View(student);      &#125;[<span class="hljs-meta">HttpPost, ActionName(<span class="hljs-meta-string">&quot;Edit&quot;</span>)</span>]      [<span class="hljs-meta">ValidateAntiForgeryToken</span>]      <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">EditPost</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>? id</span>)</span><span class="hljs-function"></span>      &#123;          <span class="hljs-keyword">if</span> (id == <span class="hljs-literal">null</span>)          &#123;              <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HttpStatusCodeResult(HttpStatusCode.BadRequest);          &#125;          <span class="hljs-keyword">var</span> studentToUpdate = db.Students.Find(id);          <span class="hljs-comment">// whitelisted in the TryUpdateModel parameters</span>          <span class="hljs-keyword">if</span> (TryUpdateModel(studentToUpdate, <span class="hljs-string">&quot;&quot;</span>,                  <span class="hljs-keyword">new</span> <span class="hljs-built_in">string</span>[] &#123; <span class="hljs-string">&quot;LastName&quot;</span>, <span class="hljs-string">&quot;FirstMidName&quot;</span>, <span class="hljs-string">&quot;EnrollmentDate&quot;</span> &#125;))          &#123;              <span class="hljs-keyword">try</span>              &#123;                  db.SaveChanges();                  <span class="hljs-keyword">return</span> RedirectToAction(<span class="hljs-string">&quot;Index&quot;</span>);              &#125;              catch(DataException <span class="hljs-comment">/* e */</span>)              &#123;                  ModelState.AddModelError(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;Unable to save changes. Try again, and if the problem persists, see your system administrator.&quot;</span>);              &#125;          &#125;          <span class="hljs-keyword">return</span> View(studentToUpdate);      &#125;</code></pre><p>ActionName(“Edit”)：指定編輯方法名（是Edit而不是EditPost）<br>TryUpdateModel：設置要更新操作的Bean屬性白名單（可接受數據）或者黑名單（不可接受數據）</p><p>修改Delete方法：</p><pre><code class="hljs csharp"><span class="hljs-comment">// GET: Student/Delete/5</span>      <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">Delete</span>(<span class="hljs-params"><span class="hljs-built_in">int</span>? id, <span class="hljs-built_in">bool</span>? saveChangesError=<span class="hljs-literal">false</span></span>)</span><span class="hljs-function"></span>      &#123;          <span class="hljs-keyword">if</span> (id == <span class="hljs-literal">null</span>)          &#123;              <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HttpStatusCodeResult(HttpStatusCode.BadRequest);          &#125;          <span class="hljs-comment">// エラーメッセージを表示</span>          <span class="hljs-keyword">if</span> (saveChangesError.GetValueOrDefault())          &#123;              ViewBag.ErrorMessage = <span class="hljs-string">&quot;Delete failed. Try again, and if the problem persists see your system administrator.&quot;</span>;          &#125;          Student student = db.Students.Find(id);          <span class="hljs-keyword">if</span> (student == <span class="hljs-literal">null</span>)          &#123;              <span class="hljs-keyword">return</span> HttpNotFound();          &#125;          <span class="hljs-keyword">return</span> View(student);      &#125;      <span class="hljs-comment">// POST: Student/Delete/5</span>      [<span class="hljs-meta">HttpPost, ActionName(<span class="hljs-meta-string">&quot;Delete&quot;</span>)</span>]      [<span class="hljs-meta">ValidateAntiForgeryToken</span>]      <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">DeleteConfirmed</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> id</span>)</span><span class="hljs-function"></span>      &#123;          <span class="hljs-keyword">try</span>          &#123;              <span class="hljs-comment">// 正常の場合：検索　ー＞　削除</span>              <span class="hljs-comment">//Student student = db.Students.Find(id);</span>              <span class="hljs-comment">//db.Students.Remove(student);</span>              <span class="hljs-comment">// Improving performance in a high-volume application is a priority</span>              Student studentToDelete = <span class="hljs-keyword">new</span> Student &#123; ID = id &#125;;              db.Entry(studentToDelete).State = EntityState.Deleted;              db.SaveChanges();          &#125;          catch(Exception <span class="hljs-comment">/* e */</span>)          &#123;              <span class="hljs-comment">// Log the error message.</span>              <span class="hljs-keyword">return</span> RedirectToAction(<span class="hljs-string">&quot;Delete&quot;</span>, <span class="hljs-keyword">new</span> &#123; id = id, saveChangesError = <span class="hljs-literal">true</span> &#125;);          &#125;          <span class="hljs-keyword">return</span> RedirectToAction(<span class="hljs-string">&quot;Index&quot;</span>);      &#125;</code></pre><p>Delete.cshtml：</p><pre><code class="hljs php+HTML">@model ContosoUniversity.Models.Student@&#123;    ViewBag.Title &#x3D; &quot;Delete&quot;;&#125;&lt;h2&gt;Delete&lt;&#x2F;h2&gt;@*メッセージ表示*@&lt;p class&#x3D;&quot;error&quot;&gt;@ViewBag.ErrorMessage&lt;&#x2F;p&gt;&lt;h3&gt;Are you sure you want to delete this?&lt;&#x2F;h3&gt;&lt;div&gt;    &lt;h4&gt;Student&lt;&#x2F;h4&gt;    &lt;hr &#x2F;&gt;    &lt;dl class&#x3D;&quot;dl-horizontal&quot;&gt;        &lt;dt&gt;            @Html.DisplayNameFor(model &#x3D;&gt; model.LastName)        &lt;&#x2F;dt&gt;        &lt;dd&gt;            @Html.DisplayFor(model &#x3D;&gt; model.LastName)        &lt;&#x2F;dd&gt;        &lt;dt&gt;            @Html.DisplayNameFor(model &#x3D;&gt; model.FirstMidName)        &lt;&#x2F;dt&gt;        &lt;dd&gt;            @Html.DisplayFor(model &#x3D;&gt; model.FirstMidName)        &lt;&#x2F;dd&gt;        &lt;dt&gt;            @Html.DisplayNameFor(model &#x3D;&gt; model.EnrollmentDate)        &lt;&#x2F;dt&gt;        &lt;dd&gt;            @Html.DisplayFor(model &#x3D;&gt; model.EnrollmentDate)        &lt;&#x2F;dd&gt;    &lt;&#x2F;dl&gt;    @using (Html.BeginForm()) &#123;        @Html.AntiForgeryToken()        &lt;div class&#x3D;&quot;form-actions no-color&quot;&gt;            &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Delete&quot; class&#x3D;&quot;btn btn-default&quot; &#x2F;&gt; |            @Html.ActionLink(&quot;Back to List&quot;, &quot;Index&quot;)        &lt;&#x2F;div&gt;    &#125;&lt;&#x2F;div&gt;</code></pre><h3 id="９、增加排序、過濾和分頁"><a href="#９、增加排序、過濾和分頁" class="headerlink" title="９、增加排序、過濾和分頁"></a>９、增加排序、過濾和分頁</h3><p>排序：修改列表Index（）方法，增加排序字段sortOrder</p><pre><code class="hljs csharp"><span class="hljs-comment">// GET: Student</span>     <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">Index</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> sortOrder</span>)</span><span class="hljs-function"></span>     &#123;         <span class="hljs-comment">// Sort function added</span>         ViewBag.NameSortParm = String.IsNullOrEmpty(sortOrder) ? <span class="hljs-string">&quot;name_desc&quot;</span> : <span class="hljs-string">&quot;&quot;</span>;         ViewBag.DateSortParm = sortOrder == <span class="hljs-string">&quot;Date&quot;</span> ? <span class="hljs-string">&quot;date_desc&quot;</span> : <span class="hljs-string">&quot;Date&quot;</span>;         <span class="hljs-keyword">var</span> students = <span class="hljs-keyword">from</span> s <span class="hljs-keyword">in</span> db.Students                        <span class="hljs-keyword">select</span> s;         <span class="hljs-keyword">switch</span> (sortOrder)         &#123;             <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;name_desc&quot;</span>:                 students = students.OrderByDescending(s =&gt; s.LastName);                 <span class="hljs-keyword">break</span>;             <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Date&quot;</span>:                 students = students.OrderBy(s =&gt; s.EnrollmentDate);                 <span class="hljs-keyword">break</span>;             <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;date_desc&quot;</span>:                 students = students.OrderByDescending(s =&gt; s.EnrollmentDate);                 <span class="hljs-keyword">break</span>;             <span class="hljs-literal">default</span>:                 students = students.OrderBy(s =&gt; s.LastName);                 <span class="hljs-keyword">break</span>;         &#125;         <span class="hljs-comment">// ToList()を実行すると、SQLを調べて、データを取り</span>         <span class="hljs-keyword">return</span> View(students.ToList());     &#125;</code></pre><p>Index.cshtml：</p><pre><code class="hljs html">@model IEnumerable<span class="hljs-tag">&lt;<span class="hljs-name">ContosoUniversity.Models.Student</span>&gt;</span>@&#123;    ViewBag.Title = &quot;Index&quot;;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Index<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>    @Html.ActionLink(&quot;Create New&quot;, &quot;Create&quot;)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>            @*@Html.DisplayNameFor(model =&gt; model.LastName)*@            @Html.ActionLink(&quot;Last Name&quot;, &quot;Index&quot;, new &#123; sortOrder = ViewBag.NameSortParm &#125;)        <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>            @Html.DisplayNameFor(model =&gt; model.FirstMidName)        <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>            @*@Html.DisplayNameFor(model =&gt; model.EnrollmentDate)*@            @Html.ActionLink(&quot;Enrollment Date&quot;, &quot;Index&quot;, new &#123; sortOrder = ViewBag.DateSortParm &#125;)        <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>@foreach (var item in Model) &#123;    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            @Html.DisplayFor(modelItem =&gt; item.LastName)        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            @Html.DisplayFor(modelItem =&gt; item.FirstMidName)        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            @Html.DisplayFor(modelItem =&gt; item.EnrollmentDate)        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            @Html.ActionLink(&quot;Edit&quot;, &quot;Edit&quot;, new &#123; id=item.ID &#125;) |            @Html.ActionLink(&quot;Details&quot;, &quot;Details&quot;, new &#123; id=item.ID &#125;) |            @Html.ActionLink(&quot;Delete&quot;, &quot;Delete&quot;, new &#123; id=item.ID &#125;)        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><p>過濾（檢索）功能：<br>修改修改列表Index（）方法，增加檢索字段searchString</p><pre><code class="hljs csharp"><span class="hljs-comment">// GET: Student</span>      <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">Index</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> sortOrder, <span class="hljs-built_in">string</span> searchString</span>)</span><span class="hljs-function"></span>      &#123;          <span class="hljs-comment">// Sort function added</span>          ViewBag.NameSortParm = String.IsNullOrEmpty(sortOrder) ? <span class="hljs-string">&quot;name_desc&quot;</span> : <span class="hljs-string">&quot;&quot;</span>;          ViewBag.DateSortParm = sortOrder == <span class="hljs-string">&quot;Date&quot;</span> ? <span class="hljs-string">&quot;date_desc&quot;</span> : <span class="hljs-string">&quot;Date&quot;</span>;          <span class="hljs-keyword">var</span> students = <span class="hljs-keyword">from</span> s <span class="hljs-keyword">in</span> db.Students                         <span class="hljs-keyword">select</span> s;          <span class="hljs-comment">// 名フィールドを検索できる</span>          <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrEmpty(searchString))          &#123;              students = students.Where(s =&gt; s.LastName.Contains(searchString)                          || s.FirstMidName.Contains(searchString));          &#125;          <span class="hljs-keyword">switch</span> (sortOrder)          &#123;              <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;name_desc&quot;</span>:                  students = students.OrderByDescending(s =&gt; s.LastName);                  <span class="hljs-keyword">break</span>;              <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Date&quot;</span>:                  students = students.OrderBy(s =&gt; s.EnrollmentDate);                  <span class="hljs-keyword">break</span>;              <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;date_desc&quot;</span>:                  students = students.OrderByDescending(s =&gt; s.EnrollmentDate);                  <span class="hljs-keyword">break</span>;              <span class="hljs-literal">default</span>:                  students = students.OrderBy(s =&gt; s.LastName);                  <span class="hljs-keyword">break</span>;          &#125;          <span class="hljs-keyword">return</span> View(students.ToList());      &#125;</code></pre><p>Index.cshtml：</p><pre><code class="hljs html">@model IEnumerable<span class="hljs-tag">&lt;<span class="hljs-name">ContosoUniversity.Models.Student</span>&gt;</span>@&#123;    ViewBag.Title = &quot;Index&quot;;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Index<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>    @Html.ActionLink(&quot;Create New&quot;, &quot;Create&quot;)<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>@*検索項設定*@@using (Html.BeginForm())&#123;    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>        Find by name: @Html.TextBox(&quot;searchString&quot;)        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Search&quot;</span> /&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>&#125;<span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>            @*@Html.DisplayNameFor(model =&gt; model.LastName)*@            @Html.ActionLink(&quot;Last Name&quot;, &quot;Index&quot;, new &#123; sortOrder = ViewBag.NameSortParm &#125;)        <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>            @Html.DisplayNameFor(model =&gt; model.FirstMidName)        <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>            @*@Html.DisplayNameFor(model =&gt; model.EnrollmentDate)*@            @Html.ActionLink(&quot;Enrollment Date&quot;, &quot;Index&quot;, new &#123; sortOrder = ViewBag.DateSortParm &#125;)        <span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>@foreach (var item in Model) &#123;    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            @Html.DisplayFor(modelItem =&gt; item.LastName)        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            @Html.DisplayFor(modelItem =&gt; item.FirstMidName)        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            @Html.DisplayFor(modelItem =&gt; item.EnrollmentDate)        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>            @Html.ActionLink(&quot;Edit&quot;, &quot;Edit&quot;, new &#123; id=item.ID &#125;) |            @Html.ActionLink(&quot;Details&quot;, &quot;Details&quot;, new &#123; id=item.ID &#125;) |            @Html.ActionLink(&quot;Delete&quot;, &quot;Delete&quot;, new &#123; id=item.ID &#125;)        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><p>排序效果：</p><p><img src="/2020/06/04/net-mvc-webapp/13.png" alt="list-search"></p><p>分頁功能：</p><p>增加分頁插件：Tools menu 　ー＞　NuGet Package Manager 　ー＞　Package Manager Console<br><code>Install-Package EntityFramework</code></p><p>修改Index方法：</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> PagedList;<span class="hljs-comment">// GET: Student</span>        <span class="hljs-comment">//public ActionResult Index(string sortOrder, string currentFilter, string searchString, int? page)</span>        <span class="hljs-function"><span class="hljs-keyword">public</span> ViewResult <span class="hljs-title">Index</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> sortOrder, <span class="hljs-built_in">string</span> currentFilter, <span class="hljs-built_in">string</span> searchString, <span class="hljs-built_in">int</span>? page</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-comment">// Sort function added</span>            ViewBag.CurrentSort = sortOrder;            ViewBag.NameSortParm = String.IsNullOrEmpty(sortOrder) ? <span class="hljs-string">&quot;name_desc&quot;</span> : <span class="hljs-string">&quot;&quot;</span>;            ViewBag.DateSortParm = sortOrder == <span class="hljs-string">&quot;Date&quot;</span> ? <span class="hljs-string">&quot;date_desc&quot;</span> : <span class="hljs-string">&quot;Date&quot;</span>;            <span class="hljs-keyword">if</span> (searchString != <span class="hljs-literal">null</span>)            &#123;                page = <span class="hljs-number">1</span>;            &#125;            <span class="hljs-keyword">else</span>            &#123;                searchString = currentFilter;            &#125;            ViewBag.CurrentFilter = searchString;            <span class="hljs-keyword">var</span> students = <span class="hljs-keyword">from</span> s <span class="hljs-keyword">in</span> db.Students                           <span class="hljs-keyword">select</span> s;            <span class="hljs-comment">// 名フィールドを検索できる</span>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">string</span>.IsNullOrEmpty(searchString))            &#123;                students = students.Where(s =&gt; s.LastName.Contains(searchString)                            || s.FirstMidName.Contains(searchString));            &#125;            <span class="hljs-keyword">switch</span> (sortOrder)            &#123;                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;name_desc&quot;</span>:                    students = students.OrderByDescending(s =&gt; s.LastName);                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Date&quot;</span>:                    students = students.OrderBy(s =&gt; s.EnrollmentDate);                    <span class="hljs-keyword">break</span>;                <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;date_desc&quot;</span>:                    students = students.OrderByDescending(s =&gt; s.EnrollmentDate);                    <span class="hljs-keyword">break</span>;                <span class="hljs-literal">default</span>:                    students = students.OrderBy(s =&gt; s.LastName);                    <span class="hljs-keyword">break</span>;            &#125;            <span class="hljs-comment">// Page function add</span>            <span class="hljs-built_in">int</span> pageSize = <span class="hljs-number">3</span>;            <span class="hljs-built_in">int</span> pageNumber = (page ?? <span class="hljs-number">1</span>);            <span class="hljs-comment">//return View(students.ToList());</span>            <span class="hljs-keyword">return</span> View(students.ToPagedList(pageNumber, pageSize));        &#125;</code></pre><p>Index.cshtml：</p><pre><code class="hljs php+HTML">@*@model IEnumerable&lt;ContosoUniversity.Models.Student&gt;*@@model PagedList.IPagedList&lt;ContosoUniversity.Models.Student&gt;@using PagedList.Mvc;&lt;link href&#x3D;&quot;~&#x2F;Content&#x2F;PagedList.css&quot; rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; &#x2F;&gt;@&#123;    ViewBag.Title &#x3D; &quot;Students&quot;;&#125;&lt;h2&gt;Students&lt;&#x2F;h2&gt;&lt;p&gt;    @Html.ActionLink(&quot;Create New&quot;, &quot;Create&quot;)&lt;&#x2F;p&gt;@*検索項設定*@@using (Html.BeginForm(&quot;Index&quot;, &quot;Student&quot;, FormMethod.Get))&#123;    &lt;p&gt;        Find by name: @Html.TextBox(&quot;searchString&quot;, ViewBag.CurrentFilter as string)        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Search&quot; &#x2F;&gt;    &lt;&#x2F;p&gt;&#125;&lt;table class&#x3D;&quot;table&quot;&gt;    &lt;tr&gt;        &lt;th&gt;            @*@Html.DisplayNameFor(model &#x3D;&gt; model.LastName)*@            @Html.ActionLink(&quot;Last Name&quot;, &quot;Index&quot;, new &#123; sortOrder &#x3D; ViewBag.NameSortParm, currentFilter &#x3D; ViewBag.CurrentFilter &#125;)        &lt;&#x2F;th&gt;        &lt;th&gt;            @*@Html.DisplayNameFor(model &#x3D;&gt; model.FirstMidName)*@            First Name        &lt;&#x2F;th&gt;        &lt;th&gt;            @*@Html.DisplayNameFor(model &#x3D;&gt; model.EnrollmentDate)*@            @Html.ActionLink(&quot;Enrollment Date&quot;, &quot;Index&quot;, new &#123; sortOrder &#x3D; ViewBag.DateSortParm, currentFilter &#x3D; ViewBag.CurrentFilter &#125;)        &lt;&#x2F;th&gt;        &lt;th&gt;&lt;&#x2F;th&gt;    &lt;&#x2F;tr&gt;@foreach (var item in Model) &#123;    &lt;tr&gt;        &lt;td&gt;            @Html.DisplayFor(modelItem &#x3D;&gt; item.LastName)        &lt;&#x2F;td&gt;        &lt;td&gt;            @Html.DisplayFor(modelItem &#x3D;&gt; item.FirstMidName)        &lt;&#x2F;td&gt;        &lt;td&gt;            @Html.DisplayFor(modelItem &#x3D;&gt; item.EnrollmentDate)        &lt;&#x2F;td&gt;        &lt;td&gt;            @Html.ActionLink(&quot;Edit&quot;, &quot;Edit&quot;, new &#123; id&#x3D;item.ID &#125;) |            @Html.ActionLink(&quot;Details&quot;, &quot;Details&quot;, new &#123; id&#x3D;item.ID &#125;) |            @Html.ActionLink(&quot;Delete&quot;, &quot;Delete&quot;, new &#123; id&#x3D;item.ID &#125;)        &lt;&#x2F;td&gt;    &lt;&#x2F;tr&gt;&#125;&lt;&#x2F;table&gt;&lt;br &#x2F;&gt;Page @(Model.PageCount &lt; Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount@Html.PagedListPager(Model, page &#x3D;&gt; Url.Action(&quot;Index&quot;, new &#123; page, sortOrder &#x3D; ViewBag.CurrentSort, currentFilter &#x3D; ViewBag.CurrentFilter &#125;))</code></pre><p>@model PagedList.IPagedList&lt;ContosoUniversity.Models.Student&gt;：本頁面渲染的是PagedList對象，而不是List對象<br>@using PagedList.Mvc：提供分頁按鈕<br>@Html.TextBox(“searchString”, ViewBag.CurrentFilter as string)：提供入力框默認值<br>@Html.ActionLink(“Last Name”, “Index”, new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })：帶檢索項排序<br>Page @(Model.PageCount &lt; Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount：當前頁 of 縂頁數。如：Page 0 of 0<br>PagedListPager：定制分頁按鈕和樣式</p><p>效果如下：</p><p><img src="/2020/06/04/net-mvc-webapp/14.png" alt="page-list"></p><h3 id="１０、統計數據展示"><a href="#１０、統計數據展示" class="headerlink" title="１０、統計數據展示"></a>１０、統計數據展示</h3><p>新建統計數據展示Bean：EnrollmentDateGroup</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<span class="hljs-keyword">using</span> System.ComponentModel.DataAnnotations;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.ViewModels</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">EnrollmentDateGroup</span>    &#123;        [<span class="hljs-meta">DataType(DataType.Date)</span>]        <span class="hljs-keyword">public</span> DateTime? EnrollmentDate &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;        <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> StudentCount &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;    &#125;&#125;</code></pre><p>HomeController.cs：About()方法修改</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> ContosoUniversity.DAL;<span class="hljs-keyword">using</span> ContosoUniversity.ViewModels;<span class="hljs-keyword">using</span> System.Linq;<span class="hljs-keyword">using</span> System.Web.Mvc;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.Controllers</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">HomeController</span> : <span class="hljs-title">Controller</span>    &#123;        <span class="hljs-keyword">private</span> SchoolContext db = <span class="hljs-keyword">new</span> SchoolContext();        <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">Index</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">return</span> View();        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">About</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-comment">//ViewBag.Message = &quot;Your application description page.&quot;;</span>            IQueryable&lt;EnrollmentDateGroup&gt; data = <span class="hljs-keyword">from</span> student <span class="hljs-keyword">in</span> db.Students                                                   <span class="hljs-keyword">group</span> student <span class="hljs-keyword">by</span> student.EnrollmentDate <span class="hljs-keyword">into</span> dateGroup                                                   <span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-keyword">new</span> <span class="hljs-title">EnrollmentDateGroup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>                                                   &#123;                                                       EnrollmentDate = dateGroup.Key,                                                       StudentCount = dateGroup.Count()                                                   &#125;;            <span class="hljs-keyword">return</span> View(data.ToList());        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> ActionResult <span class="hljs-title">Contact</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>        &#123;            ViewBag.Message = <span class="hljs-string">&quot;Your contact page.&quot;</span>;            <span class="hljs-keyword">return</span> View();        &#125;        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Dispose</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> disposing</span>)</span><span class="hljs-function"></span>        &#123;            db.Dispose();            <span class="hljs-keyword">base</span>.Dispose(disposing);        &#125;    &#125;&#125;</code></pre><p>畫面展示（About.cshtml）</p><pre><code class="hljs php+HTML">@model IEnumerable&lt;ContosoUniversity.ViewModels.EnrollmentDateGroup&gt;@&#123;    ViewBag.Title &#x3D; &quot;Student Body Statistics&quot;;&#125;&lt;h2&gt;Student Body Statistics&lt;&#x2F;h2&gt;&lt;table&gt;    &lt;tr&gt;        &lt;th&gt;            Enrollment Date        &lt;&#x2F;th&gt;        &lt;th&gt;            Students        &lt;&#x2F;th&gt;    &lt;&#x2F;tr&gt;    @foreach (var item in Model)    &#123;        &lt;tr&gt;            &lt;td&gt;                @Html.DisplayFor(modelItem &#x3D;&gt; item.EnrollmentDate)            &lt;&#x2F;td&gt;            &lt;td&gt;                @item.StudentCount            &lt;&#x2F;td&gt;        &lt;&#x2F;tr&gt;    &#125;&lt;&#x2F;table&gt;</code></pre><p>畫面展示：</p><p><img src="/2020/06/04/net-mvc-webapp/15.png" alt="statistics-data"></p><h3 id="１１、DB服務連接策略"><a href="#１１、DB服務連接策略" class="headerlink" title="１１、DB服務連接策略"></a>１１、DB服務連接策略</h3><p>儅DB在服務器上或者在微軟的云上時，DB操作時可能出錯，可以設置DB連接策略</p><p>在DAL文件夾中創建SchoolConfiguration.cs</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Data.Entity;<span class="hljs-keyword">using</span> System.Data.Entity.SqlServer;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.DAL</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SchoolConfiguration</span> : <span class="hljs-title">DbConfiguration</span>    &#123;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SchoolConfiguration</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-comment">// サービス実行策略</span>            SetExecutionStrategy(<span class="hljs-string">&quot;System.Data.SqlClient&quot;</span>, () =&gt; <span class="hljs-keyword">new</span> SqlAzureExecutionStrategy());        &#125;    &#125;&#125;</code></pre><p>創建日志系統，新建Logging文件夾，接口：ILogger.cs</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.Logging</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">ILogger</span>    &#123;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Information</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> message</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Information</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Information</span>(<span class="hljs-params">Exception exception, <span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Warning</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> message</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Warning</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Warning</span>(<span class="hljs-params">Exception exception, <span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Error</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> message</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Error</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Error</span>(<span class="hljs-params">Exception exception, <span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TraceApi</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> componentName, <span class="hljs-built_in">string</span> method, TimeSpan timespan</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TraceApi</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> componentName, <span class="hljs-built_in">string</span> method, TimeSpan timespan, <span class="hljs-built_in">string</span> properties</span>)</span>;        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TraceApi</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> componentName, <span class="hljs-built_in">string</span> method, TimeSpan timespan, <span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span>;    &#125;&#125;</code></pre><p>日志接口實現類：Logger.cs</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System;<span class="hljs-keyword">using</span> System.Diagnostics;<span class="hljs-keyword">using</span> System.Text;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.Logging</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span> : <span class="hljs-title">ILogger</span>    &#123;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Error</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> message</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceError(message);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Error</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceError(fmt, vars);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Error</span>(<span class="hljs-params">Exception exception, <span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceError(FormatExceptionMessage(exception, fmt, vars));        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Information</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> message</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceInformation(message);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Information</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceInformation(fmt, vars);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Information</span>(<span class="hljs-params">Exception exception, <span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceInformation(FormatExceptionMessage(exception, fmt, vars));        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TraceApi</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> componentName, <span class="hljs-built_in">string</span> method, TimeSpan timespan</span>)</span><span class="hljs-function"></span>        &#123;            TraceApi(componentName, method, timespan, <span class="hljs-string">&quot;&quot;</span>);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TraceApi</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> componentName, <span class="hljs-built_in">string</span> method, TimeSpan timespan, <span class="hljs-built_in">string</span> properties</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-built_in">string</span> message = String.Concat(<span class="hljs-string">&quot;Component: &quot;</span>, componentName, <span class="hljs-string">&quot;, Method: &quot;</span>, method, <span class="hljs-string">&quot;; Timespan: &quot;</span>, timespan.ToString(), <span class="hljs-string">&quot;; Properties: &quot;</span>, properties);            Trace.TraceInformation(message);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">TraceApi</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> componentName, <span class="hljs-built_in">string</span> method, TimeSpan timespan, <span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span><span class="hljs-function"></span>        &#123;            TraceApi(componentName, method, timespan, <span class="hljs-built_in">string</span>.Format(fmt, vars));        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Warning</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> message</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceWarning(message);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Warning</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceWarning(fmt, vars);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Warning</span>(<span class="hljs-params">Exception exception, <span class="hljs-built_in">string</span> fmt, <span class="hljs-keyword">params</span> <span class="hljs-built_in">object</span>[] vars</span>)</span><span class="hljs-function"></span>        &#123;            Trace.TraceWarning(FormatExceptionMessage(exception, fmt, vars));        &#125;        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> <span class="hljs-title">FormatExceptionMessage</span>(<span class="hljs-params">Exception exception, <span class="hljs-built_in">string</span> fmt, <span class="hljs-built_in">object</span>[] vars</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">var</span> sb = <span class="hljs-keyword">new</span> StringBuilder();            sb.Append(<span class="hljs-built_in">string</span>.Format(fmt, vars));            sb.Append(<span class="hljs-string">&quot; Exception: &quot;</span>);            sb.Append(exception.ToString());            <span class="hljs-keyword">return</span> sb.ToString();        &#125;    &#125;&#125;</code></pre><p>DB操作日志打印攔截器：SchoolInterceptorLogging.cs</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> ContosoUniversity.Logging;<span class="hljs-keyword">using</span> System.Data.Common;<span class="hljs-keyword">using</span> System.Data.Entity.Infrastructure.Interception;<span class="hljs-keyword">using</span> System.Diagnostics;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.DAL</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SchoolInterceptorLogging</span> : <span class="hljs-title">DbCommandInterceptor</span>    &#123;        <span class="hljs-keyword">private</span> ILogger _logger = <span class="hljs-keyword">new</span> Logger();        <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> Stopwatch _stopwatch = <span class="hljs-keyword">new</span> Stopwatch();        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ScalarExecuting</span>(<span class="hljs-params">DbCommand command, DbCommandInterceptionContext&lt;<span class="hljs-built_in">object</span>&gt; interceptionContext</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">base</span>.ScalarExecuting(command, interceptionContext);            _stopwatch.Restart();        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ScalarExecuted</span>(<span class="hljs-params">DbCommand command, DbCommandInterceptionContext&lt;<span class="hljs-built_in">object</span>&gt; interceptionContext</span>)</span><span class="hljs-function"></span>        &#123;            _stopwatch.Stop();            <span class="hljs-keyword">if</span> (interceptionContext.Exception != <span class="hljs-literal">null</span>)            &#123;                _logger.Error(interceptionContext.Exception, <span class="hljs-string">&quot;Error executing command: &#123;0&#125;&quot;</span>, command.CommandText);            &#125;            <span class="hljs-keyword">else</span>            &#123;                _logger.TraceApi(<span class="hljs-string">&quot;SQL Database&quot;</span>, <span class="hljs-string">&quot;SchoolInterceptor.ScalarExecuted&quot;</span>, _stopwatch.Elapsed, <span class="hljs-string">&quot;Command: &#123;0&#125;: &quot;</span>, command.CommandText);            &#125;            <span class="hljs-keyword">base</span>.ScalarExecuted(command, interceptionContext);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">NonQueryExecuting</span>(<span class="hljs-params">DbCommand command, DbCommandInterceptionContext&lt;<span class="hljs-built_in">int</span>&gt; interceptionContext</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">base</span>.NonQueryExecuting(command, interceptionContext);            _stopwatch.Restart();        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">NonQueryExecuted</span>(<span class="hljs-params">DbCommand command, DbCommandInterceptionContext&lt;<span class="hljs-built_in">int</span>&gt; interceptionContext</span>)</span><span class="hljs-function"></span>        &#123;            _stopwatch.Stop();            <span class="hljs-keyword">if</span> (interceptionContext.Exception != <span class="hljs-literal">null</span>)            &#123;                _logger.Error(interceptionContext.Exception, <span class="hljs-string">&quot;Error executing command: &#123;0&#125;&quot;</span>, command.CommandText);            &#125;            <span class="hljs-keyword">else</span>            &#123;                _logger.TraceApi(<span class="hljs-string">&quot;SQL Database&quot;</span>, <span class="hljs-string">&quot;SchoolInterceptor.NonQueryExecuted&quot;</span>, _stopwatch.Elapsed, <span class="hljs-string">&quot;Command: &#123;0&#125;: &quot;</span>, command.CommandText);            &#125;            <span class="hljs-keyword">base</span>.NonQueryExecuted(command, interceptionContext);        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReaderExecuting</span>(<span class="hljs-params">DbCommand command, DbCommandInterceptionContext&lt;DbDataReader&gt; interceptionContext</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">base</span>.ReaderExecuting(command, interceptionContext);            _stopwatch.Restart();        &#125;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReaderExecuted</span>(<span class="hljs-params">DbCommand command, DbCommandInterceptionContext&lt;DbDataReader&gt; interceptionContext</span>)</span><span class="hljs-function"></span>        &#123;            _stopwatch.Stop();            <span class="hljs-keyword">if</span> (interceptionContext.Exception != <span class="hljs-literal">null</span>)            &#123;                _logger.Error(interceptionContext.Exception, <span class="hljs-string">&quot;Error executing command: &#123;0&#125;&quot;</span>, command.CommandText);            &#125;            <span class="hljs-keyword">else</span>            &#123;                _logger.TraceApi(<span class="hljs-string">&quot;SQL Database&quot;</span>, <span class="hljs-string">&quot;SchoolInterceptor.ReaderExecuted&quot;</span>, _stopwatch.Elapsed, <span class="hljs-string">&quot;Command: &#123;0&#125;: &quot;</span>, command.CommandText);            &#125;            <span class="hljs-keyword">base</span>.ReaderExecuted(command, interceptionContext);        &#125;    &#125;&#125;</code></pre><p>模擬DB操作發生異常攔截器：SchoolInterceptorTransientErrors.cs</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> ContosoUniversity.Logging;<span class="hljs-keyword">using</span> System;<span class="hljs-keyword">using</span> System.Data.Common;<span class="hljs-keyword">using</span> System.Data.Entity.Infrastructure.Interception;<span class="hljs-keyword">using</span> System.Data.SqlClient;<span class="hljs-keyword">using</span> System.Linq;<span class="hljs-keyword">using</span> System.Reflection;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity.DAL</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SchoolInterceptorTransientErrors</span> : <span class="hljs-title">DbCommandInterceptor</span>    &#123;        <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> _counter = <span class="hljs-number">0</span>;        <span class="hljs-keyword">private</span> ILogger _logger = <span class="hljs-keyword">new</span> Logger();        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">override</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ReaderExecuting</span>(<span class="hljs-params">DbCommand command, DbCommandInterceptionContext&lt;DbDataReader&gt; interceptionContext</span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-built_in">bool</span> throwTransientErrors = <span class="hljs-literal">false</span>;            <span class="hljs-comment">// 仮想SQLの検索項目は”Throw”を含める、異常と発生</span>            <span class="hljs-keyword">if</span> (command.Parameters.Count &gt; <span class="hljs-number">0</span> &amp;&amp; command.Parameters[<span class="hljs-number">0</span>].Value.ToString() == <span class="hljs-string">&quot;%Throw%&quot;</span>)            &#123;                throwTransientErrors = <span class="hljs-literal">true</span>;                command.Parameters[<span class="hljs-number">0</span>].Value = <span class="hljs-string">&quot;%an%&quot;</span>;                command.Parameters[<span class="hljs-number">1</span>].Value = <span class="hljs-string">&quot;%an%&quot;</span>;            &#125;            <span class="hljs-comment">// 仮想異常エラーが発生</span>            <span class="hljs-keyword">if</span> (throwTransientErrors &amp;&amp; _counter &lt; <span class="hljs-number">4</span>)            &#123;                _logger.Information(<span class="hljs-string">&quot;Returning transient error for command: &#123;0&#125;&quot;</span>, command.CommandText);                _counter++;                interceptionContext.Exception = CreateDummySqlException();            &#125;            <span class="hljs-keyword">base</span>.ReaderExecuting(command, interceptionContext);        &#125;        <span class="hljs-function"><span class="hljs-keyword">private</span> SqlException <span class="hljs-title">CreateDummySqlException</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>        &#123;            <span class="hljs-keyword">var</span> sqlErrorNumber = <span class="hljs-number">20</span>;            <span class="hljs-keyword">var</span> sqlErrorCtor = <span class="hljs-keyword">typeof</span>(SqlError).GetConstructors(BindingFlags.Instance | BindingFlags.NonPublic).Where(c =&gt; c.GetParameters().Count() == <span class="hljs-number">7</span>).Single();            <span class="hljs-keyword">var</span> sqlError = sqlErrorCtor.Invoke(<span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[] &#123; sqlErrorNumber, (<span class="hljs-built_in">byte</span>)<span class="hljs-number">0</span>, (<span class="hljs-built_in">byte</span>)<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">1</span> &#125;);            <span class="hljs-keyword">var</span> errorCollection = Activator.CreateInstance(<span class="hljs-keyword">typeof</span>(SqlErrorCollection), <span class="hljs-literal">true</span>);            <span class="hljs-keyword">var</span> addMethod = <span class="hljs-keyword">typeof</span>(SqlErrorCollection).GetMethod(<span class="hljs-string">&quot;Add&quot;</span>, BindingFlags.Instance | BindingFlags.NonPublic);            addMethod.Invoke(errorCollection, <span class="hljs-keyword">new</span>[] &#123; sqlError &#125;);            <span class="hljs-keyword">var</span> sqlExceptionCtor = <span class="hljs-keyword">typeof</span>(SqlException).GetConstructors(BindingFlags.Instance | BindingFlags.NonPublic).Where(c =&gt; c.GetParameters().Count() == <span class="hljs-number">4</span>).Single();            <span class="hljs-keyword">var</span> sqlException = (SqlException)sqlExceptionCtor.Invoke(<span class="hljs-keyword">new</span> <span class="hljs-built_in">object</span>[] &#123; <span class="hljs-string">&quot;Dummy&quot;</span>, errorCollection, <span class="hljs-literal">null</span>, Guid.NewGuid() &#125;);            <span class="hljs-keyword">throw</span> sqlException;        &#125;    &#125;&#125;</code></pre><p>文件目錄結構：</p><p><img src="/2020/06/04/net-mvc-webapp/16.png" alt="db-error-structure"></p><p>添加攔截器，Application_Start.cs</p><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> ContosoUniversity.DAL;<span class="hljs-keyword">using</span> System.Data.Entity.Infrastructure.Interception;<span class="hljs-keyword">using</span> System.Web.Mvc;<span class="hljs-keyword">using</span> System.Web.Optimization;<span class="hljs-keyword">using</span> System.Web.Routing;<span class="hljs-keyword">namespace</span> <span class="hljs-title">ContosoUniversity</span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MvcApplication</span> : <span class="hljs-title">System.Web.HttpApplication</span>    &#123;        <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Application_Start</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>        &#123;            AreaRegistration.RegisterAllAreas();            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);            RouteConfig.RegisterRoutes(RouteTable.Routes);            BundleConfig.RegisterBundles(BundleTable.Bundles);            <span class="hljs-comment">// 自分のInterceptorを追加</span>            DbInterception.Add(<span class="hljs-keyword">new</span> SchoolInterceptorTransientErrors());            DbInterception.Add(<span class="hljs-keyword">new</span> SchoolInterceptorLogging());        &#125;    &#125;&#125;</code></pre><p>測試：</p><p>在學生列表檢索框中輸入：Throw，檢索會報錯：CreateDummySqlException中的Dummy錯誤。程序會自動連接4次：SchoolConfiguration中的連接策略和SchoolInterceptorTransientErrors中的重新連接次數（throwTransientErrors標志位）決定的。最後一次會成功。顯示出檢索結果。</p><p>ASP.Net.pdf（page——5332）</p><p><strong><u>Ps: 本文仅为学习记录，仅为学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> webapp </tag>
            
            <tag> mvc </tag>
            
            <tag> net </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Python读写CSV至Mysql</title>
      <link href="2020/06/02/python-mysql-csv/"/>
      <url>2020/06/02/python-mysql-csv/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="利用Python读写CSV至Mysql"><a href="#利用Python读写CSV至Mysql" class="headerlink" title="利用Python读写CSV至Mysql"></a>利用Python读写CSV至Mysql</h2><h3 id="构建Mysql数据表"><a href="#构建Mysql数据表" class="headerlink" title="构建Mysql数据表"></a>构建Mysql数据表</h3><p>前提：本机安装好mysql，运行以下脚本</p><pre><code class="hljs mysql">-- 创建表空间CREATE DATABASE my_suppliers;SHOW DATABASES;-- 创建表CREATE TABLE IF NOT EXISTS Suppliers(Supplier_Name VARCHAR(20), Invoice_Number VARCHAR(20), Part_Number VARCHAR(20), Cost FLOAT, Purchase_Date DATE);-- 查看表结构DESCRIBE Suppliers;-- 创建用户并授权CREATE USER &#39;ffawp&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;Aa123456&#39;;GRANT ALL PRIVILEGES ON my_suppliers.* TO &#39;ffawp&#39;@&#39;localhost&#39;;FLUSH PRIVILEGES;</code></pre><p>使用PyCharm连接Mysql，如下：</p><p><img src="/2020/06/02/python-mysql-csv/1.png" alt="pycharm-mysql"></p><p>安装mysqlclient<br>‘pip install mysqlclient’<br>在PyCharm的插件库中查看，Perferences -&gt; Project -&gt; Project Interpreter</p><p><img src="/2020/06/02/python-mysql-csv/2.png" alt="project-interpreter-mysqlclient"></p><h3 id="CSV至Mysql数据表"><a href="#CSV至Mysql数据表" class="headerlink" title="CSV至Mysql数据表"></a>CSV至Mysql数据表</h3><p>CSV文件：data/supplier_data.csv</p><pre><code class="hljs python">Supplier Name,Invoice Number,Part Number,Cost,Purchase DateSupplier X,<span class="hljs-number">001</span><span class="hljs-number">-1001</span>,<span class="hljs-number">2341</span>,$<span class="hljs-number">500.00</span>,<span class="hljs-number">1</span>/<span class="hljs-number">20</span>/<span class="hljs-number">14</span>Supplier X,<span class="hljs-number">001</span><span class="hljs-number">-1001</span>,<span class="hljs-number">2341</span>,$<span class="hljs-number">500.00</span>,<span class="hljs-number">1</span>/<span class="hljs-number">20</span>/<span class="hljs-number">14</span>Supplier X,<span class="hljs-number">001</span><span class="hljs-number">-1001</span>,<span class="hljs-number">5467</span>,$<span class="hljs-number">750.00</span>,<span class="hljs-number">1</span>/<span class="hljs-number">20</span>/<span class="hljs-number">14</span>Supplier X,<span class="hljs-number">001</span><span class="hljs-number">-1001</span>,<span class="hljs-number">5467</span>,$<span class="hljs-number">750.00</span>,<span class="hljs-number">1</span>/<span class="hljs-number">20</span>/<span class="hljs-number">14</span>Supplier Y,<span class="hljs-number">50</span><span class="hljs-number">-9501</span>,<span class="hljs-number">7009</span>,$<span class="hljs-number">250.00</span>,<span class="hljs-number">1</span>/<span class="hljs-number">30</span>/<span class="hljs-number">14</span>Supplier Y,<span class="hljs-number">50</span><span class="hljs-number">-9501</span>,<span class="hljs-number">7009</span>,$<span class="hljs-number">250.00</span>,<span class="hljs-number">1</span>/<span class="hljs-number">30</span>/<span class="hljs-number">14</span>Supplier Y,<span class="hljs-number">50</span><span class="hljs-number">-9505</span>,<span class="hljs-number">6650</span>,$<span class="hljs-number">125.00</span>,<span class="hljs-number">2</span>/<span class="hljs-number">3</span>/<span class="hljs-number">14</span>Supplier Y,<span class="hljs-number">50</span><span class="hljs-number">-9505</span>,<span class="hljs-number">6650</span>,$<span class="hljs-number">125.00</span>,<span class="hljs-number">2</span>/<span class="hljs-number">3</span>/<span class="hljs-number">14</span>Supplier Z,<span class="hljs-number">920</span><span class="hljs-number">-4803</span>,<span class="hljs-number">3321</span>,$<span class="hljs-number">615.00</span>,<span class="hljs-number">2</span>/<span class="hljs-number">3</span>/<span class="hljs-number">14</span>Supplier Z,<span class="hljs-number">920</span><span class="hljs-number">-4804</span>,<span class="hljs-number">3321</span>,$<span class="hljs-number">615.00</span>,<span class="hljs-number">2</span>/<span class="hljs-number">10</span>/<span class="hljs-number">14</span>Supplier Z,<span class="hljs-number">920</span><span class="hljs-number">-4805</span>,<span class="hljs-number">3321</span>,$<span class="hljs-number">615.00</span>,<span class="hljs-number">2</span>/<span class="hljs-number">17</span>/<span class="hljs-number">14</span>Supplier Z,<span class="hljs-number">920</span><span class="hljs-number">-4806</span>,<span class="hljs-number">3321</span>,$<span class="hljs-number">615.00</span>,<span class="hljs-number">2</span>/<span class="hljs-number">24</span>/<span class="hljs-number">14</span></code></pre><p>处理程序：<code>4_db_mysql_load_from_csv.py</code></p><pre><code class="hljs python"><span class="hljs-comment"># Date:2020/6/1</span><span class="hljs-comment"># Author:Lingchen</span><span class="hljs-comment"># Mark: 将数据从CSV文件中插入到数据表Suppliers</span><span class="hljs-comment">#       python 4_db_mysql_load_from_csv.py data/supplier_data.csv</span><span class="hljs-keyword">import</span> csv<span class="hljs-keyword">import</span> MySQLdb<span class="hljs-keyword">import</span> sys<span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime, date<span class="hljs-comment"># CSV输入文件的路径和文件名</span>input_file = sys.argv[<span class="hljs-number">1</span>]<span class="hljs-comment"># 连接Mysql数据库</span>con = MySQLdb.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">3306</span>, db=<span class="hljs-string">&#x27;my_suppliers&#x27;</span>, user=<span class="hljs-string">&#x27;ffawp&#x27;</span>, passwd=<span class="hljs-string">&#x27;Aa123456&#x27;</span>)c = con.cursor()<span class="hljs-comment"># 向Suppliers表中插入数据</span>file_reader = csv.reader(<span class="hljs-built_in">open</span>(input_file, <span class="hljs-string">&#x27;r&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>))header = <span class="hljs-built_in">next</span>(file_reader)<span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> file_reader:    data = []    <span class="hljs-keyword">for</span> column_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(header)):        <span class="hljs-keyword">if</span> column_index &lt; <span class="hljs-number">4</span>:            data.append(<span class="hljs-built_in">str</span>(row[column_index]).lstrip(<span class="hljs-string">&#x27;$&#x27;</span>).replace(<span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).strip())        <span class="hljs-keyword">else</span>:            <span class="hljs-comment"># %Y：year的格式是四位数，如：2012，%y的格式是两位数，如12</span>            <span class="hljs-comment"># 将csv中的日期字符串转换成日期</span>            a_date = datetime.date(datetime.strptime(<span class="hljs-built_in">str</span>(row[column_index]), <span class="hljs-string">&#x27;%m/%d/%y&#x27;</span>))            <span class="hljs-comment"># print(&#x27;a_date: &#x27;, a_date)</span>            <span class="hljs-comment"># 将日期转换成特定格式的字符串</span>            a_date = a_date.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)            data.append(a_date)        print(data)    <span class="hljs-comment"># %s是要插入的实际值的占位符</span>    c.execute(<span class="hljs-string">&quot;&quot;&quot;INSERT INTO Suppliers VALUES (%s, %s, %s, %s, %s);&quot;&quot;&quot;</span>, data)con.commit()print(<span class="hljs-string">&#x27;查询Suppliers表：&#x27;</span>)c.execute(<span class="hljs-string">&quot;SELECT * FROM Suppliers&quot;</span>)rows = c.fetchall()<span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows:    row_list_output = []    <span class="hljs-keyword">for</span> column_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(row)):        row_list_output.append(<span class="hljs-built_in">str</span>(row[column_index]))    print(row_list_output)</code></pre><p>试运行时，可以会出错：</p><pre><code class="hljs bash">如果报Library not loaded: libcrypto.1.0.0.dylibLibrary not loaded: libssl.1.0.0.dylib, Library not loaded: @rpath/libmysqlclient.21.dylib等在命令窗口运行以下软链接：具体路径需要根据本机调整ln -s /usr/<span class="hljs-built_in">local</span>/mysql/lib/libmysqlclient.21.dylib /usr/<span class="hljs-built_in">local</span>/lib/libmysqlclient.21.dylibln -s /usr/<span class="hljs-built_in">local</span>/mysql/lib/libssl.1.0.0.dylib /usr/<span class="hljs-built_in">local</span>/lib/libssl.1.0.0.dylibln -s /usr/<span class="hljs-built_in">local</span>/mysql/lib/libcrypto.1.0.0.dylib /usr/<span class="hljs-built_in">local</span>/lib/libcrypto.1.0.0.dylib</code></pre><p>运行<code>python 4_db_mysql_load_from_csv.py data/supplier_data.csv</code>，会将CSV文件中的文本写入到数据表Suppliers中</p><p><img src="/2020/06/02/python-mysql-csv/3.png" alt="mysql_load_from_csv"></p><h3 id="Mysql数据表至CSV文件"><a href="#Mysql数据表至CSV文件" class="headerlink" title="Mysql数据表至CSV文件"></a>Mysql数据表至CSV文件</h3><p>从mysql数据表Suppliers数据表中查询出一组特定记录，然后将输出写入到CSV输出文件。找出Cost列中的值大于700.00的所有记录，并将记录输出。<br>处理程序：<code>5_db_mysql_write_to_file.py</code></p><pre><code class="hljs python"><span class="hljs-comment"># Date:2020/6/2</span><span class="hljs-comment"># Author:Lingchen</span><span class="hljs-comment"># Mark: 从mysql数据表Suppliers数据表中查询出一组特定记录，然后将输出写入到CSV输出文件。</span><span class="hljs-comment">#       找出Cost列中的值大于700.00的所有记录，并将记录输出</span><span class="hljs-comment">#       python 5_db_mysql_write_to_file.py data/output_files/5_output.csv</span><span class="hljs-keyword">import</span> csv<span class="hljs-keyword">import</span> MySQLdb<span class="hljs-keyword">import</span> sys<span class="hljs-comment"># CSV输出文件名</span>output_file = sys.argv[<span class="hljs-number">1</span>]<span class="hljs-comment"># 连接到Mysql数据库</span>con = MySQLdb.connect(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">3306</span>, db=<span class="hljs-string">&#x27;my_suppliers&#x27;</span>, user=<span class="hljs-string">&#x27;ffawp&#x27;</span>, passwd=<span class="hljs-string">&#x27;Aa123456&#x27;</span>)c = con.cursor()<span class="hljs-comment"># 创建写文件的对象，并写入标题行</span>file_writer = csv.writer(<span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&#x27;w&#x27;</span>, newline=<span class="hljs-string">&#x27;&#x27;</span>), delimiter=<span class="hljs-string">&#x27;,&#x27;</span>)header = [<span class="hljs-string">&#x27;Supplier Name&#x27;</span>, <span class="hljs-string">&#x27;Invoice Number&#x27;</span>, <span class="hljs-string">&#x27;Part Number&#x27;</span>, <span class="hljs-string">&#x27;Cost&#x27;</span>, <span class="hljs-string">&#x27;Purchase Date&#x27;</span>]file_writer.writerow(header)<span class="hljs-comment"># 查询Suppliers表，并将结果写入CSV文件中</span>c.execute(<span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    SELECT *</span><span class="hljs-string">    FROM Suppliers</span><span class="hljs-string">    WHERE Cost &gt; 700.00;</span><span class="hljs-string">&quot;&quot;&quot;</span>)rows = c.fetchall()<span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> rows:    file_writer.writerow(row)</code></pre><p>运行，查看效果<br><code>python 5_db_mysql_write_to_file.py data/output_files/5_output.csv</code></p><p><img src="/2020/06/02/python-mysql-csv/4.png" alt="mysql_write_to_file"></p><p><strong><u>ps: 本文仅为学习笔记，仅供学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> python </tag>
            
            <tag> csv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS2017常用快捷键</title>
      <link href="2020/06/02/mvs-2017-hotkey/"/>
      <url>2020/06/02/mvs-2017-hotkey/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="VS2017常用快捷键"><a href="#VS2017常用快捷键" class="headerlink" title="VS2017常用快捷键"></a>VS2017常用快捷键</h2><h3 id="项目快捷键"><a href="#项目快捷键" class="headerlink" title="项目快捷键"></a>项目快捷键</h3><p><u>Ctrl + Alt + L</u>：显示 Solution Explorer（解决方案资源管理器）</p><p>Shift + Alt+ C：添加新类</p><p>Ctrl + Shift + C：显示类视图窗口</p><p><u>Shift + Alt + Enter</u>：全屏显示</p><p>Ctrl + F4：关闭文档窗口</p><p><u>Ctrl + F6</u>：移動到下一個文档窗口</p><h3 id="编辑快捷键"><a href="#编辑快捷键" class="headerlink" title="编辑快捷键"></a>编辑快捷键</h3><p>Ctrl + U：转小写</p><p>Ctrl + Shift + U：转大写</p><p>Ctrl + Enter：在当前行插入空行</p><p>Ctrl + Shift + Enter：在当前行下方插入空行</p><p>Ctrl + 空格键：使用 IntelliSense（智能感知）自动完成</p><p>Alt + Shift + 箭头键(←,↑,↓,→)：选择代码的自定义部分</p><p><u>Ctrl + }</u>：匹配大括号、括号</p><p><u>Ctrl + Shift +}</u>：在匹配的括号、括号内选择文本</p><p>Ctrl + Shift + S：保存所有文件和项目</p><p><u>Ctrl + K，Ctrl + C</u>：注释选定行</p><p><u>Ctrl + K，Ctrl + U</u>：取消选定行的注释</p><p>Ctrl + M, Ctrl + O：折叠代码定义</p><p>Ctrl + M, Ctrl + L：展开代码定义</p><p>Ctrl + K，Ctrl + D：正确对齐所有代码</p><p>Shift + End：从头到尾选择整行</p><p>Shift + Home：从尾到头选择整行</p><p>Ctrl + Shift + End：选择至文档末尾</p><p>Ctrl + Shift + Home：选择至文档末尾开始</p><p><u>Ctrl + W</u>：选择当前单词</p><p>Ctrl + Delete：删除光标右侧的所有字</p><p>Ctrl + Shift + T：格式-文字缩进</p><p><u>Ctrl + Shift + 空格键</u> ：参数信息</p><h3 id="导航快捷键"><a href="#导航快捷键" class="headerlink" title="导航快捷键"></a>导航快捷键</h3><p>Ctrl +Up/Down：滚动窗口但不移动光标</p><p><u>Ctrl + -</u>：向后定位</p><p>Ctrl + Shift + -：向前定位</p><p>Ctrl + +：让光标移动到下一个位置</p><p><u>F12</u>：转到定义</p><p>Ctrl + Alt + J：对象浏览</p><p><u>Ctrl + Tab</u>：下一个文档窗口</p><p><u>Ctrl + F2</u>：移動到导航bar</p><h3 id="调试快捷键"><a href="#调试快捷键" class="headerlink" title="调试快捷键"></a>调试快捷键</h3><p><u>F5</u>：开始调试</p><p>Ctrl + Alt + P：附加到进程</p><p><u>F10</u>：调试单步执行</p><p>Shift + F5：停止调试</p><p>F9：设置或删除断点</p><h3 id="搜索快捷键"><a href="#搜索快捷键" class="headerlink" title="搜索快捷键"></a>搜索快捷键</h3><p>Ctrl + K  Ctrl + K：将当前行添加书签</p><p>Ctrl + K  Ctrl + N：导航至下一个书签</p><p>Ctrl + .：如果你键入一个类名如 Collection<string>，且命名空间导入不正确的话，那么这个快捷方式组合将自动插入导入</string></p><p>Ctrl + Shift + F：在文件中查找</p><p>Shift + F12：查找所有引用</p><p>Ctrl + F：显示查找对话框</p><p>Ctrl + H：显示替换对话框</p><p><u>Ctrl + G</u>：跳转到行号或行</p><p>Ctrl + Shift + F：查找所选条目在整个解决方案中的引用</p><p><u>Ctrl+;</u>：搜索 Solution Explorer</p><p><strong><u>ps: 快捷键摘取与网络，仅供学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> VS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink学习-DataStream API</title>
      <link href="2020/05/30/flink-dataStream-api-java/"/>
      <url>2020/05/30/flink-dataStream-api-java/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Flink学习—DataStream-API"><a href="#Flink学习—DataStream-API" class="headerlink" title="Flink学习—DataStream API"></a>Flink学习—DataStream API</h2><p>Apache Flink是一个分布式流批一体化的开源平台。Flink的核心是一个提供数据分发、通信以及自动容错的流计算引擎。<br>Flink在流计算之上构建批处理，并且原生的支持迭代计算，内存管理以及程序优化。</p><h3 id="DataStream-API入门指导"><a href="#DataStream-API入门指导" class="headerlink" title="DataStream API入门指导"></a>DataStream API入门指导</h3><p>In this guide we will start from scratch and go from setting up a Flink project to running a streaming analysis program on a Flink cluster.<br>Wikipedia provides an IRC channel where all edits to the wiki are logged. We are going to read this channel in Flink and count the number of bytes that each user edits within a given window of time. This is easy enough to implement in a few minutes using Flink, but it will give you a good foundation from which to start building more complex analysis programs on your own.</p><h4 id="Maven构建"><a href="#Maven构建" class="headerlink" title="Maven构建"></a>Maven构建</h4><pre><code class="hljs bash">$ mvn archetype:generate \&gt;     -DarchetypeGroupId=org.apache.flink \&gt;     -DarchetypeArtifactId=flink-quickstart-java \&gt;     -DarchetypeVersion=1.9.0 \&gt;     -DgroupId=wiki-edits \&gt;     -DartifactId=wiki-edits \&gt;     -Dversion=0.1 \&gt;     -Dpackage=wikiedits \&gt;     -DinteractiveMode=<span class="hljs-literal">false</span></code></pre><p>查看构建好文件目录</p><pre><code class="hljs bash">$ tree wiki-edits/// mac system$ ls -Rwiki-edits./wiki-edits:pom.xmlsrc./wiki-edits/src:main./wiki-edits/src/main:javaresources./wiki-edits/src/main/java:wikiedits./wiki-edits/src/main/java/wikiedits:BatchJob.javaStreamingJob.java./wiki-edits/src/main/resources:log4j.properties</code></pre><p>删除示例程序</p><pre><code class="hljs java">$ rm wiki-edits/src/main/java/wikiedits<span class="hljs-comment">/*.java</span></code></pre><h4 id="创建Java程序"><a href="#创建Java程序" class="headerlink" title="创建Java程序"></a>创建Java程序</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> wikiedits;<span class="hljs-keyword">import</span> org.apache.flink.api.common.functions.AggregateFunction;<span class="hljs-keyword">import</span> org.apache.flink.api.java.functions.KeySelector;<span class="hljs-keyword">import</span> org.apache.flink.api.java.tuple.Tuple2;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.datastream.KeyedStream;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;<span class="hljs-keyword">import</span> org.apache.flink.streaming.api.windowing.time.Time;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.wikiedits.WikipediaEditEvent;<span class="hljs-keyword">import</span> org.apache.flink.streaming.connectors.wikiedits.WikipediaEditsSource;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: Wikipedia provides an IRC channel where all edits to the wiki are logged. </span><span class="hljs-comment"> * We are going to read this channel in Flink and </span><span class="hljs-comment"> * count the number of bytes that each user edits within a given window of time. </span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/5/31</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WikipediaAnalysis</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        StreamExecutionEnvironment see = StreamExecutionEnvironment.getExecutionEnvironment();        DataStreamSource&lt;WikipediaEditEvent&gt; edits = see.addSource(<span class="hljs-keyword">new</span> WikipediaEditsSource());        KeyedStream&lt;WikipediaEditEvent, String&gt; keyedEdits = edits.keyBy(<span class="hljs-keyword">new</span> KeySelector&lt;WikipediaEditEvent, String&gt;() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getKey</span><span class="hljs-params">(WikipediaEditEvent event)</span> </span>&#123;                <span class="hljs-keyword">return</span> event.getUser();            &#125;        &#125;);        DataStream&lt;Tuple2&lt;String, Long&gt;&gt; result = keyedEdits                .timeWindow(Time.seconds(<span class="hljs-number">5</span>))                .aggregate(<span class="hljs-keyword">new</span> AggregateFunction&lt;WikipediaEditEvent, Tuple2&lt;String, Long&gt;, Tuple2&lt;String, Long&gt;&gt;() &#123;                    <span class="hljs-meta">@Override</span>                    <span class="hljs-function"><span class="hljs-keyword">public</span> Tuple2&lt;String, Long&gt; <span class="hljs-title">createAccumulator</span><span class="hljs-params">()</span> </span>&#123;                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Tuple2&lt;&gt;(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-number">0L</span>);                    &#125;                    <span class="hljs-meta">@Override</span>                    <span class="hljs-function"><span class="hljs-keyword">public</span> Tuple2&lt;String, Long&gt; <span class="hljs-title">add</span><span class="hljs-params">(WikipediaEditEvent value, Tuple2&lt;String, Long&gt; accumulator)</span> </span>&#123;                        accumulator.f0 = value.getUser();                        accumulator.f1 += value.getByteDiff();                        <span class="hljs-keyword">return</span> accumulator;                    &#125;                    <span class="hljs-meta">@Override</span>                    <span class="hljs-function"><span class="hljs-keyword">public</span> Tuple2&lt;String, Long&gt; <span class="hljs-title">getResult</span><span class="hljs-params">(Tuple2&lt;String, Long&gt; accumulator)</span> </span>&#123;                        <span class="hljs-keyword">return</span> accumulator;                    &#125;                    <span class="hljs-meta">@Override</span>                    <span class="hljs-function"><span class="hljs-keyword">public</span> Tuple2&lt;String, Long&gt; <span class="hljs-title">merge</span><span class="hljs-params">(Tuple2&lt;String, Long&gt; a, Tuple2&lt;String, Long&gt; b)</span> </span>&#123;                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Tuple2&lt;&gt;(a.f0, a.f1 + b.f1);                    &#125;                &#125;);        result.print();        see.execute();    &#125;&#125;</code></pre><p>编译打包</p><pre><code class="hljs bash">$ mvn clean package[INFO] Replacing /Users/xxxxxx/Documents/Flink/self-code/wiki-edits/target/wiki-edits-0.1.jar with /Users/xxxxxx/Documents/Flink/self-code/wiki-edits/target/wiki-edits-0.1-shaded.jar[INFO] Dependency-reduced POM written at: /Users/xxxxxx/Documents/Flink/self-code/wiki-edits/dependency-reduced-pom.xml[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time: 20.218 s[INFO] Finished at: 2020-05-31T11:56:00+08:00[INFO] ------------------------------------------------------------------------</code></pre><p>启动</p><pre><code class="hljs bash">$ mvn <span class="hljs-built_in">exec</span>:java -Dexec.mainClass=wikiedits.WikipediaAnalysis</code></pre><p>结果</p><pre><code class="hljs bash">// 连接wiki不成功，尴尬，以下是官网结果1&gt; (Fenix down,114)6&gt; (AnomieBOT,155)8&gt; (BD2412bot,-3690)7&gt; (IgnorantArmies,49)3&gt; (Ckh3111,69)5&gt; (Slade360,0)7&gt; (Narutolovehinata5,2195)6&gt; (Vuyisa2001,79)4&gt; (Ms Sarah Welch,269)4&gt; (KasparBot,-245)</code></pre><p><strong><u>ps: 本文摘取于网络，仅供学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> flink </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Head-First学习</title>
      <link href="2020/05/14/python-header-first/"/>
      <url>2020/05/14/python-header-first/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Python-Head-First学习"><a href="#Python-Head-First学习" class="headerlink" title="Python Head-First学习"></a>Python Head-First学习</h2><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表读取</p><pre><code class="hljs python">cast = [<span class="hljs-string">&quot;Cleese&quot;</span>, <span class="hljs-string">&#x27;Palin&#x27;</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;Idle&#x27;</span>]print(cast)print(<span class="hljs-built_in">len</span>(cast))print(cast[<span class="hljs-number">1</span>])<span class="hljs-comment"># 末尾添加元素</span>cast.append(<span class="hljs-string">&quot;Gilliam&quot;</span>)<span class="hljs-comment"># 输出</span>[<span class="hljs-string">&#x27;Cleese&#x27;</span>, <span class="hljs-string">&#x27;Palin&#x27;</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;Idle&#x27;</span>]<span class="hljs-number">4</span>Palin[<span class="hljs-string">&#x27;Cleese&#x27;</span>, <span class="hljs-string">&#x27;Palin&#x27;</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;Idle&#x27;</span>, <span class="hljs-string">&#x27;Gilliam&#x27;</span>]</code></pre><p>添加列表</p><pre><code class="hljs python">cast = [<span class="hljs-string">&quot;Cleese&quot;</span>, <span class="hljs-string">&#x27;Palin&#x27;</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;Idle&#x27;</span>]cast.extend([<span class="hljs-string">&quot;Gilliam&quot;</span>, <span class="hljs-string">&quot;Chapman&quot;</span>])print(cast)<span class="hljs-comment"># 输出</span>[<span class="hljs-string">&#x27;Cleese&#x27;</span>, <span class="hljs-string">&#x27;Palin&#x27;</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;Idle&#x27;</span>, <span class="hljs-string">&#x27;Gilliam&#x27;</span>, <span class="hljs-string">&#x27;Chapman&#x27;</span>]<span class="hljs-comment"># cast.insert(0, &quot;Chapman&quot;)</span></code></pre><p>删除</p><pre><code class="hljs python">cast = [<span class="hljs-string">&#x27;Cleese&#x27;</span>, <span class="hljs-string">&#x27;Palin&#x27;</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;Idle&#x27;</span>, <span class="hljs-string">&#x27;Gilliam&#x27;</span>]<span class="hljs-comment"># 删除末尾数据</span>cast.pop()<span class="hljs-comment"># cast.remove(&quot;Chapman&quot;)</span>print(cast)// 输出[<span class="hljs-string">&#x27;Cleese&#x27;</span>, <span class="hljs-string">&#x27;Palin&#x27;</span>, <span class="hljs-string">&#x27;Jones&#x27;</span>, <span class="hljs-string">&#x27;Idle&#x27;</span>]</code></pre><h3 id="列表迭代"><a href="#列表迭代" class="headerlink" title="列表迭代"></a>列表迭代</h3><pre><code class="hljs python">movies = [<span class="hljs-string">&quot;The Holy Grail&quot;</span>, <span class="hljs-number">1975</span>, <span class="hljs-string">&quot;Terry Jones &amp; Terry Gilliam&quot;</span>, <span class="hljs-number">91</span>,          [<span class="hljs-string">&quot;Graham Chapman&quot;</span>,           [<span class="hljs-string">&quot;Michael Palin&quot;</span>, <span class="hljs-string">&quot;John Cleese&quot;</span>, <span class="hljs-string">&quot;Terry Gilliam&quot;</span>, <span class="hljs-string">&quot;Eric Idle&quot;</span>, <span class="hljs-string">&quot;Terry Jones&quot;</span>]]]print(movies)print(movies[<span class="hljs-number">4</span>][<span class="hljs-number">1</span>][<span class="hljs-number">3</span>])print(<span class="hljs-string">&quot;遍历内嵌列表：&quot;</span>)<span class="hljs-keyword">for</span> each_item <span class="hljs-keyword">in</span> movies:    print(each_item)<span class="hljs-comment"># 输出</span>[<span class="hljs-string">&#x27;The Holy Grail&#x27;</span>, <span class="hljs-number">1975</span>, <span class="hljs-string">&#x27;Terry Jones &amp; Terry Gilliam&#x27;</span>, <span class="hljs-number">91</span>, [<span class="hljs-string">&#x27;Graham Chapman&#x27;</span>, [<span class="hljs-string">&#x27;Michael Palin&#x27;</span>, <span class="hljs-string">&#x27;John Cleese&#x27;</span>, <span class="hljs-string">&#x27;Terry Gilliam&#x27;</span>, <span class="hljs-string">&#x27;Eric Idle&#x27;</span>, <span class="hljs-string">&#x27;Terry Jones&#x27;</span>]]]Eric Idle遍历内嵌列表：The Holy Grail<span class="hljs-number">1975</span>Terry Jones &amp; Terry Gilliam<span class="hljs-number">91</span>[<span class="hljs-string">&#x27;Graham Chapman&#x27;</span>, [<span class="hljs-string">&#x27;Michael Palin&#x27;</span>, <span class="hljs-string">&#x27;John Cleese&#x27;</span>, <span class="hljs-string">&#x27;Terry Gilliam&#x27;</span>, <span class="hljs-string">&#x27;Eric Idle&#x27;</span>, <span class="hljs-string">&#x27;Terry Jones&#x27;</span>]]</code></pre><p>文件读取</p><pre><code class="hljs python"><span class="hljs-comment"># Mark: 通过自定义模块lc_nester来输出列表到指定文件</span><span class="hljs-keyword">import</span> lc_nesterman = []other = []<span class="hljs-keyword">try</span>:    data = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sketch.txt&#x27;</span>)    <span class="hljs-comment"># 使用with语句来处理文件</span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sketch.txt&#x27;</span>) <span class="hljs-keyword">as</span> data:        <span class="hljs-keyword">for</span> each_line <span class="hljs-keyword">in</span> data:            <span class="hljs-keyword">try</span>:                (role, line_spoken) = each_line.split(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-number">1</span>)                <span class="hljs-comment"># 删除行中不需要的空白符</span>                line_spoken = line_spoken.strip()                <span class="hljs-keyword">if</span> role == <span class="hljs-string">&#x27;Man&#x27;</span>:                    man.append(line_spoken)                <span class="hljs-keyword">elif</span> role == <span class="hljs-string">&#x27;Other Man&#x27;</span>:                    other.append(line_spoken)            <span class="hljs-keyword">except</span> ValueError:                <span class="hljs-keyword">pass</span><span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:    print(<span class="hljs-string">&quot;The datafile is missing: &quot;</span>, <span class="hljs-built_in">str</span>(err))print(<span class="hljs-string">&#x27;Man: &#x27;</span>, man)print(<span class="hljs-string">&#x27;Other Man: &#x27;</span>, other)<span class="hljs-comment"># 写入文件</span><span class="hljs-keyword">try</span>:    <span class="hljs-comment"># 并行处理，使用，号隔开</span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;man_data_nester.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> man_file, <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;other_data_nester.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> other_file:        <span class="hljs-comment"># print(man, file=man_file)</span>        <span class="hljs-comment"># print(other, file=other_file)</span>        lc_nester.print_lol(man, out=man_file)        lc_nester.print_lol(other, out=other_file)<span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:    print(<span class="hljs-string">&#x27;File Error: &#x27;</span>, <span class="hljs-built_in">str</span>(err))</code></pre><h3 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h3><p>在同一个目录下先准备好模块文件lc_nester.py</p><pre><code class="hljs python"><span class="hljs-comment"># Mark: 将列表输出到文件或者到屏幕</span><span class="hljs-keyword">import</span> sys<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_lol</span>(<span class="hljs-params">the_list, indent=<span class="hljs-literal">False</span>, level=<span class="hljs-number">0</span>, out=sys.stdout</span>):</span>    <span class="hljs-keyword">for</span> each_item <span class="hljs-keyword">in</span> the_list:        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(each_item, <span class="hljs-built_in">list</span>):            print_lol(each_item, indent, level + <span class="hljs-number">1</span>, out)        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">if</span> indent:                <span class="hljs-keyword">for</span> tab_stop <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(level):                    print(<span class="hljs-string">&quot;\t&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>, file=out)            print(each_item, file=out)</code></pre><h4 id="打包和安装自定义模块"><a href="#打包和安装自定义模块" class="headerlink" title="打包和安装自定义模块"></a>打包和安装自定义模块</h4><p><code>python3 setup.py sdist</code><br><code>python3 setup.py install</code></p><pre><code class="hljs python"><span class="hljs-comment"># 打包</span>$ python3 setup.py sdistrunning sdistrunning checkwarning: sdist: manifest template <span class="hljs-string">&#x27;MANIFEST.in&#x27;</span> does <span class="hljs-keyword">not</span> exist (using default file <span class="hljs-built_in">list</span>)warning: sdist: standard file <span class="hljs-keyword">not</span> found: should have one of README, README.txtwriting manifest file <span class="hljs-string">&#x27;MANIFEST&#x27;</span>creating lc_nester<span class="hljs-number">-1.3</span><span class="hljs-number">.0</span>making hard links <span class="hljs-keyword">in</span> lc_nester<span class="hljs-number">-1.3</span><span class="hljs-number">.0</span>...hard linking lc_nester.py -&gt; lc_nester-1.3.0hard linking setup.py -&gt; lc_nester-1.3.0Creating tar archiveremoving <span class="hljs-string">&#x27;lc_nester-1.3.0&#x27;</span> (<span class="hljs-keyword">and</span> everything under it)<span class="hljs-comment"># 安装</span>$ python3 setup.py installrunning installrunning buildrunning build_pyrunning install_librunning install_egg_infoRemoving /Users/user_name/PycharmPro/aconda/lib/python3<span class="hljs-number">.6</span>/site-packages/lc_nester<span class="hljs-number">-1.3</span><span class="hljs-number">.0</span>-py3<span class="hljs-number">.6</span>.egg-infoWriting /Users/user_name/PycharmPro/aconda/lib/python3<span class="hljs-number">.6</span>/site-packages/lc_nester<span class="hljs-number">-1.3</span><span class="hljs-number">.0</span>-py3<span class="hljs-number">.6</span>.egg-info</code></pre><h4 id="引用自定义模块"><a href="#引用自定义模块" class="headerlink" title="引用自定义模块"></a>引用自定义模块</h4><pre><code class="hljs python"><span class="hljs-comment"># Mark: 通过自定义模块lc_nester来输出列表到指定文件</span><span class="hljs-keyword">import</span> lc_nesterman = []other = []<span class="hljs-keyword">try</span>:    data = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sketch.txt&#x27;</span>)    <span class="hljs-comment"># 使用with语句来处理文件</span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;sketch.txt&#x27;</span>) <span class="hljs-keyword">as</span> data:        <span class="hljs-keyword">for</span> each_line <span class="hljs-keyword">in</span> data:            <span class="hljs-keyword">try</span>:                (role, line_spoken) = each_line.split(<span class="hljs-string">&#x27;:&#x27;</span>, <span class="hljs-number">1</span>)                <span class="hljs-comment"># 删除行中不需要的空白符</span>                line_spoken = line_spoken.strip()                <span class="hljs-keyword">if</span> role == <span class="hljs-string">&#x27;Man&#x27;</span>:                    man.append(line_spoken)                <span class="hljs-keyword">elif</span> role == <span class="hljs-string">&#x27;Other Man&#x27;</span>:                    other.append(line_spoken)            <span class="hljs-keyword">except</span> ValueError:                <span class="hljs-keyword">pass</span><span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:    print(<span class="hljs-string">&quot;The datafile is missing: &quot;</span>, <span class="hljs-built_in">str</span>(err))print(<span class="hljs-string">&#x27;Man: &#x27;</span>, man)print(<span class="hljs-string">&#x27;Other Man: &#x27;</span>, other)<span class="hljs-comment"># 写入文件</span><span class="hljs-keyword">try</span>:    <span class="hljs-comment"># 并行处理，使用，号隔开</span>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;man_data_nester.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> man_file, <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;other_data_nester.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> other_file:        <span class="hljs-comment"># print(man, file=man_file)</span>        <span class="hljs-comment"># print(other, file=other_file)</span>        lc_nester.print_lol(man, out=man_file)        lc_nester.print_lol(other, out=other_file)<span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:    print(<span class="hljs-string">&#x27;File Error: &#x27;</span>, <span class="hljs-built_in">str</span>(err))<span class="hljs-comment"># 输出</span>Man:  [<span class="hljs-string">&#x27;Is this the right room for an argument?&#x27;</span>, <span class="hljs-string">&quot;No you haven&#x27;t!&quot;</span>, <span class="hljs-string">&#x27;When?&#x27;</span>, <span class="hljs-string">&quot;No you didn&#x27;t!&quot;</span>, <span class="hljs-string">&quot;You didn&#x27;t!&quot;</span>, <span class="hljs-string">&#x27;You did not!&#x27;</span>, <span class="hljs-string">&#x27;Ah! (taking out his wallet and paying) Just the five minutes.&#x27;</span>, <span class="hljs-string">&#x27;You most certainly did not!&#x27;</span>, <span class="hljs-string">&quot;Oh no you didn&#x27;t!&quot;</span>, <span class="hljs-string">&quot;Oh no you didn&#x27;t!&quot;</span>, <span class="hljs-string">&quot;Oh look, this isn&#x27;t an argument!&quot;</span>, <span class="hljs-string">&quot;No it isn&#x27;t!&quot;</span>, <span class="hljs-string">&quot;It&#x27;s just contradiction!&quot;</span>, <span class="hljs-string">&#x27;It IS!&#x27;</span>, <span class="hljs-string">&#x27;You just contradicted me!&#x27;</span>, <span class="hljs-string">&#x27;You DID!&#x27;</span>, <span class="hljs-string">&#x27;You did just then!&#x27;</span>, <span class="hljs-string">&#x27;(exasperated) Oh, this is futile!!&#x27;</span>, <span class="hljs-string">&#x27;Yes it is!&#x27;</span>]Other Man:  [<span class="hljs-string">&quot;I&#x27;ve told you once.&quot;</span>, <span class="hljs-string">&#x27;Yes I have.&#x27;</span>, <span class="hljs-string">&#x27;Just now.&#x27;</span>, <span class="hljs-string">&#x27;Yes I did!&#x27;</span>, <span class="hljs-string">&quot;I&#x27;m telling you, I did!&quot;</span>, <span class="hljs-string">&quot;Oh I&#x27;m sorry, is this a five minute argument, or the full half hour?&quot;</span>, <span class="hljs-string">&#x27;Just the five minutes. Thank you.&#x27;</span>, <span class="hljs-string">&#x27;Anyway, I did.&#x27;</span>, <span class="hljs-string">&quot;Now let&#x27;s get one thing quite clear: I most definitely told you!&quot;</span>, <span class="hljs-string">&#x27;Oh yes I did!&#x27;</span>, <span class="hljs-string">&#x27;Oh yes I did!&#x27;</span>, <span class="hljs-string">&#x27;Yes it is!&#x27;</span>, <span class="hljs-string">&quot;No it isn&#x27;t!&quot;</span>, <span class="hljs-string">&#x27;It is NOT!&#x27;</span>, <span class="hljs-string">&quot;No I didn&#x27;t!&quot;</span>, <span class="hljs-string">&#x27;No no no!&#x27;</span>, <span class="hljs-string">&#x27;Nonsense!&#x27;</span>, <span class="hljs-string">&quot;No it isn&#x27;t!&quot;</span>]</code></pre><h3 id="推导列表"><a href="#推导列表" class="headerlink" title="推导列表"></a>推导列表</h3><p>列表推导可以最大限度的简化代码，从右向左看，便于理解。如：<br><code>sorted(set([float(sanitize(t)) for t in james]), reverse=True)[0:3]</code></p><pre><code class="hljs python"><span class="hljs-comment"># Mark: 读取4个数据文件至列表，并在屏幕上打印</span><span class="hljs-comment"># 列表</span>james = []julie = []mikey = []sarah = []<span class="hljs-comment"># 读取文件数据</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_coach_data</span>(<span class="hljs-params">file_name</span>):</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name) <span class="hljs-keyword">as</span> f:            data = f.readline()        <span class="hljs-keyword">return</span> data.strip().split(<span class="hljs-string">&#x27;,&#x27;</span>)    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:        print(<span class="hljs-string">&#x27;File IO error: &#x27;</span>, <span class="hljs-built_in">str</span>(err))        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><span class="hljs-comment"># 清洗时间数据</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sanitize</span>(<span class="hljs-params">time_string</span>):</span>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">in</span> time_string:        splitter = <span class="hljs-string">&#x27;-&#x27;</span>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-keyword">in</span> time_string:        splitter = <span class="hljs-string">&#x27;:&#x27;</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> time_string    (mins, secs) = time_string.split(splitter)    <span class="hljs-keyword">return</span> mins + <span class="hljs-string">&#x27;.&#x27;</span> + secsjames = get_coach_data(<span class="hljs-string">&#x27;james.txt&#x27;</span>)julie = get_coach_data(<span class="hljs-string">&#x27;julie.txt&#x27;</span>)mikey = get_coach_data(<span class="hljs-string">&#x27;mikey.txt&#x27;</span>)sarah = get_coach_data(<span class="hljs-string">&#x27;sarah.txt&#x27;</span>)print(<span class="hljs-string">&#x27;james: &#x27;</span>, james)print(<span class="hljs-string">&#x27;james set: &#x27;</span>, <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>([<span class="hljs-built_in">float</span>(sanitize(t)) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> james]), reverse=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])print(<span class="hljs-string">&#x27;julie: &#x27;</span>, julie)print(<span class="hljs-string">&#x27;julie set: &#x27;</span>, <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>([<span class="hljs-built_in">float</span>(sanitize(t)) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> julie]), reverse=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])print(<span class="hljs-string">&#x27;mikey: &#x27;</span>, mikey)print(<span class="hljs-string">&#x27;mikey set: &#x27;</span>, <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>([<span class="hljs-built_in">float</span>(sanitize(t)) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> mikey]), reverse=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])print(<span class="hljs-string">&#x27;sarah: &#x27;</span>, sarah)print(<span class="hljs-string">&#x27;sarah set: &#x27;</span>, <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>([<span class="hljs-built_in">float</span>(sanitize(t)) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> sarah]), reverse=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])<span class="hljs-comment"># 输出</span>james:  [<span class="hljs-string">&#x27;2-34&#x27;</span>, <span class="hljs-string">&#x27;3:21&#x27;</span>, <span class="hljs-string">&#x27;2.34&#x27;</span>, <span class="hljs-string">&#x27;2.45&#x27;</span>, <span class="hljs-string">&#x27;3.01&#x27;</span>, <span class="hljs-string">&#x27;2:01&#x27;</span>, <span class="hljs-string">&#x27;2:01&#x27;</span>, <span class="hljs-string">&#x27;3:10&#x27;</span>, <span class="hljs-string">&#x27;2-22&#x27;</span>]james <span class="hljs-built_in">set</span>:  [<span class="hljs-number">3.21</span>, <span class="hljs-number">3.1</span>, <span class="hljs-number">3.01</span>]julie:  [<span class="hljs-string">&#x27;2.59&#x27;</span>, <span class="hljs-string">&#x27;2.11&#x27;</span>, <span class="hljs-string">&#x27;2:11&#x27;</span>, <span class="hljs-string">&#x27;2:23&#x27;</span>, <span class="hljs-string">&#x27;3-10&#x27;</span>, <span class="hljs-string">&#x27;2-23&#x27;</span>, <span class="hljs-string">&#x27;3:10&#x27;</span>, <span class="hljs-string">&#x27;3.21&#x27;</span>, <span class="hljs-string">&#x27;3-21&#x27;</span>]julie <span class="hljs-built_in">set</span>:  [<span class="hljs-number">3.21</span>, <span class="hljs-number">3.1</span>, <span class="hljs-number">2.59</span>]mikey:  [<span class="hljs-string">&#x27;2:22&#x27;</span>, <span class="hljs-string">&#x27;3.01&#x27;</span>, <span class="hljs-string">&#x27;3:01&#x27;</span>, <span class="hljs-string">&#x27;3.02&#x27;</span>, <span class="hljs-string">&#x27;3:02&#x27;</span>, <span class="hljs-string">&#x27;3.02&#x27;</span>, <span class="hljs-string">&#x27;3:22&#x27;</span>, <span class="hljs-string">&#x27;2.49&#x27;</span>, <span class="hljs-string">&#x27;2:38&#x27;</span>]mikey <span class="hljs-built_in">set</span>:  [<span class="hljs-number">3.22</span>, <span class="hljs-number">3.02</span>, <span class="hljs-number">3.01</span>]sarah:  [<span class="hljs-string">&#x27;2:58&#x27;</span>, <span class="hljs-string">&#x27;2.58&#x27;</span>, <span class="hljs-string">&#x27;2:39&#x27;</span>, <span class="hljs-string">&#x27;2-25&#x27;</span>, <span class="hljs-string">&#x27;2-55&#x27;</span>, <span class="hljs-string">&#x27;2:54&#x27;</span>, <span class="hljs-string">&#x27;2.18&#x27;</span>, <span class="hljs-string">&#x27;2:55&#x27;</span>, <span class="hljs-string">&#x27;2:55&#x27;</span>]</code></pre><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p>字典是一个内置的数据结构（内置于Python中），允许将数据与键而不是数字关联。这样可以使内存中的数据与实际数据的结构保持一致。</p><pre><code class="hljs python"><span class="hljs-comment"># Mark: 读取4个数据文件至列表，排序后，放至字典数据结构中, 将处理细节放至函数中</span><span class="hljs-comment"># 字典</span>james = &#123;&#125;julie = &#123;&#125;mikey = &#123;&#125;sarah = &#123;&#125;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_coach_data</span>(<span class="hljs-params">file_name</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    读取文件数据，返回一个字典结构</span><span class="hljs-string">    :param file_name:</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name) <span class="hljs-keyword">as</span> f:            data = f.readline()        file_list = data.strip().split(<span class="hljs-string">&#x27;,&#x27;</span>)        <span class="hljs-comment"># data_dic = dict()</span>        <span class="hljs-comment"># data_dic[&#x27;name&#x27;] = file_list.pop(0)</span>        <span class="hljs-comment"># data_dic[&#x27;birthday&#x27;] = file_list.pop(0)</span>        <span class="hljs-comment"># # data_dic[&#x27;time&#x27;] = file_list</span>        <span class="hljs-comment"># data_dic[&#x27;time&#x27;] = str(sorted(set([sanitize(t) for t in file_list]))[0:3])</span>        <span class="hljs-comment"># return data_dic</span>        <span class="hljs-keyword">return</span> &#123;            <span class="hljs-string">&#x27;name&#x27;</span>: file_list.pop(<span class="hljs-number">0</span>),            <span class="hljs-string">&#x27;birthday&#x27;</span>: file_list.pop(<span class="hljs-number">0</span>),            <span class="hljs-string">&#x27;time&#x27;</span>: <span class="hljs-built_in">str</span>(<span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>([sanitize(t) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> file_list]))[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>])        &#125;    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:        print(<span class="hljs-string">&#x27;File IO error: &#x27;</span>, <span class="hljs-built_in">str</span>(err))        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><span class="hljs-comment"># 清洗时间数据</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sanitize</span>(<span class="hljs-params">time_string</span>):</span>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">in</span> time_string:        splitter = <span class="hljs-string">&#x27;-&#x27;</span>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-keyword">in</span> time_string:        splitter = <span class="hljs-string">&#x27;:&#x27;</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> time_string    (mins, secs) = time_string.split(splitter)    <span class="hljs-keyword">return</span> mins + <span class="hljs-string">&#x27;.&#x27;</span> + secsjames = get_coach_data(<span class="hljs-string">&#x27;james2.txt&#x27;</span>)print(<span class="hljs-string">&#x27;james: &#x27;</span>, james)print(james[<span class="hljs-string">&#x27;name&#x27;</span>] + <span class="hljs-string">&quot;&#x27;s faster times are: &quot;</span> + james[<span class="hljs-string">&#x27;time&#x27;</span>])julie = get_coach_data(<span class="hljs-string">&#x27;julie2.txt&#x27;</span>)print(<span class="hljs-string">&#x27;julie: &#x27;</span>, julie)print(julie[<span class="hljs-string">&#x27;name&#x27;</span>] + <span class="hljs-string">&quot;&#x27;s faster times are: &quot;</span> + julie[<span class="hljs-string">&#x27;time&#x27;</span>])mikey = get_coach_data(<span class="hljs-string">&#x27;mikey2.txt&#x27;</span>)print(<span class="hljs-string">&#x27;mikey: &#x27;</span>, mikey)print(mikey[<span class="hljs-string">&#x27;name&#x27;</span>] + <span class="hljs-string">&quot;&#x27;s faster times are: &quot;</span> + mikey[<span class="hljs-string">&#x27;time&#x27;</span>])sarah = get_coach_data(<span class="hljs-string">&#x27;sarah2.txt&#x27;</span>)print(<span class="hljs-string">&#x27;sarah: &#x27;</span>, sarah)print(sarah[<span class="hljs-string">&#x27;name&#x27;</span>] + <span class="hljs-string">&quot;&#x27;s faster times are: &quot;</span> + sarah[<span class="hljs-string">&#x27;time&#x27;</span>])<span class="hljs-comment"># 输出</span>james:  &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;James Lee&#x27;</span>, <span class="hljs-string">&#x27;birthday&#x27;</span>: <span class="hljs-string">&#x27;2002-3-14&#x27;</span>, <span class="hljs-string">&#x27;time&#x27;</span>: <span class="hljs-string">&quot;[&#x27;2.01&#x27;, &#x27;2.16&#x27;, &#x27;2.22&#x27;]&quot;</span>&#125;James Lee<span class="hljs-string">&#x27;s faster times are: [&#x27;</span><span class="hljs-number">2.01</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.16</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.22</span><span class="hljs-string">&#x27;]</span><span class="hljs-string">julie:  &#123;&#x27;</span>name<span class="hljs-string">&#x27;: &#x27;</span>Julie Jones<span class="hljs-string">&#x27;, &#x27;</span>birthday<span class="hljs-string">&#x27;: &#x27;</span><span class="hljs-number">2002</span><span class="hljs-number">-8</span><span class="hljs-number">-17</span><span class="hljs-string">&#x27;, &#x27;</span>time<span class="hljs-string">&#x27;: &quot;[&#x27;</span><span class="hljs-number">2.11</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.23</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.59</span><span class="hljs-string">&#x27;]&quot;&#125;</span><span class="hljs-string">Julie Jones&#x27;</span>s faster times are: [<span class="hljs-string">&#x27;2.11&#x27;</span>, <span class="hljs-string">&#x27;2.23&#x27;</span>, <span class="hljs-string">&#x27;2.59&#x27;</span>]mikey:  &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Mikey McManus&#x27;</span>, <span class="hljs-string">&#x27;birthday&#x27;</span>: <span class="hljs-string">&#x27;2002-2-24&#x27;</span>, <span class="hljs-string">&#x27;time&#x27;</span>: <span class="hljs-string">&quot;[&#x27;2.22&#x27;, &#x27;2.31&#x27;, &#x27;2.38&#x27;]&quot;</span>&#125;Mikey McManus<span class="hljs-string">&#x27;s faster times are: [&#x27;</span><span class="hljs-number">2.22</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.31</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.38</span><span class="hljs-string">&#x27;]</span><span class="hljs-string">sarah:  &#123;&#x27;</span>name<span class="hljs-string">&#x27;: &#x27;</span>Sarah Sweeney<span class="hljs-string">&#x27;, &#x27;</span>birthday<span class="hljs-string">&#x27;: &#x27;</span><span class="hljs-number">2002</span><span class="hljs-number">-6</span><span class="hljs-number">-17</span><span class="hljs-string">&#x27;, &#x27;</span>time<span class="hljs-string">&#x27;: &quot;[&#x27;</span><span class="hljs-number">2.18</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.21</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.22</span><span class="hljs-string">&#x27;]&quot;&#125;</span><span class="hljs-string">Sarah Sweeney&#x27;</span>s faster times are: [<span class="hljs-string">&#x27;2.18&#x27;</span>, <span class="hljs-string">&#x27;2.21&#x27;</span>, <span class="hljs-string">&#x27;2.22&#x27;</span>]</code></pre><h3 id="对象类"><a href="#对象类" class="headerlink" title="对象类"></a>对象类</h3><p>Python遵循标准的面向对象编程模型，提供了一种方法允许将代码及其处理的数据定义为一个类。<br>就可以用它来创建（或实例化）数据对象，它会继承类的特性。</p><ul><li>类的方法：对象代码</li><li>类的属性：数据</li><li>实例：实例化的数据对象</li></ul><pre><code class="hljs python"><span class="hljs-comment"># Mark: 定义一个运动数据类</span><span class="hljs-comment"># 类的属性最好保存原始数据，需要计算得出的数据最好通过方法来实现，保持灵活与扩展</span><span class="hljs-comment"># 通常把代码与数据封装到一个定制类中。方便维护</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Athlete</span>:</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    选手类，包含姓名，年龄，运动时间</span><span class="hljs-string">    类的好处，更多功能 = 更多方法，如top3()</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, a_name, a_dob=<span class="hljs-literal">None</span>, a_times=[]</span>):</span>        self.name = a_name        self.dob = a_dob        self.times = a_times    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top3</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        取出最快的三个时间</span><span class="hljs-string">        格式化，去重，排序，转换成字符串</span><span class="hljs-string">        :return: 返回最好是一个原始列表，你不知道调用者怎么处理这个列表，不要假设是字符串</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-comment"># return str(sorted(set([sanitize(t) for t in self.times]))[0:3])</span>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>([sanitize(t) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> self.times]))[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_time</span>(<span class="hljs-params">self, a_time</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        将一个额外的计时值追加到选手的计时数据</span><span class="hljs-string">        :param a_time:</span><span class="hljs-string">        :return:</span><span class="hljs-string">        &quot;&quot;&quot;</span>        self.times.append(a_time)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_times</span>(<span class="hljs-params">self, a_times</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        会用一个或多个计时值（提供为一个列表），来扩展一个选手的计时数据</span><span class="hljs-string">        运用extend方法</span><span class="hljs-string">        :param a_times:</span><span class="hljs-string">        :return:</span><span class="hljs-string">        &quot;&quot;&quot;</span>        self.times.extend(a_times)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sanitize</span>(<span class="hljs-params">time_string</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    清洗时间数据</span><span class="hljs-string">    :param time_string:</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">in</span> time_string:        splitter = <span class="hljs-string">&#x27;-&#x27;</span>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-keyword">in</span> time_string:        splitter = <span class="hljs-string">&#x27;:&#x27;</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> time_string    (mins, secs) = time_string.split(splitter)    <span class="hljs-keyword">return</span> mins + <span class="hljs-string">&#x27;.&#x27;</span> + secs<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_coach_data</span>(<span class="hljs-params">file_name</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    读取文本数据</span><span class="hljs-string">    :param file_name:</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name) <span class="hljs-keyword">as</span> f:            data = f.readline()        <span class="hljs-comment"># 去空白符，切割</span>        templ = data.strip().split(<span class="hljs-string">&#x27;,&#x27;</span>)        <span class="hljs-keyword">return</span> Athlete(templ.pop(<span class="hljs-number">0</span>), templ.pop(<span class="hljs-number">0</span>), templ)        <span class="hljs-comment"># templ_name = templ.pop(0)</span>        <span class="hljs-comment"># templ_dob = templ.pop(0)</span>        <span class="hljs-comment"># templ_times = templ</span>        <span class="hljs-comment"># print(&quot;templ&#x27;s times: &quot;, templ)</span>        <span class="hljs-comment"># return Athlete(templ_name, templ_dob, templ_times)</span>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:        print(<span class="hljs-string">&#x27;File error: &#x27;</span> + <span class="hljs-built_in">str</span>(err))        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><span class="hljs-comment"># 获取数据</span>james = get_coach_data(<span class="hljs-string">&#x27;james2.txt&#x27;</span>)julie = get_coach_data(<span class="hljs-string">&#x27;julie2.txt&#x27;</span>)mikey = get_coach_data(<span class="hljs-string">&#x27;mikey2.txt&#x27;</span>)sarah = get_coach_data(<span class="hljs-string">&#x27;sarah2.txt&#x27;</span>)print(james.name + <span class="hljs-string">&quot;&#x27;s fastest times are: &quot;</span> + <span class="hljs-built_in">str</span>(james.top3()))print(julie.name + <span class="hljs-string">&quot;&#x27;s fastest times are: &quot;</span> + <span class="hljs-built_in">str</span>(julie.top3()))print(mikey.name + <span class="hljs-string">&quot;&#x27;s fastest times are: &quot;</span> + <span class="hljs-built_in">str</span>(mikey.top3()))print(sarah.name + <span class="hljs-string">&quot;&#x27;s fastest times are: &quot;</span> + <span class="hljs-built_in">str</span>(sarah.top3()))<span class="hljs-comment"># 输出</span>James Lee<span class="hljs-string">&#x27;s fastest times are: [&#x27;</span><span class="hljs-number">2.01</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.16</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.22</span><span class="hljs-string">&#x27;]</span><span class="hljs-string">Julie Jones&#x27;</span>s fastest times are: [<span class="hljs-string">&#x27;2.11&#x27;</span>, <span class="hljs-string">&#x27;2.23&#x27;</span>, <span class="hljs-string">&#x27;2.59&#x27;</span>]Mikey McManus<span class="hljs-string">&#x27;s fastest times are: [&#x27;</span><span class="hljs-number">2.22</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.31</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.38</span><span class="hljs-string">&#x27;]</span><span class="hljs-string">Sarah Sweeney&#x27;</span>s fastest times are: [<span class="hljs-string">&#x27;2.18&#x27;</span>, <span class="hljs-string">&#x27;2.21&#x27;</span>, <span class="hljs-string">&#x27;2.22&#x27;</span>]</code></pre><h3 id="对象类继承内置对象"><a href="#对象类继承内置对象" class="headerlink" title="对象类继承内置对象"></a>对象类继承内置对象</h3><p>Python的class还允许通过继承现有的其他类来创建一个类，可包括用list，set和dict提供的Python内置数据结构类。通过继承来创建的这些类为子类。</p><pre><code class="hljs python"><span class="hljs-comment"># Mark: 利用继承重写coach Athlete类，继承列表</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AthleteList</span>(<span class="hljs-params"><span class="hljs-built_in">list</span></span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    初始化选手信息，继承list</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, a_name, a_dob=<span class="hljs-literal">None</span>, a_times=[]</span>):</span>        <span class="hljs-built_in">list</span>.__init__([])        self.name = a_name        self.dob = a_dob        <span class="hljs-comment"># 利用列表</span>        self.extend(a_times)    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top3</span>(<span class="hljs-params">self</span>):</span>        <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">        获取最快的3个运动时间</span><span class="hljs-string">        :return:</span><span class="hljs-string">        &quot;&quot;&quot;</span>        <span class="hljs-comment"># 数据本身是计时数据，不再需要times属性</span>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">set</span>([sanitize(t) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> self]))[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sanitize</span>(<span class="hljs-params">time_string</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    清洗时间数据</span><span class="hljs-string">    :param time_string:</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;-&#x27;</span> <span class="hljs-keyword">in</span> time_string:        splitter = <span class="hljs-string">&#x27;-&#x27;</span>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-keyword">in</span> time_string:        splitter = <span class="hljs-string">&#x27;:&#x27;</span>    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> time_string    (mins, secs) = time_string.split(splitter)    <span class="hljs-keyword">return</span> mins + <span class="hljs-string">&#x27;.&#x27;</span> + secs<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_coach_data</span>(<span class="hljs-params">file_name</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    获取选手运动数据</span><span class="hljs-string">    :param file_name:</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name) <span class="hljs-keyword">as</span> f:            data = f.readline()        templ = data.strip().split(<span class="hljs-string">&#x27;,&#x27;</span>)        <span class="hljs-keyword">return</span> AthleteList(templ.pop(<span class="hljs-number">0</span>), templ.pop(<span class="hljs-number">0</span>), templ)    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> err:        print(<span class="hljs-string">&quot;File error: &quot;</span> + <span class="hljs-built_in">str</span>(err))        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span>james = get_coach_data(<span class="hljs-string">&quot;james2.txt&quot;</span>)julie = get_coach_data(<span class="hljs-string">&quot;julie2.txt&quot;</span>)mikey = get_coach_data(<span class="hljs-string">&quot;mikey2.txt&quot;</span>)sarah = get_coach_data(<span class="hljs-string">&quot;sarah2.txt&quot;</span>)print(james.name + <span class="hljs-string">&quot;&#x27;s fastest times are: &quot;</span> + <span class="hljs-built_in">str</span>(james.top3()))print(julie.name + <span class="hljs-string">&quot;&#x27;s fastest times are: &quot;</span> + <span class="hljs-built_in">str</span>(julie.top3()))print(mikey.name + <span class="hljs-string">&quot;&#x27;s fastest times are: &quot;</span> + <span class="hljs-built_in">str</span>(mikey.top3()))print(sarah.name + <span class="hljs-string">&quot;&#x27;s fastest times are: &quot;</span> + <span class="hljs-built_in">str</span>(sarah.top3()))<span class="hljs-comment"># 输出</span>James Lee<span class="hljs-string">&#x27;s fastest times are: [&#x27;</span><span class="hljs-number">2.01</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.16</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.22</span><span class="hljs-string">&#x27;]</span><span class="hljs-string">Julie Jones&#x27;</span>s fastest times are: [<span class="hljs-string">&#x27;2.11&#x27;</span>, <span class="hljs-string">&#x27;2.23&#x27;</span>, <span class="hljs-string">&#x27;2.59&#x27;</span>]Mikey McManus<span class="hljs-string">&#x27;s fastest times are: [&#x27;</span><span class="hljs-number">2.22</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.31</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-number">2.38</span><span class="hljs-string">&#x27;]</span><span class="hljs-string">Sarah Sweeney&#x27;</span>s fastest times are: [<span class="hljs-string">&#x27;2.18&#x27;</span>, <span class="hljs-string">&#x27;2.21&#x27;</span>, <span class="hljs-string">&#x27;2.22&#x27;</span>]</code></pre><h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><pre><code class="hljs python"><span class="hljs-keyword">import</span> sqlite3db_name = <span class="hljs-string">&#x27;coachdata.sqlite&#x27;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_names_from_store</span>():</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    从sqlite数据库的athletes表中获取姓名信息</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    connection = sqlite3.connect(db_name)    cursor = connection.cursor()    <span class="hljs-comment"># 抽取数据</span>    results = cursor.execute(<span class="hljs-string">&quot;&quot;&quot;SELECT name FROM athletes&quot;&quot;&quot;</span>)    response = [row[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> results.fetchall()]    connection.close()    <span class="hljs-keyword">return</span> responseresult_name = get_names_from_store()print(result_name)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_names_id_from_store</span>():</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    从sqlite数据库的athletes表中获取姓名和ID信息</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    connection = sqlite3.connect(db_name)    cursor = connection.cursor()    results = cursor.execute(<span class="hljs-string">&quot;&quot;&quot;SELECT name, id FROM athletes&quot;&quot;&quot;</span>)    response = results.fetchall()    connection.close()    <span class="hljs-keyword">return</span> responseresult_name = get_names_id_from_store()print(result_name)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_athlete_from_id</span>(<span class="hljs-params">athlete_id</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    获取与指定id相关的计时数据</span><span class="hljs-string">    :param athlete_id:</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    connection = sqlite3.connect(db_name)    cursor = connection.cursor()    results = cursor.execute(<span class="hljs-string">&quot;&quot;&quot;SELECT name, dob FROM athletes WHERE id=?&quot;&quot;&quot;</span>, (athlete_id,))    (name, dob) = results.fetchone()    results = cursor.execute(<span class="hljs-string">&quot;&quot;&quot;SELECT value FROM timing_data WHERE athlete_id=?&quot;&quot;&quot;</span>, (athlete_id,))    data = [row[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> results.fetchall()]    connection.close()    response = &#123;        <span class="hljs-string">&#x27;name&#x27;</span>: name,        <span class="hljs-string">&#x27;dob&#x27;</span>: dob,        <span class="hljs-string">&#x27;data&#x27;</span>: data,        <span class="hljs-string">&#x27;top3&#x27;</span>: data[<span class="hljs-number">0</span>:<span class="hljs-number">3</span>]    &#125;    <span class="hljs-keyword">return</span> responseresult_timing = get_athlete_from_id(<span class="hljs-number">2</span>)print(result_timing)<span class="hljs-comment"># 输出</span>[<span class="hljs-string">&#x27;James Lee&#x27;</span>, <span class="hljs-string">&#x27;Mikey McManus&#x27;</span>, <span class="hljs-string">&#x27;Sarah Sweeney&#x27;</span>, <span class="hljs-string">&#x27;Julie Jones&#x27;</span>, <span class="hljs-string">&#x27;James Lee&#x27;</span>, <span class="hljs-string">&#x27;Mikey McManus&#x27;</span>, <span class="hljs-string">&#x27;Sarah Sweeney&#x27;</span>, <span class="hljs-string">&#x27;Julie Jones&#x27;</span>][(<span class="hljs-string">&#x27;James Lee&#x27;</span>, <span class="hljs-number">1</span>), (<span class="hljs-string">&#x27;Mikey McManus&#x27;</span>, <span class="hljs-number">2</span>), (<span class="hljs-string">&#x27;Sarah Sweeney&#x27;</span>, <span class="hljs-number">3</span>), (<span class="hljs-string">&#x27;Julie Jones&#x27;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&#x27;James Lee&#x27;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&#x27;Mikey McManus&#x27;</span>, <span class="hljs-number">6</span>), (<span class="hljs-string">&#x27;Sarah Sweeney&#x27;</span>, <span class="hljs-number">7</span>), (<span class="hljs-string">&#x27;Julie Jones&#x27;</span>, <span class="hljs-number">8</span>)]&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;Mikey McManus&#x27;</span>, <span class="hljs-string">&#x27;dob&#x27;</span>: <span class="hljs-string">&#x27;2002-2-24&#x27;</span>, <span class="hljs-string">&#x27;data&#x27;</span>: [<span class="hljs-string">&#x27;2.22&#x27;</span>, <span class="hljs-string">&#x27;2.31&#x27;</span>, <span class="hljs-string">&#x27;2.38&#x27;</span>, <span class="hljs-string">&#x27;2.40&#x27;</span>, <span class="hljs-string">&#x27;2.49&#x27;</span>, <span class="hljs-string">&#x27;3.01&#x27;</span>, <span class="hljs-string">&#x27;3.02&#x27;</span>, <span class="hljs-string">&#x27;3.22&#x27;</span>], <span class="hljs-string">&#x27;top3&#x27;</span>: [<span class="hljs-string">&#x27;2.22&#x27;</span>, <span class="hljs-string">&#x27;2.31&#x27;</span>, <span class="hljs-string">&#x27;2.38&#x27;</span>]&#125;</code></pre><h3 id="处理复杂数据"><a href="#处理复杂数据" class="headerlink" title="处理复杂数据"></a>处理复杂数据</h3><p>从input读入数据，匹配最近的运动时间数据。</p><pre><code class="hljs python"><span class="hljs-comment"># 数据：PaceData.csv</span>V02,<span class="hljs-number">84.8</span>,<span class="hljs-number">82.9</span>,<span class="hljs-number">81.1</span>,<span class="hljs-number">79.3</span>,<span class="hljs-number">77.5</span>,<span class="hljs-number">75.8</span>,<span class="hljs-number">74.2</span>,<span class="hljs-number">72.5</span>,<span class="hljs-number">70.9</span>,<span class="hljs-number">69.4</span>,<span class="hljs-number">67.9</span>,<span class="hljs-number">66.4</span>,<span class="hljs-number">64.9</span>,<span class="hljs-number">63.5</span>,<span class="hljs-number">62.1</span>,<span class="hljs-number">60.7</span>,<span class="hljs-number">59.4</span>,<span class="hljs-number">58.1</span>,<span class="hljs-number">56.8</span>,<span class="hljs-number">55.5</span>,<span class="hljs-number">54.3</span>,<span class="hljs-number">53.1</span>,<span class="hljs-number">52</span>,<span class="hljs-number">50.8</span>,<span class="hljs-number">49.7</span>,<span class="hljs-number">48.6</span>,<span class="hljs-number">47.5</span>,<span class="hljs-number">46.5</span>,<span class="hljs-number">45.5</span>,<span class="hljs-number">44.5</span>,<span class="hljs-number">43.5</span>,<span class="hljs-number">42.5</span>,<span class="hljs-number">41.6</span>,<span class="hljs-number">40.7</span>,<span class="hljs-number">39.8</span>,<span class="hljs-number">38.9</span>,<span class="hljs-number">38</span>,<span class="hljs-number">37.2</span>,<span class="hljs-number">36.4</span>,<span class="hljs-number">35.6</span>,<span class="hljs-number">34.8</span>,<span class="hljs-number">34</span>,<span class="hljs-number">33.3</span>,<span class="hljs-number">32.6</span>,<span class="hljs-number">31.8</span>,<span class="hljs-number">31.1</span>,<span class="hljs-number">30.5</span>,<span class="hljs-number">29.8</span>,<span class="hljs-number">29.1</span>,<span class="hljs-number">28.5</span><span class="hljs-number">2</span>mi,<span class="hljs-number">8</span>:<span class="hljs-number">00</span>,<span class="hljs-number">8</span>:<span class="hljs-number">10</span>,<span class="hljs-number">8</span>:<span class="hljs-number">21</span>,<span class="hljs-number">8</span>:<span class="hljs-number">33</span>,<span class="hljs-number">8</span>:<span class="hljs-number">44</span>,<span class="hljs-number">8</span>:<span class="hljs-number">56</span>,<span class="hljs-number">9</span>:<span class="hljs-number">08</span>,<span class="hljs-number">9</span>:<span class="hljs-number">20</span>,<span class="hljs-number">9</span>:<span class="hljs-number">33</span>,<span class="hljs-number">9</span>:<span class="hljs-number">46</span>,<span class="hljs-number">9</span>:<span class="hljs-number">59</span>,<span class="hljs-number">10</span>:<span class="hljs-number">13</span>,<span class="hljs-number">10</span>:<span class="hljs-number">26</span>,<span class="hljs-number">10</span>:<span class="hljs-number">41</span>,<span class="hljs-number">10</span>:<span class="hljs-number">55</span>,<span class="hljs-number">11</span>:<span class="hljs-number">10</span>,<span class="hljs-number">11</span>:<span class="hljs-number">25</span>,<span class="hljs-number">11</span>:<span class="hljs-number">40</span>,<span class="hljs-number">11</span>:<span class="hljs-number">56</span>,<span class="hljs-number">12</span>:<span class="hljs-number">12</span>,<span class="hljs-number">12</span>:<span class="hljs-number">29</span>,<span class="hljs-number">12</span>:<span class="hljs-number">45</span>,<span class="hljs-number">13</span>:<span class="hljs-number">03</span>,<span class="hljs-number">13</span>:<span class="hljs-number">20</span>,<span class="hljs-number">13</span>:<span class="hljs-number">38</span>,<span class="hljs-number">13</span>:<span class="hljs-number">57</span>,<span class="hljs-number">14</span>:<span class="hljs-number">16</span>,<span class="hljs-number">14</span>:<span class="hljs-number">35</span>,<span class="hljs-number">14</span>:<span class="hljs-number">54</span>,<span class="hljs-number">15</span>:<span class="hljs-number">15</span>,<span class="hljs-number">15</span>:<span class="hljs-number">35</span>,<span class="hljs-number">15</span>:<span class="hljs-number">56</span>,<span class="hljs-number">16</span>:<span class="hljs-number">18</span>,<span class="hljs-number">16</span>:<span class="hljs-number">40</span>,<span class="hljs-number">17</span>:<span class="hljs-number">02</span>,<span class="hljs-number">17</span>:<span class="hljs-number">25</span>,<span class="hljs-number">17</span>:<span class="hljs-number">49</span>,<span class="hljs-number">18</span>:<span class="hljs-number">13</span>,<span class="hljs-number">18</span>:<span class="hljs-number">38</span>,<span class="hljs-number">19</span>:<span class="hljs-number">03</span>,<span class="hljs-number">19</span>:<span class="hljs-number">28</span>,<span class="hljs-number">19</span>:<span class="hljs-number">55</span>,<span class="hljs-number">20</span>:<span class="hljs-number">22</span>,<span class="hljs-number">20</span>:<span class="hljs-number">49</span>,<span class="hljs-number">21</span>:<span class="hljs-number">17</span>,<span class="hljs-number">21</span>:<span class="hljs-number">46</span>,<span class="hljs-number">22</span>:<span class="hljs-number">15</span>,<span class="hljs-number">22</span>:<span class="hljs-number">45</span>,<span class="hljs-number">23</span>:<span class="hljs-number">16</span>,<span class="hljs-number">23</span>:<span class="hljs-number">48</span><span class="hljs-number">5</span>k,<span class="hljs-number">12</span>:<span class="hljs-number">49</span>,<span class="hljs-number">13</span>:<span class="hljs-number">06</span>,<span class="hljs-number">13</span>:<span class="hljs-number">24</span>,<span class="hljs-number">13</span>:<span class="hljs-number">42</span>,<span class="hljs-number">14</span>:<span class="hljs-number">00</span>,<span class="hljs-number">14</span>:<span class="hljs-number">19</span>,<span class="hljs-number">14</span>:<span class="hljs-number">38</span>,<span class="hljs-number">14</span>:<span class="hljs-number">58</span>,<span class="hljs-number">15</span>:<span class="hljs-number">18</span>,<span class="hljs-number">15</span>:<span class="hljs-number">39</span>,<span class="hljs-number">16</span>:<span class="hljs-number">00</span>,<span class="hljs-number">16</span>:<span class="hljs-number">22</span>,<span class="hljs-number">16</span>:<span class="hljs-number">44</span>,<span class="hljs-number">17</span>:<span class="hljs-number">06</span>,<span class="hljs-number">17</span>:<span class="hljs-number">30</span>,<span class="hljs-number">17</span>:<span class="hljs-number">53</span>,<span class="hljs-number">18</span>:<span class="hljs-number">17</span>,<span class="hljs-number">18</span>:<span class="hljs-number">42</span>,<span class="hljs-number">19</span>:<span class="hljs-number">07</span>,<span class="hljs-number">19</span>:<span class="hljs-number">33</span>,<span class="hljs-number">20</span>:<span class="hljs-number">00</span>,<span class="hljs-number">20</span>:<span class="hljs-number">27</span>,<span class="hljs-number">20</span>:<span class="hljs-number">54</span>,<span class="hljs-number">21</span>:<span class="hljs-number">22</span>,<span class="hljs-number">21</span>:<span class="hljs-number">51</span>,<span class="hljs-number">22</span>:<span class="hljs-number">21</span>,<span class="hljs-number">22</span>:<span class="hljs-number">51</span>,<span class="hljs-number">23</span>:<span class="hljs-number">22</span>,<span class="hljs-number">23</span>:<span class="hljs-number">53</span>,<span class="hljs-number">24</span>:<span class="hljs-number">26</span>,<span class="hljs-number">24</span>:<span class="hljs-number">59</span>,<span class="hljs-number">25</span>:<span class="hljs-number">32</span>,<span class="hljs-number">26</span>:<span class="hljs-number">07</span>,<span class="hljs-number">26</span>:<span class="hljs-number">42</span>,<span class="hljs-number">27</span>:<span class="hljs-number">18</span>,<span class="hljs-number">27</span>:<span class="hljs-number">55</span>,<span class="hljs-number">28</span>:<span class="hljs-number">33</span>,<span class="hljs-number">29</span>:<span class="hljs-number">11</span>,<span class="hljs-number">29</span>:<span class="hljs-number">51</span>,<span class="hljs-number">30</span>:<span class="hljs-number">31</span>,<span class="hljs-number">31</span>:<span class="hljs-number">12</span>,<span class="hljs-number">31</span>:<span class="hljs-number">54</span>,<span class="hljs-number">32</span>:<span class="hljs-number">37</span>,<span class="hljs-number">33</span>:<span class="hljs-number">22</span>,<span class="hljs-number">34</span>:<span class="hljs-number">07</span>,<span class="hljs-number">34</span>:<span class="hljs-number">53</span>,<span class="hljs-number">35</span>:<span class="hljs-number">40</span>,<span class="hljs-number">36</span>:<span class="hljs-number">28</span>,<span class="hljs-number">37</span>:<span class="hljs-number">17</span>,<span class="hljs-number">38</span>:<span class="hljs-number">07</span><span class="hljs-number">5</span>mi,<span class="hljs-number">21</span>:<span class="hljs-number">19</span>,<span class="hljs-number">21</span>:<span class="hljs-number">48</span>,<span class="hljs-number">22</span>:<span class="hljs-number">17</span>,<span class="hljs-number">22</span>:<span class="hljs-number">47</span>,<span class="hljs-number">23</span>:<span class="hljs-number">18</span>,<span class="hljs-number">23</span>:<span class="hljs-number">50</span>,<span class="hljs-number">24</span>:<span class="hljs-number">22</span>,<span class="hljs-number">24</span>:<span class="hljs-number">55</span>,<span class="hljs-number">25</span>:<span class="hljs-number">28</span>,<span class="hljs-number">26</span>:<span class="hljs-number">03</span>,<span class="hljs-number">26</span>:<span class="hljs-number">38</span>,<span class="hljs-number">27</span>:<span class="hljs-number">14</span>,<span class="hljs-number">27</span>:<span class="hljs-number">51</span>,<span class="hljs-number">28</span>:<span class="hljs-number">28</span>,<span class="hljs-number">29</span>:<span class="hljs-number">07</span>,<span class="hljs-number">29</span>:<span class="hljs-number">46</span>,<span class="hljs-number">30</span>:<span class="hljs-number">26</span>,<span class="hljs-number">31</span>:<span class="hljs-number">07</span>,<span class="hljs-number">31</span>:<span class="hljs-number">49</span>,<span class="hljs-number">32</span>:<span class="hljs-number">32</span>,<span class="hljs-number">33</span>:<span class="hljs-number">16</span>,<span class="hljs-number">34</span>:<span class="hljs-number">01</span>,<span class="hljs-number">34</span>:<span class="hljs-number">47</span>,<span class="hljs-number">35</span>:<span class="hljs-number">34</span>,<span class="hljs-number">36</span>:<span class="hljs-number">22</span>,<span class="hljs-number">37</span>:<span class="hljs-number">11</span>,<span class="hljs-number">38</span>:<span class="hljs-number">01</span>,<span class="hljs-number">38</span>:<span class="hljs-number">53</span>,<span class="hljs-number">39</span>:<span class="hljs-number">45</span>,<span class="hljs-number">40</span>:<span class="hljs-number">39</span>,<span class="hljs-number">41</span>:<span class="hljs-number">34</span>,<span class="hljs-number">42</span>:<span class="hljs-number">30</span>,<span class="hljs-number">43</span>:<span class="hljs-number">27</span>,<span class="hljs-number">44</span>:<span class="hljs-number">26</span>,<span class="hljs-number">45</span>:<span class="hljs-number">26</span>,<span class="hljs-number">46</span>:<span class="hljs-number">27</span>,<span class="hljs-number">47</span>:<span class="hljs-number">30</span>,<span class="hljs-number">48</span>:<span class="hljs-number">34</span>,<span class="hljs-number">49</span>:<span class="hljs-number">40</span>,<span class="hljs-number">50</span>:<span class="hljs-number">47</span>,<span class="hljs-number">51</span>:<span class="hljs-number">55</span>,<span class="hljs-number">53</span>:<span class="hljs-number">05</span>,<span class="hljs-number">54</span>:<span class="hljs-number">17</span>,<span class="hljs-number">55</span>:<span class="hljs-number">30</span>,<span class="hljs-number">56</span>:<span class="hljs-number">45</span>,<span class="hljs-number">58</span>:<span class="hljs-number">02</span>,<span class="hljs-number">59</span>:<span class="hljs-number">20</span>,<span class="hljs-number">1</span>:<span class="hljs-number">00</span>:<span class="hljs-number">40</span>,<span class="hljs-number">1</span>:<span class="hljs-number">02</span>:<span class="hljs-number">02</span>,<span class="hljs-number">1</span>:<span class="hljs-number">03</span>:<span class="hljs-number">26</span><span class="hljs-number">10</span>k,<span class="hljs-number">26</span>:<span class="hljs-number">54</span>,<span class="hljs-number">27</span>:<span class="hljs-number">30</span>,<span class="hljs-number">28</span>:<span class="hljs-number">08</span>,<span class="hljs-number">28</span>:<span class="hljs-number">45</span>,<span class="hljs-number">29</span>:<span class="hljs-number">24</span>,<span class="hljs-number">30</span>:<span class="hljs-number">04</span>,<span class="hljs-number">30</span>:<span class="hljs-number">45</span>,<span class="hljs-number">31</span>:<span class="hljs-number">26</span>,<span class="hljs-number">32</span>:<span class="hljs-number">09</span>,<span class="hljs-number">32</span>:<span class="hljs-number">52</span>,<span class="hljs-number">33</span>:<span class="hljs-number">36</span>,<span class="hljs-number">34</span>:<span class="hljs-number">22</span>,<span class="hljs-number">35</span>:<span class="hljs-number">08</span>,<span class="hljs-number">35</span>:<span class="hljs-number">56</span>,<span class="hljs-number">36</span>:<span class="hljs-number">44</span>,<span class="hljs-number">37</span>:<span class="hljs-number">34</span>,<span class="hljs-number">38</span>:<span class="hljs-number">24</span>,<span class="hljs-number">39</span>:<span class="hljs-number">16</span>,<span class="hljs-number">40</span>:<span class="hljs-number">09</span>,<span class="hljs-number">41</span>:<span class="hljs-number">04</span>,<span class="hljs-number">41</span>:<span class="hljs-number">59</span>,<span class="hljs-number">42</span>:<span class="hljs-number">56</span>,<span class="hljs-number">43</span>:<span class="hljs-number">54</span>,<span class="hljs-number">44</span>:<span class="hljs-number">53</span>,<span class="hljs-number">45</span>:<span class="hljs-number">54</span>,<span class="hljs-number">46</span>:<span class="hljs-number">55</span>,<span class="hljs-number">47</span>:<span class="hljs-number">59</span>,<span class="hljs-number">49</span>:<span class="hljs-number">04</span>,<span class="hljs-number">50</span>:<span class="hljs-number">10</span>,<span class="hljs-number">51</span>:<span class="hljs-number">18</span>,<span class="hljs-number">52</span>:<span class="hljs-number">27</span>,<span class="hljs-number">53</span>:<span class="hljs-number">38</span>,<span class="hljs-number">54</span>:<span class="hljs-number">50</span>,<span class="hljs-number">56</span>:<span class="hljs-number">04</span>,<span class="hljs-number">57</span>:<span class="hljs-number">20</span>,<span class="hljs-number">58</span>:<span class="hljs-number">37</span>,<span class="hljs-number">59</span>:<span class="hljs-number">56</span>,<span class="hljs-number">1</span>:<span class="hljs-number">01</span>:<span class="hljs-number">17</span>,<span class="hljs-number">1</span>:<span class="hljs-number">02</span>:<span class="hljs-number">40</span>,<span class="hljs-number">1</span>:<span class="hljs-number">04</span>:<span class="hljs-number">05</span>,<span class="hljs-number">1</span>:<span class="hljs-number">05</span>:<span class="hljs-number">31</span>,<span class="hljs-number">1</span>:<span class="hljs-number">07</span>:<span class="hljs-number">00</span>,<span class="hljs-number">1</span>:<span class="hljs-number">08</span>:<span class="hljs-number">30</span>,<span class="hljs-number">1</span>:<span class="hljs-number">10</span>:<span class="hljs-number">03</span>,<span class="hljs-number">1</span>:<span class="hljs-number">11</span>:<span class="hljs-number">37</span>,<span class="hljs-number">1</span>:<span class="hljs-number">13</span>:<span class="hljs-number">14</span>,<span class="hljs-number">1</span>:<span class="hljs-number">14</span>:<span class="hljs-number">53</span>,<span class="hljs-number">1</span>:<span class="hljs-number">16</span>:<span class="hljs-number">34</span>,<span class="hljs-number">1</span>:<span class="hljs-number">18</span>:<span class="hljs-number">17</span>,<span class="hljs-number">1</span>:<span class="hljs-number">20</span>:<span class="hljs-number">03</span><span class="hljs-number">15</span>k,<span class="hljs-number">41</span>:<span class="hljs-number">31</span>,<span class="hljs-number">42</span>:<span class="hljs-number">27</span>,<span class="hljs-number">43</span>:<span class="hljs-number">24</span>,<span class="hljs-number">44</span>:<span class="hljs-number">23</span>,<span class="hljs-number">45</span>:<span class="hljs-number">23</span>,<span class="hljs-number">46</span>:<span class="hljs-number">24</span>,<span class="hljs-number">47</span>:<span class="hljs-number">27</span>,<span class="hljs-number">48</span>:<span class="hljs-number">31</span>,<span class="hljs-number">49</span>:<span class="hljs-number">36</span>,<span class="hljs-number">50</span>:<span class="hljs-number">43</span>,<span class="hljs-number">51</span>:<span class="hljs-number">52</span>,<span class="hljs-number">53</span>:<span class="hljs-number">02</span>,<span class="hljs-number">54</span>:<span class="hljs-number">14</span>,<span class="hljs-number">55</span>:<span class="hljs-number">27</span>,<span class="hljs-number">56</span>:<span class="hljs-number">42</span>,<span class="hljs-number">57</span>:<span class="hljs-number">58</span>,<span class="hljs-number">59</span>:<span class="hljs-number">16</span>,<span class="hljs-number">1</span>:<span class="hljs-number">00</span>:<span class="hljs-number">36</span>,<span class="hljs-number">1</span>:<span class="hljs-number">01</span>:<span class="hljs-number">58</span>,<span class="hljs-number">1</span>:<span class="hljs-number">03</span>:<span class="hljs-number">22</span>,<span class="hljs-number">1</span>:<span class="hljs-number">04</span>:<span class="hljs-number">48</span>,<span class="hljs-number">1</span>:<span class="hljs-number">06</span>:<span class="hljs-number">15</span>,<span class="hljs-number">1</span>:<span class="hljs-number">07</span>:<span class="hljs-number">44</span>,<span class="hljs-number">1</span>:<span class="hljs-number">09</span>:<span class="hljs-number">16</span>,<span class="hljs-number">1</span>:<span class="hljs-number">10</span>:<span class="hljs-number">49</span>,<span class="hljs-number">1</span>:<span class="hljs-number">12</span>:<span class="hljs-number">25</span>,<span class="hljs-number">1</span>:<span class="hljs-number">14</span>:<span class="hljs-number">03</span>,<span class="hljs-number">1</span>:<span class="hljs-number">15</span>:<span class="hljs-number">43</span>,<span class="hljs-number">1</span>:<span class="hljs-number">17</span>:<span class="hljs-number">25</span>,<span class="hljs-number">1</span>:<span class="hljs-number">19</span>:<span class="hljs-number">10</span>,<span class="hljs-number">1</span>:<span class="hljs-number">20</span>:<span class="hljs-number">56</span>,<span class="hljs-number">1</span>:<span class="hljs-number">22</span>:<span class="hljs-number">46</span>,<span class="hljs-number">1</span>:<span class="hljs-number">24</span>:<span class="hljs-number">37</span>,<span class="hljs-number">1</span>:<span class="hljs-number">26</span>:<span class="hljs-number">32</span>,<span class="hljs-number">1</span>:<span class="hljs-number">28</span>:<span class="hljs-number">29</span>,<span class="hljs-number">1</span>:<span class="hljs-number">30</span>:<span class="hljs-number">28</span>,<span class="hljs-number">1</span>:<span class="hljs-number">32</span>:<span class="hljs-number">30</span>,<span class="hljs-number">1</span>:<span class="hljs-number">34</span>:<span class="hljs-number">35</span>,<span class="hljs-number">1</span>:<span class="hljs-number">36</span>:<span class="hljs-number">43</span>,<span class="hljs-number">1</span>:<span class="hljs-number">38</span>:<span class="hljs-number">53</span>,<span class="hljs-number">1</span>:<span class="hljs-number">41</span>:<span class="hljs-number">07</span>,<span class="hljs-number">1</span>:<span class="hljs-number">43</span>:<span class="hljs-number">23</span>,<span class="hljs-number">1</span>:<span class="hljs-number">45</span>:<span class="hljs-number">43</span>,<span class="hljs-number">1</span>:<span class="hljs-number">48</span>:<span class="hljs-number">06</span>,<span class="hljs-number">1</span>:<span class="hljs-number">50</span>:<span class="hljs-number">32</span>,<span class="hljs-number">1</span>:<span class="hljs-number">53</span>:<span class="hljs-number">01</span>,<span class="hljs-number">1</span>:<span class="hljs-number">55</span>:<span class="hljs-number">33</span>,<span class="hljs-number">1</span>:<span class="hljs-number">58</span>:<span class="hljs-number">09</span>,<span class="hljs-number">2</span>:<span class="hljs-number">00</span>:<span class="hljs-number">49</span>,<span class="hljs-number">2</span>:<span class="hljs-number">03</span>:<span class="hljs-number">32</span><span class="hljs-number">10</span>mi,<span class="hljs-number">44</span>:<span class="hljs-number">46</span>,<span class="hljs-number">45</span>:<span class="hljs-number">46</span>,<span class="hljs-number">46</span>:<span class="hljs-number">48</span>,<span class="hljs-number">47</span>:<span class="hljs-number">51</span>,<span class="hljs-number">48</span>:<span class="hljs-number">56</span>,<span class="hljs-number">50</span>:<span class="hljs-number">02</span>,<span class="hljs-number">51</span>:<span class="hljs-number">09</span>,<span class="hljs-number">52</span>:<span class="hljs-number">18</span>,<span class="hljs-number">53</span>:<span class="hljs-number">29</span>,<span class="hljs-number">54</span>:<span class="hljs-number">41</span>,<span class="hljs-number">55</span>:<span class="hljs-number">55</span>,<span class="hljs-number">57</span>:<span class="hljs-number">11</span>,<span class="hljs-number">58</span>:<span class="hljs-number">28</span>,<span class="hljs-number">59</span>:<span class="hljs-number">47</span>,<span class="hljs-number">1</span>:<span class="hljs-number">01</span>:<span class="hljs-number">07</span>,<span class="hljs-number">1</span>:<span class="hljs-number">02</span>:<span class="hljs-number">30</span>,<span class="hljs-number">1</span>:<span class="hljs-number">03</span>:<span class="hljs-number">54</span>,<span class="hljs-number">1</span>:<span class="hljs-number">05</span>:<span class="hljs-number">21</span>,<span class="hljs-number">1</span>:<span class="hljs-number">06</span>:<span class="hljs-number">49</span>,<span class="hljs-number">1</span>:<span class="hljs-number">08</span>:<span class="hljs-number">19</span>,<span class="hljs-number">1</span>:<span class="hljs-number">09</span>:<span class="hljs-number">51</span>,<span class="hljs-number">1</span>:<span class="hljs-number">11</span>:<span class="hljs-number">26</span>,<span class="hljs-number">1</span>:<span class="hljs-number">13</span>:<span class="hljs-number">02</span>,<span class="hljs-number">1</span>:<span class="hljs-number">14</span>:<span class="hljs-number">41</span>,<span class="hljs-number">1</span>:<span class="hljs-number">16</span>:<span class="hljs-number">22</span>,<span class="hljs-number">1</span>:<span class="hljs-number">18</span>:<span class="hljs-number">05</span>,<span class="hljs-number">1</span>:<span class="hljs-number">19</span>:<span class="hljs-number">50</span>,<span class="hljs-number">1</span>:<span class="hljs-number">21</span>:<span class="hljs-number">38</span>,<span class="hljs-number">1</span>:<span class="hljs-number">23</span>:<span class="hljs-number">28</span>,<span class="hljs-number">1</span>:<span class="hljs-number">25</span>:<span class="hljs-number">21</span>,<span class="hljs-number">1</span>:<span class="hljs-number">27</span>:<span class="hljs-number">16</span>,<span class="hljs-number">1</span>:<span class="hljs-number">29</span>:<span class="hljs-number">14</span>,<span class="hljs-number">1</span>:<span class="hljs-number">31</span>:<span class="hljs-number">14</span>,<span class="hljs-number">1</span>:<span class="hljs-number">33</span>:<span class="hljs-number">17</span>,<span class="hljs-number">1</span>:<span class="hljs-number">35</span>:<span class="hljs-number">23</span>,<span class="hljs-number">1</span>:<span class="hljs-number">37</span>:<span class="hljs-number">32</span>,<span class="hljs-number">1</span>:<span class="hljs-number">39</span>:<span class="hljs-number">44</span>,<span class="hljs-number">1</span>:<span class="hljs-number">41</span>:<span class="hljs-number">59</span>,<span class="hljs-number">1</span>:<span class="hljs-number">44</span>:<span class="hljs-number">16</span>,<span class="hljs-number">1</span>:<span class="hljs-number">46</span>:<span class="hljs-number">37</span>,<span class="hljs-number">1</span>:<span class="hljs-number">49</span>:<span class="hljs-number">01</span>,<span class="hljs-number">1</span>:<span class="hljs-number">51</span>:<span class="hljs-number">28</span>,<span class="hljs-number">1</span>:<span class="hljs-number">53</span>:<span class="hljs-number">59</span>,<span class="hljs-number">1</span>:<span class="hljs-number">56</span>:<span class="hljs-number">32</span>,<span class="hljs-number">1</span>:<span class="hljs-number">59</span>:<span class="hljs-number">10</span>,<span class="hljs-number">2</span>:<span class="hljs-number">01</span>:<span class="hljs-number">51</span>,<span class="hljs-number">2</span>:<span class="hljs-number">04</span>:<span class="hljs-number">35</span>,<span class="hljs-number">2</span>:<span class="hljs-number">07</span>:<span class="hljs-number">23</span>,<span class="hljs-number">2</span>:<span class="hljs-number">10</span>:<span class="hljs-number">15</span>,<span class="hljs-number">2</span>:<span class="hljs-number">13</span>:<span class="hljs-number">11</span><span class="hljs-number">20</span>k,<span class="hljs-number">56</span>:<span class="hljs-number">29</span>,<span class="hljs-number">57</span>:<span class="hljs-number">45</span>,<span class="hljs-number">59</span>:<span class="hljs-number">03</span>,<span class="hljs-number">1</span>:<span class="hljs-number">00</span>:<span class="hljs-number">23</span>,<span class="hljs-number">1</span>:<span class="hljs-number">01</span>:<span class="hljs-number">45</span>,<span class="hljs-number">1</span>:<span class="hljs-number">03</span>:<span class="hljs-number">08</span>,<span class="hljs-number">1</span>:<span class="hljs-number">04</span>:<span class="hljs-number">33</span>,<span class="hljs-number">1</span>:<span class="hljs-number">06</span>:<span class="hljs-number">00</span>,<span class="hljs-number">1</span>:<span class="hljs-number">07</span>:<span class="hljs-number">29</span>,<span class="hljs-number">1</span>:<span class="hljs-number">09</span>:<span class="hljs-number">01</span>,<span class="hljs-number">1</span>:<span class="hljs-number">10</span>:<span class="hljs-number">34</span>,<span class="hljs-number">1</span>:<span class="hljs-number">12</span>:<span class="hljs-number">09</span>,<span class="hljs-number">1</span>:<span class="hljs-number">13</span>:<span class="hljs-number">46</span>,<span class="hljs-number">1</span>:<span class="hljs-number">15</span>:<span class="hljs-number">26</span>,<span class="hljs-number">1</span>:<span class="hljs-number">17</span>:<span class="hljs-number">08</span>,<span class="hljs-number">1</span>:<span class="hljs-number">18</span>:<span class="hljs-number">52</span>,<span class="hljs-number">1</span>:<span class="hljs-number">20</span>:<span class="hljs-number">39</span>,<span class="hljs-number">1</span>:<span class="hljs-number">22</span>:<span class="hljs-number">27</span>,<span class="hljs-number">1</span>:<span class="hljs-number">24</span>:<span class="hljs-number">19</span>,<span class="hljs-number">1</span>:<span class="hljs-number">26</span>:<span class="hljs-number">13</span>,<span class="hljs-number">1</span>:<span class="hljs-number">28</span>:<span class="hljs-number">09</span>,<span class="hljs-number">1</span>:<span class="hljs-number">30</span>:<span class="hljs-number">08</span>,<span class="hljs-number">1</span>:<span class="hljs-number">32</span>:<span class="hljs-number">10</span>,<span class="hljs-number">1</span>:<span class="hljs-number">34</span>:<span class="hljs-number">14</span>,<span class="hljs-number">1</span>:<span class="hljs-number">36</span>:<span class="hljs-number">21</span>,<span class="hljs-number">1</span>:<span class="hljs-number">38</span>:<span class="hljs-number">31</span>,<span class="hljs-number">1</span>:<span class="hljs-number">40</span>:<span class="hljs-number">44</span>,<span class="hljs-number">1</span>:<span class="hljs-number">43</span>:<span class="hljs-number">00</span>,<span class="hljs-number">1</span>:<span class="hljs-number">45</span>:<span class="hljs-number">20</span>,<span class="hljs-number">1</span>:<span class="hljs-number">47</span>:<span class="hljs-number">42</span>,<span class="hljs-number">1</span>:<span class="hljs-number">50</span>:<span class="hljs-number">07</span>,<span class="hljs-number">1</span>:<span class="hljs-number">52</span>:<span class="hljs-number">36</span>,<span class="hljs-number">1</span>:<span class="hljs-number">55</span>:<span class="hljs-number">08</span>,<span class="hljs-number">1</span>:<span class="hljs-number">57</span>:<span class="hljs-number">43</span>,<span class="hljs-number">2</span>:<span class="hljs-number">00</span>:<span class="hljs-number">22</span>,<span class="hljs-number">2</span>:<span class="hljs-number">03</span>:<span class="hljs-number">05</span>,<span class="hljs-number">2</span>:<span class="hljs-number">05</span>:<span class="hljs-number">51</span>,<span class="hljs-number">2</span>:<span class="hljs-number">08</span>:<span class="hljs-number">41</span>,<span class="hljs-number">2</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span>,<span class="hljs-number">2</span>:<span class="hljs-number">14</span>:<span class="hljs-number">32</span>,<span class="hljs-number">2</span>:<span class="hljs-number">17</span>:<span class="hljs-number">34</span>,<span class="hljs-number">2</span>:<span class="hljs-number">20</span>:<span class="hljs-number">40</span>,<span class="hljs-number">2</span>:<span class="hljs-number">23</span>:<span class="hljs-number">49</span>,<span class="hljs-number">2</span>:<span class="hljs-number">27</span>:<span class="hljs-number">04</span>,<span class="hljs-number">2</span>:<span class="hljs-number">30</span>:<span class="hljs-number">22</span>,<span class="hljs-number">2</span>:<span class="hljs-number">33</span>:<span class="hljs-number">45</span>,<span class="hljs-number">2</span>:<span class="hljs-number">37</span>:<span class="hljs-number">13</span>,<span class="hljs-number">2</span>:<span class="hljs-number">40</span>:<span class="hljs-number">45</span>,<span class="hljs-number">2</span>:<span class="hljs-number">44</span>:<span class="hljs-number">22</span>,<span class="hljs-number">2</span>:<span class="hljs-number">48</span>:<span class="hljs-number">04</span><span class="hljs-number">13.1</span>mi,<span class="hljs-number">59</span>:<span class="hljs-number">49</span>,<span class="hljs-number">1</span>:<span class="hljs-number">01</span>:<span class="hljs-number">09</span>,<span class="hljs-number">1</span>:<span class="hljs-number">02</span>:<span class="hljs-number">32</span>,<span class="hljs-number">1</span>:<span class="hljs-number">03</span>:<span class="hljs-number">56</span>,<span class="hljs-number">1</span>:<span class="hljs-number">05</span>:<span class="hljs-number">23</span>,<span class="hljs-number">1</span>:<span class="hljs-number">06</span>:<span class="hljs-number">51</span>,<span class="hljs-number">1</span>:<span class="hljs-number">08</span>:<span class="hljs-number">21</span>,<span class="hljs-number">1</span>:<span class="hljs-number">09</span>:<span class="hljs-number">53</span>,<span class="hljs-number">1</span>:<span class="hljs-number">11</span>:<span class="hljs-number">28</span>,<span class="hljs-number">1</span>:<span class="hljs-number">13</span>:<span class="hljs-number">04</span>,<span class="hljs-number">1</span>:<span class="hljs-number">14</span>:<span class="hljs-number">43</span>,<span class="hljs-number">1</span>:<span class="hljs-number">16</span>:<span class="hljs-number">24</span>,<span class="hljs-number">1</span>:<span class="hljs-number">18</span>:<span class="hljs-number">07</span>,<span class="hljs-number">1</span>:<span class="hljs-number">19</span>:<span class="hljs-number">52</span>,<span class="hljs-number">1</span>:<span class="hljs-number">21</span>:<span class="hljs-number">40</span>,<span class="hljs-number">1</span>:<span class="hljs-number">23</span>:<span class="hljs-number">30</span>,<span class="hljs-number">1</span>:<span class="hljs-number">25</span>:<span class="hljs-number">23</span>,<span class="hljs-number">1</span>:<span class="hljs-number">27</span>:<span class="hljs-number">19</span>,<span class="hljs-number">1</span>:<span class="hljs-number">29</span>:<span class="hljs-number">16</span>,<span class="hljs-number">1</span>:<span class="hljs-number">31</span>:<span class="hljs-number">17</span>,<span class="hljs-number">1</span>:<span class="hljs-number">33</span>:<span class="hljs-number">20</span>,<span class="hljs-number">1</span>:<span class="hljs-number">35</span>:<span class="hljs-number">26</span>,<span class="hljs-number">1</span>:<span class="hljs-number">37</span>:<span class="hljs-number">35</span>,<span class="hljs-number">1</span>:<span class="hljs-number">39</span>:<span class="hljs-number">47</span>,<span class="hljs-number">1</span>:<span class="hljs-number">42</span>:<span class="hljs-number">02</span>,<span class="hljs-number">1</span>:<span class="hljs-number">44</span>:<span class="hljs-number">19</span>,<span class="hljs-number">1</span>:<span class="hljs-number">46</span>:<span class="hljs-number">40</span>,<span class="hljs-number">1</span>:<span class="hljs-number">49</span>:<span class="hljs-number">04</span>,<span class="hljs-number">1</span>:<span class="hljs-number">51</span>:<span class="hljs-number">31</span>,<span class="hljs-number">1</span>:<span class="hljs-number">54</span>:<span class="hljs-number">02</span>,<span class="hljs-number">1</span>:<span class="hljs-number">56</span>:<span class="hljs-number">36</span>,<span class="hljs-number">1</span>:<span class="hljs-number">59</span>:<span class="hljs-number">13</span>,<span class="hljs-number">2</span>:<span class="hljs-number">01</span>:<span class="hljs-number">54</span>,<span class="hljs-number">2</span>:<span class="hljs-number">04</span>:<span class="hljs-number">39</span>,<span class="hljs-number">2</span>:<span class="hljs-number">07</span>:<span class="hljs-number">27</span>,<span class="hljs-number">2</span>:<span class="hljs-number">10</span>:<span class="hljs-number">19</span>,<span class="hljs-number">2</span>:<span class="hljs-number">13</span>:<span class="hljs-number">15</span>,<span class="hljs-number">2</span>:<span class="hljs-number">16</span>:<span class="hljs-number">15</span>,<span class="hljs-number">2</span>:<span class="hljs-number">19</span>:<span class="hljs-number">19</span>,<span class="hljs-number">2</span>:<span class="hljs-number">22</span>:<span class="hljs-number">27</span>,<span class="hljs-number">2</span>:<span class="hljs-number">25</span>:<span class="hljs-number">39</span>,<span class="hljs-number">2</span>:<span class="hljs-number">28</span>:<span class="hljs-number">56</span>,<span class="hljs-number">2</span>:<span class="hljs-number">32</span>:<span class="hljs-number">17</span>,<span class="hljs-number">2</span>:<span class="hljs-number">35</span>:<span class="hljs-number">43</span>,<span class="hljs-number">2</span>:<span class="hljs-number">39</span>:<span class="hljs-number">13</span>,<span class="hljs-number">2</span>:<span class="hljs-number">42</span>:<span class="hljs-number">48</span>,<span class="hljs-number">2</span>:<span class="hljs-number">46</span>:<span class="hljs-number">28</span>,<span class="hljs-number">2</span>:<span class="hljs-number">50</span>:<span class="hljs-number">12</span>,<span class="hljs-number">2</span>:<span class="hljs-number">54</span>:<span class="hljs-number">02</span>,<span class="hljs-number">2</span>:<span class="hljs-number">57</span>:<span class="hljs-number">57</span><span class="hljs-number">25</span>k,<span class="hljs-number">1</span>:<span class="hljs-number">11</span>:<span class="hljs-number">43</span>,<span class="hljs-number">1</span>:<span class="hljs-number">13</span>:<span class="hljs-number">20</span>,<span class="hljs-number">1</span>:<span class="hljs-number">14</span>:<span class="hljs-number">59</span>,<span class="hljs-number">1</span>:<span class="hljs-number">16</span>:<span class="hljs-number">40</span>,<span class="hljs-number">1</span>:<span class="hljs-number">18</span>:<span class="hljs-number">24</span>,<span class="hljs-number">1</span>:<span class="hljs-number">20</span>:<span class="hljs-number">10</span>,<span class="hljs-number">1</span>:<span class="hljs-number">21</span>:<span class="hljs-number">58</span>,<span class="hljs-number">1</span>:<span class="hljs-number">23</span>:<span class="hljs-number">49</span>,<span class="hljs-number">1</span>:<span class="hljs-number">25</span>:<span class="hljs-number">49</span>,<span class="hljs-number">1</span>:<span class="hljs-number">27</span>:<span class="hljs-number">37</span>,<span class="hljs-number">1</span>:<span class="hljs-number">29</span>:<span class="hljs-number">36</span>,<span class="hljs-number">1</span>:<span class="hljs-number">31</span>:<span class="hljs-number">37</span>,<span class="hljs-number">1</span>:<span class="hljs-number">33</span>:<span class="hljs-number">40</span>,<span class="hljs-number">1</span>:<span class="hljs-number">35</span>:<span class="hljs-number">47</span>,<span class="hljs-number">1</span>:<span class="hljs-number">37</span>:<span class="hljs-number">56</span>,<span class="hljs-number">1</span>:<span class="hljs-number">40</span>:<span class="hljs-number">08</span>,<span class="hljs-number">1</span>:<span class="hljs-number">42</span>:<span class="hljs-number">24</span>,<span class="hljs-number">1</span>:<span class="hljs-number">44</span>:<span class="hljs-number">42</span>,<span class="hljs-number">1</span>:<span class="hljs-number">47</span>:<span class="hljs-number">03</span>,<span class="hljs-number">1</span>:<span class="hljs-number">49</span>:<span class="hljs-number">28</span>,<span class="hljs-number">1</span>:<span class="hljs-number">51</span>:<span class="hljs-number">55</span>,<span class="hljs-number">1</span>:<span class="hljs-number">54</span>:<span class="hljs-number">27</span>,<span class="hljs-number">1</span>:<span class="hljs-number">57</span>:<span class="hljs-number">01</span>,<span class="hljs-number">1</span>:<span class="hljs-number">59</span>:<span class="hljs-number">39</span>,<span class="hljs-number">2</span>:<span class="hljs-number">02</span>:<span class="hljs-number">21</span>,<span class="hljs-number">2</span>:<span class="hljs-number">05</span>:<span class="hljs-number">06</span>,<span class="hljs-number">2</span>:<span class="hljs-number">07</span>:<span class="hljs-number">55</span>,<span class="hljs-number">2</span>:<span class="hljs-number">10</span>:<span class="hljs-number">47</span>,<span class="hljs-number">2</span>:<span class="hljs-number">13</span>:<span class="hljs-number">44</span>,<span class="hljs-number">2</span>:<span class="hljs-number">16</span>:<span class="hljs-number">44</span>,<span class="hljs-number">2</span>:<span class="hljs-number">19</span>:<span class="hljs-number">49</span>,<span class="hljs-number">2</span>:<span class="hljs-number">22</span>:<span class="hljs-number">58</span>,<span class="hljs-number">2</span>:<span class="hljs-number">26</span>:<span class="hljs-number">11</span>,<span class="hljs-number">2</span>:<span class="hljs-number">29</span>:<span class="hljs-number">28</span>,<span class="hljs-number">2</span>:<span class="hljs-number">32</span>:<span class="hljs-number">50</span>,<span class="hljs-number">2</span>:<span class="hljs-number">36</span>:<span class="hljs-number">16</span>,<span class="hljs-number">2</span>:<span class="hljs-number">39</span>:<span class="hljs-number">47</span>,<span class="hljs-number">2</span>:<span class="hljs-number">43</span>:<span class="hljs-number">23</span>,<span class="hljs-number">2</span>:<span class="hljs-number">47</span>:<span class="hljs-number">04</span>,<span class="hljs-number">2</span>:<span class="hljs-number">50</span>:<span class="hljs-number">49</span>,<span class="hljs-number">2</span>:<span class="hljs-number">54</span>:<span class="hljs-number">40</span>,<span class="hljs-number">2</span>:<span class="hljs-number">58</span>:<span class="hljs-number">36</span>,<span class="hljs-number">3</span>:<span class="hljs-number">02</span>:<span class="hljs-number">37</span>,<span class="hljs-number">3</span>:<span class="hljs-number">06</span>:<span class="hljs-number">43</span>,<span class="hljs-number">3</span>:<span class="hljs-number">10</span>:<span class="hljs-number">55</span>,<span class="hljs-number">3</span>:<span class="hljs-number">15</span>:<span class="hljs-number">13</span>,<span class="hljs-number">3</span>:<span class="hljs-number">19</span>:<span class="hljs-number">37</span>,<span class="hljs-number">3</span>:<span class="hljs-number">24</span>:<span class="hljs-number">06</span>,<span class="hljs-number">3</span>:<span class="hljs-number">28</span>:<span class="hljs-number">42</span>,<span class="hljs-number">3</span>:<span class="hljs-number">33</span>:<span class="hljs-number">23</span><span class="hljs-number">30</span>k,<span class="hljs-number">1</span>:<span class="hljs-number">27</span>:<span class="hljs-number">10</span>,<span class="hljs-number">1</span>:<span class="hljs-number">19</span>:<span class="hljs-number">08</span>,<span class="hljs-number">1</span>:<span class="hljs-number">31</span>:<span class="hljs-number">08</span>,<span class="hljs-number">1</span>:<span class="hljs-number">33</span>:<span class="hljs-number">11</span>,<span class="hljs-number">1</span>:<span class="hljs-number">35</span>:<span class="hljs-number">17</span>,<span class="hljs-number">1</span>:<span class="hljs-number">37</span>:<span class="hljs-number">26</span>,<span class="hljs-number">1</span>:<span class="hljs-number">39</span>:<span class="hljs-number">37</span>,<span class="hljs-number">1</span>:<span class="hljs-number">41</span>:<span class="hljs-number">52</span>,<span class="hljs-number">1</span>:<span class="hljs-number">44</span>:<span class="hljs-number">09</span>,<span class="hljs-number">1</span>:<span class="hljs-number">46</span>:<span class="hljs-number">30</span>,<span class="hljs-number">1</span>:<span class="hljs-number">48</span>:<span class="hljs-number">54</span>,<span class="hljs-number">1</span>:<span class="hljs-number">51</span>:<span class="hljs-number">21</span>,<span class="hljs-number">1</span>:<span class="hljs-number">53</span>:<span class="hljs-number">51</span>,<span class="hljs-number">1</span>:<span class="hljs-number">56</span>:<span class="hljs-number">25</span>,<span class="hljs-number">1</span>:<span class="hljs-number">59</span>:<span class="hljs-number">02</span>,<span class="hljs-number">2</span>:<span class="hljs-number">01</span>:<span class="hljs-number">43</span>,<span class="hljs-number">2</span>:<span class="hljs-number">04</span>:<span class="hljs-number">27</span>,<span class="hljs-number">2</span>:<span class="hljs-number">07</span>:<span class="hljs-number">15</span>,<span class="hljs-number">2</span>:<span class="hljs-number">10</span>:<span class="hljs-number">07</span>,<span class="hljs-number">2</span>:<span class="hljs-number">13</span>:<span class="hljs-number">03</span>,<span class="hljs-number">2</span>:<span class="hljs-number">16</span>:<span class="hljs-number">02</span>,<span class="hljs-number">2</span>:<span class="hljs-number">19</span>:<span class="hljs-number">06</span>,<span class="hljs-number">2</span>:<span class="hljs-number">22</span>:<span class="hljs-number">14</span>,<span class="hljs-number">2</span>:<span class="hljs-number">25</span>:<span class="hljs-number">26</span>,<span class="hljs-number">2</span>:<span class="hljs-number">28</span>:<span class="hljs-number">42</span>,<span class="hljs-number">2</span>:<span class="hljs-number">32</span>:<span class="hljs-number">03</span>,<span class="hljs-number">2</span>:<span class="hljs-number">35</span>:<span class="hljs-number">28</span>,<span class="hljs-number">2</span>:<span class="hljs-number">38</span>:<span class="hljs-number">58</span>,<span class="hljs-number">2</span>:<span class="hljs-number">42</span>:<span class="hljs-number">33</span>,<span class="hljs-number">2</span>:<span class="hljs-number">46</span>:<span class="hljs-number">12</span>,<span class="hljs-number">2</span>:<span class="hljs-number">49</span>:<span class="hljs-number">56</span>,<span class="hljs-number">2</span>:<span class="hljs-number">53</span>:<span class="hljs-number">46</span>,<span class="hljs-number">2</span>:<span class="hljs-number">57</span>:<span class="hljs-number">40</span>,<span class="hljs-number">3</span>:<span class="hljs-number">01</span>:<span class="hljs-number">40</span>,<span class="hljs-number">3</span>:<span class="hljs-number">05</span>:<span class="hljs-number">45</span>,<span class="hljs-number">3</span>:<span class="hljs-number">09</span>:<span class="hljs-number">56</span>,<span class="hljs-number">3</span>:<span class="hljs-number">14</span>:<span class="hljs-number">13</span>,<span class="hljs-number">3</span>:<span class="hljs-number">18</span>:<span class="hljs-number">35</span>,<span class="hljs-number">3</span>:<span class="hljs-number">23</span>:<span class="hljs-number">03</span>,<span class="hljs-number">3</span>:<span class="hljs-number">27</span>:<span class="hljs-number">37</span>,<span class="hljs-number">3</span>:<span class="hljs-number">32</span>:<span class="hljs-number">17</span>,<span class="hljs-number">3</span>:<span class="hljs-number">37</span>:<span class="hljs-number">04</span>,<span class="hljs-number">3</span>:<span class="hljs-number">41</span>:<span class="hljs-number">57</span>,<span class="hljs-number">3</span>:<span class="hljs-number">46</span>:<span class="hljs-number">57</span>,<span class="hljs-number">3</span>:<span class="hljs-number">52</span>:<span class="hljs-number">03</span>,<span class="hljs-number">3</span>:<span class="hljs-number">57</span>:<span class="hljs-number">16</span>,<span class="hljs-number">4</span>:<span class="hljs-number">02</span>:<span class="hljs-number">37</span>,<span class="hljs-number">4</span>:<span class="hljs-number">08</span>:<span class="hljs-number">04</span>,<span class="hljs-number">4</span>:<span class="hljs-number">13</span>:<span class="hljs-number">39</span>,<span class="hljs-number">4</span>:<span class="hljs-number">19</span>:<span class="hljs-number">22</span>Marathon,<span class="hljs-number">2</span>:<span class="hljs-number">05</span>:<span class="hljs-number">34</span>,<span class="hljs-number">2</span>:<span class="hljs-number">08</span>:<span class="hljs-number">24</span>,<span class="hljs-number">2</span>:<span class="hljs-number">11</span>:<span class="hljs-number">17</span>,<span class="hljs-number">2</span>:<span class="hljs-number">14</span>:<span class="hljs-number">15</span>,<span class="hljs-number">2</span>:<span class="hljs-number">17</span>:<span class="hljs-number">16</span>,<span class="hljs-number">2</span>:<span class="hljs-number">20</span>:<span class="hljs-number">21</span>,<span class="hljs-number">2</span>:<span class="hljs-number">23</span>:<span class="hljs-number">31</span>,<span class="hljs-number">2</span>:<span class="hljs-number">26</span>:<span class="hljs-number">44</span>,<span class="hljs-number">2</span>:<span class="hljs-number">30</span>:<span class="hljs-number">02</span>,<span class="hljs-number">2</span>:<span class="hljs-number">33</span>:<span class="hljs-number">25</span>,<span class="hljs-number">2</span>:<span class="hljs-number">36</span>:<span class="hljs-number">52</span>,<span class="hljs-number">2</span>:<span class="hljs-number">40</span>:<span class="hljs-number">24</span>,<span class="hljs-number">2</span>:<span class="hljs-number">44</span>:<span class="hljs-number">00</span>,<span class="hljs-number">2</span>:<span class="hljs-number">47</span>:<span class="hljs-number">42</span>,<span class="hljs-number">2</span>:<span class="hljs-number">51</span>:<span class="hljs-number">28</span>,<span class="hljs-number">2</span>:<span class="hljs-number">55</span>:<span class="hljs-number">20</span>,<span class="hljs-number">2</span>:<span class="hljs-number">59</span>:<span class="hljs-number">16</span>,<span class="hljs-number">3</span>:<span class="hljs-number">03</span>:<span class="hljs-number">18</span>,<span class="hljs-number">3</span>:<span class="hljs-number">07</span>:<span class="hljs-number">26</span>,<span class="hljs-number">3</span>:<span class="hljs-number">11</span>:<span class="hljs-number">39</span>,<span class="hljs-number">3</span>:<span class="hljs-number">15</span>:<span class="hljs-number">58</span>,<span class="hljs-number">3</span>:<span class="hljs-number">20</span>:<span class="hljs-number">22</span>,<span class="hljs-number">3</span>:<span class="hljs-number">24</span>:<span class="hljs-number">53</span>,<span class="hljs-number">3</span>:<span class="hljs-number">29</span>:<span class="hljs-number">29</span>,<span class="hljs-number">3</span>:<span class="hljs-number">34</span>:<span class="hljs-number">12</span>,<span class="hljs-number">3</span>:<span class="hljs-number">39</span>:<span class="hljs-number">01</span>,<span class="hljs-number">3</span>:<span class="hljs-number">43</span>:<span class="hljs-number">57</span>,<span class="hljs-number">3</span>:<span class="hljs-number">48</span>:<span class="hljs-number">59</span>,<span class="hljs-number">3</span>:<span class="hljs-number">54</span>:<span class="hljs-number">09</span>,<span class="hljs-number">3</span>:<span class="hljs-number">59</span>:<span class="hljs-number">25</span>,<span class="hljs-number">4</span>:<span class="hljs-number">04</span>:<span class="hljs-number">48</span>,<span class="hljs-number">4</span>:<span class="hljs-number">10</span>:<span class="hljs-number">18</span>,<span class="hljs-number">4</span>:<span class="hljs-number">15</span>:<span class="hljs-number">56</span>,<span class="hljs-number">4</span>:<span class="hljs-number">21</span>:<span class="hljs-number">42</span>,<span class="hljs-number">4</span>:<span class="hljs-number">27</span>:<span class="hljs-number">35</span>,<span class="hljs-number">4</span>:<span class="hljs-number">33</span>:<span class="hljs-number">36</span>,<span class="hljs-number">4</span>:<span class="hljs-number">39</span>:<span class="hljs-number">46</span>,<span class="hljs-number">4</span>:<span class="hljs-number">46</span>:<span class="hljs-number">04</span>,<span class="hljs-number">4</span>:<span class="hljs-number">52</span>:<span class="hljs-number">30</span>,<span class="hljs-number">4</span>:<span class="hljs-number">59</span>:<span class="hljs-number">05</span>,<span class="hljs-number">5</span>:<span class="hljs-number">05</span>:<span class="hljs-number">48</span>,<span class="hljs-number">5</span>:<span class="hljs-number">12</span>:<span class="hljs-number">41</span>,<span class="hljs-number">5</span>:<span class="hljs-number">19</span>:<span class="hljs-number">43</span>,<span class="hljs-number">5</span>:<span class="hljs-number">26</span>:<span class="hljs-number">55</span>,<span class="hljs-number">5</span>:<span class="hljs-number">34</span>:<span class="hljs-number">16</span>,<span class="hljs-number">5</span>:<span class="hljs-number">41</span>:<span class="hljs-number">48</span>,<span class="hljs-number">5</span>:<span class="hljs-number">49</span>:<span class="hljs-number">29</span>,<span class="hljs-number">5</span>:<span class="hljs-number">57</span>:<span class="hljs-number">21</span>,<span class="hljs-number">6</span>:<span class="hljs-number">05</span>:<span class="hljs-number">23</span>,<span class="hljs-number">6</span>:<span class="hljs-number">13</span>:<span class="hljs-number">37</span><span class="hljs-comment"># Mark: 从input读入数据，匹配最近的数据</span><span class="hljs-keyword">from</span> find_it <span class="hljs-keyword">import</span> find_closest<span class="hljs-keyword">from</span> tm2secs2tm <span class="hljs-keyword">import</span> time2secs, secs2time, format_time<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_nearest_time</span>(<span class="hljs-params">look_for, target_data</span>):</span>    <span class="hljs-string">&quot;&quot;&quot;</span><span class="hljs-string">    查找的时间以及所搜索的时间列表，这个函数将把找到的最接近的时间作为一个字符串返回</span><span class="hljs-string">    :param look_for:</span><span class="hljs-string">    :param target_data:</span><span class="hljs-string">    :return:</span><span class="hljs-string">    &quot;&quot;&quot;</span>    <span class="hljs-comment"># 将要查找的时间字符串转换为等价的秒数值</span>    what = time2secs(look_for)    print(what)    <span class="hljs-comment"># 将时间字符串行转换为秒数</span>    where = [time2secs(t) <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> target_data]    print(where)    <span class="hljs-comment"># 查找最近的匹配的时间</span>    res = find_closest(what, where)    <span class="hljs-comment"># 返回时间字符串</span>    <span class="hljs-keyword">return</span> secs2time(res)row_data = &#123;&#125;<span class="hljs-comment"># 处理数据文件</span><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data/PaceData.csv&#x27;</span>) <span class="hljs-keyword">as</span> paces:    <span class="hljs-comment"># 标题行处理，去空白符，分割成列表</span>    column_headings = paces.readline().strip().split(<span class="hljs-string">&#x27;,&#x27;</span>)    <span class="hljs-comment"># 去除第一列</span>    column_headings.pop(<span class="hljs-number">0</span>)    <span class="hljs-keyword">for</span> each_line <span class="hljs-keyword">in</span> paces:        row = each_line.strip().split(<span class="hljs-string">&#x27;,&#x27;</span>)        row_label = row.pop(<span class="hljs-number">0</span>)        <span class="hljs-comment"># 将时间放至对应的标签列表中</span>        <span class="hljs-comment"># row_data[row_label] = row</span>        inner_dict = &#123;&#125;        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(column_headings)):            <span class="hljs-comment"># 键：时间，值：列标题；快速地确定与某个时间关联的列</span>            inner_dict[format_time(row[i])] = column_headings[i]        row_data[row_label] = inner_dict<span class="hljs-comment"># print(row_data)</span><span class="hljs-comment"># input()函数</span><span class="hljs-comment"># help(input)</span>distance_run = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter the distance attempted: &#x27;</span>)recorded_time = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter the recorded time: &#x27;</span>)predicted_distance = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Enter the distance you want a prediction for: &#x27;</span>)<span class="hljs-comment"># 报KeyError错误，因为row_data没有对应的key与value</span><span class="hljs-comment"># print(row_data[distance_run][recorded_time])</span>closest_time = find_nearest_time(format_time(recorded_time), row_data[distance_run])print(<span class="hljs-string">&#x27;closest_time: &#x27;</span>, closest_time)closest_time_heading = row_data[distance_run][closest_time]print(<span class="hljs-string">&#x27;closest_time_heading: &#x27;</span>, closest_time_heading)prediction = [k <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> row_data[predicted_distance].keys()              <span class="hljs-keyword">if</span> row_data[predicted_distance][k] == closest_time_heading]print(<span class="hljs-string">&#x27;The predicted time running &#x27;</span> + predicted_distance + <span class="hljs-string">&#x27; is: &#x27;</span> + prediction[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;.&#x27;</span>)<span class="hljs-comment"># 输出</span>Enter the distance attempted: <span class="hljs-number">20</span>kEnter the recorded time: <span class="hljs-number">59</span>:<span class="hljs-number">06</span>Enter the distance you want a prediction <span class="hljs-keyword">for</span>: <span class="hljs-number">30</span>k<span class="hljs-number">3546</span>[<span class="hljs-number">3389</span>, <span class="hljs-number">3465</span>, <span class="hljs-number">3543</span>, <span class="hljs-number">3623</span>, <span class="hljs-number">3705</span>, <span class="hljs-number">3788</span>, <span class="hljs-number">3873</span>, <span class="hljs-number">3960</span>, <span class="hljs-number">4049</span>, <span class="hljs-number">4141</span>, <span class="hljs-number">4234</span>, <span class="hljs-number">4329</span>, <span class="hljs-number">4426</span>, <span class="hljs-number">4526</span>, <span class="hljs-number">4628</span>, <span class="hljs-number">4732</span>, <span class="hljs-number">4839</span>, <span class="hljs-number">4947</span>, <span class="hljs-number">5059</span>, <span class="hljs-number">5173</span>, <span class="hljs-number">5289</span>, <span class="hljs-number">5408</span>, <span class="hljs-number">5530</span>, <span class="hljs-number">5654</span>, <span class="hljs-number">5781</span>, <span class="hljs-number">5911</span>, <span class="hljs-number">6044</span>, <span class="hljs-number">6180</span>, <span class="hljs-number">6320</span>, <span class="hljs-number">6462</span>, <span class="hljs-number">6607</span>, <span class="hljs-number">6756</span>, <span class="hljs-number">6908</span>, <span class="hljs-number">7063</span>, <span class="hljs-number">7222</span>, <span class="hljs-number">7385</span>, <span class="hljs-number">7551</span>, <span class="hljs-number">7721</span>, <span class="hljs-number">7895</span>, <span class="hljs-number">8072</span>, <span class="hljs-number">8254</span>, <span class="hljs-number">8440</span>, <span class="hljs-number">8629</span>, <span class="hljs-number">8824</span>, <span class="hljs-number">9022</span>, <span class="hljs-number">9225</span>, <span class="hljs-number">9433</span>, <span class="hljs-number">9645</span>, <span class="hljs-number">9862</span>, <span class="hljs-number">10084</span>]closest_time:  <span class="hljs-number">00</span>:<span class="hljs-number">59</span>:<span class="hljs-number">03</span>closest_time_heading:  <span class="hljs-number">81.1</span>The predicted time running <span class="hljs-number">30</span>k <span class="hljs-keyword">is</span>: <span class="hljs-number">01</span>:<span class="hljs-number">31</span>:<span class="hljs-number">08.</span></code></pre><h3 id="工具箱"><a href="#工具箱" class="headerlink" title="工具箱"></a>工具箱</h3><h4 id="查看函数功能"><a href="#查看函数功能" class="headerlink" title="查看函数功能"></a>查看函数功能</h4><p><code>dir(__builtins__)</code>， 可以看到Python提供的内置方法列表。所有的小写单词都是BIF（内置方法）<br><code>help(某个BIF函数)</code>，查看某个内置BIF函数的功能</p><pre><code class="hljs python">print(<span class="hljs-built_in">dir</span>(__builtins__))<span class="hljs-comment"># 查看print 内置函数</span><span class="hljs-built_in">help</span>(<span class="hljs-built_in">print</span>)<span class="hljs-comment"># 输出</span>[<span class="hljs-string">&#x27;ArithmeticError&#x27;</span>, <span class="hljs-string">&#x27;AssertionError&#x27;</span>, <span class="hljs-string">&#x27;AttributeError&#x27;</span>, <span class="hljs-string">&#x27;BaseException&#x27;</span>, <span class="hljs-string">&#x27;BlockingIOError&#x27;</span>, <span class="hljs-string">&#x27;BrokenPipeError&#x27;</span>, <span class="hljs-string">&#x27;BufferError&#x27;</span>, <span class="hljs-string">&#x27;BytesWarning&#x27;</span>, <span class="hljs-string">&#x27;ChildProcessError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionAbortedError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionRefusedError&#x27;</span>, <span class="hljs-string">&#x27;ConnectionResetError&#x27;</span>, <span class="hljs-string">&#x27;DeprecationWarning&#x27;</span>, <span class="hljs-string">&#x27;EOFError&#x27;</span>, <span class="hljs-string">&#x27;Ellipsis&#x27;</span>, <span class="hljs-string">&#x27;EnvironmentError&#x27;</span>, <span class="hljs-string">&#x27;Exception&#x27;</span>, <span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;FileExistsError&#x27;</span>, <span class="hljs-string">&#x27;FileNotFoundError&#x27;</span>, <span class="hljs-string">&#x27;FloatingPointError&#x27;</span>, <span class="hljs-string">&#x27;FutureWarning&#x27;</span>, <span class="hljs-string">&#x27;GeneratorExit&#x27;</span>, <span class="hljs-string">&#x27;IOError&#x27;</span>, <span class="hljs-string">&#x27;ImportError&#x27;</span>, <span class="hljs-string">&#x27;ImportWarning&#x27;</span>, <span class="hljs-string">&#x27;IndentationError&#x27;</span>, <span class="hljs-string">&#x27;IndexError&#x27;</span>, <span class="hljs-string">&#x27;InterruptedError&#x27;</span>, <span class="hljs-string">&#x27;IsADirectoryError&#x27;</span>, <span class="hljs-string">&#x27;KeyError&#x27;</span>, <span class="hljs-string">&#x27;KeyboardInterrupt&#x27;</span>, <span class="hljs-string">&#x27;LookupError&#x27;</span>, <span class="hljs-string">&#x27;MemoryError&#x27;</span>, <span class="hljs-string">&#x27;ModuleNotFoundError&#x27;</span>, <span class="hljs-string">&#x27;NameError&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;NotADirectoryError&#x27;</span>, <span class="hljs-string">&#x27;NotImplemented&#x27;</span>, <span class="hljs-string">&#x27;NotImplementedError&#x27;</span>, <span class="hljs-string">&#x27;OSError&#x27;</span>, <span class="hljs-string">&#x27;OverflowError&#x27;</span>, <span class="hljs-string">&#x27;PendingDeprecationWarning&#x27;</span>, <span class="hljs-string">&#x27;PermissionError&#x27;</span>, <span class="hljs-string">&#x27;ProcessLookupError&#x27;</span>, <span class="hljs-string">&#x27;RecursionError&#x27;</span>, <span class="hljs-string">&#x27;ReferenceError&#x27;</span>, <span class="hljs-string">&#x27;ResourceWarning&#x27;</span>, <span class="hljs-string">&#x27;RuntimeError&#x27;</span>, <span class="hljs-string">&#x27;RuntimeWarning&#x27;</span>, <span class="hljs-string">&#x27;StopAsyncIteration&#x27;</span>, <span class="hljs-string">&#x27;StopIteration&#x27;</span>, <span class="hljs-string">&#x27;SyntaxError&#x27;</span>, <span class="hljs-string">&#x27;SyntaxWarning&#x27;</span>, <span class="hljs-string">&#x27;SystemError&#x27;</span>, <span class="hljs-string">&#x27;SystemExit&#x27;</span>, <span class="hljs-string">&#x27;TabError&#x27;</span>, <span class="hljs-string">&#x27;TimeoutError&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>, <span class="hljs-string">&#x27;TypeError&#x27;</span>, <span class="hljs-string">&#x27;UnboundLocalError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeDecodeError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeEncodeError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeTranslateError&#x27;</span>, <span class="hljs-string">&#x27;UnicodeWarning&#x27;</span>, <span class="hljs-string">&#x27;UserWarning&#x27;</span>, <span class="hljs-string">&#x27;ValueError&#x27;</span>, <span class="hljs-string">&#x27;Warning&#x27;</span>, <span class="hljs-string">&#x27;ZeroDivisionError&#x27;</span>, <span class="hljs-string">&#x27;__build_class__&#x27;</span>, <span class="hljs-string">&#x27;__debug__&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>, <span class="hljs-string">&#x27;__import__&#x27;</span>, <span class="hljs-string">&#x27;__loader__&#x27;</span>, <span class="hljs-string">&#x27;__name__&#x27;</span>, <span class="hljs-string">&#x27;__package__&#x27;</span>, <span class="hljs-string">&#x27;__spec__&#x27;</span>, <span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;all&#x27;</span>, <span class="hljs-string">&#x27;any&#x27;</span>, <span class="hljs-string">&#x27;ascii&#x27;</span>, <span class="hljs-string">&#x27;bin&#x27;</span>, <span class="hljs-string">&#x27;bool&#x27;</span>, <span class="hljs-string">&#x27;bytearray&#x27;</span>, <span class="hljs-string">&#x27;bytes&#x27;</span>, <span class="hljs-string">&#x27;callable&#x27;</span>, <span class="hljs-string">&#x27;chr&#x27;</span>, <span class="hljs-string">&#x27;classmethod&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;complex&#x27;</span>, <span class="hljs-string">&#x27;copyright&#x27;</span>, <span class="hljs-string">&#x27;credits&#x27;</span>, <span class="hljs-string">&#x27;delattr&#x27;</span>, <span class="hljs-string">&#x27;dict&#x27;</span>, <span class="hljs-string">&#x27;dir&#x27;</span>, <span class="hljs-string">&#x27;divmod&#x27;</span>, <span class="hljs-string">&#x27;enumerate&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-string">&#x27;filter&#x27;</span>, <span class="hljs-string">&#x27;float&#x27;</span>, <span class="hljs-string">&#x27;format&#x27;</span>, <span class="hljs-string">&#x27;frozenset&#x27;</span>, <span class="hljs-string">&#x27;getattr&#x27;</span>, <span class="hljs-string">&#x27;globals&#x27;</span>, <span class="hljs-string">&#x27;hasattr&#x27;</span>, <span class="hljs-string">&#x27;hash&#x27;</span>, <span class="hljs-string">&#x27;help&#x27;</span>, <span class="hljs-string">&#x27;hex&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;isinstance&#x27;</span>, <span class="hljs-string">&#x27;issubclass&#x27;</span>, <span class="hljs-string">&#x27;iter&#x27;</span>, <span class="hljs-string">&#x27;len&#x27;</span>, <span class="hljs-string">&#x27;license&#x27;</span>, <span class="hljs-string">&#x27;list&#x27;</span>, <span class="hljs-string">&#x27;locals&#x27;</span>, <span class="hljs-string">&#x27;map&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;memoryview&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;next&#x27;</span>, <span class="hljs-string">&#x27;object&#x27;</span>, <span class="hljs-string">&#x27;oct&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;ord&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;print&#x27;</span>, <span class="hljs-string">&#x27;property&#x27;</span>, <span class="hljs-string">&#x27;quit&#x27;</span>, <span class="hljs-string">&#x27;range&#x27;</span>, <span class="hljs-string">&#x27;repr&#x27;</span>, <span class="hljs-string">&#x27;reversed&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;set&#x27;</span>, <span class="hljs-string">&#x27;setattr&#x27;</span>, <span class="hljs-string">&#x27;slice&#x27;</span>, <span class="hljs-string">&#x27;sorted&#x27;</span>, <span class="hljs-string">&#x27;staticmethod&#x27;</span>, <span class="hljs-string">&#x27;str&#x27;</span>, <span class="hljs-string">&#x27;sum&#x27;</span>, <span class="hljs-string">&#x27;super&#x27;</span>, <span class="hljs-string">&#x27;tuple&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>, <span class="hljs-string">&#x27;vars&#x27;</span>, <span class="hljs-string">&#x27;zip&#x27;</span>]Help on built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">print</span> <span class="hljs-keyword">in</span> module builtins:print(...)    print(value, ..., sep=<span class="hljs-string">&#x27; &#x27;</span>, end=<span class="hljs-string">&#x27;\n&#x27;</span>, file=sys.stdout, flush=<span class="hljs-literal">False</span>)        Prints the values to a stream, <span class="hljs-keyword">or</span> to sys.stdout by default.    Optional keyword arguments:    file:  a file-like <span class="hljs-built_in">object</span> (stream); defaults to the current sys.stdout.    sep:   string inserted between values, default a space.    end:   string appended after the last value, default a newline.    flush: whether to forcibly flush the stream.</code></pre><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>Python中的各个模块提供了自己的命名空间，使用module.function()形式调用模块的函数时，要用命名空间名限定函数。</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> athletemodel<span class="hljs-keyword">import</span> globdata_files = glob.glob(<span class="hljs-string">&quot;data/*.txt&quot;</span>)athletes = athletemodel.put_to_store(data_files)</code></pre><p><strong><u>ps: 本文仅为《Head First Python》一书学习笔记，仅供学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Logstash安装学习</title>
      <link href="2020/05/06/logstash-data-transform/"/>
      <url>2020/05/06/logstash-data-transform/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Logstash安装学习"><a href="#Logstash安装学习" class="headerlink" title="Logstash安装学习"></a>Logstash安装学习</h2><p>Logstash是Elasticsearch下的一款开源软件，它能够同时从多个来源采集数据、转换数据，然后将数据发送到Eleasticsearch中创建索引。 可以使用Logstash将MySQL中的数据采用到ES索引中。</p><h3 id="安装Logstash"><a href="#安装Logstash" class="headerlink" title="安装Logstash"></a>安装Logstash</h3><p>软件下载: <code>https://www.elastic.co/cn/downloads/past-releases/logstash-6-2-1</code> (与本地的es版本要一致)</p><p>解压logstash-6.2.1.zip包后，安装logstash-input-jdbc插件<br><code>./logstash-plugin install logstash-input-jdbc</code><br>说明：logstash-input-jdbc是ruby开发的，先下载ruby并安装<code>https://rubyinstaller.org/downloads/</code>，版本2.5即可</p><pre><code class="hljs bash">$ ruby -vruby 2.6.3p62 (2019-04-16 revision 67580) [universal.x86_64-darwin19]$ <span class="hljs-built_in">cd</span> /Users/user_name/Documents/elasticsearch/jar/logstash-6.2.1/bin$ lsbenchmark.shingest-convert.shlogstash-keystore.batlogstash.batrubycpdumplogstashlogstash-pluginlogstash.lib.shsetup.batdependencies-reportlogstash-keystorelogstash-plugin.batpqchecksystem-install$ ./logstash-plugin install logstash-input-jdbcValidating logstash-input-jdbcInstalling logstash-input-jdbcInstallation successful// 插件安装路径$ <span class="hljs-built_in">cd</span> /Users/user_name/Documents/elasticsearch/jar/logstash-6.2.1/vendor/bundle/jruby/2.3.0/gems</code></pre><h3 id="创建模板文件"><a href="#创建模板文件" class="headerlink" title="创建模板文件"></a>创建模板文件</h3><p>Logstash的工作是从MySQL中读取数据，向ES中创建索引，这里需要提前创建mapping的模板文件以便logstash使用。<br>在logstach的config目录创建xc_course_template.json</p><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /Users/zhuyangze/Documents/elasticsearch/jar/logstash-6.2.1/config/$ lsjvm.optionslogstash.ymlmysql.confstartup.optionslog4j2.propertieslogstash_metadatapipelines.ymlxc_course_template.json</code></pre><p>xc_course_template.json模板文件</p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;        <span class="hljs-attr">&quot;doc&quot;</span>: &#123;            <span class="hljs-attr">&quot;properties&quot;</span>: &#123;                <span class="hljs-attr">&quot;charge&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;description&quot;</span>: &#123;                    <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,                    <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;end_time&quot;</span>: &#123;                    <span class="hljs-attr">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>                &#125;,                <span class="hljs-attr">&quot;expires&quot;</span>: &#123;                    <span class="hljs-attr">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>                &#125;,                <span class="hljs-attr">&quot;grade&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;id&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;mt&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;name&quot;</span>: &#123;                    <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,                    <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;pic&quot;</span>: &#123;                    <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;price&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;float&quot;</span>                &#125;,                <span class="hljs-attr">&quot;price_old&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;float&quot;</span>                &#125;,                <span class="hljs-attr">&quot;pub_time&quot;</span>: &#123;                    <span class="hljs-attr">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>                &#125;,                <span class="hljs-attr">&quot;qq&quot;</span>: &#123;                    <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;st&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;start_time&quot;</span>: &#123;                    <span class="hljs-attr">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>                &#125;,                <span class="hljs-attr">&quot;status&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;teachmode&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;,                <span class="hljs-attr">&quot;teachplan&quot;</span>: &#123;                    <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,                    <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;users&quot;</span>: &#123;                    <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span>,                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;valid&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;            &#125;        &#125;    &#125;,    <span class="hljs-attr">&quot;template&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>&#125;</code></pre><h3 id="配置mysql-conf"><a href="#配置mysql-conf" class="headerlink" title="配置mysql.conf"></a>配置mysql.conf</h3><p>在logstash的config目录下配置mysql.conf文件供logstash使用，logstash会根据mysql.conf文件的配置的地址从MySQL中读取数据向ES中写入索引。</p><p>mysql.conf</p><pre><code class="hljs json">input &#123;  stdin &#123;  &#125;  jdbc &#123;  # jdbc_connection_string =&gt; &quot;jdbc:mysql://localhost:3306/xc_course?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true&amp;serverTimezone=UTC&quot;  jdbc_connection_string =&gt; &quot;jdbc:mysql://192.xxx.xxx.xxx:3306/xc_course?characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC&quot;  # the user we wish to excute our statement as  jdbc_user =&gt; &quot;root&quot;  jdbc_password =&gt; user_pwd  # the path to our downloaded jdbc driver  jdbc_driver_library =&gt; &quot;/Users/user_name/Documents/jar/mysql-connector-java-5.1.46.jar&quot;  # the name of the driver class for mysql  jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot;  jdbc_paging_enabled =&gt; &quot;true&quot;  jdbc_page_size =&gt; &quot;50000&quot;  #要执行的sql文件  #statement_filepath =&gt; &quot;/conf/course.sql&quot;  statement =&gt; &quot;select * from course_pub where timestamp &gt; date_add(:sql_last_value,INTERVAL 8 HOUR)&quot;  #定时配置  schedule =&gt; &quot;* * * * *&quot;  record_last_run =&gt; true  last_run_metadata_path =&gt; &quot;/Users/user_name/Documents/elasticsearch/jar/logstash-6.2.1/config/logstash_metadata&quot;  &#125;&#125;output &#123;  elasticsearch &#123;  #ES的ip地址和端口  hosts =&gt; &quot;192.xxx.xxx.xxx:9200&quot;  #hosts =&gt; [&quot;localhost:9200&quot;,&quot;localhost:9202&quot;,&quot;localhost:9203&quot;]  #ES索引库名称  index =&gt; &quot;xc_course&quot;  document_id =&gt; &quot;%&#123;id&#125;&quot;  document_type =&gt; &quot;doc&quot;  template =&gt;&quot;/Users/user_name/Documents/elasticsearch/jar/logstash-6.2.1/config/xc_course_template.json&quot;  template_name =&gt;&quot;xc_course&quot;  template_overwrite =&gt;&quot;true&quot;  &#125;  stdout &#123; #日志输出  codec =&gt; json_lines  &#125;&#125;</code></pre><p>ES采用UTC 时区，比北京时间早8小时，所以ES读取数据时让最后更新时间加8小时<br>where timestamp &gt; date_add(:sql_last_value,INTERVAL 8 HOUR)<br>logstash每个执行完成会在/Users/user_name/Documents/elasticsearch/jar/logstash-6.2.1/config/logstash_metadata记录执行时间下次以此 时间为基准进行增量同步数据到索引库。</p><h3 id="启动Logstash"><a href="#启动Logstash" class="headerlink" title="启动Logstash"></a>启动Logstash</h3><p><code>./logstash -f ../config/mysql.conf</code></p><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> /Users/user_name/Documents/elasticsearch/jar/logstash-6.2.1/bin$ ./logstash -f ../config/mysql.conf...[INFO ][logstash.inputs.jdbc     ] (0.003997s) SELECT count(*) AS `count` FROM (select * from course_pub <span class="hljs-built_in">where</span> timestamp &gt; date_add(<span class="hljs-string">&#x27;2020-05-06 05:59:00&#x27;</span>,INTERVAL 8 HOUR)) AS `t1` LIMIT 1[INFO ][logstash.inputs.jdbc     ] (0.009669s) SELECT * FROM (select * from course_pub <span class="hljs-built_in">where</span> timestamp &gt; date_add(<span class="hljs-string">&#x27;2020-05-06 05:59:00&#x27;</span>,INTERVAL 8 HOUR)) AS `t1` LIMIT 50000 OFFSET 0&#123;<span class="hljs-string">&quot;end_time&quot;</span>:null,<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;Bootstrap开发框架测试&quot;</span>,<span class="hljs-string">&quot;pic&quot;</span>:<span class="hljs-string">&quot;group1/M00/00/00/rBEJ_l6fDIuATXcwAANTmWtxdDs870.png&quot;</span>,<span class="hljs-string">&quot;qq&quot;</span>:<span class="hljs-string">&quot;4455432&quot;</span>,<span class="hljs-string">&quot;expires&quot;</span>:null,<span class="hljs-string">&quot;start_time&quot;</span>:null,<span class="hljs-string">&quot;teachmode&quot;</span>:null,<span class="hljs-string">&quot;teachplan&quot;</span>:<span class="hljs-string">&quot;&#123;\&quot;children\&quot;:[&#123;\&quot;children\&quot;:[&#123;\&quot;id\&quot;:\&quot;3\&quot;,\&quot;pname\&quot;:\&quot;计算机硬件\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;4\&quot;,\&quot;pname\&quot;:\&quot;计算机软件\&quot;&#125;],\&quot;id\&quot;:\&quot;2\&quot;,\&quot;pname\&quot;:\&quot;计算机原理\&quot;&#125;,&#123;\&quot;children\&quot;:[&#123;\&quot;id\&quot;:\&quot;ff808081717e005701717e19b5120002\&quot;,\&quot;pname\&quot;:\&quot;Python学习课堂一\&quot;&#125;],\&quot;id\&quot;:\&quot;ff808081717e005701717e0821660001\&quot;,\&quot;pname\&quot;:\&quot;Python学习\&quot;&#125;,&#123;\&quot;children\&quot;:[&#123;\&quot;id\&quot;:\&quot;6\&quot;,\&quot;pname\&quot;:\&quot;java语法介绍\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;7\&quot;,\&quot;pname\&quot;:\&quot;Hello World\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;ff808081717e005701717e063c170000\&quot;,\&quot;pname\&quot;:\&quot;java高级编程\&quot;&#125;],\&quot;id\&quot;:\&quot;5\&quot;,\&quot;pname\&quot;:\&quot;计算机编程入门\&quot;&#125;,&#123;\&quot;children\&quot;:[&#123;\&quot;id\&quot;:\&quot;402885816347f814016348d68bad0000\&quot;,\&quot;pname\&quot;:\&quot;数据库基础知识\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;402885816347f814016348d6c5920001\&quot;,\&quot;pname\&quot;:\&quot;SQL查询\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;402885816347f814016348d7153c0002\&quot;,\&quot;pname\&quot;:\&quot;SQL优化\&quot;&#125;],\&quot;id\&quot;:\&quot;4028e581617ce7b601617ce801790000\&quot;,\&quot;pname\&quot;:\&quot;数据库编程\&quot;&#125;,&#123;\&quot;children\&quot;:[&#123;\&quot;id\&quot;:\&quot;4028e581617d02e101617d070ed90000\&quot;,\&quot;pname\&quot;:\&quot;操作系统类型介绍\&quot;&#125;,&#123;\&quot;id\&quot;:\&quot;4028e58161bbcd350161bbcefe3d0001\&quot;,\&quot;pname\&quot;:\&quot;操作系统原理\&quot;&#125;],\&quot;id\&quot;:\&quot;8\&quot;,\&quot;pname\&quot;:\&quot;操作系统原理\&quot;&#125;],\&quot;id\&quot;:\&quot;1\&quot;,\&quot;pname\&quot;:\&quot;Bootstrap开发框架\&quot;&#125;&quot;</span>,<span class="hljs-string">&quot;st&quot;</span>:<span class="hljs-string">&quot;1-1-1&quot;</span>,<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;4028e581617f945f01617f9dabc40000&quot;</span>,<span class="hljs-string">&quot;@version&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;charge&quot;</span>:<span class="hljs-string">&quot;203002&quot;</span>,<span class="hljs-string">&quot;studymodel&quot;</span>:<span class="hljs-string">&quot;201001&quot;</span>,<span class="hljs-string">&quot;price&quot;</span>:0.009999999776482582,<span class="hljs-string">&quot;@timestamp&quot;</span>:<span class="hljs-string">&quot;2020-05-06T06:00:00.561Z&quot;</span>,<span class="hljs-string">&quot;mt&quot;</span>:<span class="hljs-string">&quot;1-1&quot;</span>,<span class="hljs-string">&quot;grade&quot;</span>:<span class="hljs-string">&quot;200002&quot;</span>,<span class="hljs-string">&quot;timestamp&quot;</span>:<span class="hljs-string">&quot;2020-05-06T09:10:45.000Z&quot;</span>,<span class="hljs-string">&quot;valid&quot;</span>:<span class="hljs-string">&quot;204001&quot;</span>,<span class="hljs-string">&quot;pub_time&quot;</span>:<span class="hljs-string">&quot;2020-05-05 17:08:44&quot;</span>,<span class="hljs-string">&quot;users&quot;</span>:<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;price_old&quot;</span>:null,<span class="hljs-string">&quot;description&quot;</span>:<span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>&#125;</code></pre><p>问题：</p><p>服务端的mysql拒绝连接</p><pre><code class="hljs bash">[ERROR][logstash.inputs.jdbc] Unable to connect to database. Tried 1 <span class="hljs-built_in">times</span> &#123;:error_message=&gt;<span class="hljs-string">&quot;Java::JavaSql::SQLException: Access denied for user &#x27;root&#x27;@&#x27;192.xxx.xxx.xxx&#x27; (using password: YES)&quot;</span>&#125;ERROR 1064 (42000): You have an error <span class="hljs-keyword">in</span> your SQL syntax; check the manual that corresponds to your MySQL server version <span class="hljs-keyword">for</span> the right syntax to use near <span class="hljs-string">&#x27;identified by &#x27;</span>user_pwd<span class="hljs-string">&#x27; with grant option&#x27;</span> at line 1// 解决方法（mysql远程登录问题）// Mysql 8.0以前的版本：GRANT ALL PRIVILEGES ON *.* TO `root`@`%` IDENTIFIED BY `user_pwd` WITH GRANT OPTION;// Mysql 8.0以后的版本：CREATE USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;user_pwd&#x27;</span>; GRANT ALL ON *.* TO <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>; ALTER USER <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED WITH mysql_native_password BY <span class="hljs-string">&#x27;user_pwd&#x27;</span>;FLUSH PRIVILEGES;</code></pre><h3 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h3><p>访问<code>http://localhost:9100/</code><br><img src="/2020/05/06/logstash-data-transform/1.png" alt="logstash-data"></p><p><strong><u>ps:本文为学习笔记，仅供学习与参考</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> logstash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch集群搭建</title>
      <link href="2020/05/01/elasticsearch-cluster-node/"/>
      <url>2020/05/01/elasticsearch-cluster-node/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Elasticsearch集群搭建"><a href="#Elasticsearch集群搭建" class="headerlink" title="Elasticsearch集群搭建"></a>Elasticsearch集群搭建</h2><h3 id="集群结构"><a href="#集群结构" class="headerlink" title="集群结构"></a>集群结构</h3><p>ES通常以<strong>集群方式</strong>工作，这样做不仅能够提高 ES的搜索能力还可以处理大数据搜索的能力，同时也增加了系统的容错能力及高可用，ES可以实现PB级数据的搜索。</p><p><img src="/2020/05/01/elasticsearch-cluster-node/1.png" alt="es-cluster"></p><p>1、结点<br>ES集群由多个服务器组成，每个服务器即为一个Node结点(该服务只部署了一个ES进程)。<br>2、分片<br>当我们的文档量很大时，由于内存和硬盘的限制，同时也为了提高ES的处理能力、容错能力及高可用能力，我们将索引分成若干分片，每个分片可以放在不同的服务器，这样就实现了多个服务器共同对外提供索引及搜索服务。一个搜索请求过来，会分别从各个分片去查询，最后将查询到的数据合并返回给用户。<br> 3、副本<br>为了提高ES的高可用同时也为了提高搜索的吞吐量，我们将分片复制一份或多份存储在其它的服务器，这样即使当前的服务器挂掉了，拥有副本的服务器照常可以提供服务。<br>4、主结点<br>一个集群中会有一个或多个主结点，主结点的作用是集群管理，比如增加节点，移除节点等，主结点挂掉后ES会重新选一个主结点。<br>5、结点转发<br>每个结点都知道其它结点的信息，我们可以对任意一个结点发起请求，接收请求的结点会转发给其它结点查询数据。</p><h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><p>主结点：master节点主要用于集群的管理及索引，比如新增结点、分片分配、索引的新增和删除等。<br>数据结点：data节点上保存了数据分片，它负责索引和搜索操作。<br>客户端结点：client 节点仅作为请求客户端存在，client的作用也作为负载均衡器，client节点不存数据，只是将请求均衡转发到其它结点。</p><p>通过下边两项参数来配置结点的功能:<br> node.master: 是否允许为主结点<br> node.data: 允许存储数据作为数据结点<br> node.ingest: 是否允许成为协调节点<br> 四种组合方式:<br> master=true，data=true：即是主结点又是数据结点<br> master=false，data=true：仅是数据结点<br> master=true，data=false：仅是主结点，不存储数据<br>master=false，data=false：即不是主结点也不是数据结点，此时可设置ingest为true表示它是一个客户端。</p><p>本次实验是在同一台机器模拟集群，生产环境是不同的服务器IP上，端口不变，IP改变即可。</p><h4 id="config配置"><a href="#config配置" class="headerlink" title="config配置"></a>config配置</h4><p>master结点的elasticsearch.yml</p><pre><code class="hljs yaml"><span class="hljs-comment">#cluster.name: my-application</span><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">lc-xc</span><span class="hljs-comment">#node.name: node-1</span><span class="hljs-attr">node.name:</span> <span class="hljs-string">xc_node-1</span><span class="hljs-comment">#path.data: /path/to/data</span><span class="hljs-attr">path.data:</span> <span class="hljs-string">/Users/user_name/Documents/elasticsearch/data/elasticsearch-6.3.2</span><span class="hljs-comment">#path.logs: /path/to/logs</span><span class="hljs-attr">path.logs:</span> <span class="hljs-string">/Users/user_name/Documents/elasticsearch/log/elasticsearch-6.3.2</span><span class="hljs-comment">#bootstrap.memory_lock: true</span><span class="hljs-attr">bootstrap.memory_lock:</span> <span class="hljs-literal">false</span><span class="hljs-comment">#network.host: 192.168.0.1</span><span class="hljs-attr">network.host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.104</span><span class="hljs-comment">#http.port: 9200</span><span class="hljs-attr">http.port:</span> <span class="hljs-number">9200</span><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9300</span><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">/.*/</span><span class="hljs-comment">#discovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2&quot;]</span><span class="hljs-attr">discovery.zen.ping.unicast.hosts:</span> [<span class="hljs-string">&quot;192.168.0.104:9300&quot;</span>, <span class="hljs-string">&quot;192.168.0.104:9301&quot;</span>]<span class="hljs-comment">#discovery.zen.minimum_master_nodes: </span><span class="hljs-attr">discovery.zen.minimum_master_nodes:</span> <span class="hljs-number">1</span><span class="hljs-attr">node.ingest:</span> <span class="hljs-literal">true</span><span class="hljs-attr">node.max_local_storage_nodes:</span> <span class="hljs-number">2</span></code></pre><p>节点1的elasticsearch.yml</p><pre><code class="hljs yaml"><span class="hljs-comment">#cluster.name: my-application</span><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">lc-xc</span><span class="hljs-comment">#node.name: node-1</span><span class="hljs-attr">node.name:</span> <span class="hljs-string">xc_node-2</span><span class="hljs-comment">#path.data: /path/to/data</span><span class="hljs-attr">path.data:</span> <span class="hljs-string">/Users/user_name/Documents/elasticsearch/data/elasticsearch-6.3.2-2</span><span class="hljs-comment">#path.logs: /path/to/logs</span><span class="hljs-attr">path.logs:</span> <span class="hljs-string">/Users/user_name/Documents/elasticsearch/log/elasticsearch-6.3.2-2</span><span class="hljs-comment">#bootstrap.memory_lock: true</span><span class="hljs-attr">bootstrap.memory_lock:</span> <span class="hljs-literal">false</span><span class="hljs-comment">#network.host: 192.168.0.1</span><span class="hljs-attr">network.host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.104</span><span class="hljs-comment">#http.port: 9200</span><span class="hljs-attr">http.port:</span> <span class="hljs-number">9201</span><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9301</span><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">/.*/</span><span class="hljs-comment">#discovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2&quot;]</span><span class="hljs-attr">discovery.zen.ping.unicast.hosts:</span> [<span class="hljs-string">&quot;192.168.0.104:9300&quot;</span>, <span class="hljs-string">&quot;192.168.0.104:9301&quot;</span>]<span class="hljs-comment">#discovery.zen.minimum_master_nodes: </span><span class="hljs-attr">discovery.zen.minimum_master_nodes:</span> <span class="hljs-number">1</span><span class="hljs-attr">node.ingest:</span> <span class="hljs-literal">true</span><span class="hljs-attr">node.max_local_storage_nodes:</span> <span class="hljs-number">2</span></code></pre><p>节点3的elasticsearch.yml</p><pre><code class="hljs yaml"><span class="hljs-comment">#cluster.name: my-application</span><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">lc-xc</span><span class="hljs-comment">#node.name: node-1</span><span class="hljs-attr">node.name:</span> <span class="hljs-string">xc_node-3</span><span class="hljs-comment">#path.data: /path/to/data</span><span class="hljs-attr">path.data:</span> <span class="hljs-string">/Users/user_name/Documents/elasticsearch/data/elasticsearch-6.3.2-3</span><span class="hljs-comment">#path.logs: /path/to/logs</span><span class="hljs-attr">path.logs:</span> <span class="hljs-string">/Users/user_name/Documents/elasticsearch/log/elasticsearch-6.3.2-3</span><span class="hljs-comment">#bootstrap.memory_lock: true</span><span class="hljs-attr">bootstrap.memory_lock:</span> <span class="hljs-literal">false</span><span class="hljs-comment">#network.host: 192.168.0.1</span><span class="hljs-attr">network.host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.104</span><span class="hljs-comment">#http.port: 9200</span><span class="hljs-attr">http.port:</span> <span class="hljs-number">9202</span><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9302</span><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">/.*/</span><span class="hljs-comment">#discovery.zen.ping.unicast.hosts: [&quot;host1&quot;, &quot;host2&quot;]</span><span class="hljs-attr">discovery.zen.ping.unicast.hosts:</span> [<span class="hljs-string">&quot;192.168.0.104:9300&quot;</span>, <span class="hljs-string">&quot;192.168.0.104:9301&quot;</span>]<span class="hljs-comment">#discovery.zen.minimum_master_nodes: </span><span class="hljs-attr">discovery.zen.minimum_master_nodes:</span> <span class="hljs-number">1</span><span class="hljs-attr">node.ingest:</span> <span class="hljs-literal">true</span><span class="hljs-attr">node.max_local_storage_nodes:</span> <span class="hljs-number">2</span></code></pre><p>说明：主节点的plugin中的ik分词器，也要复制到节点1，2中。</p><h4 id="启动主结点与节点1"><a href="#启动主结点与节点1" class="headerlink" title="启动主结点与节点1"></a>启动主结点与节点1</h4><p><code>bin/elasticsearch</code></p><p>通过es-head插件访问 <code>http://192.168.0.104:9100/</code></p><p><img src="/2020/05/01/elasticsearch-cluster-node/2.png" alt="es-cluster-node-1"></p><p>创建索引，共2个分片，每个分片一个副本。<br><img src="/2020/05/01/elasticsearch-cluster-node/3.png" alt="es-cluster-index"></p><p>新建索引，Postman的访问：<br>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_mapping</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求JSON串</span>&#123;    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;        <span class="hljs-attr">&quot;description&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,            <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,            <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>        &#125;,        <span class="hljs-attr">&quot;name&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,            <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,            <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>        &#125;,        <span class="hljs-attr">&quot;pic&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,            <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span>        &#125;,        <span class="hljs-attr">&quot;price&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;float&quot;</span>        &#125;,        <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>        &#125;,        <span class="hljs-attr">&quot;timestamp&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>,            <span class="hljs-attr">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis&quot;</span>        &#125;    &#125;&#125;</code></pre><p>插入数据<br>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/1</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求JSON串</span>&#123;    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>,    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">38.6</span>,    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-04-25 19:11:35&quot;</span>,    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>&#125;</code></pre><p>访问主节点，查看数据</p><p><img src="/2020/05/01/elasticsearch-cluster-node/4.png" alt="es-cluster-main"></p><p>访问节点1，查看数据</p><p><img src="/2020/05/01/elasticsearch-cluster-node/5.png" alt="es-cluster-node-1"></p><p>此时，启动节点2，访问节点2，会发现上述数据会自动复制到节点2中。</p><p><img src="/2020/05/01/elasticsearch-cluster-node/6.png" alt="es-cluster-node-3"></p><p>集群的健康，可以访问<code>http://192.168.0.104:9200/_cluster/health</code></p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;cluster_name&quot;</span>: <span class="hljs-string">&quot;lc-xc&quot;</span>,    <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-string">&quot;green&quot;</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;number_of_nodes&quot;</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">&quot;number_of_data_nodes&quot;</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">&quot;active_primary_shards&quot;</span>: <span class="hljs-number">2</span>,    <span class="hljs-attr">&quot;active_shards&quot;</span>: <span class="hljs-number">4</span>,    <span class="hljs-attr">&quot;relocating_shards&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;initializing_shards&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;unassigned_shards&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;delayed_unassigned_shards&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;number_of_pending_tasks&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;number_of_in_flight_fetch&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;task_max_waiting_in_queue_millis&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;active_shards_percent_as_number&quot;</span>: <span class="hljs-number">100</span>&#125;</code></pre><p><strong><u>ps：该文仅为学习笔记与记录，仅供参考与学习</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> cluster </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch-dsl搜索学习</title>
      <link href="2020/04/27/elasticsearch-dsl-search/"/>
      <url>2020/04/27/elasticsearch-dsl-search/</url>
      
        <content type="html"><![CDATA[<h2 id="Elasticsearch-DSL搜索学习一"><a href="#Elasticsearch-DSL搜索学习一" class="headerlink" title="Elasticsearch-DSL搜索学习一"></a>Elasticsearch-DSL搜索学习一</h2><p>DSL(Domain Specific Language)是ES提出的基于json的搜索方式，在搜索时传入特定的json格式的数据来完成不同的搜索需求。</p><p>DSL比URI搜索方式功能强大，在项目中建议使用DSL方式来完成搜索。</p><h3 id="Postman查询"><a href="#Postman查询" class="headerlink" title="Postman查询"></a>Postman查询</h3><h4 id="查询所有索引库的文档"><a href="#查询所有索引库的文档" class="headerlink" title="查询所有索引库的文档"></a>查询所有索引库的文档</h4><p>Post方法：<code>http://192.168.0.104:9200/_search</code></p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">1</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">3</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">38.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-04-25 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;java编程基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">68.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-03-25 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">88.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-02-24 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><h4 id="查询指定索引库指定类型下的文档"><a href="#查询指定索引库指定类型下的文档" class="headerlink" title="查询指定索引库指定类型下的文档"></a>查询指定索引库指定类型下的文档</h4><p>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code>，一般采用这种方法</p><pre><code class="hljs json"><span class="hljs-comment">// 请求json串</span>&#123;<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;match_all&quot;</span>: &#123;&#125;&#125;,<span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>]&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">2</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">3</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>                &#125;            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;java编程基础&quot;</span>                &#125;            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>                &#125;            &#125;        ]    &#125;&#125;<span class="hljs-comment">// took:本次操作花费的时间，单位为毫秒。 </span><span class="hljs-comment">// timed_out:请求是否超时 </span><span class="hljs-comment">// _shards:说明本次操作共搜索了哪些分片</span><span class="hljs-comment">// hits:搜索命中的记录</span><span class="hljs-comment">// hits.total : 符合条件的文档总数 </span><span class="hljs-comment">// hits.hits :匹配度较高的前N个文档 </span><span class="hljs-comment">// hits.max_score:文档匹配得分，这里为最高分 </span><span class="hljs-comment">// _score:每个文档都有一个匹配度得分，按照降序排列。 </span><span class="hljs-comment">// _source:显示了文档的原始内容。</span></code></pre><h3 id="JavaClient查询"><a href="#JavaClient查询" class="headerlink" title="JavaClient查询"></a>JavaClient查询</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.elasticsearch;<span class="hljs-keyword">import</span> org.elasticsearch.action.search.SearchRequest;<span class="hljs-keyword">import</span> org.elasticsearch.action.search.SearchResponse;<span class="hljs-keyword">import</span> org.elasticsearch.client.RestClient;<span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<span class="hljs-keyword">import</span> org.elasticsearch.index.query.QueryBuilders;<span class="hljs-keyword">import</span> org.elasticsearch.search.SearchHit;<span class="hljs-keyword">import</span> org.elasticsearch.search.SearchHits;<span class="hljs-keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> org.junit.runner.RunWith;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.text.ParseException;<span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-comment">/**</span><span class="hljs-comment"> * DSL搜索测试</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/27</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootTest</span><span class="hljs-meta">@RunWith(SpringRunner.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSearch</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    RestHighLevelClient client;    <span class="hljs-meta">@Autowired</span>    RestClient restClient;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 搜索全部记录</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSearchAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ParseException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// 搜索方式(matchAllQuery搜索全部)</span>        searchSourceBuilder.query(QueryBuilders.matchAllQuery());        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        SimpleDateFormat dateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;&#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">3</span><span class="hljs-number">1</span>Bootstrap开发Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。<span class="hljs-number">38.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">04</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">2</span>java编程基础java语言是世界第一编程语言，在软件开发领域使用人数最多。<span class="hljs-number">68.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">3</span>spring开发基础spring 在java领域非常流行，java程序员都在用。<span class="hljs-number">88.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">24</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;from&quot;</span>: <span class="hljs-number">2</span>,<span class="hljs-attr">&quot;size&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;match_all&quot;</span>: &#123;&#125;&#125;,<span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>]&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">1</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">3</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * 搜索全部记录</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSearchPage</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ParseException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// 设置分页参数，起始下标，从0开始</span>        <span class="hljs-comment">// 页码</span>        <span class="hljs-keyword">int</span> page = <span class="hljs-number">1</span>;        <span class="hljs-comment">// 每页记录数</span>        <span class="hljs-keyword">int</span> size = <span class="hljs-number">1</span>;        <span class="hljs-comment">// 记录起始记录数</span>        <span class="hljs-keyword">int</span> from = (page - <span class="hljs-number">1</span>) * size;        searchSourceBuilder.from(from);        searchSourceBuilder.size(size);        <span class="hljs-comment">// 搜索方式(matchAllQuery搜索全部)</span>        searchSourceBuilder.query(QueryBuilders.matchAllQuery());        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-comment">// SimpleDateFormat dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span>        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">3</span><span class="hljs-number">1</span>Bootstrap开发Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。<span class="hljs-number">38.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">04</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><h3 id="Term-Query"><a href="#Term-Query" class="headerlink" title="Term Query"></a>Term Query</h3><p>Term Query为<strong>精确查询</strong>，在搜索时会**<u>整体匹配关键字</u>**，不再将关键字分词。</p><p>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;term&quot;</span>: &#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发&quot;</span>&#125;&#125;,<span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>]&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">1</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-literal">null</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: []    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * Term query查询记录</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSearchTermQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ParseException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// 搜索方式(matchAllQuery搜索全部)</span>        <span class="hljs-comment">// searchSourceBuilder.query(QueryBuilders.matchAllQuery());</span>        <span class="hljs-comment">// TermQuery查询</span>        searchSourceBuilder.query(QueryBuilders.termQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;spring&quot;</span>));        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">1</span><span class="hljs-number">3</span>spring开发基础spring 在java领域非常流行，java程序员都在用。<span class="hljs-number">88.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">24</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><h3 id="根据ID精确匹配"><a href="#根据ID精确匹配" class="headerlink" title="根据ID精确匹配"></a>根据ID精确匹配</h3><p>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;ids&quot;</span>: &#123;<span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,<span class="hljs-attr">&quot;values&quot;</span>: [<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;100&quot;</span>]&#125;&#125;,<span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>]&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>                &#125;            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;java编程基础&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * Term query ID查询记录</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSearchTermQueryByIds</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ParseException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// TermQuery查询-ID精确查询</span>        <span class="hljs-comment">// searchSourceBuilder.query(QueryBuilders.termQuery(&quot;name&quot;, &quot;spring&quot;));</span>        String[] ids = <span class="hljs-keyword">new</span> String[]&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>&#125;;        List&lt;String&gt; idList = Arrays.asList(ids);        searchSourceBuilder.query(QueryBuilders.termsQuery(<span class="hljs-string">&quot;_id&quot;</span>, idList));        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">2</span><span class="hljs-number">1</span>Bootstrap开发Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。<span class="hljs-number">38.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">04</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">2</span>java编程基础java语言是世界第一编程语言，在软件开发领域使用人数最多。<span class="hljs-number">68.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><h3 id="Match-query"><a href="#Match-query" class="headerlink" title="Match query"></a>Match query</h3><p>match Query即全文检索，它的搜索方式是<strong>先将搜索字符串分词</strong>，再使用各各词条从索引中搜索。<br>match query与Term query区别是match query在搜索前先将搜索关键字分词，再拿各各词语去索引中搜索。</p><p>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;match&quot;</span>: &#123;<span class="hljs-attr">&quot;description&quot;</span>: &#123;<span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;spring java&quot;</span>,<span class="hljs-attr">&quot;operator&quot;</span>: <span class="hljs-string">&quot;or&quot;</span>&#125;&#125;&#125;&#125;<span class="hljs-comment">// query:搜索的关键字，对于英文关键字如果有多个单词则中间要用半角逗号分隔，而对于中文关键字中间可以用逗号分隔也可以不用。</span><span class="hljs-comment">// operator:or 表示 只要有一个词在文档中出现则就符合条件，and表示每个词都在文档中出现则才符合条件。</span><span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">2.1239562</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">2.1239562</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">88.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-02-24 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">0.5735117</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;java编程基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">68.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-03-25 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * Match query 查询记录</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMatchQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ParseException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// TermQuery查询-Match query</span>        searchSourceBuilder.query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;spring java&quot;</span>)                .operator(Operator.OR));        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">2</span><span class="hljs-number">3</span>spring开发基础spring 在java领域非常流行，java程序员都在用。<span class="hljs-number">88.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">24</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">2</span>java编程基础java语言是世界第一编程语言，在软件开发领域使用人数最多。<span class="hljs-number">68.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><h3 id="minimum-should-match"><a href="#minimum-should-match" class="headerlink" title="minimum_should_match"></a>minimum_should_match</h3><p>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><p>“spring开发框架”会被分为三个词:spring、开发、框架<br> 设置”minimum_should_match”: “80%”表示，三个词在文档的匹配占比为80%，即3*0.8=2.4，向上取整得2，表示至少有两个词在文档中要匹配成功。</p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;match&quot;</span>: &#123;<span class="hljs-attr">&quot;description&quot;</span>: &#123;<span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;spring开发框架&quot;</span>,<span class="hljs-attr">&quot;minimum_should_match&quot;</span>: <span class="hljs-string">&quot;80%&quot;</span>&#125;&#125;&#125;&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">2.1431413</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">2.1431413</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">38.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-04-25 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * Match query minimum_should_match查询记录</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMatchQueryMinimum</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ParseException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// TermQuery查询-Match query的minimum_should_match查询记录，并设置匹配占比</span>        searchSourceBuilder.query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;spring开发框架&quot;</span>)                .minimumShouldMatch(<span class="hljs-string">&quot;80%&quot;</span>));        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">1</span><span class="hljs-number">1</span>Bootstrap开发Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。<span class="hljs-number">38.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">04</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><p>Multi Query</p><p>termQuery和matchQuery一次只能匹配一个Field，而multiQuery，一次可以匹配多个字段。<br>单项匹配是在一个field中去匹配，多项匹配是拿关键字去多个Field中匹配。</p><p>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;multi_match&quot;</span>: &#123;<span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;spring css&quot;</span>,<span class="hljs-attr">&quot;minimum_should_match&quot;</span>: <span class="hljs-string">&quot;50%&quot;</span>,<span class="hljs-attr">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>]&#125;&#125;&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">16</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">1.3339276</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1.3339276</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">88.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-02-24 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">0.69607234</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">38.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-04-25 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>提升boost</p><p>匹配多个字段时可以提升字段的boost(权重)来提高得分<br>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;multi_match&quot;</span>: &#123;<span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;spring框架&quot;</span>,<span class="hljs-attr">&quot;minimum_should_match&quot;</span>: <span class="hljs-string">&quot;50%&quot;</span>,<span class="hljs-attr">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name^10&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>]&#125;&#125;&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">9.331132</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">9.331132</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">88.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-02-24 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1.4149667</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">38.6</span>,                    <span class="hljs-attr">&quot;timestamp&quot;</span>: <span class="hljs-string">&quot;2018-04-25 19:11:35&quot;</span>,                    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java">    <span class="hljs-comment">/**</span><span class="hljs-comment">     * Multi query boost提升权重查询</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testMultiMatchBoost</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// Multi query</span>        MultiMatchQueryBuilder multiMatchQueryBuilder = QueryBuilders.multiMatchQuery(<span class="hljs-string">&quot;spring框架&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>)                .minimumShouldMatch(<span class="hljs-string">&quot;50%&quot;</span>);        <span class="hljs-comment">// name^10表示权重提升10倍</span>        multiMatchQueryBuilder.field(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-number">10</span>);        searchSourceBuilder.query(multiMatchQueryBuilder);        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">2</span><span class="hljs-number">3</span>spring开发基础spring 在java领域非常流行，java程序员都在用。<span class="hljs-number">88.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">24</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">1</span>Bootstrap开发Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。<span class="hljs-number">38.6</span></code></pre><h3 id="布尔查询"><a href="#布尔查询" class="headerlink" title="布尔查询"></a>布尔查询</h3><p>布尔查询对应于Lucene的BooleanQuery查询，实现将多个查询组合起来。<br>must:文档必须匹配must所包括的查询条件，相当于 “AND”<br>should:文档应该匹配should所包括的查询条件其 中的一个或多个，相当于 “OR”<br>must_not:文档不能匹配must_not所包括的该查询条件，相当于“NOT”</p><p>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>],<span class="hljs-attr">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-attr">&quot;size&quot;</span>: <span class="hljs-number">1</span>,<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;bool&quot;</span>: &#123;<span class="hljs-attr">&quot;must&quot;</span>: [&#123;<span class="hljs-attr">&quot;multi_match&quot;</span>: &#123;<span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;spring框架&quot;</span>,<span class="hljs-attr">&quot;minimum_should_match&quot;</span>: <span class="hljs-string">&quot;50%&quot;</span>,<span class="hljs-attr">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name^10&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>]&#125;&#125;,&#123;<span class="hljs-attr">&quot;term&quot;</span>: &#123;<span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>&#125;&#125;]&#125;&#125;&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">24</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">9.801136</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">9.801136</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java">    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 布尔查询</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testBoolQuery</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// Multi query</span>        MultiMatchQueryBuilder multiMatchQueryBuilder = QueryBuilders.multiMatchQuery(<span class="hljs-string">&quot;spring基础&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>)                .minimumShouldMatch(<span class="hljs-string">&quot;50%&quot;</span>);        <span class="hljs-comment">// name^10表示权重提升10倍</span>        multiMatchQueryBuilder.field(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-number">10</span>);        multiMatchQueryBuilder.field(<span class="hljs-string">&quot;description&quot;</span>);        <span class="hljs-comment">// term query</span>        TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;201001&quot;</span>);        <span class="hljs-comment">// Bool query</span>        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        boolQueryBuilder.must(multiMatchQueryBuilder);        boolQueryBuilder.must(termQueryBuilder);        <span class="hljs-comment">// 设置布尔查询对象</span>        searchSourceBuilder.query(boolQueryBuilder);        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">2</span><span class="hljs-number">3</span>spring开发基础spring 在java领域非常流行，java程序员都在用。<span class="hljs-number">88.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">24</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">2</span>java编程基础java语言是世界第一编程语言，在软件开发领域使用人数最多。<span class="hljs-number">68.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>过虑是针对搜索的结果进行过虑，过虑器主要判断的是文档是否匹配，不去计算和判断文档的匹配度得分，所以过虑器性能比查询要高，且方便缓存，推荐尽量使用过虑器去实现查询或者过虑器和查询共同使用。</p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>],<span class="hljs-attr">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-attr">&quot;size&quot;</span>: <span class="hljs-number">10</span>,<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;bool&quot;</span>: &#123;<span class="hljs-attr">&quot;must&quot;</span>: [&#123;<span class="hljs-attr">&quot;multi_match&quot;</span>: &#123;<span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;spring基础&quot;</span>,<span class="hljs-attr">&quot;minimum_should_match&quot;</span>: <span class="hljs-string">&quot;50%&quot;</span>,<span class="hljs-attr">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name^10&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>]&#125;&#125;],<span class="hljs-attr">&quot;filter&quot;</span>: [&#123;<span class="hljs-attr">&quot;term&quot;</span>: &#123;<span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>&#125;&#125;,&#123;<span class="hljs-attr">&quot;range&quot;</span>: &#123;<span class="hljs-attr">&quot;price&quot;</span>: &#123;<span class="hljs-attr">&quot;gte&quot;</span>: <span class="hljs-number">60</span>, <span class="hljs-attr">&quot;lte&quot;</span>: <span class="hljs-number">70</span>&#125;&#125;&#125;]&#125;&#125;&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">3</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">4.471386</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">4.471386</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">68.6</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;java编程基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * Filter查询</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testFilter</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// 设置分页参数，起始下标，从0开始</span>        <span class="hljs-comment">// 页码</span>        <span class="hljs-keyword">int</span> page = <span class="hljs-number">1</span>;        <span class="hljs-comment">// 每页记录数</span>        <span class="hljs-keyword">int</span> size = <span class="hljs-number">10</span>;        <span class="hljs-comment">// 记录起始记录数</span>        <span class="hljs-keyword">int</span> from = (page - <span class="hljs-number">1</span>) * size;        searchSourceBuilder.from(from);        searchSourceBuilder.size(size);        <span class="hljs-comment">// Multi query</span>        MultiMatchQueryBuilder multiMatchQueryBuilder = QueryBuilders.multiMatchQuery(<span class="hljs-string">&quot;spring基础&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>)                .minimumShouldMatch(<span class="hljs-string">&quot;50%&quot;</span>);        <span class="hljs-comment">// name^10表示权重提升10倍</span>        multiMatchQueryBuilder.field(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-number">10</span>);        multiMatchQueryBuilder.field(<span class="hljs-string">&quot;description&quot;</span>);        <span class="hljs-comment">// Bool query</span>        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        <span class="hljs-comment">// 设置布尔查询对象</span>        boolQueryBuilder.must(multiMatchQueryBuilder);        <span class="hljs-comment">// Filter过滤</span>        boolQueryBuilder.filter(QueryBuilders.termQuery(<span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;201001&quot;</span>));        boolQueryBuilder.filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).gte(<span class="hljs-number">60</span>).lte(<span class="hljs-number">70</span>));        searchSourceBuilder.query(boolQueryBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">1</span><span class="hljs-number">2</span>java编程基础java语言是世界第一编程语言，在软件开发领域使用人数最多。<span class="hljs-number">68.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>可以在字段上添加一个或多个排序，支持在keyword、date、float等类型上添加，text类型的字段上不允许添加排序。<br>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>],<span class="hljs-attr">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-attr">&quot;size&quot;</span>: <span class="hljs-number">10</span>,<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;bool&quot;</span>: &#123;<span class="hljs-attr">&quot;filter&quot;</span>: [&#123;<span class="hljs-attr">&quot;range&quot;</span>: &#123;<span class="hljs-attr">&quot;price&quot;</span>: &#123;<span class="hljs-attr">&quot;gte&quot;</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">&quot;lte&quot;</span>: <span class="hljs-number">100</span>&#125;&#125;&#125;]&#125;&#125;,<span class="hljs-attr">&quot;sort&quot;</span>: [&#123;<span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;desc&quot;</span>&#125;,&#123;<span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span>&#125;]&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">63</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">3</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-literal">null</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">38.6</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>                &#125;,                <span class="hljs-attr">&quot;sort&quot;</span>: [                    <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-number">38.6</span>                ]            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">68.6</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;java编程基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span>                &#125;,                <span class="hljs-attr">&quot;sort&quot;</span>: [                    <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-number">68.6</span>                ]            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">88.6</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>                &#125;,                <span class="hljs-attr">&quot;sort&quot;</span>: [                    <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-number">88.6</span>                ]            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * 排序查询</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSort</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// Bool query</span>        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        <span class="hljs-comment">// Filter过滤</span>        boolQueryBuilder.filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).gte(<span class="hljs-number">20</span>).lte(<span class="hljs-number">90</span>));        searchSourceBuilder.query(boolQueryBuilder);        <span class="hljs-comment">// Sort设置</span>        searchSourceBuilder.sort(<span class="hljs-keyword">new</span> FieldSortBuilder(<span class="hljs-string">&quot;studymodel&quot;</span>).order(SortOrder.DESC));        searchSourceBuilder.sort(<span class="hljs-keyword">new</span> FieldSortBuilder(<span class="hljs-string">&quot;price&quot;</span>).order(SortOrder.ASC));<span class="hljs-comment">//        searchSourceBuilder.sort(&quot;studymodel&quot;, SortOrder.DESC);</span><span class="hljs-comment">//        searchSourceBuilder.sort(&quot;price&quot;, SortOrder.ASC);</span>        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">3</span><span class="hljs-number">1</span>Bootstrap开发Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。<span class="hljs-number">38.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">04</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">2</span>java编程基础java语言是世界第一编程语言，在软件开发领域使用人数最多。<span class="hljs-number">68.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">3</span>spring开发基础spring 在java领域非常流行，java程序员都在用。<span class="hljs-number">88.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">24</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><h3 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h3><p>高亮显示可以将搜索结果一个或多个字突出显示，以便向用户展示匹配关键字的位置。（添加高亮显示的css样式标签）<br>Post方法：<code>http://192.168.0.104:9200/xc_course/doc/_search</code></p><pre><code class="hljs json"><span class="hljs-comment">// 请求串</span>&#123;<span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>],<span class="hljs-attr">&quot;query&quot;</span>: &#123;<span class="hljs-attr">&quot;bool&quot;</span>: &#123;<span class="hljs-attr">&quot;must&quot;</span>: [&#123;<span class="hljs-attr">&quot;multi_match&quot;</span>: &#123;<span class="hljs-attr">&quot;query&quot;</span>: <span class="hljs-string">&quot;开发框架&quot;</span>,<span class="hljs-attr">&quot;minimum_should_match&quot;</span>: <span class="hljs-string">&quot;50%&quot;</span>,<span class="hljs-attr">&quot;fields&quot;</span>: [<span class="hljs-string">&quot;name^10&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>],<span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;best_fields&quot;</span>&#125;&#125;],<span class="hljs-attr">&quot;filter&quot;</span>: [&#123;<span class="hljs-attr">&quot;range&quot;</span>: &#123;<span class="hljs-attr">&quot;price&quot;</span>: &#123;<span class="hljs-attr">&quot;gte&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">&quot;lte&quot;</span>: <span class="hljs-number">100</span>&#125;&#125;&#125;]&#125;&#125;,<span class="hljs-attr">&quot;sort&quot;</span>:[&#123;<span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span>&#125;],<span class="hljs-attr">&quot;highlight&quot;</span>: &#123;<span class="hljs-attr">&quot;pre_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;tag&gt;&quot;</span>],<span class="hljs-attr">&quot;post_tags&quot;</span>: [<span class="hljs-string">&quot;&lt;/tag&gt;&quot;</span>],<span class="hljs-attr">&quot;fields&quot;</span>: &#123;<span class="hljs-attr">&quot;name&quot;</span>: &#123;&#125;,<span class="hljs-attr">&quot;description&quot;</span>: &#123;&#125;&#125;&#125;&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">10</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">3</span>,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-literal">null</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">38.6</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>                &#125;,                <span class="hljs-attr">&quot;highlight&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: [                        <span class="hljs-string">&quot;Bootstrap&lt;tag&gt;开发&lt;/tag&gt;&quot;</span>                    ],                    <span class="hljs-attr">&quot;description&quot;</span>: [                        <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面&lt;tag&gt;开发&lt;/tag&gt;&lt;tag&gt;框架&lt;/tag&gt;，是一个非常流行的&lt;tag&gt;开发&lt;/tag&gt;&lt;tag&gt;框架&lt;/tag&gt;，此&lt;tag&gt;框架&lt;/tag&gt;集成了多种页面效果。&quot;</span>,                        <span class="hljs-string">&quot;此&lt;tag&gt;开发&lt;/tag&gt;&lt;tag&gt;框架&lt;/tag&gt;包含了大量的CSS、JS程序代码，可以帮助&lt;tag&gt;开发&lt;/tag&gt;者（尤其是不擅长页面&lt;tag&gt;开发&lt;/tag&gt;的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;</span>                    ]                &#125;,                <span class="hljs-attr">&quot;sort&quot;</span>: [                    <span class="hljs-number">38.6</span>                ]            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;2&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">68.6</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;java编程基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span>                &#125;,                <span class="hljs-attr">&quot;highlight&quot;</span>: &#123;                    <span class="hljs-attr">&quot;description&quot;</span>: [                        <span class="hljs-string">&quot;java语言是世界第一编程语言，在软件&lt;tag&gt;开发&lt;/tag&gt;领域使用人数最多。&quot;</span>                    ]                &#125;,                <span class="hljs-attr">&quot;sort&quot;</span>: [                    <span class="hljs-number">68.6</span>                ]            &#125;,            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">88.6</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>,                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;spring开发基础&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span>                &#125;,                <span class="hljs-attr">&quot;highlight&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: [                        <span class="hljs-string">&quot;spring&lt;tag&gt;开发&lt;/tag&gt;基础&quot;</span>                    ]                &#125;,                <span class="hljs-attr">&quot;sort&quot;</span>: [                    <span class="hljs-number">88.6</span>                ]            &#125;        ]    &#125;&#125;</code></pre><p>JavaClient查询</p><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment">     * Highlight高亮查询</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testHighLight</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 搜索请求对象</span>        SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 指定类型</span>        searchRequest.types(<span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 搜索源构建对象</span>        SearchSourceBuilder searchSourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();        <span class="hljs-comment">// 设置源字段过滤，args1结果集包括哪些字段，args2表示结果集不包括哪些字段</span>        searchSourceBuilder.fetchSource(<span class="hljs-keyword">new</span> String[] &#123;<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-string">&quot;timestamp&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>&#125;, <span class="hljs-keyword">new</span> String[]&#123;&#125;);        <span class="hljs-comment">// 向搜索请求对象中设置搜索源</span>        searchRequest.source(searchSourceBuilder);        <span class="hljs-comment">// Multi query</span>        MultiMatchQueryBuilder multiMatchQueryBuilder = QueryBuilders.multiMatchQuery(<span class="hljs-string">&quot;开发框架&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;description&quot;</span>)                .minimumShouldMatch(<span class="hljs-string">&quot;50%&quot;</span>);        <span class="hljs-comment">// name^10表示权重提升10倍</span>        multiMatchQueryBuilder.field(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-number">10</span>);        multiMatchQueryBuilder.field(<span class="hljs-string">&quot;description&quot;</span>);        <span class="hljs-comment">// Bool query</span>        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();        <span class="hljs-comment">// 设置布尔查询对象</span>        boolQueryBuilder.must(multiMatchQueryBuilder);        <span class="hljs-comment">// Filter过滤</span>        boolQueryBuilder.filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).gte(<span class="hljs-number">0</span>).lte(<span class="hljs-number">100</span>));        searchSourceBuilder.query(boolQueryBuilder);        <span class="hljs-comment">// 排序</span>        searchSourceBuilder.sort(<span class="hljs-keyword">new</span> FieldSortBuilder(<span class="hljs-string">&quot;price&quot;</span>).order(SortOrder.ASC));        <span class="hljs-comment">// 高亮设置</span>        HighlightBuilder highlightBuilder = <span class="hljs-keyword">new</span> HighlightBuilder();        <span class="hljs-comment">// 设置前缀（css样式）</span>        highlightBuilder.preTags(<span class="hljs-string">&quot;&lt;tag&gt;&quot;</span>);        <span class="hljs-comment">// 设置后缀（css样式）</span>        highlightBuilder.postTags(<span class="hljs-string">&quot;&lt;/tag&gt;&quot;</span>);        <span class="hljs-comment">// 设置高亮字段</span>        highlightBuilder.fields().add(<span class="hljs-keyword">new</span> HighlightBuilder.Field(<span class="hljs-string">&quot;name&quot;</span>));        highlightBuilder.fields().add(<span class="hljs-keyword">new</span> HighlightBuilder.Field(<span class="hljs-string">&quot;description&quot;</span>));        searchSourceBuilder.highlighter(highlightBuilder);        <span class="hljs-comment">// 执行搜索，向ES发起http请求</span>        SearchResponse searchResponse = client.search(searchRequest);        <span class="hljs-comment">// 获取搜索结果</span>        SearchHits hits = searchResponse.getHits();        <span class="hljs-comment">// 匹配到的总记录数</span>        <span class="hljs-keyword">long</span> totalHits = hits.getTotalHits();        System.out.println(totalHits);        <span class="hljs-comment">// 匹配度高的文档</span>        SearchHit[] searchHits = hits.getHits();        <span class="hljs-keyword">for</span> (SearchHit hit : searchHits) &#123;            <span class="hljs-comment">// ID</span>            String id = hit.getId();            Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();            <span class="hljs-comment">// 名称</span>            String name = (String)sourceAsMap.get(<span class="hljs-string">&quot;name&quot;</span>);            <span class="hljs-comment">// 由于上面设置了源文档字段过滤，这时description是获取不到内容，可以加上测试</span>            String description = (String)sourceAsMap.get(<span class="hljs-string">&quot;description&quot;</span>);            <span class="hljs-comment">// 取出高亮字段内容</span>            Map&lt;String, HighlightField&gt; highlightFields = hit.getHighlightFields();            <span class="hljs-keyword">if</span> (highlightFields != <span class="hljs-keyword">null</span>) &#123;                <span class="hljs-comment">// 名称</span>                HighlightField nameHightlight = highlightFields.get(<span class="hljs-string">&quot;name&quot;</span>);                name = getHightlightContent(name, nameHightlight);                <span class="hljs-comment">// 详细内容</span>                HighlightField descriptionFields = highlightFields.get(<span class="hljs-string">&quot;description&quot;</span>);                description = getHightlightContent(description, descriptionFields);            &#125;            <span class="hljs-comment">// 价格</span>            Double price = (Double) sourceAsMap.get(<span class="hljs-string">&quot;price&quot;</span>);            <span class="hljs-comment">// 时间</span>            String timestamp = (String) sourceAsMap.get(<span class="hljs-string">&quot;timestamp&quot;</span>);            System.out.println(id);            System.out.println(name);            System.out.println(description);            System.out.println(price);            System.out.println(timestamp);        &#125;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 高亮内容获取</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> field</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> highlightField</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getHightlightContent</span><span class="hljs-params">(String field, HighlightField highlightField)</span> </span>&#123;        StringBuffer stringBuffer = <span class="hljs-keyword">new</span> StringBuffer();        <span class="hljs-keyword">if</span> (highlightField != <span class="hljs-keyword">null</span>) &#123;            Text[] fragments = highlightField.getFragments();            <span class="hljs-keyword">for</span> (Text fragment : fragments) &#123;                stringBuffer.append(fragment);            &#125;            field = stringBuffer.toString();        &#125;        <span class="hljs-keyword">return</span> field;    &#125;<span class="hljs-comment">// 结果</span><span class="hljs-number">3</span><span class="hljs-number">1</span>Bootstrap&lt;tag&gt;开发&lt;/tag&gt;Bootstrap是由Twitter推出的一个前台页面&lt;tag&gt;开发&lt;/tag&gt;&lt;tag&gt;框架&lt;/tag&gt;，是一个非常流行的&lt;tag&gt;开发&lt;/tag&gt;&lt;tag&gt;框架&lt;/tag&gt;，此&lt;tag&gt;框架&lt;/tag&gt;集成了多种页面效果。此&lt;tag&gt;开发&lt;/tag&gt;&lt;tag&gt;框架&lt;/tag&gt;包含了大量的CSS、JS程序代码，可以帮助&lt;tag&gt;开发&lt;/tag&gt;者（尤其是不擅长页面&lt;tag&gt;开发&lt;/tag&gt;的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。<span class="hljs-number">38.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">04</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">2</span>java编程基础java语言是世界第一编程语言，在软件&lt;tag&gt;开发&lt;/tag&gt;领域使用人数最多。<span class="hljs-number">68.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">03</span>-<span class="hljs-number">25</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span><span class="hljs-number">3</span>spring&lt;tag&gt;开发&lt;/tag&gt;基础spring 在java领域非常流行，java程序员都在用。<span class="hljs-number">88.6</span><span class="hljs-number">2018</span>-<span class="hljs-number">02</span>-<span class="hljs-number">24</span> <span class="hljs-number">19</span>:<span class="hljs-number">11</span>:<span class="hljs-number">35</span></code></pre><p><u><strong>ps：本文为学习记录，仅供学习与参考</strong></u></p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> dsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch与spring-boot整合</title>
      <link href="2020/04/26/elasticsearch-spring-boot/"/>
      <url>2020/04/26/elasticsearch-spring-boot/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Elasticsearch与spring-boot整合"><a href="#Elasticsearch与spring-boot整合" class="headerlink" title="Elasticsearch与spring-boot整合"></a>Elasticsearch与spring-boot整合</h2><h3 id="ES客户端"><a href="#ES客户端" class="headerlink" title="ES客户端"></a>ES客户端</h3><p>RestClient是官方推荐使用的，它包括两种:Java Low Level REST Client和 Java High Level REST Client。<br>ES在6.0之后提供 Java High Level REST Client， 两种客户端官方更推荐使用 **<u>Java High Level REST Client</u>**，不过当前它还处于完善中，有些功能还没有。<br>可以采用 Java High Level REST Client，如果它有不支持的功能，则使用Java Low Level REST Client。</p><h3 id="依赖Pom"><a href="#依赖Pom" class="headerlink" title="依赖Pom"></a>依赖Pom</h3><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../xc-framework-parent/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-service-search<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--project config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-model<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-service-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--web config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--elasticsearch client config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--elasticsearch config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--test config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--utils config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h3 id="application配置"><a href="#application配置" class="headerlink" title="application配置"></a>application配置</h3><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-string">$&#123;port:40100&#125;</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">xc-service-search</span><span class="hljs-attr">xuecheng:</span>  <span class="hljs-attr">elasticsearch:</span>    <span class="hljs-comment"># 多个节点中间使用逗号分隔</span>    <span class="hljs-attr">hostlist:</span> <span class="hljs-string">$&#123;eshostlist:127.0.0.1:9200&#125;</span></code></pre><h3 id="Elasticsearch配置类"><a href="#Elasticsearch配置类" class="headerlink" title="Elasticsearch配置类"></a>Elasticsearch配置类</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.elasticsearch.config;<span class="hljs-keyword">import</span> org.apache.http.HttpHost;<span class="hljs-keyword">import</span> org.elasticsearch.client.RestClient;<span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Elasticsearch配置类。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/26</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticsearchConfig</span> </span>&#123;    <span class="hljs-meta">@Value(&quot;$&#123;xuecheng.elasticsearch.hostlist&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String hostList;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * RestHighLevelClient配置</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestHighLevelClient <span class="hljs-title">restHighLevelClient</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// 解析hostList配置信息</span>        String[] split = hostList.split(<span class="hljs-string">&quot;,&quot;</span>);        <span class="hljs-comment">// 创建HttpHost数组，其中存放es主机和端口的配置信息</span>        HttpHost[] httpHosts = <span class="hljs-keyword">new</span> HttpHost[split.length];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; split.length; i++) &#123;            String item = split[i];            httpHosts[i] = <span class="hljs-keyword">new</span> HttpHost(item.split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">0</span>], Integer.parseInt(item.split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>]), <span class="hljs-string">&quot;http&quot;</span>);        &#125;        <span class="hljs-comment">// 创建RestHighLevelClient客户端</span>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestHighLevelClient(RestClient.builder(httpHosts));    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 低组的RestClient客户端，主要使用RestHighLevelClient</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestClient <span class="hljs-title">restClient</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// 解析hostList配置信息</span>        String[] split = hostList.split(<span class="hljs-string">&quot;,&quot;</span>);        <span class="hljs-comment">// 创建HttpHost数组，其中存放es主机和端口的配置信息</span>        HttpHost[] httpHosts = <span class="hljs-keyword">new</span> HttpHost[split.length];        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; split.length; i++) &#123;            String item = split[i];            httpHosts[i] = <span class="hljs-keyword">new</span> HttpHost(item.split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">0</span>], Integer.parseInt(item.split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>]), <span class="hljs-string">&quot;http&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> RestClient.builder(httpHosts).build();    &#125;&#125;</code></pre><h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.elasticsearch;<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.domain.EntityScan;<span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<span class="hljs-comment">/**</span><span class="hljs-comment"> * ElasticSearch项目启动类。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/26</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@EntityScan(&quot;com.xuecheng.framework.domain.search&quot;)</span><span class="hljs-comment">//扫描实体类</span><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.xuecheng.api&quot;&#125;)</span><span class="hljs-comment">//扫描接口</span><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.xuecheng.elasticsearch&quot;&#125;)</span><span class="hljs-comment">//扫描本项目下的所有类</span><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.xuecheng.framework&quot;&#125;)</span><span class="hljs-comment">//扫描common项目下的所有类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticSearchApplication</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(ElasticSearchApplication.class, args);    &#125;&#125;</code></pre><h3 id="测试ES索引"><a href="#测试ES索引" class="headerlink" title="测试ES索引"></a>测试ES索引</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.elasticsearch;<span class="hljs-keyword">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;<span class="hljs-keyword">import</span> org.elasticsearch.action.admin.indices.delete.DeleteIndexResponse;<span class="hljs-keyword">import</span> org.elasticsearch.client.IndicesClient;<span class="hljs-keyword">import</span> org.elasticsearch.client.RestClient;<span class="hljs-keyword">import</span> org.elasticsearch.client.RestHighLevelClient;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> org.junit.runner.RunWith;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * ES索引测试</span><span class="hljs-comment"> * </span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: &#123;Elasticsearch的版本是6.3.2，安装好分词器ik6.3.2版本。&#125;</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/26</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootTest</span><span class="hljs-meta">@RunWith(SpringRunner.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestIndex</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    RestHighLevelClient restHighLevelClient;    <span class="hljs-meta">@Autowired</span>    RestClient restClient;      <span class="hljs-comment">/**</span><span class="hljs-comment">     * 创建索引测试</span><span class="hljs-comment">     * Elasticsearch的版本是6.3.2，安装好分词器ik6.3.2版本。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testCreateIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 创建索引对象</span>        CreateIndexRequest createIndexRequest = <span class="hljs-keyword">new</span> CreateIndexRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 设置参数</span>        createIndexRequest.settings(Settings.builder().put(<span class="hljs-string">&quot;number_of_shards&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)                .put(<span class="hljs-string">&quot;number_of_replicas&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>));        createIndexRequest.mapping(<span class="hljs-string">&quot;doc&quot;</span>,<span class="hljs-string">&quot; &#123;\n&quot;</span> +                <span class="hljs-string">&quot; \t\&quot;properties\&quot;: &#123;\n&quot;</span> +                <span class="hljs-string">&quot;            \&quot;studymodel\&quot;:&#123;\n&quot;</span> +                <span class="hljs-string">&quot;             \&quot;type\&quot;:\&quot;keyword\&quot;\n&quot;</span> +                <span class="hljs-string">&quot;           &#125;,\n&quot;</span> +                <span class="hljs-string">&quot;            \&quot;name\&quot;:&#123;\n&quot;</span> +                <span class="hljs-string">&quot;             \&quot;type\&quot;:\&quot;keyword\&quot;\n&quot;</span> +                <span class="hljs-string">&quot;           &#125;,\n&quot;</span> +                <span class="hljs-string">&quot;           \&quot;description\&quot;: &#123;\n&quot;</span> +                <span class="hljs-string">&quot;              \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +                <span class="hljs-string">&quot;              \&quot;analyzer\&quot;:\&quot;ik_max_word\&quot;,\n&quot;</span> +                <span class="hljs-string">&quot;              \&quot;search_analyzer\&quot;:\&quot;ik_smart\&quot;\n&quot;</span> +                <span class="hljs-string">&quot;           &#125;,\n&quot;</span> +                <span class="hljs-string">&quot;           \&quot;pic\&quot;:&#123;\n&quot;</span> +                <span class="hljs-string">&quot;             \&quot;type\&quot;:\&quot;text\&quot;,\n&quot;</span> +                <span class="hljs-string">&quot;             \&quot;index\&quot;:false\n&quot;</span> +                <span class="hljs-string">&quot;           &#125;\n&quot;</span> +                <span class="hljs-string">&quot; \t&#125;\n&quot;</span> +                <span class="hljs-string">&quot;&#125;&quot;</span>, XContentType.JSON);        <span class="hljs-comment">// 操作索引的客户端</span>        IndicesClient indices = restHighLevelClient.indices();        <span class="hljs-comment">// 执行创建索引库</span>        CreateIndexResponse createIndexResponse = indices.create(createIndexRequest);        <span class="hljs-comment">// 得到响应</span>        <span class="hljs-keyword">boolean</span> acknowledged = createIndexResponse.isAcknowledged();        System.out.println(acknowledged);    &#125;     <span class="hljs-comment">/**</span><span class="hljs-comment">     * 添加文档</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testAddDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 文档内容</span>        HashMap&lt;Object, Object&gt; jsonMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        jsonMap.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;spring cloud实战&quot;</span>);        jsonMap.put(<span class="hljs-string">&quot;description&quot;</span>, <span class="hljs-string">&quot;本课程主要从四个章节进行讲解： 1.微服务架构入门 2.spring cloud 基础入门 3.实战Spring Boot 4.注册中心eureka。&quot;</span>);        jsonMap.put(<span class="hljs-string">&quot;studymodel&quot;</span>, <span class="hljs-string">&quot;201001&quot;</span>);        SimpleDateFormat dateFormat = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);        jsonMap.put(<span class="hljs-string">&quot;timestamp&quot;</span>, dateFormat.format(<span class="hljs-keyword">new</span> Date()));        jsonMap.put(<span class="hljs-string">&quot;price&quot;</span>, <span class="hljs-number">5.6f</span>);        <span class="hljs-comment">// 创建索引创建对象</span>        IndexRequest indexRequest = <span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;xc_course&quot;</span>, <span class="hljs-string">&quot;doc&quot;</span>);        <span class="hljs-comment">// 文档内容</span>        indexRequest.source(jsonMap);        <span class="hljs-comment">// 通过client进行http请求</span>        IndexResponse indexResponse = restHighLevelClient.index(indexRequest);        DocWriteResponse.Result result = indexResponse.getResult();        System.out.println(result);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 查询文档</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testGetDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        GetRequest getRequest = <span class="hljs-keyword">new</span> GetRequest(<span class="hljs-string">&quot;xc_course&quot;</span>, <span class="hljs-string">&quot;doc&quot;</span>, <span class="hljs-string">&quot;4HjhtnEBAZIsF0uSUCnm&quot;</span>);        GetResponse response = restHighLevelClient.get(getRequest);        Map&lt;String, Object&gt; sourceAsMap = response.getSourceAsMap();        System.out.println(sourceAsMap);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 更新文档-局部更新（全局更新，重新设定所有map的值）</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdateDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        UpdateRequest updateRequest = <span class="hljs-keyword">new</span> UpdateRequest(<span class="hljs-string">&quot;xc_course&quot;</span>, <span class="hljs-string">&quot;doc&quot;</span>, <span class="hljs-string">&quot;4HjhtnEBAZIsF0uSUCnm&quot;</span>);        <span class="hljs-comment">// 文档内容</span>        HashMap&lt;Object, Object&gt; jsonMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        jsonMap.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;spring cloud实战-更新&quot;</span>);        updateRequest.doc(jsonMap);        UpdateResponse update = restHighLevelClient.update(updateRequest);        RestStatus status = update.status();        System.out.println(status);    &#125;      <span class="hljs-comment">/**</span><span class="hljs-comment">     * 删除文档</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDelDoc</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 删除文档的ID</span>        String id = <span class="hljs-string">&quot;4HjhtnEBAZIsF0uSUCnm&quot;</span>;        <span class="hljs-comment">// 删除索引对象</span>        DeleteRequest deleteRequest = <span class="hljs-keyword">new</span> DeleteRequest(<span class="hljs-string">&quot;xc_course&quot;</span>, <span class="hljs-string">&quot;doc&quot;</span>, id);        <span class="hljs-comment">// 响应对象</span>        DeleteResponse deleteResponse = restHighLevelClient.delete(deleteRequest);        DocWriteResponse.Result result = deleteResponse.getResult();        System.out.println(result);    &#125;      <span class="hljs-comment">/**</span><span class="hljs-comment">     * 删除索引库</span><span class="hljs-comment">     *</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testDeleteIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;        <span class="hljs-comment">// 删除索引对象</span>        DeleteIndexRequest deleteIndexRequest = <span class="hljs-keyword">new</span> DeleteIndexRequest(<span class="hljs-string">&quot;xc_course&quot;</span>);        <span class="hljs-comment">// 操作索引的客户端</span>        IndicesClient indices = restHighLevelClient.indices();        <span class="hljs-comment">// 执行删除索引</span>        DeleteIndexResponse delete = indices.delete(deleteIndexRequest);        <span class="hljs-comment">// 得到删除响应</span>        <span class="hljs-keyword">boolean</span> acknowledged = delete.isAcknowledged();        System.out.println(acknowledged);    &#125;  &#125;</code></pre><p>运行，访问’<a href="http://localhost:9100/&#39;%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0xc_course%E5%B7%B2%E7%BB%8F%E8%A2%AB%E5%88%9B%E5%BB%BA%EF%BC%8C%E5%88%A0%E9%99%A4%E3%80%82">http://localhost:9100/&#39;，可以发现xc_course已经被创建，删除。</a></p><p><strong><u>ps: 本文为学习笔记，仅供学习与参考。</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> spring-boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch学习一</title>
      <link href="2020/04/23/elasticSearch-learning-one/"/>
      <url>2020/04/23/elasticSearch-learning-one/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="ElasticSearch学习一"><a href="#ElasticSearch学习一" class="headerlink" title="ElasticSearch学习一"></a>ElasticSearch学习一</h2><p>什么是 Elasticsearch?<br>Elasticsearch 是一个开源的分布式 RESTful 搜索和分析引擎，能够解决越来越多不同的应用场景。<br>此外，还可以<a href="https://account.aliyun.com/login/login.htm?oauth_callback=http://common-buy.aliyun.com/?spm=a2c0j.9528745.826947.detail-button-testbuy01.52d55a36mcUW9g&commodityCode=elasticsearchpre&request=%7B%22region%22:%22cn-hangzhou%22,%22es_version%22:%225.5.3_with_X-Pack%22,%22network_type%22:%22VPC%22,%22vs_area%22:%22cn-hangzhou-b%22,%22vpc_id%22:%22vpc-bp170psqmu5is7iml6bq9%22,%22vswitch_id%22:%22vsw-bp1jyxgwodxsb1h9tfbih%22,%22node_spec%22:%22elasticsearch.n4.small%22,%22disk%22:20,%22node_amount%22:2,%22dedicate_master%22:false,%22ord_time%22:%22%5B%5Cn%20%201,%5Cn%20%20%5C%22Month%5C%22,%5Cn%20%20null%5Cn%5D%22%7D">免费试用</a>14天 <a href="https://data.aliyun.com/product/elasticsearch">阿里云 Elasticsearch</a> 服务试用服务托管 Elasticsearch（和 Kibana）或<a href="https://cloud.tencent.com/product/es">腾讯云Elasticsearch服务</a>。</p><p>elasticsearch是一个基于Lucene的高扩展的分布式搜索服务器，支持开箱即用。<br>elasticsearch隐藏了Lucene的复杂性，对外提供**<u>Restful接口</u>**来操作索引、搜索。</p><p>优点：<br>扩展性好，可部署上百台服务器集群，处理PB级数据。<br>近实时的去索引数据、搜索数据。</p><p>如果你公司准备进行全文检索项目的开发，建议优先考虑elasticsearch，因为像Github这样大规模的搜索都在用它。</p><p>下图是ElasticSearch的索引结构，下边黑色部分是物理结构，上边黄色部分是逻辑结构，逻辑结构也是为了更好的去描述ElasticSearch的工作原理及去使用物理结构中的索引文件。</p><p><img src="/2020/04/23/elasticSearch-learning-one/1.png" alt="index-structure"></p><p>逻辑结构部分是一个倒排索引表<br>将要搜索的文档内容分词，所有不重复的词组成分词列表。<br>将搜索的文档最终以Document方式存储起来。<br>每个词和docment都有关联。</p><p>ElasticSearch在项目中的应用方式:</p><p><img src="/2020/04/23/elasticSearch-learning-one/2.png" alt="ElasticSearch-wrokflow"></p><p>用户在前端搜索关键字<br>项目前端通过http方式请求项目服务端<br>项目服务端通过Http RESTful方式请求ES集群进行搜索<br>ES集群从索引库检索数据。</p><p><img src="/2020/04/23/elasticSearch-learning-one/3.png" alt="ElasticSearch-structure"></p><h3 id="ElasticSearch安装"><a href="#ElasticSearch安装" class="headerlink" title="ElasticSearch安装"></a>ElasticSearch安装</h3><h4 id="单机版安装（mac版）"><a href="#单机版安装（mac版）" class="headerlink" title="单机版安装（mac版）"></a>单机版安装（mac版）</h4><p>下载jar:elasticsearch-7.6.2-darwin-x86_64.tar.gz</p><p>解压：tar -zxvf elasticsearch-7.6.2-darwin-x86_64.tar.gz</p><pre><code class="hljs bash"><span class="hljs-comment"># cd elasticsearch-7.6.2</span>// 启动<span class="hljs-comment"># bin/elasticsearch</span></code></pre><p>访问：</p><p><code>http://localhost:9200/</code></p><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-attr">&quot;cluster_name&quot;</span>: <span class="hljs-string">&quot;elasticsearch&quot;</span>,<span class="hljs-attr">&quot;cluster_uuid&quot;</span>: <span class="hljs-string">&quot;UMEbOpOBRMuGVYhYPcPqiA&quot;</span>,<span class="hljs-attr">&quot;version&quot;</span>: &#123;<span class="hljs-attr">&quot;number&quot;</span>: <span class="hljs-string">&quot;7.6.2&quot;</span>,<span class="hljs-attr">&quot;build_flavor&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,<span class="hljs-attr">&quot;build_type&quot;</span>: <span class="hljs-string">&quot;tar&quot;</span>,<span class="hljs-attr">&quot;build_hash&quot;</span>: <span class="hljs-string">&quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;</span>,<span class="hljs-attr">&quot;build_date&quot;</span>: <span class="hljs-string">&quot;2020-03-26T06:34:37.794943Z&quot;</span>,<span class="hljs-attr">&quot;build_snapshot&quot;</span>: <span class="hljs-literal">false</span>,<span class="hljs-attr">&quot;lucene_version&quot;</span>: <span class="hljs-string">&quot;8.4.0&quot;</span>,<span class="hljs-attr">&quot;minimum_wire_compatibility_version&quot;</span>: <span class="hljs-string">&quot;6.8.0&quot;</span>,<span class="hljs-attr">&quot;minimum_index_compatibility_version&quot;</span>: <span class="hljs-string">&quot;6.0.0-beta1&quot;</span>&#125;,<span class="hljs-attr">&quot;tagline&quot;</span>: <span class="hljs-string">&quot;You Know, for Search&quot;</span>&#125;</code></pre><h4 id="安装head插件"><a href="#安装head插件" class="headerlink" title="安装head插件"></a>安装head插件</h4><p>head插件是ES的一个可视化管理插件，用来监视ES的状态，并通过head客户端和ES服务进行交互，比如创建映射、创建索引等，从ES6.0开始，head插件支持使得node.js运行。</p><pre><code class="hljs bash"><span class="hljs-comment"># git clone git://github.com/mobz/elasticsearch-head.git </span><span class="hljs-comment"># cd elasticsearch-head/</span>// 安装node_modules<span class="hljs-comment"># npm install</span>// 启动<span class="hljs-comment"># npm run start</span>&gt; elasticsearch-head@0.0.0 start /Users/xxx/Documents/Elasticsearch/jar/elasticsearch-head&gt; grunt serverRunning <span class="hljs-string">&quot;connect:server&quot;</span> (connect) taskWaiting forever...Started connect web server on http://localhost:9100</code></pre><p>解决跨域问题，设置elasticsearch.yml，然后重启</p><pre><code class="hljs yaml"><span class="hljs-comment"># vim elasticsearch.yml</span><span class="hljs-comment"># ======================== Elasticsearch Configuration =========================</span><span class="hljs-comment">#</span><span class="hljs-comment"># <span class="hljs-doctag">NOTE:</span> Elasticsearch comes with reasonable defaults for most settings.</span><span class="hljs-comment">#       Before you set out to tweak and tune the configuration, make sure you</span><span class="hljs-comment">#       understand what are you trying to accomplish and the consequences.</span><span class="hljs-comment">#</span><span class="hljs-comment"># The primary way of configuring a node is via this file. This template lists</span><span class="hljs-comment"># the most important settings you may want to configure for a production cluster.</span><span class="hljs-comment">#</span><span class="hljs-comment"># Please consult the documentation for further information on configuration options:</span><span class="hljs-comment"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span><span class="hljs-comment">#</span><span class="hljs-comment"># ---------------------------------- Cluster -----------------------------------</span><span class="hljs-comment">#</span><span class="hljs-comment"># Use a descriptive name for your cluster:</span><span class="hljs-comment">#</span><span class="hljs-comment">#cluster.name: my-application</span><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">lc-xc</span> <span class="hljs-comment">#</span><span class="hljs-comment"># ------------------------------------ Node ------------------------------------</span><span class="hljs-comment">#</span><span class="hljs-comment"># Use a descriptive name for the node:</span><span class="hljs-comment">#</span><span class="hljs-comment">#node.name: node-1</span><span class="hljs-attr">node.name:</span> <span class="hljs-string">xc_node-1</span><span class="hljs-comment">#node.max_local_storage_nodes: 1</span><span class="hljs-comment">#</span><span class="hljs-comment"># Add custom attributes to the node:</span><span class="hljs-comment">#</span><span class="hljs-comment">#node.attr.rack: r1</span><span class="hljs-comment">#</span><span class="hljs-comment"># ----------------------------------- Paths ------------------------------------</span><span class="hljs-comment">#</span><span class="hljs-comment"># Path to directory where to store the data (separate multiple locations by comma):</span><span class="hljs-comment">#</span><span class="hljs-comment">#path.data: /path/to/data</span><span class="hljs-attr">path.data:</span> <span class="hljs-string">/Users/user_name/Documents/Elasticsearch/data/elasticsearch-7.6.2</span><span class="hljs-comment">#</span><span class="hljs-comment"># Path to log files:</span><span class="hljs-comment">#</span><span class="hljs-comment">#path.logs: /path/to/logs</span><span class="hljs-attr">path.logs:</span> <span class="hljs-string">/Users/user_name/Documents/Elasticsearch/logs/elasticsearch-7.6.2</span><span class="hljs-comment">#</span><span class="hljs-comment"># ----------------------------------- Memory -----------------------------------</span><span class="hljs-comment">#</span><span class="hljs-comment"># Lock the memory on startup:</span><span class="hljs-comment">#</span><span class="hljs-comment">#bootstrap.memory_lock: true</span><span class="hljs-attr">bootstrap.memory_lock:</span> <span class="hljs-literal">false</span><span class="hljs-comment">#</span><span class="hljs-comment"># Make sure that the heap size is set to about half the memory available</span><span class="hljs-comment"># on the system and that the owner of the process is allowed to use this</span><span class="hljs-comment"># limit.</span><span class="hljs-comment">#</span><span class="hljs-comment"># Elasticsearch performs poorly when the system is swapping the memory.</span><span class="hljs-comment">#</span><span class="hljs-comment"># ---------------------------------- Network -----------------------------------</span><span class="hljs-comment">#</span><span class="hljs-comment"># Set the bind address to a specific IP (IPv4 or IPv6):</span><span class="hljs-comment">#</span><span class="hljs-comment">#network.host: 192.168.0.1</span><span class="hljs-string">//</span> <span class="hljs-string">如果想在别的机器上访问该ES服务，则修改此项为本机的IP地址</span><span class="hljs-attr">network.host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-comment">#</span><span class="hljs-comment"># Set a custom port for HTTP:</span><span class="hljs-comment">#</span><span class="hljs-comment">#http.port: 9200</span><span class="hljs-attr">http.port:</span> <span class="hljs-number">9200</span><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9300</span><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">/.*/</span><span class="hljs-comment">#</span><span class="hljs-comment"># For more information, consult the network module documentation.</span><span class="hljs-comment">#</span><span class="hljs-comment"># --------------------------------- Discovery ----------------------------------</span><span class="hljs-comment">#</span><span class="hljs-comment"># Pass an initial list of hosts to perform discovery when this node is started:</span><span class="hljs-comment"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span><span class="hljs-comment">#</span><span class="hljs-comment">#discovery.seed_hosts: [&quot;host1&quot;, &quot;host2&quot;]</span><span class="hljs-comment">#</span><span class="hljs-comment"># Bootstrap the cluster using an initial set of master-eligible nodes:</span><span class="hljs-comment">#</span><span class="hljs-comment">#cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;]</span><span class="hljs-comment">#</span><span class="hljs-comment"># For more information, consult the discovery and cluster formation module documentation.</span><span class="hljs-comment">#</span><span class="hljs-comment"># ---------------------------------- Gateway -----------------------------------</span><span class="hljs-comment">#</span><span class="hljs-comment"># Block initial recovery after a full cluster restart until N nodes are started:</span><span class="hljs-comment">#</span><span class="hljs-comment">#gateway.recover_after_nodes: 3</span><span class="hljs-comment">#</span><span class="hljs-comment"># For more information, consult the gateway module documentation.</span><span class="hljs-comment">#</span><span class="hljs-comment"># ---------------------------------- Various -----------------------------------</span><span class="hljs-comment">#</span><span class="hljs-comment"># Require explicit names when deleting indices:</span><span class="hljs-comment">#</span><span class="hljs-comment">#action.destructive_requires_name: true</span></code></pre><p>访问<code>http://localhost:9100/</code></p><p><img src="/2020/04/23/elasticSearch-learning-one/4.png" alt="es-head"></p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>ES作为一个索引及搜索服务，对外提供丰富的REST接口，快速入门部分的实例使用head插件来测试，目的是对ES的使用方法及流程有个初步的认识。<br>ES的索引库是一个逻辑概念，它包括了分词列表及文档列表，同一个索引库中存储了相同类型的文档。它就相当于MySQL中的表，或相当于Mongodb中的集合。<br>索引(名词):ES是基于Lucene构建的一个搜索服务，它要从索引库搜索符合条件索引数据。<br>索引(动词):索引库刚创建起来是空的，将数据添加到索引库的过程称为索引。</p><ul><li>使用postman工具来创建索引</li></ul><pre><code class="hljs json"><span class="hljs-comment">// put方法</span>localhost:9200/xc_course&#123;     <span class="hljs-attr">&quot;settings&quot;</span>:&#123;     <span class="hljs-attr">&quot;index&quot;</span>:&#123;         <span class="hljs-attr">&quot;number_of_shards&quot;</span>:<span class="hljs-number">1</span>,         <span class="hljs-attr">&quot;number_of_replicas&quot;</span>:<span class="hljs-number">0</span>       &#125;&#125;&#125;</code></pre><p><img src="/2020/04/23/elasticSearch-learning-one/5.png" alt="es-create-index"></p><p>head插件查看</p><p><img src="/2020/04/23/elasticSearch-learning-one/6.png" alt="head-index-look"></p><p>另外，通过head插件也可方便删除、新建索引。</p><h3 id="创建映射"><a href="#创建映射" class="headerlink" title="创建映射"></a>创建映射</h3><p>在索引中每个文档都包括了一个或多个field，创建映射就是向索引库中创建field的过程，下边是document和field与关系数据库的概念的类比:<br>文档(Document)—————-Row记录<br>字段(Field)——————-Columns 列</p><p>注意:**<u>6.0之前的版本</u>**有type(类型)概念，type相当于关系数据库的表，ES官方将在ES9.0版本中彻底删除type。</p><p>上边讲的创建索引库相当于关系数据库中的数据库还是表?</p><p>1、如果相当于数据库就表示一个索引库可以创建很多不同类型的文档，这在ES中也是允许的。<br>2、如果相当于表就表示一个索引库只能存储相同类型的文档，ES官方建议在一个索引库中只存储相同类型的文档。</p><p>Post方法：<code>localhost:9200/xc_course/_mapping</code> </p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;        <span class="hljs-attr">&quot;name&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>        &#125;,        <span class="hljs-attr">&quot;description&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>        &#125;,        <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>        &#125;    &#125;&#125;</code></pre><p>查看映射</p><p>Get方法：<code>localhost:9200/xc_course/_mapping</code></p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;xc_course&quot;</span>: &#123;        <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;            <span class="hljs-attr">&quot;properties&quot;</span>: &#123;                <span class="hljs-attr">&quot;description&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;name&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><h3 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h3><p>ES中的文档相当于MySQL数据库表中的记录。</p><p>Put或Post方法：<code>localhost:9200/xc_course/_doc/4028e58161bcf7f40161bcf8b77c0000</code></p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发框架&quot;</span>,    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者(尤其是不擅长页面开发的程序人员)轻松的实现一个不受浏览器限制的 精美界面效果。&quot;</span>,    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201001&quot;</span>&#125;<span class="hljs-comment">// 返回数据</span>&#123;    <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,    <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,    <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;4028e58161bcf7f40161bcf8b77c0000&quot;</span>,    <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,    <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-string">&quot;created&quot;</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span>&#125;</code></pre><p>修改入力JSON串，重新运行，则es是先删除这条记录，再插入记录。实现更新操作。</p><h3 id="搜索文档"><a href="#搜索文档" class="headerlink" title="搜索文档"></a>搜索文档</h3><ul><li>根据id查询<br>Get方法：<code>localhost:9200/xc_course/_doc/4028e58161bcf7f40161bcf8b77c0000</code></li></ul><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,    <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,    <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;4028e58161bcf7f40161bcf8b77c0000&quot;</span>,    <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">2</span>,    <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">1</span>,    <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span>,    <span class="hljs-attr">&quot;found&quot;</span>: <span class="hljs-literal">true</span>,    <span class="hljs-attr">&quot;_source&quot;</span>: &#123;        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发框架&quot;</span>,        <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者(尤其是不擅长页面开发的程序人员)轻松的实现一个不受浏览器限制的 精美界面效果。&quot;</span>,        <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>    &#125;&#125;</code></pre><ul><li>查询所有记录<br>Get方法：<code>localhost:9200/xc_course/_doc/_search</code> (_doc可不写)</li></ul><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">0</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: &#123;            <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">&quot;relation&quot;</span>: <span class="hljs-string">&quot;eq&quot;</span>        &#125;,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;4028e58161bcf7f40161bcf8b77c0000&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发框架&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者(尤其是不擅长页面开发的程序人员)轻松的实现一个不受浏览器限制的 精美界面效果。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>                &#125;            &#125;        ]    &#125;&#125;</code></pre><ul><li>关键字查询<br>Get方法：<code>localhost:9200/xc_course/_doc/_search?q=name:Bootstrap</code></li></ul><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">1</span>,    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span>    &#125;,    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;        <span class="hljs-attr">&quot;total&quot;</span>: &#123;            <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">&quot;relation&quot;</span>: <span class="hljs-string">&quot;eq&quot;</span>        &#125;,        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">0.2876821</span>,        <span class="hljs-attr">&quot;hits&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;xc_course&quot;</span>,                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;4028e58161bcf7f40161bcf8b77c0000&quot;</span>,                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">0.2876821</span>,                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;                    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发框架&quot;</span>,                    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者(尤其是不擅长页面开发的程序人员)轻松的实现一个不受浏览器限制的 精美界面效果。&quot;</span>,                    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>                &#125;            &#125;        ]    &#125;&#125;<span class="hljs-comment">// 说明</span>took:本次操作花费的时间，单位为毫秒。 timed_out:请求是否超时_shards:说明本次操作共搜索了哪些分片hits:搜索命中的记录hits.total: 符合条件的文档总数hits.hits:匹配度较高的前N个文档hits.max_score:文档匹配得分，这里为最高分_score:每个文档都有一个匹配度得分，按照降序排列。_source:显示了文档的原始内容。</code></pre><h3 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h3><p>测试正常情况下的分词效果<br>Post方法：<code>localhost:9200/_analyze</code></p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;tokens&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;测&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">0</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">0</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;试&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">2</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">1</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;分&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">2</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">3</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">2</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;词&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">3</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">4</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">3</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;器&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">4</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">5</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">4</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;后&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">6</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">7</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">5</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;边&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">7</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">8</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">6</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;是&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">8</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">9</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">7</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;测&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">9</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">10</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">8</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;试&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">10</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">11</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">9</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;内&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">11</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">12</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">10</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;容&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">12</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">13</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">11</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;spring&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">14</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">20</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">12</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;cloud&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">21</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">26</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">13</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;实&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">26</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">27</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">14</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;战&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">27</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">28</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">15</span>        &#125;    ]&#125;</code></pre><p>分词效果不是很好。</p><p>下载安装：<code>git clone git://github.com/medcl/elasticsearch-analysis-ik.git</code>，注下载对应的es版本的ik。</p><pre><code class="hljs bash">// 下载对应版本的ik，如：elasticsearch-analysis-ik-7.6.2.zip// 将下载好的zip解压到elasticsearch-7.6.2/plugins/中，并命名为ik<span class="hljs-comment"># cd elasticsearch-7.6.2/plugins/</span><span class="hljs-comment"># ls</span>ik// 重新启动elasticsearch// bin/elasticsearch</code></pre><p>IK分词支持：Analyzer: <code>ik_smart</code> , <code>ik_max_word</code> , Tokenizer: <code>ik_smart</code> , <code>ik_max_word</code></p><p>再次测试分词效果<br>Post方法：<code>localhost:9200/_analyze</code></p><pre><code class="hljs json"><span class="hljs-comment">// 添加分词方法：&quot;analyzer&quot;: &quot;ik_max_word&quot;</span>&#123;    <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;测试分词器，后边是测试内容:spring cloud实战&quot;</span>,    <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;tokens&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;测试&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">0</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">2</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">0</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;分词器&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">2</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">5</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">1</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;分词&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">2</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">4</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">2</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;器&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">4</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">5</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_CHAR&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">3</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;后边&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">6</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">8</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">4</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;是&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">8</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">9</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_CHAR&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">5</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;测试&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">9</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">11</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">6</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;内容&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">11</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">13</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">7</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;spring&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">14</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">20</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;ENGLISH&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">8</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;cloud&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">21</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">26</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;ENGLISH&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">9</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;实战&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">26</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">28</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">10</span>        &#125;    ]&#125;</code></pre><h4 id="自定义词库"><a href="#自定义词库" class="headerlink" title="自定义词库"></a>自定义词库</h4><p>如搜索品牌名，分词效果不是很好</p><pre><code class="hljs json"><span class="hljs-comment">// localhost:9200/_analyze</span>&#123;    <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;传智播客&quot;</span>,    <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;tokens&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;传&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">0</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_CHAR&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">0</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;智&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">1</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">2</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_CHAR&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">1</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;播&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">2</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">3</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_CHAR&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">2</span>        &#125;,        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;客&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">3</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">4</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_CHAR&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">3</span>        &#125;    ]&#125;</code></pre><p>新建自定义词库，如my.dic</p><pre><code class="hljs bash"><span class="hljs-comment"># /Users/user_name/Documents/Elasticsearch/jar/elasticsearch-7.6.2/plugins/ik/config</span>// 新建一个my.dic文件(注意文件格式为utf-8(不要选择utf-8 BOM)// my.dic内容传智播客黑马程序员// 配置IKAnalyzer.cfg.xml：&lt;entry key=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;my.dic&lt;/entry&gt;&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;&lt;!DOCTYPE properties SYSTEM <span class="hljs-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;&lt;properties&gt;&lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt;&lt;!--用户可以在这里配置自己的扩展字典 --&gt;&lt;entry key=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;my.dic&lt;/entry&gt; &lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;&lt;entry key=<span class="hljs-string">&quot;ext_stopwords&quot;</span>&gt;&lt;/entry&gt;&lt;!--用户可以在这里配置远程扩展字典 --&gt;&lt;!-- &lt;entry key=<span class="hljs-string">&quot;remote_ext_dict&quot;</span>&gt;words_location&lt;/entry&gt; --&gt;&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;&lt;!-- &lt;entry key=<span class="hljs-string">&quot;remote_ext_stopwords&quot;</span>&gt;words_location&lt;/entry&gt; --&gt;&lt;/properties&gt;</code></pre><p>重启Elasticsearch</p><pre><code class="hljs json">Post方法：localhost:9200/_analyze&#123;    <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;传智播客&quot;</span>,    <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;tokens&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;token&quot;</span>: <span class="hljs-string">&quot;传智播客&quot;</span>,            <span class="hljs-attr">&quot;start_offset&quot;</span>: <span class="hljs-number">0</span>,            <span class="hljs-attr">&quot;end_offset&quot;</span>: <span class="hljs-number">4</span>,            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;CN_WORD&quot;</span>,            <span class="hljs-attr">&quot;position&quot;</span>: <span class="hljs-number">0</span>        &#125;    ]&#125;</code></pre><h3 id="映射维护"><a href="#映射维护" class="headerlink" title="映射维护"></a>映射维护</h3><p>查询所有索引的映射</p><pre><code class="hljs json"><span class="hljs-comment">// Get方法: localhost:9200/xc_course/_mapping</span>&#123;    <span class="hljs-attr">&quot;xc_course&quot;</span>: &#123;        <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;            <span class="hljs-attr">&quot;properties&quot;</span>: &#123;                <span class="hljs-attr">&quot;description&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;name&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;pic&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p>修改映射</p><pre><code class="hljs json"><span class="hljs-comment">// Post方法：localhost:9200/xc_course/_mapping</span>&#123;    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;        <span class="hljs-attr">&quot;description&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>        &#125;,        <span class="hljs-attr">&quot;name&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>        &#125;,        <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>        &#125;,        <span class="hljs-attr">&quot;pic&quot;</span>: &#123;        <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>        &#125;    &#125;&#125;<span class="hljs-comment">// 结果</span>&#123;    <span class="hljs-attr">&quot;acknowledged&quot;</span>: <span class="hljs-literal">true</span>&#125;<span class="hljs-comment">// 再次查询：Get方法: localhost:9200/xc_course/_mapping</span>&#123;    <span class="hljs-attr">&quot;xc_course&quot;</span>: &#123;        <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;            <span class="hljs-attr">&quot;properties&quot;</span>: &#123;                <span class="hljs-attr">&quot;description&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;name&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;pic&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>                &#125;,                <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p>说明 ：映射创建成功可以**<u>添加新字段，已有字段不允许更新</u>**。(可以通过删除索引，重新生成映射)</p><h3 id="映射的常用类型"><a href="#映射的常用类型" class="headerlink" title="映射的常用类型"></a>映射的常用类型</h3><ul><li><p>text</p><p>对于ik分词器建议是索引时使用ik_max_word将搜索内容进行细粒度分词，搜索时使用ik_smart提高搜索精确性。</p></li><li><p>index</p><p>通过index属性指定是否索引。<br>默认为index=true，即要进行索引，只有进行索引才可以从索引库搜索到。但是也有一些内容不需要索引，比如:商品图片地址只被用来展示图片，不进行搜索图片，此时可以将index设置 为false。</p></li><li><p>store</p><p>是否在source之外存储，每个文档索引后会在 ES中保存一份原始文档，存放在”_source”中，一般情况下不需要设置store为true，因为在_source中已经有一份原始文档了。</p></li></ul><pre><code class="hljs json"><span class="hljs-comment">// 创建索引</span>Post方法：localhost:9200/xc_course/_mapping&#123;    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;        <span class="hljs-attr">&quot;name&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,            <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,            <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>        &#125;,        <span class="hljs-attr">&quot;description&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,            <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,            <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>        &#125;,        <span class="hljs-attr">&quot;pic&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,            <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span>        &#125;,        <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>        &#125;    &#125;&#125;<span class="hljs-comment">// 插入文档</span>Post方法：localhost:9200/xc_course/_doc/4028e58161bcf7f40161bcf8b77c0000&#123;    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发框架&quot;</span>,    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者(尤其是不擅长页面开发的程序人员)轻松的实现一个不受浏览器限制的 精美界面效果。&quot;</span>,    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg&quot;</span>,    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>&#125;<span class="hljs-comment">// 查询 Get方法：</span>localhost:9200/xc_course/_search?q=name:java开发-&gt;检索到数据localhost:9200/xc_course/_search?q=description:开发 -&gt;检索到数据localhost:9200/xc_course/_search?q=pic:group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg -&gt;检索不到数据（&quot;index&quot;: false所致）localhost:9200/xc_course/_search?q=studymodel:201002-&gt;检索到数据</code></pre><ul><li>keyword<br>keyword字段为关键字字段，通常搜索keyword是按照整体搜索，所以创建keyword字段的索引时是不进行分词的，比如:邮政编码、手机号码、身份证等。keyword字段通常用于过虑、排序、聚合等。</li></ul><pre><code class="hljs json"><span class="hljs-comment">// 创建索引</span>Post方法：localhost:9200/xc_course/_mapping&#123;    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;        <span class="hljs-attr">&quot;name&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>        &#125;,        <span class="hljs-attr">&quot;description&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,            <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_max_word&quot;</span>,            <span class="hljs-attr">&quot;search_analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>        &#125;,        <span class="hljs-attr">&quot;pic&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,            <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span>        &#125;,        <span class="hljs-attr">&quot;studymodel&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>        &#125;    &#125;&#125;<span class="hljs-comment">// 插入文档</span>Post方法：localhost:9200/xc_course/_doc/4028e58161bcf7f40161bcf8b77c0000&#123;    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bootstrap开发框架&quot;</span>,    <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者(尤其是不擅长页面开发的程序人员)轻松的实现一个不受浏览器限制的 精美界面效果。&quot;</span>,    <span class="hljs-attr">&quot;pic&quot;</span>: <span class="hljs-string">&quot;group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg&quot;</span>,    <span class="hljs-attr">&quot;studymodel&quot;</span>: <span class="hljs-string">&quot;201002&quot;</span>&#125;<span class="hljs-comment">// 查询 Get方法：</span>localhost:9200/xc_course/_search?q=name:开发-&gt;检索不到数据（keyword类型，所以查询方式是精确查询）localhost:9200/xc_course/_search?q=name:Bootstrap开发框架-&gt;检索到数据localhost:9200/xc_course/_search?q=studymodel:201002-&gt;检索到数据</code></pre><ul><li><p>date日期类型</p><p>日期类型不用设置分词器。通常日期类型的字段用于排序。</p></li></ul><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;properties&quot;</span>: &#123;        <span class="hljs-attr">&quot;timestamp&quot;</span>: &#123;            <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;date&quot;</span>,            <span class="hljs-attr">&quot;format&quot;</span>: <span class="hljs-string">&quot;yyyy‐MM‐dd HH:mm:ss||yyyy‐MM‐dd&quot;</span>        &#125;    &#125;&#125;</code></pre><ul><li><p>数值类型</p><p>尽量选择范围小的类型，提高搜索效率对于浮点数尽量用比例因子，比如一个价格字段，单位为元，我们将比例因子设置为100这在ES中会按分存储，</p><pre><code class="hljs json">&quot;price&quot;: &#123;&quot;type&quot;: &quot;scaled_float&quot;,&quot;scaling_factor&quot;: 100&#125;</code></pre><p>由于比例因子为100，如果我们输入的价格是23.45则ES中会将23.45乘以100存储在ES中。<br>如果输入的价格是23.456，ES会将23.456乘以100再取一个接近原始值的数，得出2346。<br>使用比例因子的好处是整型比浮点型更易压缩，节省磁盘空间。</p></li></ul><p><strong><u>ps: 本文为学习笔记，仅供学习与参考。</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eureka-settings学习一</title>
      <link href="2020/04/20/eureka-settings-first/"/>
      <url>2020/04/20/eureka-settings-first/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Eureka-settings学习一"><a href="#Eureka-settings学习一" class="headerlink" title="Eureka-settings学习一"></a>Eureka-settings学习一</h2><p>Spring Cloud中提供服务注册中心来管理微服务信息。<br>为什么要用注册中心?<br>1、微服务数量众多，要进行远程调用就需要知道服务端的ip地址和端口，注册中心帮助我们管理这些服务的ip和端口。<br>2、微服务会实时上报自己的状态，注册中心统一管理这些微服务的状态，将存在问题的服务踢出服务列表，客户端获取到可用的服务进行调用。<br>Spring Cloud Eureka 是对Netflix公司的Eureka的二次封装，它实现了服务治理的功能，Spring Cloud Eureka提供服务端与客户端，服务端即是Eureka服务注册中心，客户端完成微服务向Eureka服务的注册与发现。服务端和客户端均采用Java语言编写。<br>1、Eureka Server是服务端，负责管理各各微服务结点的信息和状态。<br>2、在微服务上部署Eureka Client程序，远程访问Eureka Server将自己注册在Eureka Server。<br>3、微服务需要调用另一个微服务时从Eureka Server中获取服务调用地址，进行远程调用。</p><h3 id="单机模式"><a href="#单机模式" class="headerlink" title="单机模式"></a>单机模式</h3><h4 id="pom依赖设定"><a href="#pom依赖设定" class="headerlink" title="pom依赖设定"></a>pom依赖设定</h4><p>父工程依赖</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tomcat.version</span>&gt;</span>8.5.28<span class="hljs-tag">&lt;/<span class="hljs-name">tomcat.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-boot.version</span>&gt;</span>2.0.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-boot.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">springframework.version</span>&gt;</span>5.0.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">springframework.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mybatis-spring-boot.version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis-spring-boot.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mybatis.version</span>&gt;</span>3.4.5<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mysql-connector-java.version</span>&gt;</span>5.1.45<span class="hljs-tag">&lt;/<span class="hljs-name">mysql-connector-java.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-io.version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">commons-io.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">org.apache.commons.io.version</span>&gt;</span>1.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">org.apache.commons.io.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-fileupload.version</span>&gt;</span>1.3.3<span class="hljs-tag">&lt;/<span class="hljs-name">commons-fileupload.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-codec.version</span>&gt;</span>1.10<span class="hljs-tag">&lt;/<span class="hljs-name">commons-codec.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">commons-lang3.version</span>&gt;</span>3.6<span class="hljs-tag">&lt;/<span class="hljs-name">commons-lang3.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">okhttp.version</span>&gt;</span>3.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">okhttp.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">feign-okhttp.version</span>&gt;</span>8.18.0<span class="hljs-tag">&lt;/<span class="hljs-name">feign-okhttp.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">lombok.version</span>&gt;</span>1.16.16<span class="hljs-tag">&lt;/<span class="hljs-name">lombok.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">springfox-swagger.version</span>&gt;</span>2.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">springfox-swagger.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">fastjson.version</span>&gt;</span>1.2.30<span class="hljs-tag">&lt;/<span class="hljs-name">fastjson.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">fastdfs-client-java.version</span>&gt;</span>1.27.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">fastdfs-client-java.version</span>&gt;</span>        <span class="hljs-comment">&lt;!--&lt;mysql-connector-java.version&gt;5.1.40&lt;/mysql-connector-java.version&gt;--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">mysql-connector-java.version</span>&gt;</span>5.1.46<span class="hljs-tag">&lt;/<span class="hljs-name">mysql-connector-java.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">elasticsearch.version</span>&gt;</span>6.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">elasticsearch.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">guava.version</span>&gt;</span>24.0-jre<span class="hljs-tag">&lt;/<span class="hljs-name">guava.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-comment">&lt;!--test--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Finchley.SR1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mysql-connector-java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis-spring-boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>okhttp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;okhttp.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.netflix.feign<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>feign-okhttp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;feign-okhttp.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;commons-io.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;org.apache.commons.io.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;commons-fileupload.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-codec<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;commons-codec.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;commons-lang3.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;springfox-swagger.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;springfox-swagger.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>net.oschina.zcx7878<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastdfs-client-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fastdfs-client-java.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch --&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;guava.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>$&#123;project.artifactId&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>           <span class="hljs-comment">&lt;!-- &amp;lt;!&amp;ndash; 资源文件拷贝插件 &amp;ndash;&amp;gt;</span><span class="hljs-comment">            &lt;plugin&gt;</span><span class="hljs-comment">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><span class="hljs-comment">                &lt;artifactId&gt;maven-resources-plugin&lt;/artifactId&gt;</span><span class="hljs-comment">                &lt;configuration&gt;</span><span class="hljs-comment">                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;</span><span class="hljs-comment">                &lt;/configuration&gt;</span><span class="hljs-comment">            &lt;/plugin&gt;--&gt;</span>            <span class="hljs-comment">&lt;!-- java编译插件 --&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>Eureka子工程pom依赖</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../xc-framework-parent/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-govern-center<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--eureka config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h4 id="application配置"><a href="#application配置" class="headerlink" title="application配置"></a>application配置</h4><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">50101</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">xc-govern-center</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">client:</span>    <span class="hljs-comment"># 服务注册，是否将自己注册到Eureka服务中</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 服务发现，是否从Eureka中获取注册信息</span>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># Eureka客户端与Eureka服务端的交互地址，高可用状态配置对方的地址，单机状态配置自己（若不配置则默认本机端口是8761）</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:50101/eureka/</span>  <span class="hljs-attr">server:</span>    <span class="hljs-comment"># 是否开启自我保护模式</span>    <span class="hljs-attr">enable-self-preservation:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 服务注册表清理间隔（单位是毫秒，默认是60*1000）</span>    <span class="hljs-attr">eviction-interval-timer-in-ms:</span> <span class="hljs-number">60000</span></code></pre><h4 id="Eureka启动类"><a href="#Eureka启动类" class="headerlink" title="Eureka启动类"></a>Eureka启动类</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.govern.center;<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<span class="hljs-keyword">import</span> org.springframework.cloud.netflix.eureka.server.EnableEurekaServer;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Eureka server启动类。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/20</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@EnableEurekaServer</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GovernCenterApplication</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(GovernCenterApplication.class, args);    &#125;&#125;</code></pre><p>启动访问<br><code>http://localhost:50101/</code></p><p><img src="/2020/04/20/eureka-settings-first/1.png" alt="eureka-http"></p><p>说明：Eureka Server有一种自我保护模式，当微服务不再向Eureka Server上报状态，Eureka Server会从服务列表将此服务删除，如果出现网络异常情况(微服务正常)，此时Eureka server进入自保护模式，不再将微服务从服务列表删除。</p><p><strong><u>在开发阶段建议关闭自保护模式。</u></strong></p><h3 id="高可用环境搭建"><a href="#高可用环境搭建" class="headerlink" title="高可用环境搭建"></a>高可用环境搭建</h3><p>Eureka Server 高可用环境需要部署两个Eureka server，它们互相向对方注册。<br>如果在本机启动两个Eureka需要注意两个Eureka Server的端口要设置不一样，这里我们部署一个Eureka Server工程，将端口可配置，制作两个 Eureka Server启动脚本，启动不同的端口。</p><p>1、在实际使用时Eureka Server至少部署两台服务器，实现高可用。<br>2、两台Eureka Server互相注册。<br>3、微服务需要连接两台Eureka Server注册，当其中一台Eureka死掉也不会影响服务的注册与发现。<br>4、微服务会定时向Eureka server发送心跳，报告自己的状态。<br>5、微服务从注册中心获取服务地址以RESTful方式发起远程调用。</p><p>pom依赖同单机环境</p><h4 id="application配置-1"><a href="#application配置-1" class="headerlink" title="application配置"></a>application配置</h4><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-comment"># 服务端口</span>  <span class="hljs-attr">port:</span> <span class="hljs-string">$&#123;PORT:50101&#125;</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">xc-govern-center</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">client:</span>    <span class="hljs-comment"># 服务注册，是否将自己注册到Eureka服务中，高可用状态设置为true</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 服务发现，是否从Eureka中获取注册信息，高可用状态设置为true</span>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># Eureka客户端与Eureka服务端的交互地址，高可用状态配置对方的地址，单机状态配置自己（若不配置则默认本机端口是8761）</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">$&#123;EUREKA_SERVER:http://eureka02:50102/eureka/&#125;</span>  <span class="hljs-attr">server:</span>    <span class="hljs-comment"># 是否开启自我保护模式</span>    <span class="hljs-attr">enable-self-preservation:</span> <span class="hljs-literal">false</span>    <span class="hljs-comment"># 服务注册表清理间隔（单位是毫秒，默认是60*1000）</span>    <span class="hljs-attr">eviction-interval-timer-in-ms:</span> <span class="hljs-number">60000</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">$&#123;EUREKA_DOMAIN:eureka01&#125;</span></code></pre><h4 id="启动脚本设置"><a href="#启动脚本设置" class="headerlink" title="启动脚本设置"></a>启动脚本设置</h4><p>Run -&gt; Edit configurations，设置端口，EUREKA_SERVER，EUREKA_DOMAIN如下</p><p><code>-DPORT=50101 -DEUREKA_SERVER=http://eureka02:50102/eureka/ -DEUREKA_DOMAIN=eureka01</code></p><p><code>-DPORT=50102 -DEUREKA_SERVER=http://eureka01:50101/eureka/ -DEUREKA_DOMAIN=eureka02</code></p><p><img src="/2020/04/20/eureka-settings-first/2.png" alt="eureka-script"></p><p>配置hostname<br>Eureka 组成高可用，两个Eureka互相向对方注册，这里需要通过域名或主机名访问，这里我们设置两个Eureka服务的主机名分别为 eureka01、eureka02。</p><pre><code class="hljs bash"><span class="hljs-comment"># sudo vim /etc/hosts</span>// 添加配置127.0.0.1       eureka01 eureka02</code></pre><p>启动访问</p><p><code>http://eureka01:50101/</code></p><p><code>http://eureka02:50102/</code></p><p><img src="/2020/04/20/eureka-settings-first/3.png" alt="eureka-01-02"></p><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p>将cms微服务向Eureka Server注册</p><h4 id="添加pom依赖"><a href="#添加pom依赖" class="headerlink" title="添加pom依赖"></a>添加pom依赖</h4><p><code>spring-cloud-starter-netflix-eureka-client</code></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../xc-framework-parent/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-service-manager-cms<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--project config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-service-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-model<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-utils<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--eureka client config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--web config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--freemarker config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--mongodb config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--rabbitmq config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--http config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>okhttp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--test config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h4 id="application配置-2"><a href="#application配置-2" class="headerlink" title="application配置"></a>application配置</h4><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">31001</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">xc-service-manager-cms</span>  <span class="hljs-attr">data:</span>    <span class="hljs-attr">mongodb:</span>      <span class="hljs-attr">uri:</span> <span class="hljs-string">mongodb://sa:123456@1xx.xxx.xxx.xxx:27017/lc-test</span>      <span class="hljs-attr">database:</span> <span class="hljs-string">lc-test</span>  <span class="hljs-attr">rabbitmq:</span>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">client:</span>    <span class="hljs-comment"># 服务注册，是否将自己注册到Eureka服务中，高可用状态设置为true</span>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 服务发现，是否从Eureka中获取注册信息，高可用状态设置为true</span>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># Eureka客户端与Eureka服务端的交互地址，高可用状态配置对方的地址，单机状态配置自己（若不配置则默认本机端口是8761）</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">$&#123;EUREKA_SERVER:http://eureka01:50101/eureka/,http://eureka02:50102/eureka/&#125;</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-comment"># 将自己的IP地址注册到Eureka服务中</span>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">ip-address:</span> <span class="hljs-string">$&#123;IP_ADDRESS:127.0.0.1&#125;</span>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span></code></pre><h4 id="在启动类添加注解"><a href="#在启动类添加注解" class="headerlink" title="在启动类添加注解"></a>在启动类添加注解</h4><p><code>@EnableDiscoveryClient</code></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.manager_cms;<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.domain.EntityScan;<span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.ComponentScan;<span class="hljs-keyword">import</span> org.springframework.http.client.OkHttp3ClientHttpRequestFactory;<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<span class="hljs-comment">/**</span><span class="hljs-comment"> * cms启动类，添加各个功能模块的扫描</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: &#123; <span class="hljs-doctag">@EnableDiscoveryClient</span>: 表示它是一个Eureka客户端 &#125;</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/1</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@EnableDiscoveryClient</span><span class="hljs-meta">@EntityScan(&quot;com.xuecheng.framework.domain.cms&quot;)</span><span class="hljs-comment">//扫描实体类</span><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.xuecheng.api&quot;&#125;)</span><span class="hljs-comment">//扫描接口</span><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.xuecheng.framework&quot;&#125;)</span><span class="hljs-comment">//扫描Common下的所有类</span><span class="hljs-meta">@ComponentScan(basePackages = &#123;&quot;com.xuecheng.manager_cms&quot;&#125;)</span><span class="hljs-comment">//扫描本项目下的所有类</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ManageCmsApplication</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(ManageCmsApplication.class, args);    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title">restTemplate</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate(<span class="hljs-keyword">new</span> OkHttp3ClientHttpRequestFactory());    &#125;&#125;</code></pre><p>启动该类，访问</p><p><code>http://eureka01:50101/</code></p><p><img src="/2020/04/20/eureka-settings-first/4.png" alt="eureka-client"></p>]]></content>
      
      
      
        <tags>
            
            <tag> eureka </tag>
            
            <tag> spring-cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastDFS安装设定</title>
      <link href="2020/04/19/fastDFS-install-settings/"/>
      <url>2020/04/19/fastDFS-install-settings/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="FastDFS安装设定"><a href="#FastDFS安装设定" class="headerlink" title="FastDFS安装设定"></a>FastDFS安装设定</h2><h3 id="FastDFS定义"><a href="#FastDFS定义" class="headerlink" title="FastDFS定义"></a>FastDFS定义</h3><p>FastDFS是用c语言编写的一款开源的分布式文件系统，它是由淘宝资深架构师余庆编写并开源。<br>FastDFS专为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p><p>为什么要使用FastDFS呢?</p><p>上边介绍的NFS、GFS都是通用的分布式文件系统，通用的分布式文件系统的优点的是开发体验好，但是系统复杂性高、性能一般，而专用的分布式文件系统虽然开发体验性差，但是<u>系统复杂性低并且性能高</u>。<strong>fastDFS非常适合存储图片</strong>等那些小文件，fastDFS不对文件进行分块，所以它就没有分块合并的开销，fastDFS网络通信采用socket，通信速度很快。</p><p><strong>FastDFS架构包括Tracker server和Storageserver。</strong>客户端请求Tracker server进行文件上传、下载，通过Tracker server调度最终由Storage server完成文件上传和下载。</p><p><img src="/2020/04/19/fastDFS-install-settings/1.png" alt="FastDFS架构"></p><p>Tracker</p><p><strong>Tracker Server作用是负载均衡和调度</strong>，通过Tracker server在文件上传时可以根据一些策略找到Storage server提供文件上传服务。可以将tracker称为<u>追踪服务器或调度服务器</u>。<br> FastDFS集群中的Tracker server可以有多台，Tracker server之间是相互平等关系同时提供服务，Tracker server不存在单点故障。客户端请求Tracker server采用<strong>轮询方式</strong>，如果请求的tracker无法提供服务则换另一个tracker。</p><p>Storage</p><p>Storage Server作用是文件存储，客户端上传的文件最终存储在Storage服务器上，Storage server没有实现自己的文件系统而是使用操作系统的文件系统来管理文件。可以将<strong>storage称为存储服务器</strong>。</p><p><strong>Storage集群采用了分组存储方式</strong>。storage集群由一个或多个组构成，集群存储总容量为集群中所有组的存储容量之和。一个组由一台或多台存储服务器组成，组内的<strong>Storage server之间是平等关系</strong>，不同组的Storage server 之间不会相互通信，同组内的Storage server之间会相互连接进行文件同步，从而保证同组内每个storage上的文件完全一致的。一个组的存储容量为该组内的存储服务器容量最小的那个，由此可见<strong>组内存储服务器的软硬件配置最好是一致的</strong>。</p><p>采用分组存储方式的好处是灵活、可控性较强。比如上传文件时，可以由客户端直接指定上传到的组也可以由 tracker进行调度选择。一个分组的存储服务器访问压力较大时，可以在该组增加存储服务器来扩充服务能力(<strong>纵向扩容</strong>)。当系统容量不足时，可以增加组来扩充存储容量(<strong>横向扩容</strong>)。</p><h3 id="FastDFS安装"><a href="#FastDFS安装" class="headerlink" title="FastDFS安装"></a>FastDFS安装</h3><p>安装环境：CentOS 8</p><pre><code class="hljs bash"><span class="hljs-comment"># lsb_release -a</span>// 这个命令适用于所有的linux，包括Redhat、SuSE、Debian等发行版。LSB Version:    :core-4.1-amd64:core-4.1-noarchDistributor ID: CentOSDescription:    CentOS Linux release 8.1.1911 (Core) Release:        8.1.1911Codename:       Core<span class="hljs-comment"># cat /proc/version</span>Linux version 4.18.0-147.5.1.el8_1.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 8.3.1 20190507 (Red Hat 8.3.1-4) (GCC)) <span class="hljs-comment">#1 SMP Wed Feb 5 02:00:39 UTC 2020</span><span class="hljs-comment"># uname -r</span>4.18.0-147.5.1.el8_1.x86_64<span class="hljs-comment"># uname -a</span>Linux iZ2ze4ty14huv07q6z3yapZ 4.18.0-147.5.1.el8_1.x86_64 <span class="hljs-comment">#1 SMP Wed Feb 5 02:00:39 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></code></pre><h4 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h4><pre><code class="hljs bash"><span class="hljs-comment"># sudo yum install gcc-c++</span><span class="hljs-comment"># sudo yum -y install libevent</span></code></pre><h4 id="安装libfastcommon基础库"><a href="#安装libfastcommon基础库" class="headerlink" title="安装libfastcommon基础库"></a>安装libfastcommon基础库</h4><pre><code class="hljs bash">// 将libfastcommonV1.0.7.tar.gz解压，安装至/usr/<span class="hljs-built_in">local</span>文件夹里<span class="hljs-comment"># cp libfastcommonV1.0.7.tar.gz /usr/local/</span><span class="hljs-comment"># cd /usr/local/</span><span class="hljs-comment"># tar -zxvf libfastcommonV1.0.7.tar.gz</span><span class="hljs-comment"># cd libfastcommon-1.0.7</span><span class="hljs-comment"># ./make.sh</span><span class="hljs-comment"># ./make.sh install</span><span class="hljs-comment"># ll /usr/local/libfastcommon-1.0.7/</span>总用量 24-rw-rw-r-- 1 root root 2170 9月  16 2014 HISTORY-rw-rw-r-- 1 root root  582 9月  16 2014 INSTALL-rw-rw-r-- 1 root root 1341 9月  16 2014 libfastcommon.spec-rwxrwxr-x 1 root root 2151 9月  16 2014 make.sh-rw-rw-r-- 1 root root  617 9月  16 2014 READMEdrwxrwxr-x 2 root root 4096 4月  17 14:25 src// libfastcommon 安装好后会自动将库文件拷贝至/usr/lib64 下，由于FastDFS 程序引用 usr/lib 目录所以需要将/usr/lib64 下的库文件拷贝至/usr/lib 下。<span class="hljs-comment"># cp /usr/lib64/libfastcommon.so /usr/lib/</span><span class="hljs-comment"># ll /usr/lib/libfastcommon.so</span>-rwxr-xr-x 1 root root 340392 4月  17 14:29 /usr/lib/libfastcommon.so</code></pre><h4 id="安装tracker编译安装"><a href="#安装tracker编译安装" class="headerlink" title="安装tracker编译安装"></a>安装tracker编译安装</h4><pre><code class="hljs bash"><span class="hljs-comment"># cp FastDFS_v5.05.tar.gz /usr/local/</span><span class="hljs-comment"># cd /usr/local/</span><span class="hljs-comment"># tar -zxvf FastDFS_v5.05.tar.gz</span><span class="hljs-comment"># cd FastDFS</span><span class="hljs-comment"># ./make.sh</span><span class="hljs-comment"># ./make.sh install</span>// 安装成功将安装目录下的 conf 下的文件拷贝到/etc/fdfs/下。<span class="hljs-comment"># cd /usr/local/FastDFS/conf</span><span class="hljs-comment"># cp *.conf /etc/fdfs/</span><span class="hljs-comment"># cp *.types /etc/fdfs/</span>// 配置<span class="hljs-comment"># cd /etc/fdfs/</span><span class="hljs-comment"># vim tracker.conf</span>// 修改配置项base_path=/home/root/fastdfs// 阿里云ECS中的服务器实例，不要使用80端口，已被阿里云自己占用http.server_port=90// 启动/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart</code></pre><h4 id="Storage安装"><a href="#Storage安装" class="headerlink" title="Storage安装"></a>Storage安装</h4><p>在另外的服务器实例上安装storage, 依赖库和基础库如上一致，本处在同一台ECS上安装</p><pre><code class="hljs bash">// 配置storage<span class="hljs-comment"># cd /etc/fdfs/</span><span class="hljs-comment"># vim storage.conf</span>// 修改配置group_name=group1base_path=/home/root/fastdfs/store/basestore_path0=/home/root/fastdfs/store/fdfs_storage// 若有多个挂载磁盘则定义多个store_pathstore_path1=...store_path2=...// 配置tracker服务器IP(此处IP是阿里云ECS的公网IP)tracker_server=1xx.xxx.xxx.xxx:22122// 如果有多个则配置多个trackertracker_server=1xx.xxx.xxx.xx2:22122// 配置 http 端口http.server_port=90// 启动/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</code></pre><h4 id="上传图片测试"><a href="#上传图片测试" class="headerlink" title="上传图片测试"></a>上传图片测试</h4><pre><code class="hljs bash"><span class="hljs-comment"># cd /etc/fdfs/</span><span class="hljs-comment"># vim client.conf</span>// 配置base_path=/home/root/fastdfs/clienttracker_server=1xx.xxx.xxx.xxx:22122// 如果有多个则配置多个trackertracker_server=1xx.xxx.xxx.xx2:22122// 测试文件上传logo.png<span class="hljs-comment"># ll /root/soft/logo.png </span>-rw-r--r-- 1 root root 6849 4月  19 11:28 /root/soft/logo.png<span class="hljs-comment"># /usr/bin/fdfs_test /etc/fdfs/client.conf upload /root/soft/logo.png </span>This is FastDFS client <span class="hljs-built_in">test</span> program v5.05Copyright (C) 2008, Happy Fish / YuQingFastDFS may be copied only under the terms of the GNU GeneralPublic License V3, <span class="hljs-built_in">which</span> may be found <span class="hljs-keyword">in</span> the FastDFS <span class="hljs-built_in">source</span> kit.Please visit the FastDFS Home Page http://www.csource.org/ <span class="hljs-keyword">for</span> more detail.[2020-04-19 11:32:50] DEBUG - base_path=/home/root/fastdfs/client, connect_timeout=30, network_timeout=60, tracker_server_count=1, anti_steal_token=0, anti_steal_secret_key length=0, use_connection_pool=0, g_connection_pool_max_idle_time=3600s, use_storage_id=0, storage server id count: 0tracker_query_storage_store_list_without_group:         server 1. group_name=, ip_addr=1xx.xxx.xxx.xxx, port=23000group_name=group1, ip_addr=1xx.xxx.xxx.xxx, port=23000storage_upload_by_filenamegroup_name=group1, remote_filename=M00/00/00/rBEJ_l6bxmKAMWPCAAAawU0ID2Q071.png<span class="hljs-built_in">source</span> ip address: 1xx.xxx.xxx.xxxfile timestamp=2020-04-19 11:32:50file size=6849file crc32=1292373860example file url: http://1xx.xxx.xxx.xxx/group1/M00/00/00/rBEJ_l6bxmKAMWPCAAAawU0ID2Q071.pngstorage_upload_slave_by_filenamegroup_name=group1, remote_filename=M00/00/00/rBEJ_l6bxmKAMWPCAAAawU0ID2Q071_big.png<span class="hljs-built_in">source</span> ip address: 1xx.xxx.xxx.xxxfile timestamp=2020-04-19 11:32:50file size=6849file crc32=1292373860example file url: http://1xx.xxx.xxx.xxx/group1/M00/00/00/rBEJ_l6bxmKAMWPCAAAawU0ID2Q071_big.png// 对应Storage服务器上的文件<span class="hljs-built_in">cd</span> /home/root/fastdfs/store/fdfs_storage/data<span class="hljs-comment"># ll 00/00/rBEJ_l6bxmKAMWPCAAAawU0ID2Q071_big.png</span>-rw-r--r-- 1 root root 6849 4月  19 11:32 00/00/rBEJ_l6bxmKAMWPCAAAawU0ID2Q071_big.png</code></pre><h3 id="FastDFS和nginx整合"><a href="#FastDFS和nginx整合" class="headerlink" title="FastDFS和nginx整合"></a>FastDFS和nginx整合</h3><h4 id="安装FastDFS-nginx-module"><a href="#安装FastDFS-nginx-module" class="headerlink" title="安装FastDFS-nginx-module"></a>安装FastDFS-nginx-module</h4><pre><code class="hljs bash"><span class="hljs-comment"># cp fastdfs-nginx-module_v1.16.tar.gz /usr/local/</span><span class="hljs-comment"># cd /usr/local/</span><span class="hljs-comment"># tar -zxvf fastdfs-nginx-module_v1.16.tar.gz</span><span class="hljs-comment"># cd /usr/local/fastdfs-nginx-module/src</span><span class="hljs-comment"># vim config</span>// 修改配置（修改 config 文件将/usr/<span class="hljs-built_in">local</span>/路径改为/usr/）ngx_addon_name=ngx_http_fastdfs_moduleHTTP_MODULES=<span class="hljs-string">&quot;<span class="hljs-variable">$HTTP_MODULES</span> ngx_http_fastdfs_module&quot;</span>NGX_ADDON_SRCS=<span class="hljs-string">&quot;<span class="hljs-variable">$NGX_ADDON_SRCS</span> <span class="hljs-variable">$ngx_addon_dir</span>/ngx_http_fastdfs_module.c&quot;</span>CORE_INCS=<span class="hljs-string">&quot;<span class="hljs-variable">$CORE_INCS</span> /usr/include/fastdfs /usr/include/fastcommon/&quot;</span>CORE_LIBS=<span class="hljs-string">&quot;<span class="hljs-variable">$CORE_LIBS</span> -L/usr/lib -lfastcommon -lfdfsclient&quot;</span>CFLAGS=<span class="hljs-string">&quot;<span class="hljs-variable">$CFLAGS</span> -D_FILE_OFFSET_BITS=64 -DFDFS_OUTPUT_CHUNK_SIZE=&#x27;256*1024&#x27; -DFDFS_MOD_CONF_FILENAME=&#x27;\&quot;/etc/fdfs/mod_fastdfs.conf\&quot;&#x27;&quot;</span>// 将 FastDFS-nginx-module/src 下的 mod_FastDFS.conf 拷贝至/etc/fdfs/下<span class="hljs-comment"># cp mod_fastdfs.conf /etc/fdfs/</span><span class="hljs-comment"># vim /etc/fdfs/mod_fastdfs.conf</span>base_path=/home/root/fastdfstracker_server=1xx.xxx.xxx.xxx:22122// url中包含 group 名称url_have_group_name = <span class="hljs-literal">true</span>// 指定文件存储路径store_path0=/home/root/fastdfs/store/fdfs_storage// 将 libfdfsclient.so 拷贝至/usr/lib 下cp /usr/lib64/libfdfsclient.so /usr/lib/ll /usr/lib/libfdfsclient.so-rwxr-xr-x 1 root root 376392 4月  17 15:55 /usr/lib/libfdfsclient.so// 创建 nginx/client 目录<span class="hljs-comment"># mkdir -p /var/temp/nginx/client</span></code></pre><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><pre><code class="hljs bash"><span class="hljs-comment"># cd /usr/local/</span>// centos8与nginx的版本有关，不然安装不成功<span class="hljs-comment"># tar -zxvf nginx-1.17.6.tar.gz</span>// 安装依赖<span class="hljs-comment"># sudo yum -y install pcre-devel openssl openssl-devel</span><span class="hljs-comment"># cd nginx-1.17.6/</span>// 安装fastdfs-nginx-module./configure \--prefix=/usr/<span class="hljs-built_in">local</span>/nginx \--pid-path=/var/run/nginx/nginx.pid \--lock-path=/var/lock/nginx.lock \--error-log-path=/var/<span class="hljs-built_in">log</span>/nginx/error.log \--http-log-path=/var/<span class="hljs-built_in">log</span>/nginx/access.log \--with-http_gzip_static_module \--http-client-body-temp-path=/var/temp/nginx/client \--http-proxy-temp-path=/var/temp/nginx/proxy \--http-fastcgi-temp-path=/var/temp/nginx/fastcgi \--http-uwsgi-temp-path=/var/temp/nginx/uwsgi \--http-scgi-temp-path=/var/temp/nginx/scgi \--add-module=/usr/<span class="hljs-built_in">local</span>/fastdfs-nginx-module/src<span class="hljs-comment"># make</span><span class="hljs-comment"># make install</span></code></pre><p>配置nginx</p><pre><code class="hljs bash"><span class="hljs-comment"># cd /usr/local/nginx/conf/</span><span class="hljs-comment"># vim nginx.conf</span>server &#123;        listen       8100;        server_name  1xx.xxx.xxx.xxx;        <span class="hljs-comment">#charset koi8-r;</span>        <span class="hljs-comment">#access_log  logs/host.access.log  main;</span>        location / &#123;            root   html;            index  index.html index.htm;        &#125;       location /group1/M00/ &#123;            root /home/root/fastdfs/store/fdfs_storage/data;            ngx_fastdfs_module;       &#125;...</code></pre><p>启动nginx</p><pre><code class="hljs bash"><span class="hljs-comment"># cd /usr/local/nginx</span><span class="hljs-comment"># ./sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><span class="hljs-comment"># ps -ef | grep nginx</span>root     16230  6486  0 12:18 pts/0    00:00:00 grep --color=auto nginxroot     16806     1  0 4月17 ?       00:00:00 nginx: master process ./sbin/nginx -c /usr/<span class="hljs-built_in">local</span>/nginx/conf/nginx.confnobody   16807 16806  0 4月17 ?       00:00:00 nginx: worker process// 校验，重启<span class="hljs-comment"># nginx -t</span><span class="hljs-comment"># nginx -s reload</span></code></pre><p>上述图片测试的图片可以在浏览器上直接访问</p><p><code>http://1xx.xxx.xxx.xxx:8100/group1/M00/00/00/rBEJ_l6bxmKAMWPCAAAawU0ID2Q071_big.png</code></p><p>注意，阿里云ECS安全组的配置也要设置好，才能正常访问或图片上传</p><p><img src="/2020/04/19/fastDFS-install-settings/2.png" alt="阿里云ECS安全组的配置"></p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> fastdfs </tag>
            
            <tag> aliyu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-PageHelper设定</title>
      <link href="2020/04/15/mybatis-pagehelper-setting/"/>
      <url>2020/04/15/mybatis-pagehelper-setting/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Mybatis-PageHelper设定"><a href="#Mybatis-PageHelper设定" class="headerlink" title="Mybatis-PageHelper设定"></a>Mybatis-PageHelper设定</h2><p>PageHelper是mybatis的通用分页插件，通过mybatis的拦截器实现分页功能，拦截sql查询请求，添加分页语句，最终实现分页查询功能。项目中使用Pagehelper实现Mybatis分页功能开发，与springboot开发整合，在springboot上集成<a href="https://github.com/pagehelper/pagehelper-spring-boot">pagehelper</a>。</p><p>PageHelper的使用方法及原理如下:<br>在调用dao的service方法中设置分页参数:PageHelper.startPage(page, size)，分页参数会设置在ThreadLocal中，PageHelper在mybatis执行sql前进行拦截，从ThreadLocal取出分页参数，修改当前执行的sql语句，添加分页 sql。<br>最后执行添加了分页sql的sql语句，实现分页查询。</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">31200</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">xc-service-manage-course</span>  <span class="hljs-attr">datasource:</span>    <span class="hljs-attr">druid:</span>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/xc_course?useSSL=false&amp;characterEncoding=utf-8</span>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>      <span class="hljs-attr">password:</span> <span class="hljs-string">Aa123456</span>      <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.jdbc.Driver</span>      <span class="hljs-attr">initialSize:</span> <span class="hljs-number">5</span>  <span class="hljs-comment">#初始建立连接数量</span>      <span class="hljs-attr">minIdle:</span> <span class="hljs-number">5</span>  <span class="hljs-comment">#最小连接数量</span>      <span class="hljs-attr">maxActive:</span> <span class="hljs-number">20</span> <span class="hljs-comment">#最大连接数量</span>      <span class="hljs-attr">maxWait:</span> <span class="hljs-number">10000</span>  <span class="hljs-comment">#获取连接最大等待时间，毫秒</span>      <span class="hljs-attr">testOnBorrow:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#申请连接时检测连接是否有效</span>      <span class="hljs-attr">testOnReturn:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#归还连接时检测连接是否有效</span>      <span class="hljs-attr">timeBetweenEvictionRunsMillis:</span> <span class="hljs-number">60000</span> <span class="hljs-comment">#配置间隔检测连接是否有效的时间（单位是毫秒）</span>      <span class="hljs-attr">minEvictableIdleTimeMillis:</span> <span class="hljs-number">300000</span>   <span class="hljs-comment">#连接在连接池的最小生存时间（毫秒）</span><span class="hljs-comment">#pagehelper配置</span><span class="hljs-attr">pagehelper:</span>  <span class="hljs-attr">helper-dialect:</span> <span class="hljs-string">mysql</span></code></pre><h3 id="Mapper文件"><a href="#Mapper文件" class="headerlink" title="Mapper文件"></a>Mapper文件</h3><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.manage_course.dao;<span class="hljs-keyword">import</span> com.github.pagehelper.Page;<span class="hljs-keyword">import</span> com.xuecheng.framework.domain.course.CourseBase;<span class="hljs-keyword">import</span> org.apache.ibatis.annotations.Mapper;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Created by Administrator.</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Mapper</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CourseMapper</span> </span>&#123;    <span class="hljs-function">CourseBase <span class="hljs-title">findCourseBaseById</span><span class="hljs-params">(String id)</span></span>;    <span class="hljs-comment">// 分页查询课程</span>    <span class="hljs-function">Page&lt;CourseBase&gt; <span class="hljs-title">findCourseListPage</span><span class="hljs-params">()</span></span>;&#125;</code></pre><h3 id="xml文件"><a href="#xml文件" class="headerlink" title="xml文件"></a>xml文件</h3><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">mapper</span> <span class="hljs-meta-keyword">PUBLIC</span> <span class="hljs-meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="hljs-meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.xuecheng.manage_course.dao.CourseMapper&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findCourseBaseById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span></span><span class="hljs-tag">            <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.xuecheng.framework.domain.course.CourseBase&quot;</span>&gt;</span>        select * from course_base where id = #&#123;id&#125;    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findCourseListPage&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.xuecheng.framework.domain.course.CourseBase&quot;</span>&gt;</span>        SELECT      *        FROM      course_base    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span></code></pre><h3 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h3><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-comment">&lt;!--定义日志文件的存储地址,使用绝对路径--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_HOME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;d:/logs&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- Console 输出设置 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>            <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 按照每天生成日志文件 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span>            <span class="hljs-comment">&lt;!--日志文件输出的文件名--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/xc.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 异步输出 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ASYNC&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">discardingThreshold</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">discardingThreshold</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">queueSize</span>&gt;</span>512<span class="hljs-tag">&lt;/<span class="hljs-name">queueSize</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 添加附加的appender,最多只能添加一个 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis.cache.decorators.LoggingCache&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework.boot&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- sql文查看-debug级别 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;ASYNC&quot;/&gt;--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><p>测试文件</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.manage_course.dao;<span class="hljs-keyword">import</span> com.github.pagehelper.Page;<span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<span class="hljs-keyword">import</span> com.xuecheng.framework.domain.course.CourseBase;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> org.junit.runner.RunWith;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<span class="hljs-keyword">import</span> java.util.List;<span class="hljs-keyword">import</span> java.util.Optional;<span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Administrator</span><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><span class="hljs-comment"> **/</span><span class="hljs-meta">@SpringBootTest</span><span class="hljs-meta">@RunWith(SpringRunner.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestDao</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    CourseMapper courseMapper;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 分页查询课程测试</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPageHelperFindCourse</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// 查询第1页，每页显示10条记录(从1开始)</span>        PageHelper.startPage(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>);        Page&lt;CourseBase&gt; courseListPage = courseMapper.findCourseListPage();        List&lt;CourseBase&gt; result = courseListPage.getResult();        <span class="hljs-keyword">long</span> total = courseListPage.getTotal();        System.out.println(result);        System.out.println(total);    &#125;&#125;</code></pre><p>运行日志</p><pre><code class="hljs java"><span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">33.561</span> [main] DEBUG o.m.s.t.SpringManagedTransaction - JDBC Connection [com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl@<span class="hljs-number">66e341</span>e9] will not be managed by Spring<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">33.622</span> [main] DEBUG c.x.m.d.C.findCourseListPage_COUNT - ==&gt;  Preparing: <span class="hljs-function">SELECT <span class="hljs-title">count</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span> FROM course_base </span><span class="hljs-function">2020-04-15 22:49:34.006 [main] DEBUG c.x.m.d.C.findCourseListPage_COUNT - </span>==&gt; Parameters: <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">34.269</span> [main] DEBUG c.x.m.d.C.findCourseListPage_COUNT - &lt;==      Total: <span class="hljs-number">1</span># 自动拼接分页参数<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">34.320</span> [main] DEBUG c.x.m.d.C.findCourseListPage - ==&gt;  Preparing: SELECT * FROM course_base LIMIT ? <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">34.325</span> [main] DEBUG c.x.m.d.C.findCourseListPage - ==&gt; Parameters: <span class="hljs-number">10</span>(Integer)<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">34.365</span> [main] DEBUG c.x.m.d.C.findCourseListPage - &lt;==      Total: <span class="hljs-number">10</span><span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">34.366</span> [main] DEBUG org.mybatis.spring.SqlSessionUtils - Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@<span class="hljs-number">2e549515</span>]<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">34.367</span> [main] DEBUG o.s.jdbc.datasource.DataSourceUtils - Returning JDBC Connection to DataSourcePage&#123;count=<span class="hljs-keyword">true</span>, pageNum=<span class="hljs-number">1</span>, pageSize=<span class="hljs-number">10</span>, startRow=<span class="hljs-number">0</span>, endRow=<span class="hljs-number">10</span>, total=<span class="hljs-number">21</span>, pages=<span class="hljs-number">3</span>, reasonable=<span class="hljs-keyword">false</span>, pageSizeZero=<span class="hljs-keyword">false</span>&#125;[CourseBase(id=<span class="hljs-number">297e7</span>c7c62b888f00162b8a7dec20000, name=test_java基础<span class="hljs-number">33</span>, users=b1, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">3</span>, grade=<span class="hljs-number">200002</span>, studymodel=<span class="hljs-number">201002</span>, teachmode=<span class="hljs-keyword">null</span>, description=test_java基础<span class="hljs-number">33</span>test_java基础<span class="hljs-number">33</span>test_java基础<span class="hljs-number">33</span>, status=<span class="hljs-number">202002</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b888f00162b8a965510001, name=test_java基础, users=test_java基础, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>test_java基础<span class="hljs-number">2</span>, status=<span class="hljs-number">202002</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b8aa9d0162b8ab13910000, name=java基础<span class="hljs-number">3</span>, users=java基础<span class="hljs-number">3</span>, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>, status=<span class="hljs-number">202002</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b8aa9d0162b8ab56ba0001, name=java基础<span class="hljs-number">3</span>, users=b2, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3f</span>fff, status=<span class="hljs-number">202001</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b8aa9d0162b8ab70e90002, name=java基础<span class="hljs-number">3</span>, users=java基础<span class="hljs-number">3</span>, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>java基础<span class="hljs-number">3</span>, status=<span class="hljs-number">202001</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b8aa9d0162b8accd4c0003, name=java基础<span class="hljs-number">4</span>, users=java基础<span class="hljs-number">4</span>, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=java基础<span class="hljs-number">4</span>java基础<span class="hljs-number">4</span>java基础<span class="hljs-number">4</span>java基础<span class="hljs-number">4</span>java基础<span class="hljs-number">4</span>java基础<span class="hljs-number">4</span>java基础<span class="hljs-number">4</span>, status=<span class="hljs-number">202001</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b8aa9d0162b8ad78a10004, name=java基础<span class="hljs-number">5</span>, users=java基础<span class="hljs-number">5</span>, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=java基础<span class="hljs-number">5</span>java基础<span class="hljs-number">5</span>java基础<span class="hljs-number">5</span>java基础<span class="hljs-number">5</span>, status=<span class="hljs-number">202001</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b8aa9d0162b8ae50300005, name=java基础<span class="hljs-number">5</span>, users=java基础<span class="hljs-number">5</span>, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=java基础<span class="hljs-number">5</span>, status=<span class="hljs-number">202001</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b8afe20162b8b0477c0000, name=test_java基础<span class="hljs-number">6</span>, users=test_java基础<span class="hljs-number">6</span>, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=test_java基础<span class="hljs-number">6</span>test_java基础<span class="hljs-number">6</span>, status=<span class="hljs-number">202001</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>), CourseBase(id=<span class="hljs-number">297e7</span>c7c62b8b3ff0162b8b58c260000, name=test_java基础<span class="hljs-number">6</span>, users=test_java基础<span class="hljs-number">6</span>, mt=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>, st=<span class="hljs-number">1</span>-<span class="hljs-number">3</span>-<span class="hljs-number">2</span>, grade=<span class="hljs-number">200001</span>, studymodel=<span class="hljs-number">201001</span>, teachmode=<span class="hljs-keyword">null</span>, description=test_java基础<span class="hljs-number">6</span>, status=<span class="hljs-number">202001</span>, companyId=<span class="hljs-keyword">null</span>, userId=<span class="hljs-keyword">null</span>)]<span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">15</span> <span class="hljs-number">22</span>:<span class="hljs-number">49</span>:<span class="hljs-number">46.149</span> [cluster-ClusterId&#123;value=<span class="hljs-string">&#x27;5e971ef10d7a8aa870e707ed&#x27;</span>, description=<span class="hljs-string">&#x27;null&#x27;</span>&#125;-localhost:<span class="hljs-number">27017</span>] DEBUG org.mongodb.driver.connection - Closing connection connectionId&#123;localValue:<span class="hljs-number">3</span>&#125;<span class="hljs-number">21</span></code></pre><p><strong><u>ps:本文为学习记录，仅供参考与学习</u></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> pagehelper </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-jsx语法配置</title>
      <link href="2020/04/14/vue-jsx-setting/"/>
      <url>2020/04/14/vue-jsx-setting/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-JSX语法配置"><a href="#Vue-JSX语法配置" class="headerlink" title="Vue-JSX语法配置"></a>Vue-JSX语法配置</h2><p>Vue工程中，如果组件中用到了JSX语法，工程编译报错。如下</p><pre><code class="hljs vue">&lt;el-tree      :data&#x3D;&quot;teachplanList&quot;      :props&#x3D;&quot;defaultProps&quot;      node-key&#x3D;&quot;id&quot;      default-expand-all      :expand-on-click-node&#x3D;&quot;false&quot;      :render-content&#x3D;&quot;renderContent&quot;&gt;&lt;&#x2F;el-tree&gt;renderContent(h, &#123; node, data, store &#125;) &#123;        return (          &lt;span style&#x3D;&quot;flex: 1; display: flex; align-items: center; justify-content: space-between; font-size: 14px; padding-right: 8px;&quot;&gt;            &lt;span&gt;              &lt;span&gt;&#123;node.label&#125;&lt;&#x2F;span&gt;            &lt;&#x2F;span&gt;            &lt;span&gt;              &lt;el-button style&#x3D;&quot;font-size: 12px;&quot; type&#x3D;&quot;text&quot; on-click&#x3D;&#123; () &#x3D;&gt; this.choosevideo(data) &#125;&gt;&#123;data.mediaFileOriginalName&#125;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 选择视频&lt;&#x2F;el-button&gt;              &lt;el-button style&#x3D;&quot;font-size: 12px;&quot; type&#x3D;&quot;text&quot; on-click&#x3D;&#123; () &#x3D;&gt; this.edit(data) &#125;&gt;修改&lt;&#x2F;el-button&gt;              &lt;el-button style&#x3D;&quot;font-size: 12px;&quot; type&#x3D;&quot;text&quot; on-click&#x3D;&#123; () &#x3D;&gt; this.remove(node, data) &#125;&gt;删除&lt;&#x2F;el-button&gt;            &lt;&#x2F;span&gt;          &lt;&#x2F;span&gt;);      &#125;,</code></pre><p>解决方案如下：</p><p>JSX 是Javascript和XML结合的一种格式，它是<strong>React的核心组成部分</strong>，JSX和XML语法类似，可以定义属性以及子元 素。唯一特殊的是可以用大括号来加入JavaScript表达式。遇到 HTML 标签(以 &lt; 开头)，就用 HTML 规则解析; 遇到代码块(以 { 开头)，就用 JavaScript 规则解析。</p><p>WebStorm设置如下：</p><p><img src="/2020/04/14/vue-jsx-setting/1.png" alt="WebStorm设置"></p><p>HTML类型文件中增加Vue</p><p>preferences -&gt; Editor -&gt; File Types 中找到上边框中HTML 在下边加一个 *.vue</p><p><img src="/2020/04/14/vue-jsx-setting/2.png" alt="File Types"></p><p>如果已经在vue template 中已存在.vue 则把它改为.vue2( Html .vue)</p><p><img src="/2020/04/14/vue-jsx-setting/3.png" alt="vue template"></p><p>另外，工程的.babelrc文件如下：</p><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;presets&quot;</span>: [    [<span class="hljs-string">&quot;env&quot;</span>, &#123;      <span class="hljs-attr">&quot;modules&quot;</span>: <span class="hljs-literal">false</span>    &#125;],    <span class="hljs-string">&quot;stage-2&quot;</span>,    <span class="hljs-string">&quot;es2015&quot;</span>  ],  <span class="hljs-attr">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;transform-runtime&quot;</span>,<span class="hljs-string">&quot;transform-vue-jsx&quot;</span>],  <span class="hljs-attr">&quot;env&quot;</span>: &#123;    <span class="hljs-attr">&quot;test&quot;</span>: &#123;      <span class="hljs-attr">&quot;presets&quot;</span>: [<span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-string">&quot;stage-2&quot;</span>],      <span class="hljs-attr">&quot;plugins&quot;</span>: [<span class="hljs-string">&quot;transform-es2015-modules-commonjs&quot;</span>, <span class="hljs-string">&quot;dynamic-import-node&quot;</span>]    &#125;  &#125;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> jsx </tag>
            
            <tag> webStorm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rabbit-MQ学习</title>
      <link href="2020/04/09/rabbit-mq-start/"/>
      <url>2020/04/09/rabbit-mq-start/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Rabbit-MQ学习"><a href="#Rabbit-MQ学习" class="headerlink" title="Rabbit-MQ学习"></a>Rabbit-MQ学习</h2><p>MQ全称为Message Queue，即消息队列， RabbitMQ是由erlang语言开发，基于AMQP(Advanced Message Queue 高级消息队列协议)协议实现的消息队列，它是一种应用程序之间的通信方法，消息队列在分布式系统开发中应用非常广泛。<a href="http://www.rabbitmq.com/">RabbitMQ官方地址</a></p><p>开发中消息队列通常有如下应用场景:<br> 1、任务异步处理。<br>将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间。<br> 2、应用程序解耦合<br>MQ相当于一个中介，生产方通过MQ与消费方交互，它将应用程序进行解耦合。</p><p>RabbitMQ的优点<br>1、使得简单，功能强大。<br>2、基于AMQP协议。<br>3、社区活跃，文档完善。<br>4、高并发性能好，这主要得益于Erlang语言。<br>5、Spring Boot默认已集成RabbitMQ。</p><h3 id="Java消息服务（JMS）"><a href="#Java消息服务（JMS）" class="headerlink" title="Java消息服务（JMS）"></a>Java消息服务（JMS）</h3><p>JMS应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步发送消息，进行异步通信。<br>JMS是java提供的一套消息服务API标准，其目的是为所有的java应用程序提供统一的消息通信的标准，类似java的 jdbc，只要遵循jms标准的应用程序之间都可以进行消息通信。<br>它和AMQP有什么不同，jms是java语言专属的消息服务标准，它是在api层定义标准，并且只能用于java应用;<br>而AMQP是在协议层定义的标准，是跨语言的 。</p><h3 id="RabbitMQ的工作原理"><a href="#RabbitMQ的工作原理" class="headerlink" title="RabbitMQ的工作原理"></a>RabbitMQ的工作原理</h3><p><img src="/2020/04/09/rabbit-mq-start/1.png" alt="RabbitMQ的工作原理"></p><p>Broker:消息队列服务进程，此进程包括两个部分:Exchange和Queue。<br>Exchange:消息队列交换机，按一定的规则将消息路由转发到某个队列，对消息进行过虑。<br>Queue:消息队列，存储消息的队列，消息到达队列并转发给指定的消费方。<br>Producer:消息生产者，即生产方客户端，生产方客户端将消息发送到MQ。<br>Consumer:消息消费者，即消费方客户端，接收MQ转发的消息。</p><p>消息发布接收流程:<br> —–发送消息—–<br> 1、生产者和Broker建立TCP连接。<br> 2、生产者和Broker建立通道。<br> 3、生产者通过通道消息发送给Broker，由Exchange将消息进行转发。<br> 4、Exchange将消息转发到指定的Queue(队列)。</p><p>—-接收消息—–<br> 1、消费者和Broker建立TCP连接。<br> 2、消费者和Broker建立通道 。<br> 3、消费者监听指定的Queue(队列)。<br> 4、当有消息到达Queue时Broker默认将消息推送给消费者。<br> 5、消费者接收到消息。</p><h3 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h3><pre><code class="hljs bash">// 安装rabbitmq$ brew install rabbitmq// 安装目录$ <span class="hljs-built_in">pwd</span>/usr/<span class="hljs-built_in">local</span>/Cellar/rabbitmq/3.7.12$ <span class="hljs-built_in">cd</span> sbin/$ lscuttlefishrabbitmq-defaultsrabbitmq-diagnosticsrabbitmq-envrabbitmq-pluginsrabbitmq-serverrabbitmqadminrabbitmqctl// 启动$ <span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/Cellar/rabbitmq/3.7.12$ ./sbin/rabbitmq-server// 后台启动(可以保证在关闭命令窗口后，MQ任然保持在运行）./sbin/rabbitmq-server -detached// 开启rabbitMQ的控制台:// 另起终端进入<span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/Cellar/rabbitmq/版本号/sbin目录；$ <span class="hljs-built_in">cd</span> /usr/<span class="hljs-built_in">local</span>/Cellar/rabbitmq/3.7.12/sbin/sudo ./rabbitmq-plugins <span class="hljs-built_in">enable</span> rabbitmq_management// 访问rabbitMQ，在浏览器地址栏输入，进入登录页面（注：登录名和密码同为guest）：http://localhost:15672/// rabbitMQ的启动和关闭，启动rabbitMQ:./rabbitmqctl start_app// 关闭rabbitMQ:./rabbitmqctl stop_app// 开启rabbitMQ服务（推荐）:brew services start rabbitmq</code></pre><p><img src="/2020/04/09/rabbit-mq-start/2.png" alt="RabbitMQ工作台"></p><h3 id="生产者Producer"><a href="#生产者Producer" class="headerlink" title="生产者Producer"></a>生产者Producer</h3><p>操作流程<br>1）创建连接<br>2）创建通道<br>3）声明队列<br>4）发送消息</p><p>加入依赖</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--此版本与spring boot 1.5.9版本匹配--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.rabbitmq<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>amqp-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.0.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre><p>生产者测试</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * RabbitMQ入门程序测试。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer01</span> </span>&#123;    <span class="hljs-comment">// 队列</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE = <span class="hljs-string">&quot;Hello RabbitMQ&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;        Connection connection = <span class="hljs-keyword">null</span>;        Channel channel = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 通过连接工厂创建新的连接和mq建立连接</span>            ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();            connectionFactory.setHost(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);            connectionFactory.setPort(<span class="hljs-number">5672</span>);            connectionFactory.setUsername(<span class="hljs-string">&quot;guest&quot;</span>);            connectionFactory.setPassword(<span class="hljs-string">&quot;guest&quot;</span>);            <span class="hljs-comment">// RabbitMQ默认虚拟机名称为&quot;/&quot;,虚拟机相当于一个独立的mq服务器。</span>            connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);            <span class="hljs-comment">// 建立与RabbitMQ服务的TCP连接</span>            connection = connectionFactory.newConnection();            <span class="hljs-comment">// 建立会话通道，生产者和mq服务所有通信都在channel通道中完成。</span>            channel = connection.createChannel();            <span class="hljs-comment">// queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span>            <span class="hljs-comment">/**</span><span class="hljs-comment">             * queue: 队列名称</span><span class="hljs-comment">             * durable：是否持久化，若持久化，mq重启后队列还在</span><span class="hljs-comment">             * exclusive：是否独占连接，队列只允许在该连接中访问，若连接关闭队列自动删除，若此为True，可用于临时队列的创建。</span><span class="hljs-comment">             * autoDelete：自动删除，队列不再使用时是否自动删除此队列，若此参数与exclusive设为True,就可以实现临时队列。</span><span class="hljs-comment">             * arguments：参数，可以设置一个队列的扩展参数。如：可设置存活时间</span><span class="hljs-comment">             *</span><span class="hljs-comment">             */</span>            channel.queueDeclare(QUEUE, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);            <span class="hljs-comment">// basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body)</span>            <span class="hljs-comment">/**</span><span class="hljs-comment">             * exchange: 交换机，若不指定将使用mq的默认交换机(设为&quot;&quot;)</span><span class="hljs-comment">             * routingKey：路由key，交换机根据路由key来将消息转发到指定的队列，若使用默认交换机，routingKey设置为队列的名称</span><span class="hljs-comment">             * props： 消息的属性</span><span class="hljs-comment">             * body： 消息内容</span><span class="hljs-comment">             *</span><span class="hljs-comment">             */</span>            <span class="hljs-comment">// 消息内容</span>            String message = <span class="hljs-string">&quot;Hello, This is a First RabbitMQ program!&quot;</span>;            channel.basicPublish(<span class="hljs-string">&quot;&quot;</span>, QUEUE, <span class="hljs-keyword">null</span>, message.getBytes());            System.out.println(<span class="hljs-string">&quot;Send to mq: &quot;</span> + message);        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">if</span> (channel != <span class="hljs-keyword">null</span>) &#123;                channel.close();            &#125;            <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>)                connection.close();        &#125;    &#125;&#125;</code></pre><p>在RabbitMQ管理控制台中</p><p><img src="/2020/04/09/rabbit-mq-start/3.png" alt="RabbitMQ-producer"></p><h3 id="消费者Consumer"><a href="#消费者Consumer" class="headerlink" title="消费者Consumer"></a>消费者Consumer</h3><p>操作流程：<br>1）创建连接<br>2）创建通道<br>3）声明队列<br>4）监听队列<br>5）接收消息</p><p>消费者测试</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<span class="hljs-comment">/**</span><span class="hljs-comment"> *  RabbitMQ入门程序-消费者测试。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer01</span> </span>&#123;    <span class="hljs-comment">// 队列</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE = <span class="hljs-string">&quot;Hello RabbitMQ&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;        <span class="hljs-comment">// 通过连接工厂创建新的连接和mq建立连接</span>        ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();        connectionFactory.setHost(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);        connectionFactory.setPort(<span class="hljs-number">5672</span>);        connectionFactory.setUsername(<span class="hljs-string">&quot;guest&quot;</span>);        connectionFactory.setPassword(<span class="hljs-string">&quot;guest&quot;</span>);        <span class="hljs-comment">// RabbitMQ默认虚拟机名称为&quot;/&quot;,虚拟机相当于一个独立的mq服务器。</span>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);        <span class="hljs-comment">// 建立与RabbitMQ服务的TCP连接</span>        Connection connection = connectionFactory.newConnection();        <span class="hljs-comment">// 建立会话通道，生产者和mq服务所有通信都在channel通道中完成。</span>        Channel channel = connection.createChannel();        <span class="hljs-comment">/**</span><span class="hljs-comment">         * queue: 队列名称</span><span class="hljs-comment">         * durable：是否持久化，若持久化，mq重启后队列还在</span><span class="hljs-comment">         * exclusive：是否独占连接，队列只允许在该连接中访问，若连接关闭队列自动删除，若此为True，可用于临时队列的创建。</span><span class="hljs-comment">         * autoDelete：自动删除，队列不再使用时是否自动删除此队列，若此参数与exclusive设为True,就可以实现临时队列。</span><span class="hljs-comment">         * arguments：参数，可以设置一个队列的扩展参数。如：可设置存活时间</span><span class="hljs-comment">         *</span><span class="hljs-comment">         */</span>        channel.queueDeclare(QUEUE, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);        <span class="hljs-comment">// 消费方法</span>        DefaultConsumer defaultConsumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel) &#123;            <span class="hljs-comment">/**</span><span class="hljs-comment">             * 当接收到消息后此方法将被调用。</span><span class="hljs-comment">             *</span><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> consumerTag 消费者标签，用来标识消费者的，在监听队列时设置channel.basicConsume</span><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> envelope 信封，通过envelope</span><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> properties 消息属性</span><span class="hljs-comment">             * <span class="hljs-doctag">@param</span> body 消息内容</span><span class="hljs-comment">             * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment">             */</span>            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;                <span class="hljs-comment">// 交换机</span>                String exchange = envelope.getExchange();                <span class="hljs-comment">// 消息ID，mq在channel中用来标识消息的ID，可用于确认消息已经接收</span>                <span class="hljs-keyword">long</span> deliveryTag = envelope.getDeliveryTag();                String message = <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>);                System.out.println(<span class="hljs-string">&quot;Receive message: &quot;</span> + message);            &#125;        &#125;;              <span class="hljs-comment">/**</span><span class="hljs-comment">         * 监听队列 basicConsume(String queue, boolean autoAck, Consumer callback)</span><span class="hljs-comment">         *</span><span class="hljs-comment">         * queue：队列名称</span><span class="hljs-comment">         * autoAck：自动回复，当消费者接收到消息后要告诉mq消息已接收，若此参数设为True表示会自动回复mq，若为False要通过编程实现回复</span><span class="hljs-comment">         * callback：消费方法，当消费者接收到消息要执行的方法。</span><span class="hljs-comment">         *</span><span class="hljs-comment">         */</span>        channel.basicConsume(QUEUE, <span class="hljs-keyword">true</span>, defaultConsumer);    &#125;&#125;</code></pre><p>此时执行消费者，输出结果，消费者不会结果，持续监听。</p><pre><code class="hljs java">Receive message: Hello, This is a First RabbitMQ program!</code></pre><p>控制台消息清零（1-1=0）</p><p><img src="/2020/04/09/rabbit-mq-start/4.png" alt="RabbitMQ-consumer"></p><p>再次启动生产者生产消息，消费者就可持续接收到消息。</p><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><h4 id="1）Work-queues（工作队列模式）"><a href="#1）Work-queues（工作队列模式）" class="headerlink" title="1）Work queues（工作队列模式）"></a>1）Work queues（工作队列模式）</h4><p>对于任务过重或任务较多情况使用工作队列可以提高任务处理的速度。<br>一条消息只会被一个消费者接收;<br>rabbit采用**<u>轮询</u>**的方式将消息是平均发送给消费者的;<br>消费者在处理完某条消息后，才会收到下一条消息。</p><h4 id="2）Publish-subscribe（发布-订阅模式）"><a href="#2）Publish-subscribe（发布-订阅模式）" class="headerlink" title="2）Publish/subscribe（发布/订阅模式）"></a>2）Publish/subscribe（发布/订阅模式）</h4><p>每个消费者监听自己的队列。<br>生产者将消息发给broker，由交换机将消息转发到绑定此交换机的每个队列，每个绑定交换机的队列都将接收到消息。</p><p>测试<br>生产者</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.BuiltinExchangeType;<span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<span class="hljs-keyword">import</span> com.rabbitmq.client.Connection;<span class="hljs-keyword">import</span> com.rabbitmq.client.ConnectionFactory;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * RabbitMQ生产订阅模式-生产者测试。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer02_publish</span> </span>&#123;    <span class="hljs-comment">// 邮件队列</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_INFORM_EMAIL = <span class="hljs-string">&quot;queue_inform_email&quot;</span>;    <span class="hljs-comment">// 短信队列</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_INFORM_SMS = <span class="hljs-string">&quot;queue_inform_sms&quot;</span>;    <span class="hljs-comment">// 交换机</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String EXCHANGE_FANOUT_INFORM = <span class="hljs-string">&quot;exchange_fanout_inform&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;        Connection connection = <span class="hljs-keyword">null</span>;        Channel channel = <span class="hljs-keyword">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 通过连接工厂创建新的连接和mq建立连接</span>            ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();            connectionFactory.setHost(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);            connectionFactory.setPort(<span class="hljs-number">5672</span>);            connectionFactory.setUsername(<span class="hljs-string">&quot;guest&quot;</span>);            connectionFactory.setPassword(<span class="hljs-string">&quot;guest&quot;</span>);            <span class="hljs-comment">// RabbitMQ默认虚拟机名称为&quot;/&quot;,虚拟机相当于一个独立的mq服务器。</span>            connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);            <span class="hljs-comment">// 建立与RabbitMQ服务的TCP连接</span>            connection = connectionFactory.newConnection();            <span class="hljs-comment">// 建立会话通道，生产者和mq服务所有通信都在channel通道中完成。</span>            channel = connection.createChannel();            <span class="hljs-comment">/**</span><span class="hljs-comment">             * 声明交换机</span><span class="hljs-comment">             * exchangeDeclare(String exchange, String type)</span><span class="hljs-comment">             * exchange: 交换机名称</span><span class="hljs-comment">             * type：交换机类型，</span><span class="hljs-comment">             *  FANOUT：对应的RabbitMQ的工作模式是 publish/subscribe模式</span><span class="hljs-comment">             *  DIRECT：对应的Routing工作模式</span><span class="hljs-comment">             *  TOPIC： 对应的Topic工作模式</span><span class="hljs-comment">             *  HEADERS：对应的headers工作模式</span><span class="hljs-comment">             *</span><span class="hljs-comment">             */</span>            channel.exchangeDeclare(EXCHANGE_FANOUT_INFORM, BuiltinExchangeType.FANOUT);            <span class="hljs-comment">/**</span><span class="hljs-comment">             * 声明队列</span><span class="hljs-comment">             * queueDeclare(String queue, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span><span class="hljs-comment">             *</span><span class="hljs-comment">             * queue: 队列名称</span><span class="hljs-comment">             * durable：是否持久化，若持久化，mq重启后队列还在</span><span class="hljs-comment">             * exclusive：是否独占连接，队列只允许在该连接中访问，若连接关闭队列自动删除，若此为True，可用于临时队列的创建。</span><span class="hljs-comment">             * autoDelete：自动删除，队列不再使用时是否自动删除此队列，若此参数与exclusive设为True,就可以实现临时队列。</span><span class="hljs-comment">             * arguments：参数，可以设置一个队列的扩展参数。如：可设置存活时间</span><span class="hljs-comment">             */</span>            channel.queueDeclare(QUEUE_INFORM_EMAIL, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);            channel.queueDeclare(QUEUE_INFORM_SMS, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);            <span class="hljs-comment">/**</span><span class="hljs-comment">             * 交换机与队列绑定</span><span class="hljs-comment">             * queueBind(String queue, String exchange, String routingKey)</span><span class="hljs-comment">             * queue: 队列名称</span><span class="hljs-comment">             * exchange：交换机名称</span><span class="hljs-comment">             * routingKey：路由key，交换机根据路由key的值将消息转发到指定的队列中，在publish/subscribe模式设置为空字符串</span><span class="hljs-comment">             */</span>            channel.queueBind(QUEUE_INFORM_EMAIL, EXCHANGE_FANOUT_INFORM, <span class="hljs-string">&quot;&quot;</span>);            channel.queueBind(QUEUE_INFORM_SMS, EXCHANGE_FANOUT_INFORM, <span class="hljs-string">&quot;&quot;</span>);            <span class="hljs-comment">/**</span><span class="hljs-comment">             * 发送消息</span><span class="hljs-comment">             * basicPublish(String exchange, String routingKey, BasicProperties props, byte[] body)</span><span class="hljs-comment">             * exchange: 交换机，若不指定将使用mq的默认交换机(设为&quot;&quot;)</span><span class="hljs-comment">             * routingKey：路由key，交换机根据路由key来将消息转发到指定的队列，若使用默认交换机，routingKey设置为队列的名称</span><span class="hljs-comment">             * props： 消息的属性</span><span class="hljs-comment">             * body： 消息内容</span><span class="hljs-comment">             *</span><span class="hljs-comment">             */</span>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;                <span class="hljs-comment">// 消息内容</span>                String message = <span class="hljs-string">&quot;Hello, Inform to user &quot;</span> + i;                channel.basicPublish(EXCHANGE_FANOUT_INFORM, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-keyword">null</span>, message.getBytes());                System.out.println(<span class="hljs-string">&quot;Send to mq: &quot;</span> + message);            &#125;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            e.printStackTrace();        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-keyword">if</span> (channel != <span class="hljs-keyword">null</span>) &#123;                channel.close();            &#125;            <span class="hljs-keyword">if</span> (connection != <span class="hljs-keyword">null</span>)                connection.close();        &#125;    &#125;&#125;</code></pre><p>消费者EMAIL</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.rabbitmq;<span class="hljs-keyword">import</span> com.rabbitmq.client.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * RabbitMQ生产订阅模式-消费者email测试。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer02_subscribe_email</span> </span>&#123;    <span class="hljs-comment">// 邮件队列</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_INFORM_EMAIL = <span class="hljs-string">&quot;queue_inform_email&quot;</span>;    <span class="hljs-comment">// 交换机</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String EXCHANGE_FANOUT_INFORM = <span class="hljs-string">&quot;exchange_fanout_inform&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;        <span class="hljs-comment">// 通过连接工厂创建新的连接和mq建立连接</span>        ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();        connectionFactory.setHost(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);        connectionFactory.setPort(<span class="hljs-number">5672</span>);        connectionFactory.setUsername(<span class="hljs-string">&quot;guest&quot;</span>);        connectionFactory.setPassword(<span class="hljs-string">&quot;guest&quot;</span>);        <span class="hljs-comment">// RabbitMQ默认虚拟机名称为&quot;/&quot;,虚拟机相当于一个独立的mq服务器。</span>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);        <span class="hljs-comment">// 建立与RabbitMQ服务的TCP连接</span>        Connection connection = connectionFactory.newConnection();        <span class="hljs-comment">// 建立会话通道，生产者和mq服务所有通信都在channel通道中完成。</span>        Channel channel = connection.createChannel();        <span class="hljs-comment">// 声明交换机</span>        channel.exchangeDeclare(EXCHANGE_FANOUT_INFORM, BuiltinExchangeType.FANOUT);        <span class="hljs-comment">// 声明队列</span>        channel.queueDeclare(QUEUE_INFORM_EMAIL, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);        <span class="hljs-comment">// 绑定队列</span>        channel.queueBind(QUEUE_INFORM_EMAIL, EXCHANGE_FANOUT_INFORM, <span class="hljs-string">&quot;&quot;</span>);        <span class="hljs-comment">// 消费方法</span>        DefaultConsumer defaultConsumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel) &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;                <span class="hljs-comment">// 交换机</span>                String exchange = envelope.getExchange();                <span class="hljs-comment">// 消息ID，mq在channel中用来标识消息的ID，可用于确认消息已经接收</span>                <span class="hljs-keyword">long</span> deliveryTag = envelope.getDeliveryTag();                String message = <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>);                System.out.println(<span class="hljs-string">&quot;Receive message: &quot;</span> + message);            &#125;        &#125;;        channel.basicConsume(QUEUE_INFORM_EMAIL, <span class="hljs-keyword">true</span>, defaultConsumer);    &#125;&#125;</code></pre><p>消费者SMS</p><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.rabbitmq.client.*;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.util.concurrent.TimeoutException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * RabbitMQ生产订阅模式-消费者sms测试。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/9</span><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer02_subscribe_sms</span> </span>&#123;    <span class="hljs-comment">// 短信队列</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_INFORM_SMS = <span class="hljs-string">&quot;queue_inform_sms&quot;</span>;    <span class="hljs-comment">// 交换机</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String EXCHANGE_FANOUT_INFORM = <span class="hljs-string">&quot;exchange_fanout_inform&quot;</span>;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, TimeoutException </span>&#123;        <span class="hljs-comment">// 通过连接工厂创建新的连接和mq建立连接</span>        ConnectionFactory connectionFactory = <span class="hljs-keyword">new</span> ConnectionFactory();        connectionFactory.setHost(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);        connectionFactory.setPort(<span class="hljs-number">5672</span>);        connectionFactory.setUsername(<span class="hljs-string">&quot;guest&quot;</span>);        connectionFactory.setPassword(<span class="hljs-string">&quot;guest&quot;</span>);        <span class="hljs-comment">// RabbitMQ默认虚拟机名称为&quot;/&quot;,虚拟机相当于一个独立的mq服务器。</span>        connectionFactory.setVirtualHost(<span class="hljs-string">&quot;/&quot;</span>);        <span class="hljs-comment">// 建立与RabbitMQ服务的TCP连接</span>        Connection connection = connectionFactory.newConnection();        <span class="hljs-comment">// 建立会话通道，生产者和mq服务所有通信都在channel通道中完成。</span>        Channel channel = connection.createChannel();        channel.exchangeDeclare(EXCHANGE_FANOUT_INFORM, BuiltinExchangeType.FANOUT);        channel.queueDeclare(QUEUE_INFORM_SMS, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">false</span>, <span class="hljs-keyword">null</span>);        channel.queueBind(QUEUE_INFORM_SMS, EXCHANGE_FANOUT_INFORM, <span class="hljs-string">&quot;&quot;</span>);        <span class="hljs-comment">// 消费方法</span>        DefaultConsumer defaultConsumer = <span class="hljs-keyword">new</span> DefaultConsumer(channel) &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleDelivery</span><span class="hljs-params">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class="hljs-keyword">byte</span>[] body)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;                <span class="hljs-comment">// 交换机</span>                String exchange = envelope.getExchange();                <span class="hljs-comment">// 消息ID，mq在channel中用来标识消息的ID，可用于确认消息已经接收</span>                <span class="hljs-keyword">long</span> deliveryTag = envelope.getDeliveryTag();                String message = <span class="hljs-keyword">new</span> String(body, <span class="hljs-string">&quot;utf-8&quot;</span>);                System.out.println(<span class="hljs-string">&quot;Receive message: &quot;</span> + message);            &#125;        &#125;;        channel.basicConsume(QUEUE_INFORM_SMS, <span class="hljs-keyword">true</span>, defaultConsumer);    &#125;&#125;</code></pre><p>运行程序，测试</p><pre><code class="hljs html">// 生产者发布消息Connected to the target VM, address: &#x27;127.0.0.1:49691&#x27;, transport: &#x27;socket&#x27;Send to mq: Hello, Inform to user 0Send to mq: Hello, Inform to user 1Send to mq: Hello, Inform to user 2Send to mq: Hello, Inform to user 3Send to mq: Hello, Inform to user 4Disconnected from the target VM, address: &#x27;127.0.0.1:49691&#x27;, transport: &#x27;socket&#x27;// 消费者消费消息（email-1）Receive message: Hello, Inform to user 1Receive message: Hello, Inform to user 3// 消费者消费消息（email-2）Receive message: Hello, Inform to user 0Receive message: Hello, Inform to user 2Receive message: Hello, Inform to user 4// 消费者消费消息（sms）Receive message: Hello, Inform to user 0Receive message: Hello, Inform to user 1Receive message: Hello, Inform to user 2Receive message: Hello, Inform to user 3Receive message: Hello, Inform to user 4</code></pre><p>管理控制台</p><p><img src="/2020/04/09/rabbit-mq-start/5.png" alt="publish-scribe"></p><h4 id="3）路由模式（Routing）"><a href="#3）路由模式（Routing）" class="headerlink" title="3）路由模式（Routing）"></a>3）路由模式（Routing）</h4><p>每个消费者监听自己的队列，并且设置routingkey。<br>生产者将消息发给交换机，由交换机根据routingkey来转发消息到指定的队列。<br>可实现发送/订阅模式</p><h4 id="4）通配符模式（Topics）"><a href="#4）通配符模式（Topics）" class="headerlink" title="4）通配符模式（Topics）"></a>4）通配符模式（Topics）</h4><p>每个消费者监听自己的队列，并且设置带统配符的routingkey。<br>生产者将消息发给broker，由交换机根据routingkey来转发消息到指定的队列。</p><p>通配符模式（Topics）与路由模式（Routing）的区别<br>Topics和Routing的基本原理相同，即：生产者将消息发给交换机，交换机根据routingKey将消息转发给与routingKey匹配的队列。<br>不同之处是：routingKey的匹配方式，Routing模式是相等匹配，Topics模式是统配符匹配。</p><p>符号#：匹配一个或者多个词（每个词中间以.分隔）如infrom.#可以匹配inform.sms，inform.email，inform.email.sms<br>符号<em>：只能匹配一个词，如inform.\</em>  可以匹配inform.sms、inform.email</p><h4 id="5）Header模式"><a href="#5）Header模式" class="headerlink" title="5）Header模式"></a>5）Header模式</h4><p>header模式与routing不同的地方在于，header模式取消routingkey，使用header中的 key/value(键值对)匹配队列。<br>案例:<br>根据用户的通知设置去通知用户，设置接收Email的用户只接收Email，设置接收sms的用户只接收sms，设置两种通知类型都接收的则两种通知都有效。</p><h4 id="6）RPC模式"><a href="#6）RPC模式" class="headerlink" title="6）RPC模式"></a>6）RPC模式</h4><p>RPC即客户端远程调用服务端的方法 ，使用MQ可以实现RPC的异步调用，基于Direct交换机实现，流程如下:<br>1、客户端即是生产者就是消费者，向RPC请求队列发送RPC调用消息，同时监听RPC响应队列。<br>2、服务端监听RPC请求队列的消息，收到消息后执行服务端的方法，得到方法返回的结果。<br>3、服务端将RPC方法 的结果发送到RPC响应队列。<br>4、客户端(RPC调用方)监听RPC响应队列，接收到RPC调用结果。</p><h3 id="RabbitMQ与Spring-Boot整合"><a href="#RabbitMQ与Spring-Boot整合" class="headerlink" title="RabbitMQ与Spring Boot整合"></a>RabbitMQ与Spring Boot整合</h3><p>依赖</p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../xc-framework-parent/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>test-rabbitmq-producer<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--&amp;lt;!&amp;ndash;此版本与spring boot 1.5.9版本匹配&amp;ndash;&amp;gt;--&gt;</span>        <span class="hljs-comment">&lt;!--&lt;dependency&gt;--&gt;</span>            <span class="hljs-comment">&lt;!--&lt;groupId&gt;com.rabbitmq&lt;/groupId&gt;--&gt;</span>            <span class="hljs-comment">&lt;!--&lt;artifactId&gt;amqp-client&lt;/artifactId&gt;--&gt;</span>            <span class="hljs-comment">&lt;!--&lt;version&gt;4.0.3&lt;/version&gt;--&gt;</span>        <span class="hljs-comment">&lt;!--&lt;/dependency&gt;--&gt;</span>        <span class="hljs-comment">&lt;!--web config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--amqp config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--test config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>yml配置文件</p><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">44000</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">test-rabbitmq-producer</span>  <span class="hljs-comment"># rabbitmq配置</span>  <span class="hljs-attr">rabbitmq:</span>    <span class="hljs-attr">host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">guest</span>    <span class="hljs-attr">password:</span> <span class="hljs-string">guest</span>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span></code></pre><p>RabbitMQ配置类</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.rabbitmq.config;<span class="hljs-keyword">import</span> org.springframework.amqp.core.*;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-comment">/**</span><span class="hljs-comment"> * RabbitMQ配置类。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>: &#123; Topics模式 &#125;</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/12</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RabbitmqConfig</span> </span>&#123;    <span class="hljs-comment">// 邮件队列</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_INFORM_EMAIL = <span class="hljs-string">&quot;queue_inform_email&quot;</span>;    <span class="hljs-comment">// 邮件队列</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String QUEUE_INFORM_SMS = <span class="hljs-string">&quot;queue_inform_sms&quot;</span>;    <span class="hljs-comment">// 交换机</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String EXCHANGE_TOPICS_INFORM = <span class="hljs-string">&quot;exchange_topics_inform&quot;</span>;    <span class="hljs-comment">// 路由key(EMAIL)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ROUTINGKEY_EMAIL = <span class="hljs-string">&quot;inform.#.email.#&quot;</span>;    <span class="hljs-comment">// 路由key(SMS)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String ROUTINGKEY_SMS = <span class="hljs-string">&quot;inform.#.sms.#&quot;</span>;    <span class="hljs-comment">// 声明交换机</span>    <span class="hljs-meta">@Bean(EXCHANGE_TOPICS_INFORM)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Exchange <span class="hljs-title">EXCHANGE_TOPICS_INFORM</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// durable(true)持久化，mq重启之后交换机还在</span>        <span class="hljs-keyword">return</span> ExchangeBuilder.topicExchange(EXCHANGE_TOPICS_INFORM).durable(<span class="hljs-keyword">true</span>).build();    &#125;    <span class="hljs-comment">// 声明队列EMAIL</span>    <span class="hljs-meta">@Bean(QUEUE_INFORM_EMAIL)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">QUEUE_INFORM_EMAIL</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(QUEUE_INFORM_EMAIL);    &#125;    <span class="hljs-comment">// 声明队列SMS</span>    <span class="hljs-meta">@Bean(QUEUE_INFORM_SMS)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Queue <span class="hljs-title">QUEUE_INFORM_SMS</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Queue(QUEUE_INFORM_SMS);    &#125;    <span class="hljs-comment">// 绑定交换机与队列EMAIL，指定RoutingKey</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">BINDING_QUEUE_INFORM_EMAIL</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(QUEUE_INFORM_EMAIL)</span> Queue queue,</span></span><span class="hljs-function"><span class="hljs-params">                                              <span class="hljs-meta">@Qualifier(EXCHANGE_TOPICS_INFORM)</span> Exchange exchange)</span> </span>&#123;        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(ROUTINGKEY_EMAIL).noargs();    &#125;    <span class="hljs-comment">// 绑定交换机与队列EMAIL，指定RoutingKey</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Binding <span class="hljs-title">BINDING_QUEUE_INFORM_SMS</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(QUEUE_INFORM_SMS)</span> Queue queue,</span></span><span class="hljs-function"><span class="hljs-params">                                            <span class="hljs-meta">@Qualifier(EXCHANGE_TOPICS_INFORM)</span> Exchange exchange)</span> </span>&#123;        <span class="hljs-keyword">return</span> BindingBuilder.bind(queue).to(exchange).with(ROUTINGKEY_SMS).noargs();    &#125;&#125;</code></pre><p>发送消息测试类</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.rabbitmq;<span class="hljs-keyword">import</span> com.xuecheng.rabbitmq.config.RabbitmqConfig;<span class="hljs-keyword">import</span> org.junit.Test;<span class="hljs-keyword">import</span> org.junit.runner.RunWith;<span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<span class="hljs-keyword">import</span> org.springframework.test.context.junit4.SpringRunner;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 基于springboot rabbitmq测试</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/12</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootTest</span><span class="hljs-meta">@RunWith(SpringRunner.class)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Producer05_springboot</span> </span>&#123;    <span class="hljs-comment">// 消息</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String MESSAGE_MQ = <span class="hljs-string">&quot;This a spring boot rabbitmq message&quot;</span>;    <span class="hljs-meta">@Autowired</span>    RabbitTemplate rabbitTemplate;    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSendEmail</span><span class="hljs-params">()</span> </span>&#123;        rabbitTemplate.convertAndSend(                RabbitmqConfig.EXCHANGE_TOPICS_INFORM,                <span class="hljs-string">&quot;inform.email&quot;</span>,                MESSAGE_MQ        );    &#125;&#125;</code></pre><p>消费者接收</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.rabbitmq.handler;<span class="hljs-keyword">import</span> com.rabbitmq.client.Channel;<span class="hljs-keyword">import</span> com.xuecheng.rabbitmq.config.RabbitmqConfig;<span class="hljs-keyword">import</span> org.springframework.amqp.core.Message;<span class="hljs-keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Rabbitmq消费者监听</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/12</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mqReciveHandler</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 队列Email监听</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> msg</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> channel</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RabbitListener(queues = &#123;RabbitmqConfig.QUEUE_INFORM_EMAIL&#125;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send_email</span><span class="hljs-params">(String msg, Message message, Channel channel)</span> </span>&#123;        System.out.println(<span class="hljs-string">&quot;Receive message is : &quot;</span> + msg);    &#125;&#125;</code></pre><p>运行测试方法，发布消息，结果</p><pre><code class="hljs html">Receive message is : This a spring boot rabbitmq message</code></pre><p><u>ps: 本文是学习笔记，仅供学习与参照！</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> rabbit-mq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Freemarker与Spring Boot集成</title>
      <link href="2020/04/06/freemake-spring-boot/"/>
      <url>2020/04/06/freemake-spring-boot/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Freemarker与Spring-Boot集成"><a href="#Freemarker与Spring-Boot集成" class="headerlink" title="Freemarker与Spring Boot集成"></a>Freemarker与Spring Boot集成</h2><p>FreeMarker是一款模版引擎。一种基于模版和要改变的数据，并用来生成输出文本（HTML网页，电子邮件、配置文件，源代码等）的通用工具。它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。</p><p>Freemarker并不关心数据的来源，只是根据模版的内容，将数据模型在模版中显示并输出文件（通常为html）。</p><h3 id="Freemarker环境搭建"><a href="#Freemarker环境搭建" class="headerlink" title="Freemarker环境搭建"></a>Freemarker环境搭建</h3><p>项目右击 -&gt; Open module Settings -&gt; + -&gt; new module -&gt; Next -&gt; 继承父模块 -&gt; Next -&gt; Finsh。</p><p><img src="/2020/04/06/freemake-spring-boot/1.png" alt="Freemaker测试工程搭建"></p><h4 id="POM引入依赖"><a href="#POM引入依赖" class="headerlink" title="POM引入依赖"></a>POM引入依赖</h4><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>xc-framework-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.xuecheng<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>&gt;</span>../xc-framework-parent/pom.xml<span class="hljs-tag">&lt;/<span class="hljs-name">relativePath</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>test-freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--freemarker config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--web config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--lombok config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--okhttp config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>okhttp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--test config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--commons-io config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><p>刷新依赖，下载依赖包</p><p><img src="/2020/04/06/freemake-spring-boot/2.png" alt="Freemaker依赖包"></p><h4 id="application-yml配置"><a href="#application-yml配置" class="headerlink" title="application.yml配置"></a>application.yml配置</h4><pre><code class="hljs yaml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8088</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">test-freemarker</span>  <span class="hljs-attr">freemarker:</span>    <span class="hljs-comment"># 关闭模版缓存，方便测试</span>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span>    <span class="hljs-attr">settings:</span>      <span class="hljs-comment"># 检查模版更新延迟时间，设置为0表示立即检查，如果时间大于0会有缓存不方便进行模版测试</span>      <span class="hljs-attr">template_update_delay:</span> <span class="hljs-number">0</span></code></pre><h4 id="日志文件配置"><a href="#日志文件配置" class="headerlink" title="日志文件配置"></a>日志文件配置</h4><p><code>logback-spring.xml</code></p><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>    <span class="hljs-comment">&lt;!--定义日志文件的存储地址,使用绝对路径--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_HOME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/Users/xxx/Documents/tmp/log&quot;</span>/&gt;</span>    <span class="hljs-comment">&lt;!-- Console 输出设置 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>            <span class="hljs-comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 按照每天生成日志文件 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span>            <span class="hljs-comment">&lt;!--日志文件输出的文件名--&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/xc.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-comment">&lt;!-- 异步输出 --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ASYNC&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">discardingThreshold</span>&gt;</span>0<span class="hljs-tag">&lt;/<span class="hljs-name">discardingThreshold</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">queueSize</span>&gt;</span>512<span class="hljs-tag">&lt;/<span class="hljs-name">queueSize</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 添加附加的appender,最多只能添加一个 --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis.cache.decorators.LoggingCache&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework.boot&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span>        <span class="hljs-comment">&lt;!--&lt;appender-ref ref=&quot;ASYNC&quot;/&gt;--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;CONSOLE&quot;</span>/&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></code></pre><h3 id="Freemarker测试"><a href="#Freemarker测试" class="headerlink" title="Freemarker测试"></a>Freemarker测试</h3><p>创建model, controller,模版文件</p><p><img src="/2020/04/06/freemake-spring-boot/3.png" alt="freemarker目录结构"></p><p><code>FreemarkerController.java</code></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.test.freemarker.controller;<span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> java.util.Map;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Freemarker controller.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:  <span class="hljs-doctag">@Controller</span>: 指向模版文件，注意不可使用<span class="hljs-doctag">@RestController</span>（返回JSON串）。</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/6</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Controller</span><span class="hljs-meta">@RequestMapping(&quot;/freemarker&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FreemarkerController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping(&quot;/test1&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> </span>&#123;       map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;FreeMarker&quot;</span>);       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test1&quot;</span>;    &#125;&#125;</code></pre><p>test1.ftl</p><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Hello $&#123;name&#125;!<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre><p>启动类</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xuecheng.test.freemarker;<span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<span class="hljs-comment">/**</span><span class="hljs-comment"> * FreemarkerApplication.</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchen</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2020/4/6</span><span class="hljs-comment"> */</span><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FreemarkerApplication</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        SpringApplication.run(FreemarkerApplication.class, args);    &#125;&#125;</code></pre><p>运行启动类，访问</p><p><code>http://localhost:8088/freemarker/test1</code></p><p><code>Hello FreeMarker!</code></p><h3 id="Freemarker指令"><a href="#Freemarker指令" class="headerlink" title="Freemarker指令"></a>Freemarker指令</h3><p>1、注释，即&lt;#‐‐和‐‐&gt;，介于其之间的内容会被freemarker忽略<br>2、插值(Interpolation):即${..}部分,freemarker会用真实的值代替${..}<br>3、FTL指令:和HTML标记类似，名字前加#予以区分，Freemarker会解析标签中的表达式或逻辑。<br>4、文本，仅文本信息，这些不是freemarker的注释、插值、FTL指令的内容会被freemarker忽略解析，直接输出内容。</p><h4 id="List指令"><a href="#List指令" class="headerlink" title="List指令"></a>List指令</h4><p>Controller类中加入</p><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/test1&quot;)</span><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">test1</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> </span>&#123;    map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;FreeMarker&quot;</span>);    Student stu1 = <span class="hljs-keyword">new</span> Student();    stu1.setName(<span class="hljs-string">&quot;小明&quot;</span>);    stu1.setAge(<span class="hljs-number">18</span>);    stu1.setMoney(<span class="hljs-number">1000.86f</span>);    stu1.setBirthday(<span class="hljs-keyword">new</span> Date());    Student stu2 = <span class="hljs-keyword">new</span> Student();    stu2.setName(<span class="hljs-string">&quot;小红&quot;</span>);    stu2.setMoney(<span class="hljs-number">200.1f</span>);    stu2.setAge(<span class="hljs-number">19</span>);    stu2.setBirthday(<span class="hljs-keyword">new</span> Date());    List&lt;Student&gt; friends = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    friends.add(stu1);    stu2.setFriends(friends);    stu2.setBestFriend(stu1);    List&lt;Student&gt; stus = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();    stus.add(stu1);    stus.add(stu2);    <span class="hljs-comment">//向数据模型放数据</span>    map.put(<span class="hljs-string">&quot;stus&quot;</span>, stus);    <span class="hljs-comment">//准备map数据</span>    HashMap&lt;String, Student&gt; stuMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();    stuMap.put(<span class="hljs-string">&quot;stu1&quot;</span>, stu1);    stuMap.put(<span class="hljs-string">&quot;stu2&quot;</span>, stu2);    <span class="hljs-comment">//向数据模型放数据</span>    map.put(<span class="hljs-string">&quot;stu1&quot;</span>, stu1);    <span class="hljs-comment">//向数据模型放数据</span>    map.put(<span class="hljs-string">&quot;stuMap&quot;</span>, stuMap);    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;test1&quot;</span>;&#125;</code></pre><p>模版文件</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>Hello $&#123;name&#125;!<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>遍历数据模型中的List学生信息（数据模型中的名字是stus）<span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>钱包<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        &lt;#--&lt;td&gt;生日日期&lt;/td&gt;--&gt;    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">#list</span> <span class="hljs-attr">stus</span> <span class="hljs-attr">as</span> <span class="hljs-attr">stu</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu_index + 1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu.money&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            &lt;#--&lt;td&gt;$&#123;stu.birthday&#125;&lt;/td&gt;--&gt;        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">#list</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></code></pre><p>显示效果</p><pre><code class="hljs html">Hello FreeMarker!遍历数据模型中的List学生信息（数据模型中的名字是stus）序号姓名年龄钱包1小明181,000.862小红19200.1</code></pre><h4 id="遍历Map数据"><a href="#遍历Map数据" class="headerlink" title="遍历Map数据"></a>遍历Map数据</h4><p>模版文件</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>遍历数据模型中的Map数据（stuMap）<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>方法一：在[]中填写map的key<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>姓名：$&#123;stuMap[&#x27;stu1&#x27;].name&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>年龄：$&#123;stuMap[&#x27;stu1&#x27;].age&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>方法二：在map后边直接加.加key<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>姓名：$&#123;stuMap.stu1.name&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>年龄：$&#123;stuMap.stu1.age&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>遍历map中的key, keys就是key列表<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">#list</span> <span class="hljs-attr">stuMap</span>?<span class="hljs-attr">keys</span> <span class="hljs-attr">as</span> <span class="hljs-attr">k</span>&gt;</span>    $&#123;k&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>    姓名：$&#123;stuMap[k].name&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>    年龄：$&#123;stuMap[k].age&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">#list</span>&gt;</span></code></pre><p>输出结果</p><pre><code class="hljs html">遍历数据模型中的Map数据（stuMap）方法一：在[]中填写map的key姓名：小明年龄：18方法二：在map后边直接加.加key姓名：小明年龄：18遍历map中的key, keys就是key列表stu2姓名：小红年龄：19stu1姓名：小明年龄：18</code></pre><h4 id="if指令"><a href="#if指令" class="headerlink" title="if指令"></a>if指令</h4><p>if 指令即判断指令，是常用的FTL指令，freemarker在解析时遇到if会进行判断，条件为真则输出if中间的内容，否则跳过内容不再输出。</p><pre><code class="hljs html">&lt;td &lt;#if stu.name == &#x27;小明&#x27;&gt;style=&quot;background: cornflowerblue&quot;&lt;/#if&gt;&gt;$&#123;stu.name&#125;&lt;/td&gt;</code></pre><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>1、算数运算符<br>FreeMarker表达式中完全支持算术运算，FreeMarker支持的算术运算符包括:+, - , * , / , %<br>2、逻辑运算符<br>逻辑与:&amp;&amp;<br>逻辑或:||<br>逻辑非:!<br>逻辑运算符只能作用于布尔值,否则将产生错误<br>3、 比较运算符<br>表达式中支持的比较运算符有如下几个:<br>1 =或者==:判断两个值是否相等.<br>2 !=:判断两个值是否不等.<br>3 &gt; 或者gt:判断左边值是否大于右边值<br>4 &gt;=或者gte:判断左边值是否大于等于右边值<br>5 &lt;或者lt:判断左边值是否小于右边值<br>6 &lt;=或者lte:判断左边值是否小于等于右边值</p><p>注意：使用gt等字母运算符代替 &gt; 会有更好的效果,因为 FreeMarker会把&gt;解释成FTL标签的结束字符,当然,也可以使用括 号来避免这种情况,如:&lt;#if (x&gt;y)&gt;</p><pre><code class="hljs html">&lt;#--&lt;td &lt;#if (stu.money &gt; 300)&gt;style=&quot;background: cornflowerblue&quot;&lt;/#if&gt;&gt;$&#123;stu.money&#125;&lt;/td&gt;--&gt;&lt;td &lt;#if stu.money gt 300&gt;style=&quot;background: cornflowerblue&quot;&lt;/#if&gt;&gt;$&#123;stu.money&#125;&lt;/td&gt;</code></pre><h4 id="空值处理"><a href="#空值处理" class="headerlink" title="空值处理"></a>空值处理</h4><p>判断某变量是否存在使用 “??” 用法为:variable??,如果该变量存在,返回true,否则返回false</p><pre><code class="hljs html">遍历数据模型中的List学生信息（数据模型中的名字是stus）<span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>钱包<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        &lt;#--&lt;td&gt;生日日期&lt;/td&gt;--&gt;    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">#--空值处理--</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">#if</span> <span class="hljs-attr">stus</span>??&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">#list</span> <span class="hljs-attr">stus</span> <span class="hljs-attr">as</span> <span class="hljs-attr">stu</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu_index + 1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>            &lt;td &lt;#if stu.name == &#x27;小明&#x27;&gt;style=&quot;background: cornflowerblue&quot;&lt;/#if&gt;&gt;$&#123;stu.name&#125;&lt;/td&gt;            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>        &lt;#--&lt;td &lt;#if stu.money &gt; 300&gt;style=&quot;background: cornflowerblue&quot;&lt;/#if&gt;&gt;$&#123;stu.money&#125;&lt;/td&gt;--&gt;        &lt;#--&lt;td &lt;#if (stu.money &gt; 300)&gt;style=&quot;background: cornflowerblue&quot;&lt;/#if&gt;&gt;$&#123;stu.money&#125;&lt;/td&gt;--&gt;            &lt;td &lt;#if stu.money gt 300&gt;style=&quot;background: cornflowerblue&quot;&lt;/#if&gt;&gt;$&#123;stu.money&#125;&lt;/td&gt;        &lt;#--&lt;td&gt;$&#123;stu.birthday&#125;&lt;/td&gt;--&gt;        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">#list</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">#if</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span></code></pre><p>也可以使用缺省值<br>缺失变量默认值使用 “!” 使用!要以指定一个默认值，当变量为空时显示默认值。<br>如：${name !’’}表示如果name为空显示空字符串。</p><pre><code class="hljs html">遍历数据模型中的Map数据（stuMap）<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>方法一：在[]中填写map的key<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>&lt;#--&lt;#if stuMap?? &amp;&amp; stuMap.stu1??&gt;--&gt;姓名：$&#123;(stuMap[&#x27;stu1&#x27;].name) ! &#x27;&#x27;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>年龄：$&#123;(stuMap[&#x27;stu1&#x27;].age) ! &#x27;&#x27;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>方法二：在map后边直接加.加key<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>姓名：$&#123;(stuMap.stu1.name) ! &#x27;&#x27;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span>年龄：$&#123;(stuMap.stu1.age) ! &#x27;&#x27;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span></code></pre><p>输出结果</p><pre><code class="hljs html">遍历数据模型中的Map数据（stuMap）方法一：在[]中填写map的key姓名：年龄：方法二：在map后边直接加.加key姓名：年龄：</code></pre><h4 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h4><p>到某个集合的大小</p><p><code>$&#123;集合名?size&#125;</code></p><pre><code class="hljs html">学生的个数：$&#123;stus?size&#125;// 输出学生的个数：2</code></pre><p>日期格式化</p><p>显示年月日: ${today?date}<br>显示时分秒:${today?time}<br>显示日期+时间:${today?datetime}<br>自定义格式化: ${today?string(“yyyy年MM月”)}</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu.birthday?date&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>// 输出2020-4-6<span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;stu.birthday?string(&quot;yyyy年MM月dd日&quot;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span>// 输出2020年04月06日</code></pre><p>内建函数c</p><p>如果不想显示为每三位分隔的数字，可以使用c函数将数字型转成字符串输出</p><pre><code class="hljs html">POINT数字型：$&#123;point&#125;// 输出POINT数字型：102,920,122POINT数字型：$&#123;point?c&#125;// 输出POINT数字型：102920122</code></pre><p>将json字符串转成对象</p><p>使用assign标签，assign的作用是定义一个变量</p><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">#assign</span> <span class="hljs-attr">text</span>=<span class="hljs-string">&quot;&#123;&#x27;bank&#x27;:&#x27;工商银行&#x27;,&#x27;account&#x27;:&#x27;10101920201920212&#x27;&#125;&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">#assign</span> <span class="hljs-attr">data</span>=<span class="hljs-string">text?eval</span> /&gt;</span>开户行:$&#123;data.bank&#125; 账号:$&#123;data.account&#125;// 输出开户行:工商银行 账号:10101920201920212</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> freemaker </tag>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从IT到DevOps实践（转载）</title>
      <link href="2020/04/01/it-devops-convert/"/>
      <url>2020/04/01/it-devops-convert/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="从-IT-到-DevOps-实践"><a href="#从-IT-到-DevOps-实践" class="headerlink" title="从 IT 到 DevOps 实践"></a>从 IT 到 DevOps 实践</h2><p>ps：该文拉取于<a href="https://zhuanlan.zhihu.com/p/106525719">知乎帖子</a>,仅供学习与参考。</p><p>从事过 IT 工作的人可能会对以下这段经历感到非常熟悉：您最初是一位技术支持，扮演 IT 桌面工程师的角色（IT 桌面工程师，能够为与计算机系统，软硬件相关的问题提供技术帮助和支持）。在这个职位上，您不断获得经验，可能会晋升为 2 级桌面工程师，并成为 IT 管理员。之后您将有足够的经验以系统管理员或系统工程师的身份开始在系统上工作。</p><p>你开始思考：“我应该更多地关注代码还是运维？”</p><p>如果您是要从事软件或 Web 开发的系统管理员，那么 DevOps 自然而然成为了下一步将要关注的理念。系统管理员和工程师的主要目标是使不同部门的员工可以共享信息并更有效地合作。DevOps 工程师在效率和优化的方面与这些角色非常相似，但是他们要做的是将软件开发团队与部署团队联系在一起。</p><p>许多人仍然不知道如何进入软件开发领域，同时觉得他们一直困在重启计算机和修复打印机的炼狱中，但是如果努力学习的话，仍然有一条光明的出路。</p><p><strong>这篇文章是写给谁的？</strong></p><p>首先，我们需要清楚两件事：</p><ol><li><p>这不是从 IT /运营转移到 DevOps 的唯一且最佳的方法，但这是曾经实践过并且有效的方法。您可能有不同的经历，并且过程可能会有所不同。</p></li><li><p>我们之前都知道：“ DevOps 不是工作，而是一种文化。” 当然如此。有人说DevOps 不是一项真正的工作，开发和运维团队应该携手合作。如果您的公司负担得起聘请 DevOps 工程师是非常有优势的。如果不能，可以试图将 DevOps 理念与您当前的团队结合起来。</p></li></ol><p>话虽如此，这篇文章实际上是为那些从事 IT 并希望更多地参与软件开发，Web 开发或者产出人员所写。</p><h3 id="DevOps-工具和技能"><a href="#DevOps-工具和技能" class="headerlink" title="DevOps 工具和技能"></a>DevOps 工具和技能</h3><p>以下是我关注的关键技能和技术，这些技能和技术使我走上了软件开发的道路。</p><h3 id="操作系统：Linux"><a href="#操作系统：Linux" class="headerlink" title="操作系统：Linux"></a>操作系统：Linux</h3><p>如果想要进入 DevOps 的领域，习惯 Linux 是非常必要的。即使不实践 DevOps，我们也应该使用Linux，因为 Linux 支持全球 90％ 以上的计算机和系统。</p><p>如果使用 Mac 作为日常驱动程序事情将会变得非常容易。 由于 Mac 是基于 Unix 的，因此许多（即使不是大多数）Linux 命令也可以 在Mac 上使用。 当我们进行 Mac 管理时，如果想把每日任务编写入脚本并自动化，或者将 SSH 加密到服务器和计算机中以执行支持，这是非常有用的。稍后我们会关注更多这个话题。</p><h3 id="Web-Stack：LAMP"><a href="#Web-Stack：LAMP" class="headerlink" title="Web Stack：LAMP"></a>Web Stack：LAMP</h3><p>虽然并非总是适用于每个 DevOps 角色，但学习 LAMP 堆栈有助于我们从操作系统级别了解 Web 应用程序的基本基础。 我们每个人每天都在使用应用程序，但是了解Web 应用程序的这些主要组件如何协同工作，有助于处理正在发生的事情及其时间和原因。</p><p>当然，还有其他堆栈，例如 LEMP（Linux，NGINX，MySQL，PHP / Python）和MEAN，但是我学习 LAMP 是因为它是最受欢迎的堆栈之一。 熟悉堆栈的基本底线是了解 Web 应用程序的不同部分如何工作。</p><h3 id="后端语言：Python"><a href="#后端语言：Python" class="headerlink" title="后端语言：Python"></a>后端语言：Python</h3><p>Python 非常适合脚本，Web 应用程序等。每当有人决定要参与 Web 或软件开发时，他们几乎总是花太多时间来决定应该专注于哪种语言。 虽然学习特定的语言对于特定的角色肯定有其好处，但是当我们刚开始学习如何开发应用程序或软件时，选择任何一种语言并坚持使用是最重要的部分。</p><p>话虽如此，我个人认为系统管理员和未来的 DevOps 工程师应该真正坚持使用Python。 由于人性化，它可能是最易于学习和使用的语言之一。目前有许多用Python 编写的安全工具和框架。 但实际上，语言选择并不是最关键的。 在学习 DevOps 的第一年，我已经使用过 Ruby，Python，Shell 甚至是 PHP。我们要做的就是选择一些工具并坚持实践。</p><h3 id="脚本：Bash"><a href="#脚本：Bash" class="headerlink" title="脚本：Bash"></a>脚本：Bash</h3><p>您应该习惯使用命令行界面。尽管 Python 很棒，但作为 Mac 的系统管理员，有一个显而易见的优势是 Mac 基于Unix 并具有终端。 我编写了脚本来帮助配置系统并自动执行重复的任务。例如，我写了一些脚本，可以创建用户，安装应用程序，并配置打印机设置。 通常，这些任务将花费几个小时，但是谁有如此多的时间呢？ 通过使用 Bash 脚本，我可以利用 Apple Remote Desktop 之类的工具一次配置五台甚至十台机器，从而将启动时间减少到数分钟而不是数小时。</p><h3 id="自动化：Ansible"><a href="#自动化：Ansible" class="headerlink" title="自动化：Ansible"></a>自动化：Ansible</h3><p>Ansible 是一个开源的 IT 自动化引擎，可以减免工作中的繁琐任务，同时能够显著提高 IT 环境的可伸缩性，一致性和可靠性。 我们可以学习 Ansible 的资源调配，配置管理以及应用程序测试和部署。</p><p>一旦开始编写脚本，例如用户入门和应用程序安装，我便开始将脚本与 Apple Remote Desktop（ARD）和 AutoDMG 等工具结合起来，以自动进行计算机镜像处理。 Ansible 可以将我的更多任务组合到一个我可以执行的 playbook 中，playbook 能够进行配置管理和多主机部署。</p><p>以下链接是 GitHub 存储库，其中包含一些出色的Mac sysadmin 的 playbook。</p><p><a href="https://link.zhihu.com/?target=https://github.com/geerlingguy/mac-dev-playbook">https://github.com/geerlingguy/mac-dev-playbook</a></p><h3 id="VIrtualBox-Vagrant"><a href="#VIrtualBox-Vagrant" class="headerlink" title="VIrtualBox: Vagrant"></a>VIrtualBox: Vagrant</h3><p>Vagrant 是用于在单个工作流程中构建和管理虚拟机环境的工具。 Vagrant 提供了易于配置，可复制且可移植的工作环境。列两个场景，你是否需要 Ubuntu 18.04 实例进行测试？ 登台服务器的 CentOS 实例如何？ Vagrant 提供了一个用于开发和测试基础结构管理脚本的一次性环境和一致的工作流程。</p><h3 id="持续集成和部署：Jenkins"><a href="#持续集成和部署：Jenkins" class="headerlink" title="持续集成和部署：Jenkins"></a>持续集成和部署：Jenkins</h3><p>持续集成（CI）和持续部署（CD）是 DevOps 最重要的部分之一，但也是掌握和理解最复杂的部分之一。 Jenkins 可能不是CI/CD的最佳工具，但它无疑是最受欢迎的并且是行业必备的工具之一。</p><p>作为一种自动化工具，Jenkins用于构建，测试和启动应用程序的部署，从而使开发人员可以更轻松地将更改和错误修复持续集成到软件中，从而消除了可怕的“推向生产然后祈祷”的固有思维。在 DevOps 的世界里，Jenkins 具有显而易见的重要地位，因此强烈建议您全面了解 Jenkins。</p><p>译者注：如果想要体验全流程服务，可以尝试一些一站式解决方案，例如 CODING DevOps</p><h3 id="云：AWS"><a href="#云：AWS" class="headerlink" title="云：AWS"></a>云：AWS</h3><p>在云基础架构和服务方面，Amazon Web Services（AWS）无疑是一个优秀的平台。 AWS 无需担心服务器配置和物理资产限制，从而帮助公司降低成本，缩短部署时间并增加运营规模。 如果想要尝试进行 DevOps 或软件开发，AWS 是一个不错的选择。AWS提供了数百种服务，但是重要的是要了解诸如 EC2，S3，RDS，Route53 和 Lambda等核心服务。</p><p>译者注: 这篇文章面向的中国受众可能在体验 AWS 时遇到一些问题，如服务不够本土化，备案不流畅等等。因此您可以自行尝试一些针对中国用户市场的产品。CODING DevOps 提供了高可用，安全可靠的本地化云服务，国内速度稳定流畅，让云上开发更简单。</p><p><strong>总结</strong></p><p>真正了解软件开发和 DevOps 来龙去脉的最佳方法是启动自己的项目。即使整天观看YouTube 教程并彻夜阅读经验帖子无疑是一种手段，但是在真正开始编写一些代码，配置服务器并推动部署之前，您所学到的东西都不会真正被吸收消化。</p><p>以下是对新入门者的一些学习建议：<br>从全新的 Ubuntu 安装开始，配置 LAMP 堆栈并部署自己的网站<br>安装和构建 Jenkins 服务器，或者使用可安装 Jenkins 插件的工具并练习推送代码以进行部署<br>创建一个免费的云服务器账户，然后开始处理EC2，S3存储桶和其他服务<br>开始构建脚本，实现部分日常任务自动化。</p><p>笔者在 IT 领域浸淫了五年，并且学到了很多与DevOps 相关的知识。这些探索与经验能够帮助更多人减少走弯路的机会。这篇文章就是在指导您如何在最短时间内最有效地去实践 DevOps 过程。</p>]]></content>
      
      
      
        <tags>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB环境搭建（Docker系）</title>
      <link href="2020/03/31/mongodb-docker-install/"/>
      <url>2020/03/31/mongodb-docker-install/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="MongoDB环境搭建（Docker系）"><a href="#MongoDB环境搭建（Docker系）" class="headerlink" title="MongoDB环境搭建（Docker系）"></a>MongoDB环境搭建（Docker系）</h2><h3 id="查看MongoDB可用版本"><a href="#查看MongoDB可用版本" class="headerlink" title="查看MongoDB可用版本"></a>查看MongoDB可用版本</h3><p><code>docker search mongo</code></p><pre><code class="hljs bash">$ docker search mongoNAME                                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDmongo                               MongoDB document databases provide high avai…   6710                [OK]                mongo-express                       Web-based MongoDB admin interface, written w…   654                 [OK]                tutum/mongodb                       MongoDB Docker image – listens <span class="hljs-keyword">in</span> port 27017…   230                                     [OK]bitnami/mongodb                     Bitnami MongoDB Docker Image                    111                                     [OK]mongoclient/mongoclient             Official docker image <span class="hljs-keyword">for</span> Mongoclient, featu…   80                                      [OK]mongooseim/mongooseim               Small docker image <span class="hljs-keyword">for</span> MongooseIM - robust a…   19                                      frodenas/mongodb                    A Docker Image <span class="hljs-keyword">for</span> MongoDB                      18                                      [OK]cvallance/mongo-k8s-sidecar         Kubernetes side car to setup and maintain a …   14                                      [OK]circleci/mongo                      CircleCI images <span class="hljs-keyword">for</span> MongoDB                     8                                       [OK]centos/mongodb-32-centos7           MongoDB NoSQL database server                   8                                       arm64v8/mongo                       MongoDB document databases provide high avai…   7                                       istepanov/mongodump                 Docker image with mongodump running as a cro…   6                                       [OK]centos/mongodb-36-centos7           MongoDB NoSQL database server                   5                                       webhippie/mongodb                   Docker images <span class="hljs-keyword">for</span> MongoDB                       5                                       [OK]eses/mongodb_exporter               mongodb exporter <span class="hljs-keyword">for</span> prometheus                 5                                       [OK]centos/mongodb-26-centos7           MongoDB NoSQL database server                   5                                       neowaylabs/mongodb-mms-agent        This Docker image with MongoDB Monitoring Ag…   3                                       [OK]centos/mongodb-34-centos7           MongoDB NoSQL database server                   3                                       openshift/mongodb-24-centos7        DEPRECATED: A Centos7 based MongoDB v2.4 ima…   1                                       ansibleplaybookbundle/mongodb-apb   An APB to deploy MongoDB.                       1                                       [OK]ekesken/mongo                       docker image <span class="hljs-keyword">for</span> mongo that is configurable …   1                                       [OK]andreasleicher/mongo-azure-backup   a docker container to backup a mongodb using…   1                                       [OK]phenompeople/mongodb                 MongoDB is an open-source, document databas…   0                                       [OK]targetprocess/mongodb_exporter      MongoDB exporter <span class="hljs-keyword">for</span> prometheus                 0                                       [OK]martel/mongo-replica-ctrl           A dockerized controller <span class="hljs-keyword">for</span> a Mongo db repli…   0                                       [OK]</code></pre><h3 id="拉取MongoDB"><a href="#拉取MongoDB" class="headerlink" title="拉取MongoDB"></a>拉取MongoDB</h3><p><code>docker pull mongo:latest</code></p><pre><code class="hljs bash">$ docker pull mongo:latestlatest: Pulling from library/mongo5bed26d33875: Pull complete f11b29a9c730: Pull complete 930bda195c84: Pull complete 78bf9a5ad49e: Pull complete 3d7fb3809884: Pull complete a7237292ff8a: Pull complete c936e28b5159: Pull complete 3fb56b127f30: Pull complete c54a0478af29: Pull complete ffc3a4dd1cdc: Pull complete 236ffdb10499: Pull complete c33efe03b109: Pull complete 1d3609ce2ac9: Pull complete Digest: sha256:1e33093260855e83baee0237e29947e243818c58a1d37b1022909e227f624d7aStatus: Downloaded newer image <span class="hljs-keyword">for</span> mongo:latestdocker.io/library/mongo:latest$ docker image lsREPOSITORY                              TAG                 IMAGE ID            CREATED             SIZEmongo                                   latest              c5e5843d9f5f        4 days ago          387MB</code></pre><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><p><code>docker run -itd --name mongo -p 27017:27017 mongo --auth</code> </p><p><strong>-p 27017:27017</strong> ：映射容器服务的 27017 端口到宿主机的 27017 端口。外部可以直接通过 宿主机 ip:27017 访问到 mongo 的服务。<br>**–auth**：需要密码才能访问容器服务。</p><p><strong><u>第一次运行不带 –auth 参数</u></strong></p><p><code>docker run -itd --name mongo -p 27017:27017 mongo</code></p><pre><code class="hljs bash">$ docker run -itd --name mongo -p 27017:27017 mongo --auth2d4bb82ced0e050e922e300db7ba4fa97afc37a10a0c21134465b261e8619792localhost:tmp zhuyangze$ docker container lsCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES2d4bb82ced0e        mongo               <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   46 seconds ago      Up 46 seconds       0.0.0.0:27017-&gt;27017/tcp            mongo</code></pre><h3 id="设置用户密码"><a href="#设置用户密码" class="headerlink" title="设置用户密码"></a>设置用户密码</h3><p><code>docker exec -it mongo mongo admin</code></p><p><code>db.createUser(&#123; user:&#39;admin&#39;,pwd:&#39;123456&#39;,roles:[ &#123; role:&#39;userAdminAnyDatabase&#39;, db: &#39;admin&#39;&#125;]&#125;);</code></p><p><code>db.auth(&#39;admin&#39;, &#39;123456&#39;)</code></p><p>需要创建一个帐号，该账号需要有grant权限，即：账号管理的授权权限。<br><strong>注意一点</strong>，<u><strong>帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)。</strong></u></p><pre><code class="hljs bash">$ docker <span class="hljs-built_in">exec</span> -it mongo mongo adminMongoDB shell version v4.2.5connecting to: mongodb://127.0.0.1:27017/?compressors=disabled&amp;gssapiServiceName=mongodbImplicit session: session &#123; <span class="hljs-string">&quot;id&quot;</span> : UUID(<span class="hljs-string">&quot;913745fe-904c-43ef-ad00-2e3caef28643&quot;</span>) &#125;MongoDB server version: 4.2.5Welcome to the MongoDB shell.For interactive <span class="hljs-built_in">help</span>, <span class="hljs-built_in">type</span> <span class="hljs-string">&quot;help&quot;</span>.For more comprehensive documentation, seehttp://docs.mongodb.org/Questions? Try the support grouphttp://groups.google.com/group/mongodb-userServer has startup warnings: 2020-03-31T11:16:39.887+0000 I  STORAGE  [initandlisten] 2020-03-31T11:16:39.887+0000 I  STORAGE  [initandlisten] ** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine2020-03-31T11:16:39.887+0000 I  STORAGE  [initandlisten] **          See http://dochub.mongodb.org/core/prodnotes-filesystem2020-03-31T11:16:40.436+0000 I  CONTROL  [initandlisten] 2020-03-31T11:16:40.436+0000 I  CONTROL  [initandlisten] ** WARNING: Access control is not enabled <span class="hljs-keyword">for</span> the database.2020-03-31T11:16:40.436+0000 I  CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.2020-03-31T11:16:40.436+0000 I  CONTROL  [initandlisten] ---Enable MongoDB<span class="hljs-string">&#x27;s free cloud-based monitoring service, which will then receive and display</span><span class="hljs-string">metrics about your deployment (disk utilization, CPU, operation statistics, etc).</span><span class="hljs-string"></span><span class="hljs-string">The monitoring data will be available on a MongoDB website with a unique URL accessible to you</span><span class="hljs-string">and anyone you share the URL with. MongoDB may use this information to make product</span><span class="hljs-string">improvements and to suggest MongoDB products and deployment options to you.</span><span class="hljs-string"></span><span class="hljs-string">To enable free monitoring, run the following command: db.enableFreeMonitoring()</span><span class="hljs-string">To permanently disable this reminder, run the following command: db.disableFreeMonitoring()</span><span class="hljs-string">---</span><span class="hljs-string"></span><span class="hljs-string">&gt;</span></code></pre><p>创建用户与密码</p><pre><code class="hljs bash">&gt; use adminswitched to db admin// 创建myadmin用户db.createUser(...      &#123;...        user:<span class="hljs-string">&quot;myadmin&quot;</span>,...        <span class="hljs-built_in">pwd</span>:<span class="hljs-string">&quot;secret&quot;</span>,...        roles:[&#123;role:<span class="hljs-string">&quot;root&quot;</span>,db:<span class="hljs-string">&quot;admin&quot;</span>&#125;]...      &#125;...   )Successfully added user: &#123;<span class="hljs-string">&quot;user&quot;</span> : <span class="hljs-string">&quot;myadmin&quot;</span>,<span class="hljs-string">&quot;roles&quot;</span> : [&#123;<span class="hljs-string">&quot;role&quot;</span> : <span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;db&quot;</span> : <span class="hljs-string">&quot;admin&quot;</span>&#125;]&#125;// 没有验证通过，查询会出错&gt; show users2020-03-31T14:20:29.326+0000 E  QUERY    [js] uncaught exception: Error: <span class="hljs-built_in">command</span> usersInfo requires authentication :_getErrorWithCode@src/mongo/shell/utils.js:25:13DB.prototype.getUsers@src/mongo/shell/db.js:1638:15shellHelper.show@src/mongo/shell/utils.js:883:9shellHelper@src/mongo/shell/utils.js:790:15@(shellhelp2):1:1// 验证用户&gt; db.auth(<span class="hljs-string">&#x27;myadmin&#x27;</span>, <span class="hljs-string">&#x27;secret&#x27;</span>)1&gt; show users&#123;<span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-string">&quot;admin.myadmin&quot;</span>,<span class="hljs-string">&quot;userId&quot;</span> : UUID(<span class="hljs-string">&quot;734e6d84-074b-4b67-85e3-450783d0a8ea&quot;</span>),<span class="hljs-string">&quot;user&quot;</span> : <span class="hljs-string">&quot;myadmin&quot;</span>,<span class="hljs-string">&quot;db&quot;</span> : <span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;roles&quot;</span> : [&#123;<span class="hljs-string">&quot;role&quot;</span> : <span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;db&quot;</span> : <span class="hljs-string">&quot;admin&quot;</span>&#125;],<span class="hljs-string">&quot;mechanisms&quot;</span> : [<span class="hljs-string">&quot;SCRAM-SHA-1&quot;</span>,<span class="hljs-string">&quot;SCRAM-SHA-256&quot;</span>]&#125;&gt; db.createRole(&#123;<span class="hljs-string">&quot;role&quot;</span> : <span class="hljs-string">&quot;sysadmin&quot;</span>,<span class="hljs-string">&quot;roles&quot;</span> : [ ],<span class="hljs-string">&quot;privileges&quot;</span> : [&#123;<span class="hljs-string">&quot;resource&quot;</span> : &#123;<span class="hljs-string">&quot;anyResource&quot;</span> : <span class="hljs-literal">true</span>&#125;,<span class="hljs-string">&quot;actions&quot;</span> : [<span class="hljs-string">&quot;anyAction&quot;</span>]&#125;]&#125;)// 结果&#123;<span class="hljs-string">&quot;role&quot;</span> : <span class="hljs-string">&quot;sysadmin&quot;</span>,<span class="hljs-string">&quot;roles&quot;</span> : [ ],<span class="hljs-string">&quot;privileges&quot;</span> : [&#123;<span class="hljs-string">&quot;resource&quot;</span> : &#123;<span class="hljs-string">&quot;anyResource&quot;</span> : <span class="hljs-literal">true</span>&#125;,<span class="hljs-string">&quot;actions&quot;</span> : [<span class="hljs-string">&quot;anyAction&quot;</span>]&#125;]&#125;// 创建数据库lc-test&gt; use lc-testswitched to db lc-test// 创建用户名与密码&gt; db.createUser(&#123;user:<span class="hljs-string">&#x27;sa&#x27;</span>, <span class="hljs-built_in">pwd</span>:<span class="hljs-string">&#x27;123456&#x27;</span>, roles:[&#123;role:<span class="hljs-string">&#x27;sysadmin&#x27;</span>,db:<span class="hljs-string">&#x27;admin&#x27;</span>&#125;]&#125;)Successfully added user: &#123;<span class="hljs-string">&quot;user&quot;</span> : <span class="hljs-string">&quot;sa&quot;</span>,<span class="hljs-string">&quot;roles&quot;</span> : [&#123;<span class="hljs-string">&quot;role&quot;</span> : <span class="hljs-string">&quot;sysadmin&quot;</span>,<span class="hljs-string">&quot;db&quot;</span> : <span class="hljs-string">&quot;admin&quot;</span>&#125;]&#125;&gt; <span class="hljs-built_in">exit</span>// 重新进入容器$ docker <span class="hljs-built_in">exec</span> -it mongo mongo saMongoDB shell version v4.2.5connecting to: mongodb://127.0.0.1:27017/sa?compressors=disabled&amp;gssapiServiceName=mongodbImplicit session: session &#123; <span class="hljs-string">&quot;id&quot;</span> : UUID(<span class="hljs-string">&quot;cc084b61-fa73-4118-a826-c7f77beb49bf&quot;</span>) &#125;MongoDB server version: 4.2.5// 切换数据库&gt; use lc-testswitched to db lc-test// 没有授权前，查询出错&gt; db.student.find()Error: error: &#123;<span class="hljs-string">&quot;ok&quot;</span> : 0,<span class="hljs-string">&quot;errmsg&quot;</span> : <span class="hljs-string">&quot;command find requires authentication&quot;</span>,<span class="hljs-string">&quot;code&quot;</span> : 13,<span class="hljs-string">&quot;codeName&quot;</span> : <span class="hljs-string">&quot;Unauthorized&quot;</span>&#125;// 用户授权&gt; db.auth(<span class="hljs-string">&quot;sa&quot;</span>, <span class="hljs-string">&quot;123456&quot;</span>)1// 查询，插入操作均可&gt; db.student.find()&gt; db.student.insert(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mrling&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;19&quot;</span>&#125;)WriteResult(&#123; <span class="hljs-string">&quot;nInserted&quot;</span> : 1 &#125;)</code></pre><p>停止容器并重启容器</p><pre><code class="hljs bash">$ docker container lsCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES2d4bb82ced0e        mongo               <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   4 minutes ago       Up 4 minutes        0.0.0.0:27017-&gt;27017/tcp            mongo$ docker container restart mongomongo$ docker container lsCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES2d4bb82ced0e        mongo               <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   4 minutes ago       Up 7 seconds        0.0.0.0:27017-&gt;27017/tcp            mongo</code></pre><h3 id="MongoDB的数据存储路径"><a href="#MongoDB的数据存储路径" class="headerlink" title="MongoDB的数据存储路径"></a>MongoDB的数据存储路径</h3><p><code>docker exec -it mongo bash</code></p><p><code>/data/db</code></p><pre><code class="hljs bash">$ docker <span class="hljs-built_in">exec</span> -it mongo bashroot@02cb330d07df:/<span class="hljs-comment"># cd /data/db/</span>root@02cb330d07df:/data/db<span class="hljs-comment"># ls</span>WiredTiger       WiredTiger.turtle  WiredTigerLAS.wt  collection-0--554143273899493200.wt  collection-4--554143273899493200.wt  diagnostic.data                 index-10--554143273899493200.wt  index-5--554143273899493200.wt  index-9--554143273899493200.wt  mongod.lock    storage.bsonWiredTiger.lock  WiredTiger.wt      _mdb_catalog.wt   collection-2--554143273899493200.wt  collection-8--554143273899493200.wt  index-1--554143273899493200.wt  index-3--554143273899493200.wt   index-6--554143273899493200.wt  journal                         sizeStorer.wt</code></pre><h3 id="安装MongoDB客户端"><a href="#安装MongoDB客户端" class="headerlink" title="安装MongoDB客户端"></a>安装MongoDB客户端</h3><p>**<u>Studio 3T</u>**下载</p><p><code>https://studio3t.com/download/</code></p><p>连接串：Docker ip地址</p><p><code>docker-machine ip</code></p><p><img src="/2020/03/31/mongodb-docker-install/1.png" alt="MongoDB-ip"></p><p>认证密码（sa：123456）</p><p><strong><u>接入的数据库要写对</u></strong></p><p><img src="/2020/03/31/mongodb-docker-install/2.png" alt="MongoDB-pwd"></p><p>测试连接</p><p><img src="/2020/03/31/mongodb-docker-install/3.png" alt="MongoDB-test"></p><p>连接后界面</p><p><img src="/2020/03/31/mongodb-docker-install/4.png" alt="client"></p><p>在Studio 3T脚本界面可以写MongoDB的相关脚本</p><p><img src="/2020/03/31/mongodb-docker-install/5.png" alt="MongoDB-script"></p><h3 id="MongoDB脚本"><a href="#MongoDB脚本" class="headerlink" title="MongoDB脚本"></a>MongoDB脚本</h3><pre><code class="hljs js"><span class="hljs-comment">// 使用admin数据库</span>use admin<span class="hljs-comment">// 创建student文档集合</span>db.createCollection(<span class="hljs-string">&quot;student&quot;</span>)<span class="hljs-comment">// 指定查询student文档集合</span>db.getCollection(<span class="hljs-string">&quot;student&quot;</span>)<span class="hljs-comment">// 替换插入文档集合</span>db.student.insert(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mrling&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;19&quot;</span>&#125;)<span class="hljs-comment">// 更新文档集合</span>db.student.update(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mrling&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mrlingchen&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;29&quot;</span>&#125;)<span class="hljs-comment">// 更新-设定</span>db.student.update(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mrlingchen&quot;</span>&#125;, &#123;<span class="hljs-attr">$set</span>: &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;mrling&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-string">&quot;39&quot;</span>&#125;&#125;, &#123;<span class="hljs-attr">multi</span>:<span class="hljs-literal">true</span>&#125;)<span class="hljs-comment">// 查询student文档集合</span>db.student.find()<span class="hljs-comment">// 条件查询</span>db.student.find(&#123;<span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;mrling&quot;</span>&#125;)<span class="hljs-comment">// 条件查询（输出结果指定，1，显示；0：不显示）</span>db.student.find(&#123;<span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;mrling&quot;</span>&#125;, &#123;<span class="hljs-attr">name</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">age</span> : <span class="hljs-number">1</span>, <span class="hljs-attr">_id</span> : <span class="hljs-number">0</span>&#125;)db.student.find(&#123;<span class="hljs-string">&quot;name&quot;</span> : <span class="hljs-string">&quot;mrling&quot;</span>&#125;, &#123;<span class="hljs-attr">age</span> : <span class="hljs-number">1</span>&#125;)</code></pre><p>用户信息</p><pre><code class="hljs js">db.createUser(&#123;<span class="hljs-attr">user</span>:<span class="hljs-string">&#x27;sa&#x27;</span>, <span class="hljs-attr">pwd</span>:<span class="hljs-string">&#x27;123456&#x27;</span>, <span class="hljs-attr">roles</span>:[&#123;<span class="hljs-attr">role</span>:<span class="hljs-string">&#x27;sysadmin&#x27;</span>,<span class="hljs-attr">db</span>:<span class="hljs-string">&#x27;admin&#x27;</span>&#125;]&#125;)</code></pre><p><img src="/2020/03/31/mongodb-docker-install/6.png" alt="MongDB-user"></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mongo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jira-Docker环境搭建</title>
      <link href="2020/03/29/jira-init/"/>
      <url>2020/03/29/jira-init/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Jira-Docker环境搭建"><a href="#Jira-Docker环境搭建" class="headerlink" title="Jira-Docker环境搭建"></a>Jira-Docker环境搭建</h2><h3 id="docker-mysql环境搭建"><a href="#docker-mysql环境搭建" class="headerlink" title="docker-mysql环境搭建"></a>docker-mysql环境搭建</h3><p>拉取mysql镜像</p><pre><code class="hljs bash">$ docker pull mysql:5.7</code></pre><p>启动mysql docker实例</p><pre><code class="hljs bash">$ docker run --name=atlassian-mysql -it -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root_password<span class="hljs-comment"># -d mysql:5.7</span></code></pre><p>连接mysql</p><pre><code class="hljs bash">$ docker <span class="hljs-built_in">exec</span> -it atlassian-mysql bash</code></pre><p>创建jira数据库，并添加jira用户</p><pre><code class="hljs bash">$ mysql -uroot -p// 输入密码// jira的mysql数据库，注意格式：utf8，utf8_bin$ create database jira default character <span class="hljs-built_in">set</span> utf8 collate utf8_bin;$ CREATE USER <span class="hljs-string">&#x27;jira&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="hljs-string">&#x27;jira&#x27;</span>;$ GRANT ALL ON *.* TO <span class="hljs-string">&#x27;jira&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> WITH GRANT OPTION;$ alter user <span class="hljs-string">&#x27;jira&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified with mysql_native_password by <span class="hljs-string">&#x27;jira&#x27;</span>;// 修改mysql事物隔离级别$ <span class="hljs-built_in">set</span> global transaction isolation level <span class="hljs-built_in">read</span> committed;$ <span class="hljs-built_in">set</span> session transaction isolation level <span class="hljs-built_in">read</span> committed;</code></pre><h3 id="Docker-jira环境搭建"><a href="#Docker-jira环境搭建" class="headerlink" title="Docker-jira环境搭建"></a>Docker-jira环境搭建</h3><h4 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写Dockerfile文件</h4><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> cptactionhank/atlassian-jira-software:<span class="hljs-number">7.12</span>.<span class="hljs-number">0</span><span class="hljs-keyword">USER</span> root<span class="hljs-comment"># 将代理破解包加入容器</span><span class="hljs-keyword">COPY</span><span class="bash"> <span class="hljs-string">&quot;atlassian-agent.jar&quot;</span> /opt/atlassian/jira/</span><span class="hljs-comment"># 设置启动加载代理包</span><span class="hljs-keyword">RUN</span><span class="bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;export CATALINA_OPTS=&quot;-javaagent:/opt/atlassian/jira/atlassian-agent.jar $&#123;CATALINA_OPTS&#125;&quot;&#x27;</span> &gt;&gt; /opt/atlassian/jira/bin/setenv.sh</span></code></pre><p>注意：atlassian-agent.jar与Dockerfile文件在同一个文件夹下</p><pre><code class="hljs bash">$ lsDockerfileatlassian-agent.jarmysql-connector-java-5.1.39-bin.jar</code></pre><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><pre><code class="hljs bash">$ docker build -t jira/jira:v7.12.0 .</code></pre><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><pre><code class="hljs bash">$ docker run -d -it -p 8180:8080 --privileged  -m 1800M jira/jira:v7.12.0$ docker container lsCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                               NAMES08adf58871f2        mysql:5.7           <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   About an hour ago   Up 47 minutes       0.0.0.0:3306-&gt;3306/tcp, 33060/tcp   atlassian-mysqlc19ec1a0fbc5        jira/jira:v7.12.0   <span class="hljs-string">&quot;/docker-entrypoint.…&quot;</span>   About an hour ago   Up 7 minutes        0.0.0.0:8180-&gt;8080/tcp              festive_wilbur</code></pre><h4 id="访问IP"><a href="#访问IP" class="headerlink" title="访问IP"></a>访问IP</h4><pre><code class="hljs bash">$ docker-machine ip192.168.99.100</code></pre><p><code>http://192.168.99.100:8180</code></p><p>mysql相关设置</p><p><img src="/2020/03/29/jira-init/1.png" alt="mysql-设置"></p><p>设置应用属性</p><p><img src="/2020/03/29/jira-init/2.png" alt="app-properties"></p><p>设置注册码:</p><p>atlassian-agent.jar包需要clone atlassian-agent-master项目，mvn package打包</p><h4 id="配置Agent"><a href="#配置Agent" class="headerlink" title="配置Agent"></a>配置Agent</h4><ol><li>将<code>atlassian-agent.jar</code>放在一个你不会随便删除的位置（你服务器上的所有Atlassian服务可共享同一个<code>atlassian-agent.jar</code>）。</li><li>设置环境变量’JAVA_OPTS’ （这其实是Java的环境变量，用来指定其启动java程序时附带的参数），把-javaagent参数附带上。具体可以这么做：<ul><li>你可以把：<code>export JAVA_OPTS=&quot;-javaagent:/path/to/atlassian-agent.jar $&#123;JAVA_OPTS&#125;&quot;</code>这样的命令放到<code>.bashrc</code>或<code>.bash_profile</code>这样的文件内。</li><li>你可以把：<code>export JAVA_OPTS=&quot;-javaagent:/path/to/atlassian-agent.jar $&#123;JAVA_OPTS&#125;&quot;</code>这样的命令放到服务安装所在<code>bin目录</code>下的<code>setenv.sh</code>或<code>setenv.bat（供windows使用）</code>中。</li><li>你还可以直接命令行执行：<code>JAVA_OPTS=&quot;-javaagent:/path/to/atlassian-agent.jar&quot; /path/to/start-confluence.sh</code>来启动你的服务。</li><li>或者你所知的其他修改环境变量的方法，但如果你机器上有无关的服务，则不建议修改全局<code>JAVA_OPTS</code>环境变量。</li><li>总之你想办法把<code>-javaagent</code>参数附带到要启动的java进程上。</li></ul></li></ol><pre><code class="hljs bash">// 设置环境变量(可以不做)$ vim .bash_profile<span class="hljs-built_in">export</span> JAVA_OPTS=<span class="hljs-string">&quot;-javaagent:/Users/xxxxusername/Documents/jira/jar/atlassian-agent.jar <span class="hljs-variable">$&#123;JAVA_OPTS&#125;</span>&quot;</span>$ <span class="hljs-built_in">source</span> .bash_profile$ java -jar atlassian-agent.jar -d -m lingchen1316@163.com -n lc-jira -p jira -o http://192.168.99.100 -s BXFC-5EKZ-STKW-1S3KYour license code(Don<span class="hljs-string">&#x27;t copy this line!!!): </span><span class="hljs-string"></span><span class="hljs-string">AAABqQ0ODAoPeJyNkluPmzAQhd/5FUh9NmtDcyGSpW2BSiiQVCXbVvvmOJPgihg0Nmmzv74QWHUvU</span><span class="hljs-string">...</span><span class="hljs-string">...</span><span class="hljs-string">O0evxRfUmxQmbG9DpRfgR3juzBWkvTsfwHwXim/MCwCFCQhoWdSEWZn9ZsLIgKyjjP7SU2QAhRvA</span><span class="hljs-string">1NiktqLvIZW8mzE/bvEGmik2A==X02kg</span></code></pre><p><img src="/2020/03/29/jira-init/3.png" alt="license-key"></p><p>以下步骤依次向下即可。</p><p>效果如下</p><p><img src="/2020/03/29/jira-init/4.png" alt="jira-init"></p><p>查看Application中的license expires</p><p><img src="/2020/03/29/jira-init/5.png" alt="license-expires"></p><p><u>ps: 内容摘取于网络，仅供学习与参考</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
            <tag> jira </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps实践笔记</title>
      <link href="2020/03/27/devops-practise-note/"/>
      <url>2020/03/27/devops-practise-note/</url>
      
        <content type="html"><![CDATA[<h2 id="DevOps实践笔记"><a href="#DevOps实践笔记" class="headerlink" title="DevOps实践笔记"></a>DevOps实践笔记</h2><p>Devops能够做到的事：需要对产品的质量负责。Devops能够提供一个平台或机制，让我能够从中找到所需的资源。<br>在企业里，使用自动化和持续交付来提高代码部署频率、降低代码上线间隔。</p><p>DevOps = 开发（developers）+ 运维（operations）<br>DevOps旨在将不同的社区，比如开发和运维社区，联合起来变成一个更有效率的整体。</p><h3 id="DevOps和持续交付"><a href="#DevOps和持续交付" class="headerlink" title="DevOps和持续交付"></a>DevOps和持续交付</h3><p>敏捷宣言里的经典摘录：</p><p>个体和互动 高于 流程和工具<br>工作的软件 高于 详尽的文档<br>客户合作 高于 合同谈判<br>响应变化 高于 遵循计划<br>也就是说，尽管右项有其价值，我们更看重左项的价值。</p><p>DevOps的另一个核心目标是自动化和持续交付。简单来说，自动化一切可重复的乏味的工作，把更多时间留给人与人之间的交流，这才能产生真实的价值。<br>DevOps工程师致力于让公司的流程更快、更有效，并且更可靠。只要有可能，就取代那些容易出错的重复性人力劳动。</p><h3 id="洞察全局"><a href="#洞察全局" class="headerlink" title="洞察全局"></a>洞察全局</h3><p>持续交付流水线</p><p><img src="/2020/03/27/devops-practise-note/1.png" alt="持续交付流水线"></p><h4 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h4><p>版本控制系统一般来说是开发环境的中心。</p><h4 id="构建服务器"><a href="#构建服务器" class="headerlink" title="构建服务器"></a>构建服务器</h4><p>最常用的模式是让构建服务器紧盯着版本控制系统的提交。当一个提交发生时，构建服务器就从版本控制系统上更新自己本地的源代码。随即，构建代码并运行测试来验证代码提交的质量。这个过程被称为<strong>持续集成</strong>。<br>Jenkins能做到开箱即用，给你简单而健壮的体验。安装也相当容易。</p><h4 id="工件库"><a href="#工件库" class="headerlink" title="工件库"></a>工件库</h4><p>当构建服务器确认了代码质量并将其编译成可交付物时，将这些编译好的二进制工件存放在一个库里是非常有用的。<br>这些二进制代码库是通过HTTP协议操作的文件系统。<br>亚马逊S3是一个可以用来存储二进制工件的键值数据库。</p><h4 id="包管理库"><a href="#包管理库" class="headerlink" title="包管理库"></a>包管理库</h4><p>包管理系统最大的优势是能很容易地安装和升级，并且自动安装依赖。<br>如Red Hat系统上的yum。</p><h4 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h4><p>一般来说，测试环境应该尽可能像生产环境一样。所以，它们也应该能用相同方法在生产环境上安装和配置。</p><h4 id="预发布-生产"><a href="#预发布-生产" class="headerlink" title="预发布/生产"></a>预发布/生产</h4><p>你把最新的发布安装到预发布服务器上，检查一切是否都正常，然后将老的生产环境切换过来，这样预发布环境就变成了新的生产环境—<u><strong>蓝绿发布策略</strong></u>。</p><h4 id="发布管理"><a href="#发布管理" class="headerlink" title="发布管理"></a>发布管理</h4><p>发布过程主要是自动化的。</p><ul><li>需要相当高程度的自动化测试才能更有信心实践自动化部署，而这通常很难做到。</li><li>业务和技术开发的节奏不一定相同。</li></ul><p>在发布过程中人工介入是必要的。</p><h3 id="DevOps如何影响架构"><a href="#DevOps如何影响架构" class="headerlink" title="DevOps如何影响架构"></a>DevOps如何影响架构</h3><p>DevOps和持续交付着眼于软件架构的两个非功能需求：</p><ul><li>需要频繁交付小的变更</li><li>需要对质量有大的信心</li></ul><h4 id="架构经验法则"><a href="#架构经验法则" class="headerlink" title="架构经验法则"></a>架构经验法则</h4><ul><li>关注点分离（应该分开考虑系统不同的方面）</li><li>内聚原则（内聚指的是软件模块的各部分之间相互关联的程度）</li><li>耦合（耦合指的是两个模块间相互依赖的程度）</li></ul><p>康威定律—设计软件的组织结构，等价于软件的组织架构。<br>拥抱DevOps和持续交付的企业里，REST的实现更加流行的一个原因。</p><h3 id="一切皆代码"><a href="#一切皆代码" class="headerlink" title="一切皆代码"></a>一切皆代码</h3><p>一切皆代码，而你需要一个地方来存储。这个地方就是企业里的源代码管理系统。<br>提供集中式代码库：</p><ul><li>可以使用软件即服务的解决方案，如GitHub、Bitbucket或者GitLab。性价比高。</li><li>可以使用云提供商。如AWS。</li></ul><h4 id="源代码控制的必要性"><a href="#源代码控制的必要性" class="headerlink" title="源代码控制的必要性"></a>源代码控制的必要性</h4><p>对于DevOps而言，确实几乎一切都可以用代码的形式来表达。</p><ul><li>构建的应用程序</li><li>部署应用程序的基础设施</li><li>产品文档</li></ul><p>Git是这个类别里最流行的工具。<br>Git是一个分布式版本管理系统（DVCS）。</p><h4 id="角色与代码"><a href="#角色与代码" class="headerlink" title="角色与代码"></a>角色与代码</h4><p>开发者靠源代码管理来生活和呼吸。<br>运维人员也喜欢通过代码、脚本或者其他产品的方式管理描述基础设施。</p><h4 id="选择一个客户端"><a href="#选择一个客户端" class="headerlink" title="选择一个客户端"></a>选择一个客户端</h4><p>大部分的开发环境都能很好地支持使用Git。<br>许多开发者用的是集成在开发环境里的客户端，或者Git的命令行客户端。当执行运维任务时，更倾向于使用Git命令行客户端，因为在远程ssh的时候很方便。</p><p>无论如何，使用GitHub或GitLab是一个学习探索Git的捷径。</p><p>GitLab和GitHub的功能强点：</p><ul><li>web界面</li><li>内置wiki提供文档存放</li><li>问题跟踪器</li><li>提交可视化</li><li>分支可视化</li><li>拉请求工作流</li></ul><h4 id="Gerrit"><a href="#Gerrit" class="headerlink" title="Gerrit"></a>Gerrit</h4><p>Gerrit是基于Git的代码审查工具。<br>Gerrit可以让你创建规则来允许开发者审查和批准其他开发者对代码库的变更。<br>更简单的方法是使用Docker来尝试Gerrit。<br>Gerrit允许对敏感的代码库进行细粒度的操作。变更可以在授权人审查之后入库。这是Gerrit最主要的优势。</p><h4 id="拉请求模型"><a href="#拉请求模型" class="headerlink" title="拉请求模型"></a>拉请求模型</h4><p>由于GitHub而变得流行起来的拉请求模型。<br>除非是代码库所有者，推送是不被允许的。不过其他开发者被允许fork代码库，然后做变更，提交一个拉请求。代码库所有者可以审查这个请求并决定是否把变更合并到主代码库里。</p><h4 id="GitLab"><a href="#GitLab" class="headerlink" title="GitLab"></a>GitLab</h4><p>基于Docker-compose来安装GitLab</p><pre><code class="hljs bash">$ mkdir gitlab$ <span class="hljs-built_in">pwd</span>/root/gitlab$ wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml$ docker-compose up</code></pre><p>命令docker-compose将会读取.yml文件并用默认的演示配置启动所有需要的服务。<br>查看控制台窗口的启动日志，会发现三个单独的应用程序被启动：</p><p>gitlab、postgresql1、gitlab redis1和gitlab gitlab1</p><p>文件docker-compose.yml在/srv/docker/gitlab创建了数据卷。</p><p>GitLab增加的主要价值能消除DevOps工作流程的瓶颈。</p><ul><li>用户ssh密钥的管理</li><li>新版本库的创建</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins-Pipeline学习</title>
      <link href="2020/03/27/jenkins-pipeline/"/>
      <url>2020/03/27/jenkins-pipeline/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Jenkins-Pipeline学习"><a href="#Jenkins-Pipeline学习" class="headerlink" title="Jenkins-Pipeline学习"></a>Jenkins-Pipeline学习</h2><p>Jenkins Pipeline（或简称为 “Pipeline”）是一套插件，将持续交付的实现和实施集成到 Jenkins 中。<br>持续交付 Pipeline 自动化的表达了这样一种流程：<strong>将基于版本控制管理的软件持续的交付到您的用户和消费者手中。</strong></p><p>Jenkins Pipeline 提供了一套可扩展的工具，<strong>用于将“简单到复杂”的交付流程实现为“持续交付即代码”。</strong>Jenkins Pipeline 的定义通常被写入到一个文本文件（称为 <code>Jenkinsfile</code> ）中，该文件可以被放入项目的源代码控制库中。</p><h3 id="执行多个步骤（step）"><a href="#执行多个步骤（step）" class="headerlink" title="执行多个步骤（step）"></a>执行多个步骤（step）</h3><p>Pipelines 由多个步骤（step）组成，允许你构建、测试和部署应用。 Jenkins Pipeline 允许您使用一种简单的方式组合多个步骤， 以帮助您实现多种类型的自动化构建过程。</p><p>可以把“步骤（step）”看作一个执行单一动作的单一的命令。 当一个步骤运行成功时继续运行下一个步骤。 当任何一个步骤执行失败时，Pipeline 的执行结果也为失败。</p><p>当所有的步骤都执行完成并且为成功时，Pipeline 的执行结果为成功。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    stages &#123;        stage(&#x27;Build&#x27;) &#123;            steps &#123;                sh &#x27;echo &quot;Hello World&quot;&#x27;                sh &#x27;&#x27;&#x27;                    echo &quot;Multiline shell steps works too&quot;                    ls -lah                &#x27;&#x27;&#x27;            &#125;        &#125;    &#125;&#125;</code></pre><p><img src="/2020/03/27/jenkins-pipeline/1.png" alt="pipelines-script"></p><p>阶段视图</p><p><img src="/2020/03/27/jenkins-pipeline/2.png" alt="pipeline-stage"></p><h3 id="超时、重试和更多"><a href="#超时、重试和更多" class="headerlink" title="超时、重试和更多"></a>超时、重试和更多</h3><p>Jenkins Pipeline 提供了很多的步骤（step），这些步骤可以相互组合嵌套，方便地解决像重复执行步骤直到成功（重试）和如果一个步骤执行花费的时间太长则退出（超时）等问题。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    stages &#123;        stage(&#x27;Deploy&#x27;) &#123;            steps &#123;                retry(3) &#123;                    sh &#x27;./flakey-deploy.sh&#x27;                &#125;                timeout(time: 3, unit: &#x27;MINUTES&#x27;) &#123;                    sh &#x27;./health-check.sh&#x27;                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><p>“Deploy”阶段（stage）重复执行 <code>flakey-deploy.sh</code> 脚本3次，然后等待 <code>health-check.sh</code> 脚本最长执行3分钟。 如果 <code>health-check.sh</code> 脚本在 3 分钟内没有完成，Pipeline 将会标记在“Deploy”阶段失败。<br><strong>内嵌类型</strong>的步骤，例如 <code>timeout</code> 和 <code>retry</code> 可以包含其他的步骤，包括 <code>timeout</code> 和 <code>retry</code> 。<br>我们也可以<strong>组合这些步骤</strong>。例如，如果我们想要重试部署任务 5 次，但是总共花费的时间不能超过 3 分钟。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    stages &#123;        stage(&#x27;Deploy&#x27;) &#123;            steps &#123;                timeout(time: 3, unit: &#x27;MINUTES&#x27;) &#123;                    retry(5) &#123;                        sh &#x27;./flakey-deploy.sh&#x27;                    &#125;                &#125;            &#125;        &#125;    &#125;&#125;</code></pre><h3 id="完成时动作"><a href="#完成时动作" class="headerlink" title="完成时动作"></a>完成时动作</h3><p>当 Pipeline 运行完成时，你可能需要做一些清理工作或者基于 Pipeline 的运行结果执行不同的操作， 这些操作可以放在 <code>post</code> 部分。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    stages &#123;        stage(&#x27;Test&#x27;) &#123;            steps &#123;                sh &#x27;echo &quot;Fail!&quot;; exit 1&#x27;            &#125;        &#125;    &#125;    post &#123;        always &#123;            echo &#x27;This will always run&#x27;        &#125;        success &#123;            echo &#x27;This will run only if successful&#x27;        &#125;        failure &#123;            echo &#x27;This will run only if failed&#x27;        &#125;        unstable &#123;            echo &#x27;This will run only if the run was marked as unstable&#x27;        &#125;        changed &#123;            echo &#x27;This will run only if the state of the Pipeline has changed&#x27;            echo &#x27;For example, if the Pipeline was previously failing but is now successful&#x27;        &#125;    &#125;&#125;<span class="hljs-comment">// 构建结果</span>This will always run[Pipeline] echoThis will run only if failed[Pipeline] &#125;[Pipeline] <span class="hljs-comment">// stage</span>[Pipeline] &#125;[Pipeline] <span class="hljs-comment">// node</span>[Pipeline] End of PipelineERROR: script returned exit code 1Finished: FAILURE</code></pre><h3 id="定义执行环境"><a href="#定义执行环境" class="headerlink" title="定义执行环境"></a>定义执行环境</h3><p><code>agent</code> 指令告诉Jenkins在哪里以及如何执行Pipeline或者Pipeline子集。<br>正如您所预料的，<strong>所有的Pipeline都需要 <code>agent</code> 指令。</strong></p><p>在执行引擎中，<code>agent</code> 指令会引起以下操作的执行：</p><ul><li>所有在块block中的步骤steps会被Jenkins保存在一个执行队列中。 一旦一个执行器 <a href="https://jenkins.io/zh/doc/pipeline/tour/agents/#../../book/glossary/#executor">executor</a> 是可以利用的，这些步骤将会开始执行。</li><li>一个工作空间 workspace 将会被分配， 工作空间中会包含来自远程仓库的文件和一些用于Pipeline的工作文件</li></ul><p>在Pipeline中可以使用这几种 <a href="https://jenkins.io/doc/book/pipeline/syntax#agent">定义代理的方式</a> 在本导读中，我们仅使用Docker容器的代理方式。</p><p>在Pipeline中可以很容易的运行 <a href="https://docs.docker.com/">Docker</a> 镜像和容器。 Pipeline可以定义命令或者应用运行需要的环境和工具， 不需要在执行代理中手动去配置各种各样的系统工具和依赖。 这种方式可以让你使用 <a href="http://hub.docker.com/">Docker容器工具包</a> 中的任何工具。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent &#123;        docker &#123; image &#x27;node:7-alpine&#x27; &#125;    &#125;    stages &#123;        stage(&#x27;Test&#x27;) &#123;            steps &#123;                sh &#x27;node --version&#x27;            &#125;        &#125;    &#125;&#125;</code></pre><h3 id="使用环境变量"><a href="#使用环境变量" class="headerlink" title="使用环境变量"></a>使用环境变量</h3><p>环境变量可以像下面的示例设置为全局的，也可以是阶段（stage）级别的。 如你所想，阶段（stage）级别的环境变量只能在定义变量的阶段（stage）使用。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    environment &#123;        DISABLE_AUTH = &#x27;true&#x27;        DB_ENGINE    = &#x27;sqlite&#x27;    &#125;    stages &#123;        stage(&#x27;Build&#x27;) &#123;            steps &#123;                sh &#x27;printenv&#x27;            &#125;        &#125;    &#125;&#125;</code></pre><p>这种在 <code>Jenkinsfile</code> 中定义环境变量的方法对于指令性的脚本定义非常有用方便， 比如 <code>Makefile</code> 文件，可以在 Pipeline 中配置构建或者测试的环境，然后在 Jenkins 中运行。</p><p>环境变量的另一个常见用途是<strong>设置或者覆盖构建或测试脚本中的凭证</strong>。 因为把凭证信息直接写入 <code>Jenkinsfile</code> 很显然是一个坏主意， Jenkins Pipeline 允许用户快速安全地访问在 <code>Jenkinsfile</code> 中预定义的凭证信息，并且无需知道它们的值。</p><h3 id="记录测试和构建结果"><a href="#记录测试和构建结果" class="headerlink" title="记录测试和构建结果"></a>记录测试和构建结果</h3><p>虽然测试是良好的持续交付过程中的关键部分，但大多数人并不希望筛选数千行控制台输出来查找有关失败测试的信息。 为了简化操作，只要<strong>您的测试运行时可以输出测试结果文件，Jenkins 就可以记录和汇总这些测试结果</strong>。 Jenkins 通常与 <code>junit</code> 步骤捆绑在一起，但如果您的测试运行结果无法输出 JUnit 样式的 XML 报告， 那么还有其他插件可以处理任何广泛使用的测试报告格式。</p><p>为了收集我们的测试结果，我们将使用 <code>post</code> 部分。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    stages &#123;        stage(&#x27;Test&#x27;) &#123;            steps &#123;                sh &#x27;./gradlew check&#x27;            &#125;        &#125;    &#125;    post &#123;        always &#123;            junit &#x27;build/reports/**/*.xml&#x27;        &#125;    &#125;&#125;</code></pre><p>这将会获得测试结果，Jenkins 会持续跟踪并计算测试的趋势和结果。 如果存在失败的测试用例，Pipeline 会被标记为 “UNSTABLE”，在网页上用黄色表示， 这不同于使用红色表示的 “FAILED” 失败状态。<br>当出现测试失败时，通常可以从 Jenkins 中获取构建结果报告进行本地分析和测试。 Jenkins 内置支持存储构建结果报告，在 Pipeline 执行期间生成记录文件。</p><h3 id="清理和通知"><a href="#清理和通知" class="headerlink" title="清理和通知"></a>清理和通知</h3><p>因为 <code>post</code> 部分保证在 Pipeline 结束的时候运行， 所以我们可以添加通知或者其他的步骤去完成清理、通知或者其他的 Pipeline 结束任务。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    stages &#123;        stage(&#x27;No-op&#x27;) &#123;            steps &#123;                sh &#x27;ls&#x27;            &#125;        &#125;    &#125;    post &#123;        always &#123;            echo &#x27;One way or another, I have finished&#x27;            deleteDir() /* clean up our workspace */        &#125;        success &#123;            echo &#x27;I succeeeded!&#x27;        &#125;        unstable &#123;            echo &#x27;I am unstable :/&#x27;        &#125;        failure &#123;            echo &#x27;I failed :(&#x27;        &#125;        changed &#123;            echo &#x27;Things were different before...&#x27;        &#125;    &#125;&#125;</code></pre><p><img src="/2020/03/27/jenkins-pipeline/3.png" alt="pipeline-post"></p><p>有很多方法可以发送通知， 下面是一些示例展示了如何通过电子邮件、Hipchat room 或者 Slack channel 发送 Pipeline 的相关信息。</p><pre><code class="hljs json">post &#123;    failure &#123;        mail to: &#x27;team@example.com&#x27;,             subject: &quot;Failed Pipeline: $&#123;currentBuild.fullDisplayName&#125;&quot;,             body: &quot;Something is wrong with $&#123;env.BUILD_URL&#125;&quot;    &#125;&#125;</code></pre><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>大多数最基本的持续交付 Pipeline 至少会有三个阶段：构建、测试和部署，这些阶段被定义在 <code>Jenkinsfile</code> 中。 这一小节我们将主要关注部署阶段，但应该指出稳定的构建和测试阶段是任何部署活动的重要前提。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    stages &#123;        stage(&#x27;Build&#x27;) &#123;            steps &#123;                echo &#x27;Building&#x27;            &#125;        &#125;        stage(&#x27;Test&#x27;) &#123;            steps &#123;                echo &#x27;Testing&#x27;            &#125;        &#125;        stage(&#x27;Deploy&#x27;) &#123;            steps &#123;                echo &#x27;Deploying&#x27;            &#125;        &#125;    &#125;&#125;<span class="hljs-comment">// 运行结果</span>[Pipeline] &#123;[Pipeline] stage[Pipeline] &#123; (Build)[Pipeline] echoBuilding[Pipeline] &#125;[Pipeline] <span class="hljs-comment">// stage</span>[Pipeline] stage[Pipeline] &#123; (Test)[Pipeline] echoTesting[Pipeline] &#125;[Pipeline] <span class="hljs-comment">// stage</span>[Pipeline] stage[Pipeline] &#123; (Deploy)[Pipeline] echoDeploying[Pipeline] &#125;[Pipeline] <span class="hljs-comment">// stage</span>[Pipeline] &#125;[Pipeline] <span class="hljs-comment">// node</span>[Pipeline] End of PipelineFinished: SUCCESS</code></pre><h3 id="阶段即为部署环境"><a href="#阶段即为部署环境" class="headerlink" title="阶段即为部署环境"></a>阶段即为部署环境</h3><p>一个常见的模式是扩展阶段的数量以获取额外的部署环境信息， 如 “staging” 或者 “production”，如下例所示。</p><pre><code class="hljs json">stage(&#x27;Deploy - Staging&#x27;) &#123;    steps &#123;        sh &#x27;./deploy staging&#x27;        sh &#x27;./run-smoke-tests&#x27;    &#125;&#125;stage(&#x27;Deploy - Production&#x27;) &#123;    steps &#123;        sh &#x27;./deploy production&#x27;    &#125;&#125;</code></pre><h3 id="人工确认"><a href="#人工确认" class="headerlink" title="人工确认"></a>人工确认</h3><p>通常在阶段之间，特别是不同环境阶段之间，您可能需要人工确认是否可以继续运行。 例如，判断应用程序是否在一个足够好的状态可以进入到生产环境阶段。 这可以使用 <code>input</code> 步骤完成。 在下面的例子中，“Sanity check” 阶段会等待人工确认，并且在没有人工确认的情况下不会继续执行。</p><pre><code class="hljs json"><span class="hljs-comment">// Jenkinsfile (Declarative Pipeline)</span>pipeline &#123;    agent any    stages &#123;        <span class="hljs-comment">/* &quot;Build&quot; and &quot;Test&quot; stages omitted */</span>        stage(&#x27;Deploy - Staging&#x27;) &#123;            steps &#123;                sh &#x27;./deploy staging&#x27;                sh &#x27;./run-smoke-tests&#x27;            &#125;        &#125;        stage(&#x27;Sanity check&#x27;) &#123;            steps &#123;                input &quot;Does the staging environment look ok?&quot;            &#125;        &#125;        stage(&#x27;Deploy - Production&#x27;) &#123;            steps &#123;                sh &#x27;./deploy production&#x27;            &#125;        &#125;    &#125;&#125;</code></pre><p>Jenkins与Docker整合</p><p>Jenkins主机上，需要安装Docker。</p><pre><code class="hljs bash">// 出错一Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?// 解决方案$ systemctl daemon-reload$ systemctl restart docker.service$ docker --versionDocker version 1.13.1, build cccb291/1.13.1</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> pipeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps-学习之打包</title>
      <link href="2020/03/27/devops-package/"/>
      <url>2020/03/27/devops-package/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="DevOps-学习之打包部署"><a href="#DevOps-学习之打包部署" class="headerlink" title="DevOps-学习之打包部署"></a>DevOps-学习之打包部署</h2><p>Docker 的受欢迎程度急剧提升巧妙地映射了微服务的兴起—一种将软件分解为许多单独组件的软件工程方法。<br>Docker 的优势</p><ul><li><p>进程隔离<br>Docker 不仅允许完全进程隔离，还允许完全依赖性隔离，在同一个操作系统上并排运行多个容器是完全可能和常见的，每个容器都可有自己的冲突的依赖库和包。</p></li><li><p>运行管理</p><p>通过 Docker，我们获得了一个统一的管理界面，允许我们启动，监控，集中日志，停止和重启许多不同类型的应用程序。这是一个巨大的胜利，并大大降低了运行生产系统的运维开销。</p></li></ul><p>Lambda 时代</p><p>开发人员，我只想编写代码并让其他人管运行的事，Docker，Kubernetes 和其他繁琐的东西都不是简单的东西——所以我真的需要学么？这就要具体问题具体分析了。</p><p>对于那些只想让其他人帮忙运行其代码的人来说，AWS Lambda（以及其他类似的解决方案）就是答案：<br>AWS Lambda 允许你在不配置或管理服务器的情况下运行代码。只需为你消耗的计算时间付费——当代码未运行时不收取任何费用。<br>如果你听说过“serverless”，这就是它！不再需要运行的服务器或要管理的容器，只需编写代码，将其打包成 zip 文件，上传到亚马逊并让他们处理那些烦人的问题。<br>此外，由于 Lambda 是瞬时的，没有什么可以破解的，所以 Lambda 在设计上也是非常安全。</p><p>这样看来像 Lambda 这类的 serverless 功能真的挺不错的，但是即使这样，也是有缺点的。<br>第一，就现阶段而言，<strong>Lambda 暂时不支持长时间的进程</strong>。<br>其次，<strong>Lambda 是功能即服务（Functions-as-a-Service）</strong>，这意味着你的应用必须完全分解为微服务的形式，并与其他复杂的 PaaS 服务（如 AWS Step Functions）协调。并非每个企业都处于或者能转变成这种水平的微服务架构。<br>第三，<strong>对 Lambda 进行故障排除是很困难的</strong>。作为云原生的应用，所有的 bug 修复都需要在亚马逊生态系统中修复，这通常挺烦人的且不直观。</p><h3 id="部署代码"><a href="#部署代码" class="headerlink" title="部署代码"></a>部署代码</h3><p>没有说“如何轻松地部署代码”，因为代码从开发环境到正确部署仍然是一个充满了错误和失败的痛苦过程。</p><p>原因很多，但在我看来，<strong>这主要归结为差异</strong>。具体而言，<strong>创建代码的环境与实际代码运行的环境之间存在差异。</strong><br>减少这些差异意味着你不仅可以在整体代码部署中实现最大的改进，还可以在代码部署后的运行时达到一定的优化。那么，我们如何减少或消除生产和非生产环境之间的差异呢？</p><p>如果你使用<strong>基础设施即为代码</strong>的方式而不是手动配置，那么差异这事儿你已经搞定得七七八八了。如果不是，请不要绝望 —— 你并不孤单。花一个下午，找出你所碰到的所有差异（培训、文化、人员、流程等），并逐一消除它们。</p><p>最重要的是，如果你仍在手动配置，那你可能很难去管理现代技术栈。因此你需要做的第一件事是确保涉及产品的所有内容都是由部署服务器构建的版本化软件包。假设上述事情你已经完成，我会告诉你<strong>部署代码的最佳方法是不部署代码。</strong></p><p>你的生产环境服务器（代码运行的地方）与你的开发环境服务器（编写代码的地方）不同。这就难怪在部署后会立即出现大量问题。<br>因此，你需要尽一切可能确保构建产物（而不是一小段代码）一直处在运行环境当中。换句话说，<strong>将代码一次性部署到开发环境，克隆运行代码的整个机器环境，然后将其复制到需要的任何位置。</strong>这被称为“不可变部署”，是一个非常强大的模式，可以避免你数小时部署后的头痛。当然，如果你运行容器，同样的想法也是适用的：在任何地方部署相同的容器即可。<br>“但是我的生产环境和开发环境就是不同的！”你可能会说。数据库用户名密码，连接字符串，S3 存储桶位置等等，这些都是不同的。解决这个问题的方法是<u>使用 12 因子应用配置原则</u>。<strong>所有配置都需要外部化并作为环境变量传递到服务器。</strong></p><p>如果我需要日志来解决问题呢？<strong>所以日志也应该外部化</strong>。理想情况下可以通过ElasticSearch / Logstash / Kibana（ELK）技术栈或商业软件（如 SumoLogic 或Datadog）将日志转储到其它地方。<br><strong>不要“修复”你的生产环境机器，而是修复你的开发环境并重新部署。</strong></p><h3 id="代码部署机制"><a href="#代码部署机制" class="headerlink" title="代码部署机制"></a>代码部署机制</h3><p>这就是 Jenkins 的用武之地，Jenkins 是最受欢迎的开源部署自动化服务器之一。</p><p>了解 Jenkins，特别是 Jenkinsfile 的结构，对就业前景会是一个巨大并且不容忽视的好处。当你学习 Jenkins 时，请确保你遵循较新的 Pipeline BlueOcean 技术路径，而不是更旧的“Jenkins jobs”。<br>参考阅读：<br><a href="https://jenkins.io/doc/book/pipeline/jenkinsfile/">Jenkinsfile</a><br><a href="https://jenkins.io/doc/book/blueocean/">Pipeline BlueOcean</a></p><h3 id="一切都是代码"><a href="#一切都是代码" class="headerlink" title="一切都是代码"></a>一切都是代码</h3><p>应用程序如何被部署、监控、配置等等——说到底最终都化作为存储在代码仓库里被正确版本化的代码片段。<br>我们的目标是<strong>为核心开发人员（编写功能代码的软件工程师）创建一个真正无摩擦的环境。</strong><br>例如，我应该能够编写我自己的微服务、添加我认为必要的测试、添加监控即代码的配置、在一些“env.yaml” 文件中指定我的参数、将它们全部存储在一个代码仓库中；通过 CI/CD 流水线自动触发构建、测试、部署（金丝雀发布或蓝绿发布），并在完成后给我发送电子邮件。事实上，这是 DevOps 工程师核心使命的本质。</p><h3 id="Jenkins-的替代品"><a href="#Jenkins-的替代品" class="headerlink" title="Jenkins 的替代品"></a>Jenkins 的替代品</h3><p>就像我之前说过的那样，Jenkins 已经被广大开发者使用很长一段时间了。现在还有其它的工具，在我看来更好，即使没有 Jenkins 那么为人所知。</p><ul><li>一个是 AWS 自己的 CodeDeploy 服务。它有局限性，但 CodeDeploy 背后的开发人员在过去一年做了很大的改进，如果你在用 AWS，建议你试一试。</li><li>另一个是 GitLab CI。如果你的研发组织运行在 GitLab 上，你可以考虑使用，因为它与 GitLab 的其它部分良好地集成在一起。</li><li>去年十月 GitHub 宣布了 Actions（目前仍处在公测中），用于 GitHub 用户的自动化工作流场景。</li></ul><p>我认为这里的工具并不是最重要的。重要的是要记住包括<u>代码部署流水线在内的所有内容都是版本化的软件部件，它首先得来自于开发环境，而不是生产环境。</u></p><p>如果你从 Jenkins 开始学习持续集成，请尝试将其设置为容器模式。<br>这并不是一件非常困难的事情，反而会是一个很不错的学习机会，你可以找到弹性的、容器化的 Jenkins 机器节点来部署容器化的 Jenkins。</p><p><u>ps: 该文摘取于知乎。仅供学习与参考！</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> devops </tag>
            
            <tag> package </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令学习</title>
      <link href="2020/03/26/git-learning/"/>
      <url>2020/03/26/git-learning/</url>
      
        <content type="html"><![CDATA[<h2 id="Git命令学习"><a href="#Git命令学习" class="headerlink" title="Git命令学习"></a>Git命令学习</h2><h3 id="Git-Commit"><a href="#Git-Commit" class="headerlink" title="Git Commit"></a>Git Commit</h3><p>Git 希望提交记录尽可能地轻量，因此在你每次进行提交时，它并不会盲目地复制整个目录。条件允许的情况下，它会将当前版本与仓库中的上一个版本进行对比，并把所有的差异打包到一起作为一个提交记录。<br>Git 还保存了提交的历史记录。这也是为什么大多数提交记录的上面都有父节点的原因 —— 我们会在图示中用箭头来表示这种关系。对于项目组的成员来说，维护提交历史对大家都有好处。<br>你可以把提交记录看作是项目的快照。提交记录非常轻量，可以快速地在这些提交记录之间切换！</p><p><code>git commit</code></p><h3 id="Git-Branch"><a href="#Git-Branch" class="headerlink" title="Git Branch"></a>Git Branch</h3><p>Git 的分支也非常轻量。它们只是简单地指向某个提交纪录。<br><u>早建分支！多用分支！</u><br>这是因为即使创建再多分的支也不会造成储存或内存上的开销，并且按逻辑分解工作到不同的分支要比维护那些特别臃肿的分支简单多了。<br>在将分支和提交记录结合起来后，我们会看到两者如何协作。现在只要记住使用分支其实就相当于在说：“我想基于这个提交以及它所有的父提交进行新的工作。”</p><p>创建一个到名为 <code>newImage</code> 的分支</p><pre><code class="hljs bash">$ git branch newImage$ git commit</code></pre><p>切换到新的分支上，这样修改就可以保存到新的分支里了</p><pre><code class="hljs bash">$ git checkout newImage$ git commit</code></pre><p>如果你想创建一个新的分支同时切换到新创建的分支的话，可以通过 <code>git checkout -b &lt;your-branch-name&gt;</code> 来实现。</p><h3 id="分支与合并"><a href="#分支与合并" class="headerlink" title="分支与合并"></a>分支与合并</h3><p>如何将两个分支合并到一起。就是说我们新建一个分支，在其上开发某个新功能，开发完成后再合并回主线。<br>第一种方法 —— <code>git merge</code>。在 Git 中合并两个分支时会产生一个特殊的提交记录，它有两个父节点。翻译成自然语言相当于：“我要把这两个父节点本身及它们所有的祖先都包含进来。”</p><p>操作：</p><ul><li>创建新分支 <code>bugFix</code></li><li>用 <code>git checkout bugFix</code> 命令切换到该分支</li><li>提交一次</li><li>用 <code>git checkout master</code> 切换回 <code>master</code></li><li>再提交一次</li><li>用 <code>git merge</code> 把 <code>bugFix</code> 合并到 <code>master</code></li></ul><pre><code class="hljs bash">$ git branch bugFix$ git checkout bugFix$ git commit$ git checkout master$ git commit$ git merge bugFix</code></pre><h3 id="Git-Rebase"><a href="#Git-Rebase" class="headerlink" title="Git Rebase"></a>Git Rebase</h3><p>第二种合并分支的方法是 <code>git rebase</code>。Rebase 实际上就是取出一系列的提交记录，“复制”它们，然后在另外一个地方逐个的放下去。<br>Rebase 的优势就是可以创造更线性的提交历史，这听上去有些难以理解。如果只允许使用 Rebase 的话，代码库的提交历史将会变得异常清晰。</p><p>操作：</p><ul><li>新建并切换到 <code>bugFix</code> 分支</li><li>提交一次</li><li>切换回 master 分支再提交一次</li><li>再次切换到 bugFix 分支，rebase 到 master 上</li></ul><pre><code class="hljs bash">$ git checkout -b bugFix$ git commit$ git checkout master$ git commit$ git checkout bugFix$ git rebase master</code></pre><h3 id="在提交树上移动"><a href="#在提交树上移动" class="headerlink" title="在提交树上移动"></a>在提交树上移动</h3><p>首先看一下 “HEAD”。 <strong>HEAD 是一个对当前检出记录的符号引用</strong> —— 也就是指向你正在其基础上进行工作的提交记录。HEAD 总是指向当前分支上最近一次提交记录。大多数修改提交树的 Git 命令都是从改变 HEAD 的指向开始的。<br>HEAD 通常情况下是指向分支名的（如 bugFix）。在你提交时，改变了 bugFix 的状态，这一变化通过 HEAD 变得可见。</p><p>分离的 HEAD 就是让其指向了某个具体的提交记录而不是分支名。</p><p>从 <code>bugFix</code> 分支中分离出 HEAD 并让其指向一个提交记录。通过哈希值指定提交记录。每个提交记录的哈希值显示在代表提交记录的圆圈中。</p><pre><code class="hljs bash">$ git checkout C4// C4提交树上的节点</code></pre><p><img src="/2020/03/26/git-learning/1.png" alt="git-head"></p><h3 id="相对引用"><a href="#相对引用" class="headerlink" title="相对引用"></a>相对引用</h3><p>通过指定提交记录哈希值的方式在 Git 中移动不太方便。在实际应用时，并没有像本程序中这么漂亮的可视化提交树供你参考，所以你就不得不用 <code>git log</code> 来查查看提交记录的哈希值。<br>并且哈希值在真实的 Git 世界中也会更长（基于 SHA-1，共 40 位）。例如前一关的介绍中的提交记录的哈希值可能是 <code>fed2da64c0efc5293610bdd892f82a58e8cbc5d8</code>。<br>比较令人欣慰的是，Git 对哈希的处理很智能。<strong>你只需要提供能够唯一标识提交记录的前几个字符即可</strong>。因此我可以仅输入<code>fed2</code> 而不是上面的一长串字符。</p><p>相对引用非常给力，这里我介绍两个简单的用法：</p><ul><li>使用 <code>^</code> 向上移动 1 个提交记录</li><li>使用 <code>~</code> 向上移动多个提交记录，如 <code>~3</code></li></ul><p>操作符 (^)，把这个符号加在引用名称的后面，表示让 Git 寻找指定提交记录的父提交。<br>所以 <code>master^</code> 相当于“<code>master</code> 的父节点”。<code>master^^</code> 是 <code>master</code> 的第二个父节点。</p><pre><code class="hljs bash">$ git checkout bugFix^</code></pre><p><img src="/2020/03/26/git-learning/2.png" alt="checkout-^"></p><h3 id="“-”操作符"><a href="#“-”操作符" class="headerlink" title="“~”操作符"></a>“~”操作符</h3><p>想在提交树中向上移动很多步的话，又引入了操作符 <code>~</code>。该操作符后面可以跟一个数字（可选，不跟数字时与 <code>^</code> 相同，向上移动一次），指定向上移动多少次。</p><p><strong>使用相对引用最多的就是移动分支</strong>。可以直接使用 <code>-f</code> 选项让分支指向另一个提交。例如:</p><pre><code class="hljs crmsh">git branch -f <span class="hljs-keyword">master</span> <span class="hljs-title">HEAD</span>~<span class="hljs-number">3</span></code></pre><p>上面的命令会将 master 分支强制指向 HEAD 的第 3 级父提交。</p><p>操作源显示：</p><p><img src="/2020/03/26/git-learning/3.png" alt="git-branch"></p><p>显示目标：</p><p><img src="/2020/03/26/git-learning/4.png" alt="git-branch"></p><pre><code class="hljs bash">$ git branch -f master C6$ git branch -f bugFix C0$ git checkout master~3</code></pre><h3 id="撤销变更"><a href="#撤销变更" class="headerlink" title="撤销变更"></a>撤销变更</h3><p>在 Git 里撤销变更的方法很多。和提交一样，撤销变更由底层部分（暂存区的独立文件或者片段）和上层部分（变更到底是通过哪种方式被撤销的）组成。我们这个应用主要关注的是后者。</p><p>主要有两种方法用来撤销变更 —— 一是 <code>git reset</code>，还有就是 <code>git revert</code>。接下来咱们逐个进行讲解。</p><p><code>git reset</code> 通过把分支记录回退几个提交记录来实现撤销改动。你可以将这想象成“改写历史”。<code>git reset</code> 向上移动分支，原来指向的提交记录就跟从来没有提交过一样。</p><p><code>git reset HEAD~1</code></p><p>虽然在你的本地分支中使用 <code>git reset</code> 很方便，但是这种“改写历史”的方法对大家一起<strong>使用的远程分支是无效的</strong>哦！</p><p><code>git revert HEAD</code>（推荐方式）<br>在我们要撤销的提交记录后面居然多了一个新提交。revert 之后就可以把你的更改推送到远程仓库与别人分享啦。</p><pre><code class="hljs bash">$ git reset HEAD~1$ git checkout pushed$ git revert HEAD</code></pre><h3 id="整理提交记录"><a href="#整理提交记录" class="headerlink" title="整理提交记录"></a>整理提交记录</h3><p>到现在我们已经学习了 Git 的基础知识 —— 提交、分支以及在提交树上移动。 这些概念涵盖了 Git 90% 的功能，同样也足够满足开发者的日常需求。</p><p>然而, <u>剩余的 10% 在处理复杂的工作流时(或者当你陷入困惑时）可能就显得尤为重要了</u>。接下来要讨论的这个话题是“整理提交记录” —— 开发人员有时会说“我想要把这个提交放到这里, 那个提交放到刚才那个提交的后面”, 而接下来就讲的就是它的实现方式，非常清晰、灵活，还很生动。</p><p>本系列的第一个命令是 <code>git cherry-pick</code>, 命令形式为:</p><p><code>git cherry-pick &lt;提交号&gt;...</code></p><p>如果你想将一些提交复制到当前所在的位置（<code>HEAD</code>）下面的话， Cherry-pick 是最直接的方式了。</p><p>如：我们想将 <code>side</code> 分支上的工作C2，C4复制到 <code>master</code> 分支。</p><p><code>git cherry-pick C2 C4</code></p><h3 id="交互式的-rebase"><a href="#交互式的-rebase" class="headerlink" title="交互式的 rebase"></a>交互式的 rebase</h3><p>当你知道你所需要的提交记录（<strong>并且</strong>还知道这些提交记录的哈希值）时, 用 cherry-pick 再好不过了 —— 没有比这更简单的方式了。<br>但是如果你不清楚你想要的提交记录的哈希值呢? 幸好 Git 帮你想到了这一点, 我们可以利用交互式的 rebase —— 如果你想从一系列的提交记录中找到想要的记录, 这就是最好的方法了。</p><p><u>交互式 rebase 指的是使用带参数 <code>--interactive</code> 的 rebase 命令, 简写为 <code>-i</code></u><br>如果你在命令后增加了这个选项, Git 会打开一个 UI 界面并列出将要被复制到目标分支的备选提交记录，它还会显示每个提交记录的哈希值和提交说明，提交说明有助于你理解这个提交进行了哪些更改。<br>在实际使用时，所谓的 UI 窗口一般会在文本编辑器 —— 如 Vim —— 中打开一个文件。<br>当 rebase UI界面打开时, 你能做3件事: </p><ul><li>调整提交记录的顺序（通过鼠标拖放来完成）</li><li>删除你不想要的提交（通过切换 <code>pick</code> 的状态来完成，关闭就意味着你不想要这个提交记录）</li><li>合并提交。简而言之，它允许你把多个提交记录合并成一个。</li></ul><p><code>git rebase -i HEAD~4</code></p><h3 id="本地栈式提交"><a href="#本地栈式提交" class="headerlink" title="本地栈式提交"></a>本地栈式提交</h3><p>来看一个在开发中经常会遇到的情况：我正在解决某个特别棘手的 Bug，为了便于调试而在代码中添加了一些调试命令并向控制台打印了一些信息。<br>这些调试和打印语句都在它们各自的提交记录里。最后我终于找到了造成这个 Bug 的根本原因，解决掉以后觉得沾沾自喜！</p><p>最后就差把 <code>bugFix</code> 分支里的工作合并回 <code>master</code> 分支了。你可以选择通过 fast-forward 快速合并到 <code>master</code> 分支上，但这样的话 <code>master</code> 分支就会包含我这些调试语句了。你肯定不想这样，应该还有更好的方式。</p><p>实际我们只要让 Git 复制解决问题的那一个提交记录就可以了。跟之前我们在“整理提交记录”中学到的一样，我们可以使用来达到目的。</p><ul><li><code>git rebase -i</code></li><li><code>git cherry-pick</code></li></ul><pre><code class="hljs bash">$ git checkout master$ git cherry-pick C4// 或者$ git rebase -i HEAD~3$ git branch -f master C4<span class="hljs-string">&#x27;</span></code></pre><h3 id="提交的技巧-1"><a href="#提交的技巧-1" class="headerlink" title="提交的技巧 #1"></a>提交的技巧 #1</h3><p>这种情况也是很常见的：你之前在 <code>newImage</code> 分支上进行了一次提交，然后又基于它创建了 <code>caption</code> 分支，然后又提交了一次。<br>此时你想对的某个以前的提交记录进行一些小小的调整。比如设计师想修改一下 <code>newImage</code> 中图片的分辨率，尽管那个提交记录并不是最新的了。</p><p>我们可以通过下面的方法来克服困难：</p><ul><li>先用 <code>git rebase -i</code> 将提交重新排序，然后把我们想要修改的提交记录挪到最前</li><li>然后用 <code>commit --amend</code> 来进行一些小修改</li><li>接着再用 <code>git rebase -i</code> 来将他们调回原来的顺序</li><li>最后我们把 master 移到修改的最前端（用你自己喜欢的方法），就大功告成啦！</li></ul><pre><code class="hljs bash">$ git rebase -i HEAD~2$ git commit --amend$ git rebase -i HEAD~2$ git branch -f master C3<span class="hljs-string">&#x27;&#x27;</span></code></pre><h3 id="提交的技巧-2"><a href="#提交的技巧-2" class="headerlink" title="提交的技巧 #2"></a>提交的技巧 #2</h3><p>正如你在上一关所见到的，我们可以使用 <code>rebase -i</code> 对提交记录进行重新排序。只要把我们想要的提交记录挪到最前端，我们就可以很轻松的用 <code>--amend</code> 修改它，然后把它们重新排成我们想要的顺序。<br>但这样做就唯一的问题就是要进行两次排序，而这有可能造成由 rebase 而导致的冲突。下面还是看看 <code>git cherry-pick</code>是怎么做的吧。</p><p>要在心里<strong>牢记 cherry-pick 可以将提交树上任何地方的提交记录取过来追加到 HEAD 上</strong>（只要不是 HEAD 上游的提交就没问题）。</p><pre><code class="hljs bash">$ git checkout master$ git cherry-pick C2$ git commit --amend$ git cherry-pick C3</code></pre><h3 id="Git-Tags"><a href="#Git-Tags" class="headerlink" title="Git Tags"></a>Git Tags</h3><p>相信通过前面课程的学习你已经发现了：分支很容易被人为移动，并且当有新的提交时，它也会移动。分支很容易被改变，大部分分支还只是临时的，并且还一直在变。<br>你可能会问了：有没有什么可以<em>永远</em>指向某个提交记录的标识呢，比如软件发布新的大版本，或者是修正一些重要的 Bug 或是增加了某些新特性，有没有比分支更好的可以永远指向这些提交的方法呢？</p><p>Git 的 tag 就是干这个用的啊，它们可以（在某种程度上 —— 因为标签可以被删除后重新在另外一个位置创建同名的标签）永久地将某个特定的提交命名为里程碑，然后就可以像分支一样引用了。<br>更难得的是，它们并不会随着新的提交而移动。你也不能检出到某个标签上面进行修改提交，它就像是提交树上的一个锚点，标识了某个特定的位置。</p><p>咱们先建立一个标签，指向提交记录 <code>C1</code>，表示这是我们 1.0 版本。</p><p><code>git tag v1 C1</code></p><pre><code class="hljs bash">$ git tag v0 C1$ git tag v1 C2$ git checkout C2</code></pre><h3 id="Git-Describe"><a href="#Git-Describe" class="headerlink" title="Git Describe"></a>Git Describe</h3><p>由于标签在代码库中起着“锚点”的作用，Git 还为此专门设计了一个命令用来<strong>描述</strong>离你最近的锚点（也就是标签），它就是 <code>git describe</code>！<br>Git Describe 能帮你在提交历史中移动了多次以后找到方向；<br>当你用 <code>git bisect</code>（一个查找产生 Bug 的提交记录的指令）找到某个提交记录时，或者是当你坐在你那刚刚度假回来的同事的电脑前时， 可能会用到这个命令。</p><p><code>git describe</code> 的语法是：</p><pre><code class="hljs bash">$ git describe &lt;ref&gt;</code></pre><p>`<ref>可以是任何能被 Git 识别成提交记录的引用，如果你没有指定的话，Git 会以你目前所检出的位置（HEAD）。</ref></p><p>它输出的结果是这样的：</p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">tag</span>&gt;</span>_<span class="hljs-tag">&lt;<span class="hljs-name">numCommits</span>&gt;</span>_g<span class="hljs-tag">&lt;<span class="hljs-name">hash</span>&gt;</span></code></pre><p><code>tag</code> 表示的是离 <code>ref</code> 最近的标签， <code>numCommits</code> 是表示这个 <code>ref</code> 与 <code>tag</code> 相差有多少个提交记录， <code>hash</code> 表示的是你所给定的 <code>ref</code> 所表示的提交记录哈希值的前几位。</p><p>当 <code>ref</code> 提交记录上有某个标签时，则只输出标签名称</p><h3 id="多分支-rebase"><a href="#多分支-rebase" class="headerlink" title="多分支 rebase"></a>多分支 rebase</h3><p>我们准备了很多分支！咱们把这些分支 rebase 到 master 上吧。<br>他们希望得到有序的提交历史，也就是我们最终的结果应该是 <code>C6&#39;</code> 在 <code>C7&#39;</code> 上面， <code>C5&#39;</code> 在 <code>C6&#39;</code> 上面，依此类推。<br>即使你搞砸了也没关系，用 <code>reset</code> 命令就可以重新开始了。记得看看我们提供的答案，看你能否使用更少的命令来完成任务！</p><pre><code class="hljs bash">$ git rebase side another$ git rebase bugFix another$ git rebase master another$ git branch -f master another</code></pre><h3 id="选择父提交记录"><a href="#选择父提交记录" class="headerlink" title="选择父提交记录"></a>选择父提交记录</h3><p>操作符 <code>^</code> 与 <code>~</code> 符一样，后面也可以跟一个数字。</p><p>但是该操作符后面的数字与 <code>~</code> 后面的不同，并不是用来指定向上返回几代，而是指定合并提交记录的某个父提交。还记得前面提到过的一个合并提交有两个父提交吧，所以遇到这样的节点时该选择哪条路径就不是很清晰了。</p><p><strong>Git 默认选择合并提交的“第一个”父提交，在操作符 <code>^</code> 后跟一个数字可以改变这一默认行为。</strong></p><p><code>git checkout master^</code></p><p><code>git checkout master^2</code>（回到了另外一个父提交上）</p><pre><code class="hljs bash">$ git checkout HEAD~$ git checkout HEAD^2$ git checkout HEAD~2// 等价于$ git checkout HEAD~^2~2// 这些操作符还支持链式操作$ git branch bugWork HEAD~^2~</code></pre><h3 id="纠缠不清的分支"><a href="#纠缠不清的分支" class="headerlink" title="纠缠不清的分支"></a>纠缠不清的分支</h3><p>现在我们的 <code>master</code> 分支是比 <code>one</code>、<code>two</code> 和 <code>three</code> 要多几个提交。出于某种原因，我们需要把 <code>master</code> 分支上最近的几次提交做不同的调整后，分别添加到各个的分支上。</p><p><code>one</code> 需要重新排序并删除 <code>C5</code>，<code>two</code> 仅需要重排排序，而 <code>three</code> 只需要提交一次。<br>慢慢来，你会找到答案的 —— 记得通关之后用 <code>show solution</code> 看看我们的答案哦。</p><pre><code class="hljs bash">$ git checkout one$ git cherry-pick C4 C3 C2$ git checkout two$ git cherry-pick C5 C4 C3 C2$ git branch -f three C2</code></pre><p><img src="/2020/03/26/git-learning/5.png" alt="git-branch"></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DevOps学习路线导向</title>
      <link href="2020/03/26/devops-start/"/>
      <url>2020/03/26/devops-start/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="DevOps学习路线导向"><a href="#DevOps学习路线导向" class="headerlink" title="DevOps学习路线导向"></a>DevOps学习路线导向</h2><h3 id="什么是-DevOps"><a href="#什么是-DevOps" class="headerlink" title="什么是 DevOps"></a>什么是 DevOps</h3><p><u>DevOps 是一种研发团队同甘共苦、患难与共交付软件的方式。</u><br>DevOps 尝试将开发和运维融进一个研发小团队里，由这个小团队共同承担开发、部署、努力创造软件收入的痛苦、责任（相反也可能是奖励）。<br>DevOps 工程师了解软件开发生命周期，并通过软件工程工具和流程解决传统运维挑战。<br>DevOps 最终意味着建立一个数字流水线：从开发者的笔记本中获取代码直至产生收益的全过程。</p><p><strong>世上没有初级的 DevOps 工程师。</strong><br>这意味着需要多年的经验，结合对工具的扎实理解，才能最终成为真正有效的高级 DevOps 从业者。遗憾的是，没有捷径可行。<br>最重要的是，不要忘记我们追求的目标—建立一个全自动的数字化流水线，将创意转化为创收。</p><h3 id="DevOps-学习路线图"><a href="#DevOps-学习路线图" class="headerlink" title="DevOps 学习路线图"></a>DevOps 学习路线图</h3><p>广度优先逐层遍历</p><p>广度优先、逐层遍历。先从基础开始，学习蓝色标记的技术（Linux | Python | 腾讯云/阿里云），然后如果时间允许或者就业市场有相应需求，追踪紫色的技术（Golang | AWS/谷歌云）。<br><img src="/2020/03/26/devops-start/1.png" alt="devops-learning-steps"></p><p>一旦你有一个合理的知识基础，就拥有了进入现实世界的技能组合。下面总共有 6 个蓝色列，建议每月学习一列。<br><img src="/2020/03/26/devops-start/2.png" alt="devops-custom"></p><p>本路线图的目标是快速获取新的技能和工具。<br>将这些工具结合在一起，端到端的流程自动化。你肯定不希望学习一堆工具后就停下来。工具变化很快，概念变化得相对缓慢，因此你要做的是使用工具作为进阶概念的学习辅助。</p><h3 id="DevOps-必备基础知识"><a href="#DevOps-必备基础知识" class="headerlink" title="DevOps 必备基础知识"></a>DevOps 必备基础知识</h3><p><u>主导的支柱：操作系统，编程语言，公有云。</u></p><ul><li>Linux<br>最好的方法是在家里安装 Linux（ Fedora 或 Ubuntu）并尽可能多地使用它。你会破坏操作系统上的东西，会被问题困住，然后你不得不解决所有问题，在这个过程中，你将学习到 Linux 相关的知识与技能。</li><li>Python<br>Python 是如今占主导地位的后端语言，易于上手，被广泛使用。Python 在 AI 以及机器学习领域使用非常普遍，所以如果你想要转换到另一个热门领域，那么你也会更加得心应手。</li><li>公有云<br>如果没有充分了解公有云的运作方式，就不可能成为一名经验丰富的 DevOps 专业人士。国内外云计算领域的主导者们提供了非常丰富的工具集。</li></ul><p>建议每天留出 20-30 分钟来学习 Python，Linux 和公有云。<br>图二是你必须学习的补充内容。总的来说，我估计每天要花费一个小时，<br>每周五次就足以让你在 6 个月或更短的时间内充分了解 DevOps 相关的内容。</p><h3 id="配置（Configure）"><a href="#配置（Configure）" class="headerlink" title="配置（Configure）"></a>配置（Configure）</h3><p>配置现状<br>云服务器这种高级服务，所有的基础环境设置都可以通过点击完成，当然有时候可能需要很多次点击。<br>但是，我们发现通过点击来实现配置环境也不是一个好主意，因为同样的问题仍然存在：</p><ul><li>还是到处是坑（human error 无法避免）</li><li>没法控制版本（点击没办法存储在 git 里）</li><li>重复性高（更多的机器 = 更多次的点击）</li><li>同时还没法测试（完全黑箱，不知道点击后会不会把所有东西弄乱）</li></ul><p>想象一下，当你需要给你的 dev 环境、QA 环境、Staging 环境和各个地区不同的生产环境做配置时所需的工作量，而且这项工作很快就会变得非常烦人和冗长。</p><p>新的解决方案就是 “<strong>基础设施即代码（Infrastructure as Code）</strong>“ 这也是本文关于 DevOps 中配置环节的重点。<br>基础设施即代码（Infrastructure as Code）的最佳实践即所有归为计算资源编排工具类的工作都必须<u><strong>使用代码来完成</strong></u>。这里的计算资源指的是为了让代码跑起来所需要的一切，比如：服务器、存储、网络、数据库等等。</p><p>这意味着我们部署基础设施的方式从各种点击变为：</p><ul><li>在 Terraform 中编写所需的基础架构状态</li><li>将其存储在我们的源代码版本控制中</li><li>通过正式的 Pull Request 流程征求反馈</li><li>测试一下配置</li><li>通过执行代码来配置所需的资源</li></ul><p><u>为什么选用 Terraform 而不是其他的呢？</u></p><ul><li>Terraform 现在很火，这代表着会有很多相关的工作机会</li><li>相对于其他的来说，它比较容易学习</li><li>它有跨平台支持</li></ul><p>事实上，Terraform + AWS 已经成为最火的技术需求之一了。</p><h3 id="不可变基础设施（Immutable-Infrastructure）"><a href="#不可变基础设施（Immutable-Infrastructure）" class="headerlink" title="不可变基础设施（Immutable Infrastructure）"></a>不可变基础设施（Immutable Infrastructure）</h3><p>不可变部署是指永不改变已部署的基础架构的做法。<br>换句话说，你的部署单元是 VM 或 Docker 容器，而不是一段代码。因此，你不会将代码部署到一组静态虚拟机，而是部署整个已经编译了代码的 VM。<br>不可变基础设施中所谓的不可变，即安装一次，不做修改，用过即扔。有点像一次性产品，或者可以称为即抛型。<br>不再需要给生产环境中的机器打补丁，直接部署一个新的已经打好补丁的机器就好了。<br>也没有<strong>必要区别生产环境和编译环境中 VM</strong>，所有的机器在不可变基础设施概念下都是一样的。<br>实际上，您可以安全地禁用对所有生产环境机器的所有 SSH 访问，因为已经没有任何事情可做 - 没有要更改的设置，没有要查看的日志。<br>如果能正确的使用，这是一个非常强大的模式，所以我强烈推荐！<br>不可变部署要求将配置与您的代码分开。</p><p><img src="/2020/03/26/devops-start/3.png" alt="12 Factor App"></p><p>只需要配置一台服务器并将其作为扩展组的一部分进行多次部署就可以实现大规模的自动化配置了。<br>除了容器之外，对于那些刚刚开始学习的人来说，<u><strong>使用 Terraform 配置 AWS 基础设施</strong>是一个教科书级的 DevOps 实践模式</u>，也是成长为 DevOps 工程师的必经之路。<br><strong>但是如果我需要查看日志来解决问题怎么办？</strong><br>好吧，您将不再登录虚拟机来查看日志，而是查看集中式日志管理的基础设施来解决问题。</p><h3 id="Terraform是什么"><a href="#Terraform是什么" class="headerlink" title="Terraform是什么"></a>Terraform是什么</h3><p><a href="https://www.terraform.io/">Terraform</a>是一款基于<a href="https://golang.org/doc/">Golang</a>的开源的资源编排工具，可以让用户管理配置任何基础架构，可以管理公有云和私有云服务的基础架构，也可以管理外部服务。</p><p>如果你不知道什么叫资源编排，那 AWS控制台、腾讯云控制台 你一定知道，你可以在这些控制台管理你的所有云资源，Terraform和控制台作用一样，本质都是管理你的云资源，只不过，控制台是界面化的操作，而Terraform是通过配置文件来实现。</p><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><p>所有与生产环境相关的内容都必须进行版本控制，能被追踪、审查并且保留历史记录。<br>强制“所有产品必须版本化”实际上也是迫使你以“自动化优先”的思维方式处理问题。</p><p>Git 的不同之处在于它包含了分布式源代码控制的概念。（不会将其他人锁定在集中式源代码存储库之外）<br>Git 不像旧的 SVN，它是一个分布式源代码控制系统，多个团队可以在一个共享的代码库上安全地工作。</p><p>Git教程</p><p>学习和练习的一系列教程是 <a href="https://www.atlassian.com/git/tutorials">Atlassian 的 Git 教程</a>、<a href="https://www.atlassian.com/git/tutorials/comparing-workflows">Git Workflows</a>。<br><a href="https://learngitbranching.js.org/">Learn Git Branching</a> 是一个互动教程。</p><p>无论如何，如果你不明白 git 的工作原理，你就不会在这个行业中走得太远！<br>对 git 功能分支如何工作缺乏了解，或者无法解释 Gitflow，这是 99% 有抱负的 DevOps 工程师候选人的失败之处。</p><p>Git必备技能：</p><ul><li>Fork 代码仓库</li><li>创建分支</li><li>合并来自上游或者后端的更改</li><li>创建 Pull 请求</li></ul><p><u>ps：该文章摘取于知乎，仅供学习与参考</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> devops </tag>
            
            <tag> git </tag>
            
            <tag> terraform </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安全</title>
      <link href="2020/03/25/docker-security/"/>
      <url>2020/03/25/docker-security/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker安全"><a href="#Docker安全" class="headerlink" title="Docker安全"></a>Docker安全</h2><p>安全本质就是分层！<br>Docker平台本身提供了一些非常棒的原生安全技术。这些技术使用起来都很简单。</p><ul><li><p>Docker Swarm模式</p></li><li><p>Docker内容信任</p></li><li><p>Docker安全扫描</p></li><li><p>Docker密钥</p><p><img src="/2020/03/25/docker-security/1.png" alt="docker-security"></p></li></ul><h3 id="Linux安全技术"><a href="#Linux安全技术" class="headerlink" title="Linux安全技术"></a>Linux安全技术</h3><ul><li><h4 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h4><p>内核命名空间属于容器中非常核心的一部分。该技术能够将操作系统（OS）进行拆分，使一个操作系统看起来像多个互相独立的操作系统一样。如用户可以在相同的OS上运行多个Web服务，每个端口都是443。</p><p><img src="/2020/03/25/docker-security/2.png" alt="namespace"></p><p>Linux Docker利用了下列内核命名空间</p><ul><li>进程ID（PID）</li><li>网络（NET）</li><li>文件系统/挂载（MNT）</li><li>进程内通信（IPC）</li><li>用户（USER）</li><li>UTS</li></ul><p><strong>Docker容器本质就是命名空间的有组织集合</strong></p></li><li><h4 id="Control-Group"><a href="#Control-Group" class="headerlink" title="Control Group"></a>Control Group</h4><p>命名空间用于隔离，那么控制组就是用于限额。<br>在Docker的世界中，容器之间是互相隔离的，但却共享OS资源，比如CPU、RAM以及硬盘I/O。</p></li><li><h4 id="Capability（系统权限）"><a href="#Capability（系统权限）" class="headerlink" title="Capability（系统权限）"></a>Capability（系统权限）</h4><p>Docker采用Capability机制来实现用户在以root身份运行容器的同时，还能移除非必须的root能力。</p></li><li><p>MAC（强制访问控制）</p></li><li><p>Seccomp（安全计算）</p></li></ul><h3 id="Docker平台安全技术"><a href="#Docker平台安全技术" class="headerlink" title="Docker平台安全技术"></a>Docker平台安全技术</h3><h4 id="Swarm模式"><a href="#Swarm模式" class="headerlink" title="Swarm模式"></a>Swarm模式</h4><p>Swarm模式是Docker未来的趋势。Swarm模式支持用户集群化管理多个Docker主机，同时还能通过声明式的方式部署应用。Swarm模式包括很多开箱即用的安全特性，同时还设置了合理的默认值。</p><ul><li>加密节点ID</li><li>基于TLS的认证机制</li><li>安全准入令牌</li><li>支持周期性证书自动更新的CA配置</li><li>加密集群存储（配置DB）</li><li>加密网络</li></ul><p><img src="/2020/03/25/docker-security/3.png" alt="docker-swarm-node"></p><p>向某个现存的Swarm中加入管理者和工作者所需的唯一凭证就是准入令牌。<br>管理者所需准入令牌<br>工作者所需准入令牌</p><p><code>docker swarm join-token manager</code><br><code>docker swarm join-token worker</code><br>在任意管理者节点上运行上面命令，可以获取管理者或者工作者准入令牌。</p><p><code>docker swarm join-token --rotate manager</code><br>取消了已经授权的管理者准入令牌，之后又发布了新的令牌</p><p>集群存储是Swarm的大脑，保存了集群配置和状态数据。<br>集群存储的日常维护由Docker自动完成。但是，在生产环境中，需要为集群存储提供完整的备份和恢复方案。</p><h4 id="Docker密钥"><a href="#Docker密钥" class="headerlink" title="Docker密钥"></a>Docker密钥</h4><p>Docker使用命令 <code>docker secret</code> 来管理密钥。</p><p>（1）密钥被创建，并且发送到Swarm。</p><p>（2）密钥存放在集群存储当中，并且是加密的（每个管理节点都能访问集群存储）。</p><p>（3）B服务被创建，并且使用了该密钥。</p><p>（4）密钥传输到B服务的任务节点（容器）的过程是加密的。</p><p>（5）B服务的容器将密钥解密并挂载到路径/run/secrets下。这是一个临时的内存文件系统。</p><p>（6）一旦容器（服务任务）完成，内存文件系统关闭，密钥也随之删除。</p><p>（7）A服务中的容器不能访问该密钥。</p><p><img src="/2020/03/25/docker-security/4.png" alt="secret"></p><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-Stack部署应用</title>
      <link href="2020/03/24/docker-stack/"/>
      <url>2020/03/24/docker-stack/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker-Stack部署应用"><a href="#Docker-Stack部署应用" class="headerlink" title="Docker-Stack部署应用"></a>Docker-Stack部署应用</h2><p>大规模场景下的多服务部署和管理是一件很难的事情。<br>Docker Stack通过提供期望状态、滚动升级、简单易用、扩缩容、健康检查等特性简化了应用的管理。<br>Stack能够在单个声明文件中定义复杂的多服务应用。<br>Stack还提供了简单的方式来部署应用并管理其完整的生命周期。<br>初始化部署 &gt; 健康检查 &gt; 扩容 &gt; 更新 &gt; 回滚，以及其他功能。<br>Compose文件中包含了构成应用所需的完整服务栈。此外还包含了卷、网络、安全以及应用所需的其他基础架构。</p><p>Stack是基于Docker Swarm之上来完成应用的部署。<br>Docker适用于开发与测试。Docker Stack则适用于大规模场景和生产环境。</p><p>使用Docker Stack部署应用<br>Stack一直是期望的Compose—完全集成到Docker中，并能够管理应用的整个生命周期。</p><p><img src="/2020/03/24/docker-stack/1.png" alt="stack-structure"></p><h3 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h3><p><img src="/2020/03/24/docker-stack/2.png" alt="AtSea"></p><p>docker-stack.yml文件通常常被称为Stack文件，在该文件中定义了应用及其依赖。<br>在该文件中，定义了4种顶级关键字</p><ul><li>version（Compose文件格式的版本号。为了应用于Stack,需要3.0或者更高的版本）</li><li>services（定义了组成当前应用的服务都有哪些）</li><li>networks（列出了必需的网络）</li><li>secrets（定义了应用用到的密钥）</li></ul><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.2&quot;</span><span class="hljs-attr">services:</span>  <span class="hljs-attr">reverse_proxy:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/atseasampleshopapp_reverse_proxy</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;443:443&quot;</span>    <span class="hljs-attr">secrets:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">revprox_cert</span>        <span class="hljs-attr">target:</span> <span class="hljs-string">revprox_cert</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">revprox_key</span>        <span class="hljs-attr">target:</span> <span class="hljs-string">revprox_key</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">front-tier</span>  <span class="hljs-attr">database:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/atsea_db</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-attr">POSTGRES_USER:</span> <span class="hljs-string">gordonuser</span>      <span class="hljs-attr">POSTGRES_DB_PASSWORD_FILE:</span> <span class="hljs-string">/run/secrets/postgres_password</span>      <span class="hljs-attr">POSTGRES_DB:</span> <span class="hljs-string">atsea</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-tier</span>    <span class="hljs-attr">secrets:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">postgres_password</span>    <span class="hljs-attr">deploy:</span>      <span class="hljs-attr">placement:</span>        <span class="hljs-attr">constraints:</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node.role == worker&#x27;</span>  <span class="hljs-attr">appserver:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/atsea_app</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">front-tier</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-tier</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">payment</span>    <span class="hljs-attr">deploy:</span>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span>      <span class="hljs-attr">update_config:</span>        <span class="hljs-attr">parallelism:</span> <span class="hljs-number">2</span>        <span class="hljs-attr">failure_action:</span> <span class="hljs-string">rollback</span>      <span class="hljs-attr">placement:</span>        <span class="hljs-attr">constraints:</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node.role == worker&#x27;</span>      <span class="hljs-attr">restart_policy:</span>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span>        <span class="hljs-attr">delay:</span> <span class="hljs-string">5s</span>        <span class="hljs-attr">max_attempts:</span> <span class="hljs-number">3</span>        <span class="hljs-attr">window:</span> <span class="hljs-string">120s</span>    <span class="hljs-attr">secrets:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">postgres_password</span>  <span class="hljs-attr">visualizer:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/visualizer:stable</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8001:8080&quot;</span>    <span class="hljs-attr">stop_grace_period:</span> <span class="hljs-string">1m30s</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span>    <span class="hljs-attr">deploy:</span>      <span class="hljs-attr">update_config:</span>        <span class="hljs-attr">failure_action:</span> <span class="hljs-string">rollback</span>      <span class="hljs-attr">placement:</span>        <span class="hljs-attr">constraints:</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node.role == manager&#x27;</span>  <span class="hljs-attr">payment_gateway:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/atseasampleshopapp_payment_gateway</span>    <span class="hljs-attr">secrets:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">staging_token</span>        <span class="hljs-attr">target:</span> <span class="hljs-string">payment_token</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">payment</span>    <span class="hljs-attr">deploy:</span>      <span class="hljs-attr">update_config:</span>        <span class="hljs-attr">failure_action:</span> <span class="hljs-string">rollback</span>      <span class="hljs-attr">placement:</span>        <span class="hljs-attr">constraints:</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node.role == worker&#x27;</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node.labels.pcidss == yes&#x27;</span><span class="hljs-attr">networks:</span>  <span class="hljs-attr">front-tier:</span>  <span class="hljs-attr">back-tier:</span>  <span class="hljs-attr">payment:</span>    <span class="hljs-attr">driver:</span> <span class="hljs-string">overlay</span>    <span class="hljs-attr">driver_opts:</span>      <span class="hljs-attr">encrypted:</span> <span class="hljs-string">&#x27;yes&#x27;</span><span class="hljs-attr">secrets:</span>  <span class="hljs-attr">postgres_password:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">staging_token:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">revprox_key:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">revprox_cert:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span></code></pre><p>Stack文件是应用的一个自描述文件，并且作为一个很好的工具弥合了开发和运维之间的隔阂。</p><h3 id="深入分析Stack文件"><a href="#深入分析Stack文件" class="headerlink" title="深入分析Stack文件"></a>深入分析Stack文件</h3><p>在Docker根据某个Stack文件部署应用的时候，首先会检查并创建networks。如果对应网络不存在，Docker则创建。</p><h4 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h4><pre><code class="hljs yaml"><span class="hljs-attr">networks:</span>  <span class="hljs-attr">front-tier:</span>  <span class="hljs-attr">back-tier:</span>  <span class="hljs-attr">payment:</span>    <span class="hljs-attr">driver:</span> <span class="hljs-string">overlay</span>    <span class="hljs-attr">driver_opts:</span>      <span class="hljs-attr">encrypted:</span> <span class="hljs-string">&#x27;yes&#x27;</span><span class="hljs-comment"># 默认情况下，网络都会采用overlay驱动</span><span class="hljs-comment"># payment网络需要数据层加密，通常额外开销会在10%的范围之内。</span><span class="hljs-comment"># 网络均会先于密钥和服务被创建。</span></code></pre><h4 id="密钥"><a href="#密钥" class="headerlink" title="密钥"></a>密钥</h4><pre><code class="hljs yaml"><span class="hljs-attr">secrets:</span>  <span class="hljs-attr">postgres_password:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">staging_token:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">revprox_key:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span>  <span class="hljs-attr">revprox_cert:</span>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><span class="hljs-comment"># external意味着在Stack部署之前，这些密钥必须存在。</span></code></pre><h4 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h4><p>Docker Stack和Docker Compose的一个区别是，Stack不支持构建。这意味着<u>在部署Stack之前，所有镜像必须提前构建完成。</u></p><pre><code class="hljs yaml"><span class="hljs-attr">services:</span>  <span class="hljs-attr">reverse_proxy:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/atseasampleshopapp_reverse_proxy</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;443:443&quot;</span>    <span class="hljs-attr">secrets:</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">revprox_cert</span>        <span class="hljs-attr">target:</span> <span class="hljs-string">revprox_cert</span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">revprox_key</span>        <span class="hljs-attr">target:</span> <span class="hljs-string">revprox_key</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">front-tier</span><span class="hljs-comment"># image关键字是服务对象中唯一的必填项。定义了将要用于构建的服务副本的Docker镜像。</span><span class="hljs-comment"># ports关键字定义了端口映射。默认情况下，所有端口映射都采用Ingress模式。（每个节点可访问）</span><span class="hljs-comment"># secrets关键字定义了两个密钥，密钥以普通文件的形式被挂载到服务副本当中。（Linux路径: /run/secrets）</span><span class="hljs-comment"># networks关键字确保服务所有副本都会连接到front-tier网络中。</span><span class="hljs-attr">database:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/atsea_db</span>    <span class="hljs-attr">environment:</span>      <span class="hljs-attr">POSTGRES_USER:</span> <span class="hljs-string">gordonuser</span>      <span class="hljs-attr">POSTGRES_DB_PASSWORD_FILE:</span> <span class="hljs-string">/run/secrets/postgres_password</span>      <span class="hljs-attr">POSTGRES_DB:</span> <span class="hljs-string">atsea</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-tier</span>    <span class="hljs-attr">secrets:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">postgres_password</span>    <span class="hljs-attr">deploy:</span>      <span class="hljs-attr">placement:</span>        <span class="hljs-attr">constraints:</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node.role == worker&#x27;</span><span class="hljs-comment"># environment关键字允许在服务副本中注入环境变量。</span><span class="hljs-comment"># deploy关键字定义了部署约束。只会运行在Swarm集群的worker节点中。</span><span class="hljs-attr">appserver:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/atsea_app</span>    <span class="hljs-attr">networks:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">front-tier</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-tier</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">payment</span>    <span class="hljs-attr">deploy:</span>      <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span>      <span class="hljs-attr">update_config:</span>        <span class="hljs-attr">parallelism:</span> <span class="hljs-number">2</span>        <span class="hljs-attr">failure_action:</span> <span class="hljs-string">rollback</span>      <span class="hljs-attr">placement:</span>        <span class="hljs-attr">constraints:</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node.role == worker&#x27;</span>      <span class="hljs-attr">restart_policy:</span>        <span class="hljs-attr">condition:</span> <span class="hljs-string">on-failure</span>        <span class="hljs-attr">delay:</span> <span class="hljs-string">5s</span>        <span class="hljs-attr">max_attempts:</span> <span class="hljs-number">3</span>        <span class="hljs-attr">window:</span> <span class="hljs-string">120s</span>    <span class="hljs-attr">secrets:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">postgres_password</span><span class="hljs-comment"># replicas设置期望服务的副本数量为2。默认是1。</span><span class="hljs-comment"># update_config.parallelism定义了Docker在服务滚动升级的时候具体如何操作。（每次更新两个副本）</span><span class="hljs-comment"># update_config.failure_action在升级失败后自动回滚。（默认操作是pause）</span><span class="hljs-comment"># deploy.restart_policy定义了Swarm针对容器异常退出的重启策略。（若某个副本以非0返回值退出，会立即重启当前副本。重启最多重试3次，每次都会等待至多120s来检测是否启动成功，每次重启的间隔是5s）</span><span class="hljs-attr">visualizer:</span>    <span class="hljs-attr">image:</span> <span class="hljs-string">dockersamples/visualizer:stable</span>    <span class="hljs-attr">ports:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8001:8080&quot;</span>    <span class="hljs-attr">stop_grace_period:</span> <span class="hljs-string">1m30s</span>    <span class="hljs-attr">volumes:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span>    <span class="hljs-attr">deploy:</span>      <span class="hljs-attr">update_config:</span>        <span class="hljs-attr">failure_action:</span> <span class="hljs-string">rollback</span>      <span class="hljs-attr">placement:</span>        <span class="hljs-attr">constraints:</span>          <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;node.role == manager&#x27;</span><span class="hljs-comment"># 挂载了一个指定卷，并且定义了容器的优雅停止方式。（stop_grace_period）</span><span class="hljs-comment"># volumes关键字用于挂载提前创建的卷或者主机目录到某个服务副本当中。</span></code></pre><h3 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h3><p>在部署应用之前，前置处理</p><ul><li>Swarm模式 （应用将采用Docker Stack部署，而Stack依赖于Swarm模式）</li><li>标签 （某个Swarm worker节点需要自定义标签）</li><li>密钥 （应用所需的密钥需要在部署前创建完成）</li></ul><p><img src="/2020/03/24/docker-stack/3.png" alt="部署环境"></p><h4 id="创建新的Swarm"><a href="#创建新的Swarm" class="headerlink" title="创建新的Swarm"></a>创建新的Swarm</h4><p>一个管理节点和两个工作节点构成</p><p><code>docker swarm init</code></p><p><code>docker swarm join</code></p><p><code>docker node ls</code></p><pre><code class="hljs bash">$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONw75fjsgwvw74bsux8q7dqgeg4     ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Ready               Active                                  18.09.9-cefcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg *   ip-172-xxx-xxx-90                                    Ready               Active              Leader              18.09.9-ce</code></pre><h4 id="在Swarm管理节点上添加标签pcidss"><a href="#在Swarm管理节点上添加标签pcidss" class="headerlink" title="在Swarm管理节点上添加标签pcidss"></a>在Swarm管理节点上添加标签pcidss</h4><p><code>docker node update --label-add pcidss=yes ip-172-xxx-xxx-57.ap-northeast-1.compute.internal</code></p><pre><code class="hljs bash">$ docker node update --label-add pcidss=yes ip-172-xxx-xxx-57.ap-northeast-1.compute.internalip-172-xxx-xxx-57.ap-northeast-1.compute.internal// 查看节点标签$ docker node inspect ip-172-xxx-xxx-57.ap-northeast-1.compute.internal[    &#123;        <span class="hljs-string">&quot;ID&quot;</span>: <span class="hljs-string">&quot;fcjl1u2ogpw3yxsg0l47i7pbf&quot;</span>,        <span class="hljs-string">&quot;Version&quot;</span>: &#123;            <span class="hljs-string">&quot;Index&quot;</span>: 419        &#125;,        <span class="hljs-string">&quot;CreatedAt&quot;</span>: <span class="hljs-string">&quot;2020-03-20T06:46:46.680403232Z&quot;</span>,        <span class="hljs-string">&quot;UpdatedAt&quot;</span>: <span class="hljs-string">&quot;2020-03-24T13:54:36.991693666Z&quot;</span>,        <span class="hljs-string">&quot;Spec&quot;</span>: &#123;            <span class="hljs-string">&quot;Labels&quot;</span>: &#123;                <span class="hljs-string">&quot;pcidss&quot;</span>: <span class="hljs-string">&quot;yes&quot;</span>            &#125;,            <span class="hljs-string">&quot;Role&quot;</span>: <span class="hljs-string">&quot;worker&quot;</span>,            <span class="hljs-string">&quot;Availability&quot;</span>: <span class="hljs-string">&quot;active&quot;</span>        &#125;,...</code></pre><h4 id="在Swarm管理节点上创建新的键值对"><a href="#在Swarm管理节点上创建新的键值对" class="headerlink" title="在Swarm管理节点上创建新的键值对"></a>在Swarm管理节点上创建新的键值对</h4><p><code>openssl req -newkey rsa:4096 -nodes -sha256 -keyout domain.key -x509 -days 365 -out domain.crt</code></p><p><code>docker secret create revprox_cert domain.crt</code></p><p><code>docker secret create revprox_key domain.key</code></p><p><code>docker secret create postgres_password domain.key</code></p><p><code>echo staging | docker secret create staging_token -</code></p><pre><code class="hljs bash">$ openssl req -newkey rsa:4096 -nodes -sha256 -keyout domain.key -x509 -days 365 -out domain.crtGenerating a 4096 bit RSA private key..................................................................................................................................................................................................................++.............................................................++writing new private key to <span class="hljs-string">&#x27;domain.key&#x27;</span>-----You are about to be asked to enter information that will be incorporatedinto your certificate request.What you are about to enter is what is called a Distinguished Name or a DN.There are quite a few fields but you can leave some blankFor some fields there will be a default value,If you enter <span class="hljs-string">&#x27;.&#x27;</span>, the field will be left blank.-----Country Name (2 letter code) [XX]:CNState or Province Name (full name) []:bjLocality Name (eg, city) [Default City]:bjOrganization Name (eg, company) [Default Company Ltd]:.Organizational Unit Name (eg, section) []:,^HCommon Name (eg, your name or your server<span class="hljs-string">&#x27;s hostname) []:ling</span><span class="hljs-string">Email Address []:ling@^H</span><span class="hljs-string"></span><span class="hljs-string">$ docker secret create revprox_cert domain.crt</span><span class="hljs-string">wn30cqrf6f8wspe5p2td061s4</span><span class="hljs-string"></span><span class="hljs-string">$ docker secret create revprox_key domain.key</span><span class="hljs-string">x1d5pp4isgxgesytt885qgzum</span><span class="hljs-string"></span><span class="hljs-string">$ docker secret create postgres_password domain.key</span><span class="hljs-string">j4tc6tm4c9sccq2n7ji34uw54</span><span class="hljs-string"></span><span class="hljs-string">// 创建 stage_token 密钥</span><span class="hljs-string">$ echo staging | docker secret create staging_token -</span><span class="hljs-string">ij02s4a3rrbtnwd2hsbfi8as5</span></code></pre><p>列出所有密钥</p><p><code>docker secret ls</code></p><pre><code class="hljs bash">$ docker secret lsID                          NAME                DRIVER              CREATED             UPDATEDj4tc6tm4c9sccq2n7ji34uw54   postgres_password                       15 minutes ago      15 minutes agown30cqrf6f8wspe5p2td061s4   revprox_cert                            16 minutes ago      16 minutes agox1d5pp4isgxgesytt885qgzum   revprox_key                             15 minutes ago      15 minutes agoij02s4a3rrbtnwd2hsbfi8as5   staging_token                           7 minutes ago       7 minutes ago</code></pre><h4 id="部署应用-1"><a href="#部署应用-1" class="headerlink" title="部署应用"></a>部署应用</h4><p><code>docker stack deploy -c docker-stack.yml seastack</code></p><pre><code class="hljs bash">$ docker stack deploy -c docker-stack.yml seastackCreating network seastack_back-tierCreating network seastack_paymentCreating network seastack_front-tierCreating network seastack_defaultCreating service seastack_appserverCreating service seastack_visualizerCreating service seastack_payment_gatewayCreating service seastack_reverse_proxyCreating service seastack_database// 查看网络$ docker network lsNETWORK ID          NAME                  DRIVER              SCOPEhvg1z4ixwsmx        seastack_back-tier    overlay             swarmyihnzx16dbpi        seastack_default      overlay             swarmuxha9rcn1pzf        seastack_front-tier   overlay             swarmcq0hd66xn345        seastack_payment      overlay             swarm// 查看服务$ docker service lsID                  NAME                       MODE                REPLICAS            IMAGE                                                     PORTSoxzijg2tb5og        seastack_appserver         replicated          2/2                 dockersamples/atsea_app:latest                            mzp0p6tdfzkv        seastack_database          replicated          1/1                 dockersamples/atsea_db:latest                             6c3af1m0boeg        seastack_payment_gateway   replicated          1/1                 dockersamples/atseasampleshopapp_payment_gateway:latest   sxqxwy090zz6        seastack_reverse_proxy     replicated          1/1                 dockersamples/atseasampleshopapp_reverse_proxy:latest     *:80-&gt;80/tcp, *:443-&gt;443/tcpnwfjdrncsjcc        seastack_visualizer        replicated          1/1                 dockersamples/visualizer:stable                           *:8001-&gt;8080/tcp</code></pre><p>网络是先于服务创建的。这是因为服务依赖于网络，所以网络需要在服务启动前创建。</p><p>Docker将Stack名称附加到由他创建的任何资源名称前作为前缀。<strong>Stack名称_<resource></resource></strong></p><p>列出Stack信息，包含多少个服务。</p><p><code>docker stack ls</code></p><pre><code class="hljs bash">$ docker stack lsNAME                SERVICES            ORCHESTRATORseastack            5                   Swarm</code></pre><p>针对某个指定的Stack查看详细信息</p><p><code>docker stack ps seastack</code></p><pre><code class="hljs bash">$ docker stack ps seastackID                  NAME                         IMAGE                                                     NODE                                               DESIRED STATE       CURRENT STATE                ERROR                       PORTSljf3wkqiydgm        seastack_appserver.1         dockersamples/atsea_app:latest                            ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 42 seconds ago                                   y2l4p9vdv3kd        seastack_database.1          dockersamples/atsea_db:latest                             ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 35 seconds ago                                   9hnaggyf0u25        seastack_reverse_proxy.1     dockersamples/atseasampleshopapp_reverse_proxy:latest     ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 54 seconds ago                                   gqanvork109y        seastack_payment_gateway.1   dockersamples/atseasampleshopapp_payment_gateway:latest   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 58 seconds ago                                   qmslp63e8a59        seastack_visualizer.1        dockersamples/visualizer:stable                           ip-172-xxx-xxx-90                                    Running             Running about a minute ago                               ksdh2ky0fulw        seastack_appserver.1         dockersamples/atsea_app:latest                            ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Shutdown            Failed 49 seconds ago        <span class="hljs-string">&quot;task: non-zero exit (1)&quot;</span>   gef9xv7ek8xe        seastack_appserver.2         dockersamples/atsea_app:latest                            ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 41 seconds ago                                   k6r1cq1ibf33         \_ seastack_appserver.2     dockersamples/atsea_app:latest                            ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Shutdown            Failed 49 seconds ago        <span class="hljs-string">&quot;task: non-zero exit (1)&quot;</span></code></pre><p>查看某个服务的具体信息</p><p><code>docker service logs seastack_reverse_proxy</code></p><pre><code class="hljs bash">$ docker service logs seastack_reverse_proxyseastack_reverse_proxy.1.9hnaggyf0u25@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    | 2020/03/24 14:44:50 [warn] 1<span class="hljs-comment">#1: the &quot;ssl&quot; directive is deprecated, use the &quot;listen ... ssl&quot; directive instead in /etc/nginx/nginx.conf:38</span>seastack_reverse_proxy.1.9hnaggyf0u25@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    | nginx: [warn] the <span class="hljs-string">&quot;ssl&quot;</span> directive is deprecated, use the <span class="hljs-string">&quot;listen ... ssl&quot;</span> directive instead <span class="hljs-keyword">in</span> /etc/nginx/nginx.conf:38</code></pre><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker卷与持久化数据</title>
      <link href="2020/03/23/docker-volume/"/>
      <url>2020/03/23/docker-volume/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker卷与持久化数据"><a href="#Docker卷与持久化数据" class="headerlink" title="Docker卷与持久化数据"></a>Docker卷与持久化数据</h2><p>数据主要分为两类，持久化的与非持久化的。<br>每个Docker容器都有自己的非持久化存储。非持久化存储自动创建，从属于容器，生命周期与容器相同。这意味着删除容器也会删除全部非持久化数据。<br>如果希望自己的容器数据保留下来（持久化），则需要将数据存储在卷上。卷和容器是解耦的，从而可以独立地创建并管理卷。</p><h3 id="容器与非持久数据"><a href="#容器与非持久数据" class="headerlink" title="容器与非持久数据"></a>容器与非持久数据</h3><p>毫无疑问，容器擅长无状态和非持久事务。<br>非持久化存储属于容器的一部分，并且与容器的生命周期一致—容器创建时会创建非持久化存储，同时该存储也会随着容器的删除而删除。</p><h3 id="容器与持久化数据"><a href="#容器与持久化数据" class="headerlink" title="容器与持久化数据"></a>容器与持久化数据</h3><p>在容器中持久化数据的方式推荐采用卷。<br>总体来说，用户创建卷，然后创建容器，接着将卷挂载到容器上。卷会挂载到容器文件系统的某个目录之下，任何写到该目录下的内容都会写到卷中。即使容器被删除，卷与其上面的数据仍然存在。</p><p>创建和管理容器卷</p><p><code>docker volume create myvol</code></p><p>默认情况下，Docker创建新卷时采用内置的local驱动。本地卷只能被所在节点的容器使用。使用-d 参数可以指定不同的驱动。<br>第三方驱动可以通过插件方式接入。</p><ul><li>块存储。如Amazon EBS</li><li>文件存储。如Azure文件存储</li><li>对象存储。如Amazon S3</li></ul><p><img src="/2020/03/23/docker-volume/1.png" alt="docker-third-vol"></p><pre><code class="hljs bash">$ docker volume create myvolmyvol[ec2-user@ip-172-xxx-xxx-221 ~]$ docker volume lsDRIVER              VOLUME NAME<span class="hljs-built_in">local</span>               myvol[ec2-user@ip-172-xxx-xxx-221 ~]$ docker volume inspect myvol[    &#123;        <span class="hljs-string">&quot;CreatedAt&quot;</span>: <span class="hljs-string">&quot;2020-03-23T12:28:43Z&quot;</span>,        <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;local&quot;</span>,        <span class="hljs-string">&quot;Labels&quot;</span>: &#123;&#125;,        <span class="hljs-string">&quot;Mountpoint&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/volumes/myvol/_data&quot;</span>,        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;myvol&quot;</span>,        <span class="hljs-string">&quot;Options&quot;</span>: &#123;&#125;,        <span class="hljs-string">&quot;Scope&quot;</span>: <span class="hljs-string">&quot;local&quot;</span>    &#125;]</code></pre><p>Driver和Scope都是local。这意味着卷使用默认local驱动创建，只能用于当前的Docker主机上的容器。</p><p>删除卷</p><p><code>docker volume prune</code></p><p>会删除未装入到某个容器或者服务的所有卷。<strong>谨慎使用！</strong></p><p><code>docker volume rm myvol</code></p><p>删除指定卷</p><pre><code class="hljs bash">$ docker volume pruneWARNING! This will remove all <span class="hljs-built_in">local</span> volumes not used by at least one container.Are you sure you want to <span class="hljs-built_in">continue</span>? [y/N] yDeleted Volumes:myvolTotal reclaimed space: 0B</code></pre><h3 id="卷在容器和服务中的使用"><a href="#卷在容器和服务中的使用" class="headerlink" title="卷在容器和服务中的使用"></a>卷在容器和服务中的使用</h3><p>创建一个新的独立容器，并挂载一个名为bizvol的卷</p><p><code>--mount source=bizvol,target=/vol</code></p><pre><code class="hljs bash">$ docker container run -dit --name voltainer \&gt; --mount <span class="hljs-built_in">source</span>=bizvol,target=/vol \&gt; alpineUnable to find image <span class="hljs-string">&#x27;alpine:latest&#x27;</span> locallylatest: Pulling from library/alpinec9b1b535fdd9: Pull complete Digest: sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367dStatus: Downloaded newer image <span class="hljs-keyword">for</span> alpine:latestc4caa49ae1d0a5151483ebb67efcec5961efb7d0d4ee5741edd2786c5e9404a0// 查看卷[ec2-user@ip-172-xxx-xxx-221 ~]$ docker volume lsDRIVER              VOLUME NAME<span class="hljs-built_in">local</span>               bizvol</code></pre><p>如果指定了已经存在的卷，Docker会使用该卷。<br>如果指定的卷不存在，Docker会创建一个卷。</p><p>尽管容器和卷各自拥有独立的生命周期，Docker也不允许删除正在被容器使用的卷。</p><pre><code class="hljs bash">$ docker volume rm bizvolError response from daemon: remove bizvol: volume is <span class="hljs-keyword">in</span> use - [c4caa49ae1d0a5151483ebb67efcec5961efb7d0d4ee5741edd2786c5e9404a0]</code></pre><p>在卷中输入数据</p><pre><code class="hljs bash">// 进入容器终端sh$ docker container <span class="hljs-built_in">exec</span> -it voltainer sh/ <span class="hljs-comment"># ls -l /vol</span>total 0// 写入数据/ <span class="hljs-comment"># echo &quot;I promise to write a review of the book on Amazon&quot; &gt; /vol/file1</span>/ <span class="hljs-comment"># ls -l /vol</span>total 4-rw-r--r--    1 root     root            50 Mar 23 12:47 file1// 查看写入数据/ <span class="hljs-comment"># cat /vol/file1 </span>I promise to write a review of the book on Amazon// 退出sh/ <span class="hljs-comment"># exit</span>[ec2-user@ip-172-xxx-xxx-221 ~]$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMESc4caa49ae1d0        alpine              <span class="hljs-string">&quot;/bin/sh&quot;</span>           7 minutes ago       Up 7 minutes                            voltainer// 删除容器[ec2-user@ip-172-xxx-xxx-221 ~]$ docker container rm voltainer -fvoltainer[ec2-user@ip-172-xxx-xxx-221 ~]$ docker container ls -aCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES257e76160609        nginx:latest        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   29 hours ago        Exited (0) 29 hours ago                       svc1.1.yefksat7bl2lyu4sttzefhkkp2ce656f3d29a        nginx:latest        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   29 hours ago        Exited (0) 29 hours ago                       svc1.3.m48n3y1xhqtczy6p69lmlzr45// 查看容器[ec2-user@ip-172-xxx-xxx-221 ~]$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES// 查看卷[ec2-user@ip-172-xxx-xxx-221 ~]$ docker volume lsDRIVER              VOLUME NAME<span class="hljs-built_in">local</span>               bizvol// 卷中数据还在。$ ls -l /var/lib/docker/volumes/bizvol/_data/ls: 无法访问/var/lib/docker/volumes/bizvol/_data/: Permission denied[ec2-user@ip-172-xxx-xxx-221 ~]$ sudo ls -l /var/lib/docker/volumes/bizvol/_data/总用量 4-rw-r--r-- 1 root root 50 3月  23 12:47 file1[ec2-user@ip-172-xxx-xxx-221 ~]$ sudo cat /var/lib/docker/volumes/bizvol/_data/file1I promise to write a review of the book on Amazon</code></pre><p>卷和数据还在！</p><p>将卷挂载到一个新的服务或者容器上</p><pre><code class="hljs bash">$ docker swarm join \&gt; --token SWMTKN-1-1fmkohiw5wn4eleb0frcuv4guzdwbqpmvco7vc0hvfvyz1a1fi-7do8xf8my3cjejp10dohwm9t8 172.xxx.xxx.90:2377 \&gt; --advertise-addr 172.xxx.xxx.221:2377 \&gt; --listen-addr 172.xxx.xxx.221:2377Error response from daemon: This node is already part of a swarm. Use <span class="hljs-string">&quot;docker swarm leave&quot;</span> to leave this swarm and join another one.[ec2-user@ip-172-xxx-xxx-221 ~]$ docker swarm leaveNode left the swarm.[ec2-user@ip-172-xxx-xxx-221 ~]$ docker swarm join \&gt; --token SWMTKN-1-1fmkohiw5wn4eleb0frcuv4guzdwbqpmvco7vc0hvfvyz1a1fi-7do8xf8my3cjejp10dohwm9t8 172.xxx.xxx.90:2377 \&gt; --advertise-addr 172.xxx.xxx.221:2377 \&gt; --listen-addr 172.xxx.xxx.221:2377This node joined a swarm as a worker.// 在管理节点上运行[ec2-user@ip-172-xxx-xxx-90 ~]$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONw75fjsgwvw74bsux8q7dqgeg4     ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Ready               Active                                  18.09.9-cefcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg *   ip-172-xxx-xxx-90                                    Ready               Active              Leader              18.09.9-ce// 将存在的卷挂载到新的服务上。$ docker service create \&gt; --name hellcat \&gt; --mount <span class="hljs-built_in">source</span>=bizvol,target=/vol \&gt; alpine sleep 1dwqr1c980gcj8o4qlqj54wgjvxoverall progress: 1 out of 1 tasks 1/1: running   [==================================================&gt;] verify: Service converged [ec2-user@ip-172-xxx-xxx-90 ~]$ docker service ps hellcatID                  NAME                IMAGE               NODE                                               DESIRED STATE       CURRENT STATE            ERROR               PORTSr1r74l0wlbip        hellcat.1           alpine:latest       ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 27 seconds ago // 在工作节点上[ec2-user@ip-172-xxx-xxx-221 ~]$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMEScc93b21f2137        alpine:latest       <span class="hljs-string">&quot;sleep 1d&quot;</span>          2 minutes ago       Up 2 minutes                            hellcat.1.r1r74l0wlbipdiawwia9cze0d// 容器的名称包括了service-name,replica-number以及replica-ID,采用句号分隔。// 貌似工作节点上，不能共享file2，疑问！（以下是在管理节点运行的。）$ docker container <span class="hljs-built_in">exec</span> -it 70ad18d7e686 sh/ <span class="hljs-comment"># cat /vol/file2</span>line 2, I promise to write a review of the book on Amazon</code></pre><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> volume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker覆盖网络</title>
      <link href="2020/03/22/docker-over-network/"/>
      <url>2020/03/22/docker-over-network/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker覆盖网络"><a href="#Docker覆盖网络" class="headerlink" title="Docker覆盖网络"></a>Docker覆盖网络</h2><p>容器间通信的可靠性和安全性相当重要，即使容器分属于不同网络中的不同主机。这也是覆盖网络大展拳脚的地方。它允许读者创建扁平的、安全的二层网络来连接多个主机，容器可以连接到覆盖网络并直接互相通信。</p><p>Docker提供了原生覆盖网络的支持，易于配置且非常安全。</p><h3 id="在Swarm模式下构建并测试Docker覆盖网络"><a href="#在Swarm模式下构建并测试Docker覆盖网络" class="headerlink" title="在Swarm模式下构建并测试Docker覆盖网络"></a>在Swarm模式下构建并测试Docker覆盖网络</h3><h4 id="创建两个节点"><a href="#创建两个节点" class="headerlink" title="创建两个节点"></a>创建两个节点</h4><pre><code class="hljs bash">$ docker node lsID                            HOSTNAME                                          STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONfcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal   Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg *   ip-172-xxx-xxx-90                                   Ready               Active              Leader              18.09.9-ce</code></pre><h4 id="创建一个覆盖网络"><a href="#创建一个覆盖网络" class="headerlink" title="创建一个覆盖网络"></a>创建一个覆盖网络</h4><pre><code class="hljs bash">// node1节点上（管理节点）创建覆盖网络$ docker network create -d overlay uber-net26lqapii93ynkykvhltt4gnodw[ec2-user@ip-172-xxx-xxx-90 ~]$ docker network lsNETWORK ID          NAME                DRIVER              SCOPE4bdb42df4187        bridge              bridge              <span class="hljs-built_in">local</span>99534e330251        docker_gwbridge     bridge              <span class="hljs-built_in">local</span>7dac12898c6b        host                host                <span class="hljs-built_in">local</span>dve1uqi3prlu        ingress             overlay             swarmde235266375f        localnet            bridge              <span class="hljs-built_in">local</span>8f140a8fa9a9        none                null                <span class="hljs-built_in">local</span>y0w8j0n8xair        uber-net            overlay             swarm6lqapii93ynk        uber-net2           overlay             swarm// node2节点上（工作节点）查看网络$ docker network lsNETWORK ID          NAME                DRIVER              SCOPE1a2ea5ebe299        bridge              bridge              <span class="hljs-built_in">local</span>a7b11d61bff7        docker_gwbridge     bridge              <span class="hljs-built_in">local</span>693779ae38b0        host                host                <span class="hljs-built_in">local</span>dve1uqi3prlu        ingress             overlay             swarma9e7c985858f        none                null                <span class="hljs-built_in">local</span>y0w8j0n8xair        uber-net            overlay             swarm</code></pre><h4 id="将服务连接到覆盖网络"><a href="#将服务连接到覆盖网络" class="headerlink" title="将服务连接到覆盖网络"></a>将服务连接到覆盖网络</h4><p>新建一个Docker服务并连接到该网络。Docker服务会包含两个副本（容器），一个运行在node1节点上，一个运行在node2节点上。这样自动将node2节点接入到uber-net2网络。</p><pre><code class="hljs bash">$ docker service create --name <span class="hljs-built_in">test</span> \&gt; --network uber-net2 \&gt; --replicas 2 \&gt; ubuntu sleep infinityfs5xijcqu4ukny0uk06qql8hyoverall progress: 2 out of 2 tasks 1/2: running   [==================================================&gt;] 2/2: running   [==================================================&gt;] verify: Service converged $ docker service ps <span class="hljs-built_in">test</span>ID                  NAME                IMAGE               NODE                                              DESIRED STATE       CURRENT STATE            ERROR               PORTS9jeucl42ssa4        test.1              ubuntu:latest       ip-172-xxx-xxx-57.ap-northeast-1.compute.internal   Running             Running 40 seconds ago                       rbq9tor1q2bv        test.2              ubuntu:latest       ip-172-xxx-xxx-90                                   Running             Running 40 seconds ago// node节点上查看网络（uber-net2可以看到了）$ docker network lsNETWORK ID          NAME                DRIVER              SCOPE1a2ea5ebe299        bridge              bridge              <span class="hljs-built_in">local</span>a7b11d61bff7        docker_gwbridge     bridge              <span class="hljs-built_in">local</span>693779ae38b0        host                host                <span class="hljs-built_in">local</span>dve1uqi3prlu        ingress             overlay             swarma9e7c985858f        none                null                <span class="hljs-built_in">local</span>y0w8j0n8xair        uber-net            overlay             swarm6lqapii93ynk        uber-net2           overlay             swarm</code></pre><p>查看网络</p><pre><code class="hljs bash">$ docker network inspect uber-net2[    &#123;        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;uber-net2&quot;</span>,        <span class="hljs-string">&quot;Id&quot;</span>: <span class="hljs-string">&quot;6lqapii93ynkykvhltt4gnodw&quot;</span>,        <span class="hljs-string">&quot;Created&quot;</span>: <span class="hljs-string">&quot;2020-03-22T08:17:31.148833516Z&quot;</span>,        <span class="hljs-string">&quot;Scope&quot;</span>: <span class="hljs-string">&quot;swarm&quot;</span>,        <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;overlay&quot;</span>,        <span class="hljs-string">&quot;EnableIPv6&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-string">&quot;IPAM&quot;</span>: &#123;            <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,            <span class="hljs-string">&quot;Options&quot;</span>: null,            <span class="hljs-string">&quot;Config&quot;</span>: [                &#123;                    <span class="hljs-string">&quot;Subnet&quot;</span>: <span class="hljs-string">&quot;10.0.1.0/24&quot;</span>,                    <span class="hljs-string">&quot;Gateway&quot;</span>: <span class="hljs-string">&quot;10.0.1.1&quot;</span>                &#125;            ]        &#125;,...</code></pre><p>uber-net2的子网是”10.0.1.0/24”。这跟两个节点的任意底层物理网络IP均不相符。</p><p>获取节点容器ID和IP</p><pre><code class="hljs bash">// node1节点$ docker container lsCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMESd3c5c3cd35a4        ubuntu:latest       <span class="hljs-string">&quot;sleep infinity&quot;</span>         10 minutes ago      Up 10 minutes                           test.2.rbq9tor1q2bvvhpf9vwus8a64$ docker container inspect \--format=<span class="hljs-string">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> \d3c5c3cd35a410.0.1.4// node2节点$ docker container lsCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMESa20372076036        ubuntu:latest       <span class="hljs-string">&quot;sleep infinity&quot;</span>         14 minutes ago      Up 14 minutes                           test.1.9jeucl42ssa42z5abrwxta32v[ec2-user@ip-172-xxx-xxx-57 ~]$ docker container inspect \&gt; --format=<span class="hljs-string">&#x27;&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;&#x27;</span> \&gt; a2037207603610.0.1.3</code></pre><p>登录node1容器，ping另外一个容器（安装ping工具）</p><pre><code class="hljs bash">$ docker container <span class="hljs-built_in">exec</span> -it d3c5c3cd35a4 bashroot@d3c5c3cd35a4:/<span class="hljs-comment"># ping</span>bash: ping: <span class="hljs-built_in">command</span> not foundroot@d3c5c3cd35a4:/<span class="hljs-comment"># apt-get update</span>...root@d3c5c3cd35a4:/<span class="hljs-comment"># apt-get install iputils-ping</span>...root@d3c5c3cd35a4:/<span class="hljs-comment"># ping 10.0.1.3</span>PING 10.0.1.3 (10.0.1.3) 56(84) bytes of data.64 bytes from 10.0.1.3: icmp_seq=1 ttl=255 time=0.518 ms64 bytes from 10.0.1.3: icmp_seq=2 ttl=255 time=0.468 ms64 bytes from 10.0.1.3: icmp_seq=3 ttl=255 time=0.508 ms64 bytes from 10.0.1.3: icmp_seq=4 ttl=255 time=0.457 ms64 bytes from 10.0.1.3: icmp_seq=5 ttl=255 time=0.527 ms64 bytes from 10.0.1.3: icmp_seq=6 ttl=255 time=0.448 ms64 bytes from 10.0.1.3: icmp_seq=7 ttl=255 time=0.508 ms^C</code></pre><p>node1上的容器可以通过覆盖网络ping通node2之上的容器了。</p><p>查看路由信息</p><pre><code class="hljs bash">root@d3c5c3cd35a4:/<span class="hljs-comment"># apt-get install traceroute</span>...root@d3c5c3cd35a4:/<span class="hljs-comment"># traceroute 10.0.1.3</span>traceroute to 10.0.1.3 (10.0.1.3), 30 hops max, 60 byte packets 1  test.1.9jeucl42ssa42z5abrwxta32v.uber-net2 (10.0.1.3)  0.582 ms  0.518 ms  0.515 ms</code></pre><h3 id="VXLAN入门"><a href="#VXLAN入门" class="headerlink" title="VXLAN入门"></a>VXLAN入门</h3><p>Docker使用VXLAN隧道技术创建了虚拟二层覆盖网络。<br>VXLAN的美妙之处在于它是一种封装技术，能使现存的路由器和网络架构看起来就像普通的IP/UDP包一样，并且处理起来毫无问题。</p><p><img src="/2020/03/22/docker-over-network/1.png" alt="VXLAN"></p><p>不同主机的VXLAN隧道终端VTEP（VXLAN Tunnel Endpoint, VTEP）创建覆盖网络。</p><p><img src="/2020/03/22/docker-over-network/2.png" alt="VTEP"></p><p>为容器设置IP地址</p><p><img src="/2020/03/22/docker-over-network/3.png" alt="VTEP-IP"></p><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker网络</title>
      <link href="2020/03/21/docker-network/"/>
      <url>2020/03/21/docker-network/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><p>网络负责连接一切—无网络，无APP。<br>Docker在容器内部运行应用，这些应用之间的交互依赖于大量不同的网络，这意味着Docker需要强大的网络功能。<br>Docker网络架构源自一种叫作容器网络模型（CNM，Container Network Model）的方案，该方案是开源的并且支持插接式连接。Libnetwork是Docker对CNM的一种实现，提供了Docker核心网络架构的全部功能。</p><h3 id="Docker网络架构"><a href="#Docker网络架构" class="headerlink" title="Docker网络架构"></a>Docker网络架构</h3><ul><li>CNM</li><li>Libnetwork</li><li>驱动</li></ul><p><img src="/2020/03/21/docker-network/1.png" alt="网络架构"></p><p>CNM定义了三个基本要素：沙盒（Sandbox）、终端（Endpoint）和网络（Network）。</p><p><img src="/2020/03/21/docker-network/2.png" alt="CNM"></p><p>Docker环境中最小的调度单位就是容器。CNM组件—沙盒被放置在容器内部，为容器提供网络连接。</p><p><img src="/2020/03/21/docker-network/3.png" alt="CNM与容器"></p><p>Libnetwork实现了CNM中定义的全部3个组件。此外它还实现了本地化服务发现（Service Discovery）、基于Ingress的容器负载均衡，以及网络控制层和管理层功能。<br>Libnetwork实现了控制层和管理层功能。<br>驱动就负责实现数据层。<br><img src="/2020/03/21/docker-network/4.png" alt="控制层管理层和数据层关系"></p><h3 id="单机桥接网络"><a href="#单机桥接网络" class="headerlink" title="单机桥接网络"></a>单机桥接网络</h3><p>单机意味着该网络只能在单个Docker主机上运行，并且只能与所在Docker主机上的容器进行连接。<br>桥接意味着这是802.1.d桥接的一种实现（二层交换机）。</p><p>每个Docker主机都有一个默认的单机桥接网络，Linux上网络名称为bridge，在Windows上叫作nat。</p><h4 id="查看网络"><a href="#查看网络" class="headerlink" title="查看网络"></a>查看网络</h4><p><code>docker network ls</code></p><p><code>docker network inspect bridge</code></p><pre><code class="hljs bash">$ docker network lsNETWORK ID          NAME                DRIVER              SCOPEfe38b7b60ea2        bridge              bridge              <span class="hljs-built_in">local</span>$ docker network inspect bridge[    &#123;        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;bridge&quot;</span>,        <span class="hljs-string">&quot;Id&quot;</span>: <span class="hljs-string">&quot;fe38b7b60ea278e4e7bb38c67e97c462cf8a7b885206a14f280d03a1ecfb88ca&quot;</span>,        <span class="hljs-string">&quot;Created&quot;</span>: <span class="hljs-string">&quot;2020-03-21T07:40:05.276022898Z&quot;</span>,        <span class="hljs-string">&quot;Scope&quot;</span>: <span class="hljs-string">&quot;local&quot;</span>,        <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;bridge&quot;</span>,        <span class="hljs-string">&quot;EnableIPv6&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-string">&quot;IPAM&quot;</span>: &#123;            <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,            <span class="hljs-string">&quot;Options&quot;</span>: null,            <span class="hljs-string">&quot;Config&quot;</span>: [                &#123;                    <span class="hljs-string">&quot;Subnet&quot;</span>: <span class="hljs-string">&quot;172.17.0.0/16&quot;</span>,                    <span class="hljs-string">&quot;Gateway&quot;</span>: <span class="hljs-string">&quot;172.17.0.1&quot;</span>                &#125;            ]        &#125;,        <span class="hljs-string">&quot;Internal&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-string">&quot;Attachable&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-string">&quot;Ingress&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-string">&quot;ConfigFrom&quot;</span>: &#123;            <span class="hljs-string">&quot;Network&quot;</span>: <span class="hljs-string">&quot;&quot;</span>        &#125;,        <span class="hljs-string">&quot;ConfigOnly&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-string">&quot;Containers&quot;</span>: &#123;&#125;,        <span class="hljs-string">&quot;Options&quot;</span>: &#123;            <span class="hljs-string">&quot;com.docker.network.bridge.default_bridge&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>,            <span class="hljs-string">&quot;com.docker.network.bridge.enable_icc&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>,            <span class="hljs-string">&quot;com.docker.network.bridge.enable_ip_masquerade&quot;</span>: <span class="hljs-string">&quot;true&quot;</span>,            <span class="hljs-string">&quot;com.docker.network.bridge.host_binding_ipv4&quot;</span>: <span class="hljs-string">&quot;0.0.0.0&quot;</span>,            <span class="hljs-string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="hljs-string">&quot;docker0&quot;</span>,            <span class="hljs-string">&quot;com.docker.network.driver.mtu&quot;</span>: <span class="hljs-string">&quot;1500&quot;</span>        &#125;,        <span class="hljs-string">&quot;Labels&quot;</span>: &#123;&#125;    &#125;]$ docker network inspect bridge | grep bridge.name            <span class="hljs-string">&quot;com.docker.network.bridge.name&quot;</span>: <span class="hljs-string">&quot;docker0&quot;</span>,</code></pre><p>使用Linux brctl工具查看系统中的Linux网桥</p><p><code>yum install brctl</code></p><p><code>brctl show</code></p><pre><code class="hljs bash">$ brctl showbridge name     bridge id               STP enabled     interfacesdocker0         8000.0242582cc9e7       no              docker_gwbridge         8000.0242c19ade9e       no</code></pre><p>创建新的单机桥接网络</p><p><code>docker network create -d bridge localnet</code></p><pre><code class="hljs bash">$ docker network create -d bridge localnetde235266375f7398571c288d30c1afd71a17fd47a028316562b59a812af56f5f$ brctl showbridge name     bridge id               STP enabled     interfacesbr-de235266375f         8000.0242357cce23       no              docker0         8000.0242582cc9e7       no              docker_gwbridge         8000.0242c19ade9e       no</code></pre><p>创建一个新的容器，接入到新建桥接网络localnet当中。</p><pre><code class="hljs bash">$ docker container run -d --name c1 \&gt; --network localnet \&gt; alpine sleep 1dUnable to find image <span class="hljs-string">&#x27;alpine:latest&#x27;</span> locallylatest: Pulling from library/alpinec9b1b535fdd9: Pull complete Digest: sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367dStatus: Downloaded newer image <span class="hljs-keyword">for</span> alpine:latest742cb2a3281868c156c24e656c98ebdb63b4739726cc5ba6a3e9546ef77e8cff$ docker network inspect localnet --format <span class="hljs-string">&#x27;&#123;&#123;json .Containers&#125;&#125;&#x27;</span>&#123;    <span class="hljs-string">&quot;742cb2a3281868c156c24e656c98ebdb63b4739726cc5ba6a3e9546ef77e8cff&quot;</span>: &#123;        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;c1&quot;</span>,        <span class="hljs-string">&quot;EndpointID&quot;</span>: <span class="hljs-string">&quot;afadd344ec0e3cd98aa1a14b4c86c784d9f7a793992f5ca63edcbb6dff31b55c&quot;</span>,        <span class="hljs-string">&quot;MacAddress&quot;</span>: <span class="hljs-string">&quot;02:42:ac:13:00:02&quot;</span>,        <span class="hljs-string">&quot;IPv4Address&quot;</span>: <span class="hljs-string">&quot;172.19.0.2/16&quot;</span>,        <span class="hljs-string">&quot;IPv6Address&quot;</span>: <span class="hljs-string">&quot;&quot;</span>    &#125;&#125;$ brctl showbridge name     bridge id               STP enabled     interfacesbr-de235266375f         8000.0242357cce23       no              vethd4c4e03docker0         8000.0242582cc9e7       no              docker_gwbridge         8000.0242c19ade9e       no  // c1的网络接口连接到了br-de235266375f网桥。</code></pre><p>创建一个c2的容器，并接入到“c1”所在的localnet网络中</p><pre><code class="hljs bash">$ docker container run -it --name c2 \&gt; --network localnet \&gt; alpine sh/ <span class="hljs-comment"># ping c1</span>PING c1 (172.19.0.2): 56 data bytes64 bytes from 172.19.0.2: seq=0 ttl=255 time=0.069 ms64 bytes from 172.19.0.2: seq=1 ttl=255 time=0.073 ms64 bytes from 172.19.0.2: seq=2 ttl=255 time=0.066 ms64 bytes from 172.19.0.2: seq=3 ttl=255 time=0.064 ms64 bytes from 172.19.0.2: seq=4 ttl=255 time=0.059 ms64 bytes from 172.19.0.2: seq=5 ttl=255 time=0.070 ms64 bytes from 172.19.0.2: seq=6 ttl=255 time=0.109 ms64 bytes from 172.19.0.2: seq=7 ttl=255 time=0.073 ms64 bytes from 172.19.0.2: seq=8 ttl=255 time=0.068 ms64 bytes from 172.19.0.2: seq=9 ttl=255 time=0.060 ms^C--- c1 ping statistics ---10 packets transmitted, 10 packets received, 0% packet lossround-trip min/avg/max = 0.059/0.071/0.109 ms/ <span class="hljs-comment"># </span></code></pre><p>桥接网络中容器只能与位于相同网络中的容器进行通信。但是可以使用端口映射（Port Mapping）来绕开这个限制。</p><p>运行一个新的Web服务容器，并将容器80端口映射到Docker主机的5000端口。</p><pre><code class="hljs bash">$ docker container run -d --name web \&gt; --network localnet \&gt; --publish 5000:80 \&gt; nginxUnable to find image <span class="hljs-string">&#x27;nginx:latest&#x27;</span> locallylatest: Pulling from library/nginx68ced04f60ab: Pull complete 28252775b295: Pull complete a616aa3b0bf2: Pull complete Digest: sha256:2539d4344dd18e1df02be842ffc435f8e1f699cfc55516e2cf2cb16b7a9aea0bStatus: Downloaded newer image <span class="hljs-keyword">for</span> nginx:latestecb9ef0734b5c6887efb311744134cf26d6c806db14f65603d0186735de16603$ docker port web80/tcp -&gt; 0.0.0.0:5000// 容器80端口已经映射到Docker主机所有接口上的5000端口。</code></pre><p>此时通过访问<code>http://18.xxx.xxx.xxx:5000/</code>就可以访问容器中的nginx。</p><h3 id="多机覆盖网络"><a href="#多机覆盖网络" class="headerlink" title="多机覆盖网络"></a>多机覆盖网络</h3><p>覆盖网络适用于多机环境。它允许单个网络包含多个主机，这样不同主机上的容器间就可以在链路层实现通信。<br>覆盖网络是理想的容器间通信方式，支持完全容器化的应用，并且具备良好的伸缩性。</p><p>能够将容器化应用连接到外部系统以及物理网络的能力是非常必要的。常见的例子是部分容器化的应用—应用中已容器化的部分需要与那些运行在物理网络和VLAN上的未容器化部分进行通信。</p><p>Docker内置的Macvlan驱动就是为此场景而生的。<br>Macvlan的优点是性能优异，无须端口映射或者额外桥接。<br>Macvlan的缺点是需要将主机网卡（NIC）设置为<strong>混杂模式</strong>（Promiscuous Mode）。这在大部分公有云平台上是不允许的</p><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><p>查看单独的容器日志</p><p><code>docker container logs xxx</code></p><pre><code class="hljs bash">$ docker container logs web221.xxx-xxx.75 - - [21/Mar/2020:08:42:49 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 200 612 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span>2020/03/21 08:42:50 [error] 6<span class="hljs-comment">#6: *1 open() &quot;/usr/share/nginx/html/favicon.ico&quot; failed (2: No such file or directory), client: 221.223.232.75, server: localhost, request: &quot;GET /favicon.ico HTTP/1.1&quot;, host: &quot;18.182.11.164:5000&quot;, referrer: &quot;http://18.182.11.164:5000/&quot;</span>221.xxx-xxx.75 - - [21/Mar/2020:08:42:50 +0000] <span class="hljs-string">&quot;GET /favicon.ico HTTP/1.1&quot;</span> 404 555 <span class="hljs-string">&quot;http://18.182.11.164:5000/&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span>221.xxx-xxx.75 - - [21/Mar/2020:09:01:33 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span>221.xxx-xxx.75 - - [21/Mar/2020:09:01:34 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span>221.xxx-xxx.75 - - [21/Mar/2020:09:01:35 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span></code></pre><p>查看Swarm服务日志</p><p><code>docker service logs xxx</code></p><pre><code class="hljs bash">$ docker service logs svc1svc1.1.005grokadf97@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    | 10.255.0.2 - - [21/Mar/2020:10:03:23 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span>svc1.2.bva4j461fn8f@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    | 10.255.0.3 - - [21/Mar/2020:09:53:26 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span>svc1.4.xla77t1eo0ts@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    | 10.255.0.2 - - [21/Mar/2020:09:53:19 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span>svc1.4.xla77t1eo0ts@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    | 10.255.0.5 - - [21/Mar/2020:09:53:22 +0000] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 304 0 <span class="hljs-string">&quot;-&quot;</span> <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36&quot;</span> <span class="hljs-string">&quot;-&quot;</span></code></pre><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>服务发现（Service Discovery）允许容器和Swarm服务通过名称互相定位。唯一的要求就是需要处于同一个网络当中。</p><p><img src="/2020/03/21/docker-network/5.png" alt="服务发现"></p><p>每个启动时使用了–name参数的Swarm服务或者独立的容器，都会将自己的名称和IP地址注册到Docker DNS服务。这意味着容器和服务副本可以通过Docker DNS服务互相发现。<br>服务发现是受网络限制的。这意味着名称解析只对位于<strong>同一网络中</strong>的容器和服务生效。如果两个容器在不同的网络，那么就不能互相解析。</p><h4 id="Ingress网络"><a href="#Ingress网络" class="headerlink" title="Ingress网络"></a>Ingress网络</h4><p>Swarm支持两种服务发布模式，两种模式均保证服务从集群外可访问。</p><ul><li>Ingress模式（默认）</li><li>Host模式</li></ul><p>通过Ingress模式发布的服务，可以保证从Swarm集群内任一节点（即使没有运行服务的副本）都能访问该服务；以Host模式发布的服务只能通过运行服务副本的节点来访问。</p><pre><code class="hljs bash">$ docker network lsNETWORK ID          NAME                DRIVER              SCOPEdcb8438283df        bridge              bridge              <span class="hljs-built_in">local</span>4dfe607b699b        host                host                <span class="hljs-built_in">local</span>dve1uqi3prlu        ingress             overlay             swarmy0w8j0n8xair        uber-net            overlay             swarm[ec2-user@ip-172-xxx-xxx-221 ~]$ docker service create -d --name svc1 --network uber-net --publish published=5000,target=80 nginxqw5n3db4t6b4e7u5toz9yn4hc[ec2-user@ip-172-xxx-xxx-221 ~]$ docker service lsID                  NAME                MODE                REPLICAS            IMAGE               PORTSqw5n3db4t6b4        svc1                replicated          1/1                 nginx:latest        *:5000-&gt;80/tcp$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONee70iiqr4suz0iry3uvtu2fvl *   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Ready               Active              Leader              18.09.9-cefcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg     ip-172-xxx-xxx-90                                    Ready               Active              Reachable           18.09.9-ce</code></pre><p>从三个节点都可访问：<code>http://52.xxx.xxx.124:5000/</code></p><p><img src="/2020/03/21/docker-network/6.png" alt="Ingress模式"></p><p>如果存在多个运行中的副本，流量会平均到每个副本之上。</p><pre><code class="hljs bash">$ docker service create -d --name svc1 --network uber-net \&gt; --replicas 5 \&gt; --publish published=5000,target=80 nginxk07efmmmggiz1buu1vod1xe9p</code></pre><p><img src="/2020/03/21/docker-network/7.png" alt="ingress-replicas"></p><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Swarm</title>
      <link href="2020/03/20/docker-swarm/"/>
      <url>2020/03/20/docker-swarm/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h2><p>Docker Swarm包含两个方面：一个企业级的Docker安全集群，一个微服务应用编排引擎。</p><p>集群方面：Swarm将一个或多个Docker节点组织起来，使得用户能够以集群方式管理它们。<br>Swarm默认内置有加密的分布式集群存储、加密网络、公用TLS、安全集群接入令牌以及一套简化数字证书管理的PKI。用户可以自如地添加或删除节点。</p><p>编排方面：Swarm提供了一套丰富的API使得部署和管理复杂的微服务应用变得易如反掌。</p><p>Docker Swarm是一个基于Docker引擎之上的独立产品。除了原生Swarm应用，它还可以部署和管理Kubernetes应用。</p><p>一个Swarm由一个或多个Docker节点组成。唯一的前提就是要求所有节点通过可靠的网络相连。<br>节点会被配置为管理节点（Manager）或工作节点（Worker）。管理节点负责集群控制面版，进行诸如监控集群状态、分发任务至工作节点等操作。工作节点接收来自管理节点的任务并执行。<br>Swarm的配置和状态信息保存在一套位于所有管理节点上的分布式etcd数据库中。该数据库运行于内存中，并保持数据的最新状态。它几乎不需要任何配置—作为Swarm的一部分被安装，无须管理。</p><p>关于应用编排，Swarm中的最小调度单元是服务。当容器被封装在一个服务中时，称之为一个任务或一个副本，服务中增加了诸如扩缩容、滚动升级以及简单回滚等特性。</p><h3 id="搭建安全Swarm集群"><a href="#搭建安全Swarm集群" class="headerlink" title="搭建安全Swarm集群"></a>搭建安全Swarm集群</h3><h4 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h4><pre><code class="hljs bash">// 1）切换docker源$ tee /etc/yum.repos.d/docker.repo &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span>[dockerrepo]name=Docker Repositorybaseurl=https://yum.dockerproject.org/repo/main/centos/<span class="hljs-variable">$releasever</span>/enabled=1gpgcheck=1gpgkey=https://yum.dockerproject.org/gpgEOF// 2）安装docker $ sudo yum install docker$ docker --versionDocker version 18.09.9-ce, build 039a7df// 3) 启动docker$ sudo systemctl <span class="hljs-built_in">enable</span> docker$ sudo systemctl start docker或者$ sudo service docker start// 4) 将当前用户加入docker用户组中,需要重新登录才能有效$ sudo groupadd docker$ sudo usermod -aG docker <span class="hljs-variable">$USER</span>// centos 8安装docker// 删除旧的docker$ yum remove docker docker-common docker-selinux docker-engineRepository AppStream is listed more than once <span class="hljs-keyword">in</span> the configurationRepository extras is listed more than once <span class="hljs-keyword">in</span> the configurationRepository PowerTools is listed more than once <span class="hljs-keyword">in</span> the configurationRepository centosplus is listed more than once <span class="hljs-keyword">in</span> the configuration未找到匹配的参数： docker未找到匹配的参数： docker-common未找到匹配的参数： docker-selinux未找到匹配的参数： docker-engine没有软件包需要移除。依赖关系解决。无需任何处理。完毕！// 安装相关依赖$ yum install -y yum-utils \device-mapper-persistent-data \lvm2// 查看docker版本yum list docker-ce --showduplicates | sort -r...// 安装docker$ yum install docker-ce// 出错一Repository AppStream is listed more than once <span class="hljs-keyword">in</span> the configurationRepository extras is listed more than once <span class="hljs-keyword">in</span> the configurationRepository PowerTools is listed more than once <span class="hljs-keyword">in</span> the configurationRepository centosplus is listed more than once <span class="hljs-keyword">in</span> the configuration上次元数据过期检查：0:01:13 前，执行于 2020年03月28日 星期六 21时52分31秒。错误： 问题: package docker-ce-3:19.03.8-3.el7.x86_64 requires containerd.io &gt;= 1.2.2-3, but none of the providers can be installed  - cannot install the best candidate <span class="hljs-keyword">for</span> the job  - package containerd.io-1.2.10-3.2.el7.x86_64 is excluded  - package containerd.io-1.2.13-3.1.el7.x86_64 is excluded  - package containerd.io-1.2.2-3.3.el7.x86_64 is excluded  - package containerd.io-1.2.2-3.el7.x86_64 is excluded  - package containerd.io-1.2.4-3.1.el7.x86_64 is excluded  - package containerd.io-1.2.5-3.1.el7.x86_64 is excluded  - package containerd.io-1.2.6-3.3.el7.x86_64 is excluded(尝试添加 <span class="hljs-string">&#x27;--skip-broken&#x27;</span> 来跳过无法安装的软件包 或 <span class="hljs-string">&#x27;--nobest&#x27;</span> 来不只使用最佳选择的软件包)// 需要安装containerd.io，// 我们可以到这个网站https://download.docker.com/linux/centos/7/x86_64/stable/Packages/，// 找到最新的去安装，可以手动浏览器下载，快$ dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm$ yum install docker-ce docker-ce-cli// centos 8默认已经安装好Python3和pip3$ pip3 -Vpip 9.0.3 from /usr/lib/python3.6/site-packages (python 3.6)$ pip3 install docker-compose$ docker-compose versiondocker-compose version 1.25.4, build unknowndocker-py version: 4.2.0CPython version: 3.6.8OpenSSL version: OpenSSL 1.1.1c FIPS  28 May 2019// 修改Docker下载源// 登录阿里云：https://cr.console.aliyun.com/cn-hangzhou/mirrors。最后一栏就是镜像加速器。会有自己的镜像加速器地址。$ sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="hljs-string">&#x27;EOF&#x27;</span>&gt; &#123;&gt;   <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://aorfq0az.mirror.aliyuncs.com&quot;</span>]&gt; &#125;&gt; EOF&#123;  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<span class="hljs-string">&quot;https://aorfq0az.mirror.aliyuncs.com&quot;</span>]&#125;$ lsdaemon.json  key.json<span class="hljs-comment"># systemctl daemon-reload</span><span class="hljs-comment"># systemctl restart docker</span></code></pre><h4 id="初始化Swarm"><a href="#初始化Swarm" class="headerlink" title="初始化Swarm"></a>初始化Swarm</h4><p>初始化第一个管理节点 &gt; 加入额外的管理节点 &gt; 加入工作节点 &gt; 完成</p><p>单引擎（Single-Engine）模式：不包含在任何Swarm中的Docker节点。一旦被加入Swarm集群，则切换为Swarm模式。</p><pre><code class="hljs bash">$ docker swarm init \&gt; --advertise-addr 172.xxx.xxx.xxx:2377 \&gt; --listen-addr 172.xxx.xxx.xxx:2377Swarm initialized: current node (ee70iiqr4suz0iry3uvtu2fvl) is now a manager.To add a worker to this swarm, run the following <span class="hljs-built_in">command</span>:    docker swarm join --token SWMTKN-1-1fmkohiw5wn4eleb0frcuv4guzdwbqpmvco7vc0hvfvyz1a1fi-7do8xf8my3cjejp10dohwm9t8 172.xxx.xxx.xxx:2377To add a manager to this swarm, run <span class="hljs-string">&#x27;docker swarm join-token manager&#x27;</span> and follow the instructions.</code></pre><p>docker swarm init会通知Docker来初始化一个新的Swarm，并将自身设置为第一个管理节点。同时也会使该节点开启Swarm模式。<br>–advertise-addr指定其他节点用来连接到当前管理节点的IP和端口。<br>–listen-addr指定用于承载Swarm流量的IP和端口。<br>Swarm模式下的操作默认运行于2337端口，虽然它是可配置的，但2377/tcp是用于客户端与Swarm进行安全（Https）通信的约定俗成的端口配置。</p><h4 id="列出Swarm中的节点"><a href="#列出Swarm中的节点" class="headerlink" title="列出Swarm中的节点"></a>列出Swarm中的节点</h4><p><code>docker node ls</code></p><pre><code class="hljs bash">$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONee70iiqr4suz0iry3uvtu2fvl *   ip-xxx-xxx-xxx-xxx.ap-northeast-1.compute.internal   Ready               Active              Leader              18.09.9-ce</code></pre><p>此时ip-xxx-xxx-xxx-xxx.ap-northeast-1.compute.internal是Swarm中唯一的节点，并且作为Leader列出。</p><h4 id="添加工作和管理节点"><a href="#添加工作和管理节点" class="headerlink" title="添加工作和管理节点"></a>添加工作和管理节点</h4><pre><code class="hljs bash">$ docker swarm join-token workerTo add a worker to this swarm, run the following <span class="hljs-built_in">command</span>:    docker swarm join --token SWMTKN-1-1fmkohiw5wn4eleb0frcuv4guzdwbqpmvco7vc0hvfvyz1a1fi-7do8xf8my3cjejp10dohwm9t8 172.xxx.xxx.xxx:2377$ docker swarm join-token managerTo add a manager to this swarm, run the following <span class="hljs-built_in">command</span>:    docker swarm join --token SWMTKN-1-1fmkohiw5wn4eleb0frcuv4guzdwbqpmvco7vc0hvfvyz1a1fi-1d4p1rhwnb2nxn21kqoirftn8 172.xxx.xxx.xxx:2377</code></pre><p>工作节点和管理节点的接入命令中使用的接入Token是不同的。一个节点是作为工作节点还是管理节点接入，完全依赖于使用了哪个Token。</p><pre><code class="hljs bash">// 添加工作节点$ docker swarm join \&gt; --token SWMTKN-1-1fmkohiw5wn4eleb0frcuv4guzdwbqpmvco7vc0hvfvyz1a1fi-7do8xf8my3cjejp10dohwm9t8 172.xxx.xxx.221:2377 \&gt; --advertise-addr 172.xxx.xxx.57:2377 \&gt; --listen-addr 172.xxx.xxx.57:2377This node joined a swarm as a worker.// 添加管理节点$ docker swarm join \&gt; --token SWMTKN-1-1fmkohiw5wn4eleb0frcuv4guzdwbqpmvco7vc0hvfvyz1a1fi-1d4p1rhwnb2nxn21kqoirftn8 172.xxx.xxx.221:2377 \&gt; --advertise-addr 172.xxx.xxx.90:2377 \&gt; --listen-addr 172.xxx.xxx.90:2377This node joined a swarm as a manager.// 查看节点$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONee70iiqr4suz0iry3uvtu2fvl     ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Ready               Active              Leader              18.09.9-cefcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg *   ip-172-xxx-xxx-90                                    Ready               Active              Reachable           18.09.9-ce</code></pre><p>一个工作节点，两个管理节点。<br>MANAGER STATUS列显示为Leader或者Reachable，则为管理节点。<br>MANAGER STATUS列<strong>无任何显示</strong>的节点是工作节点。只有在管理节点才能执行docker node ls相关命令。</p><h3 id="Swarm管理器高可用性（HA）"><a href="#Swarm管理器高可用性（HA）" class="headerlink" title="Swarm管理器高可用性（HA）"></a>Swarm管理器高可用性（HA）</h3><p>Swarm实现了一种主从方式的多管理节点的HA。<br>通常处于活动状态的管理节点被称为“主节点”（leader）,而主节点也是唯一的一个会对Swarm发送控制命令的节点。<br>只有主节点才会变更配置，或发送任务到工作节点。如果一个备用（非活动）管理节点接收到了Swarm命令，则它会将其转发给主节点。</p><p>关于HA，两条最佳实践</p><ul><li>部署奇数个管理节点</li><li>不要部署太多管理节点（建议3个或5个）</li></ul><p>部署奇数个管理节点有利于减少脑裂（Split-Brain）情况的出现机会。掌握多数管理节点的分区能够继续对集群进行管理。<br>显然将管理节点分布到不同的可用域中是一种不错的实践方式，但是一定要确保它们之间的网络连接是可靠的，否则由于底层网络分区导致的问题将是令人痛苦的！请一定要确保管理节点之间是有高速可靠的网络连接的。</p><p>Docker提供了自动锁机制来锁定Swarm，这会强制要求重启的管理节点在提供一个集群解锁码之后才有权从新接入集群。</p><h4 id="Swarm加锁"><a href="#Swarm加锁" class="headerlink" title="Swarm加锁"></a>Swarm加锁</h4><p><code>docker swarm update --autolock=true</code></p><pre><code class="hljs bash">$ docker swarm update --autolock=<span class="hljs-literal">true</span>Swarm updated.To unlock a swarm manager after it restarts, run the `docker swarm unlock`<span class="hljs-built_in">command</span> and provide the following key:    SWMKEY-1-jpphL37czEhKVGXr7u5tAb+kndkA9dd5BUO5LdyF6GgPlease remember to store this key <span class="hljs-keyword">in</span> a password manager, since without it youwill not be able to restart the manager.// 重启docker$ sudo service docker restartRedirecting to /bin/systemctl restart docker.service[ec2-user@ip-172-xxx-xxx-221 ~]$ docker node lsError response from daemon: Swarm is encrypted and needs to be unlocked before it can be used. Please use <span class="hljs-string">&quot;docker swarm unlock&quot;</span> to unlock it.// 别的管理节点$ docker node lsError response from daemon: rpc error: code = Unknown desc = The swarm does not have a leader. It<span class="hljs-string">&#x27;s possible that too few managers are online. Make sure more than half of the managers are online.</span></code></pre><h4 id="Swarm解锁"><a href="#Swarm解锁" class="headerlink" title="Swarm解锁"></a>Swarm解锁</h4><p><code>docker swarm unlock</code></p><pre><code class="hljs bash">$ docker swarm unlockPlease enter unlock key: // 解锁key，就是加锁key，要妥善保管[ec2-user@ip-172-xxx-xxx-221 ~]$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONl90pqzsmj0al5gs7laktshpdv                                                        Unknown             Active                                  ee70iiqr4suz0iry3uvtu2fvl *   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Ready               Active              Reachable           18.09.9-cefcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg     ip-172-xxx-xxx-90                                    Ready               Active              Leader              18.09.9-ce</code></pre><h4 id="启动Swarm服务"><a href="#启动Swarm服务" class="headerlink" title="启动Swarm服务"></a>启动Swarm服务</h4><pre><code class="hljs bash">$ docker service create --name web-fe \&gt; -p 8080:8080 \&gt; --replicas 3 \&gt; nigelpoulton/pluralsight-docker-ciiqaqb78ufwhps3ugrm5fsxfo5overall progress: 3 out of 3 tasks 1/3: running   [==================================================&gt;] 2/3: running   [==================================================&gt;] 3/3: running   [==================================================&gt;] verify: Service converged</code></pre><p>docker service create 命令告知Docker正在声明一个新服务<br>–name 参数将其命名为web-fe<br>-p 参数映射端口<br>–replicas 参数告知Docker应该总是有几个此服务的副本</p><p>启动的服务都会被Swarm待续监控—Swarm会在后台进行轮训检查（Reconciliation Loop），来持续比较服务的实际状态和期望状态是否一致。若不一致，Swarm会使其一致。</p><p>查看服务</p><p><code>docker service ls</code></p><pre><code class="hljs bash">$ docker service lsID                  NAME                MODE                REPLICAS            IMAGE                                       PORTSiqaqb78ufwhp        web-fe              replicated          3/3                 nigelpoulton/pluralsight-docker-ci:latest   *:8080-&gt;8080/tcp</code></pre><p>查看状态</p><p><code>docker service ps web-fe</code></p><pre><code class="hljs bash">$ docker service ps web-feID                  NAME                IMAGE                                       NODE                                               DESIRED STATE       CURRENT STATE            ERROR               PORTSdavkzelaad5o        web-fe.1            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 20 minutes ago                       y7tw6ryd2vw1        web-fe.2            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-90                                    Running             Running 20 minutes ago                       lkbh8k5t2lus        web-fe.3            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 20 minutes ago</code></pre><p>docker service ps <service-name or serviceid>命令可以查看服务副本列表及各副本的状态。</service-name></p><p>查看详细状态</p><p><code>docker service inspect --pretty web-fe</code></p><pre><code class="hljs ba">$ docker service inspect --pretty web-feID:             iqaqb78ufwhps3ugrm5fsxfo5Name:           web-feService Mode:   Replicated Replicas:      3Placement:UpdateConfig: Parallelism:   1 On failure:    pause Monitoring Period: 5s Max failure ratio: 0 Update order:      stop-firstRollbackConfig: Parallelism:   1 On failure:    pause Monitoring Period: 5s Max failure ratio: 0 Rollback order:    stop-firstContainerSpec: Image:         nigelpoulton&#x2F;pluralsight-docker-ci:latest@sha256:61bc64850a5f2bfbc65967cc33feaae8a77c8b49379c55aaf05bb02dcee41451 Init:          falseResources:Endpoint Mode:  vipPorts: PublishedPort &#x3D; 8080  Protocol &#x3D; tcp  TargetPort &#x3D; 8080  PublishMode &#x3D; ingress</code></pre><p>服务的默认复制模式是副本模式，这种模式会部署期望数量的服务副本，并尽可能均匀地将各个副本分布在整个集群上中<br>全局模式—在这种模式下，每个节点仅运行一个副本。</p><h4 id="服务的扩缩容"><a href="#服务的扩缩容" class="headerlink" title="服务的扩缩容"></a>服务的扩缩容</h4><p><code>docker service scale web-fe=10</code></p><pre><code class="hljs bash">$ docker service scale web-fe=5// 扩容到5个副本数web-fe scaled to 5overall progress: 5 out of 5 tasks 1/5: running   [==================================================&gt;] 2/5: running   [==================================================&gt;] 3/5: running   [==================================================&gt;] 4/5: running   [==================================================&gt;] 5/5: running   [==================================================&gt;] verify: Service converged [ec2-user@ip-172-xxx-xxx-221 ~]$ docker service lsID                  NAME                MODE                REPLICAS            IMAGE                                       PORTSiqaqb78ufwhp        web-fe              replicated          5/5                 nigelpoulton/pluralsight-docker-ci:latest   *:8080-&gt;8080/tcp[ec2-user@ip-172-xxx-xxx-221 ~]$ docker service ps web-feID                  NAME                IMAGE                                       NODE                                               DESIRED STATE       CURRENT STATE               ERROR               PORTSdavkzelaad5o        web-fe.1            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running about an hour ago                       y7tw6ryd2vw1        web-fe.2            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-90                                    Running             Running about an hour ago                       lkbh8k5t2lus        web-fe.3            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running about an hour ago                       i7s9lrds3ek8        web-fe.4            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 30 seconds ago                          2fdleu3jx0sd        web-fe.5            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 30 seconds ago</code></pre><p>缩容</p><pre><code class="hljs bash">$ docker service scale web-fe=3// 调整数字大小，可以缩容web-fe scaled to 3overall progress: 3 out of 3 tasks 1/3: running   [==================================================&gt;] 2/3: running   [==================================================&gt;] 3/3: running   [==================================================&gt;] verify: Service converged [ec2-user@ip-172-xxx-xxx-221 ~]$ docker service lsID                  NAME                MODE                REPLICAS            IMAGE                                       PORTSiqaqb78ufwhp        web-fe              replicated          5/3                 nigelpoulton/pluralsight-docker-ci:latest   *:8080-&gt;8080/tcp[ec2-user@ip-172-xxx-xxx-221 ~]$ docker service ps web-feID                  NAME                IMAGE                                       NODE                                               DESIRED STATE       CURRENT STATE               ERROR               PORTSdavkzelaad5o        web-fe.1            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running about an hour ago                       y7tw6ryd2vw1        web-fe.2            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-90                                    Running             Running about an hour ago                       lkbh8k5t2lus        web-fe.3            nigelpoulton/pluralsight-docker-ci:latest   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running about an hour ago</code></pre><p>删除服务</p><p><code>docker service rm web-fe</code></p><h4 id="滚动升级"><a href="#滚动升级" class="headerlink" title="滚动升级"></a>滚动升级</h4><p>创建网络（Overlay Network）</p><p><code>docker network create -d overlay uber-net</code></p><pre><code class="hljs bash">$ docker network create -d overlay uber-nety0w8j0n8xairlub0qj5a621p2[ec2-user@ip-172-xxx-xxx-221 ~]$ docker network lsNETWORK ID          NAME                DRIVER              SCOPEy0w8j0n8xair        uber-net            overlay             swarm</code></pre><p>创建一个新的服务，并将其接入uber-net网络</p><pre><code class="hljs bash">$ docker service create --name uber-svc \&gt; --network uber-net \&gt; -p 80:80 --replicas 6 \&gt; nigelpoulton/tu-demo:v1xlp3rupt5rjptzjjipd4vofmuoverall progress: 6 out of 6 tasks 1/6: running   [==================================================&gt;] 2/6: running   [==================================================&gt;] 3/6: running   [==================================================&gt;] 4/6: running   [==================================================&gt;] 5/6: running   [==================================================&gt;] 6/6: running   [==================================================&gt;] verify: Service converged [ec2-user@ip-172-xxx-xxx-221 ~]$ docker service lsID                  NAME                MODE                REPLICAS            IMAGE                     PORTSxlp3rupt5rjp        uber-svc            replicated          6/6                 nigelpoulton/tu-demo:v1   *:80-&gt;80/tcp[ec2-user@ip-172-xxx-xxx-221 ~]$ docker service ps uber-svcID                  NAME                IMAGE                     NODE                                               DESIRED STATE       CURRENT STATE            ERROR               PORTSjl7o8inw4hiw        uber-svc.1          nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 44 seconds ago                       mcd0kovmmfm2        uber-svc.2          nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 44 seconds ago                       pq8oxkxvbvkn        uber-svc.3          nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-90                                    Running             Running 44 seconds ago                       surhy6sjwe2e        uber-svc.4          nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 44 seconds ago                       iq8pxhzrkl07        uber-svc.5          nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 44 seconds ago                       ovynni3in53e        uber-svc.6          nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-90                                    Running             Running 44 seconds ago</code></pre><p>–network 参数声明所有的副本都连接到uber-net网络。</p><p>此时输入Swarm应用访问地址</p><p><img src="/2020/03/20/docker-swarm/1.png" alt="访问Swarm应用"></p><h4 id="滚动更新"><a href="#滚动更新" class="headerlink" title="滚动更新"></a>滚动更新</h4><p>将新镜像更新到Swarm中时采用一种阶段性的方式—每次更新两个副本，并且中间间隔20s。</p><p><code>docker service update</code></p><pre><code class="hljs bash">$ docker service update --image nigelpoulton/tu-demo:v2 \&gt; --update-parallelism 2 \&gt; --update-delay 20s uber-svcuber-svcoverall progress: 6 out of 6 tasks 1/6: running   [==================================================&gt;] 2/6: running   [==================================================&gt;] 3/6: running   [==================================================&gt;] 4/6: running   [==================================================&gt;] 5/6: running   [==================================================&gt;] 6/6: running   [==================================================&gt;] verify: Service converged $ docker service ps uber-svcID                  NAME                IMAGE                     NODE                                               DESIRED STATE       CURRENT STATE            ERROR               PORTSmgp2tlukas59        uber-svc.1          nigelpoulton/tu-demo:v2   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 3 minutes ago                        jl7o8inw4hiw         \_ uber-svc.1      nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Shutdown            Shutdown 3 minutes ago                       gh7qw0m6obzc        uber-svc.2          nigelpoulton/tu-demo:v2   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 4 minutes ago                        mcd0kovmmfm2         \_ uber-svc.2      nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Shutdown            Shutdown 4 minutes ago                       js42qhpdcig0        uber-svc.3          nigelpoulton/tu-demo:v2   ip-172-xxx-xxx-90                                    Running             Running 4 minutes ago                        pq8oxkxvbvkn         \_ uber-svc.3      nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-90                                    Shutdown            Shutdown 4 minutes ago                       pc7e8bqql86t        uber-svc.4          nigelpoulton/tu-demo:v2   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Running             Running 4 minutes ago                        surhy6sjwe2e         \_ uber-svc.4      nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Shutdown            Shutdown 4 minutes ago                       nrc546s3y5dg        uber-svc.5          nigelpoulton/tu-demo:v2   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Running             Running 3 minutes ago                        iq8pxhzrkl07         \_ uber-svc.5      nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Shutdown            Shutdown 3 minutes ago                       qs90nd4litg6        uber-svc.6          nigelpoulton/tu-demo:v2   ip-172-xxx-xxx-90                                    Running             Running 4 minutes ago                        ovynni3in53e         \_ uber-svc.6      nigelpoulton/tu-demo:v1   ip-172-xxx-xxx-90                                    Shutdown            Shutdown 4 minutes ago</code></pre><p>有的版本号有v1和v2，滚动更新</p><pre><code class="hljs bash">$ docker service inspect --pretty uber-svcID:             xlp3rupt5rjptzjjipd4vofmuName:           uber-svcService Mode:   Replicated Replicas:      6UpdateStatus: State:         completed Started:       11 minutes ago Completed:     9 minutes ago Message:       update completedPlacement:UpdateConfig: Parallelism:   2 Delay:         20s On failure:    pause Monitoring Period: 5s Max failure ratio: 0 Update order:      stop-firstRollbackConfig: Parallelism:   1 On failure:    pause Monitoring Period: 5s Max failure ratio: 0 Rollback order:    stop-firstContainerSpec: Image:         nigelpoulton/tu-demo:v2@sha256:d3c0d8c9d5719d31b79cca146025fa7d1de4749fef58a7e038cf0ef2ba5eb74c Init:          <span class="hljs-literal">false</span>Resources:Networks: uber-net Endpoint Mode:  vipPorts: PublishedPort = 80  Protocol = tcp  TargetPort = 80  PublishMode = ingress</code></pre><p>发现更新时对并行和延迟的设置已经成为服务定义的一部分了。</p><p>查看日志</p><p><code>docker service logs uber-svc</code></p><pre><code class="hljs bash">$ docker service logs uber-svcuber-svc.6.ovynni3in53e@ip-172-xxx-xxx-90    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.3.pq8oxkxvbvkn@ip-172-xxx-xxx-90    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.3.pq8oxkxvbvkn@ip-172-xxx-xxx-90    | 10.255.0.3 - - [20/Mar/2020 10:32:19] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 200 -uber-svc.6.qs90nd4litg6@ip-172-xxx-xxx-90    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.3.js42qhpdcig0@ip-172-xxx-xxx-90    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.4.pc7e8bqql86t@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.1.mgp2tlukas59@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.4.surhy6sjwe2e@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.4.surhy6sjwe2e@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    | 10.255.0.3 - - [20/Mar/2020 10:32:21] <span class="hljs-string">&quot;POST / HTTP/1.1&quot;</span> 200 -uber-svc.1.jl7o8inw4hiw@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.1.jl7o8inw4hiw@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    | 10.255.0.3 - - [20/Mar/2020 10:28:26] <span class="hljs-string">&quot;GET /favicon.ico HTTP/1.1&quot;</span> 404 -uber-svc.1.jl7o8inw4hiw@ip-172-xxx-xxx-221.ap-northeast-1.compute.internal    | 10.255.0.5 - - [20/Mar/2020 10:32:14] <span class="hljs-string">&quot;GET /favicon.ico HTTP/1.1&quot;</span> 404 -uber-svc.2.mcd0kovmmfm2@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.2.mcd0kovmmfm2@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    | 10.255.0.3 - - [20/Mar/2020 10:28:23] <span class="hljs-string">&quot;GET /static/stylesheets/style.css HTTP/1.1&quot;</span> 200 -uber-svc.2.mcd0kovmmfm2@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    | 10.255.0.5 - - [20/Mar/2020 10:32:08] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 200 -uber-svc.5.iq8pxhzrkl07@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.5.iq8pxhzrkl07@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    | 10.255.0.3 - - [20/Mar/2020 10:28:22] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 200 -uber-svc.5.iq8pxhzrkl07@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    | 10.255.0.5 - - [20/Mar/2020 10:32:09] <span class="hljs-string">&quot;GET /static/stylesheets/style.css HTTP/1.1&quot;</span> 200 -uber-svc.2.gh7qw0m6obzc@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)uber-svc.5.nrc546s3y5dg@ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    |  * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)</code></pre><h3 id="Swarm删除节点"><a href="#Swarm删除节点" class="headerlink" title="Swarm删除节点"></a>Swarm删除节点</h3><p><code>docker node update --availability drain node_xxx</code></p><pre><code class="hljs bash">// 查看Swarm节点$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONee70iiqr4suz0iry3uvtu2fvl *   ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Ready               Active              Leader              18.09.9-cefcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg     ip-172-xxx-xxx-90                                    Ready               Active              Reachable           18.09.9-ce// 查看Swarm服务[ec2-user@ip-172-xxx-xxx-221 ~]$ docker service lsID                  NAME                MODE                REPLICAS            IMAGE               PORTSk07efmmmggiz        svc1                replicated          5/5                 nginx:latest        *:5000-&gt;80/tcp// 查看本节点的服务[ec2-user@ip-172-xxx-xxx-221 ~]$ docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES257e76160609        nginx:latest        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   8 minutes ago       Up 8 minutes        80/tcp              svc1.1.yefksat7bl2lyu4sttzefhkkp2ce656f3d29a        nginx:latest        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   8 minutes ago       Up 8 minutes        80/tcp              svc1.3.m48n3y1xhqtczy6p69lmlzr45// 将节点停用,该节点上的容器会迁移到其他节点[ec2-user@ip-172-xxx-xxx-221 ~]$ docker node update --availability drain ip-172-xxx-xxx-221.ap-northeast-1.compute.internalip-172-31-33-221.ap-northeast-1.compute.internal[ec2-user@ip-172-xxx-xxx-221 ~]$ docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES// 将停用的节点容器迁移到其它的节点[ec2-user@ip-172-xxx-xxx-90 ~]$ docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMESf27d910e8144        nginx:latest        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   8 minutes ago       Up 8 minutes        80/tcp              svc1.5.mid0cf32rcmdwzpm627q4juxd[ec2-user@ip-172-xxx-xxx-90 ~]$ docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES56751f6cbc14        nginx:latest        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   20 seconds ago      Up 14 seconds       80/tcp              svc1.1.mazi7xv1d5o3lw8eqafcnmhnv883cec81a463        nginx:latest        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   20 seconds ago      Up 14 seconds       80/tcp              svc1.3.nc50ulw6mgkpdhot7ac2v2391f27d910e8144        nginx:latest        <span class="hljs-string">&quot;nginx -g &#x27;daemon of…&quot;</span>   10 minutes ago      Up 10 minutes       80/tcp              svc1.5.mid0cf32rcmdwzpm627q4juxd</code></pre><p>降级（在其它管理节点）</p><p><code>docker node demote node_xxx</code></p><pre><code class="hljs bash">$ docker node demote ip-172-xxx-xxx-221.ap-northeast-1.compute.internalManager ip-172-xxx-xxx-221.ap-northeast-1.compute.internal demoted <span class="hljs-keyword">in</span> the swarm.$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONee70iiqr4suz0iry3uvtu2fvl     ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Ready               Drain                                   18.09.9-cefcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg *   ip-172-xxx-xxx-90                                    Ready               Active              Leader              18.09.9-ce</code></pre><p>停止docker服务（待删除的节点）</p><pre><code class="hljs bash">$ sudo systemctl stop docker.service$ ps -ef | grep dockerec2-user  4789  5324  0 07:56 pts/0    00:00:00 grep --color=auto docker</code></pre><p>删除节点</p><p><code>docker node rm node_xxx</code></p><pre><code class="hljs bash">$ docker node lsID                            HOSTNAME                                           STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONee70iiqr4suz0iry3uvtu2fvl     ip-172-xxx-xxx-221.ap-northeast-1.compute.internal   Down                Drain                                   18.09.9-cefcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal    Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg *   ip-172-xxx-xxx-90                                    Ready               Active              Leader              18.09.9-ce[ec2-user@ip-172-xxx-xxx-90 ~]$ docker node rm ip-172-xxx-xxx-221.ap-northeast-1.compute.internalip-172-xxx-xxx-221.ap-northeast-1.compute.internal[ec2-user@ip-172-xxx-xxx-90 ~]$ docker node lsID                            HOSTNAME                                          STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSIONfcjl1u2ogpw3yxsg0l47i7pbf     ip-172-xxx-xxx-57.ap-northeast-1.compute.internal   Ready               Active                                  18.09.9-cez9dr0oc0z0oj3wuw38m8ylwqg *   ip-172-xxx-xxx-90                                   Ready               Active              Leader              18.09.9-ce</code></pre><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Swarm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Compose部署应用</title>
      <link href="2020/03/19/docker-compose/"/>
      <url>2020/03/19/docker-compose/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker-Compose部署应用"><a href="#Docker-Compose部署应用" class="headerlink" title="Docker Compose部署应用"></a>Docker Compose部署应用</h2><p>Docker Compose能够在Docker节点上，以单引擎（Single-Engine Mode）进行多容器应用的部署与管理。<br>多数的现代应用通过多个更小的服务互相协同来组成一个完整可用的应用。<br>Docker Compose并不是通过脚本和各种冗长的docker命令来将应用组件组织起来，而是通过一个声明式的配置文件描述整个应用，从而使用一条命令完成部署。</p><p>Docker Compose的前身是Fig。Fig是一个基于Docker的Python工具，允许用户基于一个YAML文件定义多容器应用，从而可以使用fig命令行工具进行应用的部署。Fig还可以对应用的全生命周期进行管理。<br>内部实现上，Fig会解析YAML文件，并通过Docker API进行应用的部署和管理。<br>Fig更名为Docker Compose，并自此成为绑定在Docker引擎之上的外部工具。虽然它从未完全集成到Docker引擎中，但是仍然受到广泛关注并得到普通使用。</p><p>Docker Compose仍然是一个需要在Docker主机上进行安装的外部Python工具。使用它时，首先编写定义多容器（多服务）应用的YAML文件，然后将其交由docker-compose命令处理，Docker Compose就会基于Docker引擎API完成应用的部署。 </p><h3 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker Compose"></a>安装Docker Compose</h3><p>安装Docker-compose</p><p>访问网址，查找合适的版本</p><p><code>https://github.com/docker/compose/releases</code></p><pre><code class="hljs bash">$ curl -L https://github.com/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="hljs-built_in">local</span>/bin/docker-compose// 换取国内镜像curl -L https://get.daocloud.io/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` &gt; /usr/<span class="hljs-built_in">local</span>/bin/docker-compose$ chmod +x /usr/<span class="hljs-built_in">local</span>/bin/docker-compose</code></pre><p>检查Docker Compose是否安装</p><pre><code class="hljs bash">$ docker-compose --versiondocker-compose version 1.23.2, build 1110ad01</code></pre><p>Compose文件</p><p>Docker Compose使用YAML文件来定义多服务的应用。YAML是JSON的一个子集，因此也可以使用JSON。<br>Docker Compose默认使用文件名docker-compose.yml。当然，用户也可以使用 -f 参数指定具体文件。</p><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.5&quot;</span><span class="hljs-attr">services:</span><span class="hljs-attr">web-fe:</span><span class="hljs-attr">build:</span> <span class="hljs-string">.</span><span class="hljs-attr">command:</span> <span class="hljs-string">python</span> <span class="hljs-string">app.py</span><span class="hljs-attr">ports:</span><span class="hljs-bullet">-</span> <span class="hljs-attr">target:</span> <span class="hljs-number">5000</span><span class="hljs-attr">published:</span> <span class="hljs-number">5000</span><span class="hljs-attr">networks:</span><span class="hljs-bullet">-</span> <span class="hljs-string">counter-net</span><span class="hljs-attr">volumes:</span><span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">volume</span><span class="hljs-attr">source:</span> <span class="hljs-string">counter-vol</span><span class="hljs-attr">target:</span> <span class="hljs-string">/code</span><span class="hljs-attr">redis:</span><span class="hljs-attr">image:</span> <span class="hljs-string">&quot;redis:alpine&quot;</span><span class="hljs-attr">networks:</span><span class="hljs-attr">counter-net:</span><span class="hljs-attr">networks:</span><span class="hljs-attr">counter-net:</span><span class="hljs-attr">volumes:</span><span class="hljs-attr">counter-vol:</span></code></pre><p>version是必须指定的，总是位于文件的第一行。定义了Compose文件格式的版本。<br>services用于定义不同的应用服务。<br>networks用于指引Docker创建新的网络。<br>volumes用于指引Docker来创建新的卷。<br>Docker Compose会将每个服务部署为一个容器，并且会使用key作为容器名字的一部分。</p><h3 id="部署应用"><a href="#部署应用" class="headerlink" title="部署应用"></a>部署应用</h3><p>常用的启动一个Compose应用的方式就是<strong>docker-compose up命令</strong>。它会构建所需的镜像，创建网络和卷，并启动容器</p><pre><code class="hljs bash">$ docker-compose up &amp;// 应先进入Docker[1] 98639localhost:counter-app xxxx$ Creating network <span class="hljs-string">&quot;counter-app_counter-net&quot;</span> with the default driverCreating volume <span class="hljs-string">&quot;counter-app_counter-vol&quot;</span> with default driverBuilding web-feStep 1/5 : FROM python:3.4-alpine3.4-alpine: Pulling from library/python8e402f1a9c57: Pull completecda9ba2397ef: Pull completeaafecf9bbbfd: Pull completebc2e7e266629: Pull completee1977129b756: Pull completeDigest: sha256:c210b660e2ea553a7afa23b41a6ed112f85dbce25cbcb567c75dfe05342a4c4bStatus: Downloaded newer image <span class="hljs-keyword">for</span> python:3.4-alpine ---&gt; c06adcf62f6eStep 2/5 : ADD . /code ---&gt; 140d7686d413Step 3/5 : WORKDIR /code ---&gt; Running <span class="hljs-keyword">in</span> 94884afcd407Removing intermediate container 94884afcd407 ---&gt; af5369ebc768Step 4/5 : RUN pip install -r requirements.txt ---&gt; Running <span class="hljs-keyword">in</span> ba41aa887b15DEPRECATION: Python 3.4 support has been deprecated. pip 19.1 will be the last one supporting it. Please upgrade your Python as Python 3.4 won<span class="hljs-string">&#x27;t be maintained after March 2019 (cf PEP 429).</span><span class="hljs-string">Collecting flask (from -r requirements.txt (line 1))</span><span class="hljs-string">  Downloading https://files.pythonhosted.org/packages/d8/94/7350820ae209ccdba073f83220cea1c376f2621254d1e0e82609c9a65e58/Flask-1.0.4-py2.py3-none-any.whl (92kB)</span><span class="hljs-string">Collecting redis (from -r requirements.txt (line 2))</span><span class="hljs-string">  Downloading https://files.pythonhosted.org/packages/32/ae/28613a62eea0d53d3db3147f8715f90da07667e99baeedf1010eb400f8c0/redis-3.3.11-py2.py3-none-any.whl (66kB)</span><span class="hljs-string">Collecting Werkzeug&gt;=0.14 (from flask-&gt;-r requirements.txt (line 1))</span><span class="hljs-string">  Downloading https://files.pythonhosted.org/packages/c2/e4/a859d2fe516f466642fa5c6054fd9646271f9da26b0cac0d2f37fc858c8f/Werkzeug-0.16.1-py2.py3-none-any.whl (327kB)</span><span class="hljs-string">Collecting itsdangerous&gt;=0.24 (from flask-&gt;-r requirements.txt (line 1))</span><span class="hljs-string">  Downloading https://files.pythonhosted.org/packages/76/ae/44b03b253d6fade317f32c24d100b3b35c2239807046a4c953c7b89fa49e/itsdangerous-1.1.0-py2.py3-none-any.whl</span><span class="hljs-string">Collecting Jinja2&gt;=2.10 (from flask-&gt;-r requirements.txt (line 1))</span><span class="hljs-string">  Downloading https://files.pythonhosted.org/packages/65/e0/eb35e762802015cab1ccee04e8a277b03f1d8e53da3ec3106882ec42558b/Jinja2-2.10.3-py2.py3-none-any.whl (125kB)</span><span class="hljs-string">Collecting click&gt;=5.1 (from flask-&gt;-r requirements.txt (line 1))</span><span class="hljs-string">  Downloading https://files.pythonhosted.org/packages/fa/37/45185cb5abbc30d7257104c434fe0b07e5a195a6847506c074527aa599ec/Click-7.0-py2.py3-none-any.whl (81kB)</span><span class="hljs-string">Collecting MarkupSafe&gt;=0.23 (from Jinja2&gt;=2.10-&gt;flask-&gt;-r requirements.txt (line 1))</span><span class="hljs-string">  Downloading https://files.pythonhosted.org/packages/b9/2e/64db92e53b86efccfaea71321f597fa2e1b2bd3853d8ce658568f7a13094/MarkupSafe-1.1.1.tar.gz</span><span class="hljs-string">Building wheels for collected packages: MarkupSafe</span><span class="hljs-string">  Building wheel for MarkupSafe (setup.py): started</span><span class="hljs-string">  Building wheel for MarkupSafe (setup.py): finished with status &#x27;</span><span class="hljs-keyword">done</span><span class="hljs-string">&#x27;</span><span class="hljs-string">  Stored in directory: /root/.cache/pip/wheels/f2/aa/04/0edf07a1b8a5f5f1aed7580fffb69ce8972edc16a505916a77</span><span class="hljs-string">Successfully built MarkupSafe</span><span class="hljs-string">Installing collected packages: Werkzeug, itsdangerous, MarkupSafe, Jinja2, click, flask, redis</span><span class="hljs-string">Successfully installed Jinja2-2.10.3 MarkupSafe-1.1.1 Werkzeug-0.16.1 click-7.0 flask-1.0.4 itsdangerous-1.1.0 redis-3.3.11</span><span class="hljs-string">You are using pip version 19.0.3, however version 19.1.1 is available.</span><span class="hljs-string">You should consider upgrading via the &#x27;</span>pip install --upgrade pip<span class="hljs-string">&#x27; command.</span><span class="hljs-string">Removing intermediate container ba41aa887b15</span><span class="hljs-string"> ---&gt; 7b1ad6caceb8</span><span class="hljs-string">Step 5/5 : CMD [&quot;python&quot;, &quot;app.py&quot;]</span><span class="hljs-string"> ---&gt; Running in 268e39050c88</span><span class="hljs-string">Removing intermediate container 268e39050c88</span><span class="hljs-string"> ---&gt; f2c090352f6d</span><span class="hljs-string"></span><span class="hljs-string">Successfully built f2c090352f6d</span><span class="hljs-string">Successfully tagged counter-app_web-fe:latest</span><span class="hljs-string">WARNING: Image for service web-fe was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.</span><span class="hljs-string">Pulling redis (redis:alpine)...</span><span class="hljs-string">alpine: Pulling from library/redis</span><span class="hljs-string">c9b1b535fdd9: Already exists</span><span class="hljs-string">8dd5e7a0ba4a: Pull complete</span><span class="hljs-string">e20c1cdf5aef: Pull complete</span><span class="hljs-string">25131c35a099: Pull complete</span><span class="hljs-string">bd7c9740b22d: Pull complete</span><span class="hljs-string">d4f86850c303: Pull complete</span><span class="hljs-string">Creating counter-app_redis_1  ... done</span><span class="hljs-string">Creating counter-app_web-fe_1 ... done</span><span class="hljs-string">Attaching to counter-app_web-fe_1, counter-app_redis_1</span><span class="hljs-string">redis_1   | 1:C 19 Mar 2020 10:10:01.123 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span><span class="hljs-string">redis_1   | 1:C 19 Mar 2020 10:10:01.123 # Redis version=5.0.8, bits=64, commit=00000000, modified=0, pid=1, just started</span><span class="hljs-string">redis_1   | 1:C 19 Mar 2020 10:10:01.123 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf</span><span class="hljs-string">redis_1   | 1:M 19 Mar 2020 10:10:01.125 * Running mode=standalone, port=6379.</span><span class="hljs-string">redis_1   | 1:M 19 Mar 2020 10:10:01.125 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.</span><span class="hljs-string">redis_1   | 1:M 19 Mar 2020 10:10:01.125 # Server initialized</span><span class="hljs-string">redis_1   | 1:M 19 Mar 2020 10:10:01.126 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add &#x27;</span>vm.overcommit_memory = 1<span class="hljs-string">&#x27; to /etc/sysctl.conf and then reboot or run the command &#x27;</span>sysctl vm.overcommit_memory=1<span class="hljs-string">&#x27; for this to take effect.</span><span class="hljs-string">web-fe_1  |  * Serving Flask app &quot;app&quot; (lazy loading)</span><span class="hljs-string">web-fe_1  |  * Environment: production</span><span class="hljs-string">web-fe_1  |    WARNING: This is a development server. Do not use it in a production deployment.</span><span class="hljs-string">web-fe_1  |    Use a production WSGI server instead.</span><span class="hljs-string">web-fe_1  |  * Debug mode: on</span><span class="hljs-string">web-fe_1  |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)</span><span class="hljs-string">web-fe_1  |  * Restarting with stat</span><span class="hljs-string">web-fe_1  |  * Debugger is active!</span><span class="hljs-string">web-fe_1  |  * Debugger PIN: 241-353-594</span><span class="hljs-string">web-fe_1  | xxx.xxx.xxx.x - - [19/Mar/2020 10:11:44] &quot;GET / HTTP/1.1&quot; 200 -</span></code></pre><p>默认情况下，docker-compose up会查找名为docker-compose.yml或docker-compose.yaml的Compose文件。也可以启动通过-f 参数来指定别的文件来启动</p><p><code>docker-compose -f prod-equus-bass.yml up</code></p><p>使用 -d 参数在后台启动应用</p><p>使用命令来终止Compose应用</p><pre><code class="hljs bash">$ docker container ls -qa686232b31153a981515f86992b5f3ca1259251e5f3afca98localhost:counter-app xxxx$ docker container stop $(docker container ls -qa)// 批量关闭redis_1   | 1:M 19 Mar 2020 10:10:01.127 * Ready to accept connectionsweb-fe_1  | xxx.xxx.xxx.xxx - - [19/Mar/2020 10:54:57] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 200 -redis_1   | 1:signal-handler (1584615486) Received SIGTERM scheduling shutdown...redis_1   | 1:M 19 Mar 2020 10:58:06.120 <span class="hljs-comment"># User requested shutdown...</span>redis_1   | 1:M 19 Mar 2020 10:58:06.120 * Saving the final RDB snapshot before exiting.686232b31153counter-app_web-fe_1 exited with code 0redis_1   | 1:M 19 Mar 2020 10:58:06.121 * DB saved on diskredis_1   | 1:M 19 Mar 2020 10:58:06.121 <span class="hljs-comment"># Redis is now ready to exit, bye bye...</span>a981515f86992b5f3ca1259251e5f3afca98counter-app_redis_1 exited with code 0localhost:counter-app xxxx$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</code></pre><p>Compose应用后台启动</p><pre><code class="hljs bash">$ docker-compose up -dStarting counter-app_web-fe_1 ... <span class="hljs-keyword">done</span>Starting counter-app_redis_1  ... <span class="hljs-keyword">done</span></code></pre><p>Docker Compose会将项目名称（counter-app）和Compose文件中定义的资源名（web-fe）连接起来，作为新构建的镜像的名称。Docker Compose部署的所有资源的名称都会遵循这一规范。</p><pre><code class="hljs bash">$ docker image lsREPOSITORY                                             TAG                 IMAGE ID            CREATED             SIZEcounter-app_web-fe                                     latest              f2c090352f6d        About an hour ago   84.5MB</code></pre><p>每个容器的名称都以<strong>项目名称（所在目录名称）为前缀</strong>。此外它们还都以一个<strong>数字为后缀</strong>用于标识容器实例序号—因为Docker Compose允许扩缩容。</p><pre><code class="hljs bash">$ docker container lsCONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                    NAMES686232b31153        counter-app_web-fe   <span class="hljs-string">&quot;python app.py&quot;</span>          About an hour ago   Up 10 seconds       0.0.0.0:5000-&gt;5000/tcp   counter-app_web-fe_1a981515f8699        redis:alpine         <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   About an hour ago   Up 10 seconds       6379/tcp                 counter-app_redis_1</code></pre><p>显示容器的网络与卷</p><pre><code class="hljs bash">$ docker network lsNETWORK ID          NAME                      DRIVER              SCOPEdb8fbbb6664e        bridge                    bridge              <span class="hljs-built_in">local</span>456f16f998df        counter-app_counter-net   bridge              <span class="hljs-built_in">local</span>fd0e04e21a2a        host                      host                <span class="hljs-built_in">local</span>e6370760945d        none                      null                <span class="hljs-built_in">local</span>localhost:counter-app xxxx$ docker volume lsDRIVER              VOLUME NAME....<span class="hljs-built_in">local</span>               counter-app_counter-vol....</code></pre><h3 id="使用Docker-Compose管理应用"><a href="#使用Docker-Compose管理应用" class="headerlink" title="使用Docker Compose管理应用"></a>使用Docker Compose管理应用</h3><h4 id="停止应用"><a href="#停止应用" class="headerlink" title="停止应用"></a>停止应用</h4><p><code>docker-compose down</code></p><pre><code class="hljs bash">$ docker-compose downStopping counter-app_web-fe_1 ... Stopping counter-app_redis_1  ... redis_1   | 1:M 19 Mar 2020 11:28:00.922 * Ready to accept connectionsredis_1   | 1:signal-handler (1584617313) Received SIGTERM scheduling shutdown...redis_1   | 1:M 19 Mar 2020 11:28:33.848 <span class="hljs-comment"># User requested shutdown...</span>redis_1   | 1:M 19 Mar 2020 11:28:33.848 * Saving the final RDB snapshot before exiting.web-fe_1  | 192.168.99.1 - - [19/Mar/2020 11:28:15] <span class="hljs-string">&quot;GET / HTTP/1.1&quot;</span> 200 -Stopping counter-app_web-fe_1 ... <span class="hljs-keyword">done</span>redis_1   | 1:M 19 Mar 2020 11:28:33.849 <span class="hljs-comment"># Redis is now ready to exit, bye bye...</span>Stopping counter-app_redis_1  ... <span class="hljs-keyword">done</span>counter-app_redis_1 exited with code 0Removing counter-app_web-fe_1 ... <span class="hljs-keyword">done</span>Removing counter-app_redis_1  ... <span class="hljs-keyword">done</span>Removing network counter-app_counter-net</code></pre><p>停止应用时，应用的卷counter-vol并没有被删除，因为卷应该是用于数据的长期持久化存储的。因此，卷的生命周期是与相应的容器完全解耦的。执行$ docker volume ls发现，该卷依然存在于系统中。写到卷上的所有数据都会保存上。再次执行docker-compose up过程中拉取或构建的镜像也会保留在系统中。因此，再次部署该应用将更加快捷。</p><h4 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h4><p><code>docker-compose up -d</code></p><pre><code class="hljs bash">$ docker-compose up -dCreating network <span class="hljs-string">&quot;counter-app_counter-net&quot;</span> with the default driverCreating counter-app_web-fe_1 ... <span class="hljs-keyword">done</span>Creating counter-app_redis_1  ... <span class="hljs-keyword">done</span>[1]+  Done                    docker-compose up</code></pre><p>再次启动时，发现counter-vol卷已经存在，而且不需要去拉取和构建镜像。启动速度变快。</p><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><p><code>docker-compose ps</code></p><pre><code class="hljs bash">$ docker-compose ps        Name                      Command               State           Ports         --------------------------------------------------------------------------------------counter-app_redis_1    docker-entrypoint.sh redis ...   Up      6379/tcp              counter-app_web-fe_1   python app.py                    Up      0.0.0.0:5000-&gt;5000/tcp</code></pre><h4 id="列出进程"><a href="#列出进程" class="headerlink" title="列出进程"></a>列出进程</h4><p><code>docker-compose top</code></p><pre><code class="hljs bash">$ docker-compose topcounter-app_redis_1UID   PID    PPID   C   STIME   TTY     TIME         CMD     -------------------------------------------------------------999   4928   4898   0   11:47   ?     00:00:00   redis-servercounter-app_web-fe_1UID    PID    PPID   C   STIME   TTY     TIME                    CMD                ------------------------------------------------------------------------------------root   4953   4912   0   11:47   ?     00:00:00   python app.py                     root   5068   4953   0   11:47   ?     00:00:00   /usr/<span class="hljs-built_in">local</span>/bin/python /code/app.py</code></pre><p>停止应用</p><p><code>docker-compose stop</code></p><pre><code class="hljs bash">$ docker-compose stopStopping counter-app_redis_1  ... <span class="hljs-keyword">done</span>Stopping counter-app_web-fe_1 ... <span class="hljs-keyword">done</span>localhost:counter-app xxxx$ docker-compose ps        Name                      Command               State    Ports----------------------------------------------------------------------counter-app_redis_1    docker-entrypoint.sh redis ...   Exit 0        counter-app_web-fe_1   python app.py                    Exit 0</code></pre><p>停止Compose应用并不会在系统中删除对应用的定义，而仅将应用的容器停止。</p><pre><code class="hljs bash">$ docker container ls -aCONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS                      PORTS                  NAMES97e38bcf6f7f        redis:alpine                         <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   21 minutes ago      Exited (0) 5 minutes ago                           counter-app_redis_1d30a05ed10a1        counter-app_web-fe                   <span class="hljs-string">&quot;python app.py&quot;</span>          21 minutes ago      Exited (0) 5 minutes ago                           counter-app_web-fe_1</code></pre><h4 id="重启应用"><a href="#重启应用" class="headerlink" title="重启应用"></a>重启应用</h4><p><code>docker-compose restart</code></p><pre><code class="hljs bash">$ docker-compose restartRestarting counter-app_redis_1  ... <span class="hljs-keyword">done</span>Restarting counter-app_web-fe_1 ... <span class="hljs-keyword">done</span>localhost:counter-app xxxx$ docker container lsCONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                    NAMES97e38bcf6f7f        redis:alpine         <span class="hljs-string">&quot;docker-entrypoint.s…&quot;</span>   23 minutes ago      Up 3 seconds        6379/tcp                 counter-app_redis_1d30a05ed10a1        counter-app_web-fe   <span class="hljs-string">&quot;python app.py&quot;</span>          23 minutes ago      Up 3 seconds        0.0.0.0:5000-&gt;5000/tcp   counter-app_web-fe_1// 或者$ docker-compose ps        Name                      Command               State           Ports         --------------------------------------------------------------------------------------counter-app_redis_1    docker-entrypoint.sh redis ...   Up      6379/tcp              counter-app_web-fe_1   python app.py                    Up      0.0.0.0:5000-&gt;5000/tcp</code></pre><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker应用的容器化</title>
      <link href="2020/03/18/docker-containerizing/"/>
      <url>2020/03/18/docker-containerizing/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker应用的容器化"><a href="#Docker应用的容器化" class="headerlink" title="Docker应用的容器化"></a>Docker应用的容器化</h2><p>Docker的核心思想就是如何将应用整合到容器中，并且能在容器中实际运行。<br>将应用整合到容器中并且运行起来的这个过程，称为“容器化”（Containerizing），有时也叫作“Docker化”（Dockerizing）。</p><p>容器是为应用而生！容器能够简化应用的构建、部署和运行过程。</p><ul><li>编写应用代码</li><li>创建一个Dockerfile，其中包括当前应用的描述、依赖以及该如何运行这个应用</li><li>对该Dockerfile执行docker image build命令</li><li>等待Docker将应用程序构建到Docker镜像中</li></ul><p>一旦应用容器化完成（打包成一个Docker镜像），就能以镜像的方式交付并以容器的方式运行了。</p><h3 id="单体应用容器化"><a href="#单体应用容器化" class="headerlink" title="单体应用容器化"></a>单体应用容器化</h3><ol><li>获取应用代码</li><li>分析Dockerfile</li><li>构建应用镜像</li><li>运行该应用</li><li>测试应用</li><li>容器应用化细节</li><li>生产环境中的多阶段构建</li><li>最佳实践</li></ol><p>Dockfile——这个文件包含了对当前应用的描述，并且能指导Docker完成镜像的构建。<br>构建上下文——在Docker当中，包含应用文件的目录通常称为构建上下文（Build Context）。通常将Dockerfile放到构建上下文的根目录下。</p><pre><code class="hljs dockerfile">$ cat Dockerfile<span class="hljs-comment"># Test web-app to use with Pluralsight courses and Docker Deep Dive book</span><span class="hljs-comment"># Linux x64</span><span class="hljs-keyword">FROM</span> alpine<span class="hljs-keyword">LABEL</span><span class="bash"> maintainer=<span class="hljs-string">&quot;nigelpoulton@hotmail.com&quot;</span></span><span class="hljs-comment"># Install Node and NPM</span><span class="hljs-keyword">RUN</span><span class="bash"> apk add --update nodejs nodejs-npm</span><span class="hljs-comment"># Copy app to /src</span><span class="hljs-keyword">COPY</span><span class="bash"> . /src</span><span class="hljs-keyword">WORKDIR</span><span class="bash"> /src</span><span class="hljs-comment"># Install dependencies</span><span class="hljs-keyword">RUN</span><span class="bash">  npm install</span><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">&quot;node&quot;</span>, <span class="hljs-string">&quot;./app.js&quot;</span>]</span></code></pre><p>FROM指令指定的镜像，会作为当前镜像的一个基础镜像层，当前应用的剩余内容会作为新增镜像层添加到基础镜像层之上。<br>LABEL标签方式指定了当前镜像的维护者。<br>RUN指令会在FROM指定的alpine基础镜像之上，新建一个镜像层来存储这些安装内容。<br>COPY . /src指令将应用相关文件从构建上下文复制到了当前镜像中，并且新建一个镜像层来存储。<br>WORKDIR指令为Dockerfile中尚未执行的指令设置工作目录。<br>RUN指令会安装依赖，在设置的工作目录中执行，在镜像中新建镜像层来保存相应的依赖文件。<br>EXPOSE指令来完成相应端口的设置。<br>ENTRYPOINT指令来指定当前镜像的入口程序。</p><h3 id="容器化当前应用"><a href="#容器化当前应用" class="headerlink" title="容器化当前应用"></a>容器化当前应用</h3><pre><code class="hljs bash">$ docker image build -t web:latest .Sending build context to Docker daemon  10.24kBStep 1/8 : FROM alpine ---&gt; e7d92cdc71feStep 2/8 : LABEL maintainer=<span class="hljs-string">&quot;nigelpoulton@hotmail.com&quot;</span> ---&gt; Running <span class="hljs-keyword">in</span> f0429b44c728Removing intermediate container f0429b44c728 ---&gt; 480c0e286f41Step 3/8 : RUN apk add --update nodejs nodejs-npm ---&gt; Running <span class="hljs-keyword">in</span> 2ea8291a9c93fetch http://dl-cdn.alpinelinux.org/alpine/v3.11/main/x86_64/APKINDEX.tar.gzfetch http://dl-cdn.alpinelinux.org/alpine/v3.11/community/x86_64/APKINDEX.tar.gz(1/8) Installing ca-certificates (20191127-r1)(2/8) Installing c-ares (1.15.0-r0)(3/8) Installing libgcc (9.2.0-r3)(4/8) Installing nghttp2-libs (1.40.0-r0)(5/8) Installing libstdc++ (9.2.0-r3)(6/8) Installing libuv (1.34.0-r0)(7/8) Installing nodejs (12.15.0-r1)(8/8) Installing npm (12.15.0-r1)Executing busybox-1.31.1-r9.triggerExecuting ca-certificates-20191127-r1.triggerOK: 64 MiB <span class="hljs-keyword">in</span> 22 packagesRemoving intermediate container 2ea8291a9c93 ---&gt; fa0d1c42c45dStep 4/8 : COPY . /src ---&gt; 3b1b01e51d16Step 5/8 : WORKDIR /src ---&gt; Running <span class="hljs-keyword">in</span> 6c3d53d9f756Removing intermediate container 6c3d53d9f756 ---&gt; ad8ccb0f4716Step 6/8 : RUN  npm install ---&gt; Running <span class="hljs-keyword">in</span> 46d8a8488130npm WARN deprecated json3@3.3.2: Please use the native JSON object instead of JSON 3npm WARN deprecated core-js@2.6.11: core-js@&lt;3 is no longer maintained and not recommended <span class="hljs-keyword">for</span> usage due to the number of issues. Please, upgrade your dependencies to the actual version of core-js@3.&gt; core-js@2.6.11 postinstall /src/node_modules/core-js&gt; node -e <span class="hljs-string">&quot;try&#123;require(&#x27;./postinstall&#x27;)&#125;catch(e)&#123;&#125;&quot;</span>Thank you <span class="hljs-keyword">for</span> using core-js ( https://github.com/zloirock/core-js ) <span class="hljs-keyword">for</span> polyfilling JavaScript standard library!The project needs your <span class="hljs-built_in">help</span>! Please consider supporting of core-js on Open Collective or Patreon: &gt; https://opencollective.com/core-js &gt; https://www.patreon.com/zloirock Also, the author of core-js ( https://github.com/zloirock ) is looking <span class="hljs-keyword">for</span> a good job -)npm notice created a lockfile as package-lock.json. You should commit this file.added 163 packages from 460 contributors and audited 262 packages <span class="hljs-keyword">in</span> 18.93s4 packages are looking <span class="hljs-keyword">for</span> funding  run `npm fund` <span class="hljs-keyword">for</span> detailsfound 5 vulnerabilities (2 low, 2 moderate, 1 critical)  run `npm audit fix` to fix them, or `npm audit` <span class="hljs-keyword">for</span> detailsRemoving intermediate container 46d8a8488130 ---&gt; fbd86f0eea99Step 7/8 : EXPOSE 8080 ---&gt; Running <span class="hljs-keyword">in</span> ea7262f068c0Removing intermediate container ea7262f068c0 ---&gt; 0f4af4a14d13Step 8/8 : ENTRYPOINT [<span class="hljs-string">&quot;node&quot;</span>, <span class="hljs-string">&quot;./app.js&quot;</span>] ---&gt; Running <span class="hljs-keyword">in</span> 15e56cd7d5edRemoving intermediate container 15e56cd7d5ed ---&gt; 8a31255e74a1Successfully built 8a31255e74a1Successfully tagged web:latest$ docker image lsREPOSITORY                                             TAG                 IMAGE ID            CREATED              SIZEweb                                                    latest              8a31255e74a1        About a minute ago   76.2MB$ docker image inspect web:latest// 确认刚刚构建的镜像配置是否正确，列出Dockerfile中设置的所有配置项。</code></pre><h3 id="推送镜像到仓库"><a href="#推送镜像到仓库" class="headerlink" title="推送镜像到仓库"></a>推送镜像到仓库</h3><p>登录到Docker Hub</p><pre><code class="hljs bash">$ docker loginLogin with your Docker ID to push and pull images from Docker Hub. If you don<span class="hljs-string">&#x27;t have a Docker ID, head over to https://hub.docker.com to create one.</span><span class="hljs-string">Username: yourname</span><span class="hljs-string">Password: </span><span class="hljs-string">Error saving credentials: error storing credentials - err: exec: &quot;docker-credential-osxkeychain&quot;: executable file not found in $PATH, out: ``</span><span class="hljs-string"></span><span class="hljs-string">// rm ~/.docker/config.json.</span><span class="hljs-string">// 可以解决上述错误</span><span class="hljs-string"></span><span class="hljs-string">localhost:psweb zhuyangze$ docker login</span><span class="hljs-string">Login with your Docker ID to push and pull images from Docker Hub. If you don&#x27;</span>t have a Docker ID, head over to https://hub.docker.com to create one.Username: yournamePassword: WARNING! Your password will be stored unencrypted <span class="hljs-keyword">in</span> /Users/xxxx/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/<span class="hljs-comment">#credentials-store</span>Login Succeeded</code></pre><p>推送Docker镜像之前，不需要为镜像打标签，Docker在镜像推送过程中需要如下信息：</p><ul><li>Registry（镜像仓库服务），默认值：docker.io</li><li>Repository（镜像仓库），无默认值</li><li>Tag（镜像标签），默认值：latest</li></ul><h4 id="为镜像打标签"><a href="#为镜像打标签" class="headerlink" title="为镜像打标签"></a>为镜像打标签</h4><p><code>docker image tag &lt;current-tag&gt; &lt;new-tag&gt;</code><br>为指定的镜像添加一个额外的标签，并且不需要覆盖已经存在的标签。</p><pre><code class="hljs bash">$ docker image tag web:latest mrlingchen/web:latestlocalhost:psweb xxxx$ docker image lsREPOSITORY                                             TAG                 IMAGE ID            CREATED             SIZEweb                                                    latest              8a31255e74a1        32 minutes ago      76.2MBmrlingchen/web                                         latest              8a31255e74a1        32 minutes ago      76.2MB</code></pre><p>推送镜像到Docker Hub</p><pre><code class="hljs bash">$ docker image push mrlingchen/web:latestThe push refers to repository [docker.io/mrlingchen/web]3c826da67148: Pushed 517a19fd4267: Pushed 433c1223c0c0: Pushed 5216338b40a7: Mounted from library/alpine latest: digest: sha256:3b623c4fc25f83b0e96d863c7d60064e19727e4aa557d220263126f65ad668da size: 1159</code></pre><p>Dockerfile文件中指令是<strong>不区分大小写</strong>的，但是通常都是采用大写的方式。这样的Dockerfile的可读性会高一些。<br>Docker image build命令会按行来解析Dockerfile中的指令并顺序执行。<br>关于如何区分命令是否会新建镜像层，一个基本的原则是，如果指令的作用是向镜像中增添新的文件或者程序，那么这条指令就会新建镜像层；如果只是告诉Docker如何完成构建或者如何运行应用程序，那么就只会增加镜像的元数据。</p><h3 id="查看构建镜像过程"><a href="#查看构建镜像过程" class="headerlink" title="查看构建镜像过程"></a>查看构建镜像过程</h3><p><code>docker image history</code></p><pre><code class="hljs bash">$ docker image <span class="hljs-built_in">history</span> web:latestIMAGE               CREATED             CREATED BY                                      SIZE                COMMENT8a31255e74a1        24 hours ago        /bin/sh -c <span class="hljs-comment">#(nop)  ENTRYPOINT [&quot;node&quot; &quot;./app…   0B                  </span>0f4af4a14d13        24 hours ago        /bin/sh -c <span class="hljs-comment">#(nop)  EXPOSE 8080                  0B                  </span>fbd86f0eea99        24 hours ago        /bin/sh -c npm install                          20.7MB              ad8ccb0f4716        24 hours ago        /bin/sh -c <span class="hljs-comment">#(nop) WORKDIR /src                  0B                  </span>3b1b01e51d16        24 hours ago        /bin/sh -c <span class="hljs-comment">#(nop) COPY dir:a1bb21301f1b629e0…   2.29kB              </span>fa0d1c42c45d        24 hours ago        /bin/sh -c apk add --update nodejs nodejs-npm   49.9MB              480c0e286f41        24 hours ago        /bin/sh -c <span class="hljs-comment">#(nop)  LABEL maintainer=nigelpou…   0B                  </span>e7d92cdc71fe        2 months ago        /bin/sh -c <span class="hljs-comment">#(nop)  CMD [&quot;/bin/sh&quot;]              0B                  </span>&lt;missing&gt;           2 months ago        /bin/sh -c <span class="hljs-comment">#(nop) ADD file:e69d441d729412d24…   5.59MB</span>// size不为0的行，指令会新建镜像层，size为0的行只是在镜像中新增了元数据信息</code></pre><p><code>docker image inspect</code>命令也会确认出新建的镜像层</p><pre><code class="hljs bash">$ docker image inspect web:latest...<span class="hljs-string">&quot;RootFS&quot;</span>: &#123;            <span class="hljs-string">&quot;Type&quot;</span>: <span class="hljs-string">&quot;layers&quot;</span>,            <span class="hljs-string">&quot;Layers&quot;</span>: [                <span class="hljs-string">&quot;sha256:5216338b40a7b96416b8b9858974bbe4acc3096ee60acbc4dfb1ee02aecceb10&quot;</span>,                <span class="hljs-string">&quot;sha256:433c1223c0c01ced5f0e3e6af341d360c54c98d368210c2cee38da91b42a3dda&quot;</span>,                <span class="hljs-string">&quot;sha256:517a19fd426774ed21a6b147880cf80fdc215d2e18f4af16687a7b9bf65e0b89&quot;</span>,                <span class="hljs-string">&quot;sha256:3c826da671482f888974a97a0176c3dc7ea3c88b4651c278f40f73c9419001b6&quot;</span>            ]        &#125;,...</code></pre><h3 id="生产环境中的多阶段构建"><a href="#生产环境中的多阶段构建" class="headerlink" title="生产环境中的多阶段构建"></a>生产环境中的多阶段构建</h3><p>对于Docker镜像来说，过大的体积并不好。<br>越大则越慢，这就意味着更难使用，而且可能更加脆弱，更容易遭受攻击。<br>Docker镜像应该尽量小。对于生产环境镜像来说，目标是将其缩小到仅包含运行应用所必需的内容即可。</p><p>建造者模式（Builder Pattern）</p><p>开发者通常不会在构建完成后进行清理。<br>建造者模式需要至少两个Dockerfile，一个用于开发环境，一个用于生产环境。<br><strong>多阶段构建（Multi-Stage Build）</strong>是一种更好的方式！<br>多阶段构建能够在不增加复杂性的情况下优化构建过程。</p><pre><code class="hljs bash">$ cat Dockerfile<span class="hljs-comment"># 阶段一</span>FROM node:latest AS storefrontWORKDIR /usr/src/atsea/app/react-appCOPY react-app .RUN npm installRUN npm run build<span class="hljs-comment"># 阶段二</span>FROM maven:latest AS appserverWORKDIR /usr/src/atseaCOPY pom.xml .RUN mvn -B -f pom.xml -s /usr/share/maven/ref/settings-docker.xml dependency:resolveCOPY . .RUN mvn -B -s /usr/share/maven/ref/settings-docker.xml package -DskipTests<span class="hljs-comment"># 阶段三</span>FROM java:8-jdk-alpineRUN adduser -Dh /home/gordon gordonWORKDIR /staticCOPY --from=storefront /usr/src/atsea/app/react-app/build/ .WORKDIR /appCOPY --from=appserver /usr/src/atsea/target/AtSea-0.0.1-SNAPSHOT.jar .ENTRYPOINT [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/app/AtSea-0.0.1-SNAPSHOT.jar&quot;</span>]CMD [<span class="hljs-string">&quot;--spring.profiles.active=postgres&quot;</span>]</code></pre><p>构建命令</p><pre><code class="hljs bash">$ docker image build -t multi:stage .</code></pre><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> containerizing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker容器</title>
      <link href="2020/03/17/docker-container/"/>
      <url>2020/03/17/docker-container/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h2><p>容器是镜像的运行时实例。<br>虚拟机和容器最大的区别是容器更快并且更轻量级—与虚拟机运行在完整的操作系统之上相比，容器会共享其所在主机的操作系统/内核。</p><p>启动容器的简便方式</p><pre><code class="hljs bash">$ docker container run &lt;image&gt; &lt;app&gt;$ docker container run -it &lt;image&gt; &lt;app&gt;// -it参数可以将当前终端连接到容器的Shell终端之上。</code></pre><p>容器会随着其中运行应用的退出而终止</p><pre><code class="hljs bash">$ docker container run alpine:latest sleep 10// Shell会连接到容器Shell 10s的时间，然后退出</code></pre><p>容器是操作系统虚拟化（OS Virtualization）—容器将系统资源划分为虚拟资源。</p><p>容器启动唯一需要确定的是位于容器下层操作系统的共享内核是启动的，容器可以在1s内启动。唯一对容器启动时间有影响的就是容器内应用启动所花费的时间。</p><h3 id="运行的容器"><a href="#运行的容器" class="headerlink" title="运行的容器"></a>运行的容器</h3><pre><code class="hljs bash">$ docker versionClient: Docker Engine - Community Version:           18.09.2 API version:       1.39 Go version:        go1.10.8 Git commit:        6247962 Built:             Sun Feb 10 04:12:39 2019 OS/Arch:           darwin/amd64 Experimental:      <span class="hljs-literal">false</span>Server: Docker Engine - Community Engine:  Version:          18.09.2  API version:      1.39 (minimum version 1.12)  Go version:       go1.10.6  Git commit:       6247962  Built:            Sun Feb 10 04:20:28 2019  OS/Arch:          linux/amd64  Experimental:     <span class="hljs-literal">false</span></code></pre><p>启动容器</p><pre><code class="hljs bash">$ docker container run -it ubuntu:latest /bin/bashroot@128ad43e07d9:/<span class="hljs-comment"># ls -l</span>total 64drwxr-xr-x   2 root root 4096 Feb  4  2019 bindrwxr-xr-x   2 root root 4096 Apr 24  2018 bootdrwxr-xr-x   5 root root  360 Mar 17 08:11 devdrwxr-xr-x   1 root root 4096 Mar 17 08:11 etcdrwxr-xr-x   2 root root 4096 Apr 24  2018 homedrwxr-xr-x   8 root root 4096 May 23  2017 libdrwxr-xr-x   2 root root 4096 Feb  4  2019 lib64drwxr-xr-x   2 root root 4096 Feb  4  2019 mediadrwxr-xr-x   2 root root 4096 Feb  4  2019 mntdrwxr-xr-x   2 root root 4096 Feb  4  2019 optdr-xr-xr-x 131 root root    0 Mar 17 08:11 procdrwx------   2 root root 4096 Feb  4  2019 rootdrwxr-xr-x   1 root root 4096 Feb  6  2019 rundrwxr-xr-x   1 root root 4096 Feb  6  2019 sbindrwxr-xr-x   2 root root 4096 Feb  4  2019 srvdr-xr-xr-x  13 root root    0 Mar 17 08:11 sysdrwxrwxrwt   2 root root 4096 Feb  4  2019 tmpdrwxr-xr-x   1 root root 4096 Feb  4  2019 usrdrwxr-xr-x   1 root root 4096 Feb  4  2019 varroot@128ad43e07d9:/<span class="hljs-comment"># ping www.docker.com</span>bash: ping: <span class="hljs-built_in">command</span> not found// ping工具包并不是官方Ubuntu镜像的一部分</code></pre><h4 id="启动容器命令"><a href="#启动容器命令" class="headerlink" title="启动容器命令"></a>启动容器命令</h4><pre><code class="hljs bash">$ docker container run &lt;options&gt; &lt;im- age&gt;:&lt;tag&gt; &lt;app&gt;// -it参数使容器具备交互性并与终端进行连接</code></pre><h3 id="容器进程"><a href="#容器进程" class="headerlink" title="容器进程"></a>容器进程</h3><pre><code class="hljs bash">root@128ad43e07d9:/<span class="hljs-comment"># ps -elf</span>F S UID        PID  PPID  C PRI  NI ADDR SZ WCHAN  STIME TTY          TIME CMD4 S root         1     0  0  80   0 -  4627 -      08:11 pts/0    00:00:00 /bin/bash4 R root        12     1  0  80   0 -  8600 -      08:17 pts/0    00:00:00 ps -elf// PID为1的进程是容器被告知要运行的Bash Shell，也是容器中运行的唯一运行的进程。</code></pre><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><pre><code class="hljs bash">root@128ad43e07d9:/<span class="hljs-comment"># exit</span><span class="hljs-built_in">exit</span>localhost:~ xxxx$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES// 容器如果不运行任何进程则无法存在</code></pre><p>退出容器而不终止容器，Ctrl + PQ  组合键</p><pre><code class="hljs bash">$ docker container run -it ubuntu:latest /bin/bashroot@0625ac544fde:/<span class="hljs-comment"># localhost:~ xxxx$ docker container ls</span>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES0625ac544fde        ubuntu:latest       <span class="hljs-string">&quot;/bin/bash&quot;</span>         20 seconds ago      Up 19 seconds                           elegant_diffie$ docker container <span class="hljs-built_in">exec</span> -it 0625ac544fde bashroot@0625ac544fde:/<span class="hljs-comment"># </span>// 重新连接到运行中的容器root@0625ac544fde:/<span class="hljs-comment"># ps -elf</span>F S UID        PID  PPID  C PRI  NI ADDR SZ WCHAN  STIME TTY          TIME CMD4 S root         1     0  0  80   0 -  4627 -      08:22 pts/0    00:00:00 /bin/bash4 S root        10     0  0  80   0 -  4627 -      08:24 pts/1    00:00:00 bash4 R root        19    10  0  80   0 -  8600 -      08:26 pts/1    00:00:00 ps -elf// docker container <span class="hljs-built_in">exec</span>命令创建了新的bashroot@0625ac544fde:/<span class="hljs-comment"># exit</span><span class="hljs-built_in">exit</span>localhost:~ xxxx$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES0625ac544fde        ubuntu:latest       <span class="hljs-string">&quot;/bin/bash&quot;</span>         5 minutes ago       Up 5 minutes                            elegant_diffie// 此时退出，容器中还有一个运行的bash进程，容器不会终止。</code></pre><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><pre><code class="hljs bash">localhost:~ xxxx$ docker container stop 0625ac544fde0625ac544fdelocalhost:~ xxxx$ docker container psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</code></pre><h3 id="容器生命周期"><a href="#容器生命周期" class="headerlink" title="容器生命周期"></a>容器生命周期</h3><p>关注容器的生命周期—从创建、运行、休眠，直至销毁的整个过程</p><pre><code class="hljs bash">$ docker container run --name percy -it ubuntu:latest /bin/bash// 创建容器root@87f5c7df3bd3:/<span class="hljs-comment"># cd tmp/</span>root@87f5c7df3bd3:/tmp<span class="hljs-comment"># ls -l</span>total 0root@87f5c7df3bd3:/tmp<span class="hljs-comment"># echo &quot;DevOps FTW&quot; &gt; newfile</span>root@87f5c7df3bd3:/tmp<span class="hljs-comment"># ls -l</span>total 4-rw-r--r-- 1 root root 11 Mar 17 08:36 newfileroot@87f5c7df3bd3:/tmp<span class="hljs-comment"># cat newfile </span>DevOps FTWroot@87f5c7df3bd3:/tmp<span class="hljs-comment"># </span>// Ctrl—PQ 组合键，退出容器localhost:~ xxxx$ docker container psCONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS               NAMES87f5c7df3bd3        ubuntu:latest       <span class="hljs-string">&quot;/bin/bash&quot;</span>         About a minute ago   Up About a minute                       percylocalhost:~ xxxx$ docker container stop percy// 停止容器percylocalhost:~ xxxx$ docker container psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMESlocalhost:~ xxxx$ docker container ls -a// -a 参数显示出全部的容器，包括处于停止状态的和运行状态的。CONTAINER ID        IMAGE                                                  COMMAND                  CREATED             STATUS                         PORTS                                      NAMES87f5c7df3bd3        ubuntu:latest                                          <span class="hljs-string">&quot;/bin/bash&quot;</span>              2 minutes ago       Exited (0) 45 seconds ago                                                 percy$ docker container start percy// 将容器重启percylocalhost:~ xxxx$ docker container psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES87f5c7df3bd3        ubuntu:latest       <span class="hljs-string">&quot;/bin/bash&quot;</span>         8 minutes ago       Up 8 seconds                            percy$ docker container <span class="hljs-built_in">exec</span> -it percy /bin/bash// 连接容器root@87f5c7df3bd3:/<span class="hljs-comment"># cd tmp/</span>root@87f5c7df3bd3:/tmp<span class="hljs-comment"># ls -l</span>total 4-rw-r--r-- 1 root root 11 Mar 17 08:36 newfileroot@87f5c7df3bd3:/tmp<span class="hljs-comment"># cat newfile </span>DevOps FTW// 证明停止容器运行并不会损毁容器或者其中的数据—————容器的持久化特性<span class="hljs-comment"># exit</span><span class="hljs-built_in">exit</span>localhost:~ xxxx$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES87f5c7df3bd3        ubuntu:latest       <span class="hljs-string">&quot;/bin/bash&quot;</span>         13 minutes ago      Up 5 minutes                            percylocalhost:~ xxxx$ docker container stop percy// 停止容器percylocalhost:~ xxxx$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMESlocalhost:~ xxxx$ docker container rm percy// 删除容器percylocalhost:~ xxxx$ docker container ls -aCONTAINER ID        IMAGE                                                  COMMAND                  CREATED             STATUS                         PORTS                                      NAMES</code></pre><p>容器的生命周期：可以根据需要多次停止、启动、暂停以及重启容器，并且这些操作执行的很快。但是容器及其数据是安全的。直至明确删除容器前，容器都不会丢弃其中的数据。就算容器被删除了，如果将容器数据存储在卷中，数据也会被保存下来。</p><h3 id="容器重启策略"><a href="#容器重启策略" class="headerlink" title="容器重启策略"></a>容器重启策略</h3><p>容器支持的重启策略—always、unless-stopped和on-failed</p><pre><code class="hljs bash">$ docker container run --name neversaydie -it --restart always alpine sh/ <span class="hljs-comment"># exit</span>localhost:~ xxxx$ docker container lsCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES11687455cb2a        alpine              <span class="hljs-string">&quot;sh&quot;</span>                25 seconds ago      Up 9 seconds                            neversaydie// Up 9 seconds 在容器中输入退出命令的同时的时候，容器被杀死，然后docker又重新启动了该容器。</code></pre><p>–restart always策略，当daemon重启的时候，停止的容器也会被重启。unless-stopped策略的容器则不会重启。</p><h3 id="删除所有容器"><a href="#删除所有容器" class="headerlink" title="删除所有容器"></a>删除所有容器</h3><pre><code class="hljs bash">$ docker container rm $(docker container ls -aq) -f// 谨慎使用$ docker container ls -aCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</code></pre><h3 id="Web服务器示例"><a href="#Web服务器示例" class="headerlink" title="Web服务器示例"></a>Web服务器示例</h3><pre><code class="hljs bash">$ docker container run -d --name webserver -p 80:8080 nigelpoulton/pluralsight-docker-ci// -d 参数表示后台模式，告知容器在后台运行// -p 80:8080 参数将Docker主机的端口映射到容器内的8080端口Unable to find image <span class="hljs-string">&#x27;nigelpoulton/pluralsight-docker-ci:latest&#x27;</span> locallylatest: Pulling from nigelpoulton/pluralsight-docker-ci729ec3a6ada3: Pull complete f0a3eea3dca0: Pull complete e07851c50ad6: Pull complete f78e7cd1f8dc: Pull complete 7cad1fbd2f07: Pull complete 22835c51693f: Pull complete Digest: sha256:61bc64850a5f2bfbc65967cc33feaae8a77c8b49379c55aaf05bb02dcee41451Status: Downloaded newer image <span class="hljs-keyword">for</span> nigelpoulton/pluralsight-docker-ci:latest51e5f3afca983b8170f1e21551c2f6e87f2cd627ea9d1931119573509a9fbc09localhost:hexo xxxx$ docker container lsCONTAINER ID        IMAGE                                COMMAND                  CREATED             STATUS              PORTS                  NAMES51e5f3afca98        nigelpoulton/pluralsight-docker-ci   <span class="hljs-string">&quot;/bin/sh -c &#x27;cd /src…&quot;</span>   2 minutes ago       Up 2 minutes        0.0.0.0:80-&gt;8080/tcp   webserver</code></pre><h4 id="查看docker-IP"><a href="#查看docker-IP" class="headerlink" title="查看docker IP"></a>查看docker IP</h4><pre><code class="hljs bash">$ docker-machine ip192.168.99.100http://192.168.99.100:80// 访问地址</code></pre><h4 id="查看容器详情"><a href="#查看容器详情" class="headerlink" title="查看容器详情"></a>查看容器详情</h4><pre><code class="hljs flix">$ docker image inspect nigelpoulton/pluralsight-docker-ci[    &#123;        <span class="hljs-string">&quot;Id&quot;</span>: <span class="hljs-string">&quot;sha256:dd7a37fe7c1e6f3b9bcd1c51cad0a54fde3f393ac458af3b009b2032978f599d&quot;</span>,        <span class="hljs-string">&quot;RepoTags&quot;</span>: [            <span class="hljs-string">&quot;nigelpoulton/pluralsight-docker-ci:latest&quot;</span>        ],        <span class="hljs-string">&quot;RepoDigests&quot;</span>: [            <span class="hljs-string">&quot;nigelpoulton/pluralsight-docker-ci@sha256:61bc64850a5f2bfbc65967cc33feaae8a77c8b49379c55aaf05bb02dcee41451&quot;</span>        ],        <span class="hljs-string">&quot;Parent&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,        <span class="hljs-string">&quot;Comment&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,        <span class="hljs-string">&quot;Created&quot;</span>: <span class="hljs-string">&quot;2020-01-18T15:29:24.3067368Z&quot;</span>,        <span class="hljs-string">&quot;Container&quot;</span>: <span class="hljs-string">&quot;5e6c8e135f3504d8cdbb3b0f4f7658018f7eafa99011bcb0252c34bad246844f&quot;</span>,        <span class="hljs-string">&quot;ContainerConfig&quot;</span>: &#123;            <span class="hljs-string">&quot;Hostname&quot;</span>: <span class="hljs-string">&quot;5e6c8e135f35&quot;</span>,            <span class="hljs-string">&quot;Domainname&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,            <span class="hljs-string">&quot;User&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,            <span class="hljs-string">&quot;AttachStdin&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-string">&quot;AttachStdout&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-string">&quot;AttachStderr&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-string">&quot;ExposedPorts&quot;</span>: &#123;                <span class="hljs-string">&quot;8080/tcp&quot;</span>: &#123;&#125;            &#125;,            <span class="hljs-string">&quot;Tty&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-string">&quot;OpenStdin&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-string">&quot;StdinOnce&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-string">&quot;Env&quot;</span>: [                <span class="hljs-string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span>            ],            <span class="hljs-string">&quot;Cmd&quot;</span>: [                <span class="hljs-string">&quot;/bin/sh&quot;</span>,                <span class="hljs-string">&quot;-c&quot;</span>,                <span class="hljs-string">&quot;#(nop) &quot;</span>,                <span class="hljs-string">&quot;CMD [\&quot;</span>/bin/sh\<span class="hljs-string">&quot; \&quot;</span>-c\<span class="hljs-string">&quot; \&quot;</span>cd /src &amp;&amp; node ./app.js\<span class="hljs-string">&quot;]&quot;</span>            ],            <span class="hljs-string">&quot;Image&quot;</span>: <span class="hljs-string">&quot;sha256:3eee35387b69036be84160c16d756c975ce6445f5460b19ada2c343d796a0a17&quot;</span>,....<span class="hljs-comment">// Cmd一项中展示了容器将会执行的命令或应用。</span></code></pre><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac-intelliJ-idea-快捷键记录</title>
      <link href="2020/03/16/mac-intelliJ-idea-hotkey/"/>
      <url>2020/03/16/mac-intelliJ-idea-hotkey/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Mac-IntelliJ-IDEA-快捷键大全"><a href="#Mac-IntelliJ-IDEA-快捷键大全" class="headerlink" title="Mac IntelliJ IDEA 快捷键大全"></a>Mac IntelliJ IDEA 快捷键大全</h2><h3 id="Mac键盘符号和修饰键说明"><a href="#Mac键盘符号和修饰键说明" class="headerlink" title="Mac键盘符号和修饰键说明"></a>Mac键盘符号和修饰键说明</h3><ul><li><code>⌘</code> Command</li><li><code>⇧</code> Shift</li><li><code>⌥</code> Option</li><li><code>⌃</code> Control</li><li><code>↩︎</code> Return/Enter</li><li><code>⌫</code> Delete</li><li><code>⌦</code> 向前删除键（Fn+Delete）</li><li><code>↑</code> 上箭头</li><li><code>↓</code> 下箭头</li><li><code>←</code> 左箭头</li><li><code>→</code> 右箭头</li><li><code>⇞</code> Page Up（Fn+↑）</li><li><code>⇟</code> Page Down（Fn+↓）</li><li><code>Home</code> Fn + ←</li><li><code>End</code> Fn + →</li><li><code>⇥</code> 右制表符（Tab键）</li><li><code>⇤</code> 左制表符（Shift+Tab）</li><li><code>⎋</code> Escape (Esc)</li></ul><h3 id="Editing（编辑）"><a href="#Editing（编辑）" class="headerlink" title="Editing（编辑）"></a>Editing（编辑）</h3><ul><li><code>⌃Space</code>  ：基本的代码补全（补全任何类、方法、变量）</li><li><code>⌃⇧Space</code>  ：智能代码补全（过滤器方法列表和变量的预期类型）</li><li><code>⌘⇧↩</code>  ：自动结束代码，行末自动添加分号</li><li><code>⌘P</code>  ：显示方法的参数信息</li><li><code>⌃J, Mid. button click</code>  ：快速查看文档</li><li><code>⇧F1</code>  ：查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</li><li><code>⌘+鼠标放在代码上</code>  ：显示代码简要信息</li><li><code>⌘F1</code>  ：在错误或警告处显示具体描述信息</li><li><code>⌘N, ⌃↩, ⌃N</code>  ：生成代码（getter、setter、构造函数、hashCode/equals,toString）</li><li><code>⌃O</code>  ：覆盖方法（重写父类方法）</li><li><code>⌃I</code>  ：实现方法（实现接口中的方法）</li><li><code>⌘⌥T</code>  ：包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）</li><li><code>⌘/</code>  ：注释/取消注释与行注释</li><li><code>⌘⌥/</code>  ：注释/取消注释与块注释</li><li><code>⌥↑</code>  ：连续选中代码块</li><li><code>⌥↓</code>  ：减少当前选中的代码块</li><li><code>⌃⇧Q</code>  ：显示上下文信息</li><li><code>⌥↩</code>  ：显示意向动作和快速修复代码</li><li><code>⌘⌥L</code>  ：格式化代码</li><li><code>⌃⌥O</code>  ：优化import</li><li><code>⌃⌥I</code>  ：自动缩进线</li><li><code>⇥ / ⇧⇥</code>  ：缩进代码 / 反缩进代码</li><li><code>⌘X</code>  ：剪切当前行或选定的块到剪贴板</li><li><code>⌘C</code>  ：复制当前行或选定的块到剪贴板</li><li><code>⌘V</code>  ：从剪贴板粘贴</li><li><code>⌘⇧V</code>  ：从最近的缓冲区粘贴</li><li><code>⌘D</code>  ：复制当前行或选定的块</li><li><code>⌘⌫</code>  ：删除当前行或选定的块的行</li><li><code>⌃⇧J</code>  ：智能的将代码拼接成一行</li><li><code>⌘↩</code>  ：智能的拆分拼接的行</li><li><code>⇧↩</code>  ：开始新的一行</li><li><code>⌘⇧U</code>  ：大小写切换</li><li><code>⌘⇧] / ⌘⇧[</code>  ：选择直到代码块结束/开始</li><li><code>⌥⌦</code>  ：删除到单词的末尾（⌦键为Fn+Delete）</li><li><code>⌥⌫</code>  ：删除到单词的开头</li><li><code>⌘+ / ⌘-</code>  ：展开 / 折叠代码块</li><li><code>⌘⇧+</code>  ：展开所以代码块</li><li><code>⌘⇧-</code>  ：折叠所有代码块</li><li><code>⌘W</code>  ：关闭活动的编辑器选项卡</li></ul><h3 id="Search-Replace（查询-替换）"><a href="#Search-Replace（查询-替换）" class="headerlink" title="Search/Replace（查询/替换）"></a>Search/Replace（查询/替换）</h3><ul><li><code>Double ⇧</code>  ：查询任何东西</li><li><code>⌘F</code>  ：文件内查找</li><li><code>⌘G</code>  ：查找模式下，向下查找</li><li><code>⌘⇧G</code>  ：查找模式下，向上查找</li><li><code>⌘R</code>  ：文件内替换</li><li><code>⌘⇧F</code>  ：全局查找（根据路径）</li><li><code>⌘⇧R</code>  ：全局替换（根据路径）</li><li><code>⌘⇧S</code>  ：查询结构（Ultimate Edition 版专用，需要在Keymap中设置）</li><li><code>⌘⇧M</code>  ：替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</li></ul><h3 id="Usage-Search（使用查询）"><a href="#Usage-Search（使用查询）" class="headerlink" title="Usage Search（使用查询）"></a>Usage Search（使用查询）</h3><ul><li><code>⌥F7 / ⌘F7</code>  ：在文件中查找用法 / 在类中查找用法</li><li><code>⌘⇧F7</code>  ：在文件中突出显示的用法</li><li><code>⌘⌥F7</code>  ：显示用法</li><li><code>⌘ + 7</code> ：<u>显示当前类的所有方法，全局常量，方法还包括形参和返回值</u></li></ul><h3 id="Compile-and-Run（编译和运行）"><a href="#Compile-and-Run（编译和运行）" class="headerlink" title="Compile and Run（编译和运行）"></a>Compile and Run（编译和运行）</h3><ul><li><code>⌘F9</code>  ：编译Project</li><li><code>⌘⇧F9</code>  ：编译选择的文件、包或模块</li><li><code>⌃⌥R</code>  ：弹出 Run 的可选择菜单</li><li><code>⌃⌥D</code>  ：弹出 Debug 的可选择菜单</li><li><code>⌃R</code>  ：运行</li><li><code>⌃D</code>  ：调试</li><li><code>⌃⇧R, ⌃⇧D</code>  ：从编辑器运行上下文环境配置</li></ul><h3 id="Debugging（调试）"><a href="#Debugging（调试）" class="headerlink" title="Debugging（调试）"></a>Debugging（调试）</h3><ul><li><code>F8</code>  ：进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li><li><code>F7</code>  ：进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</li><li><code>⇧F7</code>  ：智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</li><li><code>⇧F8</code>  ：跳出</li><li><code>⌥F9</code>  ：运行到光标处，如果光标前有其他断点会进入到该断点</li><li><code>⌥F8</code>  ：计算表达式（可以更改变量值使其生效）</li><li><code>⌘⌥R</code>  ：恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</li><li><code>⌘F8</code>  ：切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li><li><code>⌘⇧F8</code>  ：查看断点信息</li></ul><h3 id="Navigation（导航）"><a href="#Navigation（导航）" class="headerlink" title="Navigation（导航）"></a>Navigation（导航）</h3><ul><li><code>⌘O</code>  ：查找类文件</li><li><code>⌘⇧O</code>  ：查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠<code>/</code></li><li><code>⌘⌥O</code>  ：前往指定的变量 / 方法</li><li><code>⌃← / ⌃→</code>  ：左右切换打开的编辑tab页</li><li><code>F12</code>  ：返回到前一个工具窗口</li><li><code>⎋</code>  ：从工具窗口进入代码文件窗口</li><li><code>⇧⎋</code>  ：隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li><li><code>⌘⇧F4</code>  ：关闭活动run/messages/find/… tab</li><li><code>⌘L</code>  ：在当前文件跳转到某一行的指定处</li><li><code>⌘E</code>  ：显示最近打开的文件记录列表</li><li><code>⌘⌥← / ⌘⌥→</code>  ：退回 / 前进到上一个操作的地方</li><li><code>⌘⇧⌫</code>  ：跳转到最后一个编辑的地方</li><li><code>⌥F1</code>  ：显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li><li><code>⌘B / ⌘ 鼠标点击</code>  ：进入光标所在的方法/变量的接口或是定义处</li><li><code>⌘⌥B</code>  ：跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</li><li><code>⌥ Space, ⌘Y</code>  ：快速打开光标所在方法、类的定义</li><li><code>⌃⇧B</code>  ：跳转到类型声明处</li><li><code>⌘U</code>  ：前往当前光标所在方法的父类的方法 / 接口定义</li><li><code>⌃↓ / ⌃↑</code>  ：当前光标跳转到当前文件的前一个/后一个方法名位置</li><li><code>⌘\] / ⌘[</code>  ：移动光标到当前所在代码的花括号开始/结束位置</li><li><code>⌘F12</code>  ：<strong>弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</strong></li><li>⌃H`  ：显示当前类的层次结构</li><li><code>⌘⇧H</code>  ：显示方法层次结构</li><li><code>⌃⌥H</code>  ：显示调用层次结构</li><li><code>F2 / ⇧F2</code>  ：跳转到下一个/上一个突出错误或警告的位置</li><li><code>F4 / ⌘↓</code>  ：编辑/查看代码源</li><li><code>⌥ Home</code>  ：显示到当前文件的导航条</li><li><code>F3</code> ：选中文件/文件夹/代码行，添加/取消书签</li><li><code>⌥F3</code>  ：选中文件/文件夹/代码行，使用助记符添加/取消书签</li><li><code>⌃0...⌃9</code>  ：定位到对应数值的书签位置</li><li><code>⌘F3</code>  ：显示所有书签</li></ul><h3 id="Refactoring（重构）"><a href="#Refactoring（重构）" class="headerlink" title="Refactoring（重构）"></a>Refactoring（重构）</h3><ul><li><code>F5</code>  ：复制文件到指定目录</li><li><code>F6</code>  ：移动文件到指定目录</li><li><code>⌘⌫</code>  ：在文件上为安全删除文件，弹出确认框</li><li><code>⇧F6</code>  ：重命名文件</li><li><code>⌘F6</code>  ：更改签名</li><li><code>⌘⌥N</code>  ：一致性</li><li><code>⌘⌥M</code>  ：**<u>将选中的代码提取为方法</u>**</li><li><code>⌘⌥V</code>  ：提取变量</li><li><code>⌘⌥F</code>  ：提取字段</li><li><code>⌘⌥C</code>  ：提取常量</li><li><code>⌘⌥P</code>  ：提取参数</li></ul><h3 id="VCS-Local-History（版本控制-本地历史记录）"><a href="#VCS-Local-History（版本控制-本地历史记录）" class="headerlink" title="VCS/Local History（版本控制/本地历史记录）"></a>VCS/Local History（版本控制/本地历史记录）</h3><ul><li><code>⌘K</code>  ：提交代码到版本控制器</li><li><code>⌘T</code>  ：从版本控制器更新代码</li><li><code>⌥⇧C</code>  ：查看最近的变更记录</li><li><code>⌃C</code>  ：快速弹出版本控制器操作面板</li></ul><h3 id="Live-Templates（动态代码模板）"><a href="#Live-Templates（动态代码模板）" class="headerlink" title="Live Templates（动态代码模板）"></a>Live Templates（动态代码模板）</h3><ul><li><code>⌘⌥J</code> 弹出模板选择窗口，将选定的代码使用动态模板包住</li><li><code>⌘J</code> 插入自定义动态代码模板</li></ul><h3 id="General（通用）"><a href="#General（通用）" class="headerlink" title="General（通用）"></a>General（通用）</h3><ul><li><code>⌘1...⌘9</code>  ：打开相应编号的工具窗口</li><li><code>⌘S</code>  ：保存所有</li><li><code>⌘⌥Y</code>  ：同步、刷新</li><li><code>⌃⌘F</code>  ：切换全屏模式</li><li><code>⌘⇧F12</code>  ：切换最大化编辑器</li><li><code>⌥⇧F</code>  ：添加到收藏夹</li><li><code>⌥⇧I</code>  ：检查当前文件与当前的配置文件</li><li>`§⌃, ⌃``  ：快速切换当前的scheme（切换主题、代码样式等）</li><li><code>⌘,</code>  ：打开IDEA系统设置</li><li><code>⌘;</code>  ：打开项目结构对话框</li><li><code>⇧⌘A</code>  ：查找动作（可设置相关选项）</li><li><code>⌃⇥</code>  ：编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</li></ul><h3 id="Other（一些官方文档上没有体现的快捷键）"><a href="#Other（一些官方文档上没有体现的快捷键）" class="headerlink" title="Other（一些官方文档上没有体现的快捷键）"></a>Other（一些官方文档上没有体现的快捷键）</h3><ul><li><code>⌘⇧8</code>  ：竖编辑模式</li></ul><h4 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h4><ul><li>⌘O  ：查找类文件 Ctrl + N</li><li>⌘⌥O  ：前往指定的变量 / 方法 Ctrl + Shift + Alt + N</li><li>⌃← / ⌃→  ：左右切换打开的编辑tab页 Alt← / Alt→</li><li>⎋  ：从工具窗口进入代码文件窗口 ESC</li><li>⌘L  ：在当前文件跳转到某一行的指定处 Ctrl + G</li><li>⌘E  ：显示最近打开的文件记录列表 Ctrl + E</li><li>⌘⌥← / ⌘⌥→  ：退回 / 前进到上一个操作的地方 Ctrl + Alt + ← Ctrl + Alt + →</li><li>⌘⇧⌫  ：跳转到最后一个编辑的地方</li><li>⌃H  ：显示当前类的层次结构 Ctrl + H</li><li>⌘⇧H  ：显示方法层次结构</li><li>⌃⌥H  ：显示调用层次结构</li><li>F4 / ⌘↓  ：编辑/查看代码源</li><li>⌘⌥U  ：显示类UML图</li><li>⌃J  ：查看注释</li></ul><h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><ul><li>⌥⌦  ：删除到单词的末尾（⌦键为Fn+Delete）</li><li>⌥⌫  ：删除到单词的开头</li><li>⌘+ / ⌘-  ：展开 / 折叠代码块</li><li>⌘F1  ：在错误或警告处显示具体描述信息</li><li>⌘⌥L  ：格式化代码</li><li>⌃⌥O  ：优化import</li><li>⇧↩  ：开始新的一行</li><li>⌘⇧↩  ：自动结束代码，行末自动添加分号</li><li>⌃I  ：实现方法（实现接口中的方法）</li><li>⇧F6  ：**<u>重命名文件或者变量</u>**</li><li>⌘N, ⌃↩, ⌃N  ：生成代码（getter、setter、构造函数、hashCode/equals,toString）</li><li>⌘P  ：显示方法的参数信息</li></ul><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><ul><li>Double⇧  ：查找任何东西</li><li>⌘⇧F  ：全局查找（根据路径）</li><li>⌘F  ：文件内查找</li><li>⌘G  ：查找模式下，向下查找</li><li>⌘⇧G  ：查找模式下，向上查找</li></ul><h4 id="导航-1"><a href="#导航-1" class="headerlink" title="导航"></a>导航</h4><ul><li>⌘⌥B  ：跳转到接口的实现</li><li>⌘U  ：查看接口定义</li><li>⌘⌥← / ⌘⌥→  ：退回 / 前进到上一个操作的地方</li><li>⌘B / ⌘  ：鼠标点击 进入光标所在的方法/变量的接口或是定义处</li><li>⌃⇧B  ：跳转到类型声明处</li><li>⌥ Space, ⌘Y  ：快速打开光标所在方法、类的定义</li><li>⌘O  ：查找类文件</li><li>⌘⇧O  ：查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</li><li>F12  ：返回到前一个工具窗口</li><li>⎋ ：从工具窗口进入代码文件窗口</li><li>⇧⎋  ：隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li><li>F3 ：选中文件/文件夹/代码行，添加/取消书签</li><li>⌥F3 ：选中文件/文件夹/代码行，使用助记符添加/取消书签</li><li>⌃0…⌃9 ：定位到对应数值的书签位置</li><li>⌘F3 ：显示所有书签</li><li>⌥F1 ：显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li><li><strong>⌘F12 ：弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</strong></li></ul><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><ul><li>⌃⌘F 切换全屏模式</li></ul><p>ps: 摘录于链接，仅供学习。</p><pre><code class="hljs http"><span class="hljs-attribute">https://mp.weixin.qq.com/s/IDGZ6GPYGuJIUcWajdbtNQ</span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> idea </tag>
            
            <tag> hot-key </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webstorm和JetBrains-IDE-Support插件安装使用</title>
      <link href="2020/03/16/webstorm-ide-support/"/>
      <url>2020/03/16/webstorm-ide-support/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Webstorm和JetBrains-IDE-Support插件安装使用"><a href="#Webstorm和JetBrains-IDE-Support插件安装使用" class="headerlink" title="Webstorm和JetBrains-IDE-Support插件安装使用"></a>Webstorm和JetBrains-IDE-Support插件安装使用</h2><p>JetBrains IDE Support是一款支持编译即时显示在浏览器上调试的谷歌浏览器插件。<br>作为web开发人员常用的开发者插件，程序员习惯称之为JB插件。<br>这款调试插件需要与一些开发工具结合使用，比如JetBrains公司发布的一个web开发IDE，webstorm！支持代码提示、补全、定位、与Git集成等等各种功能，已经跟传统强类型语言的开发环境感觉无多大差异。</p><h3 id="chrome插件安装"><a href="#chrome插件安装" class="headerlink" title="chrome插件安装"></a>chrome插件安装</h3><p>chrome -&gt; 更多工具 -&gt; 扩展程序 -&gt; 打开Chrome网上应用店<br>搜索“webstorm”，添加JetBrains-IDE-Support插件。</p><p><img src="/2020/03/16/webstorm-ide-support/1.png" alt="JetBrains-IDE-Support插件"></p><p>安装好的效果</p><p><img src="/2020/03/16/webstorm-ide-support/2.png" alt="JetBrains-IDE-Support效果图"></p><h3 id="webstorm设置"><a href="#webstorm设置" class="headerlink" title="webstorm设置"></a>webstorm设置</h3><p>操作：webstorm -&gt; Preferences -&gt; 搜索框输入（Live Edit） -&gt; 将下方几项全部勾选，如下图</p><p><img src="/2020/03/16/webstorm-ide-support/3.png" alt="webstorm设置"></p><h3 id="调试静态页面"><a href="#调试静态页面" class="headerlink" title="调试静态页面"></a>调试静态页面</h3><p>在静态文件html（右击） -&gt; Debug xxx.html -&gt; 在chrome浏览器中打开该页面。</p><p><img src="/2020/03/16/webstorm-ide-support/4.png" alt="debug操作"></p><p><img src="/2020/03/16/webstorm-ide-support/5.png" alt="chrome调试图"></p><p>此时，在webstorm中修改html文件或者css，js时，在浏览器中会实时刷新，显示出效果。</p><p><img src="/2020/03/16/webstorm-ide-support/6.png" alt="修改代码"></p>]]></content>
      
      
      
        <tags>
            
            <tag> webstorm </tag>
            
            <tag> chrome </tag>
            
            <tag> IDE-support </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker镜像</title>
      <link href="2020/03/15/docker-images/"/>
      <url>2020/03/15/docker-images/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><p>镜像由多个层组成，每层叠加之后，从外部看来就如一个独立的对象。<br>镜像内部是一个精简的操作系统（OS），同时还包含应用运行所必须的文件和依赖包。<br>容器的设计初衷就是快速和小巧，所以镜像通常都比较小。</p><p>镜像可以理解为一种构建时结构，而容器可以理解为一种运行时结构。</p><h3 id="检查本地镜像"><a href="#检查本地镜像" class="headerlink" title="检查本地镜像"></a>检查本地镜像</h3><pre><code class="hljs bash">$ docker image lsREPOSITORY                                             TAG                 IMAGE ID            CREATED             SIZEminio/minio                                            latest              6efa3219bc21        8 months ago        60.9MBmyjava3                                                latest              4192d501c33b        9 months ago        643MB</code></pre><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><pre><code class="hljs bash">$ docker image pull alpine:latestlatest: Pulling from library/alpinec9b1b535fdd9: Pull complete Digest: sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367dStatus: Downloaded newer image <span class="hljs-keyword">for</span> alpine:latest$ docker image lsREPOSITORY                                             TAG                 IMAGE ID            CREATED             SIZEalpine                                                 latest              e7d92cdc71fe        8 weeks ago         5.59MB</code></pre><h3 id="镜像仓库服务"><a href="#镜像仓库服务" class="headerlink" title="镜像仓库服务"></a>镜像仓库服务</h3><p>官方仓库：Docker Hub<br>非官方仓库</p><h3 id="镜像命名和标签"><a href="#镜像命名和标签" class="headerlink" title="镜像命名和标签"></a>镜像命名和标签</h3><p>命令格式</p><pre><code class="hljs bash">$ docker image pull &lt;repository&gt;:&lt;tag&gt;$ docker image pull alpine:latest$ docker image pull mongo:3.3.11// 该命令从官方Mongo库拉取标签为3.3.11的镜像</code></pre><p>一个镜像可以根据用户需要设置多个标签，latest是一个非强制标签，不保证指向仓库中最新的镜像。</p><h3 id="悬虚镜像"><a href="#悬虚镜像" class="headerlink" title="悬虚镜像"></a>悬虚镜像</h3><p>悬虚镜像，在列表展示为<none>:<none>。通常是因为构建一个新镜像，然后为该镜像打了一个已经存在的标签。Docker发现已经有镜像包含相同的标签，接着Docker会移除旧镜像上面的标签，将该标签标在新的镜像上。旧镜像就变成了悬虚镜像。</none></none></p><pre><code class="hljs bash">$ docker image ls --filter dangling=<span class="hljs-literal">true</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE&lt;none&gt;              &lt;none&gt;              b940e6102c2d        12 months ago       222MB</code></pre><h3 id="镜像过滤"><a href="#镜像过滤" class="headerlink" title="镜像过滤"></a>镜像过滤</h3><pre><code class="hljs bash">$ docker image ls --filter=reference=<span class="hljs-string">&quot;*:latest&quot;</span>// 使用reference完成过滤并且仅显示标签为latest的示例REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEalpine              latest              e7d92cdc71fe        8 weeks ago         5.59MBmyjava3             latest              4192d501c33b        9 months ago        643MBmongo               latest              a3abd47e8d61        12 months ago       394MBubuntu              latest              47b19964fb50        13 months ago       88.1MBjava                latest              d23bdf5b1b1b        3 years ago         643MB$ docker image ls --format <span class="hljs-string">&quot;&#123;&#123;.Size&#125;&#125;&quot;</span>// 返回Docker主机上镜像的大小属性5.59MB60.9MB643MB301MB194MB394MB222MB222MB222MB$ docker image ls --format <span class="hljs-string">&quot;&#123;&#123;.Repository&#125;&#125;:&#123;&#123;.Tag&#125;&#125;:&#123;&#123;.Size&#125;&#125;&quot;</span>// 返回全部镜像，只显示仓库、标签和大小信息alpine:latest:5.59MBminio/minio:latest:60.9MBmyjava3:latest:643MBcentos:6:301MB</code></pre><h3 id="搜索仓库镜像"><a href="#搜索仓库镜像" class="headerlink" title="搜索仓库镜像"></a>搜索仓库镜像</h3><pre><code class="hljs bash">$ docker search alpineNAME                                   DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDalpine                                 A minimal Docker image based on Alpine Linux…   6234                [OK]                mhart/alpine-node                      Minimal Node.js built on Alpine Linux           460                                     </code></pre><p>“NAME”字段是仓库名称，包含了Docker ID,或者非官方仓库的组织名称。</p><pre><code class="hljs bash">$ docker search alpine --filter <span class="hljs-string">&quot;is-official=true&quot;</span>// --filter <span class="hljs-string">&quot;is-official=true&quot;</span> 只返回官方镜像NAME                DESCRIPTION                                     STARS               OFFICIAL            AUTOMATEDalpine              A minimal Docker image based on Alpine Linux…   6234                [OK]</code></pre><h3 id="镜像与分层"><a href="#镜像与分层" class="headerlink" title="镜像与分层"></a>镜像与分层</h3><p>Docker镜像由一些松耦合的只读镜像层组成。<br>Docker负责堆叠这些镜像层，并且将它们表示为单个统一的对象。</p><p><img src="/2020/03/15/docker-images/1.png" alt="Docker镜像与分层"></p><p>查看image分层方式</p><pre><code class="hljs bash">$ docker image inspect ubuntu:latest...<span class="hljs-string">&quot;RootFS&quot;</span>: &#123;            <span class="hljs-string">&quot;Type&quot;</span>: <span class="hljs-string">&quot;layers&quot;</span>,            <span class="hljs-string">&quot;Layers&quot;</span>: [                <span class="hljs-string">&quot;sha256:bebe7ce6215aee349bee5d67222abeb5c5a834bbeaa2f2f5d05363d9fd68db41&quot;</span>,                <span class="hljs-string">&quot;sha256:283fb404ea9415ab48456fd8a82b153b1a719491cdf7b806d1853b047d00f27f&quot;</span>,                <span class="hljs-string">&quot;sha256:663e8522d78b5b767f15b2e43885da5975068e3195bbbfa8fc3a082297a361c1&quot;</span>,                <span class="hljs-string">&quot;sha256:4b7d93055d8781d27259ba5780938e6a78d8ef691c94ee9abc3616c1b009ec4a&quot;</span>            ]        &#125;,...// Layers，显示了镜像包含了多少个镜像层</code></pre><p>所有的Docker镜像都起始于一个基础镜像层，当进行修改或增加新的内容时，就会在当前镜像层之上，创建新的镜像层。</p><h3 id="共享镜像层"><a href="#共享镜像层" class="headerlink" title="共享镜像层"></a>共享镜像层</h3><p>多个镜像之间可以并且确实会共享镜像层。这样可以有效节省空间并提升性能。</p><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>每次拉取镜像时，摘要都会作为docker image pull 命令返回代码的一部分。</p><pre><code class="hljs bash">$ docker image ls --digests alpineREPOSITORY          TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZEalpine              latest              sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367d   e7d92cdc71fe        8 weeks ago         5.59MB</code></pre><p>现在已知镜像的摘要，那么可以使用摘要值再次拉取这个镜像。这种方式可以确保准确拉取想要的镜像。</p><pre><code class="hljs bash">$ docker image rm alpine:latest// 删除当前镜像（alpine:latest）Untagged: alpine:latestUntagged: alpine@sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367dDeleted: sha256:e7d92cdc71feacf90708cb59182d0df1b911f8ae022d29e8e95d75ca6a99776aDeleted: sha256:5216338b40a7b96416b8b9858974bbe4acc3096ee60acbc4dfb1ee02aecceb10$ docker image pull alpine@sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367d// 根据摘要拉取镜像（alpine）sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367d: Pulling from library/alpinec9b1b535fdd9: Pull complete Digest: sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367dStatus: Downloaded newer image <span class="hljs-keyword">for</span> alpine@sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367d$ docker image ls alpineREPOSITORY          TAG                 IMAGE ID            CREATED             SIZEalpine              &lt;none&gt;              e7d92cdc71fe        8 weeks ago         5.59MB</code></pre><h3 id="多层架构的镜像"><a href="#多层架构的镜像" class="headerlink" title="多层架构的镜像"></a>多层架构的镜像</h3><p>Docker最值得称赞的一点就是使用方便。运行一个应用就像拉取镜像并运行容器这么简单。无须担心安装、依赖或者配置的问题。开箱即用。</p><p>Docker（镜像和镜像仓库服务）规范目前支持多架构镜像。这意味着某个镜像仓库标签（repository:tag）下的镜像可以同时支持64位Linux、PowerPC Linux、64位Windows和ARM等多种架构。<br>为了实现这个特性，镜像仓库服务API支持两种重要的结构：Manifest列表（新）和Manifest。</p><p><img src="/2020/03/15/docker-images/2.png" alt="多层架构镜像"></p><pre><code class="hljs bash">$ docker container run --rm golang go version// 选择当前平台和架构所需的正确镜像版本是由Docker来完成的Unable to find image <span class="hljs-string">&#x27;golang:latest&#x27;</span> locallylatest: Pulling from library/golang50e431f79093: Pull complete dd8c6d374ea5: Pull complete c85513200d84: Pull complete 55769680e827: Pull complete 15357f5e50c4: Pull complete 9edb2e455d9d: Pull complete ed2acfe844ed: Pull complete Digest: sha256:d27017d27f9c9a58b361aa36126a29587ffd3b1b274af0d583fe4954365a4a59Status: Downloaded newer image <span class="hljs-keyword">for</span> golang:latestgo version go1.14 linux/amd64</code></pre><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p>删除操作会在当前主机上删除该镜像以及相关的镜像层。这意味着无法通过docker image ls 命令查看到删除后的镜像，并且对应的包含镜像层数据的目录会被删除。可以通过镜像ID来删除镜像。</p><pre><code class="hljs bash">$ docker image lsREPOSITORY                                             TAG                 IMAGE ID            CREATED             SIZEgolang                                                 latest              25c4671a1478        2 weeks ago         809MBalpine                                                 &lt;none&gt;              e7d92cdc71fe        8 weeks ago         5.59MB$ docker image rm e7d92cdc71fe// 根据image id来删除镜像Untagged: alpine@sha256:ab00606a42621fb68f2ed6ad3c88be54397f981a7b70a79db3d1172b11c4367dDeleted: sha256:e7d92cdc71feacf90708cb59182d0df1b911f8ae022d29e8e95d75ca6a99776aDeleted: sha256:5216338b40a7b96416b8b9858974bbe4acc3096ee60acbc4dfb1ee02aecceb10$ docker image ls alpineREPOSITORY          TAG                 IMAGE ID            CREATED             SIZE$ docker image ls -q// 返回系统中本地拉取的全部镜像的ID列表25c4671a1478e7d92cdc71fe6efa3219bc214192d501c33b$ docker image rm $(docker image ls -q) -f// 删除主机上全部镜像</code></pre><p><u>ps: 本文摘取于《深入浅出Docker》一书，仅供学习参考</u></p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> image </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSO单点登录</title>
      <link href="2020/03/11/oauth2-sso/"/>
      <url>2020/03/11/oauth2-sso/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="SSO单点登录"><a href="#SSO单点登录" class="headerlink" title="SSO单点登录"></a>SSO单点登录</h2><h3 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h3><p>单点登录，英文全称Single Sign On，简称就是SSO。它的解释是：在多个应用系统中，只需要登录一次，就可以访问其他相互信任的应用系统。可分为同域下的单点登录，不同域下的单点登录（Cookie是不能跨域的）。</p><p>CAS流程—这个流程是单点登录的标准流程。</p><p><img src="/2020/03/11/oauth2-sso/1.png" alt="单点登录流程"></p><ul><li>单点登录（SSO系统）是保障各业务系统的用户资源的安全 。</li><li>各个业务系统获得的信息是，这个用户能不能访问我的资源。</li><li>单点登录，资源都在各个业务系统这边，不在SSO那一方。 用户在给SSO服务器提供了用户名密码后，作为业务系统并不知道这件事。 SSO随便给业务系统一个ST，那么业务系统是不能确定这个ST是用户伪造的，还是真的有效，所以要拿着这个ST去SSO服务器再问一下，这个用户给我的ST是否有效，是有效的我才能让这个用户访问。</li></ul><p>注明：以上内容摘录于以下链接，仅供学习记录。<br><code>https://yq.aliyun.com/articles/636281</code></p><h3 id="搭建第三方客户端服务"><a href="#搭建第三方客户端服务" class="headerlink" title="搭建第三方客户端服务"></a>搭建第三方客户端服务</h3><p>构建oauth2-client应用，它将使用Spring Cloud Security提供的单点登录功能。oauth2-client将封装客户端与授权服务器交互的流程，使用户可以使用第三方登录的方式登录客户端应用。</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>chapter12-oauth2-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>chapter12-oauth2-client<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Finchley.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--eureka client--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--web config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--security config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--actuator config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--lombok config. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--test config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">oauth2-client</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8888</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;vcap.application.instance_id:$&#123;spring.application.instance_id:$&#123;random.value&#125;&#125;&#125;</span>  <span class="hljs-attr">client:</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">default-zone:</span> <span class="hljs-string">http://localhost:8761/eureka/,</span> <span class="hljs-string">http://localhost:8762/eureka/</span><span class="hljs-attr">security:</span>  <span class="hljs-attr">oauth2:</span>    <span class="hljs-attr">client:</span>      <span class="hljs-attr">client-id:</span> <span class="hljs-string">client</span>      <span class="hljs-attr">client-secret:</span> <span class="hljs-string">secret</span>      <span class="hljs-attr">access-token-uri:</span> <span class="hljs-string">http://localhost:8766/oauth/token</span>      <span class="hljs-attr">user-authorization-uri:</span> <span class="hljs-string">http://localhost:8766/oauth/authorize</span>      <span class="hljs-attr">client-authentication-scheme:</span> <span class="hljs-string">form</span>    <span class="hljs-attr">resource:</span>      <span class="hljs-attr">user-info-uri:</span> <span class="hljs-string">http://localhost:8767/user</span>      <span class="hljs-attr">prefer-token-info:</span> <span class="hljs-literal">false</span></code></pre><h4 id="添加SecurityConfig配置文件"><a href="#添加SecurityConfig配置文件" class="headerlink" title="添加SecurityConfig配置文件"></a>添加SecurityConfig配置文件</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.config;<span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.security.oauth2.client.EnableOAuth2Sso;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 单点登录配置</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Component</span><span class="hljs-meta">@EnableOAuth2Sso</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        http.csrf().disable()                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)                .and()                .requestMatchers().anyRequest()                .and()                .authorizeRequests()                .antMatchers(<span class="hljs-string">&quot;/user/**&quot;</span>).authenticated()                .and()                .formLogin().successForwardUrl(<span class="hljs-string">&quot;/index&quot;</span>)                .and()                .logout().logoutUrl(<span class="hljs-string">&quot;/logout&quot;</span>).permitAll()                .logoutSuccessUrl(<span class="hljs-string">&quot;/&quot;</span>);    &#125;&#125;</code></pre><h4 id="访问接口"><a href="#访问接口" class="headerlink" title="访问接口"></a>访问接口</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.controller;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-keyword">import</span> java.security.Principal;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 访问接口</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping(method = RequestMethod.GET)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome to the main index!&quot;</span>;    &#125;    <span class="hljs-meta">@RequestMapping(value = &quot;/index&quot;, method = RequestMethod.GET)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Welcome to the index!&quot;</span>;    &#125;    <span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.GET)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Principal <span class="hljs-title">principal</span><span class="hljs-params">(Principal user)</span> </span>&#123;        <span class="hljs-keyword">return</span> user;    &#125;&#125;</code></pre><h4 id="授权服务器配置"><a href="#授权服务器配置" class="headerlink" title="授权服务器配置"></a>授权服务器配置</h4><p>authorization-server应用中修改客户端的回调地址</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.config;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 授权服务器配置。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-meta">@EnableAuthorizationServer</span><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthorizationServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizationServerConfigurerAdapter</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    AuthenticationManager authenticationManager;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置一个客户端</span><span class="hljs-comment">     * 即可以通过授权码类型获取令牌，也可以通过密码类型获取令牌。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clients</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(ClientDetailsServiceConfigurer clients)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        clients.inMemory()                <span class="hljs-comment">// 客户端ID</span>                .withClient(<span class="hljs-string">&quot;client&quot;</span>)                <span class="hljs-comment">// 客户端可以使用的授权类型</span>                .authorizedGrantTypes(<span class="hljs-string">&quot;authorization_code&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;refresh_token&quot;</span>, <span class="hljs-string">&quot;implicit&quot;</span>)                <span class="hljs-comment">// 允许请求范围</span>                .scopes(<span class="hljs-string">&quot;all&quot;</span>)                <span class="hljs-comment">// 客户端安全码</span>                .secret(<span class="hljs-string">&quot;secret&quot;</span>)                <span class="hljs-comment">// 回调地址（第三方客户端的IP地址）</span>                .redirectUris(<span class="hljs-string">&quot;http://xxx.xxx.x.xxx:8888/&quot;</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置AuthorizationServer tokenServices.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> endpoints</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 将令牌保存到内存中，也可以保存到数据库中，或者是Redis中</span>        endpoints.tokenStore(<span class="hljs-keyword">new</span> InMemoryTokenStore())                .accessTokenConverter(accessTokenConverter())                .authenticationManager(authenticationManager)                .reuseRefreshTokens(<span class="hljs-keyword">false</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置JWT转换器。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> JwtAccessTokenConverter <span class="hljs-title">accessTokenConverter</span><span class="hljs-params">()</span> </span>&#123;        JwtAccessTokenConverter jwtAccessTokenConverter = <span class="hljs-keyword">new</span> JwtAccessTokenConverter();        <span class="hljs-comment">// 设置JWT的签名的密钥为：secret</span>        jwtAccessTokenConverter.setSigningKey(<span class="hljs-string">&quot;secret&quot;</span>);        <span class="hljs-keyword">return</span> jwtAccessTokenConverter;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthorizationServerSecurityConfigurer security)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        security.tokenKeyAccess(<span class="hljs-string">&quot;permitAll()&quot;</span>)                .checkTokenAccess(<span class="hljs-string">&quot;isAuthenticated()&quot;</span>)                .allowFormAuthenticationForClients();    &#125;&#125;</code></pre><h4 id="资源服务器配置"><a href="#资源服务器配置" class="headerlink" title="资源服务器配置"></a>资源服务器配置</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.controller;<span class="hljs-keyword">import</span> com.lc.dto.Instance;<span class="hljs-keyword">import</span> com.lc.dto.User;<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.authentication.BearerTokenExtractor;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-keyword">import</span> java.security.Principal;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 资源访问控制器。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-meta">@RestController</span><span class="hljs-meta">@Slf4j</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResourceController</span> </span>&#123;    BearerTokenExtractor tokenExtractor = <span class="hljs-keyword">new</span> BearerTokenExtractor();    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> ResourceServerTokenServices tokenServices;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 根据访问令牌获取用户认证信息的接口。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> req</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Principal <span class="hljs-title">userInfo</span><span class="hljs-params">(ServletRequest req)</span> </span>&#123;        <span class="hljs-keyword">final</span> HttpServletRequest request = (HttpServletRequest) req;        Authentication authentication = tokenExtractor.extract(request);        String token = (String) authentication.getPrincipal();        <span class="hljs-keyword">return</span> tokenServices.loadAuthentication(token);    &#125;&#125;</code></pre><p>配置文件中注入ResourceServerTokenServices Bean</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.config;<span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.http.client.ClientHttpResponse;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.RemoteTokenServices;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.ResourceServerTokenServices;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtTokenStore;<span class="hljs-keyword">import</span> org.springframework.web.client.DefaultResponseErrorHandler;<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 资源服务器配置。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableResourceServer</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResourceServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ResourceServerConfigurerAdapter</span> </span>&#123;<span class="hljs-comment">//    @Autowired</span><span class="hljs-comment">//    private RestTemplate restTemplate;</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(ResourceServerSecurityConfigurer resources)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">//resources.tokenStore(new JwtTokenStore(accessTokenConverter()))</span>        <span class="hljs-comment">//        .stateless(true);</span>        resources.tokenServices(tokenServices())                .stateless(<span class="hljs-keyword">true</span>);    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> ResourceServerTokenServices <span class="hljs-title">tokenServices</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">// 从AuthorizationServer中获取令牌服务。</span>        RemoteTokenServices tokenServices = <span class="hljs-keyword">new</span> RemoteTokenServices();        tokenServices.setAccessTokenConverter(accessTokenConverter());        <span class="hljs-comment">// 为restTemplate配置异常处理器，忽略400错误</span>        RestTemplate restTemplate = restTemplate();        restTemplate.setErrorHandler(<span class="hljs-keyword">new</span> DefaultResponseErrorHandler() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleError</span><span class="hljs-params">(ClientHttpResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;                <span class="hljs-keyword">if</span> (response.getRawStatusCode() != <span class="hljs-number">400</span>) &#123;                    <span class="hljs-keyword">super</span>.handleError(response);                &#125;            &#125;        &#125;);        tokenServices.setRestTemplate(restTemplate);        tokenServices.setCheckTokenEndpointUrl(<span class="hljs-string">&quot;http://AUTHORIZATION-SERVER/oauth/check_token&quot;</span>);        tokenServices.setClientId(<span class="hljs-string">&quot;client&quot;</span>);        tokenServices.setClientSecret(<span class="hljs-string">&quot;secret&quot;</span>);        <span class="hljs-keyword">return</span> tokenServices;    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-meta">@LoadBalanced</span>    <span class="hljs-function">RestTemplate <span class="hljs-title">restTemplate</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置JWT转换器。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> JwtAccessTokenConverter <span class="hljs-title">accessTokenConverter</span><span class="hljs-params">()</span> </span>&#123;        JwtAccessTokenConverter converter = <span class="hljs-keyword">new</span> JwtAccessTokenConverter();        converter.setSigningKey(<span class="hljs-string">&quot;secret&quot;</span>);        <span class="hljs-keyword">return</span> converter;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置资源服务器的拦截规则。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> http</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)                .and()                .requestMatchers().anyRequest()                .and()                .anonymous()                .and()                .authorizeRequests()                .antMatchers(<span class="hljs-string">&quot;/user/**&quot;</span>).authenticated()                .and()                .exceptionHandling().accessDeniedHandler(<span class="hljs-keyword">new</span> OAuth2AccessDeniedHandler());    &#125;&#125;</code></pre><p>启动Eureka Server、授权服务器、资源服务器以及本服务，效果如下</p><p><img src="/2020/03/11/oauth2-sso/2.png" alt="启动服务"></p><h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p><code>http://xxx.xxx.xxx.xx6:8888/</code></p><pre><code class="hljs html">Welcome to the main index!</code></pre><p><code>http://xxx.xxx.xxx.xx6:8888/index</code></p><pre><code class="hljs html">Welcome to the index!</code></pre><p><code>http://xxx.xxx.xxx.xx6:8888/user</code></p><p><img src="/2020/03/11/oauth2-sso/5.png" alt="认证访问"></p><p>返回结果</p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;authorities&quot;</span>: [        &#123;            <span class="hljs-attr">&quot;authority&quot;</span>: <span class="hljs-string">&quot;USER&quot;</span>        &#125;    ],    <span class="hljs-attr">&quot;details&quot;</span>: &#123;        <span class="hljs-attr">&quot;remoteAddress&quot;</span>: <span class="hljs-string">&quot;xxx.xxx.x.xxx&quot;</span>,        <span class="hljs-attr">&quot;sessionId&quot;</span>: <span class="hljs-string">&quot;2335CEC749CF3C65D7E1FC6E2B78837A&quot;</span>,        <span class="hljs-attr">&quot;tokenValue&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODM5NjM2NTQsInVzZXJfbmFtZSI6InVzZXJfYXV0aG9yaXphdGlvbl9jb2RlIiwiYXV0aG9yaXRpZXMiOlsiVVNFUiJdLCJqdGkiOiI2MjYzZDhiZS0yYzU1LTRjNWMtOTE3YS03YWEwMTc4YjM2MGUiLCJjbGllbnRfaWQiOiJjbGllbnQiLCJzY29wZSI6WyJhbGwiXX0.YGv-jBCIHPloMQGHmFuFKv5iyQ8v3rdnAcuPKEIZI2U&quot;</span>,        <span class="hljs-attr">&quot;tokenType&quot;</span>: <span class="hljs-string">&quot;bearer&quot;</span>,        <span class="hljs-attr">&quot;decodedDetails&quot;</span>: <span class="hljs-literal">null</span>    &#125;,    <span class="hljs-attr">&quot;authenticated&quot;</span>: <span class="hljs-literal">true</span>,    <span class="hljs-attr">&quot;userAuthentication&quot;</span>: &#123;        <span class="hljs-attr">&quot;authorities&quot;</span>: [            &#123;                <span class="hljs-attr">&quot;authority&quot;</span>: <span class="hljs-string">&quot;USER&quot;</span>            &#125;        ],        <span class="hljs-attr">&quot;details&quot;</span>: &#123;            <span class="hljs-attr">&quot;authorities&quot;</span>: [                &#123;                    <span class="hljs-attr">&quot;authority&quot;</span>: <span class="hljs-string">&quot;USER&quot;</span>                &#125;            ],            <span class="hljs-attr">&quot;details&quot;</span>: <span class="hljs-literal">null</span>,            <span class="hljs-attr">&quot;authenticated&quot;</span>: <span class="hljs-literal">true</span>,            <span class="hljs-attr">&quot;userAuthentication&quot;</span>: &#123;                <span class="hljs-attr">&quot;authorities&quot;</span>: [                    &#123;                        <span class="hljs-attr">&quot;authority&quot;</span>: <span class="hljs-string">&quot;USER&quot;</span>                    &#125;                ],                <span class="hljs-attr">&quot;details&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;authenticated&quot;</span>: <span class="hljs-literal">true</span>,                <span class="hljs-attr">&quot;principal&quot;</span>: <span class="hljs-string">&quot;user_authorization_code&quot;</span>,                <span class="hljs-attr">&quot;credentials&quot;</span>: <span class="hljs-string">&quot;N/A&quot;</span>,                <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;user_authorization_code&quot;</span>            &#125;,            <span class="hljs-attr">&quot;credentials&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,            <span class="hljs-attr">&quot;oauth2Request&quot;</span>: &#123;                <span class="hljs-attr">&quot;clientId&quot;</span>: <span class="hljs-string">&quot;client&quot;</span>,                <span class="hljs-attr">&quot;scope&quot;</span>: [                    <span class="hljs-string">&quot;all&quot;</span>                ],                <span class="hljs-attr">&quot;requestParameters&quot;</span>: &#123;                    <span class="hljs-attr">&quot;client_id&quot;</span>: <span class="hljs-string">&quot;client&quot;</span>                &#125;,                <span class="hljs-attr">&quot;resourceIds&quot;</span>: [],                <span class="hljs-attr">&quot;authorities&quot;</span>: [],                <span class="hljs-attr">&quot;approved&quot;</span>: <span class="hljs-literal">true</span>,                <span class="hljs-attr">&quot;refresh&quot;</span>: <span class="hljs-literal">false</span>,                <span class="hljs-attr">&quot;redirectUri&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;responseTypes&quot;</span>: [],                <span class="hljs-attr">&quot;extensions&quot;</span>: &#123;&#125;,                <span class="hljs-attr">&quot;refreshTokenRequest&quot;</span>: <span class="hljs-literal">null</span>,                <span class="hljs-attr">&quot;grantType&quot;</span>: <span class="hljs-literal">null</span>            &#125;,            <span class="hljs-attr">&quot;clientOnly&quot;</span>: <span class="hljs-literal">false</span>,            <span class="hljs-attr">&quot;principal&quot;</span>: <span class="hljs-string">&quot;user_authorization_code&quot;</span>,            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;user_authorization_code&quot;</span>        &#125;,        <span class="hljs-attr">&quot;authenticated&quot;</span>: <span class="hljs-literal">true</span>,        <span class="hljs-attr">&quot;principal&quot;</span>: <span class="hljs-string">&quot;user_authorization_code&quot;</span>,        <span class="hljs-attr">&quot;credentials&quot;</span>: <span class="hljs-string">&quot;N/A&quot;</span>,        <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;user_authorization_code&quot;</span>    &#125;,    <span class="hljs-attr">&quot;principal&quot;</span>: <span class="hljs-string">&quot;user_authorization_code&quot;</span>,    <span class="hljs-attr">&quot;clientOnly&quot;</span>: <span class="hljs-literal">false</span>,    <span class="hljs-attr">&quot;credentials&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,    <span class="hljs-attr">&quot;oauth2Request&quot;</span>: &#123;        <span class="hljs-attr">&quot;clientId&quot;</span>: <span class="hljs-string">&quot;client&quot;</span>,        <span class="hljs-attr">&quot;scope&quot;</span>: [],        <span class="hljs-attr">&quot;requestParameters&quot;</span>: &#123;&#125;,        <span class="hljs-attr">&quot;resourceIds&quot;</span>: [],        <span class="hljs-attr">&quot;authorities&quot;</span>: [],        <span class="hljs-attr">&quot;approved&quot;</span>: <span class="hljs-literal">true</span>,        <span class="hljs-attr">&quot;refresh&quot;</span>: <span class="hljs-literal">false</span>,        <span class="hljs-attr">&quot;redirectUri&quot;</span>: <span class="hljs-literal">null</span>,        <span class="hljs-attr">&quot;responseTypes&quot;</span>: [],        <span class="hljs-attr">&quot;extensions&quot;</span>: &#123;&#125;,        <span class="hljs-attr">&quot;grantType&quot;</span>: <span class="hljs-literal">null</span>,        <span class="hljs-attr">&quot;refreshTokenRequest&quot;</span>: <span class="hljs-literal">null</span>    &#125;,    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;user_authorization_code&quot;</span>&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> oauth2 </tag>
            
            <tag> sso </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Cloud安全认证OAuth2与JWT</title>
      <link href="2020/03/10/spring-cloud-security/"/>
      <url>2020/03/10/spring-cloud-security/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Spring-Cloud安全认证OAuth2与JWT"><a href="#Spring-Cloud安全认证OAuth2与JWT" class="headerlink" title="Spring-Cloud安全认证OAuth2与JWT"></a>Spring-Cloud安全认证OAuth2与JWT</h2><p>应用的安全在于两个方面：认证（Authentication）和授权（Authoriztion）。</p><h3 id="微服务的认证方式"><a href="#微服务的认证方式" class="headerlink" title="微服务的认证方式"></a>微服务的认证方式</h3><p>​    通过一个中心化的权限管理系统，对用户的身份和权限进行统一的管理，一次授权，多次多点使用。</p><p>​    将安全控制分散到各个微服务中，由各个微服务根据自身的业务对用户的访问进行管理和控制。</p><h3 id="OAuth2"><a href="#OAuth2" class="headerlink" title="OAuth2"></a>OAuth2</h3><p>​    OAuth协议的目的是为用户资源的授权提供一个安全的、开放而简易的标准。</p><p>​    OAuth2是当前授权的行业标准，其重点在于为Web应用服务、桌面应用程序、移动设备以及室内设备的授权流程提供简单的客户端开发方式。</p><h4 id="OAuth2的角色"><a href="#OAuth2的角色" class="headerlink" title="OAuth2的角色"></a>OAuth2的角色</h4><p>​        Resource Owner（资源所有者）：能够对受保护的资源授予访问权限的实体，可以是一个用户（终端用户）。</p><p>​        Resource Server（资源服务器）：持有受保护的资源，允许持有访问令牌（Access Token）的请求访问受保护资源</p><p>​        Client（客户端）：持有资源所有者的授权，代表资源所有者对受保护资源进行访问。</p><p>​        Authorization Server（授权服务器）：对资源所有者的授权进行认证，成功后向客户发送访问令牌。</p><h4 id="OAuth2协议流程"><a href="#OAuth2协议流程" class="headerlink" title="OAuth2协议流程"></a>OAuth2协议流程</h4><p>​        <img src="/2020/03/10/spring-cloud-security/1.png" alt="OAuth2协议流程"></p><h4 id="客户端授权类型"><a href="#客户端授权类型" class="headerlink" title="客户端授权类型"></a>客户端授权类型</h4><p>​        Authorization Code（授权码类型）</p><p>​        Implicit（简化类型，也称为隐式类型）</p><p>​        Resource Owner Password Credentials（密码类型）</p><p>​        Client Credential（客户端类型）</p><p>​        授权码类型的授权流程</p><p>​            <img src="/2020/03/10/spring-cloud-security/2.png" alt="授权码类型"></p><p>​        密码类型流程</p><p>​            <img src="/2020/03/10/spring-cloud-security/3.png" alt="密码类型"></p><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p>​    JWT（JSON Web Token）作为一个开放的标准，通过紧凑或者包含的方式，定义了用于在各方之间发送的安全的JSON对象。JWT可以充当访问令牌和刷新令牌的载体，这是Web双方之间进行安全传输信息的良好方式。</p><h4 id="JWT格式"><a href="#JWT格式" class="headerlink" title="JWT格式"></a>JWT格式</h4><h4 id><a href="#" class="headerlink" title></a><img src="/2020/03/10/spring-cloud-security/4.png" alt="JWT格式"></h4><h4 id="JWT组成"><a href="#JWT组成" class="headerlink" title="JWT组成"></a>JWT组成</h4><p>​        Header（头部）</p><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;alg&quot;</span>: <span class="hljs-string">&quot;HS256&quot;</span>,  <span class="hljs-attr">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span>&#125;</code></pre><p>​        Payload（有效负荷）</p><pre><code class="hljs json">&#123;  <span class="hljs-attr">&quot;sub&quot;</span>: <span class="hljs-string">&quot;1234567890&quot;</span>,  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;John Doe&quot;</span>,  <span class="hljs-attr">&quot;admin&quot;</span>: <span class="hljs-literal">true</span>&#125;</code></pre><p>​        Signature（签名）</p><pre><code class="hljs java">HMACSHA256(  base64UrlEncode(header) + <span class="hljs-string">&quot;.&quot;</span> +  base64UrlEncode(payload),  secret)</code></pre><h3 id="搭建授权服务器"><a href="#搭建授权服务器" class="headerlink" title="搭建授权服务器"></a>搭建授权服务器</h3><p>​    Spring Cloud Security的配置主要是通过适配器的方式对开发者需要的部分进行覆盖配置，其余的将使用Starter中的默认配置选项。</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>chapter12-authorization-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>chapter12-authorization-server<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Finchley.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--eureka client--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--web config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--security config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--actuator config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--lombok config. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--test config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h4 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h4><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">authorization-server</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8766</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;vcap.application.instance_id:$&#123;spring.application.instance_id:$&#123;random.value&#125;&#125;&#125;</span>  <span class="hljs-attr">client:</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">default-zone:</span> <span class="hljs-string">http://localhost:8761/eureka/,</span> <span class="hljs-string">http://localhost:8762/eureka/</span></code></pre><h4 id="授权服务器配置"><a href="#授权服务器配置" class="headerlink" title="授权服务器配置"></a>授权服务器配置</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.config;<span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 授权服务器配置。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> */</span><span class="hljs-meta">@EnableAuthorizationServer</span><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthorizationServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizationServerConfigurerAdapter</span> </span>&#123;    <span class="hljs-meta">@Autowired</span>    AuthenticationManager authenticationManager;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置一个客户端</span><span class="hljs-comment">     * 即可以通过授权码类型获取令牌，也可以通过密码类型获取令牌。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clients</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(ClientDetailsServiceConfigurer clients)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        clients.inMemory()                <span class="hljs-comment">// 客户端ID</span>                .withClient(<span class="hljs-string">&quot;client&quot;</span>)                <span class="hljs-comment">// 客户端可以使用的授权类型</span>                .authorizedGrantTypes(<span class="hljs-string">&quot;authorization_code&quot;</span>, <span class="hljs-string">&quot;password&quot;</span>, <span class="hljs-string">&quot;refresh_token&quot;</span>)                <span class="hljs-comment">// 允许请求范围</span>                .scopes(<span class="hljs-string">&quot;all&quot;</span>)                <span class="hljs-comment">// 客户端安全码</span>                .secret(<span class="hljs-string">&quot;secret&quot;</span>)                <span class="hljs-comment">// 回调地址</span>                .redirectUris(<span class="hljs-string">&quot;http://localhost:8888/&quot;</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置AuthorizationServer tokenServices.</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> endpoints</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">// 将令牌保存到内存中，也可以保存到数据库中，或者是Redis中</span>        endpoints.tokenStore(<span class="hljs-keyword">new</span> InMemoryTokenStore())                .accessTokenConverter(accessTokenConverter())                .authenticationManager(authenticationManager)                .reuseRefreshTokens(<span class="hljs-keyword">false</span>);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置JWT转换器。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> JwtAccessTokenConverter <span class="hljs-title">accessTokenConverter</span><span class="hljs-params">()</span> </span>&#123;        JwtAccessTokenConverter jwtAccessTokenConverter = <span class="hljs-keyword">new</span> JwtAccessTokenConverter();        <span class="hljs-comment">// 设置JWT的签名的密钥为：secret</span>        jwtAccessTokenConverter.setSigningKey(<span class="hljs-string">&quot;secret&quot;</span>);        <span class="hljs-keyword">return</span> jwtAccessTokenConverter;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthorizationServerSecurityConfigurer security)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        security.tokenKeyAccess(<span class="hljs-string">&quot;permitAll()&quot;</span>)                .checkTokenAccess(<span class="hljs-string">&quot;isAuthenticated()&quot;</span>)                .allowFormAuthenticationForClients();    &#125;&#125;</code></pre><h4 id="配置用户"><a href="#配置用户" class="headerlink" title="配置用户"></a>配置用户</h4><p>​        通过Spring Security为授权服务器配置两个存储在内存中的用户。</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.config;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationManager;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.User;<span class="hljs-keyword">import</span> org.springframework.security.crypto.password.NoOpPasswordEncoder;<span class="hljs-keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;<span class="hljs-keyword">import</span> org.springframework.security.provisioning.InMemoryUserDetailsManager;<span class="hljs-comment">/**</span><span class="hljs-comment"> * Security配置。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 在内存中配置两个用户。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> auth</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        InMemoryUserDetailsManager userDetailsManager = <span class="hljs-keyword">new</span> InMemoryUserDetailsManager();        <span class="hljs-comment">// 配置用户信息</span>        userDetailsManager.createUser(User.withUsername(<span class="hljs-string">&quot;user_authorization_code&quot;</span>).            password(<span class="hljs-string">&quot;123456&quot;</span>).authorities(<span class="hljs-string">&quot;USER&quot;</span>).build());        userDetailsManager.createUser(User.withUsername(<span class="hljs-string">&quot;user_password&quot;</span>).            password(<span class="hljs-string">&quot;123456&quot;</span>).authorities(<span class="hljs-string">&quot;USER&quot;</span>).build());        auth.userDetailsService(userDetailsManager);    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title">authenticationManagerBean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        AuthenticationManager manager = <span class="hljs-keyword">super</span>.authenticationManagerBean();        <span class="hljs-keyword">return</span> manager;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        http.csrf().disable()                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)                .and()                .requestMatchers().anyRequest()                .and()                .formLogin().permitAll()                .and()                .authorizeRequests()                .antMatchers(<span class="hljs-string">&quot;/oauth/*&quot;</span>).permitAll();    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置密码解码器</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title">passwordEncoder</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> NoOpPasswordEncoder.getInstance();    &#125;    &#125;</code></pre><h3 id="配置资源服务器"><a href="#配置资源服务器" class="headerlink" title="配置资源服务器"></a>配置资源服务器</h3><h4 id="pom-xml-1"><a href="#pom-xml-1" class="headerlink" title="pom.xml"></a>pom.xml</h4><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>chapter12-resource-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>chapter12-resource-server<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.0.1.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span><span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Finchley.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>        <span class="hljs-comment">&lt;!--eureka client--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--web config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--security config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--common config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.lc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>chapter-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--actuator config.--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--lombok config. --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--test config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-comment">&lt;!--security test config--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></code></pre><h4 id="application-xml"><a href="#application-xml" class="headerlink" title="application.xml"></a>application.xml</h4><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span>  <span class="hljs-attr">application:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">resource-server</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8767</span><span class="hljs-attr">eureka:</span>  <span class="hljs-attr">instance:</span>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;vcap.application.instance_id:$&#123;spring.application.instance_id:$&#123;random.value&#125;&#125;&#125;</span>  <span class="hljs-attr">client:</span>    <span class="hljs-attr">service-url:</span>      <span class="hljs-attr">default-zone:</span> <span class="hljs-string">http://localhost:8761/eureka/</span></code></pre><h4 id="访问接口"><a href="#访问接口" class="headerlink" title="访问接口"></a>访问接口</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.controller;<span class="hljs-keyword">import</span> com.lc.dto.Instance;<span class="hljs-keyword">import</span> com.lc.dto.User;<span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PathVariable;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;<span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 资源访问控制器。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-meta">@RestController</span><span class="hljs-meta">@Slf4j</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResourceController</span> </span>&#123;    <span class="hljs-comment">// 默认用户名。</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> String DEFAULT_NAME = <span class="hljs-string">&quot;lingchenbill&quot;</span>;    <span class="hljs-comment">// 服务ID。</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String DEFAULT_SERVICE_ID = <span class="hljs-string">&quot;application&quot;</span>;    <span class="hljs-comment">// host。</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String DEFAULT_HOST = <span class="hljs-string">&quot;localhost&quot;</span>;    <span class="hljs-comment">// 端口。</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> DEFAULT_PORT = <span class="hljs-number">8080</span>;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 访问受保护的资源。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> userId</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RequestMapping(value = &quot;/user/&#123;userId&#125;&quot;, method = RequestMethod.GET)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> User <span class="hljs-title">getUserByUserId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;userId&quot;)</span> String userId)</span> </span>&#123;        log.info(<span class="hljs-string">&quot;Get User by UserId: &#123;&#125;&quot;</span>, userId);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> User(userId, DEFAULT_NAME);    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 访问不受保护的资源。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> serviceId</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@RequestMapping(value = &quot;/instance/&#123;serviceId&#125;&quot;, method = RequestMethod.GET)</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> Instance <span class="hljs-title">getInstanceByServiceId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;serviceId&quot;)</span> String serviceId)</span> </span>&#123;        log.info(<span class="hljs-string">&quot;Get Instance by serviceId: &#123;&#125;&quot;</span>, serviceId);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Instance(serviceId, DEFAULT_HOST, DEFAULT_PORT);    &#125;&#125;</code></pre><h4 id="资源服务器配置"><a href="#资源服务器配置" class="headerlink" title="资源服务器配置"></a>资源服务器配置</h4><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lc.config;<span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<span class="hljs-keyword">import</span> org.springframework.http.client.ClientHttpResponse;<span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<span class="hljs-keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.RemoteTokenServices;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;<span class="hljs-keyword">import</span> org.springframework.security.oauth2.provider.token.store.JwtTokenStore;<span class="hljs-keyword">import</span> org.springframework.web.client.DefaultResponseErrorHandler;<span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<span class="hljs-keyword">import</span> java.io.IOException;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 资源服务器配置。</span><span class="hljs-comment"> *</span><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> lingchenbill</span><span class="hljs-comment"> * <span class="hljs-doctag">@description</span>:</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableResourceServer</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ResourceServerConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ResourceServerConfigurerAdapter</span> </span>&#123;<span class="hljs-comment">//    @Autowired</span><span class="hljs-comment">//    private RestTemplate restTemplate;</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(ResourceServerSecurityConfigurer resources)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        resources.tokenStore(<span class="hljs-keyword">new</span> JwtTokenStore(accessTokenConverter()))                .stateless(<span class="hljs-keyword">true</span>);        <span class="hljs-comment">// 从AuthorizationServer中获取令牌服务。</span>        RemoteTokenServices tokenServices = <span class="hljs-keyword">new</span> RemoteTokenServices();        tokenServices.setAccessTokenConverter(accessTokenConverter());        RestTemplate restTemplate = restTemplate();        restTemplate.setErrorHandler(<span class="hljs-keyword">new</span> DefaultResponseErrorHandler() &#123;            <span class="hljs-meta">@Override</span>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleError</span><span class="hljs-params">(ClientHttpResponse response)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;                <span class="hljs-keyword">if</span> (response.getRawStatusCode() != <span class="hljs-number">400</span>) &#123;                    <span class="hljs-keyword">super</span>.handleError(response);                &#125;            &#125;        &#125;);        tokenServices.setRestTemplate(restTemplate);        tokenServices.setCheckTokenEndpointUrl(<span class="hljs-string">&quot;http://AUTHORIZATION-SERVER/oauth/check_token&quot;</span>);        tokenServices.setClientId(<span class="hljs-string">&quot;client&quot;</span>);        tokenServices.setClientSecret(<span class="hljs-string">&quot;secret&quot;</span>);        resources.tokenServices(tokenServices)                .stateless(<span class="hljs-keyword">true</span>);    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-meta">@LoadBalanced</span>    <span class="hljs-function">RestTemplate <span class="hljs-title">restTemplate</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> RestTemplate();    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置JWT转换器。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> JwtAccessTokenConverter <span class="hljs-title">accessTokenConverter</span><span class="hljs-params">()</span> </span>&#123;        JwtAccessTokenConverter converter = <span class="hljs-keyword">new</span> JwtAccessTokenConverter();        converter.setSigningKey(<span class="hljs-string">&quot;secret&quot;</span>);        <span class="hljs-keyword">return</span> converter;    &#125;    <span class="hljs-comment">/**</span><span class="hljs-comment">     * 配置资源服务器的拦截规则。</span><span class="hljs-comment">     *</span><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> http</span><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><span class="hljs-comment">     */</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)                .and()                .requestMatchers().anyRequest()                .and()                .anonymous()                .and()                .authorizeRequests()                .antMatchers(<span class="hljs-string">&quot;/user/**&quot;</span>).authenticated()                .and()                .exceptionHandling().accessDeniedHandler(<span class="hljs-keyword">new</span> OAuth2AccessDeniedHandler());    &#125;&#125;</code></pre><h3 id="访问受限资源"><a href="#访问受限资源" class="headerlink" title="访问受限资源"></a>访问受限资源</h3><p>​    启动Eureka Server jar<br>​        java -jar chapter4-eureka-server-0.0.1-SNAPSHOT.jar<br>​        java -jar chapter4-eureka-server-0.0.1-SNAPSHOT.jar –server.port=8762</p><p>​    启动授权服务与资源服务 jar<br>​        java -jar chapter12-authorization-server-1.0-SNAPSHOT.jar<br>​        java -jar chapter12-resource-server-1.0-SNAPSHOT.jar</p><p>​    查看Eureka    </p><img src="/2020/03/10/spring-cloud-security/5.png" alt="eureka" style="zoom:50%;"><p>​    访问不受保护的资源</p><p>​        <code>http://localhost:8767/instance/application-app</code></p><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;serviceId&quot;</span>: <span class="hljs-string">&quot;application-app&quot;</span>,<span class="hljs-attr">&quot;host&quot;</span>: <span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-attr">&quot;port&quot;</span>: <span class="hljs-number">8080</span>&#125;</code></pre><p>​    访问受保护的资源端口</p><p>​        <code>http://localhost:8767/user/lingchen</code></p><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">oauth</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">error_description</span>&gt;</span>  Full authentication is required to access this resource  <span class="hljs-tag">&lt;/<span class="hljs-name">error_description</span>&gt;</span>  <span class="hljs-tag">&lt;<span class="hljs-name">error</span>&gt;</span>unauthorized<span class="hljs-tag">&lt;/<span class="hljs-name">error</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">oauth</span>&gt;</span></code></pre><h5 id="通过授权码类型获取访问令牌"><a href="#通过授权码类型获取访问令牌" class="headerlink" title="通过授权码类型获取访问令牌"></a>通过授权码类型获取访问令牌</h5><p>​    <code>http://localhost:8766/oauth/authorize?client_id=client&amp;response_type=code&amp;redirect_uri=http://localhost:8888/login</code></p><p>​    <img src="/2020/03/10/spring-cloud-security/6.png" alt="authorize"></p><p>​    授权码将通过回调地址获取</p><p>​        <code>http://localhost:8888/login?code=2dgnZO</code></p><p>​        <strong>2dgnZO</strong>即为授权码</p><p>​    携带授权码访问”/oauth/token”获取到访问令牌</p><p>​        method：post</p><p>​        <code>http://localhost:8766/oauth/token?grant_type=authorization_code&amp;code=2dgnZO&amp;redirect_uri=http://localhost:8888/login&amp;client_id=client&amp;client_secret=secret</code></p><p>​        可以通过IDEA中的Rest Client工具访问</p><p><img src="/2020/03/10/spring-cloud-security/7.png" alt="post-visit"></p><p>​         返回</p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;access_token&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODM4ODkwMDIsInVzZXJfbmFtZSI6InVzZXJfYXV0aG9yaXphdGlvbl9jb2RlIiwiYXV0aG9yaXRpZXMiOlsiVVNFUiJdLCJqdGkiOiJmNTJkMGVkNy0yMGI2LTQ5MGUtOGVmMS01MWQ2NWQyMDk3YTciLCJjbGllbnRfaWQiOiJjbGllbnQiLCJzY29wZSI6WyJhbGwiXX0.eNwBLIXB85ZXiQIPrDMtqL3ktW2vWu1FVVnra36XDTk&quot;</span>,    <span class="hljs-attr">&quot;token_type&quot;</span>: <span class="hljs-string">&quot;bearer&quot;</span>,    <span class="hljs-attr">&quot;refresh_token&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJ1c2VyX2F1dGhvcml6YXRpb25fY29kZSIsInNjb3BlIjpbImFsbCJdLCJhdGkiOiJmNTJkMGVkNy0yMGI2LTQ5MGUtOGVmMS01MWQ2NWQyMDk3YTciLCJleHAiOjE1ODY0Mzc4MDIsImF1dGhvcml0aWVzIjpbIlVTRVIiXSwianRpIjoiNmE0NTQyMTktMGU5OC00MmM4LWE0NjEtOTUxZWViNmU5Yjc4IiwiY2xpZW50X2lkIjoiY2xpZW50In0.3OsLTaElYD2G-s4LSG59ZZ_NqAKJhusiuzIdLRtzLiA&quot;</span>,    <span class="hljs-attr">&quot;expires_in&quot;</span>: <span class="hljs-number">43199</span>,    <span class="hljs-attr">&quot;scope&quot;</span>: <span class="hljs-string">&quot;all&quot;</span>,    <span class="hljs-attr">&quot;jti&quot;</span>: <span class="hljs-string">&quot;f52d0ed7-20b6-490e-8ef1-51d65d2097a7&quot;</span>&#125;</code></pre><p>​    携带访问令牌再次访问受保护的资源</p><p>​        <code>http://localhost:8767/user/lingchen?access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODM4ODkwMDIsInVzZXJfbmFtZSI6InVzZXJfYXV0aG9yaXphdGlvbl9jb2RlIiwiYXV0aG9yaXRpZXMiOlsiVVNFUiJdLCJqdGkiOiJmNTJkMGVkNy0yMGI2LTQ5MGUtOGVmMS01MWQ2NWQyMDk3YTciLCJjbGllbnRfaWQiOiJjbGllbnQiLCJzY29wZSI6WyJhbGwiXX0.eNwBLIXB85ZXiQIPrDMtqL3ktW2vWu1FVVnra36XDTk</code></p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;lingchen&quot;</span>,    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;lingchenbill&quot;</span>&#125;</code></pre><h5 id="通过密码类型获取访问令牌"><a href="#通过密码类型获取访问令牌" class="headerlink" title="通过密码类型获取访问令牌"></a>通过密码类型获取访问令牌</h5><p>​        method：post</p><p>​        <code>http://localhost:8766/oauth/token?username=user_password&amp;password=123456&amp;grant_type=password&amp;scope=all&amp;client_id=client&amp;client_secret=secret</code></p><p><img src="/2020/03/10/spring-cloud-security/8.png" alt="password-visit"></p><p>​        返回</p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;access_token&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODM4ODk1MzMsInVzZXJfbmFtZSI6InVzZXJfcGFzc3dvcmQiLCJhdXRob3JpdGllcyI6WyJVU0VSIl0sImp0aSI6ImQyNmNmMTFkLTljZjAtNDM3NS05YjIzLTY1ZjRiZTQyYzE1ZSIsImNsaWVudF9pZCI6ImNsaWVudCIsInNjb3BlIjpbImFsbCJdfQ.d4QZF0Vc9ePP01TmWM9EiixiqJNELu2UpvG1sjcWapU&quot;</span>,    <span class="hljs-attr">&quot;token_type&quot;</span>: <span class="hljs-string">&quot;bearer&quot;</span>,    <span class="hljs-attr">&quot;refresh_token&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX25hbWUiOiJ1c2VyX3Bhc3N3b3JkIiwic2NvcGUiOlsiYWxsIl0sImF0aSI6ImQyNmNmMTFkLTljZjAtNDM3NS05YjIzLTY1ZjRiZTQyYzE1ZSIsImV4cCI6MTU4NjQzODMzMywiYXV0aG9yaXRpZXMiOlsiVVNFUiJdLCJqdGkiOiI1ODJiOWRlNy1mZDY0LTRjNjctYmFmZS1lZTlmM2RkZTVkZjYiLCJjbGllbnRfaWQiOiJjbGllbnQifQ.en1wMalkOoI3dv6bOx_W4ZXMMYeAugGoRm-VVdTEavg&quot;</span>,    <span class="hljs-attr">&quot;expires_in&quot;</span>: <span class="hljs-number">43199</span>,    <span class="hljs-attr">&quot;scope&quot;</span>: <span class="hljs-string">&quot;all&quot;</span>,    <span class="hljs-attr">&quot;jti&quot;</span>: <span class="hljs-string">&quot;d26cf11d-9cf0-4375-9b23-65f4be42c15e&quot;</span>&#125;</code></pre><p>​        携带访问令牌访问</p><p>​            <code>http://localhost:8767/user/lingchen-user?access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODM4ODk1MzMsInVzZXJfbmFtZSI6InVzZXJfcGFzc3dvcmQiLCJhdXRob3JpdGllcyI6WyJVU0VSIl0sImp0aSI6ImQyNmNmMTFkLTljZjAtNDM3NS05YjIzLTY1ZjRiZTQyYzE1ZSIsImNsaWVudF9pZCI6ImNsaWVudCIsInNjb3BlIjpbImFsbCJdfQ.d4QZF0Vc9ePP01TmWM9EiixiqJNELu2UpvG1sjcWapU</code></p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;lingchen-user&quot;</span>,    <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;lingchenbill&quot;</span>&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> security </tag>
            
            <tag> OAuth2 </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim快捷键记录</title>
      <link href="2020/03/09/vim-hot-key/"/>
      <url>2020/03/09/vim-hot-key/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="vim快捷键记录"><a href="#vim快捷键记录" class="headerlink" title="vim快捷键记录"></a>vim快捷键记录</h3><h4 id="less操作"><a href="#less操作" class="headerlink" title="less操作"></a>less操作</h4><pre><code class="hljs bash"><span class="hljs-comment"># less -N config.xml</span>// 显示文件内容，带行号</code></pre><pre><code class="hljs xml">1 <span class="hljs-meta">&lt;?xml version=&#x27;1.1&#x27; encoding=&#x27;UTF-8&#x27;?&gt;</span>      2 <span class="hljs-tag">&lt;<span class="hljs-name">hudson</span>&gt;</span>      3   <span class="hljs-tag">&lt;<span class="hljs-name">disabledAdministrativeMonitors</span>/&gt;</span>      4   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.164.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>      5   <span class="hljs-tag">&lt;<span class="hljs-name">installStateName</span>&gt;</span>RUNNING<span class="hljs-tag">&lt;/<span class="hljs-name">installStateName</span>&gt;</span>      6   <span class="hljs-tag">&lt;<span class="hljs-name">numExecutors</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">numExecutors</span>&gt;</span>      7   <span class="hljs-tag">&lt;<span class="hljs-name">mode</span>&gt;</span>NORMAL<span class="hljs-tag">&lt;/<span class="hljs-name">mode</span>&gt;</span></code></pre><h4 id="vim基本操作"><a href="#vim基本操作" class="headerlink" title="vim基本操作"></a>vim基本操作</h4><pre><code class="hljs bash">:wq       // 在命令模式下，执行存盘退出操作（:ZZ）:w        // 在命令模式下，执行存盘操作:w!       // 在命令模式下，执行强制存盘操作:q        // 在命令模式下，执行退出vi操作:q！      // 在命令模式下，执行强制退出vi操作:e 文件名  // 在命令模式下，打开并编辑指定名称的文件:n       // 在命令模式下，如果同时打开多个文件，则继续编辑下一个文件:f       // 在命令模式下，用于显示当前的文件名、光标所在行的行号以及显示比例</code></pre><h4 id="vim翻页"><a href="#vim翻页" class="headerlink" title="vim翻页"></a>vim翻页</h4><pre><code class="hljs awk">ctrl + f 　　　<span class="hljs-regexp">//</span> 向下（后面）翻页ctrl + b 　　　<span class="hljs-regexp">//</span> 向上（前面）翻页或者：ctrl+u 　　　　<span class="hljs-regexp">//</span> 向文件首翻半屏ctrl+d 　　　　<span class="hljs-regexp">//</span> 向文件尾翻半屏</code></pre><h4 id="vim展示行号"><a href="#vim展示行号" class="headerlink" title="vim展示行号"></a>vim展示行号</h4><pre><code class="hljs bash">: <span class="hljs-built_in">set</span> nu 1 &lt;?xml version=<span class="hljs-string">&#x27;1.1&#x27;</span> encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>?&gt;  2 &lt;hudson&gt;  3   &lt;disabledAdministrativeMonitors/&gt;  4   &lt;version&gt;2.164.3&lt;/version&gt;  5   &lt;installStateName&gt;RUNNING&lt;/installStateName&gt;  6   &lt;numExecutors&gt;2&lt;/numExecutors&gt;  7   &lt;mode&gt;NORMAL&lt;/mode&gt;</code></pre><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><pre><code class="hljs bash">a 　　// 在当前字符后添加文本A 　　// 在行末添加文本i 　　// 在当前字符前插入文本I 　　// 在行首插入文本o 　　// 在当前行后面插入一空行O 　　// 在当前行前面插入一空行</code></pre><h4 id="vim模式切换"><a href="#vim模式切换" class="headerlink" title="vim模式切换"></a>vim模式切换</h4><p>​    在命令行模式　-&gt;  按字符选择模式</p><pre><code class="hljs bash">v　　　　// 输入字符v（小写）或者：Ctrl + v</code></pre><p>​    通过h、i、j、k键移动光标选择要进行复制的字符串<br>​    完成选择后按下y键进行复制，按下p执行粘贴操作</p><p>​    在命令行模式　-&gt;  按行选择模式</p><pre><code class="hljs bash">V　　　　// 输入字符V（大写）或者：<span class="hljs-built_in">shift</span> + v</code></pre><p>​    通过h、i、j、k键移动光标选择要进行复制的行号<br>​    将光标移动到要进行粘贴的位置，按下p键进行粘贴操作</p><p>​    编辑模式　-&gt;  命令模式</p><pre><code class="hljs bash">Esc</code></pre><h4 id="至文件的首行"><a href="#至文件的首行" class="headerlink" title="至文件的首行"></a>至文件的首行</h4><pre><code class="hljs bash">gg</code></pre><h4 id="至文件的末行"><a href="#至文件的末行" class="headerlink" title="至文件的末行"></a>至文件的末行</h4><pre><code class="hljs bash">G</code></pre><h4 id="至指定位置"><a href="#至指定位置" class="headerlink" title="至指定位置"></a>至指定位置</h4><p>​    到指定行的行首</p><pre><code class="hljs bash">:行号</code></pre><p>​    到最后一行的行首</p><pre><code class="hljs bash">:$</code></pre><h4 id="移动到单词"><a href="#移动到单词" class="headerlink" title="移动到单词"></a>移动到单词</h4><pre><code class="hljs bash">w// 向前移到到单词词尾e// 向前移到到单词词尾b// 向后移到到单词词首</code></pre><h4 id="删除字符操作"><a href="#删除字符操作" class="headerlink" title="删除字符操作"></a>删除字符操作</h4><h5 id="光标后字符"><a href="#光标后字符" class="headerlink" title="光标后字符"></a>光标后字符</h5><pre><code class="hljs bash">x // （小写）</code></pre><h5 id="光标前字符"><a href="#光标前字符" class="headerlink" title="光标前字符"></a>光标前字符</h5><pre><code class="hljs bash">X // （大写）</code></pre><h5 id="光标至行尾"><a href="#光标至行尾" class="headerlink" title="光标至行尾"></a>光标至行尾</h5><pre><code class="hljs bash">D</code></pre><h5 id="光标行内容"><a href="#光标行内容" class="headerlink" title="光标行内容"></a>光标行内容</h5><pre><code class="hljs bash">dd</code></pre><h5 id="行及其后n-1行"><a href="#行及其后n-1行" class="headerlink" title="行及其后n-1行"></a>行及其后n-1行</h5><pre><code class="hljs bash">ndd</code></pre><h5 id="删除代码块"><a href="#删除代码块" class="headerlink" title="删除代码块"></a>删除代码块</h5><pre><code class="hljs bash"><span class="hljs-comment"># 在代码块内</span>di&#123;</code></pre><h4 id="剪切操作"><a href="#剪切操作" class="headerlink" title="剪切操作"></a>剪切操作</h4><pre><code class="hljs bash">dd  // 剪切当前行ndd // n表示大于1的数字，剪切n行dw  // 从光标处剪切至一个单词的末尾，包括空格de  // 从光标处剪切至一个单词的末尾，不包括空格d$  // 从当前光标剪切到行末d0  // 从当前光标位置（不包括光标位置）剪切到行首d3l // 从光标位置（包括光标位置）向右剪切3个字符d5G // 将当前行（包括当前行）至第5行（不包括它）剪切d3B // 从当前光标位置（不包括光标位置）反向剪切3个单词dH  // 剪切从当前行至所显示屏幕顶行的全部行dL  // 剪切从当前行至所显示屏幕底的全部行:行号1, 行号2 m 行号3 // 剪切行号1-行号2到行号3之后</code></pre><h4 id="复制－粘贴操作"><a href="#复制－粘贴操作" class="headerlink" title="复制－粘贴操作"></a>复制－粘贴操作</h4><h5 id="复制行内容"><a href="#复制行内容" class="headerlink" title="复制行内容"></a>复制行内容</h5><pre><code class="hljs bash">yy</code></pre><h5 id="至行及其下n行"><a href="#至行及其下n行" class="headerlink" title="至行及其下n行"></a>至行及其下n行</h5><pre><code class="hljs bash">nyy</code></pre><p>至上几行</p><pre><code class="hljs bash"><span class="hljs-comment"># 不包含当前行.</span>nyk</code></pre><h5 id="常用复制操作"><a href="#常用复制操作" class="headerlink" title="常用复制操作"></a>常用复制操作</h5><pre><code class="hljs bash">yw       // 从光标处复制至一个单子/单词的末尾，包括空格ye       // 从光标处复制至一个单子/单词的末尾，不包括空格y$       // 从当前光标复制到行末y0       // 从当前光标位置（不包括光标位置）复制之行首y3l      // 从光标位置（包括光标位置）向右复制3个字符y5G      // 将当前行（包括当前行）至第5行（不包括它）复制y3B      // 从当前光标位置（不包括光标位置）反向复制3个单词:行号1, 行号2 co 行号3  // 复制行号1-行号2到行号3之后</code></pre><h5 id="粘贴操作"><a href="#粘贴操作" class="headerlink" title="粘贴操作"></a>粘贴操作</h5><pre><code class="hljs bash">p // （小写）粘贴到当前光标所在位置的下方P // （大写）粘贴到当前光标所在位置的上方</code></pre><h5 id="单词的复制替换"><a href="#单词的复制替换" class="headerlink" title="单词的复制替换"></a>单词的复制替换</h5><pre><code class="hljs bash"><span class="hljs-comment"># 复制单词（任意位置），替换到第二个单词</span>yiw// 复制viwp// 替换<span class="hljs-comment"># 切换单词（任意位置）</span>ciwcaw</code></pre><h4 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h4><pre><code class="hljs bash"><span class="hljs-comment"># 向左缩进.</span>:行号&lt;<span class="hljs-comment"># 向右缩进.</span>:行号&gt;<span class="hljs-comment"># 大范围整体缩进.1~20向右缩进</span>:1, 20 &gt;</code></pre><h4 id="折叠与展开"><a href="#折叠与展开" class="headerlink" title="折叠与展开"></a>折叠与展开</h4><pre><code class="hljs bash"><span class="hljs-comment"># 在vim中执行该命令,设置折叠.</span>:<span class="hljs-built_in">set</span> fdm=marker<span class="hljs-comment"># 打开所有折叠.</span>zR<span class="hljs-comment"># 关闭所有折叠.</span>zM<span class="hljs-comment"># 关闭光标下的折叠.</span>zc<span class="hljs-comment"># 打开光标下的折叠.</span>zo<span class="hljs-comment"># 关闭光标下的折叠，以及嵌套的折叠.</span>zC<span class="hljs-comment"># 打开光标下的折叠，以及嵌套的折叠.</span>zO<span class="hljs-comment"># 当光标在关闭折叠上时，打开之。在打开折叠上时，关闭之.</span>za</code></pre><h4 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h4><pre><code class="hljs bash"><span class="hljs-comment"># 选中当前光标所在内联块.</span>viBvib<span class="hljs-comment"># 选中整行.</span>V<span class="hljs-comment"># 选中&#123;&#125;块.</span>在&#123;&#125;的 &#123; 或者 &#125;上 v%<span class="hljs-comment"># 选中&#123;&#125;块内的内容.</span>在&#123;&#125;块内, v i&#123;  或者 v i&#125;<span class="hljs-comment"># 选中[]块内的内容.</span>在[]块内, v i[  或者 v i]</code></pre><h4 id="文本查找操作"><a href="#文本查找操作" class="headerlink" title="文本查找操作"></a>文本查找操作</h4><h5 id="向文件头部查找"><a href="#向文件头部查找" class="headerlink" title="向文件头部查找"></a>向文件头部查找</h5><pre><code class="hljs bash">?查找文本n 　　　　　　　 // 按n键查找上一个查找文本<span class="hljs-built_in">shift</span>　＋　n　　// 按n键查找下一个查找文本</code></pre><h5 id="向文件尾部查找"><a href="#向文件尾部查找" class="headerlink" title="向文件尾部查找"></a>向文件尾部查找</h5><pre><code class="hljs bash">/查找文本n             // 按n键查找下个查找文本<span class="hljs-built_in">shift</span> ＋ n    // 按n键查找下一个查找文本</code></pre><h4 id="替换操作"><a href="#替换操作" class="headerlink" title="替换操作"></a>替换操作</h4><h5 id="全局替换"><a href="#全局替换" class="headerlink" title="全局替换"></a>全局替换</h5><pre><code class="hljs bash">:% s/查找文本/替换文本/gc// 强制每个替换要确认</code></pre><h5 id="指定行范围"><a href="#指定行范围" class="headerlink" title="指定行范围"></a>指定行范围</h5><pre><code class="hljs bash">// 强制每个替换要确认:行号1, 行号2 s/查找文本/替换文本/gc// 从指定行至文本末查找替换文本:行号, <span class="hljs-variable">$s</span>/查找文本/替换文本/gc</code></pre><h4 id="多窗口操作"><a href="#多窗口操作" class="headerlink" title="多窗口操作"></a>多窗口操作</h4><pre><code class="hljs bash">:sp filename         // vim将分割出一个横向窗口，并在该窗口中打开新文件:vsp filename        // vim将在右边分割出一个窗口，并在该窗口中打开新文件vim -o file1 file2   // 打开的两个文件上下窗口分布vim -O file1 file2   // 打开的两个文件左右窗口分布ctrl + w             // 来在vim打开的多个窗口中切换:close               // 关闭当前窗口</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hot-key </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive-view处理</title>
      <link href="2020/03/08/hive-view/"/>
      <url>2020/03/08/hive-view/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Hive-view处理"><a href="#Hive-view处理" class="headerlink" title="Hive-view处理"></a>Hive-view处理</h2><h3 id="Hadoop启动"><a href="#Hadoop启动" class="headerlink" title="Hadoop启动"></a>Hadoop启动</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sbin/start-dfs.sh</span><span class="hljs-meta">$</span><span class="bash"> sbin/start-yarn.sh</span><span class="hljs-meta">$</span><span class="bash"> sbin/mr-jobhistory-daemon.sh start historyserver</span></code></pre><p>​    hadoop启动过程：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sbin/start-dfs.sh </span>Starting namenodes on [ip-172-31-33-221.hadoop.com]ip-172-31-33-221.hadoop.com: starting namenode, logging to /home/ec2-user/hadoop/hadoop-2.2.0/logs/hadoop-ec2-user-namenode-ip-172-31-33-221.ap-northeast-1.compute.internal.outip-172-31-43-90.hadoop.com: starting datanode, logging to /home/ec2-user/hadoop/hadoop-2.2.0/logs/hadoop-ec2-user-datanode-ip-172-31-43-90.outip-172-31-39-57.hadoop.com: starting datanode, logging to /home/ec2-user/hadoop/hadoop-2.2.0/logs/hadoop-ec2-user-datanode-ip-172-31-39-57.ap-northeast-1.compute.internal.outStarting secondary namenodes [ip-172-31-33-221.hadoop.com]ip-172-31-33-221.hadoop.com: starting secondarynamenode, logging to /home/ec2-user/hadoop/hadoop-2.2.0/logs/hadoop-ec2-user-secondarynamenode-ip-172-31-33-221.ap-northeast-1.compute.internal.out[ec2-user@ip-172-31-33-221 hadoop-2.2.0]$ sbin/start-yarn.sh starting yarn daemonsstarting resourcemanager, logging to /home/ec2-user/hadoop/hadoop-2.2.0/logs/yarn-ec2-user-resourcemanager-ip-172-31-33-221.ap-northeast-1.compute.internal.outip-172-31-43-90.hadoop.com: starting nodemanager, logging to /home/ec2-user/hadoop/hadoop-2.2.0/logs/yarn-ec2-user-nodemanager-ip-172-31-43-90.outip-172-31-39-57.hadoop.com: starting nodemanager, logging to /home/ec2-user/hadoop/hadoop-2.2.0/logs/yarn-ec2-user-nodemanager-ip-172-31-39-57.ap-northeast-1.compute.internal.out[ec2-user@ip-172-31-33-221 hadoop-2.2.0]$ sbin/mr-jobhistory-daemon.sh start historyserverstarting historyserver, logging to /home/ec2-user/hadoop/hadoop-2.2.0/logs/mapred-ec2-user-historyserver-ip-172-31-33-221.ap-northeast-1.compute.internal.out</code></pre><h3 id="Hive启动"><a href="#Hive启动" class="headerlink" title="Hive启动"></a>Hive启动</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hive --service metastore &amp;</span><span class="hljs-meta">$</span><span class="bash"> hive --service hiveserver2 &amp;</span><span class="hljs-meta">$</span><span class="bash"> jps</span>28147 Jps27528 RunJar24332 SecondaryNameNode23907 NameNode27911 RunJar24804 ResourceManager27005 JobHistoryServer</code></pre><p>​    进入Hive：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hive</span>20/03/08 08:16:32 INFO Configuration.deprecation: mapred.reduce.tasks is deprecated. Instead, use mapreduce.job.reduces20/03/08 08:16:32 INFO Configuration.deprecation: mapred.min.split.size is deprecated. Instead, use mapreduce.input.fileinputformat.split.minsize20/03/08 08:16:32 INFO Configuration.deprecation: mapred.reduce.tasks.speculative.execution is deprecated. Instead, use mapreduce.reduce.speculative20/03/08 08:16:32 INFO Configuration.deprecation: mapred.min.split.size.per.node is deprecated. Instead, use mapreduce.input.fileinputformat.split.minsize.per.node20/03/08 08:16:32 INFO Configuration.deprecation: mapred.input.dir.recursive is deprecated. Instead, use mapreduce.input.fileinputformat.input.dir.recursive20/03/08 08:16:32 INFO Configuration.deprecation: mapred.min.split.size.per.rack is deprecated. Instead, use mapreduce.input.fileinputformat.split.minsize.per.rack20/03/08 08:16:32 INFO Configuration.deprecation: mapred.max.split.size is deprecated. Instead, use mapreduce.input.fileinputformat.split.maxsize20/03/08 08:16:32 INFO Configuration.deprecation: mapred.committer.job.setup.cleanup.needed is deprecated. Instead, use mapreduce.job.committer.setup.cleanup.neededLogging initialized using configuration in jar:file:/home/ec2-user/apache-hive-1.2.2-bin/lib/hive-common-1.2.2.jar!/hive-log4j.properties<span class="hljs-meta">hive&gt;</span><span class="bash"> </span></code></pre><h3 id="Hive-view视图处理"><a href="#Hive-view视图处理" class="headerlink" title="Hive view视图处理"></a>Hive view视图处理</h3><p>​    基础数据准备：</p><pre><code class="hljs shell"><span class="hljs-meta">hive&gt;</span><span class="bash"> show tables;</span>OKrecords2Time taken: 1.19 seconds, Fetched: 1 row(s)<span class="hljs-meta">hive&gt;</span><span class="bash"> DESCRIBE records2;</span>OKyear                    string                                      temperature             int                                         quality                 int                                         Time taken: 0.335 seconds, Fetched: 3 row(s)<span class="hljs-meta">hive&gt;</span><span class="bash"> select * from records2;</span>OK1950    0       11950    22      11950    -11     11949    111     11949    78      1</code></pre><p>​    视图处理：<br>​        视图是一种用select语句定义的“虚表”。视图可以用来以一种不同于磁盘实际存储形式把数据呈现给用户。<br>​        在Hive中，创建视图时并不把视图“物化”存储到磁盘上。相反，视图的select语句只是在执行引用视图的语句时才执行。</p><h4 id="Hive视图命令"><a href="#Hive视图命令" class="headerlink" title="Hive视图命令"></a>Hive视图命令</h4><pre><code class="hljs shell"><span class="hljs-meta">hive&gt;</span><span class="bash"> create view valid_records</span>    &gt; as    &gt; select *    &gt; from records2    &gt; where temperature != 9999    &gt;   and (quality == 0 or quality == 1 or quality == 4 or quality == 5 or quality == 9);OKTime taken: 0.445 seconds<span class="hljs-meta">hive&gt;</span><span class="bash"> show tables;</span>OKrecords2valid_recordsTime taken: 0.024 seconds, Fetched: 2 row(s)</code></pre><p>​    创建视图时并不执行查询，查询只是存储在metastore中。show tables命令的输出结果里包括视图。</p><h4 id="基于视图创建视图"><a href="#基于视图创建视图" class="headerlink" title="基于视图创建视图"></a>基于视图创建视图</h4><pre><code class="hljs shell"><span class="hljs-meta">hive&gt;</span><span class="bash"> create view max_temperatures (year, max_temperature)</span>    &gt; as    &gt; select year, max(temperature) from valid_records    &gt; group by year;OKTime taken: 0.194 seconds</code></pre><p>​        执行视图查询：</p><pre><code class="hljs shell"><span class="hljs-meta">hive&gt;</span><span class="bash"> select year, avg(max_temperature)</span>    &gt; from max_temperatures    &gt; group by year;Query ID = ec2-user_20200308082637_09c36617-e7b1-472b-9bdb-6dbd5bc6cc45Total jobs = 1Launching Job 1 out of 1Number of reduce tasks not specified. Estimated from input data size: 1In order to change the average load for a reducer (in bytes):  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;In order to limit the maximum number of reducers:  set hive.exec.reducers.max=&lt;number&gt;In order to set a constant number of reducers:  set mapreduce.job.reduces=&lt;number&gt;Starting Job = job_1583654397381_0001, Tracking URL = http://ip-172-31-33-221.hadoop.com:8088/proxy/application_1583654397381_0001/Kill Command = /home/ec2-user/hadoop/hadoop-2.2.0/bin/hadoop job  -kill job_1583654397381_0001Hadoop job information for Stage-1: number of mappers: 1; number of reducers: 12020-03-08 08:27:07,873 Stage-1 map = 100%,  reduce = 100%, Cumulative CPU 3.01 secMapReduce Total cumulative CPU time: 3 seconds 10 msecEnded Job = job_1583654397381_0001MapReduce Jobs Launched: Stage-Stage-1: Map: 1  Reduce: 1   Cumulative CPU: 3.01 sec   HDFS Read: 9696 HDFS Write: 21 SUCCESSTotal MapReduce CPU Time Spent: 3 seconds 10 msecOK1949    111.01950    22.0Time taken: 30.676 seconds, Fetched: 2 row(s)</code></pre><h3 id="Hive子查询"><a href="#Hive子查询" class="headerlink" title="Hive子查询"></a>Hive子查询</h3><p>​    子查询是内嵌在另一个SQL语句中的SELECT语句。Hive对子查询的支持很有限。它只允许子查询出现在SELECT语句的FROM子句中。</p><pre><code class="hljs shell"><span class="hljs-meta">hive&gt;</span><span class="bash"> select year, avg(max_temperature)</span>    &gt; from (    &gt;   select year, max(temperature) as max_temperature    &gt;   from records2    &gt;   where temperature != 9999    &gt;     and (quality == 0 or quality == 1 or quality == 4 or quality == 5 or quality == 9)    &gt;   group by year    &gt; ) mt    &gt; group by year;Query ID = ec2-user_20200308091212_69c1fb51-255a-46fb-87e0-261456dcf0d8Total jobs = 1Launching Job 1 out of 1Number of reduce tasks not specified. Estimated from input data size: 1In order to change the average load for a reducer (in bytes):  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;In order to limit the maximum number of reducers:  set hive.exec.reducers.max=&lt;number&gt;In order to set a constant number of reducers:  set mapreduce.job.reduces=&lt;number&gt;Starting Job = job_1583654397381_0002, Tracking URL = http://ip-172-31-33-221.hadoop.com:8088/proxy/application_1583654397381_0002/Kill Command = /home/ec2-user/hadoop/hadoop-2.2.0/bin/hadoop job  -kill job_1583654397381_0002Hadoop job information for Stage-1: number of mappers: 1; number of reducers: 12020-03-08 09:12:36,282 Stage-1 map = 100%,  reduce = 100%, Cumulative CPU 2.9 secMapReduce Total cumulative CPU time: 2 seconds 900 msecEnded Job = job_1583654397381_0002MapReduce Jobs Launched: Stage-Stage-1: Map: 1  Reduce: 1   Cumulative CPU: 2.9 sec   HDFS Read: 9827 HDFS Write: 21 SUCCESSTotal MapReduce CPU Time Spent: 2 seconds 900 msecOK1949    111.01950    22.0Time taken: 23.871 seconds, Fetched: 2 row(s)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hive </tag>
            
            <tag> view </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins打包jar发布流程</title>
      <link href="2020/03/08/jenkins-jar-start/"/>
      <url>2020/03/08/jenkins-jar-start/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="jenkins打包jar发布流程"><a href="#jenkins打包jar发布流程" class="headerlink" title="jenkins打包jar发布流程"></a>jenkins打包jar发布流程</h2><h3 id="jenkins配置"><a href="#jenkins配置" class="headerlink" title="jenkins配置"></a>jenkins配置</h3><h4 id="新建jenkins任务"><a href="#新建jenkins任务" class="headerlink" title="新建jenkins任务"></a>新建jenkins任务</h4><p>​        jenkins -&gt; 新建任务 -&gt; 输入任务 -&gt; 构建一个自由风格的软件项目</p><p><img src="/2020/03/08/jenkins-jar-start/1.png" alt="Jenkins任务"></p><h4 id="jenkins任务配置"><a href="#jenkins任务配置" class="headerlink" title="jenkins任务配置"></a>jenkins任务配置</h4><p>​        任务 -&gt; General -&gt; 源码管理</p><p><img src="/2020/03/08/jenkins-jar-start/2.png" alt="源码管理"></p><p>​        Git的权限可以通过：添加 按钮来添加，可以是Username with password，也可以是SSH Username with private key类型</p><h4 id="添加Maven目标"><a href="#添加Maven目标" class="headerlink" title="添加Maven目标"></a>添加Maven目标</h4><p>​        增加构建步骤 -&gt; 调用顶层Maven目标。<strong>（jenkins服务器中要事先安装好Maven）</strong><br>​        目标：clean install<br>​        POM：指向工程中的pom.xml文件。<strong>（pom.xml路径要对！）</strong></p><p><img src="/2020/03/08/jenkins-jar-start/3.png" alt="maven属性配置"></p><h4 id="添加执行Shell"><a href="#添加执行Shell" class="headerlink" title="添加执行Shell"></a>添加执行Shell</h4><p>​        增加构建步骤 -&gt; 执行Shell</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span>cd /home/jenkins/shell/microservice-discovery-eureka./jar-stop.sh./jar-replace.shecho &quot;Execute shell Finish&quot;BUILD_ID=dontKillMe nohup /home/jenkins/shell/microservice-discovery-eureka/jar-start.sh &amp;</code></pre><p>​        在jenkins服务器中相应目录中建立相应文件，注意 *.sh文件权限要修改</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> chmod 777 *.sh</span></code></pre><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /home/jenkins/shell/microservice-discovery-eureka</span>[root@VM_0_16_centos microservice-discovery-eureka]# ll总用量 12-rwxrwxrwx 1 root root 237 3月   5 18:47 jar-replace.sh-rwxrwxrwx 1 root root  78 3月   5 18:03 jar-start.sh-rwxrwxrwx 1 root root 253 3月   5 18:44 jar-stop.sh</code></pre><p>​        jar-stop.sh：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> vim jar-stop.sh</span>echo &quot;Stopping microservice-discovery-eureka webapp&quot;pid=`ps -ef | grep microservice-discovery-eureka*.jar | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`echo &quot;pid:&quot; $pidif [ -n &quot;$pid&quot; ]then  echo &quot;kill -9 pid:&quot; $pid  kill -9 $pidecho &quot;webapp jar stopped!&quot;fi</code></pre><p>​        jar-replace.sh：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> vim jar-replace.sh</span>cp /home/jenkins/jenkins/workspace/github-tasks/adv-springcloud/spring-cloud-microservice-study/microservice-discovery-eureka/target/microservice-discovery-eureka-1.0-SNAPSHOT.jar /home/jenkins/webappecho &quot;webapp jar replaced success!&quot;</code></pre><p>​        jar-start.sh：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> vim jar-start.sh</span>java -jar /home/jenkins/webapp/microservice-discovery-eureka-1.0-SNAPSHOT.jar</code></pre><h3 id="jenkins发布操作"><a href="#jenkins发布操作" class="headerlink" title="jenkins发布操作"></a>jenkins发布操作</h3><p>​    任务 -&gt; 立即构建<br>​        该jenkins任务开始构建</p><p>​    Build History -&gt; 构建历史 ：可以查看当前正常构建的jenkins任务</p><img src="/2020/03/08/jenkins-jar-start/4.png" alt="jenkins构建" style="zoom:80%;"><p>​    点击构建历史：进入日志控制台，查看当前任务执行日志</p><img src="/2020/03/08/jenkins-jar-start/5.png" alt="jenkins日志" style="zoom:80%;"><p>​    进入服务器查看jar启动情况</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /home/jenkins/webapp</span>[root@VM_0_16_centos webapp]# ll总用量 40088-rw-r--r-- 1 root root 41047268 3月   8 11:17 microservice-discovery-eureka-1.0-SNAPSHOT.jar[root@VM_0_16_centos webapp]# jps1344 jenkins.war4916 microservice-discovery-eureka-1.0-SNAPSHOT.jar26791 Jps[root@VM_0_16_centos webapp]# ps -ef | grep jarroot      1344     1  3 3月07 ?       00:53:33 /usr/local/soft/jdk1.8.0_212/bin/java -Dcom.sun.akuma.Daemon=daemonized -Djava.awt.headless=true -DJENKINS_HOME=/home/jenkins/jenkins -jar /usr/lib/jenkins/jenkins.war --logfile=/var/log/jenkins/jenkins.log --webroot=/var/cache/jenkins/war --daemon --httpPort=8190 --debug=5 --handlerCountMax=100 --handlerCountMaxIdle=20root      4915     1  0 11:17 ?        00:00:00 /bin/sh /home/jenkins/shell/microservice-discovery-eureka/jar-start.shroot      4916  4915  1 11:17 ?        00:00:28 java -jar /home/jenkins/webapp/microservice-discovery-eureka-1.0-SNAPSHOT.jarroot     26945   323  0 12:00 pts/0    00:00:00 grep --color=auto jar</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> jar </tag>
            
            <tag> spring cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo使用命令</title>
      <link href="2020/03/07/hexo-info/"/>
      <url>2020/03/07/hexo-info/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="hljs bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="hljs bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="hljs bash">$ hexo deploy</code></pre><h3 id="Hexo-themes"><a href="#Hexo-themes" class="headerlink" title="Hexo themes"></a>Hexo themes</h3><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/dusign/hexo-theme-snail.git themes/snail</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> command </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins-linux环境搭建</title>
      <link href="2020/03/07/jenkins-linux-install/"/>
      <url>2020/03/07/jenkins-linux-install/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2 id="jenkins-linux环境搭建"><a href="#jenkins-linux环境搭建" class="headerlink" title="jenkins-linux环境搭建"></a>jenkins-linux环境搭建</h2><h3 id="jenkins安装"><a href="#jenkins安装" class="headerlink" title="jenkins安装"></a>jenkins安装</h3><p>下载地址：</p><pre><code class="hljs http"><span class="hljs-attribute">https://pkg.jenkins.io/redhat-stable/</span></code></pre><p>安装jenkins：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> rpm -ivh jenkins-2.164.3-1.1.noarch.rpm</span></code></pre><p>查看jenkins默认安装路径：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> rpm -ql jenkins</span>[root@VM_0_16_centos ~]# rpm -ql jenkins/etc/init.d/jenkins/etc/logrotate.d/jenkins/etc/sysconfig/jenkins/usr/lib/jenkins/usr/lib/jenkins/jenkins.war/usr/sbin/rcjenkins/var/cache/jenkins/var/lib/jenkins/var/log/jenkins</code></pre><h3 id="jenkins启动相关配置"><a href="#jenkins启动相关配置" class="headerlink" title="jenkins启动相关配置"></a>jenkins启动相关配置</h3><p>​    修改jenkins默认工作目录：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> vim /etc/sysconfig/jenkins</span><span class="hljs-meta">#</span><span class="bash"> JENKINS_HOME=<span class="hljs-string">&quot;/var/lib/jenkins&quot;</span></span>JENKINS_HOME=&quot;/home/jenkins/jenkins&quot;</code></pre><p>​    修改jenkins默认用户以及端口号：</p><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">JENKINS_USER=<span class="hljs-string">&quot;jenkins&quot;</span></span>JENKINS_USER=&quot;root&quot;<span class="hljs-meta">#</span><span class="bash"> Port Jenkins is listening on.</span><span class="hljs-meta">#</span><span class="bash"> Set to -1 to <span class="hljs-built_in">disable</span></span><span class="hljs-meta">#</span>JENKINS_PORT=&quot;8190&quot;</code></pre><p>​    修改jenkins所需要的jdk：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> vim /etc/init.d/jenkins</span><span class="hljs-meta">#</span><span class="bash"> see http://www.nabble.com/guinea-pigs-wanted-----Hudson-RPM-for-RedHat-Linux-td25673707.html</span>candidates=&quot;/usr/local/soft/jdk1.8.0_212/bin/java/etc/alternatives/java/usr/lib/jvm/java-1.8.0/bin/java/usr/lib/jvm/jre-1.8.0/bin/java/usr/lib/jvm/java-1.7.0/bin/java/usr/lib/jvm/jre-1.7.0/bin/java/usr/bin/java&quot;</code></pre><p>​    启动jenkins：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> service jenkins start</span></code></pre><h3 id="访问jenkins"><a href="#访问jenkins" class="headerlink" title="访问jenkins"></a>访问jenkins</h3><h4 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h4><pre><code class="hljs http"><span class="hljs-attribute">http://152.136.104.216:8190/</span></code></pre><p>​    解锁jenkins：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> cat /home/jenkins/jenkins/secrets/initialAdminPassword</span></code></pre><p>​    第一次解锁后，<u><strong>设置jenkins登录用户与密码（牢记！）</strong></u></p><p>​    第一次安装必须插件过慢时，停止jenkins服务，进入jenkins工作目录，修改jenkins镜像源</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /home/jenkins/jenkins/updates</span>sed -i &#x27;s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27; default.json &amp;&amp; sed -i &#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27; default.json</code></pre><p>​    然后启动jenkins服务，进入jenkins后，手动安装插件：</p><p>​    如：系统管理 -&gt; 插件管理 -&gt; 过滤搜索：git</p><p><img src="/2020/03/07/jenkins-linux-install/1.png" alt="jenkins插件"></p><h3 id="jenkins必要工具配置"><a href="#jenkins必要工具配置" class="headerlink" title="jenkins必要工具配置"></a>jenkins必要工具配置</h3><p>​    安装git：</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> yum install git</span><span class="hljs-meta">$</span><span class="bash"> whereis git</span>git: /usr/bin/git /usr/share/man/man1/git.1.gz</code></pre><h4 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h4><p><img src="/2020/03/07/jenkins-linux-install/2.png" alt="git全局配置"></p><h4 id="jdk配置"><a href="#jdk配置" class="headerlink" title="jdk配置"></a>jdk配置</h4><p><img src="/2020/03/07/jenkins-linux-install/3.png" alt="jdk配置"></p><h4 id="Maven安装"><a href="#Maven安装" class="headerlink" title="Maven安装"></a>Maven安装</h4><p><img src="/2020/03/07/jenkins-linux-install/4.png" alt="Maven配置"></p>]]></content>
      
      
      
        <tags>
            
            <tag> jenkins linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-github搭建博客</title>
      <link href="2020/03/06/hexo-github-markdown-install/"/>
      <url>2020/03/06/hexo-github-markdown-install/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-github搭建博客"><a href="#hexo-github搭建博客" class="headerlink" title="hexo-github搭建博客"></a>hexo-github搭建博客</h2><p>[TOC]</p><h3 id="下载安装npm、hexo"><a href="#下载安装npm、hexo" class="headerlink" title="下载安装npm、hexo"></a>下载安装npm、hexo</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm install -g hexo</span></code></pre><p>​    进入hexo工作路径:</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /Users/xxx/Documents/hexo</span><span class="hljs-meta">$</span><span class="bash"> hexo init</span></code></pre><p>​    hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：</p><p><img src="/2020/03/06/hexo-github-markdown-install/1.png" alt="hexo目录路径"></p><h3 id="配置github"><a href="#配置github" class="headerlink" title="配置github"></a>配置github</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> ~/.ssh/</span><span class="hljs-meta">$</span><span class="bash"> cat id_rsa.pub</span></code></pre><p>​    将ssh的密钥内容拷贝到github中配置好密钥信息</p><p><img src="/2020/03/06/hexo-github-markdown-install/2.png" alt="ssh密钥github配置"></p><h4 id="测试ssh是否成功"><a href="#测试ssh是否成功" class="headerlink" title="测试ssh是否成功"></a>测试ssh是否成功</h4><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ssh -T git@github.com</span>`Hi xxxxx! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.`</code></pre><h4 id="配置用户名"><a href="#配置用户名" class="headerlink" title="配置用户名"></a>配置用户名</h4><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git config --global user.name <span class="hljs-string">&quot;liuxianan&quot;</span>// 你的github用户名，非昵称</span><span class="hljs-meta">$</span><span class="bash"> git config --global user.email <span class="hljs-string">&quot;xxx@qq.com&quot;</span>// 填写你的github注册邮箱</span></code></pre><h4 id="创建代码仓库"><a href="#创建代码仓库" class="headerlink" title="创建代码仓库"></a>创建代码仓库</h4><p>​    仓库地址为：<a href="https://github.com/LingChenBill/LingChenBill.github.io.git">https://github.com/LingChenBill/LingChenBill.github.io.git</a></p><p>​    Hexo中配置github（在hexo工作路径中）</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> vim _config.yml</span></code></pre><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><span class="hljs-comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:LingChenBill/LingChenBill.github.io.git</span>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span></code></pre><p>​    为了能够提交代码至github中，还需要安装插件</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></code></pre><p>​    输入<code>hexo d</code>就会将本次有改动的代码全部提交</p><h3 id="配置Hexo主题"><a href="#配置Hexo主题" class="headerlink" title="配置Hexo主题"></a>配置Hexo主题</h3><p>​    点击官方hexo主题:<a href="https://hexo.io/themes/">https://hexo.io/themes/</a></p><p>​    进入Hexo工作路径中，下载主题到themes文件夹中</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> git <span class="hljs-built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia</span></code></pre><p><img src="/2020/03/06/hexo-github-markdown-install/3.png" alt="主题路径"></p><p>​    更换主题需要修改配置文件</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> vim _config.yml</span></code></pre><pre><code class="hljs yaml"><span class="hljs-comment"># Extensions</span><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><span class="hljs-attr">theme:</span> <span class="hljs-number">3</span><span class="hljs-string">-hexo</span></code></pre><h3 id="创建Hexo博客"><a href="#创建Hexo博客" class="headerlink" title="创建Hexo博客"></a>创建Hexo博客</h3><pre><code class="hljs shell">hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）hexo deploy #部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本</code></pre><p>​    缩写命令</p><pre><code class="hljs shell">hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy</code></pre><p>​    新建文章后，可以运行</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo clean</span><span class="hljs-meta">$</span><span class="bash"> hexo g</span><span class="hljs-meta">$</span><span class="bash"> hexo s</span></code></pre><p>​    再浏览器端：</p><p>​    <code>http://localhost:4000/</code></p><p>​    进行预览md文件效果</p><p>​    ps: 编写md类型的博客，可以使用Typora编辑器。效果更佳。</p><h3 id="hexo图片无法显示解决方案"><a href="#hexo图片无法显示解决方案" class="headerlink" title="hexo图片无法显示解决方案"></a>hexo图片无法显示解决方案</h3><p>​    <code>$ vim _config.yml</code></p><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span></code></pre><p>​    下载图片插件</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> npm install hexo-asset-image --save</span></code></pre><p>​    当使用 hexo new title 创建文章时，将同时在 source/_post 文件夹中生成一个与 title 同名的文件夹，我们只需将图片    放进此文件夹中，然后在文章中通过 Markdown 语法进行引用即可。</p><p>​    例如，在资源文件夹（就是那个与 title 同名的文件夹）中添加图片 example.PNG，则可以在对应的文章中使用以下语    句添加图片</p><p>​    <code>![示例图片](title/example.PNG &quot;示例图片&quot;) </code></p><p>​    修改图片插件的index.js</p><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> /Users/xxxx/Documents/hexo/node_modules/hexo-asset-image/</span></code></pre><p>​    将index.js文件内容替换为以下:</p><pre><code class="hljs js"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<span class="hljs-keyword">var</span> cheerio = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cheerio&#x27;</span>);<span class="hljs-comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getPosition</span>(<span class="hljs-params">str, m, i</span>) </span>&#123;<span class="hljs-keyword">return</span> str.split(m, i).join(m).length;&#125;<span class="hljs-keyword">var</span> version = <span class="hljs-built_in">String</span>(hexo.version).split(<span class="hljs-string">&#x27;.&#x27;</span>);hexo.extend.filter.register(<span class="hljs-string">&#x27;after_post_render&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<span class="hljs-keyword">var</span> config = hexo.config;<span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params">config.post_asset_folder</span>)</span>&#123;    <span class="hljs-keyword">var</span> link = data.permalink;<span class="hljs-keyword">if</span>(version.length &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-built_in">Number</span>(version[<span class="hljs-number">0</span>]) == <span class="hljs-number">3</span>)    <span class="hljs-keyword">var</span> beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>;<span class="hljs-keyword">else</span>    <span class="hljs-keyword">var</span> beginPos = getPosition(link, <span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">3</span>) + <span class="hljs-number">1</span>;<span class="hljs-comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span><span class="hljs-keyword">var</span> endPos = link.lastIndexOf(<span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-number">1</span>;link = link.substring(beginPos, endPos);<span class="hljs-keyword">var</span> toprocess = [<span class="hljs-string">&#x27;excerpt&#x27;</span>, <span class="hljs-string">&#x27;more&#x27;</span>, <span class="hljs-string">&#x27;content&#x27;</span>];<span class="hljs-function"><span class="hljs-title">for</span>(<span class="hljs-params"><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; toprocess.length; i++</span>)</span>&#123;    <span class="hljs-keyword">var</span> key = toprocess[i];    <span class="hljs-keyword">var</span> $ = cheerio.load(data[key], &#123;    ignoreWhitespace: <span class="hljs-literal">false</span>,    xmlMode: <span class="hljs-literal">false</span>,    lowerCaseTags: <span class="hljs-literal">false</span>,    decodeEntities: <span class="hljs-literal">false</span>    &#125;);    $(<span class="hljs-string">&#x27;img&#x27;</span>).each(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;    <span class="hljs-keyword">if</span> ($(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>))&#123;        <span class="hljs-comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span>        <span class="hljs-keyword">var</span> src = $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>);        <span class="hljs-keyword">if</span>(!<span class="hljs-regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;            !<span class="hljs-regexp">/^\s*\//</span>.test(src)) &#123;            <span class="hljs-comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span>            <span class="hljs-comment">// In addition, to support multi-level local directory.</span>            <span class="hljs-keyword">var</span> linkArray = link.split(<span class="hljs-string">&#x27;/&#x27;</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)</span>&#123;            <span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span>;            &#125;);            <span class="hljs-keyword">var</span> srcArray = src.split(<span class="hljs-string">&#x27;/&#x27;</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">elem</span>)</span>&#123;            <span class="hljs-keyword">return</span> elem != <span class="hljs-string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="hljs-string">&#x27;.&#x27;</span>;            &#125;);            <span class="hljs-keyword">if</span>(srcArray.length &gt; <span class="hljs-number">1</span>)            srcArray.shift();            src = srcArray.join(<span class="hljs-string">&#x27;/&#x27;</span>);            $(<span class="hljs-built_in">this</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>, config.root + link + src);            <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);        &#125;    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info(<span class="hljs-string">&quot;no src attr, skipped...&quot;</span>);        <span class="hljs-built_in">console</span>.info&amp;&amp;<span class="hljs-built_in">console</span>.info($(<span class="hljs-built_in">this</span>));    &#125;    &#125;);    data[key] = $.html();&#125;&#125;&#125;);</code></pre><h3 id="将新建的hexo博客上传到github中"><a href="#将新建的hexo博客上传到github中" class="headerlink" title="将新建的hexo博客上传到github中"></a>将新建的hexo博客上传到github中</h3><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> hexo d -g</span></code></pre><p><img src="/2020/03/06/hexo-github-markdown-install/4.png" alt="github上传工作目录"></p><p>​    再在浏览器访问:</p><p>​    <a href="https://lingchenbill.github.io/">https://lingchenbill.github.io/</a></p><p><img src="/2020/03/06/hexo-github-markdown-install/5.png" alt="浏览器地址"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
